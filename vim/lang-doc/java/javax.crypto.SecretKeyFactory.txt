*javax.crypto.SecretKeyFactory* *SecretKeyFactory* This class represents a facto

public class SecretKeyFactory
  extends    |java.lang.Object|

|javax.crypto.SecretKeyFactory_Description|
|javax.crypto.SecretKeyFactory_Fields|
|javax.crypto.SecretKeyFactory_Constructors|
|javax.crypto.SecretKeyFactory_Methods|

================================================================================

*javax.crypto.SecretKeyFactory_Constructors*
|javax.crypto.SecretKeyFactory(SecretKeyFactorySpi,Provider,String)|Creates a S

*javax.crypto.SecretKeyFactory_Methods*
|javax.crypto.SecretKeyFactory.generateSecret(KeySpec)|Generates a SecretKey ob
|javax.crypto.SecretKeyFactory.getAlgorithm()|Returns the algorithm name of thi
|javax.crypto.SecretKeyFactory.getInstance(String)|Returns a SecretKeyFactory o
|javax.crypto.SecretKeyFactory.getInstance(String,Provider)|Returns a SecretKey
|javax.crypto.SecretKeyFactory.getInstance(String,String)|Returns a SecretKeyFa
|javax.crypto.SecretKeyFactory.getKeySpec(SecretKey,Class)|Returns a specificat
|javax.crypto.SecretKeyFactory.getProvider()|Returns the provider of this Secre
|javax.crypto.SecretKeyFactory.translateKey(SecretKey)|Translates a key object,

*javax.crypto.SecretKeyFactory_Description*

This class represents a factory for secret keys. 

Key factories are used to convert keys (opaque cryptographic keys of type Key) 
into key specifications (transparent representations of the underlying key 
material), and vice versa. Secret key factories operate only on secret 
(symmetric) keys. 

Key factories are bi-directional, i.e., they allow to build an opaque key 
object from a given key specification (key material), or to retrieve the 
underlying key material of a key object in a suitable format. 

Application developers should refer to their provider's documentation to find 
out which key specifications are supported by the 
generateSecret(|javax.crypto.SecretKeyFactory|) and 
getKeySpec(|javax.crypto.SecretKeyFactory|) methods. For example, the DES 
secret-key factory supplied by the "SunJCE" provider supports DESKeySpec as a 
transparent representation of DES keys, and that provider's secret-key factory 
for Triple DES keys supports DESedeKeySpec as a transparent representation of 
Triple DES keys. 

Every implementation of the Java platform is required to support the following 
standard SecretKeyFactory algorithms: 

DES DESede 

These algorithms are described in the <a href= 
"/../technotes/guides/security/StandardNames.html#SecretKeyFactory"> 
SecretKeyFactory section of the Java Cryptography Architecture Standard 
Algorithm Name Documentation. Consult the release documentation for your 
implementation to see if any other algorithms are supported. 



*javax.crypto.SecretKeyFactory(SecretKeyFactorySpi,Provider,String)*

protected SecretKeyFactory(
  javax.crypto.SecretKeyFactorySpi keyFacSpi,
  java.security.Provider provider,
  java.lang.String algorithm)

Creates a SecretKeyFactory object. 

    keyFacSpi - the delegate 
    provider - the provider 
    algorithm - the secret-key algorithm 

*javax.crypto.SecretKeyFactory.generateSecret(KeySpec)*

public final |javax.crypto.SecretKey| generateSecret(java.security.spec.KeySpec keySpec)
  throws |java.security.spec.InvalidKeySpecException|
         
Generates a SecretKey object from the provided key specification (key 
material). 


    keySpec - the specification (key material) of the secret key 

    Returns: the secret key 

*javax.crypto.SecretKeyFactory.getAlgorithm()*

public final |java.lang.String| getAlgorithm()

Returns the algorithm name of this SecretKeyFactory object. 

This is the same name that was specified in one of the getInstance calls that 
created this SecretKeyFactory object. 



    Returns: the algorithm name of this SecretKeyFactory object. 

*javax.crypto.SecretKeyFactory.getInstance(String)*

public static final |javax.crypto.SecretKeyFactory| getInstance(java.lang.String algorithm)
  throws |java.security.NoSuchAlgorithmException|
         
Returns a SecretKeyFactory object that converts secret keys of the specified 
algorithm. 

This method traverses the list of registered security Providers, starting with 
the most preferred Provider. A new SecretKeyFactory object encapsulating the 
SecretKeyFactorySpi implementation from the first Provider that supports the 
specified algorithm is returned. 

Note that the list of registered providers may be retrieved via the 
Security.getProviders()(|java.security.Security|) method. 


    algorithm - the standard name of the requested secret-key algorithm. See the 
       SecretKeyFactory section in the Java Cryptography Architecture Standard 
       Algorithm Name Documentation for information about standard algorithm 
       names. 

    Returns: the new SecretKeyFactory object. 

*javax.crypto.SecretKeyFactory.getInstance(String,Provider)*

public static final |javax.crypto.SecretKeyFactory| getInstance(
  java.lang.String algorithm,
  java.security.Provider provider)
  throws |java.security.NoSuchAlgorithmException|
         
Returns a SecretKeyFactory object that converts secret keys of the specified 
algorithm. 

A new SecretKeyFactory object encapsulating the SecretKeyFactorySpi 
implementation from the specified Provider object is returned. Note that the 
specified Provider object does not have to be registered in the provider list. 


    algorithm - the standard name of the requested secret-key algorithm. See the 
       SecretKeyFactory section in the Java Cryptography Architecture Standard 
       Algorithm Name Documentation for information about standard algorithm 
       names. 
    provider - the provider. 

    Returns: the new SecretKeyFactory object. 

*javax.crypto.SecretKeyFactory.getInstance(String,String)*

public static final |javax.crypto.SecretKeyFactory| getInstance(
  java.lang.String algorithm,
  java.lang.String provider)
  throws |java.security.NoSuchAlgorithmException|
         |java.security.NoSuchProviderException|
         
Returns a SecretKeyFactory object that converts secret keys of the specified 
algorithm. 

A new SecretKeyFactory object encapsulating the SecretKeyFactorySpi 
implementation from the specified provider is returned. The specified provider 
must be registered in the security provider list. 

Note that the list of registered providers may be retrieved via the 
Security.getProviders()(|java.security.Security|) method. 


    algorithm - the standard name of the requested secret-key algorithm. See the 
       SecretKeyFactory section in the Java Cryptography Architecture Standard 
       Algorithm Name Documentation for information about standard algorithm 
       names. 
    provider - the name of the provider. 

    Returns: the new SecretKeyFactory object. 

*javax.crypto.SecretKeyFactory.getKeySpec(SecretKey,Class)*

public final |java.security.spec.KeySpec| getKeySpec(
  javax.crypto.SecretKey key,
  java.lang.Class keySpec)
  throws |java.security.spec.InvalidKeySpecException|
         
Returns a specification (key material) of the given key object in the requested 
format. 


    key - the key 
    keySpec - the requested format in which the key material shall be returned 

    Returns: the underlying key specification (key material) in the requested format 

*javax.crypto.SecretKeyFactory.getProvider()*

public final |java.security.Provider| getProvider()

Returns the provider of this SecretKeyFactory object. 



    Returns: the provider of this SecretKeyFactory object 

*javax.crypto.SecretKeyFactory.translateKey(SecretKey)*

public final |javax.crypto.SecretKey| translateKey(javax.crypto.SecretKey key)
  throws |java.security.InvalidKeyException|
         
Translates a key object, whose provider may be unknown or potentially 
untrusted, into a corresponding key object of this secret-key factory. 


    key - the key whose provider is unknown or untrusted 

    Returns: the translated key 


