*java.lang.Boolean* *Boolean* The Boolean class wraps a value of the primitive t

public final class Boolean
  extends    |java.lang.Object|
  implements |java.io.Serializable|
             |java.lang.Comparable|

|java.lang.Boolean_Description|
|java.lang.Boolean_Fields|
|java.lang.Boolean_Constructors|
|java.lang.Boolean_Methods|

================================================================================

*java.lang.Boolean_Fields*
|java.lang.Boolean_java.lang.Boolean.FALSE|
|java.lang.Boolean_java.lang.Boolean.TRUE|
|java.lang.Class<java.lang.Boolean>_java.lang.Boolean.TYPE|

*java.lang.Boolean_Constructors*
|java.lang.Boolean(boolean)|Allocates aBooleanobject representing thevalueargum
|java.lang.Boolean(String)|Allocates aBooleanobject representing the valuetruei

*java.lang.Boolean_Methods*
|java.lang.Boolean.booleanValue()|Returns the value of thisBooleanobject as a b
|java.lang.Boolean.compare(boolean,boolean)|Compares twobooleanvalues.
|java.lang.Boolean.compareTo(Boolean)|Compares thisBooleaninstance with another
|java.lang.Boolean.equals(Object)|Returnstrueif and only if the argument is not
|java.lang.Boolean.getBoolean(String)|Returnstrueif and only if the system prop
|java.lang.Boolean.hashCode()|Returns a hash code for thisBooleanobject.
|java.lang.Boolean.parseBoolean(String)|Parses the string argument as a boolean
|java.lang.Boolean.toString()|Returns aStringobject representing this Boolean's
|java.lang.Boolean.toString(boolean)|Returns aStringobject representing the spe
|java.lang.Boolean.valueOf(boolean)|Returns aBooleaninstance representing the s
|java.lang.Boolean.valueOf(String)|Returns aBooleanwith a value represented by 

*java.lang.Boolean_Description*

The Boolean class wraps a value of the primitive typebooleanin an object. An 
object of typeBooleancontains a single field whose type isboolean. 

In addition, this class provides many methods for converting abooleanto 
aStringand aStringto aboolean, as well as other constants and methods useful 
when dealing with aboolean. 



*java.lang.Boolean_java.lang.Boolean.FALSE*

TheBooleanobject corresponding to the primitive valuefalse. 


*java.lang.Boolean_java.lang.Boolean.TRUE*

TheBooleanobject corresponding to the primitive valuetrue. 


*java.lang.Class<java.lang.Boolean>_java.lang.Boolean.TYPE*

The Class object representing the primitive type boolean. 



*java.lang.Boolean(boolean)*

public Boolean(boolean value)

Allocates aBooleanobject representing thevalueargument. 

Note: It is rarely appropriate to use this constructor. Unless a new instance 
is required, the static factory (|java.lang.Boolean|) is generally a better 
choice. It is likely to yield significantly better space and time performance. 

    value - the value of the {@code Boolean}. 

*java.lang.Boolean(String)*

public Boolean(java.lang.String s)

Allocates aBooleanobject representing the valuetrueif the string argument is 
notnulland is equal, ignoring case, to the string"true". Otherwise, allocate 
aBooleanobject representing the valuefalse. Examples:new 
Boolean("True")produces aBooleanobject that representstrue.new 
Boolean("yes")produces aBooleanobject that representsfalse. 

    s - the string to be converted to a {@code Boolean}. 

*java.lang.Boolean.booleanValue()*

public boolean booleanValue()

Returns the value of thisBooleanobject as a boolean primitive. 



    Returns: the primitive {@code boolean} value of this object. 

*java.lang.Boolean.compare(boolean,boolean)*

public static int compare(
  boolean x,
  boolean y)

Compares twobooleanvalues. The value returned is identical to what would be 
returned by: 

Boolean.valueOf(x).compareTo(Boolean.valueOf(y)) 


    x - the first {@code boolean} to compare 
    y - the second {@code boolean} to compare 

    Returns: the value {@code 0} if {@code x == y}; a value less than {@code 0} if {@code !x 
             y}; and a value greater than {@code 0} if {@code x !y} 

*java.lang.Boolean.compareTo(Boolean)*

public int compareTo(java.lang.Boolean b)

Compares thisBooleaninstance with another. 


    b - the {@code Boolean} instance to be compared 

    Returns: zero if this object represents the same boolean value as the argument; a 
             positive value if this object represents true and the argument 
             represents false; and a negative value if this object represents 
             false and the argument represents true 

*java.lang.Boolean.equals(Object)*

public boolean equals(java.lang.Object obj)

Returnstrueif and only if the argument is notnulland is aBooleanobject that 
represents the samebooleanvalue as this object. 


    obj - the object to compare with. 

    Returns: {@code true} if the Boolean objects represent the same value; {@code false} 
             otherwise. 

*java.lang.Boolean.getBoolean(String)*

public static boolean getBoolean(java.lang.String name)

Returnstrueif and only if the system property named by the argument exists and 
is equal to the string"true". (Beginning with version 1.0.2 of the JavaTM 
platform, the test of this string is case insensitive.) A system property is 
accessible throughgetProperty, a method defined by theSystemclass. 

If there is no property with the specified name, or if the specified name is 
empty or null, thenfalseis returned. 


    name - the system property name. 

    Returns: the {@code boolean} value of the system property. 

*java.lang.Boolean.hashCode()*

public int hashCode()

Returns a hash code for thisBooleanobject. 



    Returns: the integer {@code 1231} if this object represents {@code true}; returns the 
             integer {@code 1237} if this object represents {@code false}. 

*java.lang.Boolean.parseBoolean(String)*

public static boolean parseBoolean(java.lang.String s)

Parses the string argument as a boolean. Thebooleanreturned represents the 
valuetrueif the string argument is notnulland is equal, ignoring case, to the 
string"true". Example:Boolean.parseBoolean("True")returnstrue. 
Example:Boolean.parseBoolean("yes")returnsfalse. 


    s - the {@code String} containing the boolean representation to be parsed 

    Returns: the boolean represented by the string argument 

*java.lang.Boolean.toString()*

public |java.lang.String| toString()

Returns aStringobject representing this Boolean's value. If this object 
represents the valuetrue, a string equal to"true"is returned. Otherwise, a 
string equal to"false"is returned. 



    Returns: a string representation of this object. 

*java.lang.Boolean.toString(boolean)*

public static |java.lang.String| toString(boolean b)

Returns aStringobject representing the specified boolean. If the specified 
boolean istrue, then the string"true"will be returned, otherwise the 
string"false"will be returned. 


    b - the boolean to be converted 

    Returns: the string representation of the specified {@code boolean} 

*java.lang.Boolean.valueOf(boolean)*

public static |java.lang.Boolean| valueOf(boolean b)

Returns aBooleaninstance representing the specifiedbooleanvalue. If the 
specifiedbooleanvalue istrue, this method returnsBoolean.TRUE; if it isfalse, 
this method returnsBoolean.FALSE. If a newBooleaninstance is not required, this 
method should generally be used in preference to the constructor 
(|java.lang.Boolean|) , as this method is likely to yield significantly better 
space and time performance. 


    b - a boolean value. 

    Returns: a {@code Boolean} instance representing {@code b}. 

*java.lang.Boolean.valueOf(String)*

public static |java.lang.Boolean| valueOf(java.lang.String s)

Returns aBooleanwith a value represented by the specified string. 
TheBooleanreturned represents a true value if the string argument is notnulland 
is equal, ignoring case, to the string"true". 


    s - a string. 

    Returns: the {@code Boolean} value represented by the string. 


