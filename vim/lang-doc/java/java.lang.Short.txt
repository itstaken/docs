*java.lang.Short* *Short* TheShortclass wraps a value of primitive typeshortin a

public final class Short
  extends    |java.lang.Number|
  implements |java.lang.Comparable|

|java.lang.Short_Description|
|java.lang.Short_Fields|
|java.lang.Short_Constructors|
|java.lang.Short_Methods|

================================================================================

*java.lang.Short_Fields*
|short_java.lang.Short.MAX_VALUE|
|short_java.lang.Short.MIN_VALUE|
|int_java.lang.Short.SIZE|
|java.lang.Class<java.lang.Short>_java.lang.Short.TYPE|

*java.lang.Short_Constructors*
|java.lang.Short(short)|Constructs a newly allocatedShortobject that  represent
|java.lang.Short(String)|Constructs a newly allocatedShortobject that  represen

*java.lang.Short_Methods*
|java.lang.Short.byteValue()|Returns the value of thisShortas abyte.
|java.lang.Short.compare(short,short)|Compares twoshortvalues numerically.
|java.lang.Short.compareTo(Short)|Compares twoShortobjects numerically.
|java.lang.Short.decode(String)|Decodes aStringinto aShort.
|java.lang.Short.doubleValue()|Returns the value of thisShortas adouble.
|java.lang.Short.equals(Object)|Compares this object to the specified object.
|java.lang.Short.floatValue()|Returns the value of thisShortas afloat.
|java.lang.Short.hashCode()|Returns a hash code for thisShort; equal to the res
|java.lang.Short.intValue()|Returns the value of thisShortas anint.
|java.lang.Short.longValue()|Returns the value of thisShortas along.
|java.lang.Short.parseShort(String)|Parses the string argument as a signed deci
|java.lang.Short.parseShort(String,int)|Parses the string argument as a signeds
|java.lang.Short.reverseBytes(short)|Returns the value obtained by reversing th
|java.lang.Short.shortValue()|Returns the value of thisShortas ashort.
|java.lang.Short.toString()|Returns aStringobject representing thisShort's valu
|java.lang.Short.toString(short)|Returns a newStringobject representing the  sp
|java.lang.Short.valueOf(short)|Returns aShortinstance representing the specifi
|java.lang.Short.valueOf(String)|Returns aShortobject holding the  value given 
|java.lang.Short.valueOf(String,int)|Returns aShortobject holding the value  ex

*java.lang.Short_Description*

TheShortclass wraps a value of primitive typeshortin an object. An object of 
typeShortcontains a single field whose type isshort. 

In addition, this class provides several methods for converting ashortto 
aStringand aStringto ashort, as well as other constants and methods useful when 
dealing with ashort. 



*short_java.lang.Short.MAX_VALUE*

A constant holding the maximum value ashortcan have, 215-1. 


*short_java.lang.Short.MIN_VALUE*

A constant holding the minimum value ashortcan have, -215. 


*int_java.lang.Short.SIZE*

The number of bits used to represent ashortvalue in two's complement binary 
form. 


*java.lang.Class<java.lang.Short>_java.lang.Short.TYPE*

TheClassinstance representing the primitive typeshort. 



*java.lang.Short(short)*

public Short(short value)

Constructs a newly allocatedShortobject that represents the 
specifiedshortvalue. 

    value - the value to be represented by the {@code Short}. 

*java.lang.Short(String)*

public Short(java.lang.String s)
  throws |java.lang.NumberFormatException|
         
Constructs a newly allocatedShortobject that represents theshortvalue indicated 
by theStringparameter. The string is converted to ashortvalue in exactly the 
manner used by theparseShortmethod for radix 10. 

    s - the {@code String} to be converted to a {@code Short} 

*java.lang.Short.byteValue()*

public byte byteValue()

Returns the value of thisShortas abyte. 



*java.lang.Short.compare(short,short)*

public static int compare(
  short x,
  short y)

Compares twoshortvalues numerically. The value returned is identical to what 
would be returned by: 

Short.valueOf(x).compareTo(Short.valueOf(y)) 


    x - the first {@code short} to compare 
    y - the second {@code short} to compare 

    Returns: the value {@code 0} if {@code x == y}; a value less than {@code 0} if {@code x 
             y} 

*java.lang.Short.compareTo(Short)*

public int compareTo(java.lang.Short anotherShort)

Compares twoShortobjects numerically. 


    anotherShort - the {@code Short} to be compared. 

    Returns: the value {@code 0} if this {@code Short} is equal to the argument {@code 
             Short}; a value less than {@code 0} if this {@code Short} is 
             numerically less than the argument {@code Short}; and a value 
             greater than {@code 0} if this {@code Short} is numerically 
             greater than the argument {@code Short} (signed comparison). 

*java.lang.Short.decode(String)*

public static |java.lang.Short| decode(java.lang.String nm)
  throws |java.lang.NumberFormatException|
         
Decodes aStringinto aShort. Accepts decimal, hexadecimal, and octal numbers 
given by the following grammar: 



DecodableString: Signopt DecimalNumeral Signopt0xHexDigits Signopt0XHexDigits 
Signopt#HexDigits Signopt0OctalDigits 

Sign: -+ 

DecimalNumeral, HexDigits, and OctalDigits are as defined in section 3.10.1 of 
The Java Language Specification, except that underscores are not accepted 
between digits. 

The sequence of characters following an optional sign and/or radix specifier 
("0x", "0X", "#", or leading zero) is parsed as by theShort.parseShortmethod 
with the indicated radix (10, 16, or 8). This sequence of characters must 
represent a positive value or a (|java.lang.NumberFormatException|) will be 
thrown. The result is negated if first character of the specifiedStringis the 
minus sign. No whitespace characters are permitted in theString. 


    nm - the {@code String} to decode. 

    Returns: a {@code Short} object holding the {@code short} value represented by {@code 
             nm} 

*java.lang.Short.doubleValue()*

public double doubleValue()

Returns the value of thisShortas adouble. 



*java.lang.Short.equals(Object)*

public boolean equals(java.lang.Object obj)

Compares this object to the specified object. The result istrueif and only if 
the argument is notnulland is aShortobject that contains the sameshortvalue as 
this object. 


    obj - the object to compare with 

    Returns: {@code true} if the objects are the same; {@code false} otherwise. 

*java.lang.Short.floatValue()*

public float floatValue()

Returns the value of thisShortas afloat. 



*java.lang.Short.hashCode()*

public int hashCode()

Returns a hash code for thisShort; equal to the result of invokingintValue(). 



    Returns: a hash code value for this {@code Short} 

*java.lang.Short.intValue()*

public int intValue()

Returns the value of thisShortas anint. 



*java.lang.Short.longValue()*

public long longValue()

Returns the value of thisShortas along. 



*java.lang.Short.parseShort(String)*

public static short parseShort(java.lang.String s)
  throws |java.lang.NumberFormatException|
         
Parses the string argument as a signed decimalshort. The characters in the 
string must all be decimal digits, except that the first character may be an 
ASCII minus sign'-'('u002D') to indicate a negative value or an ASCII plus 
sign'+'('u002B') to indicate a positive value. The resultingshortvalue is 
returned, exactly as if the argument and the radix 10 were given as arguments 
to the (|java.lang.Short|) method. 


    s - a {@code String} containing the {@code short} representation to be parsed 

    Returns: the {@code short} value represented by the argument in decimal. 

*java.lang.Short.parseShort(String,int)*

public static short parseShort(
  java.lang.String s,
  int radix)
  throws |java.lang.NumberFormatException|
         
Parses the string argument as a signedshortin the radix specified by the second 
argument. The characters in the string must all be digits, of the specified 
radix (as determined by whether (|java.lang.Character|) returns a nonnegative 
value) except that the first character may be an ASCII minus sign'-'('u002D') 
to indicate a negative value or an ASCII plus sign'+'('u002B') to indicate a 
positive value. The resultingshortvalue is returned. 

An exception of typeNumberFormatExceptionis thrown if any of the following 
situations occurs: 

The first argument isnullor is a string of length zero. 

The radix is either smaller than (|java.lang.Character|) or larger than 
(|java.lang.Character|) . 

Any character of the string is not a digit of the specified radix, except that 
the first character may be a minus sign'-'('u002D') or plus sign'+'('u002B') 
provided that the string is longer than length 1. 

The value represented by the string is not a value of typeshort. 


    s - the {@code String} containing the {@code short} representation to be parsed 
    radix - the radix to be used while parsing {@code s} 

    Returns: the {@code short} represented by the string argument in the specified radix. 

*java.lang.Short.reverseBytes(short)*

public static short reverseBytes(short i)

Returns the value obtained by reversing the order of the bytes in the two's 
complement representation of the specifiedshortvalue. 



    Returns: the value obtained by reversing (or, equivalently, swapping) the bytes in the 
             specified {@code short} value. 

*java.lang.Short.shortValue()*

public short shortValue()

Returns the value of thisShortas ashort. 



*java.lang.Short.toString()*

public |java.lang.String| toString()

Returns aStringobject representing thisShort's value. The value is converted to 
signed decimal representation and returned as a string, exactly as if 
theshortvalue were given as an argument to the (|java.lang.Short|) method. 



    Returns: a string representation of the value of this object in base10. 

*java.lang.Short.toString(short)*

public static |java.lang.String| toString(short s)

Returns a newStringobject representing the specifiedshort. The radix is assumed 
to be 10. 


    s - the {@code short} to be converted 

    Returns: the string representation of the specified {@code short} 

*java.lang.Short.valueOf(short)*

public static |java.lang.Short| valueOf(short s)

Returns aShortinstance representing the specifiedshortvalue. If a 
newShortinstance is not required, this method should generally be used in 
preference to the constructor (|java.lang.Short|) , as this method is likely to 
yield significantly better space and time performance by caching frequently 
requested values. 

This method will always cache values in the range -128 to 127, inclusive, and 
may cache other values outside of this range. 


    s - a short value. 

    Returns: a {@code Short} instance representing {@code s}. 

*java.lang.Short.valueOf(String)*

public static |java.lang.Short| valueOf(java.lang.String s)
  throws |java.lang.NumberFormatException|
         
Returns aShortobject holding the value given by the specifiedString. The 
argument is interpreted as representing a signed decimalshort, exactly as if 
the argument were given to the (|java.lang.Short|) method. The result is 
aShortobject that represents theshortvalue specified by the string. 

In other words, this method returns aShortobject equal to the value of: 

new Short(Short.parseShort(s)) 


    s - the string to be parsed 

    Returns: a {@code Short} object holding the value represented by the string argument 

*java.lang.Short.valueOf(String,int)*

public static |java.lang.Short| valueOf(
  java.lang.String s,
  int radix)
  throws |java.lang.NumberFormatException|
         
Returns aShortobject holding the value extracted from the specifiedStringwhen 
parsed with the radix given by the second argument. The first argument is 
interpreted as representing a signedshortin the radix specified by the second 
argument, exactly as if the argument were given to the (|java.lang.Short|) 
method. The result is aShortobject that represents theshortvalue specified by 
the string. 

In other words, this method returns aShortobject equal to the value of: 

new Short(Short.parseShort(s, radix)) 


    s - the string to be parsed 
    radix - the radix to be used in interpreting {@code s} 

    Returns: a {@code Short} object holding the value represented by the string argument in 
             the specified radix. 


