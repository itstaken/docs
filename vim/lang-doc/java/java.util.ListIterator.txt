*java.util.ListIterator* *ListIterator* An iterator for lists that allows the pr

public interface interface ListIterator<E>

  implements |java.util.Iterator|

|java.util.ListIterator_Description|
|java.util.ListIterator_Fields|
|java.util.ListIterator_Constructors|
|java.util.ListIterator_Methods|

================================================================================

*java.util.ListIterator_Methods*
|java.util.ListIterator.add(E)|Inserts the specified element into the list (opt
|java.util.ListIterator.hasNext()|Returnstrueif this list iterator has more ele
|java.util.ListIterator.hasPrevious()|Returnstrueif this list iterator has more
|java.util.ListIterator.next()|Returns the next element in the list and advance
|java.util.ListIterator.nextIndex()|Returns the index of the element that would
|java.util.ListIterator.previous()|Returns the previous element in the list and
|java.util.ListIterator.previousIndex()|Returns the index of the element that w
|java.util.ListIterator.remove()|Removes from the list the last element that wa
|java.util.ListIterator.set(E)|Replaces the last element returned by#nextor#pre

*java.util.ListIterator_Description*

An iterator for lists that allows the programmer to traverse the list in either 
direction, modify the list during iteration, and obtain the iterator's current 
position in the list. AListIteratorhas no current element; its cursor position 
always lies between the element that would be returned by a call 
toprevious()and the element that would be returned by a call tonext(). An 
iterator for a list of lengthnhasn+1possible cursor positions, as illustrated 
by the carets (^) below: 

Element(0) Element(1) Element(2) ... Element(n-1) cursor positions: ^ ^ ^ ^ ^ 

Note that the (|java.util.ListIterator|) and (|java.util.ListIterator|) methods 
are not defined in terms of the cursor position; they are defined to operate on 
the last element returned by a call to (|java.util.ListIterator|) or 
(|java.util.ListIterator|) . 

This interface is a member of the <a 
href="/../technotes/guides/collections/index.html"> Java Collections Framework. 



*java.util.ListIterator.add(E)*

public void add(E e)

Inserts the specified element into the list (optional operation). The element 
is inserted immediately before the element that would be returned by 
(|java.util.ListIterator|) , if any, and after the element that would be 
returned by (|java.util.ListIterator|) , if any. (If the list contains no 
elements, the new element becomes the sole element on the list.) The new 
element is inserted before the implicit cursor: a subsequent call tonextwould 
be unaffected, and a subsequent call topreviouswould return the new element. 
(This call increases by one the value that would be returned by a call 
tonextIndexorpreviousIndex.) 


    e - the element to insert 

*java.util.ListIterator.hasNext()*

public boolean hasNext()

Returnstrueif this list iterator has more elements when traversing the list in 
the forward direction. (In other words, returnstrueif 
(|java.util.ListIterator|) would return an element rather than throwing an 
exception.) 



    Returns: {@code true} if the list iterator has more elements when traversing the list in 
             the forward direction 

*java.util.ListIterator.hasPrevious()*

public boolean hasPrevious()

Returnstrueif this list iterator has more elements when traversing the list in 
the reverse direction. (In other words, returnstrueif 
(|java.util.ListIterator|) would return an element rather than throwing an 
exception.) 



    Returns: {@code true} if the list iterator has more elements when traversing the list in 
             the reverse direction 

*java.util.ListIterator.next()*

public |E| next()

Returns the next element in the list and advances the cursor position. This 
method may be called repeatedly to iterate through the list, or intermixed with 
calls to (|java.util.ListIterator|) to go back and forth. (Note that 
alternating calls tonextandpreviouswill return the same element repeatedly.) 



    Returns: the next element in the list 

*java.util.ListIterator.nextIndex()*

public int nextIndex()

Returns the index of the element that would be returned by a subsequent call to 
(|java.util.ListIterator|) . (Returns list size if the list iterator is at the 
end of the list.) 



    Returns: the index of the element that would be returned by a subsequent call to {@code 
             next}, or list size if the list iterator is at the end of the list 

*java.util.ListIterator.previous()*

public |E| previous()

Returns the previous element in the list and moves the cursor position 
backwards. This method may be called repeatedly to iterate through the list 
backwards, or intermixed with calls to (|java.util.ListIterator|) to go back 
and forth. (Note that alternating calls tonextandpreviouswill return the same 
element repeatedly.) 



    Returns: the previous element in the list 

*java.util.ListIterator.previousIndex()*

public int previousIndex()

Returns the index of the element that would be returned by a subsequent call to 
(|java.util.ListIterator|) . (Returns -1 if the list iterator is at the 
beginning of the list.) 



    Returns: the index of the element that would be returned by a subsequent call to {@code 
             previous}, or -1 if the list iterator is at the beginning of the 
             list 

*java.util.ListIterator.remove()*

public void remove()

Removes from the list the last element that was returned by 
(|java.util.ListIterator|) or (|java.util.ListIterator|) (optional operation). 
This call can only be made once per call tonextorprevious. It can be made only 
if (|java.util.ListIterator|) has not been called after the last call 
tonextorprevious. 



*java.util.ListIterator.set(E)*

public void set(E e)

Replaces the last element returned by (|java.util.ListIterator|) or 
(|java.util.ListIterator|) with the specified element (optional operation). 
This call can be made only if neither (|java.util.ListIterator|) nor 
(|java.util.ListIterator|) have been called after the last call 
tonextorprevious. 


    e - the element with which to replace the last element returned by {@code next} or 
       {@code previous} 


