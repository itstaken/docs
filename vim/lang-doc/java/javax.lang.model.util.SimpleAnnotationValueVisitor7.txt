*javax.lang.model.util.SimpleAnnotationValueVisitor7* *SimpleAnnotationValueVisitor7* 

public class SimpleAnnotationValueVisitor7<R,P>
  extends    |javax.lang.model.util.SimpleAnnotationValueVisitor6|

|javax.lang.model.util.SimpleAnnotationValueVisitor7_Description|
|javax.lang.model.util.SimpleAnnotationValueVisitor7_Fields|
|javax.lang.model.util.SimpleAnnotationValueVisitor7_Constructors|
|javax.lang.model.util.SimpleAnnotationValueVisitor7_Methods|

================================================================================

*javax.lang.model.util.SimpleAnnotationValueVisitor7_Constructors*
|javax.lang.model.util.SimpleAnnotationValueVisitor7()|Constructor for concrete
|javax.lang.model.util.SimpleAnnotationValueVisitor7(R)|Constructor for concret

*javax.lang.model.util.SimpleAnnotationValueVisitor7_Description*

A simple visitor for annotation values with default behavior appropriate for 
the RELEASE_7(|javax.lang.model.SourceVersion|) source version. Visit methods 
call defaultAction(|javax.lang.model.util.SimpleAnnotationValueVisitor7|) 
passing their arguments todefaultAction's corresponding parameters. 

Methods in this class may be overridden subject to their general contract. Note 
that annotating methods in concrete subclasses with 
@Override(|java.lang.Override|) will help ensure that methods are overridden as 
intended. 

WARNING: TheAnnotationValueVisitorinterface implemented by this class may have 
methods added to it in the future to accommodate new, currently unknown, 
language structures added to future versions of the Java programming language. 
Therefore, methods whose names begin with"visit"may be added to this class in 
the future; to avoid incompatibilities, classes which extend this class should 
not declare any instance methods with names beginning with"visit". 

When such a new visit method is added, the default implementation in this class 
will be to call the 
visitUnknown(|javax.lang.model.util.SimpleAnnotationValueVisitor7|) method. A 
new simple annotation value visitor class will also be introduced to correspond 
to the new language level; this visitor will have different default behavior 
for the visit method in question. When the new visitor is introduced, all or 
portions of this visitor may be deprecated. 



*javax.lang.model.util.SimpleAnnotationValueVisitor7()*

protected SimpleAnnotationValueVisitor7()

Constructor for concrete subclasses; usesnullfor the default value. 


*javax.lang.model.util.SimpleAnnotationValueVisitor7(R)*

protected SimpleAnnotationValueVisitor7(R defaultValue)

Constructor for concrete subclasses; uses the argument for the default value. 

    defaultValue - the value to assign to {@link #DEFAULT_VALUE} 

