*android.content.BroadcastReceiver* *BroadcastReceiver* Base class for code that

public abstract class BroadcastReceiver
  extends    |java.lang.Object|

|android.content.BroadcastReceiver_Description|
|android.content.BroadcastReceiver_Fields|
|android.content.BroadcastReceiver_Constructors|
|android.content.BroadcastReceiver_Methods|

================================================================================

*android.content.BroadcastReceiver_Constructors*
|android.content.BroadcastReceiver()|

*android.content.BroadcastReceiver_Methods*
|android.content.BroadcastReceiver.abortBroadcast()|Sets the flag indicating th
|android.content.BroadcastReceiver.clearAbortBroadcast()|Clears the flag indica
|android.content.BroadcastReceiver.getAbortBroadcast()|Returns the flag indicat
|android.content.BroadcastReceiver.getDebugUnregister()|Return the last value g
|android.content.BroadcastReceiver.getPendingResult()|For internal use to set t
|android.content.BroadcastReceiver.getResultCode()|Retrieve the current result 
|android.content.BroadcastReceiver.getResultData()|Retrieve the current result 
|android.content.BroadcastReceiver.getResultExtras(boolean)|Retrieve the curren
|android.content.BroadcastReceiver.getSendingUserId()|
|android.content.BroadcastReceiver.goAsync()|This can be called by an applicati
|android.content.BroadcastReceiver.isInitialStickyBroadcast()|Returns true if t
|android.content.BroadcastReceiver.isOrderedBroadcast()|Returns true if the rec
|android.content.BroadcastReceiver.onReceive(Context,Intent)|This method is cal
|android.content.BroadcastReceiver.peekService(Context,Intent)|Provide a binder
|android.content.BroadcastReceiver.setDebugUnregister(boolean)|Control inclusio
|android.content.BroadcastReceiver.setOrderedHint(boolean)|For internal use, se
|android.content.BroadcastReceiver.setPendingResult(BroadcastReceiver.PendingResult)|
|android.content.BroadcastReceiver.setResult(int,String,Bundle)|Change all of t
|android.content.BroadcastReceiver.setResultCode(int)|Change the current result
|android.content.BroadcastReceiver.setResultData(String)|Change the current res
|android.content.BroadcastReceiver.setResultExtras(Bundle)|Change the current r

*android.content.BroadcastReceiver_Description*

Base class for code that will receive intents sent by sendBroadcast(). 

If you don't need to send broadcasts across applications, consider using this 
class with (|android.support.v4.content.LocalBroadcastManager|) instead of the 
more general facilities described below. This will give you a much more 
efficient implementation (no cross-process communication needed) and allow you 
to avoid thinking about any security issues related to other applications being 
able to receive or send your broadcasts. 

You can either dynamically register an instance of this class with 
Context.registerReceiver()(|android.content.Context|) or statically publish an 
implementation through the &lt;receiver&gt;(|android.R.styleable|) tag in your 
AndroidManifest.xml. 

Note: If registering a receiver in your 
Activity.onResume()(|android.app.Activity|) implementation, you should 
unregister it in Activity.onPause()(|android.app.Activity|) . (You won't 
receive intents when paused, and this will cut down on unnecessary system 
overhead). Do not unregister in 
Activity.onSaveInstanceState()(|android.app.Activity|) , because this won't be 
called if the user moves back in the history stack. 

There are two major classes of broadcasts that can be received: 

Normal broadcasts (sent with Context.sendBroadcast(|android.content.Context|) ) 
are completely asynchronous. All receivers of the broadcast are run in an 
undefined order, often at the same time. This is more efficient, but means that 
receivers cannot use the result or abort APIs included here. Ordered broadcasts 
(sent with Context.sendOrderedBroadcast(|android.content.Context|) ) are 
delivered to one receiver at a time. As each receiver executes in turn, it can 
propagate a result to the next receiver, or it can completely abort the 
broadcast so that it won't be passed to other receivers. The order receivers 
run in can be controlled with the android:priority(|android.R.styleable|) 
attribute of the matching intent-filter; receivers with the same priority will 
be run in an arbitrary order. 

Even in the case of normal broadcasts, the system may in some situations revert 
to delivering the broadcast one receiver at a time. In particular, for 
receivers that may require the creation of a process, only one will be run at a 
time to avoid overloading the system with new processes. In this situation, 
however, the non-ordered semantics hold: these receivers still cannot return 
results or abort their broadcast. 

Note that, although the Intent class is used for sending and receiving these 
broadcasts, the Intent broadcast mechanism here is completely separate from 
Intents that are used to start Activities with 
Context.startActivity()(|android.content.Context|) . There is no way for a 
BroadcastReceiver to see or capture Intents used with startActivity(); 
likewise, when you broadcast an Intent, you will never find or start an 
Activity. These two operations are semantically very different: starting an 
Activity with an Intent is a foreground operation that modifies what the user 
is currently interacting with; broadcasting an Intent is a background operation 
that the user is not normally aware of. 

The BroadcastReceiver class (when launched as a component through a manifest's 
&lt;receiver&gt;(|android.R.styleable|) tag) is an important part of an <a 
href="guide/topics/fundamentals.html#lcycles">application's overall lifecycle. 

Topics covered here: 

Security Receiver Lifecycle Process Lifecycle 

Developer Guides For information about how to use this class to receive and 
resolve intents, read the <a 
href="guide/topics/intents/intents-filters.html">Intents and Intent Filters 
developer guide. 

Security 

Receivers used with the (|android.content.Context|) APIs are by their nature a 
cross-application facility, so you must consider how other applications may be 
able to abuse your use of them. Some things to consider are: 

The Intent namespace is global. Make sure that Intent action names and other 
strings are written in a namespace you own, or else you may inadvertently 
conflict with other applications. When you use (|android.content.Context|) , 
any application may send broadcasts to that registered receiver. You can 
control who can send broadcasts to it through permissions described below. When 
you publish a receiver in your application's manifest and specify 
intent-filters for it, any other application can send broadcasts to it 
regardless of the filters you specify. To prevent others from sending to it, 
make it unavailable to them with android:exported="false". When you use 
(|android.content.Context|) or related methods, normally any other application 
can receive these broadcasts. You can control who can receive such broadcasts 
through permissions described below. Alternatively, starting with 
(|android.os.Build.VERSION_CODES|) , you can also safely restrict the broadcast 
to a single application with Intent.setPackage(|android.content.Intent|) 

None of these issues exist when using 
(|android.support.v4.content.LocalBroadcastManager|) , since intents broadcast 
it never go outside of the current process. 

Access permissions can be enforced by either the sender or receiver of a 
broadcast. 

To enforce a permission when sending, you supply a non-null permission argument 
to (|android.content.Context|) or (|android.content.Context|) . Only receivers 
who have been granted this permission (by requesting it with the 
&lt;uses-permission&gt;(|android.R.styleable|) tag in their 
AndroidManifest.xml) will be able to receive the broadcast. 

To enforce a permission when receiving, you supply a non-null permission when 
registering your receiver -- either when calling (|android.content.Context|) or 
in the static &lt;receiver&gt;(|android.R.styleable|) tag in your 
AndroidManifest.xml. Only broadcasters who have been granted this permission 
(by requesting it with the &lt;uses-permission&gt;(|android.R.styleable|) tag 
in their AndroidManifest.xml) will be able to send an Intent to the receiver. 

See the <a href="guide/topics/security/security.html">Security and Permissions 
document for more information on permissions and security in general. 

Receiver Lifecycle 

A BroadcastReceiver object is only valid for the duration of the call to 
(|android.content.BroadcastReceiver|) . Once your code returns from this 
function, the system considers the object to be finished and no longer active. 

This has important repercussions to what you can do in an 
(|android.content.BroadcastReceiver|) implementation: anything that requires 
asynchronous operation is not available, because you will need to return from 
the function to handle the asynchronous operation, but at that point the 
BroadcastReceiver is no longer active and thus the system is free to kill its 
process before the asynchronous operation completes. 

In particular, you may not show a dialog or bind to a service from within a 
BroadcastReceiver. For the former, you should instead use the 
(|android.app.NotificationManager|) API. For the latter, you can use 
Context.startService()(|android.content.Context|) to send a command to the 
service. 

Process Lifecycle 

A process that is currently executing a BroadcastReceiver (that is, currently 
running the code in its (|android.content.BroadcastReceiver|) method) is 
considered to be a foreground process and will be kept running by the system 
except under cases of extreme memory pressure. 

Once you return from onReceive(), the BroadcastReceiver is no longer active, 
and its hosting process is only as important as any other application 
components that are running in it. This is especially important because if that 
process was only hosting the BroadcastReceiver (a common case for applications 
that the user has never or not recently interacted with), then upon returning 
from onReceive() the system will consider its process to be empty and 
aggressively kill it so that resources are available for other more important 
processes. 

This means that for longer-running operations you will often use a 
(|android.app.Service|) in conjunction with a BroadcastReceiver to keep the 
containing process active for the entire time of your operation. 



*android.content.BroadcastReceiver()*

public BroadcastReceiver()




*android.content.BroadcastReceiver.abortBroadcast()*

public final void abortBroadcast()

Sets the flag indicating that this receiver should abort the current broadcast; 
only works with broadcasts sent through 
Context.sendOrderedBroadcast(|android.content.Context|) . This will prevent any 
other broadcast receivers from receiving the broadcast. It will still call 
(|android.content.BroadcastReceiver|) of the BroadcastReceiver that the caller 
of Context.sendOrderedBroadcast(|android.content.Context|) passed in. 

This method does not work with non-ordered broadcasts such as those sent with 
Context.sendBroadcast(|android.content.Context|) 



*android.content.BroadcastReceiver.clearAbortBroadcast()*

public final void clearAbortBroadcast()

Clears the flag indicating that this receiver should abort the current 
broadcast. 



*android.content.BroadcastReceiver.getAbortBroadcast()*

public final boolean getAbortBroadcast()

Returns the flag indicating whether or not this receiver should abort the 
current broadcast. 



    Returns: True if the broadcast should be aborted. 

*android.content.BroadcastReceiver.getDebugUnregister()*

public final boolean getDebugUnregister()

Return the last value given to (|android.content.BroadcastReceiver|) . 



*android.content.BroadcastReceiver.getPendingResult()*

public final |android.content.BroadcastReceiver.PendingResult| getPendingResult()

For internal use to set the result data that is active. @hide 



*android.content.BroadcastReceiver.getResultCode()*

public final int getResultCode()

Retrieve the current result code, as set by the previous receiver. 



    Returns: int The current result code. 

*android.content.BroadcastReceiver.getResultData()*

public final |java.lang.String| getResultData()

Retrieve the current result data, as set by the previous receiver. Often this 
is null. 



    Returns: String The current result data; may be null. 

*android.content.BroadcastReceiver.getResultExtras(boolean)*

public final |android.os.Bundle| getResultExtras(boolean makeMap)

Retrieve the current result extra data, as set by the previous receiver. Any 
changes you make to the returned Map will be propagated to the next receiver. 


    makeMap - If true then a new empty Map will be made for you if the current Map is null; 
       if false you should be prepared to receive a null Map. 

    Returns: Map The current extras map. 

*android.content.BroadcastReceiver.getSendingUserId()*

public int getSendingUserId()





*android.content.BroadcastReceiver.goAsync()*

public final |android.content.BroadcastReceiver.PendingResult| goAsync()

This can be called by an application in (|android.content.BroadcastReceiver|) 
to allow it to keep the broadcast active after returning from that function. 
This does not change the expectation of being relatively responsive to the 
broadcast (finishing it within 10s), but does allow the implementation to move 
work related to it over to another thread to avoid glitching the main UI thread 
due to disk IO. 



    Returns: Returns a {@link PendingResult} representing the result of the active 
             broadcast. The BroadcastRecord itself is no longer active; all 
             data and other interaction must go through {@link PendingResult} 
             APIs. The {@link PendingResult#finish PendingResult.finish()} 
             method must be called once processing of the broadcast is done. 

*android.content.BroadcastReceiver.isInitialStickyBroadcast()*

public final boolean isInitialStickyBroadcast()

Returns true if the receiver is currently processing the initial value of a 
sticky broadcast -- that is, the value that was last broadcast and is currently 
held in the sticky cache, so this is not directly the result of a broadcast 
right now. 



*android.content.BroadcastReceiver.isOrderedBroadcast()*

public final boolean isOrderedBroadcast()

Returns true if the receiver is currently processing an ordered broadcast. 



*android.content.BroadcastReceiver.onReceive(Context,Intent)*

public abstract void onReceive(
  android.content.Context context,
  android.content.Intent intent)

This method is called when the BroadcastReceiver is receiving an Intent 
broadcast. During this time you can use the other methods on BroadcastReceiver 
to view/modify the current result values. This method is always called within 
the main thread of its process, unless you explicitly asked for it to be 
scheduled on a different thread using (|android.content.Context|) . When it 
runs on the main thread you should never perform long-running operations in it 
(there is a timeout of 10 seconds that the system allows before considering the 
receiver to be blocked and a candidate to be killed). You cannot launch a popup 
dialog in your implementation of onReceive(). 

If this BroadcastReceiver was launched through a <receiver> tag, then the 
object is no longer alive after returning from this function. This means you 
should not perform any operations that return a result to you asynchronously -- 
in particular, for interacting with services, you should use 
(|android.content.Context|) instead of (|android.content.Context|) . If you 
wish to interact with a service that is already running, you can use 
(|android.content.BroadcastReceiver|) . 

The Intent filters used in (|android.content.Context|) and in application 
manifests are not guaranteed to be exclusive. They are hints to the operating 
system about how to find suitable recipients. It is possible for senders to 
force delivery to specific recipients, bypassing filter resolution. For this 
reason, onReceive()(|android.content.BroadcastReceiver|) implementations should 
respond only to known actions, ignoring any unexpected Intents that they may 
receive. 


    context - The Context in which the receiver is running. 
    intent - The Intent being received. 

*android.content.BroadcastReceiver.peekService(Context,Intent)*

public |android.os.IBinder| peekService(
  android.content.Context myContext,
  android.content.Intent service)

Provide a binder to an already-running service. This method is synchronous and 
will not start the target service if it is not present, so it is safe to call 
from (|android.content.BroadcastReceiver|) . 


    myContext - The Context that had been passed to {@link #onReceive(Context, Intent)} 
    service - The Intent indicating the service you wish to use. See {@link 
       Context#startService(Intent)} for more information. 

*android.content.BroadcastReceiver.setDebugUnregister(boolean)*

public final void setDebugUnregister(boolean debug)

Control inclusion of debugging help for mismatched calls to 
Context.registerReceiver()(|android.content.Context|) . If called with true, 
before given to registerReceiver(), then the callstack of the following 
Context.unregisterReceiver()(|android.content.Context|) call is retained, to be 
printed if a later incorrect unregister call is made. Note that doing this 
requires retaining information about the BroadcastReceiver for the lifetime of 
the app, resulting in a leak -- this should only be used for debugging. 



*android.content.BroadcastReceiver.setOrderedHint(boolean)*

public final void setOrderedHint(boolean isOrdered)

For internal use, sets the hint about whether this BroadcastReceiver is running 
in ordered mode. 



*android.content.BroadcastReceiver.setPendingResult(BroadcastReceiver.PendingResult)*

public final void setPendingResult(android.content.BroadcastReceiver.PendingResult result)

For internal use to set the result data that is active. @hide 



*android.content.BroadcastReceiver.setResult(int,String,Bundle)*

public final void setResult(
  int code,
  java.lang.String data,
  android.os.Bundle extras)

Change all of the result data returned from this broadcasts; only works with 
broadcasts sent through Context.sendOrderedBroadcast(|android.content.Context|) 
. All current result data is replaced by the value given to this method. 

This method does not work with non-ordered broadcasts such as those sent with 
Context.sendBroadcast(|android.content.Context|) 


    code - The new result code. Often uses the Activity {@link 
       android.app.Activity#RESULT_CANCELED} and {@link 
       android.app.Activity#RESULT_OK} constants, though the actual meaning of 
       this value is ultimately up to the broadcaster. 
    data - The new result data. This is an arbitrary string whose interpretation is up to 
       the broadcaster; may be null. 
    extras - The new extra data map. This is a Bundle holding arbitrary data, whose 
       interpretation is up to the broadcaster. Can be set to null. This 
       completely replaces the current map (if any). 

*android.content.BroadcastReceiver.setResultCode(int)*

public final void setResultCode(int code)

Change the current result code of this broadcast; only works with broadcasts 
sent through Context.sendOrderedBroadcast(|android.content.Context|) . Often 
uses the Activity (|android.app.Activity|) and (|android.app.Activity|) 
constants, though the actual meaning of this value is ultimately up to the 
broadcaster. 

This method does not work with non-ordered broadcasts such as those sent with 
Context.sendBroadcast(|android.content.Context|) 


    code - The new result code. 

*android.content.BroadcastReceiver.setResultData(String)*

public final void setResultData(java.lang.String data)

Change the current result data of this broadcast; only works with broadcasts 
sent through Context.sendOrderedBroadcast(|android.content.Context|) . This is 
an arbitrary string whose interpretation is up to the broadcaster. 

This method does not work with non-ordered broadcasts such as those sent with 
Context.sendBroadcast(|android.content.Context|) 


    data - The new result data; may be null. 

*android.content.BroadcastReceiver.setResultExtras(Bundle)*

public final void setResultExtras(android.os.Bundle extras)

Change the current result extras of this broadcast; only works with broadcasts 
sent through Context.sendOrderedBroadcast(|android.content.Context|) . This is 
a Bundle holding arbitrary data, whose interpretation is up to the broadcaster. 
Can be set to null. Calling this method completely replaces the current map (if 
any). 

This method does not work with non-ordered broadcasts such as those sent with 
Context.sendBroadcast(|android.content.Context|) 


    extras - The new extra data map; may be null. 


