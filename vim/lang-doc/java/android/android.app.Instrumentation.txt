*android.app.Instrumentation* *Instrumentation* Base class for implementing appl

public class Instrumentation
  extends    |java.lang.Object|

|android.app.Instrumentation_Description|
|android.app.Instrumentation_Fields|
|android.app.Instrumentation_Constructors|
|android.app.Instrumentation_Methods|

================================================================================

*android.app.Instrumentation_Fields*
|java.lang.String_android.app.Instrumentation.REPORT_KEY_IDENTIFIER|
|java.lang.String_android.app.Instrumentation.REPORT_KEY_STREAMRESULT|

*android.app.Instrumentation_Constructors*
|android.app.Instrumentation()|

*android.app.Instrumentation_Methods*
|android.app.Instrumentation.addMonitor(Instrumentation.ActivityMonitor)|Add a 
|android.app.Instrumentation.addMonitor(IntentFilter,Instrumentation.ActivityResult,boolean)|
|android.app.Instrumentation.addMonitor(String,Instrumentation.ActivityResult,boolean)|
|android.app.Instrumentation.callActivityOnCreate(Activity,Bundle)|Perform call
|android.app.Instrumentation.callActivityOnDestroy(Activity)|
|android.app.Instrumentation.callActivityOnNewIntent(Activity,Intent)|Perform c
|android.app.Instrumentation.callActivityOnPause(Activity)|Perform calling of a
|android.app.Instrumentation.callActivityOnPostCreate(Activity,Bundle)|Perform 
|android.app.Instrumentation.callActivityOnRestart(Activity)|Perform calling of
|android.app.Instrumentation.callActivityOnRestoreInstanceState(Activity,Bundle)|
|android.app.Instrumentation.callActivityOnResume(Activity)|Perform calling of 
|android.app.Instrumentation.callActivityOnSaveInstanceState(Activity,Bundle)|P
|android.app.Instrumentation.callActivityOnStart(Activity)|Perform calling of a
|android.app.Instrumentation.callActivityOnStop(Activity)|Perform calling of an
|android.app.Instrumentation.callActivityOnUserLeaving(Activity)|Perform callin
|android.app.Instrumentation.callApplicationOnCreate(Application)|Perform calli
|android.app.Instrumentation.checkMonitorHit(Instrumentation.ActivityMonitor,int)|
|android.app.Instrumentation.endPerformanceSnapshot()|
|android.app.Instrumentation.execStartActivities(Context,IBinder,IBinder,Activity,Intent[],Bundle)|
|android.app.Instrumentation.execStartActivitiesAsUser(Context,IBinder,IBinder,Activity,Intent[],Bundle,int)|
|android.app.Instrumentation.execStartActivity(Context,IBinder,IBinder,Activity,Intent,int,Bundle)|
|android.app.Instrumentation.execStartActivity(Context,IBinder,IBinder,Activity,Intent,int,Bundle,UserHandle)|
|android.app.Instrumentation.execStartActivity(Context,IBinder,IBinder,Fragment,Intent,int,Bundle)|
|android.app.Instrumentation.finish(int,Bundle)|Terminate instrumentation of th
|android.app.Instrumentation.getAllocCounts()|Returns a bundle with the current
|android.app.Instrumentation.getBinderCounts()|Returns a bundle with the counts
|android.app.Instrumentation.getComponentName()|Returns complete component name
|android.app.Instrumentation.getContext()|Return the Context of this instrument
|android.app.Instrumentation.getTargetContext()|Return a Context for the target
|android.app.Instrumentation.getUiAutomation()|Gets theUiAutomationinstance.
|android.app.Instrumentation.invokeContextMenuAction(Activity,int,int)|Show the
|android.app.Instrumentation.invokeMenuActionSync(Activity,int,int)|Execute a p
|android.app.Instrumentation.isProfiling()|Check whether this instrumentation w
|android.app.Instrumentation.newActivity(Class<?>,Context,IBinder,Application,Intent,ActivityInfo,CharSequence,Activity,String,Object)|
|android.app.Instrumentation.newActivity(ClassLoader,String,Intent)|Perform ins
|android.app.Instrumentation.newApplication(Class<?>,Context)|Perform instantia
|android.app.Instrumentation.newApplication(ClassLoader,String,Context)|Perform
|android.app.Instrumentation.onCreate(Bundle)|Called when the instrumentation i
|android.app.Instrumentation.onDestroy()|Called when the instrumented applicati
|android.app.Instrumentation.onException(Object,Throwable)|This is called whene
|android.app.Instrumentation.onStart()|Method where the instrumentation thread 
|android.app.Instrumentation.removeMonitor(Instrumentation.ActivityMonitor)|Rem
|android.app.Instrumentation.runOnMainSync(Runnable)|Execute a call on the appl
|android.app.Instrumentation.sendCharacterSync(int)|Higher-level method for sen
|android.app.Instrumentation.sendKeyDownUpSync(int)|Sends an up and down key ev
|android.app.Instrumentation.sendKeySync(KeyEvent)|Send a key event to the curr
|android.app.Instrumentation.sendPointerSync(MotionEvent)|Dispatch a pointer ev
|android.app.Instrumentation.sendStatus(int,Bundle)|Provide a status report abo
|android.app.Instrumentation.sendStringSync(String)|Sends the key events corres
|android.app.Instrumentation.sendTrackballEventSync(MotionEvent)|Dispatch a tra
|android.app.Instrumentation.setAutomaticPerformanceSnapshots()|
|android.app.Instrumentation.setInTouchMode(boolean)|Force the global system in
|android.app.Instrumentation.start()|Create and start a new thread in which to 
|android.app.Instrumentation.startActivitySync(Intent)|Start a new activity and
|android.app.Instrumentation.startAllocCounting()|
|android.app.Instrumentation.startPerformanceSnapshot()|
|android.app.Instrumentation.startProfiling()|This method will start profiling 
|android.app.Instrumentation.stopAllocCounting()|
|android.app.Instrumentation.stopProfiling()|Stops profiling if isProfiling() r
|android.app.Instrumentation.waitForIdle(Runnable)|Schedule a callback for when
|android.app.Instrumentation.waitForIdleSync()|Synchronously wait for the appli
|android.app.Instrumentation.waitForMonitor(Instrumentation.ActivityMonitor)|Wa
|android.app.Instrumentation.waitForMonitorWithTimeout(Instrumentation.ActivityMonitor,long)|

*android.app.Instrumentation_Description*

Base class for implementing application instrumentation code. When running with 
instrumentation turned on, this class will be instantiated for you before any 
of the application code, allowing you to monitor all of the interaction the 
system has with the application. An Instrumentation implementation is described 
to the system through an AndroidManifest.xml's <instrumentation> tag. 



*java.lang.String_android.app.Instrumentation.REPORT_KEY_IDENTIFIER*

If included in the status or final bundle sent to an IInstrumentationWatcher, 
this key identifies the class that is writing the report. This can be used to 
provide more structured logging or reporting capabilities in the 
IInstrumentationWatcher. 


*java.lang.String_android.app.Instrumentation.REPORT_KEY_STREAMRESULT*

If included in the status or final bundle sent to an IInstrumentationWatcher, 
this key identifies a string which can simply be printed to the output stream. 
Using these streams provides a "pretty printer" version of the status & final 
packets. Any bundles including this key should also include the complete set of 
raw key/value pairs, so that the instrumentation can also be launched, and 
results collected, by an automated system. 



*android.app.Instrumentation()*

public Instrumentation()




*android.app.Instrumentation.addMonitor(Instrumentation.ActivityMonitor)*

public void addMonitor(android.app.Instrumentation.ActivityMonitor monitor)

Add a new (|android.app.Instrumentation.ActivityMonitor|) that will be checked 
whenever an activity is started. The monitor is added after any existing ones; 
the monitor will be hit only if none of the existing monitors can themselves 
handle the Intent. 


    monitor - The new ActivityMonitor to see. 

*android.app.Instrumentation.addMonitor(IntentFilter,Instrumentation.ActivityResult,boolean)*

public |android.app.Instrumentation.ActivityMonitor| addMonitor(
  android.content.IntentFilter filter,
  android.app.Instrumentation.ActivityResult result,
  boolean block)

A convenience wrapper for (|android.app.Instrumentation|) that creates an 
intent filter matching (|android.app.Instrumentation.ActivityMonitor|) for you 
and returns it. 


    filter - The set of intents this monitor is responsible for. 
    result - A canned result to return if the monitor is hit; can be null. 
    block - Controls whether the monitor should block the activity start (returning its 
       canned result) or let the call proceed. 

    Returns: The newly created and added activity monitor. 

*android.app.Instrumentation.addMonitor(String,Instrumentation.ActivityResult,boolean)*

public |android.app.Instrumentation.ActivityMonitor| addMonitor(
  java.lang.String cls,
  android.app.Instrumentation.ActivityResult result,
  boolean block)

A convenience wrapper for (|android.app.Instrumentation|) that creates a class 
matching (|android.app.Instrumentation.ActivityMonitor|) for you and returns 
it. 


    cls - The activity class this monitor is responsible for. 
    result - A canned result to return if the monitor is hit; can be null. 
    block - Controls whether the monitor should block the activity start (returning its 
       canned result) or let the call proceed. 

    Returns: The newly created and added activity monitor. 

*android.app.Instrumentation.callActivityOnCreate(Activity,Bundle)*

public void callActivityOnCreate(
  android.app.Activity activity,
  android.os.Bundle icicle)

Perform calling of an activity's (|android.app.Activity|) method. The default 
implementation simply calls through to that method. 


    activity - The activity being created. 
    icicle - The previously frozen state (or null) to pass through to onCreate(). 

*android.app.Instrumentation.callActivityOnDestroy(Activity)*

public void callActivityOnDestroy(android.app.Activity activity)





*android.app.Instrumentation.callActivityOnNewIntent(Activity,Intent)*

public void callActivityOnNewIntent(
  android.app.Activity activity,
  android.content.Intent intent)

Perform calling of an activity's (|android.app.Activity|) method. The default 
implementation simply calls through to that method. 


    activity - The activity receiving a new Intent. 
    intent - The new intent being received. 

*android.app.Instrumentation.callActivityOnPause(Activity)*

public void callActivityOnPause(android.app.Activity activity)

Perform calling of an activity's (|android.app.Activity|) method. The default 
implementation simply calls through to that method. 


    activity - The activity being paused. 

*android.app.Instrumentation.callActivityOnPostCreate(Activity,Bundle)*

public void callActivityOnPostCreate(
  android.app.Activity activity,
  android.os.Bundle icicle)

Perform calling of an activity's (|android.app.Activity|) method. The default 
implementation simply calls through to that method. 


    activity - The activity being created. 
    icicle - The previously frozen state (or null) to pass through to onPostCreate(). 

*android.app.Instrumentation.callActivityOnRestart(Activity)*

public void callActivityOnRestart(android.app.Activity activity)

Perform calling of an activity's (|android.app.Activity|) method. The default 
implementation simply calls through to that method. 


    activity - The activity being restarted. 

*android.app.Instrumentation.callActivityOnRestoreInstanceState(Activity,Bundle)*

public void callActivityOnRestoreInstanceState(
  android.app.Activity activity,
  android.os.Bundle savedInstanceState)

Perform calling of an activity's (|android.app.Activity|) method. The default 
implementation simply calls through to that method. 


    activity - The activity being restored. 
    savedInstanceState - The previously saved state being restored. 

*android.app.Instrumentation.callActivityOnResume(Activity)*

public void callActivityOnResume(android.app.Activity activity)

Perform calling of an activity's (|android.app.Activity|) method. The default 
implementation simply calls through to that method. 


    activity - The activity being resumed. 

*android.app.Instrumentation.callActivityOnSaveInstanceState(Activity,Bundle)*

public void callActivityOnSaveInstanceState(
  android.app.Activity activity,
  android.os.Bundle outState)

Perform calling of an activity's (|android.app.Activity|) method. The default 
implementation simply calls through to that method. 


    activity - The activity being saved. 
    outState - The bundle to pass to the call. 

*android.app.Instrumentation.callActivityOnStart(Activity)*

public void callActivityOnStart(android.app.Activity activity)

Perform calling of an activity's (|android.app.Activity|) method. The default 
implementation simply calls through to that method. 


    activity - The activity being started. 

*android.app.Instrumentation.callActivityOnStop(Activity)*

public void callActivityOnStop(android.app.Activity activity)

Perform calling of an activity's (|android.app.Activity|) method. The default 
implementation simply calls through to that method. 


    activity - The activity being stopped. 

*android.app.Instrumentation.callActivityOnUserLeaving(Activity)*

public void callActivityOnUserLeaving(android.app.Activity activity)

Perform calling of an activity's (|android.app.Activity|) method. The default 
implementation simply calls through to that method. 


    activity - The activity being notified that the user has navigated away 

*android.app.Instrumentation.callApplicationOnCreate(Application)*

public void callApplicationOnCreate(android.app.Application app)

Perform calling of the application's (|android.app.Application|) method. The 
default implementation simply calls through to that method. 

Note: This method will be called immediately after 
(|android.app.Instrumentation|) . Often instrumentation tests start their test 
thread in onCreate(); you need to be careful of races between these. (Well 
between it and everything else, but let's start here.) 


    app - The application being created. 

*android.app.Instrumentation.checkMonitorHit(Instrumentation.ActivityMonitor,int)*

public boolean checkMonitorHit(
  android.app.Instrumentation.ActivityMonitor monitor,
  int minHits)

Test whether an existing (|android.app.Instrumentation.ActivityMonitor|) has 
been hit. If the monitor has been hit at least minHits times, then it will be 
removed from the activity monitor list and true returned. Otherwise it is left 
as-is and false is returned. 


    monitor - The ActivityMonitor to check. 
    minHits - The minimum number of hits required. 

    Returns: True if the hit count has been reached, else false. 

*android.app.Instrumentation.endPerformanceSnapshot()*

public void endPerformanceSnapshot()





*android.app.Instrumentation.execStartActivities(Context,IBinder,IBinder,Activity,Intent[],Bundle)*

public void execStartActivities(
  android.content.Context who,
  android.os.IBinder contextThread,
  android.os.IBinder token,
  android.app.Activity target,
  android.content.Intent[] intents,
  android.os.Bundle options)

Like (|android.app.Instrumentation|) , but accepts an array of activities to be 
started. Note that active (|android.app.Instrumentation.ActivityMonitor|) 
objects only match against the first activity in the array. 



*android.app.Instrumentation.execStartActivitiesAsUser(Context,IBinder,IBinder,Activity,Intent[],Bundle,int)*

public void execStartActivitiesAsUser(
  android.content.Context who,
  android.os.IBinder contextThread,
  android.os.IBinder token,
  android.app.Activity target,
  android.content.Intent[] intents,
  android.os.Bundle options,
  int userId)

Like (|android.app.Instrumentation|) , but accepts an array of activities to be 
started. Note that active (|android.app.Instrumentation.ActivityMonitor|) 
objects only match against the first activity in the array. 



*android.app.Instrumentation.execStartActivity(Context,IBinder,IBinder,Activity,Intent,int,Bundle)*

public |android.app.Instrumentation.ActivityResult| execStartActivity(
  android.content.Context who,
  android.os.IBinder contextThread,
  android.os.IBinder token,
  android.app.Activity target,
  android.content.Intent intent,
  int requestCode,
  android.os.Bundle options)

Execute a startActivity call made by the application. The default 
implementation takes care of updating any active 
(|android.app.Instrumentation.ActivityMonitor|) objects and dispatches this 
call to the system activity manager; you can override this to watch for the 
application to start an activity, and modify what happens when it does. 

This method returns an (|android.app.Instrumentation.ActivityResult|) object, 
which you can use when intercepting application calls to avoid performing the 
start activity action but still return the result the application is expecting. 
To do this, override this method to catch the call to start activity so that it 
returns a new ActivityResult containing the results you would like the 
application to see, and don't call up to the super class. Note that an 
application is only expecting a result if requestCode is >= 0. 

This method throws (|android.content.ActivityNotFoundException|) if there was 
no Activity found to run the given Intent. 


    who - The Context from which the activity is being started. 
    contextThread - The main thread of the Context from which the activity is being started. 
    token - Internal token identifying to the system who is starting the activity; may be 
       null. 
    target - Which activity is performing the start (and thus receiving any result); may be 
       null if this call is not being made from an activity. 
    intent - The actual Intent to start. 
    requestCode - Identifier for this request's result; less than zero if the caller is not 
       expecting a result. 
    options - Addition options. 

    Returns: To force the return of a particular result, return an ActivityResult object 
             containing the desired data; otherwise return null. The default 
             implementation always returns null. 

*android.app.Instrumentation.execStartActivity(Context,IBinder,IBinder,Activity,Intent,int,Bundle,UserHandle)*

public |android.app.Instrumentation.ActivityResult| execStartActivity(
  android.content.Context who,
  android.os.IBinder contextThread,
  android.os.IBinder token,
  android.app.Activity target,
  android.content.Intent intent,
  int requestCode,
  android.os.Bundle options,
  android.os.UserHandle user)

Like (|android.app.Instrumentation|) , but for starting as a particular user. 


    who - The Context from which the activity is being started. 
    contextThread - The main thread of the Context from which the activity is being started. 
    token - Internal token identifying to the system who is starting the activity; may be 
       null. 
    target - Which fragment is performing the start (and thus receiving any result). 
    intent - The actual Intent to start. 
    requestCode - Identifier for this request's result; less than zero if the caller is not 
       expecting a result. 

    Returns: To force the return of a particular result, return an ActivityResult object 
             containing the desired data; otherwise return null. The default 
             implementation always returns null. 

*android.app.Instrumentation.execStartActivity(Context,IBinder,IBinder,Fragment,Intent,int,Bundle)*

public |android.app.Instrumentation.ActivityResult| execStartActivity(
  android.content.Context who,
  android.os.IBinder contextThread,
  android.os.IBinder token,
  android.app.Fragment target,
  android.content.Intent intent,
  int requestCode,
  android.os.Bundle options)

Like (|android.app.Instrumentation|) , but for calls from a {#link Fragment}. 


    who - The Context from which the activity is being started. 
    contextThread - The main thread of the Context from which the activity is being started. 
    token - Internal token identifying to the system who is starting the activity; may be 
       null. 
    target - Which fragment is performing the start (and thus receiving any result). 
    intent - The actual Intent to start. 
    requestCode - Identifier for this request's result; less than zero if the caller is not 
       expecting a result. 

    Returns: To force the return of a particular result, return an ActivityResult object 
             containing the desired data; otherwise return null. The default 
             implementation always returns null. 

*android.app.Instrumentation.finish(int,Bundle)*

public void finish(
  int resultCode,
  android.os.Bundle results)

Terminate instrumentation of the application. This will cause the application 
process to exit, removing this instrumentation from the next time the 
application is started. 


    resultCode - Overall success/failure of instrumentation. 
    results - Any results to send back to the code that started the instrumentation. 

*android.app.Instrumentation.getAllocCounts()*

public |android.os.Bundle| getAllocCounts()

Returns a bundle with the current results from the allocation counting. 



*android.app.Instrumentation.getBinderCounts()*

public |android.os.Bundle| getBinderCounts()

Returns a bundle with the counts for various binder counts for this process. 
Currently the only two that are reported are the number of send and the number 
of received transactions. 



*android.app.Instrumentation.getComponentName()*

public |android.content.ComponentName| getComponentName()

Returns complete component name of this instrumentation. 



    Returns: Returns the complete component name for this instrumentation. 

*android.app.Instrumentation.getContext()*

public |android.content.Context| getContext()

Return the Context of this instrumentation's package. Note that this is often 
different than the Context of the application being instrumentated, since the 
instrumentation code often lives is a different package than that of the 
application it is running against. See (|android.app.Instrumentation|) to 
retrieve a Context for the target application. 



    Returns: The instrumentation's package context. 

*android.app.Instrumentation.getTargetContext()*

public |android.content.Context| getTargetContext()

Return a Context for the target application being instrumented. Note that this 
is often different than the Context of the instrumentation code, since the 
instrumentation code often lives is a different package than that of the 
application it is running against. See (|android.app.Instrumentation|) to 
retrieve a Context for the instrumentation code. 



    Returns: A Context in the target application. 

*android.app.Instrumentation.getUiAutomation()*

public |android.app.UiAutomation| getUiAutomation()

Gets the (|android.app.UiAutomation|) instance. 

Note: The APIs exposed via the returned (|android.app.UiAutomation|) work 
across application boundaries while the APIs exposed by the instrumentation do 
not. For example, (|android.app.Instrumentation|) will not allow you to inject 
the event in an app different from the instrumentation target, while 
(|android.app.UiAutomation|) will work regardless of the current application. 

A typical test case should be using either the (|android.app.UiAutomation|) or 
(|android.app.Instrumentation|) APIs. Using both APIs at the same time is not a 
mistake by itself but a client has to be aware of the APIs limitations. 



    Returns: The UI automation instance. 

*android.app.Instrumentation.invokeContextMenuAction(Activity,int,int)*

public boolean invokeContextMenuAction(
  android.app.Activity targetActivity,
  int id,
  int flag)

Show the context menu for the currently focused view and executes a particular 
context menu item. 


    targetActivity - The activity in question. 
    id - The identifier associated with the context menu item. 
    flag - Additional flags, if any. 

    Returns: Whether the invocation was successful (for example, it could be false if item 
             is disabled). 

*android.app.Instrumentation.invokeMenuActionSync(Activity,int,int)*

public boolean invokeMenuActionSync(
  android.app.Activity targetActivity,
  int id,
  int flag)

Execute a particular menu item. 


    targetActivity - The activity in question. 
    id - The identifier associated with the menu item. 
    flag - Additional flags, if any. 

    Returns: Whether the invocation was successful (for example, it could be false if item 
             is disabled). 

*android.app.Instrumentation.isProfiling()*

public boolean isProfiling()

Check whether this instrumentation was started with profiling enabled. 



    Returns: Returns true if profiling was enabled when starting, else false. 

*android.app.Instrumentation.newActivity(Class<?>,Context,IBinder,Application,Intent,ActivityInfo,CharSequence,Activity,String,Object)*

public |android.app.Activity| newActivity(
  java.lang.Class<?> clazz,
  android.content.Context context,
  android.os.IBinder token,
  android.app.Application application,
  android.content.Intent intent,
  android.content.pm.ActivityInfo info,
  java.lang.CharSequence title,
  android.app.Activity parent,
  java.lang.String id,
  java.lang.Object lastNonConfigurationInstance)
  throws |java.lang.IllegalAccessException|
         |java.lang.InstantiationException|
         
Perform instantiation of an (|android.app.Activity|) object. This method is 
intended for use with unit tests, such as android.test.ActivityUnitTestCase. 
The activity will be useable locally but will be missing some of the linkages 
necessary for use within the sytem. 


    clazz - The Class of the desired Activity 
    context - The base context for the activity to use 
    token - The token for this activity to communicate with 
    application - The application object (if any) 
    intent - The intent that started this Activity 
    info - ActivityInfo from the manifest 
    title - The title, typically retrieved from the ActivityInfo record 
    parent - The parent Activity (if any) 
    id - The embedded Id (if any) 
    lastNonConfigurationInstance - Arbitrary object that will be available via {@link 
       Activity#getLastNonConfigurationInstance() 
       Activity.getLastNonConfigurationInstance()}. 

    Returns: Returns the instantiated activity 

*android.app.Instrumentation.newActivity(ClassLoader,String,Intent)*

public |android.app.Activity| newActivity(
  java.lang.ClassLoader cl,
  java.lang.String className,
  android.content.Intent intent)
  throws |java.lang.ClassNotFoundException|
         |java.lang.IllegalAccessException|
         |java.lang.InstantiationException|
         
Perform instantiation of the process's (|android.app.Activity|) object. The 
default implementation provides the normal system behavior. 


    cl - The ClassLoader with which to instantiate the object. 
    className - The name of the class implementing the Activity object. 
    intent - The Intent object that specified the activity class being instantiated. 

    Returns: The newly instantiated Activity object. 

*android.app.Instrumentation.newApplication(Class<?>,Context)*

public static |android.app.Application| newApplication(
  java.lang.Class<?> clazz,
  android.content.Context context)
  throws |java.lang.ClassNotFoundException|
         |java.lang.IllegalAccessException|
         |java.lang.InstantiationException|
         
Perform instantiation of the process's (|android.app.Application|) object. The 
default implementation provides the normal system behavior. 


    clazz - The class used to create an Application object from. 
    context - The context to initialize the application with 

    Returns: The newly instantiated Application object. 

*android.app.Instrumentation.newApplication(ClassLoader,String,Context)*

public |android.app.Application| newApplication(
  java.lang.ClassLoader cl,
  java.lang.String className,
  android.content.Context context)
  throws |java.lang.ClassNotFoundException|
         |java.lang.IllegalAccessException|
         |java.lang.InstantiationException|
         
Perform instantiation of the process's (|android.app.Application|) object. The 
default implementation provides the normal system behavior. 


    cl - The ClassLoader with which to instantiate the object. 
    className - The name of the class implementing the Application object. 
    context - The context to initialize the application with 

    Returns: The newly instantiated Application object. 

*android.app.Instrumentation.onCreate(Bundle)*

public void onCreate(android.os.Bundle arguments)

Called when the instrumentation is starting, before any application code has 
been loaded. Usually this will be implemented to simply call 
(|android.app.Instrumentation|) to begin the instrumentation thread, which will 
then continue execution in (|android.app.Instrumentation|) . 

If you do not need your own thread -- that is you are writing your 
instrumentation to be completely asynchronous (returning to the event loop so 
that the application can run), you can simply begin your instrumentation here, 
for example call (|android.content.Context|) to begin the appropriate first 
activity of the application. 


    arguments - Any additional arguments that were supplied when the instrumentation was 
       started. 

*android.app.Instrumentation.onDestroy()*

public void onDestroy()

Called when the instrumented application is stopping, after all of the normal 
application cleanup has occurred. 



*android.app.Instrumentation.onException(Object,Throwable)*

public boolean onException(
  java.lang.Object obj,
  java.lang.Throwable e)

This is called whenever the system captures an unhandled exception that was 
thrown by the application. The default implementation simply returns false, 
allowing normal system handling of the exception to take place. 


    obj - The client object that generated the exception. May be an Application, 
       Activity, BroadcastReceiver, Service, or null. 
    e - The exception that was thrown. 

    Returns: To allow normal system exception process to occur, return false. If true is 
             returned, the system will proceed as if the exception didn't 
             happen. 

*android.app.Instrumentation.onStart()*

public void onStart()

Method where the instrumentation thread enters execution. This allows you to 
run your instrumentation code in a separate thread than the application, so 
that it can perform blocking operation such as (|android.app.Instrumentation|) 
or (|android.app.Instrumentation|) . 

You will typically want to call finish() when this function is done, to end 
your instrumentation. 



*android.app.Instrumentation.removeMonitor(Instrumentation.ActivityMonitor)*

public void removeMonitor(android.app.Instrumentation.ActivityMonitor monitor)

Remove an (|android.app.Instrumentation.ActivityMonitor|) that was previously 
added with (|android.app.Instrumentation|) . 


    monitor - The monitor to remove. 

*android.app.Instrumentation.runOnMainSync(Runnable)*

public void runOnMainSync(java.lang.Runnable runner)

Execute a call on the application's main thread, blocking until it is complete. 
Useful for doing things that are not thread-safe, such as looking at or 
modifying the view hierarchy. 


    runner - The code to run on the main thread. 

*android.app.Instrumentation.sendCharacterSync(int)*

public void sendCharacterSync(int keyCode)

Higher-level method for sending both the down and up key events for a 
particular character key code. Equivalent to creating both KeyEvent objects by 
hand and calling (|android.app.Instrumentation|) . The event appears as if it 
came from keyboard 0, the built in one. 


    keyCode - The key code of the character to send. 

*android.app.Instrumentation.sendKeyDownUpSync(int)*

public void sendKeyDownUpSync(int key)

Sends an up and down key event sync to the currently focused window. 


    key - The integer keycode for the event. 

*android.app.Instrumentation.sendKeySync(KeyEvent)*

public void sendKeySync(android.view.KeyEvent event)

Send a key event to the currently focused window/view and wait for it to be 
processed. Finished at some point after the recipient has returned from its 
event processing, though it may not have completely finished reacting from the 
event -- for example, if it needs to update its display as a result, it may 
still be in the process of doing that. 


    event - The event to send to the current focus. 

*android.app.Instrumentation.sendPointerSync(MotionEvent)*

public void sendPointerSync(android.view.MotionEvent event)

Dispatch a pointer event. Finished at some point after the recipient has 
returned from its event processing, though it may not have completely finished 
reacting from the event -- for example, if it needs to update its display as a 
result, it may still be in the process of doing that. 


    event - A motion event describing the pointer action. (As noted in {@link 
       MotionEvent#obtain(long, long, int, float, float, int)}, be sure to use 
       {@link SystemClock#uptimeMillis()} as the timebase. 

*android.app.Instrumentation.sendStatus(int,Bundle)*

public void sendStatus(
  int resultCode,
  android.os.Bundle results)

Provide a status report about the application. 


    resultCode - Current success/failure of instrumentation. 
    results - Any results to send back to the code that started the instrumentation. 

*android.app.Instrumentation.sendStringSync(String)*

public void sendStringSync(java.lang.String text)

Sends the key events corresponding to the text to the app being instrumented. 


    text - The text to be sent. 

*android.app.Instrumentation.sendTrackballEventSync(MotionEvent)*

public void sendTrackballEventSync(android.view.MotionEvent event)

Dispatch a trackball event. Finished at some point after the recipient has 
returned from its event processing, though it may not have completely finished 
reacting from the event -- for example, if it needs to update its display as a 
result, it may still be in the process of doing that. 


    event - A motion event describing the trackball action. (As noted in {@link 
       MotionEvent#obtain(long, long, int, float, float, int)}, be sure to use 
       {@link SystemClock#uptimeMillis()} as the timebase. 

*android.app.Instrumentation.setAutomaticPerformanceSnapshots()*

public void setAutomaticPerformanceSnapshots()





*android.app.Instrumentation.setInTouchMode(boolean)*

public void setInTouchMode(boolean inTouch)

Force the global system in or out of touch mode. This can be used if your 
instrumentation relies on the UI being in one more or the other when it starts. 


    inTouch - Set to true to be in touch mode, false to be in focus mode. 

*android.app.Instrumentation.start()*

public void start()

Create and start a new thread in which to run instrumentation. This new thread 
will call to (|android.app.Instrumentation|) where you can implement the 
instrumentation. 



*android.app.Instrumentation.startActivitySync(Intent)*

public |android.app.Activity| startActivitySync(android.content.Intent intent)

Start a new activity and wait for it to begin running before returning. In 
addition to being synchronous, this method as some semantic differences from 
the standard (|android.content.Context|) call: the activity component is 
resolved before talking with the activity manager (its class name is specified 
in the Intent that this method ultimately starts), and it does not allow you to 
start activities that run in a different process. In addition, if the given 
Intent resolves to multiple activities, instead of displaying a dialog for the 
user to select an activity, an exception will be thrown. 

The function returns as soon as the activity goes idle following the call to 
its (|android.app.Activity|) . Generally this means it has gone through the 
full initialization including (|android.app.Activity|) and drawn and displayed 
its initial window. 


    intent - Description of the activity to start. 

*android.app.Instrumentation.startAllocCounting()*

public void startAllocCounting()





*android.app.Instrumentation.startPerformanceSnapshot()*

public void startPerformanceSnapshot()





*android.app.Instrumentation.startProfiling()*

public void startProfiling()

This method will start profiling if isProfiling() returns true. You should only 
call this method if you set the handleProfiling attribute in the manifest file 
for this Instrumentation to true. 



*android.app.Instrumentation.stopAllocCounting()*

public void stopAllocCounting()





*android.app.Instrumentation.stopProfiling()*

public void stopProfiling()

Stops profiling if isProfiling() returns true. 



*android.app.Instrumentation.waitForIdle(Runnable)*

public void waitForIdle(java.lang.Runnable recipient)

Schedule a callback for when the application's main thread goes idle (has no 
more events to process). 


    recipient - Called the next time the thread's message queue is idle. 

*android.app.Instrumentation.waitForIdleSync()*

public void waitForIdleSync()

Synchronously wait for the application to be idle. Can not be called from the 
main application thread -- use (|android.app.Instrumentation|) to execute 
instrumentation in its own thread. 



*android.app.Instrumentation.waitForMonitor(Instrumentation.ActivityMonitor)*

public |android.app.Activity| waitForMonitor(android.app.Instrumentation.ActivityMonitor monitor)

Wait for an existing (|android.app.Instrumentation.ActivityMonitor|) to be hit. 
Once the monitor has been hit, it is removed from the activity monitor list and 
the first created Activity object that matched it is returned. 


    monitor - The ActivityMonitor to wait for. 

    Returns: The Activity object that matched the monitor. 

*android.app.Instrumentation.waitForMonitorWithTimeout(Instrumentation.ActivityMonitor,long)*

public |android.app.Activity| waitForMonitorWithTimeout(
  android.app.Instrumentation.ActivityMonitor monitor,
  long timeOut)

Wait for an existing (|android.app.Instrumentation.ActivityMonitor|) to be hit 
till the timeout expires. Once the monitor has been hit, it is removed from the 
activity monitor list and the first created Activity object that matched it is 
returned. If the timeout expires, a null object is returned. 


    monitor - The ActivityMonitor to wait for. 
    timeOut - The timeout value in secs. 

    Returns: The Activity object that matched the monitor. 


