*android.accessibilityservice.AccessibilityServiceInfo* *AccessibilityServiceInfo* 

public class AccessibilityServiceInfo
  extends    |java.lang.Object|
  implements |android.os.Parcelable|

|android.accessibilityservice.AccessibilityServiceInfo_Description|
|android.accessibilityservice.AccessibilityServiceInfo_Fields|
|android.accessibilityservice.AccessibilityServiceInfo_Constructors|
|android.accessibilityservice.AccessibilityServiceInfo_Methods|

================================================================================

*android.accessibilityservice.AccessibilityServiceInfo_Fields*
|int_android.accessibilityservice.AccessibilityServiceInfo.CAPABILITY_CAN_REQUEST_ENHANCED_WEB_ACCESSIBILITY|
|int_android.accessibilityservice.AccessibilityServiceInfo.CAPABILITY_CAN_REQUEST_FILTER_KEY_EVENTS|
|int_android.accessibilityservice.AccessibilityServiceInfo.CAPABILITY_CAN_REQUEST_TOUCH_EXPLORATION|
|int_android.accessibilityservice.AccessibilityServiceInfo.CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT|
|android.os.Parcelable.Creator<android.accessibilityservice.AccessibilityServiceInfo>_android.accessibilityservice.AccessibilityServiceInfo.CREATOR|
|int_android.accessibilityservice.AccessibilityServiceInfo.DEFAULT|
|int_android.accessibilityservice.AccessibilityServiceInfo.eventTypes|
|int_android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_ALL_MASK|
|int_android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_AUDIBLE|
|int_android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_BRAILLE|
|int_android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_GENERIC|
|int_android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_HAPTIC|
|int_android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_SPOKEN|
|int_android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_VISUAL|
|int_android.accessibilityservice.AccessibilityServiceInfo.feedbackType|
|int_android.accessibilityservice.AccessibilityServiceInfo.FLAG_INCLUDE_NOT_IMPORTANT_VIEWS|
|int_android.accessibilityservice.AccessibilityServiceInfo.FLAG_REPORT_VIEW_IDS|
|int_android.accessibilityservice.AccessibilityServiceInfo.FLAG_REQUEST_ENHANCED_WEB_ACCESSIBILITY|
|int_android.accessibilityservice.AccessibilityServiceInfo.FLAG_REQUEST_FILTER_KEY_EVENTS|
|int_android.accessibilityservice.AccessibilityServiceInfo.FLAG_REQUEST_TOUCH_EXPLORATION_MODE|
|int_android.accessibilityservice.AccessibilityServiceInfo.flags|
|long_android.accessibilityservice.AccessibilityServiceInfo.notificationTimeout|
|java.lang.String[]_android.accessibilityservice.AccessibilityServiceInfo.packageNames|

*android.accessibilityservice.AccessibilityServiceInfo_Constructors*
|android.accessibilityservice.AccessibilityServiceInfo()|Creates a new instance
|android.accessibilityservice.AccessibilityServiceInfo(ResolveInfo,Context)|Cre

*android.accessibilityservice.AccessibilityServiceInfo_Methods*
|android.accessibilityservice.AccessibilityServiceInfo.capabilityToString(int)|
|android.accessibilityservice.AccessibilityServiceInfo.describeContents()|
|android.accessibilityservice.AccessibilityServiceInfo.equals(Object)|
|android.accessibilityservice.AccessibilityServiceInfo.feedbackTypeToString(int)|
|android.accessibilityservice.AccessibilityServiceInfo.flagToString(int)|Return
|android.accessibilityservice.AccessibilityServiceInfo.getCanRetrieveWindowContent()|
|android.accessibilityservice.AccessibilityServiceInfo.getCapabilities()|Return
|android.accessibilityservice.AccessibilityServiceInfo.getCapabilityInfos()|
|android.accessibilityservice.AccessibilityServiceInfo.getDescription()|Gets th
|android.accessibilityservice.AccessibilityServiceInfo.getId()|The accessibilit
|android.accessibilityservice.AccessibilityServiceInfo.getResolveInfo()|The ser
|android.accessibilityservice.AccessibilityServiceInfo.getSettingsActivityName()|
|android.accessibilityservice.AccessibilityServiceInfo.hashCode()|
|android.accessibilityservice.AccessibilityServiceInfo.loadDescription(PackageManager)|
|android.accessibilityservice.AccessibilityServiceInfo.setCapabilities(int)|Set
|android.accessibilityservice.AccessibilityServiceInfo.setComponentName(ComponentName)|
|android.accessibilityservice.AccessibilityServiceInfo.toString()|
|android.accessibilityservice.AccessibilityServiceInfo.updateDynamicallyConfigurableProperties(AccessibilityServiceInfo)|
|android.accessibilityservice.AccessibilityServiceInfo.writeToParcel(Parcel,int)|

*android.accessibilityservice.AccessibilityServiceInfo_Description*

This class describes an (|android.accessibilityservice.AccessibilityService|) . 
The system notifies an (|android.accessibilityservice.AccessibilityService|) 
for (|android.view.accessibility.AccessibilityEvent|) s according to the 
information encapsulated in this class. 

Developer Guides For more information about creating AccessibilityServices, 
read the <a href="guide/topics/ui/accessibility/index.html">Accessibility 
developer guide. 



*int_android.accessibilityservice.AccessibilityServiceInfo.CAPABILITY_CAN_REQUEST_ENHANCED_WEB_ACCESSIBILITY*

Capability: This accessibility service can request enhanced web accessibility 
enhancements. For example, installing scripts to make app content more 
accessible. 


*int_android.accessibilityservice.AccessibilityServiceInfo.CAPABILITY_CAN_REQUEST_FILTER_KEY_EVENTS*

Capability: This accessibility service can request to filter the key event 
stream. 


*int_android.accessibilityservice.AccessibilityServiceInfo.CAPABILITY_CAN_REQUEST_TOUCH_EXPLORATION*

Capability: This accessibility service can request touch exploration mode in 
which touched items are spoken aloud and the UI can be explored via gestures. 


*int_android.accessibilityservice.AccessibilityServiceInfo.CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT*

Capability: This accessibility service can retrieve the active window content. 


*android.os.Parcelable.Creator<android.accessibilityservice.AccessibilityServiceInfo>_android.accessibilityservice.AccessibilityServiceInfo.CREATOR*




*int_android.accessibilityservice.AccessibilityServiceInfo.DEFAULT*

If an (|android.accessibilityservice.AccessibilityService|) is the default for 
a given type. Default service is invoked only if no package specific one 
exists. In case of more than one package specific service only the earlier 
registered is notified. 


*int_android.accessibilityservice.AccessibilityServiceInfo.eventTypes*

The event types an (|android.accessibilityservice.AccessibilityService|) is 
interested in. 

Can be dynamically set at runtime. 


*int_android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_ALL_MASK*

Mask for all feedback types. 


*int_android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_AUDIBLE*

Denotes audible (not spoken) feedback. 


*int_android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_BRAILLE*

Denotes braille feedback. 


*int_android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_GENERIC*

Denotes generic feedback. 


*int_android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_HAPTIC*

Denotes haptic feedback. 


*int_android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_SPOKEN*

Denotes spoken feedback. 


*int_android.accessibilityservice.AccessibilityServiceInfo.FEEDBACK_VISUAL*

Denotes visual feedback. 


*int_android.accessibilityservice.AccessibilityServiceInfo.feedbackType*

The feedback type an (|android.accessibilityservice.AccessibilityService|) 
provides. 

Can be dynamically set at runtime. 


*int_android.accessibilityservice.AccessibilityServiceInfo.FLAG_INCLUDE_NOT_IMPORTANT_VIEWS*

If this flag is set the system will regard views that are not important for 
accessibility in addition to the ones that are important for accessibility. 
That is, views that are marked as not important for accessibility via 
(|android.view.View|) or (|android.view.View|) and views that are marked as 
potentially important for accessibility via (|android.view.View|) for which the 
system has determined that are not important for accessibility, are reported 
while querying the window content and also the accessibility service will 
receive accessibility events from them. 

Note: For accessibility services targeting API version (|Build.VERSION_CODES|) 
or higher this flag has to be explicitly set for the system to regard views 
that are not important for accessibility. For accessibility services targeting 
API version lower than (|Build.VERSION_CODES|) this flag is ignored and all 
views are regarded for accessibility purposes. 

Usually views not important for accessibility are layout managers that do not 
react to user actions, do not draw any content, and do not have any special 
semantics in the context of the screen content. For example, a three by three 
grid can be implemented as three horizontal linear layouts and one vertical, or 
three vertical linear layouts and one horizontal, or one grid layout, etc. In 
this context the actual layout mangers used to achieve the grid configuration 
are not important, rather it is important that there are nine evenly 
distributed elements. 


*int_android.accessibilityservice.AccessibilityServiceInfo.FLAG_REPORT_VIEW_IDS*

This flag requests that the 
(|android.view.accessibility.AccessibilityNodeInfo|) s obtained by an 
(|android.accessibilityservice.AccessibilityService|) contain the id of the 
source view. The source view id will be a fully qualified resource name of the 
form "package:id/name", for example "foo.bar:id/my_list", and it is useful for 
UI test automation. This flag is not set by default. 


*int_android.accessibilityservice.AccessibilityServiceInfo.FLAG_REQUEST_ENHANCED_WEB_ACCESSIBILITY*

This flag requests from the system to enable web accessibility enhancing 
extensions. Such extensions aim to provide improved accessibility support for 
content presented in a (|android.webkit.WebView|) . An example of such an 
extension is injecting JavaScript from a secure source. The system will enable 
enhanced web accessibility if there is at least one accessibility service that 
has this flag set. Hence, clearing this flag does not guarantee that the device 
will not have enhanced web accessibility enabled since there may be another 
enabled service that requested it. 

Services that want to set this flag have to declare this capability in their 
meta-data by setting the attribute #canRequestEnhancedWebAccessibility 
canRequestEnhancedWebAccessibility(|android.R.attr|) to true, otherwise this 
flag will be ignored. For how to declare the meta-data of a service refer 
toAccessibilityService#SERVICE_META_DATA. 


*int_android.accessibilityservice.AccessibilityServiceInfo.FLAG_REQUEST_FILTER_KEY_EVENTS*

This flag requests from the system to filter key events. If this flag is set 
the accessibility service will receive the key events before applications 
allowing it implement global shortcuts. Setting this flag does not guarantee 
that this service will filter key events since only one service can do so at 
any given time. This avoids user confusion due to behavior change in case 
different key filtering services are enabled. If there is already another key 
filtering service enabled, this one will not receive key events. 

Services that want to set this flag have to declare this capability in their 
meta-data by setting the attribute #canRequestFilterKeyEvents 
canRequestFilterKeyEvents(|android.R.attr|) to true, otherwise this flag will 
be ignored. For how to declare the meta-data of a service refer 
toAccessibilityService#SERVICE_META_DATA. 


*int_android.accessibilityservice.AccessibilityServiceInfo.FLAG_REQUEST_TOUCH_EXPLORATION_MODE*

This flag requests that the system gets into touch exploration mode. In this 
mode a single finger moving on the screen behaves as a mouse pointer hovering 
over the user interface. The system will also detect certain gestures performed 
on the touch screen and notify this service. The system will enable touch 
exploration mode if there is at least one accessibility service that has this 
flag set. Hence, clearing this flag does not guarantee that the device will not 
be in touch exploration mode since there may be another enabled service that 
requested it. 

For accessibility services targeting API version higher than 
(|Build.VERSION_CODES|) that want to set this flag have to declare this 
capability in their meta-data by setting the attribute 
canRequestTouchExplorationMode(|android.R.attr|) to true, otherwise this flag 
will be ignored. For how to declare the meta-data of a service refer 
toAccessibilityService#SERVICE_META_DATA. 

Services targeting API version equal to or lower than (|Build.VERSION_CODES|) 
will work normally, i.e. the first time they are run, if this flag is 
specified, a dialog is shown to the user to confirm enabling explore by touch. 


*int_android.accessibilityservice.AccessibilityServiceInfo.flags*

This field represents a set of flags used for configuring an 
(|android.accessibilityservice.AccessibilityService|) . 

Can be dynamically set at runtime. 


*long_android.accessibilityservice.AccessibilityServiceInfo.notificationTimeout*

The timeout after the most recent event of a given type before an 
(|android.accessibilityservice.AccessibilityService|) is notified. 

Can be dynamically set at runtime.. 

Note: The event notification timeout is useful to avoid propagating events to 
the client too frequently since this is accomplished via an expensive 
interprocess call. One can think of the timeout as a criteria to determine when 
event generation has settled down. 


*java.lang.String[]_android.accessibilityservice.AccessibilityServiceInfo.packageNames*

The package names an (|android.accessibilityservice.AccessibilityService|) is 
interested in. Setting to null is equivalent to all packages. 

Can be dynamically set at runtime. 



*android.accessibilityservice.AccessibilityServiceInfo()*

public AccessibilityServiceInfo()

Creates a new instance. 


*android.accessibilityservice.AccessibilityServiceInfo(ResolveInfo,Context)*

public AccessibilityServiceInfo(
  android.content.pm.ResolveInfo resolveInfo,
  android.content.Context context)
  throws |java.io.IOException|
         |XmlPullParserException|
         
Creates a new instance. 

    resolveInfo - The service resolve info. 
    context - Context for accessing resources. 

*android.accessibilityservice.AccessibilityServiceInfo.capabilityToString(int)*

public static |java.lang.String| capabilityToString(int capability)

Returns the string representation of a capability. For example, 
(|android.accessibilityservice.AccessibilityServiceInfo|) is represented by the 
string CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT. 


    capability - The capability. 

    Returns: The string representation. 

*android.accessibilityservice.AccessibilityServiceInfo.describeContents()*

public int describeContents()





*android.accessibilityservice.AccessibilityServiceInfo.equals(Object)*

public boolean equals(java.lang.Object obj)





*android.accessibilityservice.AccessibilityServiceInfo.feedbackTypeToString(int)*

public static |java.lang.String| feedbackTypeToString(int feedbackType)

Returns the string representation of a feedback type. For example, 
(|android.accessibilityservice.AccessibilityServiceInfo|) is represented by the 
string FEEDBACK_SPOKEN. 


    feedbackType - The feedback type. 

    Returns: The string representation. 

*android.accessibilityservice.AccessibilityServiceInfo.flagToString(int)*

public static |java.lang.String| flagToString(int flag)

Returns the string representation of a flag. For example, 
(|android.accessibilityservice.AccessibilityServiceInfo|) is represented by the 
string DEFAULT. 


    flag - The flag. 

    Returns: The string representation. 

*android.accessibilityservice.AccessibilityServiceInfo.getCanRetrieveWindowContent()*

public boolean getCanRetrieveWindowContent()

Whether this service can retrieve the current window's content. 

Statically set from 
meta-data(|android.accessibilityservice.AccessibilityService|) . 

    Deprecated: Use {@link #getCapabilities()}.


    Returns: True if window content can be retrieved. 

*android.accessibilityservice.AccessibilityServiceInfo.getCapabilities()*

public int getCapabilities()

Returns the bit mask of capabilities this accessibility service has such as 
being able to retrieve the active window content, etc. 



    Returns: The capability bit mask. 

*android.accessibilityservice.AccessibilityServiceInfo.getCapabilityInfos()*

public |java.util.List|<CapabilityInfo> getCapabilityInfos()





    Returns: The list of {@link CapabilityInfo} objects. 

*android.accessibilityservice.AccessibilityServiceInfo.getDescription()*

public |java.lang.String| getDescription()

Gets the non-localized description of the accessibility service. 

Statically set from 
meta-data(|android.accessibilityservice.AccessibilityService|) . 

    Deprecated: Use {@link #loadDescription(PackageManager)}.


    Returns: The description. 

*android.accessibilityservice.AccessibilityServiceInfo.getId()*

public |java.lang.String| getId()

The accessibility service id. 

Generated by the system. 



    Returns: 

*android.accessibilityservice.AccessibilityServiceInfo.getResolveInfo()*

public |android.content.pm.ResolveInfo| getResolveInfo()

The service (|android.content.pm.ResolveInfo|) . 

Generated by the system. 



    Returns: 

*android.accessibilityservice.AccessibilityServiceInfo.getSettingsActivityName()*

public |java.lang.String| getSettingsActivityName()

The settings activity name. 

Statically set from 
meta-data(|android.accessibilityservice.AccessibilityService|) . 



    Returns: The settings activity name. 

*android.accessibilityservice.AccessibilityServiceInfo.hashCode()*

public int hashCode()





*android.accessibilityservice.AccessibilityServiceInfo.loadDescription(PackageManager)*

public |java.lang.String| loadDescription(android.content.pm.PackageManager packageManager)

The localized description of the accessibility service. 

Statically set from 
meta-data(|android.accessibilityservice.AccessibilityService|) . 



    Returns: The localized description. 

*android.accessibilityservice.AccessibilityServiceInfo.setCapabilities(int)*

public void setCapabilities(int capabilities)

Sets the bit mask of capabilities this accessibility service has such as being 
able to retrieve the active window content, etc. 


    capabilities - The capability bit mask. 

*android.accessibilityservice.AccessibilityServiceInfo.setComponentName(ComponentName)*

public void setComponentName(android.content.ComponentName component)





*android.accessibilityservice.AccessibilityServiceInfo.toString()*

public |java.lang.String| toString()





*android.accessibilityservice.AccessibilityServiceInfo.updateDynamicallyConfigurableProperties(AccessibilityServiceInfo)*

public void updateDynamicallyConfigurableProperties(android.accessibilityservice.AccessibilityServiceInfo other)

Updates the properties that an AccessibilitySerivice can change dynamically. 


    other - The info from which to update the properties. 

*android.accessibilityservice.AccessibilityServiceInfo.writeToParcel(Parcel,int)*

public void writeToParcel(
  android.os.Parcel parcel,
  int flagz)






