*android.text.format.DateUtils* *DateUtils* This class contains various date-rel

public class DateUtils
  extends    |java.lang.Object|

|android.text.format.DateUtils_Description|
|android.text.format.DateUtils_Fields|
|android.text.format.DateUtils_Constructors|
|android.text.format.DateUtils_Methods|

================================================================================

*android.text.format.DateUtils_Fields*
|java.lang.String_android.text.format.DateUtils.ABBREV_MONTH_FORMAT|
|java.lang.String_android.text.format.DateUtils.ABBREV_WEEKDAY_FORMAT|
|long_android.text.format.DateUtils.DAY_IN_MILLIS|
|int_android.text.format.DateUtils.FORMAT_12HOUR|
|int_android.text.format.DateUtils.FORMAT_24HOUR|
|int_android.text.format.DateUtils.FORMAT_ABBREV_ALL|
|int_android.text.format.DateUtils.FORMAT_ABBREV_MONTH|
|int_android.text.format.DateUtils.FORMAT_ABBREV_RELATIVE|
|int_android.text.format.DateUtils.FORMAT_ABBREV_TIME|
|int_android.text.format.DateUtils.FORMAT_ABBREV_WEEKDAY|
|int_android.text.format.DateUtils.FORMAT_CAP_AMPM|
|int_android.text.format.DateUtils.FORMAT_CAP_MIDNIGHT|
|int_android.text.format.DateUtils.FORMAT_CAP_NOON|
|int_android.text.format.DateUtils.FORMAT_CAP_NOON_MIDNIGHT|
|int_android.text.format.DateUtils.FORMAT_NO_MIDNIGHT|
|int_android.text.format.DateUtils.FORMAT_NO_MONTH_DAY|
|int_android.text.format.DateUtils.FORMAT_NO_NOON|
|int_android.text.format.DateUtils.FORMAT_NO_NOON_MIDNIGHT|
|int_android.text.format.DateUtils.FORMAT_NO_YEAR|
|int_android.text.format.DateUtils.FORMAT_NUMERIC_DATE|
|int_android.text.format.DateUtils.FORMAT_SHOW_DATE|
|int_android.text.format.DateUtils.FORMAT_SHOW_TIME|
|int_android.text.format.DateUtils.FORMAT_SHOW_WEEKDAY|
|int_android.text.format.DateUtils.FORMAT_SHOW_YEAR|
|int_android.text.format.DateUtils.FORMAT_UTC|
|long_android.text.format.DateUtils.HOUR_IN_MILLIS|
|java.lang.String_android.text.format.DateUtils.HOUR_MINUTE_24|
|int_android.text.format.DateUtils.LENGTH_LONG|
|int_android.text.format.DateUtils.LENGTH_MEDIUM|
|int_android.text.format.DateUtils.LENGTH_SHORT|
|int_android.text.format.DateUtils.LENGTH_SHORTER|
|int_android.text.format.DateUtils.LENGTH_SHORTEST|
|long_android.text.format.DateUtils.MINUTE_IN_MILLIS|
|java.lang.String_android.text.format.DateUtils.MONTH_DAY_FORMAT|
|java.lang.String_android.text.format.DateUtils.MONTH_FORMAT|
|java.lang.String_android.text.format.DateUtils.NUMERIC_MONTH_FORMAT|
|int[]_android.text.format.DateUtils.sameMonthTable|
|int[]_android.text.format.DateUtils.sameYearTable|
|long_android.text.format.DateUtils.SECOND_IN_MILLIS|
|long_android.text.format.DateUtils.WEEK_IN_MILLIS|
|java.lang.String_android.text.format.DateUtils.WEEKDAY_FORMAT|
|java.lang.String_android.text.format.DateUtils.YEAR_FORMAT|
|java.lang.String_android.text.format.DateUtils.YEAR_FORMAT_TWO_DIGITS|
|long_android.text.format.DateUtils.YEAR_IN_MILLIS|

*android.text.format.DateUtils_Constructors*
|android.text.format.DateUtils()|

*android.text.format.DateUtils_Methods*
|android.text.format.DateUtils.formatDateRange(Context,Formatter,long,long,int)|
|android.text.format.DateUtils.formatDateRange(Context,Formatter,long,long,int,String)|
|android.text.format.DateUtils.formatDateRange(Context,long,long,int)|Formats a
|android.text.format.DateUtils.formatDateTime(Context,long,int)|Formats a date 
|android.text.format.DateUtils.formatDuration(long)|Return given duration in a 
|android.text.format.DateUtils.formatElapsedTime(long)|Formats an elapsed time 
|android.text.format.DateUtils.formatElapsedTime(StringBuilder,long)|Formats an
|android.text.format.DateUtils.formatSameDayTime(long,long,int,int)|Format a da
|android.text.format.DateUtils.getAMPMString(int)|Return a localized string for
|android.text.format.DateUtils.getDayOfWeekString(int,int)|Return a string for 
|android.text.format.DateUtils.getMonthString(int,int)|Return a localized strin
|android.text.format.DateUtils.getRelativeDateTimeString(Context,long,long,long,int)|
|android.text.format.DateUtils.getRelativeTimeSpanString(Context,long)|Convenie
|android.text.format.DateUtils.getRelativeTimeSpanString(Context,long,boolean)|
|android.text.format.DateUtils.getRelativeTimeSpanString(long)|Returns a string
|android.text.format.DateUtils.getRelativeTimeSpanString(long,long,long)|Return
|android.text.format.DateUtils.getRelativeTimeSpanString(long,long,long,int)|Re
|android.text.format.DateUtils.isToday(long)|

*android.text.format.DateUtils_Description*

This class contains various date-related utilities for creating text for things 
like elapsed time and date ranges, strings for days of the week and months, and 
AM/PM text etc. 



*java.lang.String_android.text.format.DateUtils.ABBREV_MONTH_FORMAT*

This is not actually a useful month name in all locales. 


*java.lang.String_android.text.format.DateUtils.ABBREV_WEEKDAY_FORMAT*




*long_android.text.format.DateUtils.DAY_IN_MILLIS*




*int_android.text.format.DateUtils.FORMAT_12HOUR*




*int_android.text.format.DateUtils.FORMAT_24HOUR*




*int_android.text.format.DateUtils.FORMAT_ABBREV_ALL*




*int_android.text.format.DateUtils.FORMAT_ABBREV_MONTH*




*int_android.text.format.DateUtils.FORMAT_ABBREV_RELATIVE*




*int_android.text.format.DateUtils.FORMAT_ABBREV_TIME*




*int_android.text.format.DateUtils.FORMAT_ABBREV_WEEKDAY*




*int_android.text.format.DateUtils.FORMAT_CAP_AMPM*




*int_android.text.format.DateUtils.FORMAT_CAP_MIDNIGHT*




*int_android.text.format.DateUtils.FORMAT_CAP_NOON*




*int_android.text.format.DateUtils.FORMAT_CAP_NOON_MIDNIGHT*




*int_android.text.format.DateUtils.FORMAT_NO_MIDNIGHT*




*int_android.text.format.DateUtils.FORMAT_NO_MONTH_DAY*




*int_android.text.format.DateUtils.FORMAT_NO_NOON*




*int_android.text.format.DateUtils.FORMAT_NO_NOON_MIDNIGHT*




*int_android.text.format.DateUtils.FORMAT_NO_YEAR*




*int_android.text.format.DateUtils.FORMAT_NUMERIC_DATE*




*int_android.text.format.DateUtils.FORMAT_SHOW_DATE*




*int_android.text.format.DateUtils.FORMAT_SHOW_TIME*




*int_android.text.format.DateUtils.FORMAT_SHOW_WEEKDAY*




*int_android.text.format.DateUtils.FORMAT_SHOW_YEAR*




*int_android.text.format.DateUtils.FORMAT_UTC*




*long_android.text.format.DateUtils.HOUR_IN_MILLIS*




*java.lang.String_android.text.format.DateUtils.HOUR_MINUTE_24*

This is not actually the preferred 24-hour date format in all locales. 


*int_android.text.format.DateUtils.LENGTH_LONG*

Request the full spelled-out name. For use with the 'abbrev' parameter of 
(|android.text.format.DateUtils|) and (|android.text.format.DateUtils|) . 


*int_android.text.format.DateUtils.LENGTH_MEDIUM*

Request an abbreviated version of the name. For use with the 'abbrev' parameter 
of (|android.text.format.DateUtils|) and (|android.text.format.DateUtils|) . 


*int_android.text.format.DateUtils.LENGTH_SHORT*

Request a shorter abbreviated version of the name. For use with the 'abbrev' 
parameter of (|android.text.format.DateUtils|) and 
(|android.text.format.DateUtils|) . 


*int_android.text.format.DateUtils.LENGTH_SHORTER*

Request an even shorter abbreviated version of the name. Do not use this. 
Currently this will always return the same result as 
(|android.text.format.DateUtils|) . 


*int_android.text.format.DateUtils.LENGTH_SHORTEST*

Request an even shorter abbreviated version of the name. For use with the 
'abbrev' parameter of (|android.text.format.DateUtils|) and 
(|android.text.format.DateUtils|) . 


*long_android.text.format.DateUtils.MINUTE_IN_MILLIS*




*java.lang.String_android.text.format.DateUtils.MONTH_DAY_FORMAT*




*java.lang.String_android.text.format.DateUtils.MONTH_FORMAT*




*java.lang.String_android.text.format.DateUtils.NUMERIC_MONTH_FORMAT*




*int[]_android.text.format.DateUtils.sameMonthTable*




*int[]_android.text.format.DateUtils.sameYearTable*




*long_android.text.format.DateUtils.SECOND_IN_MILLIS*




*long_android.text.format.DateUtils.WEEK_IN_MILLIS*




*java.lang.String_android.text.format.DateUtils.WEEKDAY_FORMAT*




*java.lang.String_android.text.format.DateUtils.YEAR_FORMAT*




*java.lang.String_android.text.format.DateUtils.YEAR_FORMAT_TWO_DIGITS*




*long_android.text.format.DateUtils.YEAR_IN_MILLIS*

This constant is actually the length of 364 days, not of a year! 



*android.text.format.DateUtils()*

public DateUtils()




*android.text.format.DateUtils.formatDateRange(Context,Formatter,long,long,int)*

public static |java.util.Formatter| formatDateRange(
  android.content.Context context,
  java.util.Formatter formatter,
  long startMillis,
  long endMillis,
  int flags)

Formats a date or a time range according to the local conventions. 

Note that this is a convenience method for formatting the date or time range in 
the local time zone. If you want to specify the time zone please use 
formatDateRange(|android.text.format.DateUtils|) . 


    context - the context is required only if the time is shown 
    formatter - the Formatter used for formatting the date range. Note: be sure to call 
       setLength(0) on StringBuilder passed to the Formatter constructor unless 
       you want the results to accumulate. 
    startMillis - the start time in UTC milliseconds 
    endMillis - the end time in UTC milliseconds 
    flags - a bit mask of options See {@link #formatDateRange(Context, Formatter, long, 
       long, int, String) formatDateRange} 

    Returns: a string containing the formatted date/time range. 

*android.text.format.DateUtils.formatDateRange(Context,Formatter,long,long,int,String)*

public static |java.util.Formatter| formatDateRange(
  android.content.Context context,
  java.util.Formatter formatter,
  long startMillis,
  long endMillis,
  int flags,
  java.lang.String timeZone)

Formats a date or a time range according to the local conventions. 

Example output strings (date formats in these examples are shown using the US 
date format convention but that may change depending on the local settings): 

10:15am 3:00pm - 4:00pm 3pm - 4pm 3PM - 4PM 08:00 - 17:00 Oct 9 Tue, Oct 9 
October 9, 2007 Oct 9 - 10 Oct 9 - 10, 2007 Oct 28 - Nov 3, 2007 Dec 31, 2007 - 
Jan 1, 2008 Oct 9, 8:00am - Oct 10, 5:00pm 12/31/2007 - 01/01/2008 

The flags argument is a bitmask of options from the following list: 

FORMAT_SHOW_TIME FORMAT_SHOW_WEEKDAY FORMAT_SHOW_YEAR FORMAT_SHOW_DATE 
FORMAT_NO_MONTH_DAY FORMAT_12HOUR FORMAT_24HOUR FORMAT_CAP_AMPM FORMAT_NO_NOON 
FORMAT_CAP_NOON FORMAT_NO_MIDNIGHT FORMAT_CAP_MIDNIGHT FORMAT_UTC 
FORMAT_ABBREV_TIME FORMAT_ABBREV_WEEKDAY FORMAT_ABBREV_MONTH FORMAT_ABBREV_ALL 
FORMAT_NUMERIC_DATE 

If FORMAT_SHOW_TIME is set, the time is shown as part of the date range. If the 
start and end time are the same, then just the start time is shown. 

If FORMAT_SHOW_WEEKDAY is set, then the weekday is shown. 

If FORMAT_SHOW_YEAR is set, then the year is always shown. If FORMAT_SHOW_YEAR 
is not set, then the year is shown only if it is different from the current 
year, or if the start and end dates fall on different years. 

Normally the date is shown unless the start and end day are the same. If 
FORMAT_SHOW_DATE is set, then the date is always shown, even for same day 
ranges. 

If FORMAT_NO_MONTH_DAY is set, then if the date is shown, just the month name 
will be shown, not the day of the month. For example, "January, 2008" instead 
of "January 6 - 12, 2008". 

If FORMAT_CAP_AMPM is set and 12-hour time is used, then the "AM" and "PM" are 
capitalized. You should not use this flag because in some locales these terms 
cannot be capitalized, and in many others it doesn't make sense to do so even 
though it is possible. 

If FORMAT_NO_NOON is set and 12-hour time is used, then "12pm" is shown instead 
of "noon". 

If FORMAT_CAP_NOON is set and 12-hour time is used, then "Noon" is shown 
instead of "noon". You should probably not use this flag because in many 
locales it will not make sense to capitalize the term. 

If FORMAT_NO_MIDNIGHT is set and 12-hour time is used, then "12am" is shown 
instead of "midnight". 

If FORMAT_CAP_MIDNIGHT is set and 12-hour time is used, then "Midnight" is 
shown instead of "midnight". You should probably not use this flag because in 
many locales it will not make sense to capitalize the term. 

If FORMAT_12HOUR is set and the time is shown, then the time is shown in the 
12-hour time format. You should not normally set this. Instead, let the time 
format be chosen automatically according to the system settings. If both 
FORMAT_12HOUR and FORMAT_24HOUR are set, then FORMAT_24HOUR takes precedence. 

If FORMAT_24HOUR is set and the time is shown, then the time is shown in the 
24-hour time format. You should not normally set this. Instead, let the time 
format be chosen automatically according to the system settings. If both 
FORMAT_12HOUR and FORMAT_24HOUR are set, then FORMAT_24HOUR takes precedence. 

If FORMAT_UTC is set, then the UTC time zone is used for the start and end 
milliseconds unless a time zone is specified. If a time zone is specified it 
will be used regardless of the FORMAT_UTC flag. 

If FORMAT_ABBREV_TIME is set and 12-hour time format is used, then the start 
and end times (if shown) are abbreviated by not showing the minutes if they are 
zero. For example, instead of "3:00pm" the time would be abbreviated to "3pm". 

If FORMAT_ABBREV_WEEKDAY is set, then the weekday (if shown) is abbreviated to 
a 3-letter string. 

If FORMAT_ABBREV_MONTH is set, then the month (if shown) is abbreviated to a 
3-letter string. 

If FORMAT_ABBREV_ALL is set, then the weekday and the month (if shown) are 
abbreviated to 3-letter strings. 

If FORMAT_NUMERIC_DATE is set, then the date is shown in numeric format instead 
of using the name of the month. For example, "12/31/2008" instead of "December 
31, 2008". 

If the end date ends at 12:00am at the beginning of a day, it is formatted as 
the end of the previous day in two scenarios: 

For single day events. This results in "8pm - midnight" instead of "Nov 10, 8pm 
- Nov 11, 12am". When the time is not displayed. This results in "Nov 10 - 11" 
for an event with a start date of Nov 10 and an end date of Nov 12 at 00:00. 


    context - the context is required only if the time is shown 
    formatter - the Formatter used for formatting the date range. Note: be sure to call 
       setLength(0) on StringBuilder passed to the Formatter constructor unless 
       you want the results to accumulate. 
    startMillis - the start time in UTC milliseconds 
    endMillis - the end time in UTC milliseconds 
    flags - a bit mask of options 
    timeZone - the time zone to compute the string in. Use null for local or if the FORMAT_UTC 
       flag is being used. 

    Returns: the formatter with the formatted date/time range appended to the string buffer. 

*android.text.format.DateUtils.formatDateRange(Context,long,long,int)*

public static |java.lang.String| formatDateRange(
  android.content.Context context,
  long startMillis,
  long endMillis,
  int flags)

Formats a date or a time range according to the local conventions. 

Note that this is a convenience method. Using it involves creating an internal 
(|java.util.Formatter|) instance on-the-fly, which is somewhat costly in terms 
of memory and time. This is probably acceptable if you use the method only 
rarely, but if you rely on it for formatting a large number of dates, consider 
creating and reusing your own (|java.util.Formatter|) instance and use the 
version of formatDateRange(|android.text.format.DateUtils|) that takes a 
(|java.util.Formatter|) . 


    context - the context is required only if the time is shown 
    startMillis - the start time in UTC milliseconds 
    endMillis - the end time in UTC milliseconds 
    flags - a bit mask of options See {@link #formatDateRange(Context, Formatter, long, 
       long, int, String) formatDateRange} 

    Returns: a string containing the formatted date/time range. 

*android.text.format.DateUtils.formatDateTime(Context,long,int)*

public static |java.lang.String| formatDateTime(
  android.content.Context context,
  long millis,
  int flags)

Formats a date or a time according to the local conventions. There are lots of 
options that allow the caller to control, for example, if the time is shown, if 
the day of the week is shown, if the month name is abbreviated, if noon is 
shown instead of 12pm, and so on. For the complete list of options, see the 
documentation for (|android.text.format.DateUtils|) . 

Example output strings (date formats in these examples are shown using the US 
date format convention but that may change depending on the local settings): 

10:15am 3:00pm 3pm 3PM 08:00 17:00 noon Noon midnight Midnight Oct 31 Oct 31, 
2007 October 31, 2007 10am, Oct 31 17:00, Oct 31 Wed Wednesday 10am, Wed, Oct 
31 Wed, Oct 31 Wednesday, Oct 31 Wed, Oct 31, 2007 Wed, October 31 10/31/2007 


    context - the context is required only if the time is shown 
    millis - a point in time in UTC milliseconds 
    flags - a bit mask of formatting options 

    Returns: a string containing the formatted date/time. 

*android.text.format.DateUtils.formatDuration(long)*

public static |java.lang.CharSequence| formatDuration(long millis)

Return given duration in a human-friendly format. For example, "4 minutes" or 
"1 second". Returns only largest meaningful unit of time, from seconds up to 
hours. 



*android.text.format.DateUtils.formatElapsedTime(long)*

public static |java.lang.String| formatElapsedTime(long elapsedSeconds)

Formats an elapsed time in the form "MM:SS" or "H:MM:SS" for display on the 
call-in-progress screen. 


    elapsedSeconds - the elapsed time in seconds. 

*android.text.format.DateUtils.formatElapsedTime(StringBuilder,long)*

public static |java.lang.String| formatElapsedTime(
  java.lang.StringBuilder recycle,
  long elapsedSeconds)

Formats an elapsed time in a format like "MM:SS" or "H:MM:SS" (using a form 
suited to the current locale), similar to that used on the call-in-progress 
screen. 


    recycle - {@link StringBuilder} to recycle, or null to use a temporary one. 
    elapsedSeconds - the elapsed time in seconds. 

*android.text.format.DateUtils.formatSameDayTime(long,long,int,int)*

public static final |java.lang.CharSequence| formatSameDayTime(
  long then,
  long now,
  int dateStyle,
  int timeStyle)

Format a date / time such that if the then is on the same day as now, it shows 
just the time and if it's a different day, it shows just the date. 

The parameters dateFormat and timeFormat should each be one of 
(|java.text.DateFormat|) , (|java.text.DateFormat|) , (|java.text.DateFormat|) 
, (|java.text.DateFormat|) or (|java.text.DateFormat|) 


    then - the date to format 
    now - the base time 
    dateStyle - how to format the date portion. 
    timeStyle - how to format the time portion. 

*android.text.format.DateUtils.getAMPMString(int)*

public static |java.lang.String| getAMPMString(int ampm)

Return a localized string for AM or PM. 

    Deprecated: Use {@link java.text.SimpleDateFormat} instead.

    ampm - Either {@link Calendar#AM Calendar.AM} or {@link Calendar#PM Calendar.PM}. 

    Returns: Localized version of "AM" or "PM". 

*android.text.format.DateUtils.getDayOfWeekString(int,int)*

public static |java.lang.String| getDayOfWeekString(
  int dayOfWeek,
  int abbrev)

Return a string for the day of the week. 

    Deprecated: Use {@link java.text.SimpleDateFormat} instead.

    dayOfWeek - One of {@link Calendar#SUNDAY Calendar.SUNDAY}, {@link Calendar#MONDAY 
       Calendar.MONDAY}, etc. 
    abbrev - One of {@link #LENGTH_LONG}, {@link #LENGTH_SHORT}, {@link #LENGTH_MEDIUM}, or 
       {@link #LENGTH_SHORTEST}. Note that in most languages, {@link 
       #LENGTH_SHORT} will return the same as {@link #LENGTH_MEDIUM}. Undefined 
       lengths will return {@link #LENGTH_MEDIUM} but may return something 
       different in the future. 

*android.text.format.DateUtils.getMonthString(int,int)*

public static |java.lang.String| getMonthString(
  int month,
  int abbrev)

Return a localized string for the month of the year. 

    Deprecated: Use {@link java.text.SimpleDateFormat} instead.

    month - One of {@link Calendar#JANUARY Calendar.JANUARY}, {@link Calendar#FEBRUARY 
       Calendar.FEBRUARY}, etc. 
    abbrev - One of {@link #LENGTH_LONG}, {@link #LENGTH_MEDIUM}, or {@link 
       #LENGTH_SHORTEST}. Undefined lengths will return {@link #LENGTH_MEDIUM} 
       but may return something different in the future. 

    Returns: Localized month of the year. 

*android.text.format.DateUtils.getRelativeDateTimeString(Context,long,long,long,int)*

public static |java.lang.CharSequence| getRelativeDateTimeString(
  android.content.Context c,
  long time,
  long minResolution,
  long transitionResolution,
  int flags)

Return string describing the elapsed time since startTime formatted like 
"[relative time/date], [time]". 

Example output strings for the US date format. 

3 mins ago, 10:15 AM yesterday, 12:20 PM Dec 12, 4:12 AM 11/14/2007, 8:20 AM 


    time - some time in the past. 
    minResolution - the minimum elapsed time (in milliseconds) to report when showing relative 
       times. For example, a time 3 seconds in the past will be reported as "0 
       minutes ago" if this is set to {@link #MINUTE_IN_MILLIS}. 
    transitionResolution - the elapsed time (in milliseconds) at which to stop reporting relative 
       measurements. Elapsed times greater than this resolution will default to 
       normal date formatting. For example, will transition from "6 days ago" 
       to "Dec 12" when using {@link #WEEK_IN_MILLIS}. 

*android.text.format.DateUtils.getRelativeTimeSpanString(Context,long)*

public static |java.lang.CharSequence| getRelativeTimeSpanString(
  android.content.Context c,
  long millis)

Convenience function to return relative time string without preposition. 


    c - context for resources 
    millis - time in milliseconds 

    Returns: {@link CharSequence} containing relative time. 

*android.text.format.DateUtils.getRelativeTimeSpanString(Context,long,boolean)*

public static |java.lang.CharSequence| getRelativeTimeSpanString(
  android.content.Context c,
  long millis,
  boolean withPreposition)




    withPreposition - If true, the string returned will include the correct preposition ("at 9:20am", 
       "on 10/12/2008" or "on May 29"). 

    Returns: a relative time string to display the time expressed by millis. Times are 
             counted starting at midnight, which means that assuming that the 
             current time is March 31st, 0:30: 

"millis=0:10 today" will be displayed as "0:10" "millis=11:30pm the day before" 
             will be displayed as "Mar 30" 

If the given millis is in a different year, then the full date is returned in 
             numeric format (e.g., "10/12/2008"). 

*android.text.format.DateUtils.getRelativeTimeSpanString(long)*

public static |java.lang.CharSequence| getRelativeTimeSpanString(long startTime)

Returns a string describing the elapsed time since startTime. 


    startTime - some time in the past. 

    Returns: a String object containing the elapsed time. 

*android.text.format.DateUtils.getRelativeTimeSpanString(long,long,long)*

public static |java.lang.CharSequence| getRelativeTimeSpanString(
  long time,
  long now,
  long minResolution)

Returns a string describing 'time' as a time relative to 'now'. 

Time spans in the past are formatted like "42 minutes ago". Time spans in the 
future are formatted like "in 42 minutes". 


    time - the time to describe, in milliseconds 
    now - the current time in milliseconds 
    minResolution - the minimum timespan to report. For example, a time 3 seconds in the past will 
       be reported as "0 minutes ago" if this is set to MINUTE_IN_MILLIS. Pass 
       one of 0, MINUTE_IN_MILLIS, HOUR_IN_MILLIS, DAY_IN_MILLIS, 
       WEEK_IN_MILLIS 

*android.text.format.DateUtils.getRelativeTimeSpanString(long,long,long,int)*

public static |java.lang.CharSequence| getRelativeTimeSpanString(
  long time,
  long now,
  long minResolution,
  int flags)

Returns a string describing 'time' as a time relative to 'now'. 

Time spans in the past are formatted like "42 minutes ago". Time spans in the 
future are formatted like "in 42 minutes". 

Can use (|android.text.format.DateUtils|) flag to use abbreviated relative 
times, like "42 mins ago". 


    time - the time to describe, in milliseconds 
    now - the current time in milliseconds 
    minResolution - the minimum timespan to report. For example, a time 3 seconds in the past will 
       be reported as "0 minutes ago" if this is set to MINUTE_IN_MILLIS. Pass 
       one of 0, MINUTE_IN_MILLIS, HOUR_IN_MILLIS, DAY_IN_MILLIS, 
       WEEK_IN_MILLIS 
    flags - a bit mask of formatting options, such as {@link #FORMAT_NUMERIC_DATE} or 
       {@link #FORMAT_ABBREV_RELATIVE} 

*android.text.format.DateUtils.isToday(long)*

public static boolean isToday(long when)





    Returns: true if the supplied when is today else false 


