*android.webkit.WebViewProvider.ViewDelegate* *WebViewProvider.ViewDelegate* Pro

public static interface interface WebViewProvider.ViewDelegate


|android.webkit.WebViewProvider.ViewDelegate_Description|
|android.webkit.WebViewProvider.ViewDelegate_Fields|
|android.webkit.WebViewProvider.ViewDelegate_Constructors|
|android.webkit.WebViewProvider.ViewDelegate_Methods|

================================================================================

*android.webkit.WebViewProvider.ViewDelegate_Methods*
|android.webkit.WebViewProvider.ViewDelegate.dispatchKeyEvent(KeyEvent)|
|android.webkit.WebViewProvider.ViewDelegate.getAccessibilityNodeProvider()|
|android.webkit.WebViewProvider.ViewDelegate.onAttachedToWindow()|
|android.webkit.WebViewProvider.ViewDelegate.onConfigurationChanged(Configuration)|
|android.webkit.WebViewProvider.ViewDelegate.onCreateInputConnection(EditorInfo)|
|android.webkit.WebViewProvider.ViewDelegate.onDetachedFromWindow()|
|android.webkit.WebViewProvider.ViewDelegate.onDraw(Canvas)|
|android.webkit.WebViewProvider.ViewDelegate.onDrawVerticalScrollBar(Canvas,Drawable,int,int,int,int)|
|android.webkit.WebViewProvider.ViewDelegate.onFocusChanged(boolean,int,Rect)|
|android.webkit.WebViewProvider.ViewDelegate.onGenericMotionEvent(MotionEvent)|
|android.webkit.WebViewProvider.ViewDelegate.onHoverEvent(MotionEvent)|
|android.webkit.WebViewProvider.ViewDelegate.onInitializeAccessibilityEvent(AccessibilityEvent)|
|android.webkit.WebViewProvider.ViewDelegate.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)|
|android.webkit.WebViewProvider.ViewDelegate.onKeyDown(int,KeyEvent)|
|android.webkit.WebViewProvider.ViewDelegate.onKeyMultiple(int,int,KeyEvent)|
|android.webkit.WebViewProvider.ViewDelegate.onKeyUp(int,KeyEvent)|
|android.webkit.WebViewProvider.ViewDelegate.onMeasure(int,int)|
|android.webkit.WebViewProvider.ViewDelegate.onOverScrolled(int,int,boolean,boolean)|
|android.webkit.WebViewProvider.ViewDelegate.onScrollChanged(int,int,int,int)|
|android.webkit.WebViewProvider.ViewDelegate.onSizeChanged(int,int,int,int)|
|android.webkit.WebViewProvider.ViewDelegate.onTouchEvent(MotionEvent)|
|android.webkit.WebViewProvider.ViewDelegate.onTrackballEvent(MotionEvent)|
|android.webkit.WebViewProvider.ViewDelegate.onVisibilityChanged(View,int)|
|android.webkit.WebViewProvider.ViewDelegate.onWindowFocusChanged(boolean)|
|android.webkit.WebViewProvider.ViewDelegate.onWindowVisibilityChanged(int)|
|android.webkit.WebViewProvider.ViewDelegate.performAccessibilityAction(int,Bundle)|
|android.webkit.WebViewProvider.ViewDelegate.performLongClick()|
|android.webkit.WebViewProvider.ViewDelegate.preDispatchDraw(Canvas)|
|android.webkit.WebViewProvider.ViewDelegate.requestChildRectangleOnScreen(View,Rect,boolean)|
|android.webkit.WebViewProvider.ViewDelegate.requestFocus(int,Rect)|
|android.webkit.WebViewProvider.ViewDelegate.setBackgroundColor(int)|
|android.webkit.WebViewProvider.ViewDelegate.setFrame(int,int,int,int)|
|android.webkit.WebViewProvider.ViewDelegate.setLayerType(int,Paint)|
|android.webkit.WebViewProvider.ViewDelegate.setLayoutParams(ViewGroup.LayoutParams)|
|android.webkit.WebViewProvider.ViewDelegate.setOverScrollMode(int)|
|android.webkit.WebViewProvider.ViewDelegate.setScrollBarStyle(int)|
|android.webkit.WebViewProvider.ViewDelegate.shouldDelayChildPressedState()|

*android.webkit.WebViewProvider.ViewDelegate_Description*

Provides mechanism for the name-sake methods declared in View and ViewGroup to 
be delegated into the WebViewProvider instance. NOTE For many of these methods, 
the WebView will provide a super.Foo() call before or after making the call 
into the provider instance. This is done for convenience in the common case of 
maintaining backward compatibility. For remaining super class calls (e.g. where 
the provider may need to only conditionally make the call based on some 
internal state) see the (|android.webkit.WebView.PrivateAccess|) callback 
class. 



*android.webkit.WebViewProvider.ViewDelegate.dispatchKeyEvent(KeyEvent)*

public boolean dispatchKeyEvent(android.view.KeyEvent event)





*android.webkit.WebViewProvider.ViewDelegate.getAccessibilityNodeProvider()*

public |android.view.accessibility.AccessibilityNodeProvider| getAccessibilityNodeProvider()





*android.webkit.WebViewProvider.ViewDelegate.onAttachedToWindow()*

public void onAttachedToWindow()





*android.webkit.WebViewProvider.ViewDelegate.onConfigurationChanged(Configuration)*

public void onConfigurationChanged(android.content.res.Configuration newConfig)





*android.webkit.WebViewProvider.ViewDelegate.onCreateInputConnection(EditorInfo)*

public |android.view.inputmethod.InputConnection| onCreateInputConnection(android.view.inputmethod.EditorInfo outAttrs)





*android.webkit.WebViewProvider.ViewDelegate.onDetachedFromWindow()*

public void onDetachedFromWindow()





*android.webkit.WebViewProvider.ViewDelegate.onDraw(Canvas)*

public void onDraw(Canvas canvas)





*android.webkit.WebViewProvider.ViewDelegate.onDrawVerticalScrollBar(Canvas,Drawable,int,int,int,int)*

public void onDrawVerticalScrollBar(
  Canvas canvas,
  Drawable scrollBar,
  int l,
  int t,
  int r,
  int b)





*android.webkit.WebViewProvider.ViewDelegate.onFocusChanged(boolean,int,Rect)*

public void onFocusChanged(
  boolean focused,
  int direction,
  Rect previouslyFocusedRect)





*android.webkit.WebViewProvider.ViewDelegate.onGenericMotionEvent(MotionEvent)*

public boolean onGenericMotionEvent(android.view.MotionEvent event)





*android.webkit.WebViewProvider.ViewDelegate.onHoverEvent(MotionEvent)*

public boolean onHoverEvent(android.view.MotionEvent event)





*android.webkit.WebViewProvider.ViewDelegate.onInitializeAccessibilityEvent(AccessibilityEvent)*

public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent event)





*android.webkit.WebViewProvider.ViewDelegate.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)*

public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo info)





*android.webkit.WebViewProvider.ViewDelegate.onKeyDown(int,KeyEvent)*

public boolean onKeyDown(
  int keyCode,
  android.view.KeyEvent event)





*android.webkit.WebViewProvider.ViewDelegate.onKeyMultiple(int,int,KeyEvent)*

public boolean onKeyMultiple(
  int keyCode,
  int repeatCount,
  android.view.KeyEvent event)





*android.webkit.WebViewProvider.ViewDelegate.onKeyUp(int,KeyEvent)*

public boolean onKeyUp(
  int keyCode,
  android.view.KeyEvent event)





*android.webkit.WebViewProvider.ViewDelegate.onMeasure(int,int)*

public void onMeasure(
  int widthMeasureSpec,
  int heightMeasureSpec)





*android.webkit.WebViewProvider.ViewDelegate.onOverScrolled(int,int,boolean,boolean)*

public void onOverScrolled(
  int scrollX,
  int scrollY,
  boolean clampedX,
  boolean clampedY)





*android.webkit.WebViewProvider.ViewDelegate.onScrollChanged(int,int,int,int)*

public void onScrollChanged(
  int l,
  int t,
  int oldl,
  int oldt)





*android.webkit.WebViewProvider.ViewDelegate.onSizeChanged(int,int,int,int)*

public void onSizeChanged(
  int w,
  int h,
  int ow,
  int oh)





*android.webkit.WebViewProvider.ViewDelegate.onTouchEvent(MotionEvent)*

public boolean onTouchEvent(android.view.MotionEvent ev)





*android.webkit.WebViewProvider.ViewDelegate.onTrackballEvent(MotionEvent)*

public boolean onTrackballEvent(android.view.MotionEvent ev)





*android.webkit.WebViewProvider.ViewDelegate.onVisibilityChanged(View,int)*

public void onVisibilityChanged(
  android.view.View changedView,
  int visibility)





*android.webkit.WebViewProvider.ViewDelegate.onWindowFocusChanged(boolean)*

public void onWindowFocusChanged(boolean hasWindowFocus)





*android.webkit.WebViewProvider.ViewDelegate.onWindowVisibilityChanged(int)*

public void onWindowVisibilityChanged(int visibility)





*android.webkit.WebViewProvider.ViewDelegate.performAccessibilityAction(int,Bundle)*

public boolean performAccessibilityAction(
  int action,
  android.os.Bundle arguments)





*android.webkit.WebViewProvider.ViewDelegate.performLongClick()*

public boolean performLongClick()





*android.webkit.WebViewProvider.ViewDelegate.preDispatchDraw(Canvas)*

public void preDispatchDraw(Canvas canvas)





*android.webkit.WebViewProvider.ViewDelegate.requestChildRectangleOnScreen(View,Rect,boolean)*

public boolean requestChildRectangleOnScreen(
  android.view.View child,
  Rect rect,
  boolean immediate)





*android.webkit.WebViewProvider.ViewDelegate.requestFocus(int,Rect)*

public boolean requestFocus(
  int direction,
  Rect previouslyFocusedRect)





*android.webkit.WebViewProvider.ViewDelegate.setBackgroundColor(int)*

public void setBackgroundColor(int color)





*android.webkit.WebViewProvider.ViewDelegate.setFrame(int,int,int,int)*

public boolean setFrame(
  int left,
  int top,
  int right,
  int bottom)





*android.webkit.WebViewProvider.ViewDelegate.setLayerType(int,Paint)*

public void setLayerType(
  int layerType,
  Paint paint)





*android.webkit.WebViewProvider.ViewDelegate.setLayoutParams(ViewGroup.LayoutParams)*

public void setLayoutParams(android.view.ViewGroup.LayoutParams layoutParams)





*android.webkit.WebViewProvider.ViewDelegate.setOverScrollMode(int)*

public void setOverScrollMode(int mode)





*android.webkit.WebViewProvider.ViewDelegate.setScrollBarStyle(int)*

public void setScrollBarStyle(int style)





*android.webkit.WebViewProvider.ViewDelegate.shouldDelayChildPressedState()*

public boolean shouldDelayChildPressedState()






