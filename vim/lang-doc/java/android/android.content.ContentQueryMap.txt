*android.content.ContentQueryMap* *ContentQueryMap* Caches the contents of a cur

public class ContentQueryMap
  extends    |java.util.Observable|

|android.content.ContentQueryMap_Description|
|android.content.ContentQueryMap_Fields|
|android.content.ContentQueryMap_Constructors|
|android.content.ContentQueryMap_Methods|

================================================================================

*android.content.ContentQueryMap_Constructors*
|android.content.ContentQueryMap(Cursor,String,boolean,Handler)|Creates a Conte

*android.content.ContentQueryMap_Methods*
|android.content.ContentQueryMap.close()|
|android.content.ContentQueryMap.finalize()|
|android.content.ContentQueryMap.getRows()|
|android.content.ContentQueryMap.getValues(String)|Access the ContentValues for
|android.content.ContentQueryMap.requery()|Requeries the cursor and reads the c
|android.content.ContentQueryMap.setKeepUpdated(boolean)|Change whether or not 

*android.content.ContentQueryMap_Description*

Caches the contents of a cursor into a Map of String->ContentValues and 
optionally keeps the cache fresh by registering for updates on the content 
backing the cursor. The column of the database that is to be used as the key of 
the map is user-configurable, and the ContentValues contains all columns other 
than the one that is designated the key. 

The cursor data is accessed by row key and column name via getValue(). 



*android.content.ContentQueryMap(Cursor,String,boolean,Handler)*

public ContentQueryMap(
  android.database.Cursor cursor,
  java.lang.String columnNameOfKey,
  boolean keepUpdated,
  android.os.Handler handlerForUpdateNotifications)

Creates a ContentQueryMap that caches the content backing the cursor 

    cursor - the cursor whose contents should be cached 
    columnNameOfKey - the column that is to be used as the key of the values map 
    keepUpdated - true if the cursor's ContentProvider should be monitored for changes and the 
       map updated when changes do occur 
    handlerForUpdateNotifications - the Handler that should be used to receive notifications of changes (if 
       requested). Normally you pass null here, but if you know that the thread 
       that is creating this isn't a thread that can receive messages then you 
       can create your own handler and use that here. 

*android.content.ContentQueryMap.close()*

public synchronized void close()





*android.content.ContentQueryMap.finalize()*

protected void finalize()
  throws |java.lang.Throwable|
         




*android.content.ContentQueryMap.getRows()*

public synchronized |java.util.Map|<String,ContentValues> getRows()





*android.content.ContentQueryMap.getValues(String)*

public synchronized |android.content.ContentValues| getValues(java.lang.String rowName)

Access the ContentValues for the row specified by rowName 


    rowName - which row to read 

    Returns: the ContentValues for the row, or null if the row wasn't present in the cursor 

*android.content.ContentQueryMap.requery()*

public void requery()

Requeries the cursor and reads the contents into the cache 



*android.content.ContentQueryMap.setKeepUpdated(boolean)*

public void setKeepUpdated(boolean keepUpdated)

Change whether or not the ContentQueryMap will register with the cursor's 
ContentProvider for change notifications. If you use a ContentQueryMap in an 
activity you should call this with false in onPause(), which means you need to 
call it with true in onResume() if want it to be kept updated. 


    keepUpdated - if true the ContentQueryMap should be registered with the cursor's 
       ContentProvider, false otherwise 


