*android.util.Spline* *Spline* Performs spline interpolation given a set of cont

public final class Spline
  extends    |java.lang.Object|

|android.util.Spline_Description|
|android.util.Spline_Fields|
|android.util.Spline_Constructors|
|android.util.Spline_Methods|

================================================================================

*android.util.Spline_Methods*
|android.util.Spline.createMonotoneCubicSpline(float[],float[])|Creates a monot
|android.util.Spline.interpolate(float)|Interpolates the value of Y = f(X) for 
|android.util.Spline.toString()|

*android.util.Spline_Description*

Performs spline interpolation given a set of control points. 



*android.util.Spline.createMonotoneCubicSpline(float[],float[])*

public static |android.util.Spline| createMonotoneCubicSpline(
  float[] x,
  float[] y)

Creates a monotone cubic spline from a given set of control points. 

The spline is guaranteed to pass through each control point exactly. Moreover, 
assuming the control points are monotonic (Y is non-decreasing or 
non-increasing) then the interpolated values will also be monotonic. 

This function uses the Fritsch-Carlson method for computing the spline 
parameters. http://en.wikipedia.org/wiki/Monotone_cubic_interpolation 


    x - The X component of the control points, strictly increasing. 
    y - The Y component of the control points, monotonic. 

    Returns: 

*android.util.Spline.interpolate(float)*

public float interpolate(float x)

Interpolates the value of Y = f(X) for given X. Clamps X to the domain of the 
spline. 


    x - The X value. 

    Returns: The interpolated Y = f(X) value. 

*android.util.Spline.toString()*

public |java.lang.String| toString()






