*android.view.WindowId.FocusObserver* *WindowId.FocusObserver* Subclass for obse

public abstract static class WindowId.FocusObserver
  extends    |java.lang.Object|

|android.view.WindowId.FocusObserver_Description|
|android.view.WindowId.FocusObserver_Fields|
|android.view.WindowId.FocusObserver_Constructors|
|android.view.WindowId.FocusObserver_Methods|

================================================================================

*android.view.WindowId.FocusObserver_Constructors*
|android.view.WindowId.FocusObserver()|Construct a new observer.

*android.view.WindowId.FocusObserver_Methods*
|android.view.WindowId.FocusObserver.onFocusGained(WindowId)|Called when one of
|android.view.WindowId.FocusObserver.onFocusLost(WindowId)|Called when one of t

*android.view.WindowId.FocusObserver_Description*

Subclass for observing changes to the focus state of an 
(|android.view.WindowId|) . You should use the same instance of this class for 
observing multiple (|android.view.WindowId|) objects, since this class is 
fairly heavy-weight -- the base class includes all of the mechanisms for 
connecting to and receiving updates from the window. 



*android.view.WindowId.FocusObserver()*

public WindowId.FocusObserver()

Construct a new observer. This observer will be configured so that all of its 
callbacks are dispatched on the current calling thread. 


*android.view.WindowId.FocusObserver.onFocusGained(WindowId)*

public abstract void onFocusGained(android.view.WindowId token)

Called when one of the monitored windows gains input focus. 



*android.view.WindowId.FocusObserver.onFocusLost(WindowId)*

public abstract void onFocusLost(android.view.WindowId token)

Called when one of the monitored windows loses input focus. 




