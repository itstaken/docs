*android.view.ViewConfiguration* *ViewConfiguration* Contains methods to standar

public class ViewConfiguration
  extends    |java.lang.Object|

|android.view.ViewConfiguration_Description|
|android.view.ViewConfiguration_Fields|
|android.view.ViewConfiguration_Constructors|
|android.view.ViewConfiguration_Methods|

================================================================================

*android.view.ViewConfiguration_Constructors*
|android.view.ViewConfiguration()|

*android.view.ViewConfiguration_Methods*
|android.view.ViewConfiguration.get(Context)|Returns a configuration for the sp
|android.view.ViewConfiguration.getDoubleTapMinTime()|
|android.view.ViewConfiguration.getDoubleTapSlop()|
|android.view.ViewConfiguration.getDoubleTapTimeout()|
|android.view.ViewConfiguration.getEdgeSlop()|
|android.view.ViewConfiguration.getFadingEdgeLength()|
|android.view.ViewConfiguration.getGlobalActionKeyTimeout()|The amount of time 
|android.view.ViewConfiguration.getHoverTapSlop()|
|android.view.ViewConfiguration.getHoverTapTimeout()|
|android.view.ViewConfiguration.getJumpTapTimeout()|
|android.view.ViewConfiguration.getKeyRepeatDelay()|
|android.view.ViewConfiguration.getKeyRepeatTimeout()|
|android.view.ViewConfiguration.getLongPressTimeout()|
|android.view.ViewConfiguration.getMaximumDrawingCacheSize()|The maximum drawin
|android.view.ViewConfiguration.getMaximumFlingVelocity()|
|android.view.ViewConfiguration.getMinimumFlingVelocity()|
|android.view.ViewConfiguration.getPressedStateDuration()|
|android.view.ViewConfiguration.getScaledDoubleTapSlop()|
|android.view.ViewConfiguration.getScaledDoubleTapTouchSlop()|
|android.view.ViewConfiguration.getScaledEdgeSlop()|
|android.view.ViewConfiguration.getScaledFadingEdgeLength()|
|android.view.ViewConfiguration.getScaledMaximumDrawingCacheSize()|The maximum 
|android.view.ViewConfiguration.getScaledMaximumFlingVelocity()|
|android.view.ViewConfiguration.getScaledMinimumFlingVelocity()|
|android.view.ViewConfiguration.getScaledOverflingDistance()|
|android.view.ViewConfiguration.getScaledOverscrollDistance()|
|android.view.ViewConfiguration.getScaledPagingTouchSlop()|
|android.view.ViewConfiguration.getScaledScrollBarSize()|
|android.view.ViewConfiguration.getScaledTouchSlop()|
|android.view.ViewConfiguration.getScaledWindowTouchSlop()|
|android.view.ViewConfiguration.getScrollBarFadeDuration()|
|android.view.ViewConfiguration.getScrollBarSize()|
|android.view.ViewConfiguration.getScrollDefaultDelay()|
|android.view.ViewConfiguration.getScrollFriction()|The amount of friction appl
|android.view.ViewConfiguration.getSendRecurringAccessibilityEventsInterval()|I
|android.view.ViewConfiguration.getTapTimeout()|
|android.view.ViewConfiguration.getTouchSlop()|
|android.view.ViewConfiguration.getWindowTouchSlop()|
|android.view.ViewConfiguration.getZoomControlsTimeout()|The amount of time tha
|android.view.ViewConfiguration.hasPermanentMenuKey()|Report if the device has 
|android.view.ViewConfiguration.isFadingMarqueeEnabled()|

*android.view.ViewConfiguration_Description*

Contains methods to standard constants used in the UI for timeouts, sizes, and 
distances. 



*android.view.ViewConfiguration()*

public ViewConfiguration()




*android.view.ViewConfiguration.get(Context)*

public static |android.view.ViewConfiguration| get(android.content.Context context)

Returns a configuration for the specified context. The configuration depends on 
various parameters of the context, like the dimension of the display or the 
density of the display. 


    context - The application context used to initialize the view configuration. 

*android.view.ViewConfiguration.getDoubleTapMinTime()*

public static int getDoubleTapMinTime()





    Returns: the minimum duration in milliseconds between the first tap's up event and the 
             second tap's down event for an interaction to be considered a 
             double-tap. 

*android.view.ViewConfiguration.getDoubleTapSlop()*

public static int getDoubleTapSlop()



    Deprecated: Use {@link #getScaledDoubleTapSlop()} instead.


    Returns: Distance in dips between the first touch and second touch to still be 
             considered a double tap 

*android.view.ViewConfiguration.getDoubleTapTimeout()*

public static int getDoubleTapTimeout()





    Returns: the duration in milliseconds between the first tap's up event and the second 
             tap's down event for an interaction to be considered a double-tap. 

*android.view.ViewConfiguration.getEdgeSlop()*

public static int getEdgeSlop()



    Deprecated: Use {@link #getScaledEdgeSlop()} instead.


    Returns: Inset in dips to look for touchable content when the user touches the edge of 
             the screen 

*android.view.ViewConfiguration.getFadingEdgeLength()*

public static int getFadingEdgeLength()



    Deprecated: Use {@link #getScaledFadingEdgeLength()} instead.


    Returns: the length of the fading edges in dips 

*android.view.ViewConfiguration.getGlobalActionKeyTimeout()*

public static long getGlobalActionKeyTimeout()

The amount of time a user needs to press the relevant key to bring up the 
global actions dialog. 



    Returns: how long a user needs to press the relevant key to bring up the global actions 
             dialog. 

*android.view.ViewConfiguration.getHoverTapSlop()*

public static int getHoverTapSlop()





    Returns: the maximum distance in pixels that a touch pad touch can move before being 
             released for it to be considered a tap (click) as opposed to a 
             hover movement gesture. 

*android.view.ViewConfiguration.getHoverTapTimeout()*

public static int getHoverTapTimeout()





    Returns: the maximum duration in milliseconds between a touch pad touch and release for 
             a given touch to be considered a tap (click) as opposed to a hover 
             movement gesture. 

*android.view.ViewConfiguration.getJumpTapTimeout()*

public static int getJumpTapTimeout()





    Returns: the duration in milliseconds we will wait to see if a touch event is a jump 
             tap. If the user does not move within this interval, it is 
             considered to be a tap. 

*android.view.ViewConfiguration.getKeyRepeatDelay()*

public static int getKeyRepeatDelay()





    Returns: the time between successive key repeats in milliseconds. 

*android.view.ViewConfiguration.getKeyRepeatTimeout()*

public static int getKeyRepeatTimeout()





    Returns: the time before the first key repeat in milliseconds. 

*android.view.ViewConfiguration.getLongPressTimeout()*

public static int getLongPressTimeout()





    Returns: the duration in milliseconds before a press turns into a long press 

*android.view.ViewConfiguration.getMaximumDrawingCacheSize()*

public static int getMaximumDrawingCacheSize()

The maximum drawing cache size expressed in bytes. 

    Deprecated: Use {@link #getScaledMaximumDrawingCacheSize()} instead.


    Returns: the maximum size of View's drawing cache expressed in bytes 

*android.view.ViewConfiguration.getMaximumFlingVelocity()*

public static int getMaximumFlingVelocity()



    Deprecated: Use {@link #getScaledMaximumFlingVelocity()} instead.


    Returns: Maximum velocity to initiate a fling, as measured in dips per second. 

*android.view.ViewConfiguration.getMinimumFlingVelocity()*

public static int getMinimumFlingVelocity()



    Deprecated: Use {@link #getScaledMinimumFlingVelocity()} instead.


    Returns: Minimum velocity to initiate a fling, as measured in dips per second. 

*android.view.ViewConfiguration.getPressedStateDuration()*

public static int getPressedStateDuration()





    Returns: the duration in milliseconds of the pressed state in child components. 

*android.view.ViewConfiguration.getScaledDoubleTapSlop()*

public int getScaledDoubleTapSlop()





    Returns: Distance in pixels between the first touch and second touch to still be 
             considered a double tap 

*android.view.ViewConfiguration.getScaledDoubleTapTouchSlop()*

public int getScaledDoubleTapTouchSlop()





    Returns: Distance in pixels the first touch can wander before we do not consider this a 
             potential double tap event 

*android.view.ViewConfiguration.getScaledEdgeSlop()*

public int getScaledEdgeSlop()





    Returns: Inset in pixels to look for touchable content when the user touches the edge of 
             the screen 

*android.view.ViewConfiguration.getScaledFadingEdgeLength()*

public int getScaledFadingEdgeLength()





    Returns: the length of the fading edges in pixels 

*android.view.ViewConfiguration.getScaledMaximumDrawingCacheSize()*

public int getScaledMaximumDrawingCacheSize()

The maximum drawing cache size expressed in bytes. 



    Returns: the maximum size of View's drawing cache expressed in bytes 

*android.view.ViewConfiguration.getScaledMaximumFlingVelocity()*

public int getScaledMaximumFlingVelocity()





    Returns: Maximum velocity to initiate a fling, as measured in pixels per second. 

*android.view.ViewConfiguration.getScaledMinimumFlingVelocity()*

public int getScaledMinimumFlingVelocity()





    Returns: Minimum velocity to initiate a fling, as measured in pixels per second. 

*android.view.ViewConfiguration.getScaledOverflingDistance()*

public int getScaledOverflingDistance()





    Returns: The maximum distance a View should overfling by when showing edge effects (in 
             pixels). 

*android.view.ViewConfiguration.getScaledOverscrollDistance()*

public int getScaledOverscrollDistance()





    Returns: The maximum distance a View should overscroll by when showing edge effects (in 
             pixels). 

*android.view.ViewConfiguration.getScaledPagingTouchSlop()*

public int getScaledPagingTouchSlop()





    Returns: Distance in pixels a touch can wander before we think the user is scrolling a 
             full page 

*android.view.ViewConfiguration.getScaledScrollBarSize()*

public int getScaledScrollBarSize()





    Returns: The width of the horizontal scrollbar and the height of the vertical scrollbar 
             in pixels 

*android.view.ViewConfiguration.getScaledTouchSlop()*

public int getScaledTouchSlop()





    Returns: Distance in pixels a touch can wander before we think the user is scrolling 

*android.view.ViewConfiguration.getScaledWindowTouchSlop()*

public int getScaledWindowTouchSlop()





    Returns: Distance in pixels a touch must be outside the bounds of a window for it to be 
             counted as outside the window for purposes of dismissing that 
             window. 

*android.view.ViewConfiguration.getScrollBarFadeDuration()*

public static int getScrollBarFadeDuration()





    Returns: Duration of the fade when scrollbars fade away in milliseconds 

*android.view.ViewConfiguration.getScrollBarSize()*

public static int getScrollBarSize()



    Deprecated: Use {@link #getScaledScrollBarSize()} instead.


    Returns: The width of the horizontal scrollbar and the height of the vertical scrollbar 
             in dips 

*android.view.ViewConfiguration.getScrollDefaultDelay()*

public static int getScrollDefaultDelay()





    Returns: Default delay before the scrollbars fade in milliseconds 

*android.view.ViewConfiguration.getScrollFriction()*

public static float getScrollFriction()

The amount of friction applied to scrolls and flings. 



    Returns: A scalar dimensionless value representing the coefficient of friction. 

*android.view.ViewConfiguration.getSendRecurringAccessibilityEventsInterval()*

public static long getSendRecurringAccessibilityEventsInterval()

Interval for dispatching a recurring accessibility event in milliseconds. This 
interval guarantees that a recurring event will be send at most once during the 
(|android.view.ViewConfiguration|) time frame. 



    Returns: The delay in milliseconds. 

*android.view.ViewConfiguration.getTapTimeout()*

public static int getTapTimeout()





    Returns: the duration in milliseconds we will wait to see if a touch event is a tap or a 
             scroll. If the user does not move within this interval, it is 
             considered to be a tap. 

*android.view.ViewConfiguration.getTouchSlop()*

public static int getTouchSlop()



    Deprecated: Use {@link #getScaledTouchSlop()} instead.


    Returns: Distance in dips a touch can wander before we think the user is scrolling 

*android.view.ViewConfiguration.getWindowTouchSlop()*

public static int getWindowTouchSlop()



    Deprecated: Use {@link #getScaledWindowTouchSlop()} instead.


    Returns: Distance in dips a touch must be outside the bounds of a window for it to be 
             counted as outside the window for purposes of dismissing that 
             window. 

*android.view.ViewConfiguration.getZoomControlsTimeout()*

public static long getZoomControlsTimeout()

The amount of time that the zoom controls should be displayed on the screen 
expressed in milliseconds. 



    Returns: the time the zoom controls should be visible expressed in milliseconds. 

*android.view.ViewConfiguration.hasPermanentMenuKey()*

public boolean hasPermanentMenuKey()

Report if the device has a permanent menu key available to the user. 

As of Android 3.0, devices may not have a permanent menu key available. Apps 
should use the action bar to present menu options to users. However, there are 
some apps where the action bar is inappropriate or undesirable. This method may 
be used to detect if a menu key is present. If not, applications should provide 
another on-screen affordance to access functionality. 



    Returns: true if a permanent menu key is present, false otherwise. 

*android.view.ViewConfiguration.isFadingMarqueeEnabled()*

public boolean isFadingMarqueeEnabled()





    Returns: Whether or not marquee should use fading edges. 


