*android.app.ActivityManager.RunningTaskInfo* *ActivityManager.RunningTaskInfo* 

public static class ActivityManager.RunningTaskInfo
  extends    |java.lang.Object|
  implements |android.os.Parcelable|

|android.app.ActivityManager.RunningTaskInfo_Description|
|android.app.ActivityManager.RunningTaskInfo_Fields|
|android.app.ActivityManager.RunningTaskInfo_Constructors|
|android.app.ActivityManager.RunningTaskInfo_Methods|

================================================================================

*android.app.ActivityManager.RunningTaskInfo_Fields*
|android.content.ComponentName_android.app.ActivityManager.RunningTaskInfo.baseActivity|
|android.os.Parcelable.Creator<android.app.ActivityManager.RunningTaskInfo>_android.app.ActivityManager.RunningTaskInfo.CREATOR|
|java.lang.CharSequence_android.app.ActivityManager.RunningTaskInfo.description|
|int_android.app.ActivityManager.RunningTaskInfo.id|
|long_android.app.ActivityManager.RunningTaskInfo.lastActiveTime|
|int_android.app.ActivityManager.RunningTaskInfo.numActivities|
|int_android.app.ActivityManager.RunningTaskInfo.numRunning|
|Bitmap_android.app.ActivityManager.RunningTaskInfo.thumbnail|
|android.content.ComponentName_android.app.ActivityManager.RunningTaskInfo.topActivity|

*android.app.ActivityManager.RunningTaskInfo_Constructors*
|android.app.ActivityManager.RunningTaskInfo()|

*android.app.ActivityManager.RunningTaskInfo_Methods*
|android.app.ActivityManager.RunningTaskInfo.describeContents()|
|android.app.ActivityManager.RunningTaskInfo.readFromParcel(Parcel)|
|android.app.ActivityManager.RunningTaskInfo.writeToParcel(Parcel,int)|

*android.app.ActivityManager.RunningTaskInfo_Description*

Information you can retrieve about a particular task that is currently 
"running" in the system. Note that a running task does not mean the given task 
actually has a process it is actively running in; it simply means that the user 
has gone to it and never closed it, but currently the system may have killed 
its process and is only holding on to its last state in order to restart it 
when the user returns. 



*android.content.ComponentName_android.app.ActivityManager.RunningTaskInfo.baseActivity*

The component launched as the first activity in the task. This can be 
considered the "application" of this task. 


*android.os.Parcelable.Creator<android.app.ActivityManager.RunningTaskInfo>_android.app.ActivityManager.RunningTaskInfo.CREATOR*




*java.lang.CharSequence_android.app.ActivityManager.RunningTaskInfo.description*

Description of the task's current state. 


*int_android.app.ActivityManager.RunningTaskInfo.id*

A unique identifier for this task. 


*long_android.app.ActivityManager.RunningTaskInfo.lastActiveTime*

Last time task was run. For sorting. 


*int_android.app.ActivityManager.RunningTaskInfo.numActivities*

Number of activities in this task. 


*int_android.app.ActivityManager.RunningTaskInfo.numRunning*

Number of activities that are currently running (not stopped and persisted) in 
this task. 


*Bitmap_android.app.ActivityManager.RunningTaskInfo.thumbnail*

Thumbnail representation of the task's current state. Currently always null. 


*android.content.ComponentName_android.app.ActivityManager.RunningTaskInfo.topActivity*

The activity component at the top of the history stack of the task. This is 
what the user is currently doing. 



*android.app.ActivityManager.RunningTaskInfo()*

public ActivityManager.RunningTaskInfo()




*android.app.ActivityManager.RunningTaskInfo.describeContents()*

public int describeContents()





*android.app.ActivityManager.RunningTaskInfo.readFromParcel(Parcel)*

public void readFromParcel(android.os.Parcel source)





*android.app.ActivityManager.RunningTaskInfo.writeToParcel(Parcel,int)*

public void writeToParcel(
  android.os.Parcel dest,
  int flags)






