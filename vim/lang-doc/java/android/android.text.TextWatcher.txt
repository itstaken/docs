*android.text.TextWatcher* *TextWatcher* When an object of a type is attached to

public interface interface TextWatcher

  implements |android.text.NoCopySpan|

|android.text.TextWatcher_Description|
|android.text.TextWatcher_Fields|
|android.text.TextWatcher_Constructors|
|android.text.TextWatcher_Methods|

================================================================================

*android.text.TextWatcher_Methods*
|android.text.TextWatcher.afterTextChanged(Editable)|This method is called to n
|android.text.TextWatcher.beforeTextChanged(CharSequence,int,int,int)|This meth
|android.text.TextWatcher.onTextChanged(CharSequence,int,int,int)|This method i

*android.text.TextWatcher_Description*

When an object of a type is attached to an Editable, its methods will be called 
when the text is changed. 



*android.text.TextWatcher.afterTextChanged(Editable)*

public void afterTextChanged(android.text.Editable s)

This method is called to notify you that, somewhere within s, the text has been 
changed. It is legitimate to make further changes to s from this callback, but 
be careful not to get yourself into an infinite loop, because any changes you 
make will cause this method to be called again recursively. (You are not told 
where the change took place because other afterTextChanged() methods may 
already have made other changes and invalidated the offsets. But if you need to 
know here, you can use (|android.text.Spannable|) in 
(|android.text.TextWatcher|) to mark your place and then look up from here 
where the span ended up. 



*android.text.TextWatcher.beforeTextChanged(CharSequence,int,int,int)*

public void beforeTextChanged(
  java.lang.CharSequence s,
  int start,
  int count,
  int after)

This method is called to notify you that, within s, the count characters 
beginning at start are about to be replaced by new text with length after. It 
is an error to attempt to make changes to s from this callback. 



*android.text.TextWatcher.onTextChanged(CharSequence,int,int,int)*

public void onTextChanged(
  java.lang.CharSequence s,
  int start,
  int before,
  int count)

This method is called to notify you that, within s, the count characters 
beginning at start have just replaced old text that had length before. It is an 
error to attempt to make changes to s from this callback. 




