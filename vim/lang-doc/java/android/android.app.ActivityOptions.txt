*android.app.ActivityOptions* *ActivityOptions* Helper class for building an opt

public class ActivityOptions
  extends    |java.lang.Object|

|android.app.ActivityOptions_Description|
|android.app.ActivityOptions_Fields|
|android.app.ActivityOptions_Constructors|
|android.app.ActivityOptions_Methods|

================================================================================

*android.app.ActivityOptions_Fields*
|int_android.app.ActivityOptions.ANIM_CUSTOM|
|int_android.app.ActivityOptions.ANIM_NONE|
|int_android.app.ActivityOptions.ANIM_SCALE_UP|
|int_android.app.ActivityOptions.ANIM_THUMBNAIL_SCALE_DOWN|
|int_android.app.ActivityOptions.ANIM_THUMBNAIL_SCALE_UP|
|java.lang.String_android.app.ActivityOptions.KEY_ANIM_ENTER_RES_ID|
|java.lang.String_android.app.ActivityOptions.KEY_ANIM_EXIT_RES_ID|
|java.lang.String_android.app.ActivityOptions.KEY_ANIM_START_HEIGHT|
|java.lang.String_android.app.ActivityOptions.KEY_ANIM_START_LISTENER|
|java.lang.String_android.app.ActivityOptions.KEY_ANIM_START_WIDTH|
|java.lang.String_android.app.ActivityOptions.KEY_ANIM_START_X|
|java.lang.String_android.app.ActivityOptions.KEY_ANIM_START_Y|
|java.lang.String_android.app.ActivityOptions.KEY_ANIM_THUMBNAIL|
|java.lang.String_android.app.ActivityOptions.KEY_ANIM_TYPE|
|java.lang.String_android.app.ActivityOptions.KEY_PACKAGE_NAME|

*android.app.ActivityOptions_Constructors*
|android.app.ActivityOptions(Bundle)|

*android.app.ActivityOptions_Methods*
|android.app.ActivityOptions.abort()|
|android.app.ActivityOptions.abort(Bundle)|
|android.app.ActivityOptions.getAnimationType()|
|android.app.ActivityOptions.getCustomEnterResId()|
|android.app.ActivityOptions.getCustomExitResId()|
|android.app.ActivityOptions.getOnAnimationStartListener()|
|android.app.ActivityOptions.getPackageName()|
|android.app.ActivityOptions.getStartHeight()|
|android.app.ActivityOptions.getStartWidth()|
|android.app.ActivityOptions.getStartX()|
|android.app.ActivityOptions.getStartY()|
|android.app.ActivityOptions.getThumbnail()|
|android.app.ActivityOptions.makeCustomAnimation(Context,int,int)|Create an Act
|android.app.ActivityOptions.makeCustomAnimation(Context,int,int,Handler,ActivityOptions.OnAnimationStartedListener)|
|android.app.ActivityOptions.makeScaleUpAnimation(View,int,int,int,int)|Create 
|android.app.ActivityOptions.makeThumbnailScaleDownAnimation(View,Bitmap,int,int,ActivityOptions.OnAnimationStartedListener)|
|android.app.ActivityOptions.makeThumbnailScaleUpAnimation(View,Bitmap,int,int)|
|android.app.ActivityOptions.makeThumbnailScaleUpAnimation(View,Bitmap,int,int,ActivityOptions.OnAnimationStartedListener)|
|android.app.ActivityOptions.toBundle()|Returns the created options as a Bundle
|android.app.ActivityOptions.update(ActivityOptions)|Update the current values 

*android.app.ActivityOptions_Description*

Helper class for building an options Bundle that can be used with 
Context.startActivity(Intent, Bundle)(|android.content.Context|) and related 
methods. 



*int_android.app.ActivityOptions.ANIM_CUSTOM*




*int_android.app.ActivityOptions.ANIM_NONE*




*int_android.app.ActivityOptions.ANIM_SCALE_UP*




*int_android.app.ActivityOptions.ANIM_THUMBNAIL_SCALE_DOWN*




*int_android.app.ActivityOptions.ANIM_THUMBNAIL_SCALE_UP*




*java.lang.String_android.app.ActivityOptions.KEY_ANIM_ENTER_RES_ID*

Custom enter animation resource ID. 


*java.lang.String_android.app.ActivityOptions.KEY_ANIM_EXIT_RES_ID*

Custom exit animation resource ID. 


*java.lang.String_android.app.ActivityOptions.KEY_ANIM_START_HEIGHT*

Initial height of the animation. 


*java.lang.String_android.app.ActivityOptions.KEY_ANIM_START_LISTENER*

Callback for when animation is started. 


*java.lang.String_android.app.ActivityOptions.KEY_ANIM_START_WIDTH*

Initial width of the animation. 


*java.lang.String_android.app.ActivityOptions.KEY_ANIM_START_X*

Start X position of thumbnail animation. 


*java.lang.String_android.app.ActivityOptions.KEY_ANIM_START_Y*

Start Y position of thumbnail animation. 


*java.lang.String_android.app.ActivityOptions.KEY_ANIM_THUMBNAIL*

Bitmap for thumbnail animation. 


*java.lang.String_android.app.ActivityOptions.KEY_ANIM_TYPE*

Type of animation that arguments specify. 


*java.lang.String_android.app.ActivityOptions.KEY_PACKAGE_NAME*

The package name that created the options. 



*android.app.ActivityOptions(Bundle)*

public ActivityOptions(android.os.Bundle opts)




*android.app.ActivityOptions.abort()*

public void abort()





*android.app.ActivityOptions.abort(Bundle)*

public static void abort(android.os.Bundle options)





*android.app.ActivityOptions.getAnimationType()*

public int getAnimationType()





*android.app.ActivityOptions.getCustomEnterResId()*

public int getCustomEnterResId()





*android.app.ActivityOptions.getCustomExitResId()*

public int getCustomExitResId()





*android.app.ActivityOptions.getOnAnimationStartListener()*

public IRemoteCallback getOnAnimationStartListener()





*android.app.ActivityOptions.getPackageName()*

public |java.lang.String| getPackageName()





*android.app.ActivityOptions.getStartHeight()*

public int getStartHeight()





*android.app.ActivityOptions.getStartWidth()*

public int getStartWidth()





*android.app.ActivityOptions.getStartX()*

public int getStartX()





*android.app.ActivityOptions.getStartY()*

public int getStartY()





*android.app.ActivityOptions.getThumbnail()*

public Bitmap getThumbnail()





*android.app.ActivityOptions.makeCustomAnimation(Context,int,int)*

public static |android.app.ActivityOptions| makeCustomAnimation(
  android.content.Context context,
  int enterResId,
  int exitResId)

Create an ActivityOptions specifying a custom animation to run when the 
activity is displayed. 


    context - Who is defining this. This is the application that the animation resources will 
       be loaded from. 
    enterResId - A resource ID of the animation resource to use for the incoming activity. Use 0 
       for no animation. 
    exitResId - A resource ID of the animation resource to use for the outgoing activity. Use 0 
       for no animation. 

    Returns: Returns a new ActivityOptions object that you can use to supply these options 
             as the options Bundle when starting an activity. 

*android.app.ActivityOptions.makeCustomAnimation(Context,int,int,Handler,ActivityOptions.OnAnimationStartedListener)*

public static |android.app.ActivityOptions| makeCustomAnimation(
  android.content.Context context,
  int enterResId,
  int exitResId,
  android.os.Handler handler,
  android.app.ActivityOptions.OnAnimationStartedListener listener)

Create an ActivityOptions specifying a custom animation to run when the 
activity is displayed. 


    context - Who is defining this. This is the application that the animation resources will 
       be loaded from. 
    enterResId - A resource ID of the animation resource to use for the incoming activity. Use 0 
       for no animation. 
    exitResId - A resource ID of the animation resource to use for the outgoing activity. Use 0 
       for no animation. 
    handler - If listener is non-null this must be a valid Handler on which to dispatch the 
       callback; otherwise it should be null. 
    listener - Optional OnAnimationStartedListener to find out when the requested animation 
       has started running. If for some reason the animation is not executed, 
       the callback will happen immediately. 

    Returns: Returns a new ActivityOptions object that you can use to supply these options 
             as the options Bundle when starting an activity. 

*android.app.ActivityOptions.makeScaleUpAnimation(View,int,int,int,int)*

public static |android.app.ActivityOptions| makeScaleUpAnimation(
  android.view.View source,
  int startX,
  int startY,
  int startWidth,
  int startHeight)

Create an ActivityOptions specifying an animation where the new activity is 
scaled from a small originating area of the screen to its final full 
representation. 

If the Intent this is being used with has not set its 
Intent.setSourceBounds(|android.content.Intent|) , those bounds will be filled 
in for you based on the initial bounds passed in here. 


    source - The View that the new activity is animating from. This defines the coordinate 
       space for startX and startY. 
    startX - The x starting location of the new activity, relative to source. 
    startY - The y starting location of the activity, relative to source. 
    startWidth - The initial width of the new activity. 
    startHeight - The initial height of the new activity. 

    Returns: Returns a new ActivityOptions object that you can use to supply these options 
             as the options Bundle when starting an activity. 

*android.app.ActivityOptions.makeThumbnailScaleDownAnimation(View,Bitmap,int,int,ActivityOptions.OnAnimationStartedListener)*

public static |android.app.ActivityOptions| makeThumbnailScaleDownAnimation(
  android.view.View source,
  Bitmap thumbnail,
  int startX,
  int startY,
  android.app.ActivityOptions.OnAnimationStartedListener listener)

Create an ActivityOptions specifying an animation where an activity window is 
scaled from a given position to a thumbnail at a specified location. 


    source - The View that this thumbnail is animating to. This defines the coordinate space 
       for startX and startY. 
    thumbnail - The bitmap that will be shown as the final thumbnail of the animation. 
    startX - The x end location of the bitmap, relative to source. 
    startY - The y end location of the bitmap, relative to source. 
    listener - Optional OnAnimationStartedListener to find out when the requested animation 
       has started running. If for some reason the animation is not executed, 
       the callback will happen immediately. 

    Returns: Returns a new ActivityOptions object that you can use to supply these options 
             as the options Bundle when starting an activity. 

*android.app.ActivityOptions.makeThumbnailScaleUpAnimation(View,Bitmap,int,int)*

public static |android.app.ActivityOptions| makeThumbnailScaleUpAnimation(
  android.view.View source,
  Bitmap thumbnail,
  int startX,
  int startY)

Create an ActivityOptions specifying an animation where a thumbnail is scaled 
from a given position to the new activity window that is being started. 

If the Intent this is being used with has not set its 
Intent.setSourceBounds(|android.content.Intent|) , those bounds will be filled 
in for you based on the initial thumbnail location and size provided here. 


    source - The View that this thumbnail is animating from. This defines the coordinate 
       space for startX and startY. 
    thumbnail - The bitmap that will be shown as the initial thumbnail of the animation. 
    startX - The x starting location of the bitmap, relative to source. 
    startY - The y starting location of the bitmap, relative to source. 

    Returns: Returns a new ActivityOptions object that you can use to supply these options 
             as the options Bundle when starting an activity. 

*android.app.ActivityOptions.makeThumbnailScaleUpAnimation(View,Bitmap,int,int,ActivityOptions.OnAnimationStartedListener)*

public static |android.app.ActivityOptions| makeThumbnailScaleUpAnimation(
  android.view.View source,
  Bitmap thumbnail,
  int startX,
  int startY,
  android.app.ActivityOptions.OnAnimationStartedListener listener)

Create an ActivityOptions specifying an animation where a thumbnail is scaled 
from a given position to the new activity window that is being started. 


    source - The View that this thumbnail is animating from. This defines the coordinate 
       space for startX and startY. 
    thumbnail - The bitmap that will be shown as the initial thumbnail of the animation. 
    startX - The x starting location of the bitmap, relative to source. 
    startY - The y starting location of the bitmap, relative to source. 
    listener - Optional OnAnimationStartedListener to find out when the requested animation 
       has started running. If for some reason the animation is not executed, 
       the callback will happen immediately. 

    Returns: Returns a new ActivityOptions object that you can use to supply these options 
             as the options Bundle when starting an activity. 

*android.app.ActivityOptions.toBundle()*

public |android.os.Bundle| toBundle()

Returns the created options as a Bundle, which can be passed to 
Context.startActivity(Intent, Bundle)(|android.content.Context|) and related 
methods. Note that the returned Bundle is still owned by the ActivityOptions 
object; you must not modify it, but can supply it to the startActivity methods 
that take an options Bundle. 



*android.app.ActivityOptions.update(ActivityOptions)*

public void update(android.app.ActivityOptions otherOptions)

Update the current values in this ActivityOptions from those supplied in 
otherOptions. Any values defined in otherOptions replace those in the base 
options. 




