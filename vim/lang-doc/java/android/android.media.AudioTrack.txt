*android.media.AudioTrack* *AudioTrack* 

public class AudioTrack
  extends    |java.lang.Object|

|android.media.AudioTrack_Description|
|android.media.AudioTrack_Fields|
|android.media.AudioTrack_Constructors|
|android.media.AudioTrack_Methods|

================================================================================

*android.media.AudioTrack_Fields*
|int_android.media.AudioTrack.ERROR|
|int_android.media.AudioTrack.ERROR_BAD_VALUE|
|int_android.media.AudioTrack.ERROR_INVALID_OPERATION|
|int_android.media.AudioTrack.MODE_STATIC|
|int_android.media.AudioTrack.MODE_STREAM|
|int_android.media.AudioTrack.PLAYSTATE_PAUSED|
|int_android.media.AudioTrack.PLAYSTATE_PLAYING|
|int_android.media.AudioTrack.PLAYSTATE_STOPPED|
|int_android.media.AudioTrack.STATE_INITIALIZED|
|int_android.media.AudioTrack.STATE_NO_STATIC_DATA|
|int_android.media.AudioTrack.STATE_UNINITIALIZED|
|int_android.media.AudioTrack.SUCCESS|

*android.media.AudioTrack_Constructors*
|android.media.AudioTrack(int,int,int,int,int,int)|
|android.media.AudioTrack(int,int,int,int,int,int,int)|

*android.media.AudioTrack_Methods*
|android.media.AudioTrack.attachAuxEffect(int)|
|android.media.AudioTrack.finalize()|
|android.media.AudioTrack.flush()|
|android.media.AudioTrack.getAudioFormat()|
|android.media.AudioTrack.getAudioSessionId()|
|android.media.AudioTrack.getChannelConfiguration()|
|android.media.AudioTrack.getChannelCount()|
|android.media.AudioTrack.getMaxVolume()|
|android.media.AudioTrack.getMinBufferSize(int,int,int)|
|android.media.AudioTrack.getMinVolume()|
|android.media.AudioTrack.getNativeFrameCount()|
|android.media.AudioTrack.getNativeOutputSampleRate(int)|
|android.media.AudioTrack.getNotificationMarkerPosition()|
|android.media.AudioTrack.getPlaybackHeadPosition()|
|android.media.AudioTrack.getPlaybackRate()|
|android.media.AudioTrack.getPlayState()|
|android.media.AudioTrack.getPositionNotificationPeriod()|
|android.media.AudioTrack.getSampleRate()|
|android.media.AudioTrack.getState()|
|android.media.AudioTrack.getStreamType()|
|android.media.AudioTrack.getTimestamp(AudioTimestamp)|
|android.media.AudioTrack.pause()|
|android.media.AudioTrack.play()|
|android.media.AudioTrack.release()|
|android.media.AudioTrack.reloadStaticData()|
|android.media.AudioTrack.setAuxEffectSendLevel(float)|
|android.media.AudioTrack.setLoopPoints(int,int,int)|
|android.media.AudioTrack.setNotificationMarkerPosition(int)|
|android.media.AudioTrack.setPlaybackHeadPosition(int)|
|android.media.AudioTrack.setPlaybackPositionUpdateListener(AudioTrack.OnPlaybackPositionUpdateListener)|
|android.media.AudioTrack.setPlaybackPositionUpdateListener(AudioTrack.OnPlaybackPositionUpdateListener,Handler)|
|android.media.AudioTrack.setPlaybackRate(int)|
|android.media.AudioTrack.setPositionNotificationPeriod(int)|
|android.media.AudioTrack.setState(int)|
|android.media.AudioTrack.setStereoVolume(float,float)|
|android.media.AudioTrack.stop()|
|android.media.AudioTrack.write(byte[],int,int)|
|android.media.AudioTrack.write(short[],int,int)|

*android.media.AudioTrack_Description*





*int_android.media.AudioTrack.ERROR*




*int_android.media.AudioTrack.ERROR_BAD_VALUE*




*int_android.media.AudioTrack.ERROR_INVALID_OPERATION*




*int_android.media.AudioTrack.MODE_STATIC*




*int_android.media.AudioTrack.MODE_STREAM*




*int_android.media.AudioTrack.PLAYSTATE_PAUSED*




*int_android.media.AudioTrack.PLAYSTATE_PLAYING*




*int_android.media.AudioTrack.PLAYSTATE_STOPPED*




*int_android.media.AudioTrack.STATE_INITIALIZED*




*int_android.media.AudioTrack.STATE_NO_STATIC_DATA*




*int_android.media.AudioTrack.STATE_UNINITIALIZED*




*int_android.media.AudioTrack.SUCCESS*





*android.media.AudioTrack(int,int,int,int,int,int)*

public AudioTrack(
  int streamType,
  int sampleRateInHz,
  int channelConfig,
  int audioFormat,
  int bufferSizeInBytes,
  int mode)
  throws |java.lang.IllegalArgumentException|
         



*android.media.AudioTrack(int,int,int,int,int,int,int)*

public AudioTrack(
  int streamType,
  int sampleRateInHz,
  int channelConfig,
  int audioFormat,
  int bufferSizeInBytes,
  int mode,
  int sessionId)
  throws |java.lang.IllegalArgumentException|
         



*android.media.AudioTrack.attachAuxEffect(int)*

public int attachAuxEffect(int effectId)





*android.media.AudioTrack.finalize()*

protected void finalize()





*android.media.AudioTrack.flush()*

public void flush()





*android.media.AudioTrack.getAudioFormat()*

public int getAudioFormat()





*android.media.AudioTrack.getAudioSessionId()*

public int getAudioSessionId()





*android.media.AudioTrack.getChannelConfiguration()*

public int getChannelConfiguration()





*android.media.AudioTrack.getChannelCount()*

public int getChannelCount()





*android.media.AudioTrack.getMaxVolume()*

public static float getMaxVolume()





*android.media.AudioTrack.getMinBufferSize(int,int,int)*

public static int getMinBufferSize(
  int sampleRateInHz,
  int channelConfig,
  int audioFormat)





*android.media.AudioTrack.getMinVolume()*

public static float getMinVolume()





*android.media.AudioTrack.getNativeFrameCount()*

protected int getNativeFrameCount()





*android.media.AudioTrack.getNativeOutputSampleRate(int)*

public static int getNativeOutputSampleRate(int streamType)





*android.media.AudioTrack.getNotificationMarkerPosition()*

public int getNotificationMarkerPosition()





*android.media.AudioTrack.getPlaybackHeadPosition()*

public int getPlaybackHeadPosition()





*android.media.AudioTrack.getPlaybackRate()*

public int getPlaybackRate()





*android.media.AudioTrack.getPlayState()*

public int getPlayState()





*android.media.AudioTrack.getPositionNotificationPeriod()*

public int getPositionNotificationPeriod()





*android.media.AudioTrack.getSampleRate()*

public int getSampleRate()





*android.media.AudioTrack.getState()*

public int getState()





*android.media.AudioTrack.getStreamType()*

public int getStreamType()





*android.media.AudioTrack.getTimestamp(AudioTimestamp)*

public boolean getTimestamp(android.media.AudioTimestamp timestamp)





*android.media.AudioTrack.pause()*

public void pause()
  throws |java.lang.IllegalStateException|
         




*android.media.AudioTrack.play()*

public void play()
  throws |java.lang.IllegalStateException|
         




*android.media.AudioTrack.release()*

public void release()





*android.media.AudioTrack.reloadStaticData()*

public int reloadStaticData()





*android.media.AudioTrack.setAuxEffectSendLevel(float)*

public int setAuxEffectSendLevel(float level)





*android.media.AudioTrack.setLoopPoints(int,int,int)*

public int setLoopPoints(
  int startInFrames,
  int endInFrames,
  int loopCount)





*android.media.AudioTrack.setNotificationMarkerPosition(int)*

public int setNotificationMarkerPosition(int markerInFrames)





*android.media.AudioTrack.setPlaybackHeadPosition(int)*

public int setPlaybackHeadPosition(int positionInFrames)





*android.media.AudioTrack.setPlaybackPositionUpdateListener(AudioTrack.OnPlaybackPositionUpdateListener)*

public void setPlaybackPositionUpdateListener(android.media.AudioTrack.OnPlaybackPositionUpdateListener listener)





*android.media.AudioTrack.setPlaybackPositionUpdateListener(AudioTrack.OnPlaybackPositionUpdateListener,Handler)*

public void setPlaybackPositionUpdateListener(
  android.media.AudioTrack.OnPlaybackPositionUpdateListener listener,
  android.os.Handler handler)





*android.media.AudioTrack.setPlaybackRate(int)*

public int setPlaybackRate(int sampleRateInHz)





*android.media.AudioTrack.setPositionNotificationPeriod(int)*

public int setPositionNotificationPeriod(int periodInFrames)





*android.media.AudioTrack.setState(int)*

protected void setState(int state)





*android.media.AudioTrack.setStereoVolume(float,float)*

public int setStereoVolume(
  float leftVolume,
  float rightVolume)





*android.media.AudioTrack.stop()*

public void stop()
  throws |java.lang.IllegalStateException|
         




*android.media.AudioTrack.write(byte[],int,int)*

public int write(
  byte[] audioData,
  int offsetInBytes,
  int sizeInBytes)





*android.media.AudioTrack.write(short[],int,int)*

public int write(
  short[] audioData,
  int offsetInShorts,
  int sizeInShorts)






