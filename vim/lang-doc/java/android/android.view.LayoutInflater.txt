*android.view.LayoutInflater* *LayoutInflater* Instantiates a layout XML file in

public abstract class LayoutInflater
  extends    |java.lang.Object|

|android.view.LayoutInflater_Description|
|android.view.LayoutInflater_Fields|
|android.view.LayoutInflater_Constructors|
|android.view.LayoutInflater_Methods|

================================================================================

*android.view.LayoutInflater_Fields*
|android.content.Context_android.view.LayoutInflater.mContext|

*android.view.LayoutInflater_Constructors*
|android.view.LayoutInflater(Context)|Create a new LayoutInflater instance asso
|android.view.LayoutInflater(LayoutInflater,Context)|Create a new LayoutInflate

*android.view.LayoutInflater_Methods*
|android.view.LayoutInflater.cloneInContext(Context)|Create a copy of the exist
|android.view.LayoutInflater.createView(String,String,AttributeSet)|Low-level f
|android.view.LayoutInflater.from(Context)|Obtains the LayoutInflater from the 
|android.view.LayoutInflater.getContext()|Return the context we are running in,
|android.view.LayoutInflater.getFactory()|Return the currentFactory(or null).
|android.view.LayoutInflater.getFactory2()|Return the currentFactory2.
|android.view.LayoutInflater.getFilter()|
|android.view.LayoutInflater.inflate(int,ViewGroup)|Inflate a new view hierarch
|android.view.LayoutInflater.inflate(int,ViewGroup,boolean)|Inflate a new view 
|android.view.LayoutInflater.inflate(XmlPullParser,ViewGroup)|Inflate a new vie
|android.view.LayoutInflater.inflate(XmlPullParser,ViewGroup,boolean)|Inflate a
|android.view.LayoutInflater.onCreateView(String,AttributeSet)|This routine is 
|android.view.LayoutInflater.onCreateView(View,String,AttributeSet)|Version of#
|android.view.LayoutInflater.setFactory(LayoutInflater.Factory)|Attach a custom
|android.view.LayoutInflater.setFactory2(LayoutInflater.Factory2)|Like#setFacto
|android.view.LayoutInflater.setFilter(LayoutInflater.Filter)|Sets theFilterto 
|android.view.LayoutInflater.setPrivateFactory(LayoutInflater.Factory2)|

*android.view.LayoutInflater_Description*

Instantiates a layout XML file into its corresponding (|android.view.View|) 
objects. It is never used directly. Instead, use (|android.app.Activity|) or 
(|android.content.Context|) to retrieve a standard LayoutInflater instance that 
is already hooked up to the current context and correctly configured for the 
device you are running on. For example: 

LayoutInflater inflater = (LayoutInflater)context.getSystemService 
(Context.LAYOUT_INFLATER_SERVICE); 



To create a new LayoutInflater with an additional 
(|android.view.LayoutInflater.Factory|) for your own views, you can use 
(|android.view.LayoutInflater|) to clone an existing ViewFactory, and then call 
(|android.view.LayoutInflater|) on it to include your Factory. 

For performance reasons, view inflation relies heavily on pre-processing of XML 
files that is done at build time. Therefore, it is not currently possible to 
use LayoutInflater with an XmlPullParser over a plain XML file at runtime; it 
only works with an XmlPullParser returned from a compiled resource (R.something 
file.) 



*android.content.Context_android.view.LayoutInflater.mContext*

This field should be made private, so it is hidden from the SDK. 



*android.view.LayoutInflater(Context)*

protected LayoutInflater(android.content.Context context)

Create a new LayoutInflater instance associated with a particular Context. 
Applications will almost always want to use 
Context.getSystemService()(|android.content.Context|) to retrieve the standard 
Context.INFLATER_SERVICE(|android.content.Context|) . 

    context - The Context in which this LayoutInflater will create its Views; most 
       importantly, this supplies the theme from which the default values for 
       their attributes are retrieved. 

*android.view.LayoutInflater(LayoutInflater,Context)*

protected LayoutInflater(
  android.view.LayoutInflater original,
  android.content.Context newContext)

Create a new LayoutInflater instance that is a copy of an existing 
LayoutInflater, optionally with its Context changed. For use in implementing 
(|android.view.LayoutInflater|) . 

    original - The original LayoutInflater to copy. 
    newContext - The new Context to use. 

*android.view.LayoutInflater.cloneInContext(Context)*

public abstract |android.view.LayoutInflater| cloneInContext(android.content.Context newContext)

Create a copy of the existing LayoutInflater object, with the copy pointing to 
a different Context than the original. This is used by 
(|android.view.ContextThemeWrapper|) to create a new LayoutInflater to go along 
with the new Context theme. 


    newContext - The new Context to associate with the new LayoutInflater. May be the same as 
       the original Context if desired. 

    Returns: Returns a brand spanking new LayoutInflater object associated with the given 
             Context. 

*android.view.LayoutInflater.createView(String,String,AttributeSet)*

public final |android.view.View| createView(
  java.lang.String name,
  java.lang.String prefix,
  android.util.AttributeSet attrs)
  throws |java.lang.ClassNotFoundException|
         |android.view.InflateException|
         
Low-level function for instantiating a view by name. This attempts to 
instantiate a view class of the given name found in this LayoutInflater's 
ClassLoader. 

There are two things that can happen in an error case: either the exception 
describing the error will be thrown, or a null will be returned. You must deal 
with both possibilities -- the former will happen the first time createView() 
is called for a class of a particular name, the latter every time there-after 
for that class name. 


    name - The full name of the class to be instantiated. 
    attrs - The XML attributes supplied for this instance. 

    Returns: View The newly instantiated view, or null. 

*android.view.LayoutInflater.from(Context)*

public static |android.view.LayoutInflater| from(android.content.Context context)

Obtains the LayoutInflater from the given context. 



*android.view.LayoutInflater.getContext()*

public |android.content.Context| getContext()

Return the context we are running in, for access to resources, class loader, 
etc. 



*android.view.LayoutInflater.getFactory()*

public final |android.view.LayoutInflater.Factory| getFactory()

Return the current (|android.view.LayoutInflater.Factory|) (or null). This is 
called on each element name. If the factory returns a View, add that to the 
hierarchy. If it returns null, proceed to call onCreateView(name). 



*android.view.LayoutInflater.getFactory2()*

public final |android.view.LayoutInflater.Factory2| getFactory2()

Return the current (|android.view.LayoutInflater.Factory2|) . Returns null if 
no factory is set or the set factory does not implement the 
(|android.view.LayoutInflater.Factory2|) interface. This is called on each 
element name. If the factory returns a View, add that to the hierarchy. If it 
returns null, proceed to call onCreateView(name). 



*android.view.LayoutInflater.getFilter()*

public |android.view.LayoutInflater.Filter| getFilter()





    Returns: The {@link Filter} currently used by this LayoutInflater to restrict the set of 
             Views that are allowed to be inflated. 

*android.view.LayoutInflater.inflate(int,ViewGroup)*

public |android.view.View| inflate(
  int resource,
  android.view.ViewGroup root)

Inflate a new view hierarchy from the specified xml resource. Throws 
(|android.view.InflateException|) if there is an error. 


    resource - ID for an XML layout resource to load (e.g., R.layout.main_page) 
    root - Optional view to be the parent of the generated hierarchy. 

    Returns: The root View of the inflated hierarchy. If root was supplied, this is the root 
             View; otherwise it is the root of the inflated XML file. 

*android.view.LayoutInflater.inflate(int,ViewGroup,boolean)*

public |android.view.View| inflate(
  int resource,
  android.view.ViewGroup root,
  boolean attachToRoot)

Inflate a new view hierarchy from the specified xml resource. Throws 
(|android.view.InflateException|) if there is an error. 


    resource - ID for an XML layout resource to load (e.g., R.layout.main_page) 
    root - Optional view to be the parent of the generated hierarchy (if attachToRoot is 
       true), or else simply an object that provides a set of LayoutParams 
       values for root of the returned hierarchy (if attachToRoot is false.) 
    attachToRoot - Whether the inflated hierarchy should be attached to the root parameter? If 
       false, root is only used to create the correct subclass of LayoutParams 
       for the root view in the XML. 

    Returns: The root View of the inflated hierarchy. If root was supplied and attachToRoot 
             is true, this is root; otherwise it is the root of the inflated 
             XML file. 

*android.view.LayoutInflater.inflate(XmlPullParser,ViewGroup)*

public |android.view.View| inflate(
  XmlPullParser parser,
  android.view.ViewGroup root)

Inflate a new view hierarchy from the specified xml node. Throws 
(|android.view.InflateException|) if there is an error. * 

ImportantFor performance reasons, view inflation relies heavily on 
pre-processing of XML files that is done at build time. Therefore, it is not 
currently possible to use LayoutInflater with an XmlPullParser over a plain XML 
file at runtime. 


    parser - XML dom node containing the description of the view hierarchy. 
    root - Optional view to be the parent of the generated hierarchy. 

    Returns: The root View of the inflated hierarchy. If root was supplied, this is the root 
             View; otherwise it is the root of the inflated XML file. 

*android.view.LayoutInflater.inflate(XmlPullParser,ViewGroup,boolean)*

public |android.view.View| inflate(
  XmlPullParser parser,
  android.view.ViewGroup root,
  boolean attachToRoot)

Inflate a new view hierarchy from the specified XML node. Throws 
(|android.view.InflateException|) if there is an error. 

ImportantFor performance reasons, view inflation relies heavily on 
pre-processing of XML files that is done at build time. Therefore, it is not 
currently possible to use LayoutInflater with an XmlPullParser over a plain XML 
file at runtime. 


    parser - XML dom node containing the description of the view hierarchy. 
    root - Optional view to be the parent of the generated hierarchy (if attachToRoot is 
       true), or else simply an object that provides a set of LayoutParams 
       values for root of the returned hierarchy (if attachToRoot is false.) 
    attachToRoot - Whether the inflated hierarchy should be attached to the root parameter? If 
       false, root is only used to create the correct subclass of LayoutParams 
       for the root view in the XML. 

    Returns: The root View of the inflated hierarchy. If root was supplied and attachToRoot 
             is true, this is root; otherwise it is the root of the inflated 
             XML file. 

*android.view.LayoutInflater.onCreateView(String,AttributeSet)*

protected |android.view.View| onCreateView(
  java.lang.String name,
  android.util.AttributeSet attrs)
  throws |java.lang.ClassNotFoundException|
         
This routine is responsible for creating the correct subclass of View given the 
xml element name. Override it to handle custom view objects. If you override 
this in your subclass be sure to call through to super.onCreateView(name) for 
names you do not recognize. 


    name - The fully qualified class name of the View to be create. 
    attrs - An AttributeSet of attributes to apply to the View. 

    Returns: View The View created. 

*android.view.LayoutInflater.onCreateView(View,String,AttributeSet)*

protected |android.view.View| onCreateView(
  android.view.View parent,
  java.lang.String name,
  android.util.AttributeSet attrs)
  throws |java.lang.ClassNotFoundException|
         
Version of (|android.view.LayoutInflater|) that also takes the future parent of 
the view being constructed. The default implementation simply calls 
(|android.view.LayoutInflater|) . 


    parent - The future parent of the returned view. Note that this may be null. 
    name - The fully qualified class name of the View to be create. 
    attrs - An AttributeSet of attributes to apply to the View. 

    Returns: View The View created. 

*android.view.LayoutInflater.setFactory(LayoutInflater.Factory)*

public void setFactory(android.view.LayoutInflater.Factory factory)

Attach a custom Factory interface for creating views while using this 
LayoutInflater. This must not be null, and can only be set once; after setting, 
you can not change the factory. This is called on each element name as the xml 
is parsed. If the factory returns a View, that is added to the hierarchy. If it 
returns null, the next factory default (|android.view.LayoutInflater|) method 
is called. 

If you have an existing LayoutInflater and want to add your own factory to it, 
use (|android.view.LayoutInflater|) to clone the existing instance and then you 
can use this function (once) on the returned new instance. This will merge your 
own factory with whatever factory the original instance is using. 



*android.view.LayoutInflater.setFactory2(LayoutInflater.Factory2)*

public void setFactory2(android.view.LayoutInflater.Factory2 factory)

Like (|android.view.LayoutInflater|) , but allows you to set a 
(|android.view.LayoutInflater.Factory2|) interface. 



*android.view.LayoutInflater.setFilter(LayoutInflater.Filter)*

public void setFilter(android.view.LayoutInflater.Filter filter)

Sets the (|android.view.LayoutInflater.Filter|) to by this LayoutInflater. If a 
view is attempted to be inflated which is not allowed by the 
(|android.view.LayoutInflater.Filter|) , the (|android.view.LayoutInflater|) 
call will throw an (|android.view.InflateException|) . This filter will replace 
any previous filter set on this LayoutInflater. 


    filter - The Filter which restricts the set of Views that are allowed to be inflated. 
       This filter will replace any previous filter set on this LayoutInflater. 

*android.view.LayoutInflater.setPrivateFactory(LayoutInflater.Factory2)*

public void setPrivateFactory(android.view.LayoutInflater.Factory2 factory)






