*android.provider.ContactsContract.RawContacts* *ContactsContract.RawContacts* C

public static final class ContactsContract.RawContacts
  extends    |java.lang.Object|
  implements |android.provider.BaseColumns|
             |android.provider.ContactsContract.RawContactsColumns|
             |android.provider.ContactsContract.ContactOptionsColumns|
             |android.provider.ContactsContract.ContactNameColumns|
             |android.provider.ContactsContract.SyncColumns|

|android.provider.ContactsContract.RawContacts_Description|
|android.provider.ContactsContract.RawContacts_Fields|
|android.provider.ContactsContract.RawContacts_Constructors|
|android.provider.ContactsContract.RawContacts_Methods|

================================================================================

*android.provider.ContactsContract.RawContacts_Fields*
|int_android.provider.ContactsContract.RawContacts.AGGREGATION_MODE_DEFAULT|
|int_android.provider.ContactsContract.RawContacts.AGGREGATION_MODE_DISABLED|
|int_android.provider.ContactsContract.RawContacts.AGGREGATION_MODE_IMMEDIATE|
|int_android.provider.ContactsContract.RawContacts.AGGREGATION_MODE_SUSPENDED|
|java.lang.String_android.provider.ContactsContract.RawContacts.CONTENT_ITEM_TYPE|
|java.lang.String_android.provider.ContactsContract.RawContacts.CONTENT_TYPE|
|android.net.Uri_android.provider.ContactsContract.RawContacts.CONTENT_URI|

*android.provider.ContactsContract.RawContacts_Methods*
|android.provider.ContactsContract.RawContacts.getContactLookupUri(ContentResolver,Uri)|
|android.provider.ContactsContract.RawContacts.newEntityIterator(Cursor)|TODO: 

*android.provider.ContactsContract.RawContacts_Description*

Constants for the raw contacts table, which contains one row of contact 
information for each person in each synced account. Sync adapters and contact 
management apps are the primary consumers of this API. 

Aggregation 

As soon as a raw contact is inserted or whenever its constituent data changes, 
the provider will check if the raw contact matches other existing raw contacts 
and if so will aggregate it with those. The aggregation is reflected in the 
(|android.provider.ContactsContract.RawContacts|) table by the change of the 
(|android.provider.ContactsContract.RawContacts|) field, which is the reference 
to the aggregate contact. 

Changes to the structured name, organization, phone number, email address, or 
nickname trigger a re-aggregation. 

See also (|android.provider.ContactsContract.AggregationExceptions|) for a 
mechanism to control aggregation programmatically. 

Operations 

Insert 

Raw contacts can be inserted incrementally or in a batch. The incremental 
method is more traditional but less efficient. It should be used only if no 
(|android.provider.ContactsContract.RawContacts.Data|) values are available at 
the time the raw contact is created: 

ContentValues values = new ContentValues(); 
values.put(RawContacts.ACCOUNT_TYPE, accountType); 
values.put(RawContacts.ACCOUNT_NAME, accountName); Uri rawContactUri = 
getContentResolver().insert(RawContacts.CONTENT_URI, values); long rawContactId 
= ContentUris.parseId(rawContactUri); 



Once (|android.provider.ContactsContract.RawContacts.Data|) values become 
available, insert those. For example, here's how you would insert a name: 



values.clear(); values.put(Data.RAW_CONTACT_ID, rawContactId); 
values.put(Data.MIMETYPE, StructuredName.CONTENT_ITEM_TYPE); 
values.put(StructuredName.DISPLAY_NAME, Mike Sullivan); 
getContentResolver().insert(Data.CONTENT_URI, values); 



The batch method is by far preferred. It inserts the raw contact and its 
constituent data rows in a single database transaction and causes at most one 
aggregation pass. 

ArrayList<ContentProviderOperation> ops = new 
ArrayList<ContentProviderOperation>(); ... int rawContactInsertIndex = 
ops.size(); ops.add(ContentProviderOperation.newInsert(RawContacts.CONTENT_URI) 
.withValue(RawContacts.ACCOUNT_TYPE, accountType) 
.withValue(RawContacts.ACCOUNT_NAME, accountName) .build()); 

ops.add(ContentProviderOperation.newInsert(Data.CONTENT_URI) 
.withValueBackReference(Data.RAW_CONTACT_ID, rawContactInsertIndex) 
.withValue(Data.MIMETYPE, StructuredName.CONTENT_ITEM_TYPE) 
.withValue(StructuredName.DISPLAY_NAME, Mike Sullivan) .build()); 

getContentResolver().applyBatch(ContactsContract.AUTHORITY, ops); 



Note the use of (|ContentProviderOperation.Builder|) to refer to the 
as-yet-unknown index value of the raw contact inserted in the first operation. 

Update 

Raw contacts can be updated incrementally or in a batch. Batch mode should be 
used whenever possible. The procedures and considerations are analogous to 
those documented above for inserts. 

Delete When a raw contact is deleted, all of its Data rows as well as 
StatusUpdates, AggregationExceptions, PhoneLookup rows are deleted 
automatically. When all raw contacts associated with a 
(|android.provider.Contacts|) row are deleted, the 
(|android.provider.Contacts|) row itself is also deleted automatically. 

The invocation ofresolver.delete(...), does not immediately delete a raw 
contacts row. Instead, it sets the 
(|android.provider.ContactsContract.RawContacts|) flag on the raw contact and 
removes the raw contact from its aggregate contact. The sync adapter then 
deletes the raw contact from the server and finalizes phone-side deletion by 
callingresolver.delete(...)again and passing the 
(|android.provider.ContactsContract|) query parameter. Some sync adapters are 
read-only, meaning that they only sync server-side changes to the phone, but 
not the reverse. If one of those raw contacts is marked for deletion, it will 
remain on the phone. However it will be effectively invisible, because it will 
not be part of any aggregate contact. 

Query 

It is easy to find all raw contacts in a Contact: 

Cursor c = getContentResolver().query(RawContacts.CONTENT_URI, new 
String[]{RawContacts._ID}, RawContacts.CONTACT_ID + "=?", new 
String[]{String.valueOf(contactId)}, null); 



To find raw contacts within a specific account, you can either put the account 
name and type in the selection or pass them as query parameters. The latter 
approach is preferable, especially when you can reuse the URI: 

Uri rawContactUri = RawContacts.CONTENT_URI.buildUpon() 
.appendQueryParameter(RawContacts.ACCOUNT_NAME, accountName) 
.appendQueryParameter(RawContacts.ACCOUNT_TYPE, accountType) .build(); Cursor 
c1 = getContentResolver().query(rawContactUri, RawContacts.STARRED + "<>0", 
null, null, null); ... Cursor c2 = getContentResolver().query(rawContactUri, 
RawContacts.DELETED + "<>0", null, null, null); 

The best way to read a raw contact along with all the data associated with it 
is by using the (|android.content.Entity|) directory. If the raw contact has 
data rows, the Entity cursor will contain a row for each data row. If the raw 
contact has no data rows, the cursor will still contain one row with the raw 
contact-level information. 

Uri rawContactUri = ContentUris.withAppendedId(RawContacts.CONTENT_URI, 
rawContactId); Uri entityUri = Uri.withAppendedPath(rawContactUri, 
Entity.CONTENT_DIRECTORY); Cursor c = getContentResolver().query(entityUri, new 
String[]{RawContacts.SOURCE_ID, Entity.DATA_ID, Entity.MIMETYPE, Entity.DATA1}, 
null, null, null); try { while (c.moveToNext()) { String sourceId = 
c.getString(0); if (!c.isNull(1)) { String mimeType = c.getString(2); String 
data = c.getString(3); ... } } } finally { c.close(); } 



Columns 



RawContacts 

long (|android.provider.ContactsContract.RawContacts|) read-only Row ID. Sync 
adapters should try to preserve row IDs during updates. In other words, it is 
much better for a sync adapter to update a raw contact rather than to delete 
and re-insert it. 

long (|android.provider.ContactsContract.RawContacts|) read-only The ID of the 
row in the (|android.provider.ContactsContract.Contacts|) table that this raw 
contact belongs to. Raw contacts are linked to contacts by the aggregation 
process, which can be controlled by the 
(|android.provider.ContactsContract.RawContacts|) field and 
(|android.provider.ContactsContract.AggregationExceptions|) . 

int (|android.provider.ContactsContract.RawContacts|) read/write A mechanism 
that allows programmatic control of the aggregation process. The allowed values 
are (|android.provider.ContactsContract.RawContacts|) , 
(|android.provider.ContactsContract.RawContacts|) and 
(|android.provider.ContactsContract.RawContacts|) . See also 
(|android.provider.ContactsContract.AggregationExceptions|) . 

int (|android.provider.ContactsContract.RawContacts|) read/write The "deleted" 
flag: "0" by default, "1" if the row has been marked for deletion. When 
(|android.content.ContentResolver|) is called on a raw contact, it is marked 
for deletion and removed from its aggregate contact. The sync adaptor deletes 
the raw contact on the server and then calls ContactResolver.delete once more, 
this time passing the (|android.provider.ContactsContract|) query parameter to 
finalize the data removal. 

int (|android.provider.ContactsContract.RawContacts|) read/write The number of 
times the contact has been contacted. To have an effect on the corresponding 
value of the aggregate contact, this field should be set at the time the raw 
contact is inserted. After that, this value is typically updated via 
(|android.provider.ContactsContract.Contacts|) . 

long (|android.provider.ContactsContract.RawContacts|) read/write The timestamp 
of the last time the contact was contacted. To have an effect on the 
corresponding value of the aggregate contact, this field should be set at the 
time the raw contact is inserted. After that, this value is typically updated 
via (|android.provider.ContactsContract.Contacts|) . 



int (|android.provider.ContactsContract.RawContacts|) read/write An indicator 
for favorite contacts: '1' if favorite, '0' otherwise. Changing this field 
immediately affects the corresponding aggregate contact: if any raw contacts in 
that aggregate contact are starred, then the contact itself is marked as 
starred. 

String (|android.provider.ContactsContract.RawContacts|) read/write A custom 
ringtone associated with a raw contact. Typically this is the URI returned by 
an activity launched with the (|android.media.RingtoneManager|) intent. To have 
an effect on the corresponding value of the aggregate contact, this field 
should be set at the time the raw contact is inserted. To set a custom ringtone 
on a contact, use the field 
Contacts.CUSTOM_RINGTONE(|android.provider.ContactsContract.Contacts|) instead. 

int (|android.provider.ContactsContract.RawContacts|) read/write An indicator 
of whether calls from this raw contact should be forwarded directly to voice 
mail ('1') or not ('0'). To have an effect on the corresponding value of the 
aggregate contact, this field should be set at the time the raw contact is 
inserted. 

String (|android.provider.ContactsContract.RawContacts|) read/write-once The 
name of the account instance to which this row belongs, which when paired with 
(|android.provider.ContactsContract.RawContacts|) identifies a specific 
account. For example, this will be the Gmail address if it is a Google account. 
It should be set at the time the raw contact is inserted and never changed 
afterwards. 

String (|android.provider.ContactsContract.RawContacts|) read/write-once 

The type of account to which this row belongs, which when paired with 
(|android.provider.ContactsContract.RawContacts|) identifies a specific 
account. It should be set at the time the raw contact is inserted and never 
changed afterwards. 

To ensure uniqueness, new account types should be chosen according to the Java 
package naming convention. Thus a Google account is of type "com.google". 



String (|android.provider.ContactsContract.RawContacts|) read/write-once 

The data set within the account that this row belongs to. This allows multiple 
sync adapters for the same account type to distinguish between each others' 
data. The combination of (|android.provider.ContactsContract.RawContacts|) , 
(|android.provider.ContactsContract.RawContacts|) , and 
(|android.provider.ContactsContract.RawContacts|) identifies a set of data that 
is associated with a single sync adapter. 

This is empty by default, and is completely optional. It only needs to be 
populated if multiple sync adapters are entering distinct data for the same 
account type and account name. 

It should be set at the time the raw contact is inserted and never changed 
afterwards. 



String (|android.provider.ContactsContract.RawContacts|) read/write String that 
uniquely identifies this row to its source account. Typically it is set at the 
time the raw contact is inserted and never changed afterwards. The one notable 
exception is a new raw contact: it will have an account name and type (and 
possibly a data set), but no source id. This indicates to the sync adapter that 
a new contact needs to be created server-side and its ID stored in the 
corresponding SOURCE_ID field on the phone. 



int (|android.provider.ContactsContract.RawContacts|) read-only Version number 
that is updated whenever this row or its related data changes. This field can 
be used for optimistic locking of a raw contact. 



int (|android.provider.ContactsContract.RawContacts|) read/write Flag 
indicating that (|android.provider.ContactsContract.RawContacts|) has changed, 
and this row needs to be synchronized by its owning account. The value is set 
to "1" automatically whenever the raw contact changes, unless the URI has the 
(|android.provider.ContactsContract|) query parameter specified. The sync 
adapter should always supply this query parameter to prevent unnecessary 
synchronization: user changes some data on the server, the sync adapter updates 
the contact on the phone (without the CALLER_IS_SYNCADAPTER flag) flag, which 
sets the DIRTY flag, which triggers a sync to bring the changes to the server. 



String (|android.provider.ContactsContract.RawContacts|) read/write Generic 
column provided for arbitrary use by sync adapters. The content provider stores 
this information on behalf of the sync adapter but does not interpret it in any 
way. 



String (|android.provider.ContactsContract.RawContacts|) read/write Generic 
column for use by sync adapters. 



String (|android.provider.ContactsContract.RawContacts|) read/write Generic 
column for use by sync adapters. 



String (|android.provider.ContactsContract.RawContacts|) read/write Generic 
column for use by sync adapters. 





*int_android.provider.ContactsContract.RawContacts.AGGREGATION_MODE_DEFAULT*

Aggregation mode: aggregate immediately after insert or update operation(s) are 
complete. 


*int_android.provider.ContactsContract.RawContacts.AGGREGATION_MODE_DISABLED*

Aggregation mode: never aggregate this raw contact. The raw contact will not 
have a corresponding (|android.provider.Contacts|) aggregate and therefore will 
not be included in (|android.provider.Contacts|) query results. 

For example, this mode can be used for a raw contact that is marked for 
deletion while waiting for the deletion to occur on the server side. 


*int_android.provider.ContactsContract.RawContacts.AGGREGATION_MODE_IMMEDIATE*

Aggregation mode: aggregate at the time the raw contact is inserted/updated. 


*int_android.provider.ContactsContract.RawContacts.AGGREGATION_MODE_SUSPENDED*

Aggregation mode: aggregation suspended temporarily, and is likely to be 
resumed later. Changes to the raw contact will update the associated aggregate 
contact but will not result in any change in how the contact is aggregated. 
Similar to (|android.provider.ContactsContract.RawContacts|) , but maintains a 
link to the corresponding (|android.provider.Contacts|) aggregate. 

This can be used to postpone aggregation until after a series of updates, for 
better performance and/or user experience. 

Note that changing (|android.provider.ContactsContract.RawContacts|) from 
(|android.provider.ContactsContract.RawContacts|) to 
(|android.provider.ContactsContract.RawContacts|) does not trigger an 
aggregation pass, but any subsequent change to the raw contact's data will. 


*java.lang.String_android.provider.ContactsContract.RawContacts.CONTENT_ITEM_TYPE*

The MIME type of the results when a raw contact ID is appended to 
(|android.provider.ContactsContract.RawContacts|) , yielding a subdirectory of 
a single person. 


*java.lang.String_android.provider.ContactsContract.RawContacts.CONTENT_TYPE*

The MIME type of the results from 
(|android.provider.ContactsContract.RawContacts|) when a specific ID value is 
not provided, and multiple raw contacts may be returned. 


*android.net.Uri_android.provider.ContactsContract.RawContacts.CONTENT_URI*

The content:// style URI for this table, which requests a directory of raw 
contact rows matching the selection criteria. 



*android.provider.ContactsContract.RawContacts.getContactLookupUri(ContentResolver,Uri)*

public static |android.net.Uri| getContactLookupUri(
  android.content.ContentResolver resolver,
  android.net.Uri rawContactUri)

Build a (|android.provider.ContactsContract.Contacts|) style 
(|android.net.Uri|) for the parent 
(|android.provider.ContactsContract.Contacts|) entry of the given 
(|android.provider.ContactsContract.RawContacts|) entry. 



*android.provider.ContactsContract.RawContacts.newEntityIterator(Cursor)*

public static |android.content.EntityIterator| newEntityIterator(android.database.Cursor cursor)

TODO: javadoc 


    cursor - 

    Returns: 


