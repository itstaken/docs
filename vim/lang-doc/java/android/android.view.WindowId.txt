*android.view.WindowId* *WindowId* Safe identifier for a window.

public class WindowId
  extends    |java.lang.Object|
  implements |android.os.Parcelable|

|android.view.WindowId_Description|
|android.view.WindowId_Fields|
|android.view.WindowId_Constructors|
|android.view.WindowId_Methods|

================================================================================

*android.view.WindowId_Fields*
|android.os.Parcelable.Creator<android.view.WindowId>_android.view.WindowId.CREATOR|

*android.view.WindowId_Constructors*
|android.view.WindowId(IWindowId)|

*android.view.WindowId_Methods*
|android.view.WindowId.describeContents()|
|android.view.WindowId.equals(Object)|Comparison operator on two IntentSender o
|android.view.WindowId.getTarget()|
|android.view.WindowId.hashCode()|
|android.view.WindowId.isFocused()|Retrieve the current focus state of the asso
|android.view.WindowId.registerFocusObserver(WindowId.FocusObserver)|Start moni
|android.view.WindowId.toString()|
|android.view.WindowId.unregisterFocusObserver(WindowId.FocusObserver)|Stop mon
|android.view.WindowId.writeToParcel(Parcel,int)|

*android.view.WindowId_Description*

Safe identifier for a window. This currently allows you to retrieve and observe 
the input focus state of the window. Most applications will not use this, 
instead relying on the simpler (and more efficient) methods available on 
(|android.view.View|) . This classes is useful when window input interactions 
need to be done across processes: the class itself is a Parcelable that can be 
passed to other processes for them to interact with your window, and it 
provides a limited safe API that doesn't allow the other process to negatively 
harm your window. 



*android.os.Parcelable.Creator<android.view.WindowId>_android.view.WindowId.CREATOR*





*android.view.WindowId(IWindowId)*

public WindowId(IWindowId target)




*android.view.WindowId.describeContents()*

public int describeContents()





*android.view.WindowId.equals(Object)*

public boolean equals(java.lang.Object otherObj)

Comparison operator on two IntentSender objects, such that true is returned 
then they both represent the same operation from the same package. 



*android.view.WindowId.getTarget()*

public IWindowId getTarget()





*android.view.WindowId.hashCode()*

public int hashCode()





*android.view.WindowId.isFocused()*

public boolean isFocused()

Retrieve the current focus state of the associated window. 



*android.view.WindowId.registerFocusObserver(WindowId.FocusObserver)*

public void registerFocusObserver(android.view.WindowId.FocusObserver observer)

Start monitoring for changes in the focus state of the window. 



*android.view.WindowId.toString()*

public |java.lang.String| toString()





*android.view.WindowId.unregisterFocusObserver(WindowId.FocusObserver)*

public void unregisterFocusObserver(android.view.WindowId.FocusObserver observer)

Stop monitoring changes in the focus state of the window. 



*android.view.WindowId.writeToParcel(Parcel,int)*

public void writeToParcel(
  android.os.Parcel out,
  int flags)






