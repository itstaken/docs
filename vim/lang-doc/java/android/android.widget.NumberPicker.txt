*android.widget.NumberPicker* *NumberPicker* A widget that enables the user to s

public class NumberPicker
  extends    |android.widget.LinearLayout|

|android.widget.NumberPicker_Description|
|android.widget.NumberPicker_Fields|
|android.widget.NumberPicker_Constructors|
|android.widget.NumberPicker_Methods|

================================================================================

*android.widget.NumberPicker_Constructors*
|android.widget.NumberPicker(Context)|Create a new number picker.
|android.widget.NumberPicker(Context,AttributeSet)|Create a new number picker.
|android.widget.NumberPicker(Context,AttributeSet,int)|Create a new number pick

*android.widget.NumberPicker_Methods*
|android.widget.NumberPicker.computeScroll()|
|android.widget.NumberPicker.computeVerticalScrollExtent()|
|android.widget.NumberPicker.computeVerticalScrollOffset()|
|android.widget.NumberPicker.computeVerticalScrollRange()|
|android.widget.NumberPicker.dispatchHoverEvent(MotionEvent)|
|android.widget.NumberPicker.dispatchKeyEvent(KeyEvent)|
|android.widget.NumberPicker.dispatchTouchEvent(MotionEvent)|
|android.widget.NumberPicker.dispatchTrackballEvent(MotionEvent)|
|android.widget.NumberPicker.getAccessibilityNodeProvider()|
|android.widget.NumberPicker.getBottomFadingEdgeStrength()|
|android.widget.NumberPicker.getDisplayedValues()|Gets the values to be display
|android.widget.NumberPicker.getMaxValue()|Returns the max value of the picker.
|android.widget.NumberPicker.getMinValue()|Returns the min value of the picker.
|android.widget.NumberPicker.getSolidColor()|
|android.widget.NumberPicker.getTopFadingEdgeStrength()|
|android.widget.NumberPicker.getTwoDigitFormatter()|
|android.widget.NumberPicker.getValue()|Returns the value of the picker.
|android.widget.NumberPicker.getWrapSelectorWheel()|Gets whether the selector w
|android.widget.NumberPicker.onDetachedFromWindow()|
|android.widget.NumberPicker.onDraw(Canvas)|
|android.widget.NumberPicker.onInitializeAccessibilityEvent(AccessibilityEvent)|
|android.widget.NumberPicker.onInterceptTouchEvent(MotionEvent)|
|android.widget.NumberPicker.onLayout(boolean,int,int,int,int)|
|android.widget.NumberPicker.onMeasure(int,int)|
|android.widget.NumberPicker.onTouchEvent(MotionEvent)|
|android.widget.NumberPicker.scrollBy(int,int)|
|android.widget.NumberPicker.setDisplayedValues(String[])|Sets the values to be
|android.widget.NumberPicker.setEnabled(boolean)|
|android.widget.NumberPicker.setFormatter(NumberPicker.Formatter)|Set the forma
|android.widget.NumberPicker.setMaxValue(int)|Sets the max value of the picker.
|android.widget.NumberPicker.setMinValue(int)|Sets the min value of the picker.
|android.widget.NumberPicker.setOnLongPressUpdateInterval(long)|Sets the speed 
|android.widget.NumberPicker.setOnScrollListener(NumberPicker.OnScrollListener)|
|android.widget.NumberPicker.setOnValueChangedListener(NumberPicker.OnValueChangeListener)|
|android.widget.NumberPicker.setValue(int)|Set the current value for the number
|android.widget.NumberPicker.setWrapSelectorWheel(boolean)|Sets whether the sel

*android.widget.NumberPicker_Description*

A widget that enables the user to select a number form a predefined range. 
There are two flavors of this widget and which one is presented to the user 
depends on the current theme. 

If the current theme is derived from (|android.R.style|) the widget presents 
the current value as an editable input field with an increment button above and 
a decrement button below. Long pressing the buttons allows for a quick change 
of the current value. Tapping on the input field allows to type in a desired 
value. 

If the current theme is derived from (|android.R.style|) or (|android.R.style|) 
the widget presents the current value as an editable input field with a lesser 
value above and a greater value below. Tapping on the lesser or greater value 
selects it by animating the number axis up or down to make the chosen value 
current. Flinging up or down allows for multiple increments or decrements of 
the current value. Long pressing on the lesser and greater values also allows 
for a quick change of the current value. Tapping on the current value allows to 
type in a desired value. 



For an example of using this widget, see (|android.widget.TimePicker|) . 



*android.widget.NumberPicker(Context)*

public NumberPicker(android.content.Context context)

Create a new number picker. 

    context - The application environment. 

*android.widget.NumberPicker(Context,AttributeSet)*

public NumberPicker(
  android.content.Context context,
  android.util.AttributeSet attrs)

Create a new number picker. 

    context - The application environment. 
    attrs - A collection of attributes. 

*android.widget.NumberPicker(Context,AttributeSet,int)*

public NumberPicker(
  android.content.Context context,
  android.util.AttributeSet attrs,
  int defStyle)

Create a new number picker 

    context - the application environment. 
    attrs - a collection of attributes. 
    defStyle - The default style to apply to this view. 

*android.widget.NumberPicker.computeScroll()*

public void computeScroll()





*android.widget.NumberPicker.computeVerticalScrollExtent()*

protected int computeVerticalScrollExtent()





*android.widget.NumberPicker.computeVerticalScrollOffset()*

protected int computeVerticalScrollOffset()





*android.widget.NumberPicker.computeVerticalScrollRange()*

protected int computeVerticalScrollRange()





*android.widget.NumberPicker.dispatchHoverEvent(MotionEvent)*

protected boolean dispatchHoverEvent(android.view.MotionEvent event)





*android.widget.NumberPicker.dispatchKeyEvent(KeyEvent)*

public boolean dispatchKeyEvent(android.view.KeyEvent event)





*android.widget.NumberPicker.dispatchTouchEvent(MotionEvent)*

public boolean dispatchTouchEvent(android.view.MotionEvent event)





*android.widget.NumberPicker.dispatchTrackballEvent(MotionEvent)*

public boolean dispatchTrackballEvent(android.view.MotionEvent event)





*android.widget.NumberPicker.getAccessibilityNodeProvider()*

public |android.view.accessibility.AccessibilityNodeProvider| getAccessibilityNodeProvider()





*android.widget.NumberPicker.getBottomFadingEdgeStrength()*

protected float getBottomFadingEdgeStrength()





*android.widget.NumberPicker.getDisplayedValues()*

public |java.lang.String|[] getDisplayedValues()

Gets the values to be displayed instead of string values. 



    Returns: The displayed values. 

*android.widget.NumberPicker.getMaxValue()*

public int getMaxValue()

Returns the max value of the picker. 



    Returns: The max value. 

*android.widget.NumberPicker.getMinValue()*

public int getMinValue()

Returns the min value of the picker. 



    Returns: The min value 

*android.widget.NumberPicker.getSolidColor()*

public int getSolidColor()





*android.widget.NumberPicker.getTopFadingEdgeStrength()*

protected float getTopFadingEdgeStrength()





*android.widget.NumberPicker.getTwoDigitFormatter()*

public static final |android.widget.NumberPicker.Formatter| getTwoDigitFormatter()





*android.widget.NumberPicker.getValue()*

public int getValue()

Returns the value of the picker. 



    Returns: 

*android.widget.NumberPicker.getWrapSelectorWheel()*

public boolean getWrapSelectorWheel()

Gets whether the selector wheel wraps when reaching the min/max value. 



    Returns: True if the selector wheel wraps. 

*android.widget.NumberPicker.onDetachedFromWindow()*

protected void onDetachedFromWindow()





*android.widget.NumberPicker.onDraw(Canvas)*

protected void onDraw(Canvas canvas)





*android.widget.NumberPicker.onInitializeAccessibilityEvent(AccessibilityEvent)*

public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent event)





*android.widget.NumberPicker.onInterceptTouchEvent(MotionEvent)*

public boolean onInterceptTouchEvent(android.view.MotionEvent event)





*android.widget.NumberPicker.onLayout(boolean,int,int,int,int)*

protected void onLayout(
  boolean changed,
  int left,
  int top,
  int right,
  int bottom)





*android.widget.NumberPicker.onMeasure(int,int)*

protected void onMeasure(
  int widthMeasureSpec,
  int heightMeasureSpec)





*android.widget.NumberPicker.onTouchEvent(MotionEvent)*

public boolean onTouchEvent(android.view.MotionEvent event)





*android.widget.NumberPicker.scrollBy(int,int)*

public void scrollBy(
  int x,
  int y)





*android.widget.NumberPicker.setDisplayedValues(String[])*

public void setDisplayedValues(java.lang.String[] displayedValues)

Sets the values to be displayed. 


    displayedValues - The displayed values. 

Note: The length of the displayed values array must be equal to the range of 
       selectable numbers which is equal to {@link #getMaxValue()} - {@link 
       #getMinValue()} + 1. 

*android.widget.NumberPicker.setEnabled(boolean)*

public void setEnabled(boolean enabled)





*android.widget.NumberPicker.setFormatter(NumberPicker.Formatter)*

public void setFormatter(android.widget.NumberPicker.Formatter formatter)

Set the formatter to be used for formatting the current value. 

Note: If you have provided alternative values for the values this formatter is 
never invoked. 


    formatter - The formatter object. If formatter is null, {@link String#valueOf(int)} will be 
       used. 

*android.widget.NumberPicker.setMaxValue(int)*

public void setMaxValue(int maxValue)

Sets the max value of the picker. 


    maxValue - The max value inclusive. 

Note: The length of the displayed values array set via {@link 
       #setDisplayedValues(String[])} must be equal to the range of selectable 
       numbers which is equal to {@link #getMaxValue()} - {@link 
       #getMinValue()} + 1. 

*android.widget.NumberPicker.setMinValue(int)*

public void setMinValue(int minValue)

Sets the min value of the picker. 


    minValue - The min value inclusive. 

Note: The length of the displayed values array set via {@link 
       #setDisplayedValues(String[])} must be equal to the range of selectable 
       numbers which is equal to {@link #getMaxValue()} - {@link 
       #getMinValue()} + 1. 

*android.widget.NumberPicker.setOnLongPressUpdateInterval(long)*

public void setOnLongPressUpdateInterval(long intervalMillis)

Sets the speed at which the numbers be incremented and decremented when the up 
and down buttons are long pressed respectively. 

The default value is 300 ms. 


    intervalMillis - The speed (in milliseconds) at which the numbers will be incremented and 
       decremented. 

*android.widget.NumberPicker.setOnScrollListener(NumberPicker.OnScrollListener)*

public void setOnScrollListener(android.widget.NumberPicker.OnScrollListener onScrollListener)

Set listener to be notified for scroll state changes. 


    onScrollListener - The listener. 

*android.widget.NumberPicker.setOnValueChangedListener(NumberPicker.OnValueChangeListener)*

public void setOnValueChangedListener(android.widget.NumberPicker.OnValueChangeListener onValueChangedListener)

Sets the listener to be notified on change of the current value. 


    onValueChangedListener - The listener. 

*android.widget.NumberPicker.setValue(int)*

public void setValue(int value)

Set the current value for the number picker. 

If the argument is less than the (|android.widget.NumberPicker|) and 
(|android.widget.NumberPicker|) is false the current value is set to the 
(|android.widget.NumberPicker|) value. 

If the argument is less than the (|android.widget.NumberPicker|) and 
(|android.widget.NumberPicker|) is true the current value is set to the 
(|android.widget.NumberPicker|) value. 

If the argument is less than the (|android.widget.NumberPicker|) and 
(|android.widget.NumberPicker|) is false the current value is set to the 
(|android.widget.NumberPicker|) value. 

If the argument is less than the (|android.widget.NumberPicker|) and 
(|android.widget.NumberPicker|) is true the current value is set to the 
(|android.widget.NumberPicker|) value. 


    value - The current value. 

*android.widget.NumberPicker.setWrapSelectorWheel(boolean)*

public void setWrapSelectorWheel(boolean wrapSelectorWheel)

Sets whether the selector wheel shown during flinging/scrolling should wrap 
around the (|android.widget.NumberPicker|) and (|android.widget.NumberPicker|) 
values. 

By default if the range (max - min) is more than the number of items shown on 
the selector wheel the selector wheel wrapping is enabled. 

Note: If the number of items, i.e. the range ( (|android.widget.NumberPicker|) 
- (|android.widget.NumberPicker|) ) is less than the number of items shown on 
the selector wheel, the selector wheel will not wrap. Hence, in such a case 
calling this method is a NOP. 


    wrapSelectorWheel - Whether to wrap. 


