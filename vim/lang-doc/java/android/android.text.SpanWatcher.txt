*android.text.SpanWatcher* *SpanWatcher* When an object of this type is attached

public interface interface SpanWatcher

  implements |android.text.NoCopySpan|

|android.text.SpanWatcher_Description|
|android.text.SpanWatcher_Fields|
|android.text.SpanWatcher_Constructors|
|android.text.SpanWatcher_Methods|

================================================================================

*android.text.SpanWatcher_Methods*
|android.text.SpanWatcher.onSpanAdded(Spannable,Object,int,int)|This method is 
|android.text.SpanWatcher.onSpanChanged(Spannable,Object,int,int,int,int)|This 
|android.text.SpanWatcher.onSpanRemoved(Spannable,Object,int,int)|This method i

*android.text.SpanWatcher_Description*

When an object of this type is attached to a Spannable, its methods will be 
called to notify it that other markup objects have been added, changed, or 
removed. 



*android.text.SpanWatcher.onSpanAdded(Spannable,Object,int,int)*

public void onSpanAdded(
  android.text.Spannable text,
  java.lang.Object what,
  int start,
  int end)

This method is called to notify you that the specified object has been attached 
to the specified range of the text. 



*android.text.SpanWatcher.onSpanChanged(Spannable,Object,int,int,int,int)*

public void onSpanChanged(
  android.text.Spannable text,
  java.lang.Object what,
  int ostart,
  int oend,
  int nstart,
  int nend)

This method is called to notify you that the specified object has been 
relocated from the range ostartoend to the new range nstartnend of the text. 



*android.text.SpanWatcher.onSpanRemoved(Spannable,Object,int,int)*

public void onSpanRemoved(
  android.text.Spannable text,
  java.lang.Object what,
  int start,
  int end)

This method is called to notify you that the specified object has been detached 
from the specified range of the text. 




