*android.inputmethodservice.ExtractEditText* *ExtractEditText* Specialization of

public class ExtractEditText
  extends    |android.widget.EditText|

|android.inputmethodservice.ExtractEditText_Description|
|android.inputmethodservice.ExtractEditText_Fields|
|android.inputmethodservice.ExtractEditText_Constructors|
|android.inputmethodservice.ExtractEditText_Methods|

================================================================================

*android.inputmethodservice.ExtractEditText_Constructors*
|android.inputmethodservice.ExtractEditText(Context)|
|android.inputmethodservice.ExtractEditText(Context,AttributeSet)|
|android.inputmethodservice.ExtractEditText(Context,AttributeSet,int)|

*android.inputmethodservice.ExtractEditText_Methods*
|android.inputmethodservice.ExtractEditText.deleteText_internal(int,int)|
|android.inputmethodservice.ExtractEditText.finishInternalChanges()|Finish maki
|android.inputmethodservice.ExtractEditText.hasFocus()|Pretend like this view a
|android.inputmethodservice.ExtractEditText.hasVerticalScrollBar()|Return true 
|android.inputmethodservice.ExtractEditText.hasWindowFocus()|Pretend like the w
|android.inputmethodservice.ExtractEditText.isFocused()|Pretend like this view 
|android.inputmethodservice.ExtractEditText.isInputMethodTarget()|We are always
|android.inputmethodservice.ExtractEditText.onSelectionChanged(int,int)|Report 
|android.inputmethodservice.ExtractEditText.onTextContextMenuItem(int)|
|android.inputmethodservice.ExtractEditText.performClick()|Redirect clicks to t
|android.inputmethodservice.ExtractEditText.replaceText_internal(int,int,CharSequence)|
|android.inputmethodservice.ExtractEditText.setCursorPosition_internal(int,int)|
|android.inputmethodservice.ExtractEditText.setExtractedText(ExtractedText)|Imp
|android.inputmethodservice.ExtractEditText.setSpan_internal(Object,int,int,int)|
|android.inputmethodservice.ExtractEditText.startInternalChanges()|Start making
|android.inputmethodservice.ExtractEditText.viewClicked(InputMethodManager)|

*android.inputmethodservice.ExtractEditText_Description*

Specialization of (|android.widget.EditText|) for showing and interacting with 
the extracted text in a full-screen input method. 



*android.inputmethodservice.ExtractEditText(Context)*

public ExtractEditText(android.content.Context context)




*android.inputmethodservice.ExtractEditText(Context,AttributeSet)*

public ExtractEditText(
  android.content.Context context,
  android.util.AttributeSet attrs)




*android.inputmethodservice.ExtractEditText(Context,AttributeSet,int)*

public ExtractEditText(
  android.content.Context context,
  android.util.AttributeSet attrs,
  int defStyle)




*android.inputmethodservice.ExtractEditText.deleteText_internal(int,int)*

protected void deleteText_internal(
  int start,
  int end)





*android.inputmethodservice.ExtractEditText.finishInternalChanges()*

public void finishInternalChanges()

Finish making changes that will not be reported to the client. That is, 
(|android.inputmethodservice.ExtractEditText|) will not result in sending the 
new selection to the client 



*android.inputmethodservice.ExtractEditText.hasFocus()*

public boolean hasFocus()

Pretend like this view always has focus, so its highlight and cursor will be 
displayed. 



*android.inputmethodservice.ExtractEditText.hasVerticalScrollBar()*

public boolean hasVerticalScrollBar()

Return true if the edit text is currently showing a scroll bar. 



*android.inputmethodservice.ExtractEditText.hasWindowFocus()*

public boolean hasWindowFocus()

Pretend like the window this view is in always has focus, so its highlight and 
cursor will be displayed. 



*android.inputmethodservice.ExtractEditText.isFocused()*

public boolean isFocused()

Pretend like this view always has focus, so its highlight and cursor will be 
displayed. 



*android.inputmethodservice.ExtractEditText.isInputMethodTarget()*

public boolean isInputMethodTarget()

We are always considered to be an input method target. 



*android.inputmethodservice.ExtractEditText.onSelectionChanged(int,int)*

protected void onSelectionChanged(
  int selStart,
  int selEnd)

Report to the underlying text editor about selection changes. 



*android.inputmethodservice.ExtractEditText.onTextContextMenuItem(int)*

public boolean onTextContextMenuItem(int id)





*android.inputmethodservice.ExtractEditText.performClick()*

public boolean performClick()

Redirect clicks to the IME for handling there. First allows any on click 
handler to run, though. 



*android.inputmethodservice.ExtractEditText.replaceText_internal(int,int,CharSequence)*

protected void replaceText_internal(
  int start,
  int end,
  java.lang.CharSequence text)





*android.inputmethodservice.ExtractEditText.setCursorPosition_internal(int,int)*

protected void setCursorPosition_internal(
  int start,
  int end)





*android.inputmethodservice.ExtractEditText.setExtractedText(ExtractedText)*

public void setExtractedText(android.view.inputmethod.ExtractedText text)

Implement just to keep track of when we are setting text from the client (vs. 
seeing changes in ourself from the user). 



*android.inputmethodservice.ExtractEditText.setSpan_internal(Object,int,int,int)*

protected void setSpan_internal(
  java.lang.Object span,
  int start,
  int end,
  int flags)





*android.inputmethodservice.ExtractEditText.startInternalChanges()*

public void startInternalChanges()

Start making changes that will not be reported to the client. That is, 
(|android.inputmethodservice.ExtractEditText|) will not result in sending the 
new selection to the client 



*android.inputmethodservice.ExtractEditText.viewClicked(InputMethodManager)*

protected void viewClicked(android.view.inputmethod.InputMethodManager imm)






