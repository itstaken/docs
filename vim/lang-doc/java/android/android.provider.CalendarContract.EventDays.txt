*android.provider.CalendarContract.EventDays* *CalendarContract.EventDays* Field

public static final class CalendarContract.EventDays
  extends    |java.lang.Object|
  implements |android.provider.CalendarContract.EventDaysColumns|

|android.provider.CalendarContract.EventDays_Description|
|android.provider.CalendarContract.EventDays_Fields|
|android.provider.CalendarContract.EventDays_Constructors|
|android.provider.CalendarContract.EventDays_Methods|

================================================================================

*android.provider.CalendarContract.EventDays_Fields*
|android.net.Uri_android.provider.CalendarContract.EventDays.CONTENT_URI|

*android.provider.CalendarContract.EventDays_Methods*
|android.provider.CalendarContract.EventDays.query(ContentResolver,int,int,String[])|

*android.provider.CalendarContract.EventDays_Description*

Fields and helpers for querying for a list of days that contain events. 



*android.net.Uri_android.provider.CalendarContract.EventDays.CONTENT_URI*





*android.provider.CalendarContract.EventDays.query(ContentResolver,int,int,String[])*

public static final |android.database.Cursor| query(
  android.content.ContentResolver cr,
  int startDay,
  int numDays,
  java.lang.String[] projection)

Retrieves the days with events for the Julian days starting at "startDay" for 
"numDays". It returns a cursor containing startday and endday representing the 
max range of days for all events beginning on each startday.This is a blocking 
function and should not be done on the UI thread. 


    cr - the ContentResolver 
    startDay - the first Julian day in the range 
    numDays - the number of days to load (must be at least 1) 
    projection - the columns to return in the cursor 

    Returns: a database cursor containing a list of start and end days for events 


