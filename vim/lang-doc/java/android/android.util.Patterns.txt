*android.util.Patterns* *Patterns* Commonly used regular expression patterns.

public class Patterns
  extends    |java.lang.Object|

|android.util.Patterns_Description|
|android.util.Patterns_Fields|
|android.util.Patterns_Constructors|
|android.util.Patterns_Methods|

================================================================================

*android.util.Patterns_Fields*
|java.util.regex.Pattern_android.util.Patterns.DOMAIN_NAME|
|java.util.regex.Pattern_android.util.Patterns.EMAIL_ADDRESS|
|java.lang.String_android.util.Patterns.GOOD_IRI_CHAR|
|java.util.regex.Pattern_android.util.Patterns.IP_ADDRESS|
|java.util.regex.Pattern_android.util.Patterns.PHONE|
|java.util.regex.Pattern_android.util.Patterns.TOP_LEVEL_DOMAIN|
|java.lang.String_android.util.Patterns.TOP_LEVEL_DOMAIN_STR|
|java.lang.String_android.util.Patterns.TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL|
|java.util.regex.Pattern_android.util.Patterns.WEB_URL|

*android.util.Patterns_Methods*
|android.util.Patterns.concatGroups(Matcher)|Convenience method to take all of 
|android.util.Patterns.digitsAndPlusOnly(Matcher)|Convenience method to return 

*android.util.Patterns_Description*

Commonly used regular expression patterns. 



*java.util.regex.Pattern_android.util.Patterns.DOMAIN_NAME*




*java.util.regex.Pattern_android.util.Patterns.EMAIL_ADDRESS*




*java.lang.String_android.util.Patterns.GOOD_IRI_CHAR*

Good characters for Internationalized Resource Identifiers (IRI). This 
comprises most common used Unicode characters allowed in IRI as detailed in RFC 
3987. Specifically, those two byte Unicode characters are not included. 


*java.util.regex.Pattern_android.util.Patterns.IP_ADDRESS*




*java.util.regex.Pattern_android.util.Patterns.PHONE*

This pattern is intended for searching for things that look like they might be 
phone numbers in arbitrary text, not for validating whether something is in 
fact a phone number. It will miss many things that are legitimate phone 
numbers. 

The pattern matches the following: 

Optionally, a + sign followed immediately by one or more digits. Spaces, dots, 
or dashes may follow. Optionally, sets of digits in parentheses, separated by 
spaces, dots, or dashes. A string starting and ending with a digit, containing 
digits, spaces, dots, and/or dashes. 


*java.util.regex.Pattern_android.util.Patterns.TOP_LEVEL_DOMAIN*

Regular expression pattern to match all IANA top-level domains. 


*java.lang.String_android.util.Patterns.TOP_LEVEL_DOMAIN_STR*

Regular expression to match all IANA top-level domains. List accurate as of 
2011/07/18. List taken from: http://data.iana.org/TLD/tlds-alpha-by-domain.txt 
This pattern is auto-generated by 
frameworks/ex/common/tools/make-iana-tld-pattern.py 


*java.lang.String_android.util.Patterns.TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL*

Regular expression to match all IANA top-level domains for WEB_URL. List 
accurate as of 2011/07/18. List taken from: 
http://data.iana.org/TLD/tlds-alpha-by-domain.txt This pattern is 
auto-generated by frameworks/ex/common/tools/make-iana-tld-pattern.py 


*java.util.regex.Pattern_android.util.Patterns.WEB_URL*

Regular expression pattern to match most part of RFC 3987 Internationalized 
URLs, aka IRIs. Commonly used Unicode characters are added. 



*android.util.Patterns.concatGroups(Matcher)*

public static final |java.lang.String| concatGroups(java.util.regex.Matcher matcher)

Convenience method to take all of the non-null matching groups in a regex 
Matcher and return them as a concatenated string. 


    matcher - The Matcher object from which grouped text will be extracted 

    Returns: A String comprising all of the non-null matched groups concatenated together 

*android.util.Patterns.digitsAndPlusOnly(Matcher)*

public static final |java.lang.String| digitsAndPlusOnly(java.util.regex.Matcher matcher)

Convenience method to return only the digits and plus signs in the matching 
string. 


    matcher - The Matcher object from which digits and plus will be extracted 

    Returns: A String comprising all of the digits and plus in the match 


