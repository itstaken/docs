*android.database.sqlite.SQLiteConnectionPool* *SQLiteConnectionPool* Maintains 

public final class SQLiteConnectionPool
  extends    |java.lang.Object|
  implements |java.io.Closeable|

|android.database.sqlite.SQLiteConnectionPool_Description|
|android.database.sqlite.SQLiteConnectionPool_Fields|
|android.database.sqlite.SQLiteConnectionPool_Constructors|
|android.database.sqlite.SQLiteConnectionPool_Methods|

================================================================================

*android.database.sqlite.SQLiteConnectionPool_Fields*
|int_android.database.sqlite.SQLiteConnectionPool.CONNECTION_FLAG_INTERACTIVE|
|int_android.database.sqlite.SQLiteConnectionPool.CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY|
|int_android.database.sqlite.SQLiteConnectionPool.CONNECTION_FLAG_READ_ONLY|

*android.database.sqlite.SQLiteConnectionPool_Methods*
|android.database.sqlite.SQLiteConnectionPool.acquireConnection(String,int,CancellationSignal)|
|android.database.sqlite.SQLiteConnectionPool.close()|Closes the connection poo
|android.database.sqlite.SQLiteConnectionPool.collectDbStats(ArrayList<SQLiteDebug.DbStats>)|
|android.database.sqlite.SQLiteConnectionPool.dump(Printer,boolean)|Dumps debug
|android.database.sqlite.SQLiteConnectionPool.finalize()|
|android.database.sqlite.SQLiteConnectionPool.open(SQLiteDatabaseConfiguration)|
|android.database.sqlite.SQLiteConnectionPool.reconfigure(SQLiteDatabaseConfiguration)|
|android.database.sqlite.SQLiteConnectionPool.releaseConnection(SQLiteConnection)|
|android.database.sqlite.SQLiteConnectionPool.shouldYieldConnection(SQLiteConnection,int)|
|android.database.sqlite.SQLiteConnectionPool.toString()|

*android.database.sqlite.SQLiteConnectionPool_Description*

Maintains a pool of active SQLite database connections. 

At any given time, a connection is either owned by the pool, or it has been 
acquired by a (|android.database.sqlite.SQLiteSession|) . When the 
(|android.database.sqlite.SQLiteSession|) is finished with the connection it is 
using, it must return the connection back to the pool. 

The pool holds strong references to the connections it owns. However, it only 
holds weak references to the connections that sessions have acquired from it. 
Using weak references in the latter case ensures that the connection pool can 
detect when connections have been improperly abandoned so that it can create 
new connections to replace them if needed. 

The connection pool is thread-safe (but the connections themselves are not). 

Exception safety 

This code attempts to maintain the invariant that opened connections are always 
owned. Unfortunately that means it needs to handle exceptions all over to 
ensure that broken connections get cleaned up. Most operations invokving SQLite 
can throw (|android.database.sqlite.SQLiteException|) or other runtime 
exceptions. This is a bit of a pain to deal with because the compiler cannot 
help us catch missing exception handling code. 

The general rule for this file: If we are making calls out to 
(|android.database.sqlite.SQLiteConnection|) then we must be prepared to handle 
any runtime exceptions it might throw at us. Note that out-of-memory is an 
(|java.lang.Error|) , not a (|java.lang.RuntimeException|) . We don't trouble 
ourselves handling out of memory because it is hard to do anything at all 
sensible then and most likely the VM is about to crash. 



*int_android.database.sqlite.SQLiteConnectionPool.CONNECTION_FLAG_INTERACTIVE*

Connection flag: Connection is being used interactively. 

This flag indicates that the connection is needed by the UI thread. The 
connection pool can use this flag to elevate the priority of the database 
connection request. 


*int_android.database.sqlite.SQLiteConnectionPool.CONNECTION_FLAG_PRIMARY_CONNECTION_AFFINITY*

Connection flag: Primary connection affinity. 

This flag indicates that the primary connection is required. This flag helps 
support legacy applications that expect most data modifying operations to be 
serialized by locking the primary database connection. Setting this flag 
essentially implements the old "db lock" concept by preventing an operation 
from being performed until it can obtain exclusive access to the primary 
connection. 


*int_android.database.sqlite.SQLiteConnectionPool.CONNECTION_FLAG_READ_ONLY*

Connection flag: Read-only. 

This flag indicates that the connection will only be used to perform read-only 
operations. 



*android.database.sqlite.SQLiteConnectionPool.acquireConnection(String,int,CancellationSignal)*

public |android.database.sqlite.SQLiteConnection| acquireConnection(
  java.lang.String sql,
  int connectionFlags,
  android.os.CancellationSignal cancellationSignal)

Acquires a connection from the pool. 

The caller must call (|android.database.sqlite.SQLiteConnectionPool|) to 
release the connection back to the pool when it is finished. Failure to do so 
will result in much unpleasantness. 


    sql - If not null, try to find a connection that already has the specified SQL 
       statement in its prepared statement cache. 
    connectionFlags - The connection request flags. 
    cancellationSignal - A signal to cancel the operation in progress, or null if none. 

    Returns: The connection that was acquired, never null. 

*android.database.sqlite.SQLiteConnectionPool.close()*

public void close()

Closes the connection pool. 

When the connection pool is closed, it will refuse all further requests to 
acquire connections. All connections that are currently available in the pool 
are closed immediately. Any connections that are still in use will be closed as 
soon as they are returned to the pool. 



*android.database.sqlite.SQLiteConnectionPool.collectDbStats(ArrayList<SQLiteDebug.DbStats>)*

public void collectDbStats(java.util.ArrayList<android.database.sqlite.SQLiteDebug.DbStats> dbStatsList)

Collects statistics about database connection memory usage. 


    dbStatsList - The list to populate. 

*android.database.sqlite.SQLiteConnectionPool.dump(Printer,boolean)*

public void dump(
  android.util.Printer printer,
  boolean verbose)

Dumps debugging information about this connection pool. 


    printer - The printer to receive the dump, not null. 
    verbose - True to dump more verbose information. 

*android.database.sqlite.SQLiteConnectionPool.finalize()*

protected void finalize()
  throws |java.lang.Throwable|
         




*android.database.sqlite.SQLiteConnectionPool.open(SQLiteDatabaseConfiguration)*

public static |android.database.sqlite.SQLiteConnectionPool| open(android.database.sqlite.SQLiteDatabaseConfiguration configuration)

Opens a connection pool for the specified database. 


    configuration - The database configuration. 

    Returns: The connection pool. 

*android.database.sqlite.SQLiteConnectionPool.reconfigure(SQLiteDatabaseConfiguration)*

public void reconfigure(android.database.sqlite.SQLiteDatabaseConfiguration configuration)

Reconfigures the database configuration of the connection pool and all of its 
connections. 

Configuration changes are propagated down to connections immediately if they 
are available or as soon as they are released. This includes changes that 
affect the size of the pool. 


    configuration - The new configuration. 

*android.database.sqlite.SQLiteConnectionPool.releaseConnection(SQLiteConnection)*

public void releaseConnection(android.database.sqlite.SQLiteConnection connection)

Releases a connection back to the pool. 

It is ok to call this method after the pool has closed, to release connections 
that were still in use at the time of closure. 


    connection - The connection to release. Must not be null. 

*android.database.sqlite.SQLiteConnectionPool.shouldYieldConnection(SQLiteConnection,int)*

public boolean shouldYieldConnection(
  android.database.sqlite.SQLiteConnection connection,
  int connectionFlags)

Returns true if the session should yield the connection due to contention over 
available database connections. 


    connection - The connection owned by the session. 
    connectionFlags - The connection request flags. 

    Returns: True if the session should yield its connection. 

*android.database.sqlite.SQLiteConnectionPool.toString()*

public |java.lang.String| toString()






