*android.os.UpdateLock* *UpdateLock* Advisory wakelock-like mechanism by which p

public class UpdateLock
  extends    |java.lang.Object|

|android.os.UpdateLock_Description|
|android.os.UpdateLock_Fields|
|android.os.UpdateLock_Constructors|
|android.os.UpdateLock_Methods|

================================================================================

*android.os.UpdateLock_Fields*
|java.lang.String_android.os.UpdateLock.NOW_IS_CONVENIENT|
|java.lang.String_android.os.UpdateLock.TIMESTAMP|
|java.lang.String_android.os.UpdateLock.UPDATE_LOCK_CHANGED|

*android.os.UpdateLock_Constructors*
|android.os.UpdateLock(String)|Construct an UpdateLock instance.

*android.os.UpdateLock_Methods*
|android.os.UpdateLock.acquire()|Acquire an update lock.
|android.os.UpdateLock.finalize()|
|android.os.UpdateLock.isHeld()|Is this lock currently held?
|android.os.UpdateLock.release()|Release this update lock.
|android.os.UpdateLock.setReferenceCounted(boolean)|Change the refcount behavio

*android.os.UpdateLock_Description*

Advisory wakelock-like mechanism by which processes that should not be 
interrupted for OTA/update purposes can so advise the OS. This is particularly 
relevant for headless or kiosk-like operation. 



*java.lang.String_android.os.UpdateLock.NOW_IS_CONVENIENT*

Boolean Intent extra on the UPDATE_LOCK_CHANGED sticky broadcast, indicating 
whether now is an appropriate time to interrupt device activity with an update 
operation. True means that updates are okay right now; false indicates that 
perhaps later would be a better time. 


*java.lang.String_android.os.UpdateLock.TIMESTAMP*

Long Intent extra on the UPDATE_LOCK_CHANGED sticky broadcast, marking the 
wall-clock time [in UTC] at which the broadcast was sent. Note that this is in 
the System.currentTimeMillis() time base, which may be non-monotonic especially 
around reboots. 


*java.lang.String_android.os.UpdateLock.UPDATE_LOCK_CHANGED*

Broadcast Intent action sent when the global update lock state changes, i.e. 
when the first locker acquires an update lock, or when the last locker releases 
theirs. The broadcast is sticky but is sent only to registered receivers. 



*android.os.UpdateLock(String)*

public UpdateLock(java.lang.String tag)

Construct an UpdateLock instance. 

    tag - An arbitrary string used to identify this lock instance in dump output. 

*android.os.UpdateLock.acquire()*

public void acquire()

Acquire an update lock. 



*android.os.UpdateLock.finalize()*

protected void finalize()
  throws |java.lang.Throwable|
         




*android.os.UpdateLock.isHeld()*

public boolean isHeld()

Is this lock currently held? 



*android.os.UpdateLock.release()*

public void release()

Release this update lock. 



*android.os.UpdateLock.setReferenceCounted(boolean)*

public void setReferenceCounted(boolean isRefCounted)

Change the refcount behavior of this update lock. 




