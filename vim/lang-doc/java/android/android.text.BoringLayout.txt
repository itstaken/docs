*android.text.BoringLayout* *BoringLayout* A BoringLayout is a very simple Layou

public class BoringLayout
  extends    |android.text.Layout|
  implements |android.text.TextUtils.EllipsizeCallback|

|android.text.BoringLayout_Description|
|android.text.BoringLayout_Fields|
|android.text.BoringLayout_Constructors|
|android.text.BoringLayout_Methods|

================================================================================

*android.text.BoringLayout_Constructors*
|android.text.BoringLayout(CharSequence,TextPaint,int,Layout.Alignment,float,float,BoringLayout.Metrics,boolean)|
|android.text.BoringLayout(CharSequence,TextPaint,int,Layout.Alignment,float,float,BoringLayout.Metrics,boolean,TextUtils.TruncateAt,int)|

*android.text.BoringLayout_Methods*
|android.text.BoringLayout.draw(Canvas,Path,Paint,int)|
|android.text.BoringLayout.ellipsized(int,int)|Callback for the ellipsizer to r
|android.text.BoringLayout.getBottomPadding()|
|android.text.BoringLayout.getEllipsisCount(int)|
|android.text.BoringLayout.getEllipsisStart(int)|
|android.text.BoringLayout.getEllipsizedWidth()|
|android.text.BoringLayout.getHeight()|
|android.text.BoringLayout.getLineContainsTab(int)|
|android.text.BoringLayout.getLineCount()|
|android.text.BoringLayout.getLineDescent(int)|
|android.text.BoringLayout.getLineDirections(int)|
|android.text.BoringLayout.getLineMax(int)|
|android.text.BoringLayout.getLineStart(int)|
|android.text.BoringLayout.getLineTop(int)|
|android.text.BoringLayout.getParagraphDirection(int)|
|android.text.BoringLayout.getTopPadding()|
|android.text.BoringLayout.isBoring(CharSequence,TextPaint)|Returns null if not
|android.text.BoringLayout.isBoring(CharSequence,TextPaint,BoringLayout.Metrics)|
|android.text.BoringLayout.isBoring(CharSequence,TextPaint,TextDirectionHeuristic)|
|android.text.BoringLayout.isBoring(CharSequence,TextPaint,TextDirectionHeuristic,BoringLayout.Metrics)|
|android.text.BoringLayout.make(CharSequence,TextPaint,int,Layout.Alignment,float,float,BoringLayout.Metrics,boolean)|
|android.text.BoringLayout.make(CharSequence,TextPaint,int,Layout.Alignment,float,float,BoringLayout.Metrics,boolean,TextUtils.TruncateAt,int)|
|android.text.BoringLayout.replaceOrMake(CharSequence,TextPaint,int,Layout.Alignment,float,float,BoringLayout.Metrics,boolean)|
|android.text.BoringLayout.replaceOrMake(CharSequence,TextPaint,int,Layout.Alignment,float,float,BoringLayout.Metrics,boolean,TextUtils.TruncateAt,int)|

*android.text.BoringLayout_Description*

A BoringLayout is a very simple Layout implementation for text that fits on a 
single line and is all left-to-right characters. You will probably never want 
to make one of these yourself; if you do, be sure to call 
(|android.text.BoringLayout|) first to make sure the text meets the criteria. 
This class is used by widgets to control text layout. You should not need to 
use this class directly unless you are implementing your own widget or custom 
display object, in which case you are encouraged to use a Layout instead of 
calling Canvas.drawText()(|android.graphics.Canvas|) directly. 



*android.text.BoringLayout(CharSequence,TextPaint,int,Layout.Alignment,float,float,BoringLayout.Metrics,boolean)*

public BoringLayout(
  java.lang.CharSequence source,
  android.text.TextPaint paint,
  int outerwidth,
  android.text.Layout.Alignment align,
  float spacingmult,
  float spacingadd,
  android.text.BoringLayout.Metrics metrics,
  boolean includepad)




*android.text.BoringLayout(CharSequence,TextPaint,int,Layout.Alignment,float,float,BoringLayout.Metrics,boolean,TextUtils.TruncateAt,int)*

public BoringLayout(
  java.lang.CharSequence source,
  android.text.TextPaint paint,
  int outerwidth,
  android.text.Layout.Alignment align,
  float spacingmult,
  float spacingadd,
  android.text.BoringLayout.Metrics metrics,
  boolean includepad,
  android.text.TextUtils.TruncateAt ellipsize,
  int ellipsizedWidth)




*android.text.BoringLayout.draw(Canvas,Path,Paint,int)*

public void draw(
  Canvas c,
  Path highlight,
  Paint highlightpaint,
  int cursorOffset)





*android.text.BoringLayout.ellipsized(int,int)*

public void ellipsized(
  int start,
  int end)

Callback for the ellipsizer to report what region it ellipsized. 



*android.text.BoringLayout.getBottomPadding()*

public int getBottomPadding()





*android.text.BoringLayout.getEllipsisCount(int)*

public int getEllipsisCount(int line)





*android.text.BoringLayout.getEllipsisStart(int)*

public int getEllipsisStart(int line)





*android.text.BoringLayout.getEllipsizedWidth()*

public int getEllipsizedWidth()





*android.text.BoringLayout.getHeight()*

public int getHeight()





*android.text.BoringLayout.getLineContainsTab(int)*

public boolean getLineContainsTab(int line)





*android.text.BoringLayout.getLineCount()*

public int getLineCount()





*android.text.BoringLayout.getLineDescent(int)*

public int getLineDescent(int line)





*android.text.BoringLayout.getLineDirections(int)*

public final |android.text.Layout.Directions| getLineDirections(int line)





*android.text.BoringLayout.getLineMax(int)*

public float getLineMax(int line)





*android.text.BoringLayout.getLineStart(int)*

public int getLineStart(int line)





*android.text.BoringLayout.getLineTop(int)*

public int getLineTop(int line)





*android.text.BoringLayout.getParagraphDirection(int)*

public int getParagraphDirection(int line)





*android.text.BoringLayout.getTopPadding()*

public int getTopPadding()





*android.text.BoringLayout.isBoring(CharSequence,TextPaint)*

public static |android.text.BoringLayout.Metrics| isBoring(
  java.lang.CharSequence text,
  android.text.TextPaint paint)

Returns null if not boring; the width, ascent, and descent if boring. 



*android.text.BoringLayout.isBoring(CharSequence,TextPaint,BoringLayout.Metrics)*

public static |android.text.BoringLayout.Metrics| isBoring(
  java.lang.CharSequence text,
  android.text.TextPaint paint,
  android.text.BoringLayout.Metrics metrics)

Returns null if not boring; the width, ascent, and descent in the provided 
Metrics object (or a new one if the provided one was null) if boring. 



*android.text.BoringLayout.isBoring(CharSequence,TextPaint,TextDirectionHeuristic)*

public static |android.text.BoringLayout.Metrics| isBoring(
  java.lang.CharSequence text,
  android.text.TextPaint paint,
  android.text.TextDirectionHeuristic textDir)

Returns null if not boring; the width, ascent, and descent if boring. 



*android.text.BoringLayout.isBoring(CharSequence,TextPaint,TextDirectionHeuristic,BoringLayout.Metrics)*

public static |android.text.BoringLayout.Metrics| isBoring(
  java.lang.CharSequence text,
  android.text.TextPaint paint,
  android.text.TextDirectionHeuristic textDir,
  android.text.BoringLayout.Metrics metrics)

Returns null if not boring; the width, ascent, and descent in the provided 
Metrics object (or a new one if the provided one was null) if boring. 



*android.text.BoringLayout.make(CharSequence,TextPaint,int,Layout.Alignment,float,float,BoringLayout.Metrics,boolean)*

public static |android.text.BoringLayout| make(
  java.lang.CharSequence source,
  android.text.TextPaint paint,
  int outerwidth,
  android.text.Layout.Alignment align,
  float spacingmult,
  float spacingadd,
  android.text.BoringLayout.Metrics metrics,
  boolean includepad)





*android.text.BoringLayout.make(CharSequence,TextPaint,int,Layout.Alignment,float,float,BoringLayout.Metrics,boolean,TextUtils.TruncateAt,int)*

public static |android.text.BoringLayout| make(
  java.lang.CharSequence source,
  android.text.TextPaint paint,
  int outerwidth,
  android.text.Layout.Alignment align,
  float spacingmult,
  float spacingadd,
  android.text.BoringLayout.Metrics metrics,
  boolean includepad,
  android.text.TextUtils.TruncateAt ellipsize,
  int ellipsizedWidth)





*android.text.BoringLayout.replaceOrMake(CharSequence,TextPaint,int,Layout.Alignment,float,float,BoringLayout.Metrics,boolean)*

public |android.text.BoringLayout| replaceOrMake(
  java.lang.CharSequence source,
  android.text.TextPaint paint,
  int outerwidth,
  android.text.Layout.Alignment align,
  float spacingmult,
  float spacingadd,
  android.text.BoringLayout.Metrics metrics,
  boolean includepad)

Returns a BoringLayout for the specified text, potentially reusing this one if 
it is already suitable. The caller must make sure that no one is still using 
this Layout. 



*android.text.BoringLayout.replaceOrMake(CharSequence,TextPaint,int,Layout.Alignment,float,float,BoringLayout.Metrics,boolean,TextUtils.TruncateAt,int)*

public |android.text.BoringLayout| replaceOrMake(
  java.lang.CharSequence source,
  android.text.TextPaint paint,
  int outerwidth,
  android.text.Layout.Alignment align,
  float spacingmult,
  float spacingadd,
  android.text.BoringLayout.Metrics metrics,
  boolean includepad,
  android.text.TextUtils.TruncateAt ellipsize,
  int ellipsizedWidth)

Returns a BoringLayout for the specified text, potentially reusing this one if 
it is already suitable. The caller must make sure that no one is still using 
this Layout. 




