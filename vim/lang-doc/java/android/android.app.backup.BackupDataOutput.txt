*android.app.backup.BackupDataOutput* *BackupDataOutput* Provides the structured

public class BackupDataOutput
  extends    |java.lang.Object|

|android.app.backup.BackupDataOutput_Description|
|android.app.backup.BackupDataOutput_Fields|
|android.app.backup.BackupDataOutput_Constructors|
|android.app.backup.BackupDataOutput_Methods|

================================================================================

*android.app.backup.BackupDataOutput_Constructors*
|android.app.backup.BackupDataOutput(FileDescriptor)|

*android.app.backup.BackupDataOutput_Methods*
|android.app.backup.BackupDataOutput.finalize()|
|android.app.backup.BackupDataOutput.setKeyPrefix(String)|
|android.app.backup.BackupDataOutput.writeEntityData(byte[],int)|Write a chunk 
|android.app.backup.BackupDataOutput.writeEntityHeader(String,int)|Mark the beg

*android.app.backup.BackupDataOutput_Description*

Provides the structured interface through which a 
(|android.app.backup.BackupAgent|) commits information to the backup data set, 
via its onBackup()(|android.app.backup.BackupAgent|) method. Data written for 
backup is presented as a set of "entities," key/value pairs in which each 
binary data record "value" is named with a string "key." 

To commit a data record to the backup transport, the agent's 
onBackup()(|android.app.backup.BackupAgent|) method first writes an "entity 
header" that supplies the key string for the record and the total size of the 
binary value for the record. After the header has been written, the agent then 
writes the binary entity value itself. The entity value can be written in 
multiple chunks if desired, as long as the total count of bytes written matches 
what was supplied to writeEntityHeader()(|android.app.backup.BackupDataOutput|) 
. 

Entity key strings are considered to be unique within a given application's 
backup data set. If a backup agent writes a new entity under an existing key 
string, its value will replace any previous value in the transport's remote 
data store. You can remove a record entirely from the remote data set by 
writing a new entity header using the existing record's key, but supplying a 
negative dataSize parameter. When you do so, the agent does not need to call 
(|android.app.backup.BackupDataOutput|) . Example 

Here is an example illustrating a way to back up the value of a String variable 
called mStringToBackUp: 

static final String MY_STRING_KEY = "storedstring"; 

public void onBackup(ParcelFileDescriptor oldState, BackupDataOutput data, 
ParcelFileDescriptor newState)(|android.app.backup.BackupAgent|) throws 
IOException { ... byte[] stringBytes = mStringToBackUp.getBytes(); 
data.writeEntityHeader(MY_STRING_KEY, stringBytes.length); 
data.writeEntityData(stringBytes, stringBytes.length); ... } 



*android.app.backup.BackupDataOutput(FileDescriptor)*

public BackupDataOutput(java.io.FileDescriptor fd)




*android.app.backup.BackupDataOutput.finalize()*

protected void finalize()
  throws |java.lang.Throwable|
         




*android.app.backup.BackupDataOutput.setKeyPrefix(String)*

public void setKeyPrefix(java.lang.String keyPrefix)





*android.app.backup.BackupDataOutput.writeEntityData(byte[],int)*

public int writeEntityData(
  byte[] data,
  int size)
  throws |java.io.IOException|
         
Write a chunk of data under the current entity to the backup transport. 


    data - A raw data buffer to send 
    size - The number of bytes to be sent in this chunk 

    Returns: the number of bytes written 

*android.app.backup.BackupDataOutput.writeEntityHeader(String,int)*

public int writeEntityHeader(
  java.lang.String key,
  int dataSize)
  throws |java.io.IOException|
         
Mark the beginning of one record in the backup data stream. This must be called 
before (|android.app.backup.BackupDataOutput|) . 


    key - A string key that uniquely identifies the data record within the application 
    dataSize - The size in bytes of this record's data. Passing a dataSize of -1 indicates 
       that the record under this key should be deleted. 

    Returns: The number of bytes written to the backup stream 


