*android.provider.Settings.System* *Settings.System* System settings, containing

public static final class Settings.System
  extends    |android.provider.Settings.NameValueTable|

|android.provider.Settings.System_Description|
|android.provider.Settings.System_Fields|
|android.provider.Settings.System_Constructors|
|android.provider.Settings.System_Methods|

================================================================================

*android.provider.Settings.System_Fields*
|java.lang.String_android.provider.Settings.System.ACCELEROMETER_ROTATION|
|java.lang.String_android.provider.Settings.System.ADB_ENABLED|
|java.lang.String_android.provider.Settings.System.ADVANCED_SETTINGS|
|int_android.provider.Settings.System.ADVANCED_SETTINGS_DEFAULT|
|java.lang.String_android.provider.Settings.System.AIRPLANE_MODE_ON|
|java.lang.String_android.provider.Settings.System.AIRPLANE_MODE_RADIOS|
|java.lang.String_android.provider.Settings.System.AIRPLANE_MODE_TOGGLEABLE_RADIOS|
|java.lang.String_android.provider.Settings.System.ALARM_ALERT|
|java.lang.String_android.provider.Settings.System.ALWAYS_FINISH_ACTIVITIES|
|java.lang.String_android.provider.Settings.System.ANDROID_ID|
|java.lang.String_android.provider.Settings.System.ANIMATOR_DURATION_SCALE|
|java.lang.String_android.provider.Settings.System.APPEND_FOR_LAST_AUDIBLE|
|java.lang.String_android.provider.Settings.System.AUTO_TIME|
|java.lang.String_android.provider.Settings.System.AUTO_TIME_ZONE|
|java.lang.String_android.provider.Settings.System.BLUETOOTH_DISCOVERABILITY|
|java.lang.String_android.provider.Settings.System.BLUETOOTH_DISCOVERABILITY_TIMEOUT|
|java.lang.String_android.provider.Settings.System.BLUETOOTH_ON|
|java.lang.String_android.provider.Settings.System.CAR_DOCK_SOUND|
|java.lang.String_android.provider.Settings.System.CAR_UNDOCK_SOUND|
|android.net.Uri_android.provider.Settings.System.CONTENT_URI|
|java.lang.String_android.provider.Settings.System.DATA_ROAMING|
|java.lang.String_android.provider.Settings.System.DATE_FORMAT|
|java.lang.String_android.provider.Settings.System.DEBUG_APP|
|android.net.Uri_android.provider.Settings.System.DEFAULT_ALARM_ALERT_URI|
|android.net.Uri_android.provider.Settings.System.DEFAULT_NOTIFICATION_URI|
|android.net.Uri_android.provider.Settings.System.DEFAULT_RINGTONE_URI|
|java.lang.String_android.provider.Settings.System.DESK_DOCK_SOUND|
|java.lang.String_android.provider.Settings.System.DESK_UNDOCK_SOUND|
|java.lang.String_android.provider.Settings.System.DEVICE_PROVISIONED|
|java.lang.String_android.provider.Settings.System.DIM_SCREEN|
|java.lang.String_android.provider.Settings.System.DOCK_SOUNDS_ENABLED|
|java.lang.String_android.provider.Settings.System.DTMF_TONE_TYPE_WHEN_DIALING|
|java.lang.String_android.provider.Settings.System.DTMF_TONE_WHEN_DIALING|
|java.lang.String_android.provider.Settings.System.EGG_MODE|
|java.lang.String_android.provider.Settings.System.END_BUTTON_BEHAVIOR|
|int_android.provider.Settings.System.END_BUTTON_BEHAVIOR_DEFAULT|
|int_android.provider.Settings.System.END_BUTTON_BEHAVIOR_HOME|
|int_android.provider.Settings.System.END_BUTTON_BEHAVIOR_SLEEP|
|java.lang.String_android.provider.Settings.System.FONT_SCALE|
|java.lang.String_android.provider.Settings.System.HAPTIC_FEEDBACK_ENABLED|
|java.lang.String_android.provider.Settings.System.HEARING_AID|
|java.lang.String_android.provider.Settings.System.HIDE_ROTATION_LOCK_TOGGLE_FOR_ACCESSIBILITY|
|java.lang.String_android.provider.Settings.System.HTTP_PROXY|
|java.lang.String_android.provider.Settings.System.INSTALL_NON_MARKET_APPS|
|java.lang.String_android.provider.Settings.System.LOCATION_PROVIDERS_ALLOWED|
|java.lang.String_android.provider.Settings.System.LOCK_PATTERN_ENABLED|
|java.lang.String_android.provider.Settings.System.LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED|
|java.lang.String_android.provider.Settings.System.LOCK_PATTERN_VISIBLE|
|java.lang.String_android.provider.Settings.System.LOCK_SOUND|
|java.lang.String_android.provider.Settings.System.LOCKSCREEN_DISABLED|
|java.lang.String_android.provider.Settings.System.LOCKSCREEN_SOUNDS_ENABLED|
|java.lang.String_android.provider.Settings.System.LOGGING_ID|
|java.lang.String_android.provider.Settings.System.LOW_BATTERY_SOUND|
|java.lang.String_android.provider.Settings.System.MEDIA_BUTTON_RECEIVER|
|java.lang.String_android.provider.Settings.System.MODE_RINGER|
|java.lang.String_android.provider.Settings.System.MODE_RINGER_STREAMS_AFFECTED|
|java.lang.String_android.provider.Settings.System.MUTE_STREAMS_AFFECTED|
|java.lang.String_android.provider.Settings.System.NETWORK_PREFERENCE|
|java.lang.String_android.provider.Settings.System.NEXT_ALARM_FORMATTED|
|java.lang.String_android.provider.Settings.System.NOTIFICATION_LIGHT_PULSE|
|java.lang.String_android.provider.Settings.System.NOTIFICATION_SOUND|
|java.lang.String_android.provider.Settings.System.NOTIFICATIONS_USE_RING_VOLUME|
|java.lang.String_android.provider.Settings.System.PARENTAL_CONTROL_ENABLED|
|java.lang.String_android.provider.Settings.System.PARENTAL_CONTROL_LAST_UPDATE|
|java.lang.String_android.provider.Settings.System.PARENTAL_CONTROL_REDIRECT_URL|
|java.lang.String_android.provider.Settings.System.POINTER_LOCATION|
|java.lang.String_android.provider.Settings.System.POINTER_SPEED|
|java.lang.String_android.provider.Settings.System.POWER_SOUNDS_ENABLED|
|java.lang.String_android.provider.Settings.System.RADIO_BLUETOOTH|
|java.lang.String_android.provider.Settings.System.RADIO_CELL|
|java.lang.String_android.provider.Settings.System.RADIO_NFC|
|java.lang.String_android.provider.Settings.System.RADIO_WIFI|
|java.lang.String_android.provider.Settings.System.RADIO_WIMAX|
|java.lang.String_android.provider.Settings.System.RINGTONE|
|java.lang.String_android.provider.Settings.System.SCREEN_AUTO_BRIGHTNESS_ADJ|
|java.lang.String_android.provider.Settings.System.SCREEN_BRIGHTNESS|
|java.lang.String_android.provider.Settings.System.SCREEN_BRIGHTNESS_MODE|
|int_android.provider.Settings.System.SCREEN_BRIGHTNESS_MODE_AUTOMATIC|
|int_android.provider.Settings.System.SCREEN_BRIGHTNESS_MODE_MANUAL|
|java.lang.String_android.provider.Settings.System.SCREEN_OFF_TIMEOUT|
|java.lang.String_android.provider.Settings.System.SETTINGS_CLASSNAME|
|java.lang.String[]_android.provider.Settings.System.SETTINGS_TO_BACKUP|
|java.lang.String_android.provider.Settings.System.SETUP_WIZARD_HAS_RUN|
|java.lang.String_android.provider.Settings.System.SHOW_GTALK_SERVICE_STATUS|
|java.lang.String_android.provider.Settings.System.SHOW_PROCESSES|
|java.lang.String_android.provider.Settings.System.SHOW_TOUCHES|
|java.lang.String_android.provider.Settings.System.SHOW_WEB_SUGGESTIONS|
|java.lang.String_android.provider.Settings.System.SIP_ADDRESS_ONLY|
|java.lang.String_android.provider.Settings.System.SIP_ALWAYS|
|java.lang.String_android.provider.Settings.System.SIP_ASK_ME_EACH_TIME|
|java.lang.String_android.provider.Settings.System.SIP_CALL_OPTIONS|
|java.lang.String_android.provider.Settings.System.SIP_RECEIVE_CALLS|
|java.lang.String_android.provider.Settings.System.SOUND_EFFECTS_ENABLED|
|java.lang.String_android.provider.Settings.System.STAY_ON_WHILE_PLUGGED_IN|
|java.lang.String_android.provider.Settings.System.SYS_PROP_SETTING_VERSION|
|java.lang.String_android.provider.Settings.System.TEXT_AUTO_CAPS|
|java.lang.String_android.provider.Settings.System.TEXT_AUTO_PUNCTUATE|
|java.lang.String_android.provider.Settings.System.TEXT_AUTO_REPLACE|
|java.lang.String_android.provider.Settings.System.TEXT_SHOW_PASSWORD|
|java.lang.String_android.provider.Settings.System.TIME_12_24|
|java.lang.String_android.provider.Settings.System.TRANSITION_ANIMATION_SCALE|
|java.lang.String_android.provider.Settings.System.TTY_MODE|
|java.lang.String_android.provider.Settings.System.UNLOCK_SOUND|
|java.lang.String_android.provider.Settings.System.USB_MASS_STORAGE_ENABLED|
|java.lang.String_android.provider.Settings.System.USE_GOOGLE_MAIL|
|java.lang.String_android.provider.Settings.System.USER_ROTATION|
|java.lang.String_android.provider.Settings.System.VIBRATE_IN_SILENT|
|java.lang.String_android.provider.Settings.System.VIBRATE_INPUT_DEVICES|
|java.lang.String_android.provider.Settings.System.VIBRATE_ON|
|java.lang.String_android.provider.Settings.System.VIBRATE_WHEN_RINGING|
|java.lang.String_android.provider.Settings.System.VOLUME_ALARM|
|java.lang.String_android.provider.Settings.System.VOLUME_BLUETOOTH_SCO|
|java.lang.String_android.provider.Settings.System.VOLUME_MASTER|
|java.lang.String_android.provider.Settings.System.VOLUME_MASTER_MUTE|
|java.lang.String_android.provider.Settings.System.VOLUME_MUSIC|
|java.lang.String_android.provider.Settings.System.VOLUME_NOTIFICATION|
|java.lang.String_android.provider.Settings.System.VOLUME_RING|
|java.lang.String[]_android.provider.Settings.System.VOLUME_SETTINGS|
|java.lang.String_android.provider.Settings.System.VOLUME_SYSTEM|
|java.lang.String_android.provider.Settings.System.VOLUME_VOICE|
|java.lang.String_android.provider.Settings.System.WAIT_FOR_DEBUGGER|
|java.lang.String_android.provider.Settings.System.WALLPAPER_ACTIVITY|
|java.lang.String_android.provider.Settings.System.WIFI_MAX_DHCP_RETRY_COUNT|
|java.lang.String_android.provider.Settings.System.WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS|
|java.lang.String_android.provider.Settings.System.WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON|
|java.lang.String_android.provider.Settings.System.WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY|
|java.lang.String_android.provider.Settings.System.WIFI_NUM_OPEN_NETWORKS_KEPT|
|java.lang.String_android.provider.Settings.System.WIFI_ON|
|java.lang.String_android.provider.Settings.System.WIFI_SLEEP_POLICY|
|int_android.provider.Settings.System.WIFI_SLEEP_POLICY_DEFAULT|
|int_android.provider.Settings.System.WIFI_SLEEP_POLICY_NEVER|
|int_android.provider.Settings.System.WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED|
|java.lang.String_android.provider.Settings.System.WIFI_STATIC_DNS1|
|java.lang.String_android.provider.Settings.System.WIFI_STATIC_DNS2|
|java.lang.String_android.provider.Settings.System.WIFI_STATIC_GATEWAY|
|java.lang.String_android.provider.Settings.System.WIFI_STATIC_IP|
|java.lang.String_android.provider.Settings.System.WIFI_STATIC_NETMASK|
|java.lang.String_android.provider.Settings.System.WIFI_USE_STATIC_IP|
|java.lang.String_android.provider.Settings.System.WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE|
|java.lang.String_android.provider.Settings.System.WIFI_WATCHDOG_AP_COUNT|
|java.lang.String_android.provider.Settings.System.WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS|
|java.lang.String_android.provider.Settings.System.WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED|
|java.lang.String_android.provider.Settings.System.WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS|
|java.lang.String_android.provider.Settings.System.WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT|
|java.lang.String_android.provider.Settings.System.WIFI_WATCHDOG_MAX_AP_CHECKS|
|java.lang.String_android.provider.Settings.System.WIFI_WATCHDOG_ON|
|java.lang.String_android.provider.Settings.System.WIFI_WATCHDOG_PING_COUNT|
|java.lang.String_android.provider.Settings.System.WIFI_WATCHDOG_PING_DELAY_MS|
|java.lang.String_android.provider.Settings.System.WIFI_WATCHDOG_PING_TIMEOUT_MS|
|java.lang.String_android.provider.Settings.System.WINDOW_ANIMATION_SCALE|
|java.lang.String_android.provider.Settings.System.WINDOW_ORIENTATION_LISTENER_LOG|

*android.provider.Settings.System_Constructors*
|android.provider.Settings.System()|

*android.provider.Settings.System_Methods*
|android.provider.Settings.System.clearConfiguration(Configuration)|
|android.provider.Settings.System.getConfiguration(ContentResolver,Configuration)|
|android.provider.Settings.System.getConfigurationForUser(ContentResolver,Configuration,int)|
|android.provider.Settings.System.getFloat(ContentResolver,String)|Convenience 
|android.provider.Settings.System.getFloat(ContentResolver,String,float)|Conven
|android.provider.Settings.System.getFloatForUser(ContentResolver,String,float,int)|
|android.provider.Settings.System.getFloatForUser(ContentResolver,String,int)|
|android.provider.Settings.System.getInt(ContentResolver,String)|Convenience fu
|android.provider.Settings.System.getInt(ContentResolver,String,int)|Convenienc
|android.provider.Settings.System.getIntForUser(ContentResolver,String,int)|
|android.provider.Settings.System.getIntForUser(ContentResolver,String,int,int)|
|android.provider.Settings.System.getLong(ContentResolver,String)|Convenience f
|android.provider.Settings.System.getLong(ContentResolver,String,long)|Convenie
|android.provider.Settings.System.getLongForUser(ContentResolver,String,int)|
|android.provider.Settings.System.getLongForUser(ContentResolver,String,long,int)|
|android.provider.Settings.System.getMovedKeys(HashSet<String>)|
|android.provider.Settings.System.getNonLegacyMovedKeys(HashSet<String>)|
|android.provider.Settings.System.getShowGTalkServiceStatus(ContentResolver)|
|android.provider.Settings.System.getShowGTalkServiceStatusForUser(ContentResolver,int)|
|android.provider.Settings.System.getString(ContentResolver,String)|Look up a n
|android.provider.Settings.System.getStringForUser(ContentResolver,String,int)|
|android.provider.Settings.System.getUriFor(String)|Construct the content URI f
|android.provider.Settings.System.hasInterestingConfigurationChanges(int)|
|android.provider.Settings.System.putConfiguration(ContentResolver,Configuration)|
|android.provider.Settings.System.putConfigurationForUser(ContentResolver,Configuration,int)|
|android.provider.Settings.System.putFloat(ContentResolver,String,float)|Conven
|android.provider.Settings.System.putFloatForUser(ContentResolver,String,float,int)|
|android.provider.Settings.System.putInt(ContentResolver,String,int)|Convenienc
|android.provider.Settings.System.putIntForUser(ContentResolver,String,int,int)|
|android.provider.Settings.System.putLong(ContentResolver,String,long)|Convenie
|android.provider.Settings.System.putLongForUser(ContentResolver,String,long,int)|
|android.provider.Settings.System.putString(ContentResolver,String,String)|Stor
|android.provider.Settings.System.putStringForUser(ContentResolver,String,String,int)|
|android.provider.Settings.System.setShowGTalkServiceStatus(ContentResolver,boolean)|
|android.provider.Settings.System.setShowGTalkServiceStatusForUser(ContentResolver,boolean,int)|

*android.provider.Settings.System_Description*

System settings, containing miscellaneous system preferences. This table holds 
simple name/value pairs. There are convenience functions for accessing 
individual settings entries. 



*java.lang.String_android.provider.Settings.System.ACCELEROMETER_ROTATION*

Control whether the accelerometer will be used to change screen orientation. If 
0, it will not be used unless explicitly requested by the application; if 1, it 
will be used by default unless explicitly disabled by the application. 


*java.lang.String_android.provider.Settings.System.ADB_ENABLED*




*java.lang.String_android.provider.Settings.System.ADVANCED_SETTINGS*

Is advanced settings mode turned on. 0 == no, 1 == yes 


*int_android.provider.Settings.System.ADVANCED_SETTINGS_DEFAULT*

ADVANCED_SETTINGS default value. 


*java.lang.String_android.provider.Settings.System.AIRPLANE_MODE_ON*




*java.lang.String_android.provider.Settings.System.AIRPLANE_MODE_RADIOS*




*java.lang.String_android.provider.Settings.System.AIRPLANE_MODE_TOGGLEABLE_RADIOS*




*java.lang.String_android.provider.Settings.System.ALARM_ALERT*

Persistent store for the system-wide default alarm alert. 


*java.lang.String_android.provider.Settings.System.ALWAYS_FINISH_ACTIVITIES*

If 1, the activity manager will aggressively finish activities and processes as 
soon as they are no longer needed. If 0, the normal extended lifetime is used. 


*java.lang.String_android.provider.Settings.System.ANDROID_ID*




*java.lang.String_android.provider.Settings.System.ANIMATOR_DURATION_SCALE*

Scaling factor for Animator-based animations. This affects both the start delay 
and duration of all such animations. Setting to 0 will cause animations to end 
immediately. The default value is 1. 


*java.lang.String_android.provider.Settings.System.APPEND_FOR_LAST_AUDIBLE*

Appended to various volume related settings to record the previous values 
before they the settings were affected by a silent/vibrate ringer mode change. 


*java.lang.String_android.provider.Settings.System.AUTO_TIME*




*java.lang.String_android.provider.Settings.System.AUTO_TIME_ZONE*




*java.lang.String_android.provider.Settings.System.BLUETOOTH_DISCOVERABILITY*

Determines whether remote devices may discover and/or connect to this device. 
Type: INT 2 -- discoverable and connectable 1 -- connectable but not 
discoverable 0 -- neither connectable nor discoverable 


*java.lang.String_android.provider.Settings.System.BLUETOOTH_DISCOVERABILITY_TIMEOUT*

Bluetooth discoverability timeout. If this value is nonzero, then Bluetooth 
becomes discoverable for a certain number of seconds, after which is becomes 
simply connectable. The value is in seconds. 


*java.lang.String_android.provider.Settings.System.BLUETOOTH_ON*




*java.lang.String_android.provider.Settings.System.CAR_DOCK_SOUND*




*java.lang.String_android.provider.Settings.System.CAR_UNDOCK_SOUND*




*android.net.Uri_android.provider.Settings.System.CONTENT_URI*

The content:// style URL for this table 


*java.lang.String_android.provider.Settings.System.DATA_ROAMING*




*java.lang.String_android.provider.Settings.System.DATE_FORMAT*

Date format string mm/dd/yyyy dd/mm/yyyy yyyy/mm/dd 


*java.lang.String_android.provider.Settings.System.DEBUG_APP*

Name of an application package to be debugged. 


*android.net.Uri_android.provider.Settings.System.DEFAULT_ALARM_ALERT_URI*

A (|android.net.Uri|) that will point to the current default alarm alert at any 
given time. 


*android.net.Uri_android.provider.Settings.System.DEFAULT_NOTIFICATION_URI*

A (|android.net.Uri|) that will point to the current default notification sound 
at any given time. 


*android.net.Uri_android.provider.Settings.System.DEFAULT_RINGTONE_URI*

A (|android.net.Uri|) that will point to the current default ringtone at any 
given time. 

If the current default ringtone is in the DRM provider and the caller does not 
have permission, the exception will be a FileNotFoundException. 


*java.lang.String_android.provider.Settings.System.DESK_DOCK_SOUND*




*java.lang.String_android.provider.Settings.System.DESK_UNDOCK_SOUND*




*java.lang.String_android.provider.Settings.System.DEVICE_PROVISIONED*




*java.lang.String_android.provider.Settings.System.DIM_SCREEN*

Whether or not to dim the screen. 0=no 1=yes 


*java.lang.String_android.provider.Settings.System.DOCK_SOUNDS_ENABLED*




*java.lang.String_android.provider.Settings.System.DTMF_TONE_TYPE_WHEN_DIALING*

CDMA only settings DTMF tone type played by the dialer when dialing. 0 = Normal 
1 = Long 


*java.lang.String_android.provider.Settings.System.DTMF_TONE_WHEN_DIALING*

Whether the audible DTMF tones are played by the dialer when dialing. The value 
is boolean (1 or 0). 


*java.lang.String_android.provider.Settings.System.EGG_MODE*

I am the lolrus. 

Nonzero values indicate that the user has a bukkit. Backward-compatible with 
PrefGetPreference(prefAllowEasterEggs). 


*java.lang.String_android.provider.Settings.System.END_BUTTON_BEHAVIOR*

What happens when the user presses the end call button if they're not on a 
call. Values: 0 - The end button does nothing. 1 - The end button goes to the 
home screen. 2 - The end button puts the device to sleep and locks the 
keyguard. 3 - The end button goes to the home screen. If the user is already on 
the home screen, it puts the device to sleep. 


*int_android.provider.Settings.System.END_BUTTON_BEHAVIOR_DEFAULT*

END_BUTTON_BEHAVIOR default value. 


*int_android.provider.Settings.System.END_BUTTON_BEHAVIOR_HOME*

END_BUTTON_BEHAVIOR value for "go home". 


*int_android.provider.Settings.System.END_BUTTON_BEHAVIOR_SLEEP*

END_BUTTON_BEHAVIOR value for "go to sleep". 


*java.lang.String_android.provider.Settings.System.FONT_SCALE*

Scaling factor for fonts, float. 


*java.lang.String_android.provider.Settings.System.HAPTIC_FEEDBACK_ENABLED*

Whether the haptic feedback (long presses, ...) are enabled. The value is 
boolean (1 or 0). 


*java.lang.String_android.provider.Settings.System.HEARING_AID*

Whether the hearing aid is enabled. The value is boolean (1 or 0). 


*java.lang.String_android.provider.Settings.System.HIDE_ROTATION_LOCK_TOGGLE_FOR_ACCESSIBILITY*

Control whether the rotation lock toggle in the System UI should be hidden. 
Typically this is done for accessibility purposes to make it harder for the 
user to accidentally toggle the rotation lock while the display rotation has 
been locked for accessibility. 

If 0, then rotation lock toggle is not hidden for accessibility (although it 
may be unavailable for other reasons). If 1, then the rotation lock toggle is 
hidden. 


*java.lang.String_android.provider.Settings.System.HTTP_PROXY*




*java.lang.String_android.provider.Settings.System.INSTALL_NON_MARKET_APPS*




*java.lang.String_android.provider.Settings.System.LOCATION_PROVIDERS_ALLOWED*




*java.lang.String_android.provider.Settings.System.LOCK_PATTERN_ENABLED*




*java.lang.String_android.provider.Settings.System.LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED*




*java.lang.String_android.provider.Settings.System.LOCK_PATTERN_VISIBLE*




*java.lang.String_android.provider.Settings.System.LOCK_SOUND*




*java.lang.String_android.provider.Settings.System.LOCKSCREEN_DISABLED*

Whether the lockscreen should be completely disabled. 


*java.lang.String_android.provider.Settings.System.LOCKSCREEN_SOUNDS_ENABLED*

Whether to play sounds when the keyguard is shown and dismissed. 


*java.lang.String_android.provider.Settings.System.LOGGING_ID*




*java.lang.String_android.provider.Settings.System.LOW_BATTERY_SOUND*




*java.lang.String_android.provider.Settings.System.MEDIA_BUTTON_RECEIVER*

Persistent store for the system default media button event receiver. 


*java.lang.String_android.provider.Settings.System.MODE_RINGER*




*java.lang.String_android.provider.Settings.System.MODE_RINGER_STREAMS_AFFECTED*

Determines which streams are affected by ringer mode changes. The stream type's 
bit should be set to 1 if it should be muted when going into an inaudible 
ringer mode. 


*java.lang.String_android.provider.Settings.System.MUTE_STREAMS_AFFECTED*

Determines which streams are affected by mute. The stream type's bit should be 
set to 1 if it should be muted when a mute request is received. 


*java.lang.String_android.provider.Settings.System.NETWORK_PREFERENCE*




*java.lang.String_android.provider.Settings.System.NEXT_ALARM_FORMATTED*

A formatted string of the next alarm that is set, or the empty string if there 
is no alarm set. 


*java.lang.String_android.provider.Settings.System.NOTIFICATION_LIGHT_PULSE*

Whether the notification LED should repeatedly flash when a notification is 
pending. The value is boolean (1 or 0). 


*java.lang.String_android.provider.Settings.System.NOTIFICATION_SOUND*

Persistent store for the system-wide default notification sound. 


*java.lang.String_android.provider.Settings.System.NOTIFICATIONS_USE_RING_VOLUME*

Whether the notifications should use the ring volume (value of 1) or a separate 
notification volume (value of 0). In most cases, users will have this enabled 
so the notification and ringer volumes will be the same. However, power users 
can disable this and use the separate notification volume control. 

Note: This is a one-off setting that will be removed in the future when there 
is profile support. For this reason, it is kept hidden from the public APIs. 


*java.lang.String_android.provider.Settings.System.PARENTAL_CONTROL_ENABLED*




*java.lang.String_android.provider.Settings.System.PARENTAL_CONTROL_LAST_UPDATE*




*java.lang.String_android.provider.Settings.System.PARENTAL_CONTROL_REDIRECT_URL*




*java.lang.String_android.provider.Settings.System.POINTER_LOCATION*

Show pointer location on screen? 0 = no 1 = yes 


*java.lang.String_android.provider.Settings.System.POINTER_SPEED*

Pointer speed setting. This is an integer value in a range between -7 and +7, 
so there are 15 possible values. -7 = slowest 0 = default speed +7 = fastest 


*java.lang.String_android.provider.Settings.System.POWER_SOUNDS_ENABLED*




*java.lang.String_android.provider.Settings.System.RADIO_BLUETOOTH*




*java.lang.String_android.provider.Settings.System.RADIO_CELL*




*java.lang.String_android.provider.Settings.System.RADIO_NFC*




*java.lang.String_android.provider.Settings.System.RADIO_WIFI*




*java.lang.String_android.provider.Settings.System.RADIO_WIMAX*




*java.lang.String_android.provider.Settings.System.RINGTONE*

Persistent store for the system-wide default ringtone URI. 

If you need to play the default ringtone at any given time, it is recommended 
you give (|android.provider.Settings.System|) to the media player. It will 
resolve to the set default ringtone at the time of playing. 


*java.lang.String_android.provider.Settings.System.SCREEN_AUTO_BRIGHTNESS_ADJ*

Adjustment to auto-brightness to make it generally more (>0.0 -1.0) bright. 


*java.lang.String_android.provider.Settings.System.SCREEN_BRIGHTNESS*

The screen backlight brightness between 0 and 255. 


*java.lang.String_android.provider.Settings.System.SCREEN_BRIGHTNESS_MODE*

Control whether to enable automatic brightness mode. 


*int_android.provider.Settings.System.SCREEN_BRIGHTNESS_MODE_AUTOMATIC*

SCREEN_BRIGHTNESS_MODE value for automatic mode. 


*int_android.provider.Settings.System.SCREEN_BRIGHTNESS_MODE_MANUAL*

SCREEN_BRIGHTNESS_MODE value for manual mode. 


*java.lang.String_android.provider.Settings.System.SCREEN_OFF_TIMEOUT*

The timeout before the screen turns off. 


*java.lang.String_android.provider.Settings.System.SETTINGS_CLASSNAME*




*java.lang.String[]_android.provider.Settings.System.SETTINGS_TO_BACKUP*

Settings to backup. This is here so that it's in the same place as the settings 
keys and easy to update. 

NOTE: Settings are backed up and restored in the order they appear in this 
array. If you have one setting depending on another, make sure that they are 
ordered appropriately. 


*java.lang.String_android.provider.Settings.System.SETUP_WIZARD_HAS_RUN*

Whether the setup wizard has been run before (on first boot), or if it still 
needs to be run. 

nonzero = it has been run in the past 0 = it has not been run in the past 


*java.lang.String_android.provider.Settings.System.SHOW_GTALK_SERVICE_STATUS*




*java.lang.String_android.provider.Settings.System.SHOW_PROCESSES*

Control whether the process CPU usage meter should be shown. 


*java.lang.String_android.provider.Settings.System.SHOW_TOUCHES*

Show touch positions on screen? 0 = no 1 = yes 


*java.lang.String_android.provider.Settings.System.SHOW_WEB_SUGGESTIONS*




*java.lang.String_android.provider.Settings.System.SIP_ADDRESS_ONLY*

One of the sip call options: Only if destination is a SIP address. 


*java.lang.String_android.provider.Settings.System.SIP_ALWAYS*

One of the sip call options: Always use SIP with network access. 


*java.lang.String_android.provider.Settings.System.SIP_ASK_ME_EACH_TIME*

One of the sip call options: Always ask me each time. 


*java.lang.String_android.provider.Settings.System.SIP_CALL_OPTIONS*

Call Preference String. "SIP_ALWAYS" : Always use SIP with network access 
"SIP_ADDRESS_ONLY" : Only if destination is a SIP address 
"SIP_ASK_ME_EACH_TIME" : Always ask me each time 


*java.lang.String_android.provider.Settings.System.SIP_RECEIVE_CALLS*

Receive incoming SIP calls? 0 = no 1 = yes 


*java.lang.String_android.provider.Settings.System.SOUND_EFFECTS_ENABLED*

Whether the sounds effects (key clicks, lid open ...) are enabled. The value is 
boolean (1 or 0). 


*java.lang.String_android.provider.Settings.System.STAY_ON_WHILE_PLUGGED_IN*




*java.lang.String_android.provider.Settings.System.SYS_PROP_SETTING_VERSION*




*java.lang.String_android.provider.Settings.System.TEXT_AUTO_CAPS*

Setting to enable Auto Caps in text editors. 1 = On, 0 = Off 


*java.lang.String_android.provider.Settings.System.TEXT_AUTO_PUNCTUATE*

Setting to enable Auto Punctuate in text editors. 1 = On, 0 = Off. This feature 
converts two spaces to a "." and space. 


*java.lang.String_android.provider.Settings.System.TEXT_AUTO_REPLACE*

Setting to enable Auto Replace (AutoText) in text editors. 1 = On, 0 = Off 


*java.lang.String_android.provider.Settings.System.TEXT_SHOW_PASSWORD*

Setting to showing password characters in text editors. 1 = On, 0 = Off 


*java.lang.String_android.provider.Settings.System.TIME_12_24*

Display times as 12 or 24 hours 12 24 


*java.lang.String_android.provider.Settings.System.TRANSITION_ANIMATION_SCALE*

Scaling factor for activity transition animations. Setting to 0 will disable 
window animations. 


*java.lang.String_android.provider.Settings.System.TTY_MODE*

CDMA only settings TTY Mode 0 = OFF 1 = FULL 2 = VCO 3 = HCO 


*java.lang.String_android.provider.Settings.System.UNLOCK_SOUND*




*java.lang.String_android.provider.Settings.System.USB_MASS_STORAGE_ENABLED*




*java.lang.String_android.provider.Settings.System.USE_GOOGLE_MAIL*




*java.lang.String_android.provider.Settings.System.USER_ROTATION*

Default screen rotation when no other policy applies. When 
(|android.provider.Settings.System|) is zero and no on-screen Activity 
expresses a preference, this rotation value will be used. Must be one of the 
Surface rotation constants(|android.view.Surface|) . 


*java.lang.String_android.provider.Settings.System.VIBRATE_IN_SILENT*

Whether silent mode should allow vibration feedback. This is used internally in 
AudioService and the Sound settings activity to coordinate decoupling of 
vibrate and silent modes. This setting will likely be removed in a future 
release with support for audio/vibe feedback profiles. 

Not used anymore. On devices with vibrator, the user explicitly selects silent 
or vibrate mode. Kept for use by legacy database upgrade code in 
DatabaseHelper. 


*java.lang.String_android.provider.Settings.System.VIBRATE_INPUT_DEVICES*

If 1, redirects the system vibrator to all currently attached input devices 
that support vibration. If there are no such input devices, then the system 
vibrator is used instead. If 0, does not register the system vibrator. 

This setting is mainly intended to provide a compatibility mechanism for 
applications that only know about the system vibrator and do not use the input 
device vibrator API. 


*java.lang.String_android.provider.Settings.System.VIBRATE_ON*

Whether vibrate is on for different events. This is used internally, changing 
this value will not change the vibrate. See AudioManager. 


*java.lang.String_android.provider.Settings.System.VIBRATE_WHEN_RINGING*

Whether the phone vibrates when it is ringing due to an incoming call. This 
will be used by Phone and Setting apps; it shouldn't affect other apps. The 
value is boolean (1 or 0). 

Note: this is not same as "vibrate on ring", which had been available until 
ICS. It was about AudioManager's setting and thus affected all the applications 
which relied on the setting, while this is purely about the vibration setting 
for incoming calls. 


*java.lang.String_android.provider.Settings.System.VOLUME_ALARM*

Alarm volume. This is used internally, changing this value will not change the 
volume. See AudioManager. 


*java.lang.String_android.provider.Settings.System.VOLUME_BLUETOOTH_SCO*

Bluetooth Headset volume. This is used internally, changing this value will not 
change the volume. See AudioManager. 


*java.lang.String_android.provider.Settings.System.VOLUME_MASTER*

Master volume (float in the range 0.0f to 1.0f). 


*java.lang.String_android.provider.Settings.System.VOLUME_MASTER_MUTE*

Master volume mute (int 1 = mute, 0 = not muted). 


*java.lang.String_android.provider.Settings.System.VOLUME_MUSIC*

Music/media/gaming volume. This is used internally, changing this value will 
not change the volume. See AudioManager. 


*java.lang.String_android.provider.Settings.System.VOLUME_NOTIFICATION*

Notification volume. This is used internally, changing this value will not 
change the volume. See AudioManager. 


*java.lang.String_android.provider.Settings.System.VOLUME_RING*

Ringer volume. This is used internally, changing this value will not change the 
volume. See AudioManager. 


*java.lang.String[]_android.provider.Settings.System.VOLUME_SETTINGS*

The mapping of stream type (integer) to its setting. 


*java.lang.String_android.provider.Settings.System.VOLUME_SYSTEM*

System/notifications volume. This is used internally, changing this value will 
not change the volume. See AudioManager. 


*java.lang.String_android.provider.Settings.System.VOLUME_VOICE*

Voice call volume. This is used internally, changing this value will not change 
the volume. See AudioManager. 


*java.lang.String_android.provider.Settings.System.WAIT_FOR_DEBUGGER*

If 1, when launching DEBUG_APP it will wait for the debugger before starting 
user code. If 0, it will run normally. 


*java.lang.String_android.provider.Settings.System.WALLPAPER_ACTIVITY*

Name of activity to use for wallpaper on the home screen. 


*java.lang.String_android.provider.Settings.System.WIFI_MAX_DHCP_RETRY_COUNT*




*java.lang.String_android.provider.Settings.System.WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS*




*java.lang.String_android.provider.Settings.System.WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON*




*java.lang.String_android.provider.Settings.System.WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY*




*java.lang.String_android.provider.Settings.System.WIFI_NUM_OPEN_NETWORKS_KEPT*




*java.lang.String_android.provider.Settings.System.WIFI_ON*




*java.lang.String_android.provider.Settings.System.WIFI_SLEEP_POLICY*




*int_android.provider.Settings.System.WIFI_SLEEP_POLICY_DEFAULT*




*int_android.provider.Settings.System.WIFI_SLEEP_POLICY_NEVER*




*int_android.provider.Settings.System.WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED*




*java.lang.String_android.provider.Settings.System.WIFI_STATIC_DNS1*

If using static IP, the primary DNS's IP address. 

Example: "192.168.1.1" 


*java.lang.String_android.provider.Settings.System.WIFI_STATIC_DNS2*

If using static IP, the secondary DNS's IP address. 

Example: "192.168.1.2" 


*java.lang.String_android.provider.Settings.System.WIFI_STATIC_GATEWAY*

If using static IP, the gateway's IP address. 

Example: "192.168.1.1" 


*java.lang.String_android.provider.Settings.System.WIFI_STATIC_IP*

The static IP address. 

Example: "192.168.1.51" 


*java.lang.String_android.provider.Settings.System.WIFI_STATIC_NETMASK*

If using static IP, the net mask. 

Example: "255.255.255.0" 


*java.lang.String_android.provider.Settings.System.WIFI_USE_STATIC_IP*

Whether to use static IP and other static network attributes. 

Set to 1 for true and 0 for false. 


*java.lang.String_android.provider.Settings.System.WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE*




*java.lang.String_android.provider.Settings.System.WIFI_WATCHDOG_AP_COUNT*




*java.lang.String_android.provider.Settings.System.WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS*




*java.lang.String_android.provider.Settings.System.WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED*




*java.lang.String_android.provider.Settings.System.WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS*




*java.lang.String_android.provider.Settings.System.WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT*




*java.lang.String_android.provider.Settings.System.WIFI_WATCHDOG_MAX_AP_CHECKS*




*java.lang.String_android.provider.Settings.System.WIFI_WATCHDOG_ON*




*java.lang.String_android.provider.Settings.System.WIFI_WATCHDOG_PING_COUNT*




*java.lang.String_android.provider.Settings.System.WIFI_WATCHDOG_PING_DELAY_MS*




*java.lang.String_android.provider.Settings.System.WIFI_WATCHDOG_PING_TIMEOUT_MS*




*java.lang.String_android.provider.Settings.System.WINDOW_ANIMATION_SCALE*

Scaling factor for normal window animations. Setting to 0 will disable window 
animations. 


*java.lang.String_android.provider.Settings.System.WINDOW_ORIENTATION_LISTENER_LOG*

Log raw orientation data from (|WindowOrientationListener|) for use with the 
orientationplot.py tool. 0 = no 1 = yes 



*android.provider.Settings.System()*

public Settings.System()




*android.provider.Settings.System.clearConfiguration(Configuration)*

public static void clearConfiguration(android.content.res.Configuration inoutConfig)





*android.provider.Settings.System.getConfiguration(ContentResolver,Configuration)*

public static void getConfiguration(
  android.content.ContentResolver cr,
  android.content.res.Configuration outConfig)

Convenience function to read all of the current configuration-related settings 
into a (|android.content.res.Configuration|) object. 


    cr - The ContentResolver to access. 
    outConfig - Where to place the configuration settings. 

*android.provider.Settings.System.getConfigurationForUser(ContentResolver,Configuration,int)*

public static void getConfigurationForUser(
  android.content.ContentResolver cr,
  android.content.res.Configuration outConfig,
  int userHandle)





*android.provider.Settings.System.getFloat(ContentResolver,String)*

public static float getFloat(
  android.content.ContentResolver cr,
  java.lang.String name)
  throws |android.provider.Settings.SettingNotFoundException|
         
Convenience function for retrieving a single system settings value as a float. 
Note that internally setting values are always stored as strings; this function 
converts the string to a float for you. 

This version does not take a default value. If the setting has not been set, or 
the string value is not a number, it throws 
(|android.provider.Settings.SettingNotFoundException|) . 


    cr - The ContentResolver to access. 
    name - The name of the setting to retrieve. 

    Returns: The setting's current value. 

*android.provider.Settings.System.getFloat(ContentResolver,String,float)*

public static float getFloat(
  android.content.ContentResolver cr,
  java.lang.String name,
  float def)

Convenience function for retrieving a single system settings value as a 
floating point number. Note that internally setting values are always stored as 
strings; this function converts the string to an float for you. The default 
value will be returned if the setting is not defined or not a valid float. 


    cr - The ContentResolver to access. 
    name - The name of the setting to retrieve. 
    def - Value to return if the setting is not defined. 

    Returns: The setting's current value, or 'def' if it is not defined or not a valid 
             float. 

*android.provider.Settings.System.getFloatForUser(ContentResolver,String,float,int)*

public static float getFloatForUser(
  android.content.ContentResolver cr,
  java.lang.String name,
  float def,
  int userHandle)





*android.provider.Settings.System.getFloatForUser(ContentResolver,String,int)*

public static float getFloatForUser(
  android.content.ContentResolver cr,
  java.lang.String name,
  int userHandle)
  throws |android.provider.Settings.SettingNotFoundException|
         




*android.provider.Settings.System.getInt(ContentResolver,String)*

public static int getInt(
  android.content.ContentResolver cr,
  java.lang.String name)
  throws |android.provider.Settings.SettingNotFoundException|
         
Convenience function for retrieving a single system settings value as an 
integer. Note that internally setting values are always stored as strings; this 
function converts the string to an integer for you. 

This version does not take a default value. If the setting has not been set, or 
the string value is not a number, it throws 
(|android.provider.Settings.SettingNotFoundException|) . 


    cr - The ContentResolver to access. 
    name - The name of the setting to retrieve. 

    Returns: The setting's current value. 

*android.provider.Settings.System.getInt(ContentResolver,String,int)*

public static int getInt(
  android.content.ContentResolver cr,
  java.lang.String name,
  int def)

Convenience function for retrieving a single system settings value as an 
integer. Note that internally setting values are always stored as strings; this 
function converts the string to an integer for you. The default value will be 
returned if the setting is not defined or not an integer. 


    cr - The ContentResolver to access. 
    name - The name of the setting to retrieve. 
    def - Value to return if the setting is not defined. 

    Returns: The setting's current value, or 'def' if it is not defined or not a valid 
             integer. 

*android.provider.Settings.System.getIntForUser(ContentResolver,String,int)*

public static int getIntForUser(
  android.content.ContentResolver cr,
  java.lang.String name,
  int userHandle)
  throws |android.provider.Settings.SettingNotFoundException|
         




*android.provider.Settings.System.getIntForUser(ContentResolver,String,int,int)*

public static int getIntForUser(
  android.content.ContentResolver cr,
  java.lang.String name,
  int def,
  int userHandle)





*android.provider.Settings.System.getLong(ContentResolver,String)*

public static long getLong(
  android.content.ContentResolver cr,
  java.lang.String name)
  throws |android.provider.Settings.SettingNotFoundException|
         
Convenience function for retrieving a single system settings value as along. 
Note that internally setting values are always stored as strings; this function 
converts the string to alongfor you. 

This version does not take a default value. If the setting has not been set, or 
the string value is not a number, it throws 
(|android.provider.Settings.SettingNotFoundException|) . 


    cr - The ContentResolver to access. 
    name - The name of the setting to retrieve. 

    Returns: The setting's current value. 

*android.provider.Settings.System.getLong(ContentResolver,String,long)*

public static long getLong(
  android.content.ContentResolver cr,
  java.lang.String name,
  long def)

Convenience function for retrieving a single system settings value as along. 
Note that internally setting values are always stored as strings; this function 
converts the string to alongfor you. The default value will be returned if the 
setting is not defined or not along. 


    cr - The ContentResolver to access. 
    name - The name of the setting to retrieve. 
    def - Value to return if the setting is not defined. 

    Returns: The setting's current value, or 'def' if it is not defined or not a valid 
             {@code long}. 

*android.provider.Settings.System.getLongForUser(ContentResolver,String,int)*

public static long getLongForUser(
  android.content.ContentResolver cr,
  java.lang.String name,
  int userHandle)
  throws |android.provider.Settings.SettingNotFoundException|
         




*android.provider.Settings.System.getLongForUser(ContentResolver,String,long,int)*

public static long getLongForUser(
  android.content.ContentResolver cr,
  java.lang.String name,
  long def,
  int userHandle)





*android.provider.Settings.System.getMovedKeys(HashSet<String>)*

public static void getMovedKeys(java.util.HashSet<java.lang.String> outKeySet)





*android.provider.Settings.System.getNonLegacyMovedKeys(HashSet<String>)*

public static void getNonLegacyMovedKeys(java.util.HashSet<java.lang.String> outKeySet)





*android.provider.Settings.System.getShowGTalkServiceStatus(ContentResolver)*

public static boolean getShowGTalkServiceStatus(android.content.ContentResolver cr)



    Deprecated: - Do not use


*android.provider.Settings.System.getShowGTalkServiceStatusForUser(ContentResolver,int)*

public static boolean getShowGTalkServiceStatusForUser(
  android.content.ContentResolver cr,
  int userHandle)



    Deprecated: - Do not use


*android.provider.Settings.System.getString(ContentResolver,String)*

public static |java.lang.String| getString(
  android.content.ContentResolver resolver,
  java.lang.String name)

Look up a name in the database. 


    resolver - to access the database with 
    name - to look up in the table 

    Returns: the corresponding value, or null if not present 

*android.provider.Settings.System.getStringForUser(ContentResolver,String,int)*

public static |java.lang.String| getStringForUser(
  android.content.ContentResolver resolver,
  java.lang.String name,
  int userHandle)





*android.provider.Settings.System.getUriFor(String)*

public static |android.net.Uri| getUriFor(java.lang.String name)

Construct the content URI for a particular name/value pair, useful for 
monitoring changes with a ContentObserver. 


    name - to look up in the table 

    Returns: the corresponding content URI, or null if not present 

*android.provider.Settings.System.hasInterestingConfigurationChanges(int)*

public static boolean hasInterestingConfigurationChanges(int changes)





*android.provider.Settings.System.putConfiguration(ContentResolver,Configuration)*

public static boolean putConfiguration(
  android.content.ContentResolver cr,
  android.content.res.Configuration config)

Convenience function to write a batch of configuration-related settings from a 
(|android.content.res.Configuration|) object. 


    cr - The ContentResolver to access. 
    config - The settings to write. 

    Returns: true if the values were set, false on database errors 

*android.provider.Settings.System.putConfigurationForUser(ContentResolver,Configuration,int)*

public static boolean putConfigurationForUser(
  android.content.ContentResolver cr,
  android.content.res.Configuration config,
  int userHandle)





*android.provider.Settings.System.putFloat(ContentResolver,String,float)*

public static boolean putFloat(
  android.content.ContentResolver cr,
  java.lang.String name,
  float value)

Convenience function for updating a single settings value as a floating point 
number. This will either create a new entry in the table if the given name does 
not exist, or modify the value of the existing row with that name. Note that 
internally setting values are always stored as strings, so this function 
converts the given value to a string before storing it. 


    cr - The ContentResolver to access. 
    name - The name of the setting to modify. 
    value - The new value for the setting. 

    Returns: true if the value was set, false on database errors 

*android.provider.Settings.System.putFloatForUser(ContentResolver,String,float,int)*

public static boolean putFloatForUser(
  android.content.ContentResolver cr,
  java.lang.String name,
  float value,
  int userHandle)





*android.provider.Settings.System.putInt(ContentResolver,String,int)*

public static boolean putInt(
  android.content.ContentResolver cr,
  java.lang.String name,
  int value)

Convenience function for updating a single settings value as an integer. This 
will either create a new entry in the table if the given name does not exist, 
or modify the value of the existing row with that name. Note that internally 
setting values are always stored as strings, so this function converts the 
given value to a string before storing it. 


    cr - The ContentResolver to access. 
    name - The name of the setting to modify. 
    value - The new value for the setting. 

    Returns: true if the value was set, false on database errors 

*android.provider.Settings.System.putIntForUser(ContentResolver,String,int,int)*

public static boolean putIntForUser(
  android.content.ContentResolver cr,
  java.lang.String name,
  int value,
  int userHandle)





*android.provider.Settings.System.putLong(ContentResolver,String,long)*

public static boolean putLong(
  android.content.ContentResolver cr,
  java.lang.String name,
  long value)

Convenience function for updating a single settings value as a long integer. 
This will either create a new entry in the table if the given name does not 
exist, or modify the value of the existing row with that name. Note that 
internally setting values are always stored as strings, so this function 
converts the given value to a string before storing it. 


    cr - The ContentResolver to access. 
    name - The name of the setting to modify. 
    value - The new value for the setting. 

    Returns: true if the value was set, false on database errors 

*android.provider.Settings.System.putLongForUser(ContentResolver,String,long,int)*

public static boolean putLongForUser(
  android.content.ContentResolver cr,
  java.lang.String name,
  long value,
  int userHandle)





*android.provider.Settings.System.putString(ContentResolver,String,String)*

public static boolean putString(
  android.content.ContentResolver resolver,
  java.lang.String name,
  java.lang.String value)

Store a name/value pair into the database. 


    resolver - to access the database with 
    name - to store 
    value - to associate with the name 

    Returns: true if the value was set, false on database errors 

*android.provider.Settings.System.putStringForUser(ContentResolver,String,String,int)*

public static boolean putStringForUser(
  android.content.ContentResolver resolver,
  java.lang.String name,
  java.lang.String value,
  int userHandle)





*android.provider.Settings.System.setShowGTalkServiceStatus(ContentResolver,boolean)*

public static void setShowGTalkServiceStatus(
  android.content.ContentResolver cr,
  boolean flag)



    Deprecated: - Do not use


*android.provider.Settings.System.setShowGTalkServiceStatusForUser(ContentResolver,boolean,int)*

public static void setShowGTalkServiceStatusForUser(
  android.content.ContentResolver cr,
  boolean flag,
  int userHandle)



    Deprecated: - Do not use



