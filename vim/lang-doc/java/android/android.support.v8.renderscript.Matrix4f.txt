*android.support.v8.renderscript.Matrix4f* *Matrix4f* Class for exposing the nat

public class Matrix4f
  extends    |java.lang.Object|

|android.support.v8.renderscript.Matrix4f_Description|
|android.support.v8.renderscript.Matrix4f_Fields|
|android.support.v8.renderscript.Matrix4f_Constructors|
|android.support.v8.renderscript.Matrix4f_Methods|

================================================================================

*android.support.v8.renderscript.Matrix4f_Constructors*
|android.support.v8.renderscript.Matrix4f()|Creates a new identity 4x4 matrix
|android.support.v8.renderscript.Matrix4f(float[])|Creates a new matrix and set

*android.support.v8.renderscript.Matrix4f_Methods*
|android.support.v8.renderscript.Matrix4f.get(int,int)|Returns the value for a 
|android.support.v8.renderscript.Matrix4f.getArray()|Return a reference to the 
|android.support.v8.renderscript.Matrix4f.inverse()|Sets the current matrix to 
|android.support.v8.renderscript.Matrix4f.inverseTranspose()|Sets the current m
|android.support.v8.renderscript.Matrix4f.load(Matrix3f)|Sets the values of the
|android.support.v8.renderscript.Matrix4f.load(Matrix4f)|Sets the values of the
|android.support.v8.renderscript.Matrix4f.loadFrustum(float,float,float,float,float,float)|
|android.support.v8.renderscript.Matrix4f.loadIdentity()|Sets the matrix values
|android.support.v8.renderscript.Matrix4f.loadMultiply(Matrix4f,Matrix4f)|Sets 
|android.support.v8.renderscript.Matrix4f.loadOrtho(float,float,float,float,float,float)|
|android.support.v8.renderscript.Matrix4f.loadOrthoWindow(int,int)|Set current 
|android.support.v8.renderscript.Matrix4f.loadPerspective(float,float,float,float)|
|android.support.v8.renderscript.Matrix4f.loadProjectionNormalized(int,int)|Hel
|android.support.v8.renderscript.Matrix4f.loadRotate(float,float,float,float)|S
|android.support.v8.renderscript.Matrix4f.loadScale(float,float,float)|Sets cur
|android.support.v8.renderscript.Matrix4f.loadTranslate(float,float,float)|Sets
|android.support.v8.renderscript.Matrix4f.multiply(Matrix4f)|Post-multiplies th
|android.support.v8.renderscript.Matrix4f.rotate(float,float,float,float)|Modif
|android.support.v8.renderscript.Matrix4f.scale(float,float,float)|Modifies the
|android.support.v8.renderscript.Matrix4f.set(int,int,float)|Sets the value for
|android.support.v8.renderscript.Matrix4f.translate(float,float,float)|Modifies
|android.support.v8.renderscript.Matrix4f.transpose()|Sets the current matrix t

*android.support.v8.renderscript.Matrix4f_Description*

Class for exposing the native RenderScript rs_matrix4x4 type back to the 
Android system. 



*android.support.v8.renderscript.Matrix4f()*

public Matrix4f()

Creates a new identity 4x4 matrix 


*android.support.v8.renderscript.Matrix4f(float[])*

public Matrix4f(float[] dataArray)

Creates a new matrix and sets its values from the given parameter 

    dataArray - values to set the matrix to, must be 16 floats long 

*android.support.v8.renderscript.Matrix4f.get(int,int)*

public float get(
  int x,
  int y)

Returns the value for a given row and column 


    x - column of the value to return 
    y - row of the value to return 

    Returns: value in the yth row and xth column 

*android.support.v8.renderscript.Matrix4f.getArray()*

public float[] getArray()

Return a reference to the internal array representing matrix values. Modifying 
this array will also change the matrix 



    Returns: internal array representing the matrix 

*android.support.v8.renderscript.Matrix4f.inverse()*

public boolean inverse()

Sets the current matrix to its inverse 



*android.support.v8.renderscript.Matrix4f.inverseTranspose()*

public boolean inverseTranspose()

Sets the current matrix to its inverse transpose 



*android.support.v8.renderscript.Matrix4f.load(Matrix3f)*

public void load(android.support.v8.renderscript.Matrix3f src)

Sets the values of the matrix to those of the parameter 


    src - matrix to load the values from 

*android.support.v8.renderscript.Matrix4f.load(Matrix4f)*

public void load(android.support.v8.renderscript.Matrix4f src)

Sets the values of the matrix to those of the parameter 


    src - matrix to load the values from 

*android.support.v8.renderscript.Matrix4f.loadFrustum(float,float,float,float,float,float)*

public void loadFrustum(
  float l,
  float r,
  float b,
  float t,
  float n,
  float f)

Sets current values to be a perspective projection matrix 


    l - location of the left vertical clipping plane 
    r - location of the right vertical clipping plane 
    b - location of the bottom horizontal clipping plane 
    t - location of the top horizontal clipping plane 
    n - location of the near clipping plane, must be positive 
    f - location of the far clipping plane, must be positive 

*android.support.v8.renderscript.Matrix4f.loadIdentity()*

public void loadIdentity()

Sets the matrix values to identity 



*android.support.v8.renderscript.Matrix4f.loadMultiply(Matrix4f,Matrix4f)*

public void loadMultiply(
  android.support.v8.renderscript.Matrix4f lhs,
  android.support.v8.renderscript.Matrix4f rhs)

Sets current values to be the result of multiplying two given matrices 


    lhs - left hand side matrix 
    rhs - right hand side matrix 

*android.support.v8.renderscript.Matrix4f.loadOrtho(float,float,float,float,float,float)*

public void loadOrtho(
  float l,
  float r,
  float b,
  float t,
  float n,
  float f)

Set current values to be an orthographic projection matrix 


    l - location of the left vertical clipping plane 
    r - location of the right vertical clipping plane 
    b - location of the bottom horizontal clipping plane 
    t - location of the top horizontal clipping plane 
    n - location of the near clipping plane 
    f - location of the far clipping plane 

*android.support.v8.renderscript.Matrix4f.loadOrthoWindow(int,int)*

public void loadOrthoWindow(
  int w,
  int h)

Set current values to be an orthographic projection matrix with the right and 
bottom clipping planes set to the given values. Left and top clipping planes 
are set to 0. Near and far are set to -1, 1 respectively 


    w - location of the right vertical clipping plane 
    h - location of the bottom horizontal clipping plane 

*android.support.v8.renderscript.Matrix4f.loadPerspective(float,float,float,float)*

public void loadPerspective(
  float fovy,
  float aspect,
  float near,
  float far)

Sets current values to be a perspective projection matrix 


    fovy - vertical field of view angle in degrees 
    aspect - aspect ratio of the screen 
    near - near cliping plane, must be positive 
    far - far clipping plane, must be positive 

*android.support.v8.renderscript.Matrix4f.loadProjectionNormalized(int,int)*

public void loadProjectionNormalized(
  int w,
  int h)

Helper function to set the current values to a perspective projection matrix 
with aspect ratio defined by the parameters and (near, far), (bottom, top) 
mapping to (-1, 1) at z = 0 


    w - screen width 
    h - screen height 

*android.support.v8.renderscript.Matrix4f.loadRotate(float,float,float,float)*

public void loadRotate(
  float rot,
  float x,
  float y,
  float z)

Sets current values to be a rotation matrix of certain angle about a given axis 


    rot - angle of rotation 
    x - rotation axis x 
    y - rotation axis y 
    z - rotation axis z 

*android.support.v8.renderscript.Matrix4f.loadScale(float,float,float)*

public void loadScale(
  float x,
  float y,
  float z)

Sets current values to be a scale matrix of given dimensions 


    x - scale component x 
    y - scale component y 
    z - scale component z 

*android.support.v8.renderscript.Matrix4f.loadTranslate(float,float,float)*

public void loadTranslate(
  float x,
  float y,
  float z)

Sets current values to be a translation matrix of given dimensions 


    x - translation component x 
    y - translation component y 
    z - translation component z 

*android.support.v8.renderscript.Matrix4f.multiply(Matrix4f)*

public void multiply(android.support.v8.renderscript.Matrix4f rhs)

Post-multiplies the current matrix by a given parameter 


    rhs - right hand side to multiply by 

*android.support.v8.renderscript.Matrix4f.rotate(float,float,float,float)*

public void rotate(
  float rot,
  float x,
  float y,
  float z)

Modifies the current matrix by post-multiplying it with a rotation matrix of 
certain angle about a given axis 


    rot - angle of rotation 
    x - rotation axis x 
    y - rotation axis y 
    z - rotation axis z 

*android.support.v8.renderscript.Matrix4f.scale(float,float,float)*

public void scale(
  float x,
  float y,
  float z)

Modifies the current matrix by post-multiplying it with a scale matrix of given 
dimensions 


    x - scale component x 
    y - scale component y 
    z - scale component z 

*android.support.v8.renderscript.Matrix4f.set(int,int,float)*

public void set(
  int x,
  int y,
  float v)

Sets the value for a given row and column 


    x - column of the value to set 
    y - row of the value to set 

*android.support.v8.renderscript.Matrix4f.translate(float,float,float)*

public void translate(
  float x,
  float y,
  float z)

Modifies the current matrix by post-multiplying it with a translation matrix of 
given dimensions 


    x - translation component x 
    y - translation component y 
    z - translation component z 

*android.support.v8.renderscript.Matrix4f.transpose()*

public void transpose()

Sets the current matrix to its transpose 




