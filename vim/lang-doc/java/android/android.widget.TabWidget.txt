*android.widget.TabWidget* *TabWidget* Displays a list of tab labels representin

public class TabWidget
  extends    |android.widget.LinearLayout|
  implements |android.view.View.OnFocusChangeListener|

|android.widget.TabWidget_Description|
|android.widget.TabWidget_Fields|
|android.widget.TabWidget_Constructors|
|android.widget.TabWidget_Methods|

================================================================================

*android.widget.TabWidget_Constructors*
|android.widget.TabWidget(Context)|
|android.widget.TabWidget(Context,AttributeSet)|
|android.widget.TabWidget(Context,AttributeSet,int)|

*android.widget.TabWidget_Methods*
|android.widget.TabWidget.addView(View)|
|android.widget.TabWidget.childDrawableStateChanged(View)|
|android.widget.TabWidget.dispatchDraw(Canvas)|
|android.widget.TabWidget.dispatchPopulateAccessibilityEvent(AccessibilityEvent)|
|android.widget.TabWidget.focusCurrentTab(int)|Sets the current tab and focuses
|android.widget.TabWidget.getChildDrawingOrder(int,int)|
|android.widget.TabWidget.getChildTabViewAt(int)|Returns the tab indicator view
|android.widget.TabWidget.getTabCount()|Returns the number of tab indicator vie
|android.widget.TabWidget.isStripEnabled()|Indicates whether the bottom strips 
|android.widget.TabWidget.onFocusChange(View,boolean)|
|android.widget.TabWidget.onInitializeAccessibilityEvent(AccessibilityEvent)|
|android.widget.TabWidget.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)|
|android.widget.TabWidget.onSizeChanged(int,int,int,int)|
|android.widget.TabWidget.removeAllViews()|
|android.widget.TabWidget.sendAccessibilityEventUnchecked(AccessibilityEvent)|
|android.widget.TabWidget.setCurrentTab(int)|Sets the current tab.
|android.widget.TabWidget.setDividerDrawable(Drawable)|Sets the drawable to use
|android.widget.TabWidget.setEnabled(boolean)|
|android.widget.TabWidget.setLeftStripDrawable(Drawable)|Sets the drawable to u
|android.widget.TabWidget.setRightStripDrawable(Drawable)|Sets the drawable to 
|android.widget.TabWidget.setStripEnabled(boolean)|Controls whether the bottom 

*android.widget.TabWidget_Description*

Displays a list of tab labels representing each page in the parent's tab 
collection. The container object for this widget is 
TabHost(|android.widget.TabHost|) . When the user selects a tab, this object 
sends a message to the parent container, TabHost, to tell it to switch the 
displayed page. You typically won't use many methods directly on this object. 
The container TabHost is used to add labels, add the callback handler, and 
manage callbacks. You might call this object to iterate the list of tabs, or to 
tweak the layout of the tab list, but most methods should be called on the 
containing TabHost object. 



*android.widget.TabWidget(Context)*

public TabWidget(android.content.Context context)




*android.widget.TabWidget(Context,AttributeSet)*

public TabWidget(
  android.content.Context context,
  android.util.AttributeSet attrs)




*android.widget.TabWidget(Context,AttributeSet,int)*

public TabWidget(
  android.content.Context context,
  android.util.AttributeSet attrs,
  int defStyle)




*android.widget.TabWidget.addView(View)*

public void addView(android.view.View child)





*android.widget.TabWidget.childDrawableStateChanged(View)*

public void childDrawableStateChanged(android.view.View child)





*android.widget.TabWidget.dispatchDraw(Canvas)*

public void dispatchDraw(Canvas canvas)





*android.widget.TabWidget.dispatchPopulateAccessibilityEvent(AccessibilityEvent)*

public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent event)





*android.widget.TabWidget.focusCurrentTab(int)*

public void focusCurrentTab(int index)

Sets the current tab and focuses the UI on it. This method makes sure that the 
focused tab matches the selected tab, normally at (|android.widget.TabWidget|) 
. Normally this would not be an issue if we go through the UI, since the UI is 
responsible for calling TabWidget.onFocusChanged(), but in the case where we 
are selecting the tab programmatically, we'll need to make sure focus keeps up. 


    index - The tab that you want focused (highlighted in orange) and selected (tab brought 
       to the front of the widget) 

*android.widget.TabWidget.getChildDrawingOrder(int,int)*

protected int getChildDrawingOrder(
  int childCount,
  int i)





*android.widget.TabWidget.getChildTabViewAt(int)*

public |android.view.View| getChildTabViewAt(int index)

Returns the tab indicator view at the given index. 


    index - the zero-based index of the tab indicator view to return 

    Returns: the tab indicator view at the given index 

*android.widget.TabWidget.getTabCount()*

public int getTabCount()

Returns the number of tab indicator views. 



    Returns: the number of tab indicator views. 

*android.widget.TabWidget.isStripEnabled()*

public boolean isStripEnabled()

Indicates whether the bottom strips on the tab indicators are drawn or not. 



*android.widget.TabWidget.onFocusChange(View,boolean)*

public void onFocusChange(
  android.view.View v,
  boolean hasFocus)





*android.widget.TabWidget.onInitializeAccessibilityEvent(AccessibilityEvent)*

public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent event)





*android.widget.TabWidget.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)*

public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo info)





*android.widget.TabWidget.onSizeChanged(int,int,int,int)*

protected void onSizeChanged(
  int w,
  int h,
  int oldw,
  int oldh)





*android.widget.TabWidget.removeAllViews()*

public void removeAllViews()





*android.widget.TabWidget.sendAccessibilityEventUnchecked(AccessibilityEvent)*

public void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent event)





*android.widget.TabWidget.setCurrentTab(int)*

public void setCurrentTab(int index)

Sets the current tab. This method is used to bring a tab to the front of the 
Widget, and is used to post to the rest of the UI that a different tab has been 
brought to the foreground. 

Note, this is separate from the traditional "focus" that is employed from the 
view logic. 

For instance, if we have a list in a tabbed view, a user may be navigating up 
and down the list, moving the UI focus (orange highlighting) through the list 
items. The cursor movement does not effect the "selected" tab though, because 
what is being scrolled through is all on the same tab. The selected tab only 
changes when we navigate between tabs (moving from the list view to the next 
tabbed view, in this example). 

To move both the focus AND the selected tab at once, please use 
(|android.widget.TabWidget|) . Normally, the view logic takes care of adjusting 
the focus, so unless you're circumventing the UI, you'll probably just focus 
your interest here. 


    index - The tab that you want to indicate as the selected tab (tab brought to the front 
       of the widget) 

*android.widget.TabWidget.setDividerDrawable(Drawable)*

public void setDividerDrawable(Drawable drawable)

Sets the drawable to use as a divider between the tab indicators. 


    drawable - the divider drawable 

*android.widget.TabWidget.setEnabled(boolean)*

public void setEnabled(boolean enabled)





*android.widget.TabWidget.setLeftStripDrawable(Drawable)*

public void setLeftStripDrawable(Drawable drawable)

Sets the drawable to use as the left part of the strip below the tab 
indicators. 


    drawable - the left strip drawable 

*android.widget.TabWidget.setRightStripDrawable(Drawable)*

public void setRightStripDrawable(Drawable drawable)

Sets the drawable to use as the right part of the strip below the tab 
indicators. 


    drawable - the right strip drawable 

*android.widget.TabWidget.setStripEnabled(boolean)*

public void setStripEnabled(boolean stripEnabled)

Controls whether the bottom strips on the tab indicators are drawn or not. The 
default is to draw them. If the user specifies a custom view for the tab 
indicators, then the TabHost class calls this method to disable drawing of the 
bottom strips. 


    stripEnabled - true if the bottom strips should be drawn. 


