*android.widget.ListPopupWindow* *ListPopupWindow* A ListPopupWindow anchors its

public class ListPopupWindow
  extends    |java.lang.Object|

|android.widget.ListPopupWindow_Description|
|android.widget.ListPopupWindow_Fields|
|android.widget.ListPopupWindow_Constructors|
|android.widget.ListPopupWindow_Methods|

================================================================================

*android.widget.ListPopupWindow_Fields*
|int_android.widget.ListPopupWindow.INPUT_METHOD_FROM_FOCUSABLE|
|int_android.widget.ListPopupWindow.INPUT_METHOD_NEEDED|
|int_android.widget.ListPopupWindow.INPUT_METHOD_NOT_NEEDED|
|int_android.widget.ListPopupWindow.MATCH_PARENT|
|int_android.widget.ListPopupWindow.POSITION_PROMPT_ABOVE|
|int_android.widget.ListPopupWindow.POSITION_PROMPT_BELOW|
|int_android.widget.ListPopupWindow.WRAP_CONTENT|

*android.widget.ListPopupWindow_Constructors*
|android.widget.ListPopupWindow(Context)|Create a new, empty popup window capab
|android.widget.ListPopupWindow(Context,AttributeSet)|Create a new, empty popup
|android.widget.ListPopupWindow(Context,AttributeSet,int)|Create a new, empty p
|android.widget.ListPopupWindow(Context,AttributeSet,int,int)|Create a new, emp

*android.widget.ListPopupWindow_Methods*
|android.widget.ListPopupWindow.clearListSelection()|Clear any current list sel
|android.widget.ListPopupWindow.createDragToOpenListener(View)|Returns anOnTouc
|android.widget.ListPopupWindow.dismiss()|Dismiss the popup window.
|android.widget.ListPopupWindow.getAnchorView()|Returns the view that will be u
|android.widget.ListPopupWindow.getAnimationStyle()|Returns the animation style
|android.widget.ListPopupWindow.getBackground()|
|android.widget.ListPopupWindow.getHeight()|
|android.widget.ListPopupWindow.getHorizontalOffset()|
|android.widget.ListPopupWindow.getInputMethodMode()|Return the current value i
|android.widget.ListPopupWindow.getListView()|
|android.widget.ListPopupWindow.getPromptPosition()|
|android.widget.ListPopupWindow.getSelectedItem()|
|android.widget.ListPopupWindow.getSelectedItemId()|
|android.widget.ListPopupWindow.getSelectedItemPosition()|
|android.widget.ListPopupWindow.getSelectedView()|
|android.widget.ListPopupWindow.getSoftInputMode()|Returns the current value in
|android.widget.ListPopupWindow.getVerticalOffset()|
|android.widget.ListPopupWindow.getWidth()|
|android.widget.ListPopupWindow.isDropDownAlwaysVisible()|
|android.widget.ListPopupWindow.isInputMethodNotNeeded()|
|android.widget.ListPopupWindow.isModal()|Returns whether the popup window will
|android.widget.ListPopupWindow.isShowing()|
|android.widget.ListPopupWindow.onKeyDown(int,KeyEvent)|Filter key down events.
|android.widget.ListPopupWindow.onKeyPreIme(int,KeyEvent)|Filter pre-IME key ev
|android.widget.ListPopupWindow.onKeyUp(int,KeyEvent)|Filter key down events.
|android.widget.ListPopupWindow.performItemClick(int)|Perform an item click ope
|android.widget.ListPopupWindow.postShow()|Post a#show()call to the UI thread.
|android.widget.ListPopupWindow.setAdapter(ListAdapter)|Sets the adapter that p
|android.widget.ListPopupWindow.setAnchorView(View)|Sets the popup's anchor vie
|android.widget.ListPopupWindow.setAnimationStyle(int)|Set an animation style t
|android.widget.ListPopupWindow.setBackgroundDrawable(Drawable)|Sets a drawable
|android.widget.ListPopupWindow.setContentWidth(int)|Sets the width of the popu
|android.widget.ListPopupWindow.setDropDownAlwaysVisible(boolean)|Sets whether 
|android.widget.ListPopupWindow.setDropDownGravity(int)|Set the gravity of the 
|android.widget.ListPopupWindow.setForceIgnoreOutsideTouch(boolean)|Forces outs
|android.widget.ListPopupWindow.setHeight(int)|Sets the height of the popup win
|android.widget.ListPopupWindow.setHorizontalOffset(int)|Set the horizontal off
|android.widget.ListPopupWindow.setInputMethodMode(int)|Control how the popup o
|android.widget.ListPopupWindow.setListSelector(Drawable)|Sets a drawable to us
|android.widget.ListPopupWindow.setModal(boolean)|Set whether this window shoul
|android.widget.ListPopupWindow.setOnDismissListener(PopupWindow.OnDismissListener)|
|android.widget.ListPopupWindow.setOnItemClickListener(AdapterView.OnItemClickListener)|
|android.widget.ListPopupWindow.setOnItemSelectedListener(AdapterView.OnItemSelectedListener)|
|android.widget.ListPopupWindow.setPromptPosition(int)|Set where the optional p
|android.widget.ListPopupWindow.setPromptView(View)|Set a view to act as a user
|android.widget.ListPopupWindow.setSelection(int)|Set the selected position of 
|android.widget.ListPopupWindow.setSoftInputMode(int)|Sets the operating mode f
|android.widget.ListPopupWindow.setVerticalOffset(int)|Set the vertical offset 
|android.widget.ListPopupWindow.setWidth(int)|Sets the width of the popup windo
|android.widget.ListPopupWindow.show()|Show the popup list.

*android.widget.ListPopupWindow_Description*

A ListPopupWindow anchors itself to a host view and displays a list of choices. 

ListPopupWindow contains a number of tricky behaviors surrounding positioning, 
scrolling parents to fit the dropdown, interacting sanely with the IME if 
present, and others. 



*int_android.widget.ListPopupWindow.INPUT_METHOD_FROM_FOCUSABLE*

Mode for (|android.widget.ListPopupWindow|) : the requirements for the input 
method should be based on the focusability of the popup. That is if it is 
focusable than it needs to work with the input method, else it doesn't. 


*int_android.widget.ListPopupWindow.INPUT_METHOD_NEEDED*

Mode for (|android.widget.ListPopupWindow|) : this popup always needs to work 
with an input method, regardless of whether it is focusable. This means that it 
will always be displayed so that the user can also operate the input method 
while it is shown. 


*int_android.widget.ListPopupWindow.INPUT_METHOD_NOT_NEEDED*

Mode for (|android.widget.ListPopupWindow|) : this popup never needs to work 
with an input method, regardless of whether it is focusable. This means that it 
will always be displayed to use as much space on the screen as needed, 
regardless of whether this covers the input method. 


*int_android.widget.ListPopupWindow.MATCH_PARENT*

Alias for (|ViewGroup.LayoutParams|) . If used to specify a popup width, the 
popup will match the width of the anchor view. If used to specify a popup 
height, the popup will fill available space. 


*int_android.widget.ListPopupWindow.POSITION_PROMPT_ABOVE*

The provided prompt view should appear above list content. 


*int_android.widget.ListPopupWindow.POSITION_PROMPT_BELOW*

The provided prompt view should appear below list content. 


*int_android.widget.ListPopupWindow.WRAP_CONTENT*

Alias for (|ViewGroup.LayoutParams|) . If used to specify a popup width, the 
popup will use the width of its content. 



*android.widget.ListPopupWindow(Context)*

public ListPopupWindow(android.content.Context context)

Create a new, empty popup window capable of displaying items from a 
ListAdapter. Backgrounds should be set using (|android.widget.ListPopupWindow|) 
. 

    context - Context used for contained views. 

*android.widget.ListPopupWindow(Context,AttributeSet)*

public ListPopupWindow(
  android.content.Context context,
  android.util.AttributeSet attrs)

Create a new, empty popup window capable of displaying items from a 
ListAdapter. Backgrounds should be set using (|android.widget.ListPopupWindow|) 
. 

    context - Context used for contained views. 
    attrs - Attributes from inflating parent views used to style the popup. 

*android.widget.ListPopupWindow(Context,AttributeSet,int)*

public ListPopupWindow(
  android.content.Context context,
  android.util.AttributeSet attrs,
  int defStyleAttr)

Create a new, empty popup window capable of displaying items from a 
ListAdapter. Backgrounds should be set using (|android.widget.ListPopupWindow|) 
. 

    context - Context used for contained views. 
    attrs - Attributes from inflating parent views used to style the popup. 
    defStyleAttr - Default style attribute to use for popup content. 

*android.widget.ListPopupWindow(Context,AttributeSet,int,int)*

public ListPopupWindow(
  android.content.Context context,
  android.util.AttributeSet attrs,
  int defStyleAttr,
  int defStyleRes)

Create a new, empty popup window capable of displaying items from a 
ListAdapter. Backgrounds should be set using (|android.widget.ListPopupWindow|) 
. 

    context - Context used for contained views. 
    attrs - Attributes from inflating parent views used to style the popup. 
    defStyleAttr - Style attribute to read for default styling of popup content. 
    defStyleRes - Style resource ID to use for default styling of popup content. 

*android.widget.ListPopupWindow.clearListSelection()*

public void clearListSelection()

Clear any current list selection. Only valid when 
(|android.widget.ListPopupWindow|) ==true. 



*android.widget.ListPopupWindow.createDragToOpenListener(View)*

public |android.view.View.OnTouchListener| createDragToOpenListener(android.view.View src)

Returns an (|android.view.View.OnTouchListener|) that can be added to the 
source view to implement drag-to-open behavior. Generally, the source view 
should be the same view that was passed to (|android.widget.ListPopupWindow|) . 

When the listener is set on a view, touching that view and dragging outside of 
its bounds will open the popup window. Lifting will select the currently 
touched list item. 

Example usage: 

ListPopupWindow myPopup = new ListPopupWindow(context); 
myPopup.setAnchor(myAnchor); OnTouchListener dragListener = 
myPopup.createDragToOpenListener(myAnchor); 
myAnchor.setOnTouchListener(dragListener); 


    src - the view on which the resulting listener will be set 

    Returns: a touch listener that controls drag-to-open behavior 

*android.widget.ListPopupWindow.dismiss()*

public void dismiss()

Dismiss the popup window. 



*android.widget.ListPopupWindow.getAnchorView()*

public |android.view.View| getAnchorView()

Returns the view that will be used to anchor this popup. 



    Returns: The popup's anchor view 

*android.widget.ListPopupWindow.getAnimationStyle()*

public int getAnimationStyle()

Returns the animation style that will be used when the popup window is shown or 
dismissed. 



    Returns: Animation style that will be used. 

*android.widget.ListPopupWindow.getBackground()*

public Drawable getBackground()





    Returns: The background drawable for the popup window. 

*android.widget.ListPopupWindow.getHeight()*

public int getHeight()





    Returns: The height of the popup window in pixels. 

*android.widget.ListPopupWindow.getHorizontalOffset()*

public int getHorizontalOffset()





    Returns: The horizontal offset of the popup from its anchor in pixels. 

*android.widget.ListPopupWindow.getInputMethodMode()*

public int getInputMethodMode()

Return the current value in (|android.widget.ListPopupWindow|) . 



*android.widget.ListPopupWindow.getListView()*

public |android.widget.ListView| getListView()





    Returns: The {@link ListView} displayed within the popup window. Only valid when {@link 
             #isShowing()} == {@code true}. 

*android.widget.ListPopupWindow.getPromptPosition()*

public int getPromptPosition()





    Returns: Where the optional prompt view should appear. 

*android.widget.ListPopupWindow.getSelectedItem()*

public |java.lang.Object| getSelectedItem()





    Returns: The currently selected item or null if the popup is not showing. 

*android.widget.ListPopupWindow.getSelectedItemId()*

public long getSelectedItemId()





    Returns: The ID of the currently selected item or {@link ListView#INVALID_ROW_ID} if 
             {@link #isShowing()} == {@code false}. 

*android.widget.ListPopupWindow.getSelectedItemPosition()*

public int getSelectedItemPosition()





    Returns: The position of the currently selected item or {@link 
             ListView#INVALID_POSITION} if {@link #isShowing()} == {@code 
             false}. 

*android.widget.ListPopupWindow.getSelectedView()*

public |android.view.View| getSelectedView()





    Returns: The View for the currently selected item or null if {@link #isShowing()} == 
             {@code false}. 

*android.widget.ListPopupWindow.getSoftInputMode()*

public int getSoftInputMode()

Returns the current value in (|android.widget.ListPopupWindow|) . 



*android.widget.ListPopupWindow.getVerticalOffset()*

public int getVerticalOffset()





    Returns: The vertical offset of the popup from its anchor in pixels. 

*android.widget.ListPopupWindow.getWidth()*

public int getWidth()





    Returns: The width of the popup window in pixels. 

*android.widget.ListPopupWindow.isDropDownAlwaysVisible()*

public boolean isDropDownAlwaysVisible()





    Returns: Whether the drop-down is visible under special conditions. 

*android.widget.ListPopupWindow.isInputMethodNotNeeded()*

public boolean isInputMethodNotNeeded()





    Returns: {@code true} if this popup is configured to assume the user does not need to 
             interact with the IME while it is showing, {@code false} 
             otherwise. 

*android.widget.ListPopupWindow.isModal()*

public boolean isModal()

Returns whether the popup window will be modal when shown. 



    Returns: {@code true} if the popup window will be modal, {@code false} otherwise. 

*android.widget.ListPopupWindow.isShowing()*

public boolean isShowing()





    Returns: {@code true} if the popup is currently showing, {@code false} otherwise. 

*android.widget.ListPopupWindow.onKeyDown(int,KeyEvent)*

public boolean onKeyDown(
  int keyCode,
  android.view.KeyEvent event)

Filter key down events. By forwarding key down events to this function, views 
using non-modal ListPopupWindow can have it handle key selection of items. 


    keyCode - keyCode param passed to the host view's onKeyDown 
    event - event param passed to the host view's onKeyDown 

    Returns: true if the event was handled, false if it was ignored. 

*android.widget.ListPopupWindow.onKeyPreIme(int,KeyEvent)*

public boolean onKeyPreIme(
  int keyCode,
  android.view.KeyEvent event)

Filter pre-IME key events. By forwarding (|android.view.View|) events to this 
function, views using ListPopupWindow can have it dismiss the popup when the 
back key is pressed. 


    keyCode - keyCode param passed to the host view's onKeyPreIme 
    event - event param passed to the host view's onKeyPreIme 

    Returns: true if the event was handled, false if it was ignored. 

*android.widget.ListPopupWindow.onKeyUp(int,KeyEvent)*

public boolean onKeyUp(
  int keyCode,
  android.view.KeyEvent event)

Filter key down events. By forwarding key up events to this function, views 
using non-modal ListPopupWindow can have it handle key selection of items. 


    keyCode - keyCode param passed to the host view's onKeyUp 
    event - event param passed to the host view's onKeyUp 

    Returns: true if the event was handled, false if it was ignored. 

*android.widget.ListPopupWindow.performItemClick(int)*

public boolean performItemClick(int position)

Perform an item click operation on the specified list adapter position. 


    position - Adapter position for performing the click 

    Returns: true if the click action could be performed, false if not. (e.g. if the popup 
             was not showing, this method would return false.) 

*android.widget.ListPopupWindow.postShow()*

public void postShow()

Post a (|android.widget.ListPopupWindow|) call to the UI thread. 



*android.widget.ListPopupWindow.setAdapter(ListAdapter)*

public void setAdapter(android.widget.ListAdapter adapter)

Sets the adapter that provides the data and the views to represent the data in 
this popup window. 


    adapter - The adapter to use to create this window's content. 

*android.widget.ListPopupWindow.setAnchorView(View)*

public void setAnchorView(android.view.View anchor)

Sets the popup's anchor view. This popup will always be positioned relative to 
the anchor view when shown. 


    anchor - The view to use as an anchor. 

*android.widget.ListPopupWindow.setAnimationStyle(int)*

public void setAnimationStyle(int animationStyle)

Set an animation style to use when the popup window is shown or dismissed. 


    animationStyle - Animation style to use. 

*android.widget.ListPopupWindow.setBackgroundDrawable(Drawable)*

public void setBackgroundDrawable(Drawable d)

Sets a drawable to be the background for the popup window. 


    d - A drawable to set as the background. 

*android.widget.ListPopupWindow.setContentWidth(int)*

public void setContentWidth(int width)

Sets the width of the popup window by the size of its content. The final width 
may be larger to accommodate styled window dressing. 


    width - Desired width of content in pixels. 

*android.widget.ListPopupWindow.setDropDownAlwaysVisible(boolean)*

public void setDropDownAlwaysVisible(boolean dropDownAlwaysVisible)

Sets whether the drop-down should remain visible under certain conditions. 

The drop-down will occupy the entire screen below 
(|android.widget.ListPopupWindow|) regardless of the size or content of the 
list. (|android.widget.ListPopupWindow|) will fill any space that is not used 
by the list. 


    dropDownAlwaysVisible - Whether to keep the drop-down visible. 

*android.widget.ListPopupWindow.setDropDownGravity(int)*

public void setDropDownGravity(int gravity)

Set the gravity of the dropdown list. This is commonly used to set gravity to 
START or END for alignment with the anchor. 


    gravity - Gravity value to use 

*android.widget.ListPopupWindow.setForceIgnoreOutsideTouch(boolean)*

public void setForceIgnoreOutsideTouch(boolean forceIgnoreOutsideTouch)

Forces outside touches to be ignored. Normally if 
(|android.widget.ListPopupWindow|) is false, we allow outside touch to dismiss 
the dropdown. If this is set to true, then we ignore outside touch even when 
the drop down is not set to always visible. 



*android.widget.ListPopupWindow.setHeight(int)*

public void setHeight(int height)

Sets the height of the popup window in pixels. Can also be 
(|android.widget.ListPopupWindow|) . 


    height - Height of the popup window. 

*android.widget.ListPopupWindow.setHorizontalOffset(int)*

public void setHorizontalOffset(int offset)

Set the horizontal offset of this popup from its anchor view in pixels. 


    offset - The horizontal offset of the popup from its anchor. 

*android.widget.ListPopupWindow.setInputMethodMode(int)*

public void setInputMethodMode(int mode)

Control how the popup operates with an input method: one of 
(|android.widget.ListPopupWindow|) , (|android.widget.ListPopupWindow|) , or 
(|android.widget.ListPopupWindow|) . 

If the popup is showing, calling this method will take effect only the next 
time the popup is shown or through a manual call to the 
(|android.widget.ListPopupWindow|) method. 



*android.widget.ListPopupWindow.setListSelector(Drawable)*

public void setListSelector(Drawable selector)

Sets a drawable to use as the list item selector. 


    selector - List selector drawable to use in the popup. 

*android.widget.ListPopupWindow.setModal(boolean)*

public void setModal(boolean modal)

Set whether this window should be modal when shown. 

If a popup window is modal, it will receive all touch and key input. If the 
user touches outside the popup window's content area the popup window will be 
dismissed. 


    modal - {@code true} if the popup window should be modal, {@code false} otherwise. 

*android.widget.ListPopupWindow.setOnDismissListener(PopupWindow.OnDismissListener)*

public void setOnDismissListener(android.widget.PopupWindow.OnDismissListener listener)

Set a listener to receive a callback when the popup is dismissed. 


    listener - Listener that will be notified when the popup is dismissed. 

*android.widget.ListPopupWindow.setOnItemClickListener(AdapterView.OnItemClickListener)*

public void setOnItemClickListener(android.widget.AdapterView.OnItemClickListener clickListener)

Sets a listener to receive events when a list item is clicked. 


    clickListener - Listener to register 

*android.widget.ListPopupWindow.setOnItemSelectedListener(AdapterView.OnItemSelectedListener)*

public void setOnItemSelectedListener(android.widget.AdapterView.OnItemSelectedListener selectedListener)

Sets a listener to receive events when a list item is selected. 


    selectedListener - Listener to register. 

*android.widget.ListPopupWindow.setPromptPosition(int)*

public void setPromptPosition(int position)

Set where the optional prompt view should appear. The default is 
(|android.widget.ListPopupWindow|) . 


    position - A position constant declaring where the prompt should be displayed. 

*android.widget.ListPopupWindow.setPromptView(View)*

public void setPromptView(android.view.View prompt)

Set a view to act as a user prompt for this popup window. Where the prompt view 
will appear is controlled by (|android.widget.ListPopupWindow|) . 


    prompt - View to use as an informational prompt. 

*android.widget.ListPopupWindow.setSelection(int)*

public void setSelection(int position)

Set the selected position of the list. Only valid when 
(|android.widget.ListPopupWindow|) ==true. 


    position - List position to set as selected. 

*android.widget.ListPopupWindow.setSoftInputMode(int)*

public void setSoftInputMode(int mode)

Sets the operating mode for the soft input area. 


    mode - The desired mode, see {@link 
       android.view.WindowManager.LayoutParams#softInputMode} for the full list 

*android.widget.ListPopupWindow.setVerticalOffset(int)*

public void setVerticalOffset(int offset)

Set the vertical offset of this popup from its anchor view in pixels. 


    offset - The vertical offset of the popup from its anchor. 

*android.widget.ListPopupWindow.setWidth(int)*

public void setWidth(int width)

Sets the width of the popup window in pixels. Can also be 
(|android.widget.ListPopupWindow|) or (|android.widget.ListPopupWindow|) . 


    width - Width of the popup window. 

*android.widget.ListPopupWindow.show()*

public void show()

Show the popup list. If the list is already showing, this method will 
recalculate the popup's size and position. 




