*android.widget.Switch* *Switch* A Switch is a two-state toggle switch widget th

public class Switch
  extends    |android.widget.CompoundButton|

|android.widget.Switch_Description|
|android.widget.Switch_Fields|
|android.widget.Switch_Constructors|
|android.widget.Switch_Methods|

================================================================================

*android.widget.Switch_Constructors*
|android.widget.Switch(Context)|Construct a new Switch with default styling.
|android.widget.Switch(Context,AttributeSet)|Construct a new Switch with defaul
|android.widget.Switch(Context,AttributeSet,int)|Construct a new Switch with a 

*android.widget.Switch_Methods*
|android.widget.Switch.drawableStateChanged()|
|android.widget.Switch.getCompoundPaddingLeft()|
|android.widget.Switch.getCompoundPaddingRight()|
|android.widget.Switch.getSwitchMinWidth()|Get the minimum width of the switch 
|android.widget.Switch.getSwitchPadding()|Get the amount of horizontal padding 
|android.widget.Switch.getTextOff()|Returns the text displayed when the button 
|android.widget.Switch.getTextOn()|Returns the text displayed when the button i
|android.widget.Switch.getThumbDrawable()|Get the drawable used for the switch 
|android.widget.Switch.getThumbTextPadding()|Get the horizontal padding around 
|android.widget.Switch.getTrackDrawable()|Get the drawable used for the track t
|android.widget.Switch.jumpDrawablesToCurrentState()|
|android.widget.Switch.onCreateDrawableState(int)|
|android.widget.Switch.onDraw(Canvas)|
|android.widget.Switch.onInitializeAccessibilityEvent(AccessibilityEvent)|
|android.widget.Switch.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)|
|android.widget.Switch.onLayout(boolean,int,int,int,int)|
|android.widget.Switch.onMeasure(int,int)|
|android.widget.Switch.onPopulateAccessibilityEvent(AccessibilityEvent)|
|android.widget.Switch.onTouchEvent(MotionEvent)|
|android.widget.Switch.setChecked(boolean)|
|android.widget.Switch.setSwitchMinWidth(int)|Set the minimum width of the swit
|android.widget.Switch.setSwitchPadding(int)|Set the amount of horizontal paddi
|android.widget.Switch.setSwitchTextAppearance(Context,int)|Sets the switch tex
|android.widget.Switch.setSwitchTypeface(Typeface)|Sets the typeface in which t
|android.widget.Switch.setSwitchTypeface(Typeface,int)|Sets the typeface and st
|android.widget.Switch.setTextOff(CharSequence)|Sets the text displayed when th
|android.widget.Switch.setTextOn(CharSequence)|Sets the text displayed when the
|android.widget.Switch.setThumbDrawable(Drawable)|Set the drawable used for the
|android.widget.Switch.setThumbResource(int)|Set the drawable used for the swit
|android.widget.Switch.setThumbTextPadding(int)|Set the horizontal padding arou
|android.widget.Switch.setTrackDrawable(Drawable)|Set the drawable used for the
|android.widget.Switch.setTrackResource(int)|Set the drawable used for the trac
|android.widget.Switch.verifyDrawable(Drawable)|

*android.widget.Switch_Description*

A Switch is a two-state toggle switch widget that can select between two 
options. The user may drag the "thumb" back and forth to choose the selected 
option, or simply tap to toggle as if it were a checkbox. The 
text(|android.widget.Switch|) property controls the text displayed in the label 
for the switch, whereas the off(|android.widget.Switch|) and 
on(|android.widget.Switch|) text controls the text on the thumb. Similarly, the 
textAppearance(|android.widget.Switch|) and the related setTypeface() methods 
control the typeface and style of label text, whereas the 
switchTextAppearance(|android.widget.Switch|) and the related 
seSwitchTypeface() methods control that of the thumb. 

See the <a href="guide/topics/ui/controls/togglebutton.html">Toggle Buttons 
guide. 



*android.widget.Switch(Context)*

public Switch(android.content.Context context)

Construct a new Switch with default styling. 

    context - The Context that will determine this widget's theming. 

*android.widget.Switch(Context,AttributeSet)*

public Switch(
  android.content.Context context,
  android.util.AttributeSet attrs)

Construct a new Switch with default styling, overriding specific style 
attributes as requested. 

    context - The Context that will determine this widget's theming. 
    attrs - Specification of attributes that should deviate from default styling. 

*android.widget.Switch(Context,AttributeSet,int)*

public Switch(
  android.content.Context context,
  android.util.AttributeSet attrs,
  int defStyle)

Construct a new Switch with a default style determined by the given theme 
attribute, overriding specific style attributes as requested. 

    context - The Context that will determine this widget's theming. 
    attrs - Specification of attributes that should deviate from the default styling. 
    defStyle - An attribute ID within the active theme containing a reference to the default 
       style for this widget. e.g. android.R.attr.switchStyle. 

*android.widget.Switch.drawableStateChanged()*

protected void drawableStateChanged()





*android.widget.Switch.getCompoundPaddingLeft()*

public int getCompoundPaddingLeft()





*android.widget.Switch.getCompoundPaddingRight()*

public int getCompoundPaddingRight()





*android.widget.Switch.getSwitchMinWidth()*

public int getSwitchMinWidth()

Get the minimum width of the switch in pixels. The switch's width will be the 
maximum of this value and its measured width as determined by the switch 
drawables and text used. 



    Returns: Minimum width of the switch in pixels 

*android.widget.Switch.getSwitchPadding()*

public int getSwitchPadding()

Get the amount of horizontal padding between the switch and the associated 
text. 



    Returns: Amount of padding in pixels 

*android.widget.Switch.getTextOff()*

public |java.lang.CharSequence| getTextOff()

Returns the text displayed when the button is not in the checked state. 



*android.widget.Switch.getTextOn()*

public |java.lang.CharSequence| getTextOn()

Returns the text displayed when the button is in the checked state. 



*android.widget.Switch.getThumbDrawable()*

public Drawable getThumbDrawable()

Get the drawable used for the switch "thumb" - the piece that the user can 
physically touch and drag along the track. 



    Returns: Thumb drawable 

*android.widget.Switch.getThumbTextPadding()*

public int getThumbTextPadding()

Get the horizontal padding around the text drawn on the switch itself. 



    Returns: Horizontal padding for switch thumb text in pixels 

*android.widget.Switch.getTrackDrawable()*

public Drawable getTrackDrawable()

Get the drawable used for the track that the switch slides within. 



    Returns: Track drawable 

*android.widget.Switch.jumpDrawablesToCurrentState()*

public void jumpDrawablesToCurrentState()





*android.widget.Switch.onCreateDrawableState(int)*

protected int[] onCreateDrawableState(int extraSpace)





*android.widget.Switch.onDraw(Canvas)*

protected void onDraw(Canvas canvas)





*android.widget.Switch.onInitializeAccessibilityEvent(AccessibilityEvent)*

public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent event)





*android.widget.Switch.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)*

public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo info)





*android.widget.Switch.onLayout(boolean,int,int,int,int)*

protected void onLayout(
  boolean changed,
  int left,
  int top,
  int right,
  int bottom)





*android.widget.Switch.onMeasure(int,int)*

public void onMeasure(
  int widthMeasureSpec,
  int heightMeasureSpec)





*android.widget.Switch.onPopulateAccessibilityEvent(AccessibilityEvent)*

public void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent event)





*android.widget.Switch.onTouchEvent(MotionEvent)*

public boolean onTouchEvent(android.view.MotionEvent ev)





*android.widget.Switch.setChecked(boolean)*

public void setChecked(boolean checked)





*android.widget.Switch.setSwitchMinWidth(int)*

public void setSwitchMinWidth(int pixels)

Set the minimum width of the switch in pixels. The switch's width will be the 
maximum of this value and its measured width as determined by the switch 
drawables and text used. 


    pixels - Minimum width of the switch in pixels 

*android.widget.Switch.setSwitchPadding(int)*

public void setSwitchPadding(int pixels)

Set the amount of horizontal padding between the switch and the associated 
text. 


    pixels - Amount of padding in pixels 

*android.widget.Switch.setSwitchTextAppearance(Context,int)*

public void setSwitchTextAppearance(
  android.content.Context context,
  int resid)

Sets the switch text color, size, style, hint color, and highlight color from 
the specified TextAppearance resource. 



*android.widget.Switch.setSwitchTypeface(Typeface)*

public void setSwitchTypeface(Typeface tf)

Sets the typeface in which the text should be displayed on the switch. Note 
that not all Typeface families actually have bold and italic variants, so you 
may need to use (|android.widget.Switch|) to get the appearance that you 
actually want. 



*android.widget.Switch.setSwitchTypeface(Typeface,int)*

public void setSwitchTypeface(
  Typeface tf,
  int style)

Sets the typeface and style in which the text should be displayed on the 
switch, and turns on the fake bold and italic bits in the Paint if the Typeface 
that you provided does not have all the bits in the style that you specified. 



*android.widget.Switch.setTextOff(CharSequence)*

public void setTextOff(java.lang.CharSequence textOff)

Sets the text displayed when the button is not in the checked state. 



*android.widget.Switch.setTextOn(CharSequence)*

public void setTextOn(java.lang.CharSequence textOn)

Sets the text displayed when the button is in the checked state. 



*android.widget.Switch.setThumbDrawable(Drawable)*

public void setThumbDrawable(Drawable thumb)

Set the drawable used for the switch "thumb" - the piece that the user can 
physically touch and drag along the track. 


    thumb - Thumb drawable 

*android.widget.Switch.setThumbResource(int)*

public void setThumbResource(int resId)

Set the drawable used for the switch "thumb" - the piece that the user can 
physically touch and drag along the track. 


    resId - Resource ID of a thumb drawable 

*android.widget.Switch.setThumbTextPadding(int)*

public void setThumbTextPadding(int pixels)

Set the horizontal padding around the text drawn on the switch itself. 


    pixels - Horizontal padding for switch thumb text in pixels 

*android.widget.Switch.setTrackDrawable(Drawable)*

public void setTrackDrawable(Drawable track)

Set the drawable used for the track that the switch slides within. 


    track - Track drawable 

*android.widget.Switch.setTrackResource(int)*

public void setTrackResource(int resId)

Set the drawable used for the track that the switch slides within. 


    resId - Resource ID of a track drawable 

*android.widget.Switch.verifyDrawable(Drawable)*

protected boolean verifyDrawable(Drawable who)






