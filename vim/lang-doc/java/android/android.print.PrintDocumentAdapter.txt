*android.print.PrintDocumentAdapter* *PrintDocumentAdapter* Base class that prov

public abstract class PrintDocumentAdapter
  extends    |java.lang.Object|

|android.print.PrintDocumentAdapter_Description|
|android.print.PrintDocumentAdapter_Fields|
|android.print.PrintDocumentAdapter_Constructors|
|android.print.PrintDocumentAdapter_Methods|

================================================================================

*android.print.PrintDocumentAdapter_Fields*
|java.lang.String_android.print.PrintDocumentAdapter.EXTRA_PRINT_PREVIEW|

*android.print.PrintDocumentAdapter_Constructors*
|android.print.PrintDocumentAdapter()|

*android.print.PrintDocumentAdapter_Methods*
|android.print.PrintDocumentAdapter.onFinish()|Called when printing finishes.
|android.print.PrintDocumentAdapter.onLayout(PrintAttributes,PrintAttributes,CancellationSignal,PrintDocumentAdapter.LayoutResultCallback,Bundle)|
|android.print.PrintDocumentAdapter.onStart()|Called when printing starts.
|android.print.PrintDocumentAdapter.onWrite(PageRange[],ParcelFileDescriptor,CancellationSignal,PrintDocumentAdapter.WriteResultCallback)|

*android.print.PrintDocumentAdapter_Description*

Base class that provides the content of a document to be printed. 

Lifecycle 



Initially, you will receive a call to (|android.print.PrintDocumentAdapter|) . 
This callback can be used to allocate resources. 

Next, you will get one or more calls to (|android.print.PrintDocumentAdapter|) 
to inform you that the print attributes (page size, density, etc) changed 
giving you an opportunity to layout the content to match the new constraints. 

After every call to (|android.print.PrintDocumentAdapter|) , you may get a call 
to (|android.print.PrintDocumentAdapter|) asking you to write a PDF file with 
the content for specific pages. 

Finally, you will receive a call to (|android.print.PrintDocumentAdapter|) . 
You can use this callback to release resources allocated in 
(|android.print.PrintDocumentAdapter|) . 



The (|android.print.PrintDocumentAdapter|) callback is always the first call 
you will receive and is useful for doing one time setup or resource allocation 
before printing. You will not receive a subsequent call here. 

The (|android.print.PrintDocumentAdapter|) callback requires that you layout 
the content based on the current (|android.print.PrintAttributes|) . The 
execution of this method is not considered completed until you invoke one of 
the methods on the passed in callback instance. Hence, you will not receive a 
subsequent call to any other method of this class until the execution of this 
method is complete by invoking one of the callback methods. 

The (|android.print.PrintDocumentAdapter|) requires that you render and write 
the content of some pages to the provided destination. The execution of this 
method is not considered complete until you invoke one of the methods on the 
passed in callback instance. Hence, you will not receive a subsequent call to 
any other method of this class until the execution of this method is complete 
by invoking one of the callback methods. You will never receive a sequence of 
one or more calls to this method without a previous call to 
(|android.print.PrintDocumentAdapter|) . 

The (|android.print.PrintDocumentAdapter|) callback is always the last call you 
will receive and is useful for doing one time cleanup or resource deallocation 
after printing. You will not receive a subsequent call here. 

Implementation 

The APIs defined in this class are designed to enable doing part or all of the 
work on an arbitrary thread. For example, if the printed content does not 
depend on the UI state, i.e. on what is shown on the screen, then you can 
offload the entire work on a dedicated thread, thus making your application 
interactive while the print work is being performed. Note that while your 
activity is covered by the system print UI and a user cannot interact with it, 
doing the printing work on the main application thread may affect the 
performance of your other application components as they are also executed on 
that thread. 

You can also do work on different threads, for example if you print UI content, 
you can handle (|android.print.PrintDocumentAdapter|) and 
(|android.print.PrintDocumentAdapter|) on the UI thread (assuming onStart 
initializes resources needed for layout). This will ensure that the UI does not 
change while you are laying out the printed content. Then you can handle 
(|android.print.PrintDocumentAdapter|) and 
(|android.print.PrintDocumentAdapter|) on another thread. This will ensure that 
the main thread is busy for a minimal amount of time. Also this assumes that 
you will generate the printed content in (|android.print.PrintDocumentAdapter|) 
which is not mandatory. If you use multiple threads, you are responsible for 
proper synchronization. 



*java.lang.String_android.print.PrintDocumentAdapter.EXTRA_PRINT_PREVIEW*

Extra: mapped to a boolean value that is true if the current layout is for a 
print preview, false otherwise. This extra is provided in the 
(|android.os.Bundle|) argument of the (|android.print.PrintDocumentAdapter|) 
callback. 



*android.print.PrintDocumentAdapter()*

public PrintDocumentAdapter()




*android.print.PrintDocumentAdapter.onFinish()*

public void onFinish()

Called when printing finishes. You can use this callback to release resources 
acquired in (|android.print.PrintDocumentAdapter|) . This method is invoked on 
the main thread. 



*android.print.PrintDocumentAdapter.onLayout(PrintAttributes,PrintAttributes,CancellationSignal,PrintDocumentAdapter.LayoutResultCallback,Bundle)*

public abstract void onLayout(
  android.print.PrintAttributes oldAttributes,
  android.print.PrintAttributes newAttributes,
  android.os.CancellationSignal cancellationSignal,
  android.print.PrintDocumentAdapter.LayoutResultCallback callback,
  android.os.Bundle extras)

Called when the print attributes (page size, density, etc) changed giving you a 
chance to layout the content such that it matches the new constraints. This 
method is invoked on the main thread. 

After you are done laying out, you must invoke: 
(|android.print.PrintDocumentAdapter.LayoutResultCallback|) with the last 
argument true or false depending on whether the layout changed the content or 
not, respectively; or 
(|android.print.PrintDocumentAdapter.LayoutResultCallback|) , if an error 
occurred; or (|android.print.PrintDocumentAdapter.LayoutResultCallback|) if 
layout was cancelled in a response to a cancellation request via the passed in 
(|android.os.CancellationSignal|) . Note that you must call one of the methods 
of the given callback for this method to be considered complete which is you 
will not receive any calls to this adapter until the current layout operation 
is complete by invoking a method on the callback instance. The callback methods 
can be invoked from an arbitrary thread. 

One of the arguments passed to this method is a 
(|android.os.CancellationSignal|) which is used to propagate requests from the 
system to your application for canceling the current layout operation. For 
example, a cancellation may be requested if the user changes a print option 
that may affect layout while you are performing a layout operation. In such a 
case the system will make an attempt to cancel the current layout as another 
one will have to be performed. Typically, you should register a cancellation 
callback in the cancellation signal. The cancellation callback will not be made 
on the main thread and can be registered as follows: 



cancellationSignal.setOnCancelListener(new OnCancelListener() { Override public 
void onCancel() { // Cancel layout } }); 

Note: If the content is large and a layout will be performed, it is a good 
practice to schedule the work on a dedicated thread and register an observer in 
the provided (|android.os.CancellationSignal|) upon invocation of which you 
should stop the layout. 


    oldAttributes - The old print attributes. 
    newAttributes - The new print attributes. 
    cancellationSignal - Signal for observing cancel layout requests. 
    callback - Callback to inform the system for the layout result. 
    extras - Additional information about how to layout the content. 

*android.print.PrintDocumentAdapter.onStart()*

public void onStart()

Called when printing starts. You can use this callback to allocate resources. 
This method is invoked on the main thread. 



*android.print.PrintDocumentAdapter.onWrite(PageRange[],ParcelFileDescriptor,CancellationSignal,PrintDocumentAdapter.WriteResultCallback)*

public abstract void onWrite(
  android.print.PageRange[] pages,
  android.os.ParcelFileDescriptor destination,
  android.os.CancellationSignal cancellationSignal,
  android.print.PrintDocumentAdapter.WriteResultCallback callback)

Called when specific pages of the content should be written in the form of a 
PDF file to the given file descriptor. This method is invoked on the main 
thread. 

After you are done writing, you should close the file descriptor and invoke 
(|android.print.PrintDocumentAdapter.WriteResultCallback|) , if writing 
completed successfully; or 
(|android.print.PrintDocumentAdapter.WriteResultCallback|) , if an error 
occurred; or (|android.print.PrintDocumentAdapter.WriteResultCallback|) , if 
writing was cancelled in a response to a cancellation request via the passed in 
(|android.os.CancellationSignal|) . Note that you must call one of the methods 
of the given callback for this method to be considered complete which is you 
will not receive any calls to this adapter until the current write operation is 
complete by invoking a method on the callback instance. The callback methods 
can be invoked from an arbitrary thread. 

One of the arguments passed to this method is a 
(|android.os.CancellationSignal|) which is used to propagate requests from the 
system to your application for canceling the current write operation. For 
example, a cancellation may be requested if the user changes a print option 
that may affect layout while you are performing a write operation. In such a 
case the system will make an attempt to cancel the current write as a layout 
will have to be performed which then may be followed by a write. Typically, you 
should register a cancellation callback in the cancellation signal. The 
cancellation callback will not be made on the main thread and can be registered 
as follows: 



cancellationSignal.setOnCancelListener(new OnCancelListener() { Override public 
void onCancel() { // Cancel write } }); 

Note: If the printed content is large, it is a good practice to schedule 
writing it on a dedicated thread and register an observer in the provided 
(|android.os.CancellationSignal|) upon invocation of which you should stop 
writing. 


    pages - The pages whose content to print - non-overlapping in ascending order. 
    destination - The destination file descriptor to which to write. 
    cancellationSignal - Signal for observing cancel writing requests. 
    callback - Callback to inform the system for the write result. 


