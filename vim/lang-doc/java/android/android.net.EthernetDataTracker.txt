*android.net.EthernetDataTracker* *EthernetDataTracker* This class tracks the da

public class EthernetDataTracker
  extends    |android.net.BaseNetworkStateTracker|

|android.net.EthernetDataTracker_Description|
|android.net.EthernetDataTracker_Fields|
|android.net.EthernetDataTracker_Constructors|
|android.net.EthernetDataTracker_Methods|

================================================================================

*android.net.EthernetDataTracker_Methods*
|android.net.EthernetDataTracker.addStackedLink(LinkProperties)|
|android.net.EthernetDataTracker.captivePortalCheckComplete()|
|android.net.EthernetDataTracker.captivePortalCheckCompleted(boolean)|
|android.net.EthernetDataTracker.Clone()|
|android.net.EthernetDataTracker.defaultRouteSet(boolean)|Set a flag indicating
|android.net.EthernetDataTracker.disconnect()|
|android.net.EthernetDataTracker.getDefaultGatewayAddr()|Fetch default gateway 
|android.net.EthernetDataTracker.getInstance()|
|android.net.EthernetDataTracker.getLinkCapabilities()|A capability is an Integ
|android.net.EthernetDataTracker.getLinkProperties()|Fetch LinkProperties for t
|android.net.EthernetDataTracker.getNetworkInfo()|Fetch NetworkInfo for the net
|android.net.EthernetDataTracker.getTcpBufferSizesPropName()|Return the system 
|android.net.EthernetDataTracker.isAvailable()|
|android.net.EthernetDataTracker.isDefaultRouteSet()|Check if default route is 
|android.net.EthernetDataTracker.isPrivateDnsRouteSet()|Check if private DNS ro
|android.net.EthernetDataTracker.isTeardownRequested()|
|android.net.EthernetDataTracker.privateDnsRouteSet(boolean)|Set a flag indicat
|android.net.EthernetDataTracker.reconnect()|Re-enable connectivity to a networ
|android.net.EthernetDataTracker.removeStackedLink(LinkProperties)|
|android.net.EthernetDataTracker.setDependencyMet(boolean)|
|android.net.EthernetDataTracker.setPolicyDataEnable(boolean)|
|android.net.EthernetDataTracker.setRadio(boolean)|Turn the wireless radio off 
|android.net.EthernetDataTracker.setTeardownRequested(boolean)|
|android.net.EthernetDataTracker.setUserDataEnable(boolean)|
|android.net.EthernetDataTracker.startMonitoring(Context,Handler)|Begin monitor
|android.net.EthernetDataTracker.startUsingNetworkFeature(String,int,int)|Tells
|android.net.EthernetDataTracker.stopUsingNetworkFeature(String,int,int)|Tells 
|android.net.EthernetDataTracker.supplyMessenger(Messenger)|
|android.net.EthernetDataTracker.teardown()|Disable connectivity to a network  

*android.net.EthernetDataTracker_Description*

This class tracks the data connection associated with Ethernet This is a 
singleton class and an instance will be created by ConnectivityService. 



*android.net.EthernetDataTracker.addStackedLink(LinkProperties)*

public void addStackedLink(android.net.LinkProperties link)





*android.net.EthernetDataTracker.captivePortalCheckComplete()*

public void captivePortalCheckComplete()





*android.net.EthernetDataTracker.captivePortalCheckCompleted(boolean)*

public void captivePortalCheckCompleted(boolean isCaptivePortal)





*android.net.EthernetDataTracker.Clone()*

public |java.lang.Object| Clone()
  throws |java.lang.CloneNotSupportedException|
         




*android.net.EthernetDataTracker.defaultRouteSet(boolean)*

public void defaultRouteSet(boolean enabled)

Set a flag indicating default route is set for the network 



*android.net.EthernetDataTracker.disconnect()*

public void disconnect()





*android.net.EthernetDataTracker.getDefaultGatewayAddr()*

public int getDefaultGatewayAddr()

Fetch default gateway address for the network 



*android.net.EthernetDataTracker.getInstance()*

public static synchronized |android.net.EthernetDataTracker| getInstance()





*android.net.EthernetDataTracker.getLinkCapabilities()*

public |android.net.LinkCapabilities| getLinkCapabilities()

A capability is an Integer/String pair, the capabilities are defined in the 
class LinkSocket#Key. 



    Returns: a copy of this connections capabilities, may be empty but never null. 

*android.net.EthernetDataTracker.getLinkProperties()*

public synchronized |android.net.LinkProperties| getLinkProperties()

Fetch LinkProperties for the network 



*android.net.EthernetDataTracker.getNetworkInfo()*

public synchronized |android.net.NetworkInfo| getNetworkInfo()

Fetch NetworkInfo for the network 



*android.net.EthernetDataTracker.getTcpBufferSizesPropName()*

public |java.lang.String| getTcpBufferSizesPropName()

Return the system properties name associated with the tcp buffer sizes for this 
network. 



*android.net.EthernetDataTracker.isAvailable()*

public synchronized boolean isAvailable()





    Returns: true - If are we currently tethered with another device. 

*android.net.EthernetDataTracker.isDefaultRouteSet()*

public boolean isDefaultRouteSet()

Check if default route is set 



*android.net.EthernetDataTracker.isPrivateDnsRouteSet()*

public boolean isPrivateDnsRouteSet()

Check if private DNS route is set for the network 



*android.net.EthernetDataTracker.isTeardownRequested()*

public boolean isTeardownRequested()





*android.net.EthernetDataTracker.privateDnsRouteSet(boolean)*

public void privateDnsRouteSet(boolean enabled)

Set a flag indicating private DNS route is set 



*android.net.EthernetDataTracker.reconnect()*

public boolean reconnect()

Re-enable connectivity to a network after a (|android.net.EthernetDataTracker|) 
. 



*android.net.EthernetDataTracker.removeStackedLink(LinkProperties)*

public void removeStackedLink(android.net.LinkProperties link)





*android.net.EthernetDataTracker.setDependencyMet(boolean)*

public void setDependencyMet(boolean met)





*android.net.EthernetDataTracker.setPolicyDataEnable(boolean)*

public void setPolicyDataEnable(boolean enabled)





*android.net.EthernetDataTracker.setRadio(boolean)*

public boolean setRadio(boolean turnOn)

Turn the wireless radio off for a network. 


    turnOn - {@code true} to turn the radio on, {@code false} 

*android.net.EthernetDataTracker.setTeardownRequested(boolean)*

public void setTeardownRequested(boolean isRequested)





*android.net.EthernetDataTracker.setUserDataEnable(boolean)*

public void setUserDataEnable(boolean enabled)





*android.net.EthernetDataTracker.startMonitoring(Context,Handler)*

public void startMonitoring(
  android.content.Context context,
  android.os.Handler target)

Begin monitoring connectivity 



*android.net.EthernetDataTracker.startUsingNetworkFeature(String,int,int)*

public int startUsingNetworkFeature(
  java.lang.String feature,
  int callingPid,
  int callingUid)

Tells the underlying networking system that the caller wants to begin using the 
named feature. The interpretation offeatureis completely up to each networking 
implementation. 


    feature - the name of the feature to be used 
    callingPid - the process ID of the process that is issuing this request 
    callingUid - the user ID of the process that is issuing this request 

    Returns: an integer value representing the outcome of the request. The interpretation of 
             this value is specific to each networking implementation+feature 
             combination, except that the value {@code -1} always indicates 
             failure. TODO: needs to go away 

*android.net.EthernetDataTracker.stopUsingNetworkFeature(String,int,int)*

public int stopUsingNetworkFeature(
  java.lang.String feature,
  int callingPid,
  int callingUid)

Tells the underlying networking system that the caller is finished using the 
named feature. The interpretation offeatureis completely up to each networking 
implementation. 


    feature - the name of the feature that is no longer needed. 
    callingPid - the process ID of the process that is issuing this request 
    callingUid - the user ID of the process that is issuing this request 

    Returns: an integer value representing the outcome of the request. The interpretation of 
             this value is specific to each networking implementation+feature 
             combination, except that the value {@code -1} always indicates 
             failure. TODO: needs to go away 

*android.net.EthernetDataTracker.supplyMessenger(Messenger)*

public void supplyMessenger(android.os.Messenger messenger)





*android.net.EthernetDataTracker.teardown()*

public boolean teardown()

Disable connectivity to a network TODO: do away with return value after making 
MobileDataStateTracker async 




