*android.database.sqlite.SQLiteDatabaseLockedException* *SQLiteDatabaseLockedException* 

public class SQLiteDatabaseLockedException
  extends    |android.database.sqlite.SQLiteException|

|android.database.sqlite.SQLiteDatabaseLockedException_Description|
|android.database.sqlite.SQLiteDatabaseLockedException_Fields|
|android.database.sqlite.SQLiteDatabaseLockedException_Constructors|
|android.database.sqlite.SQLiteDatabaseLockedException_Methods|

================================================================================

*android.database.sqlite.SQLiteDatabaseLockedException_Constructors*
|android.database.sqlite.SQLiteDatabaseLockedException()|
|android.database.sqlite.SQLiteDatabaseLockedException(String)|

*android.database.sqlite.SQLiteDatabaseLockedException_Description*

Thrown if the database engine was unable to acquire the database locks it needs 
to do its job. If the statement is a [COMMIT] or occurs outside of an explicit 
transaction, then you can retry the statement. If the statement is not a 
[COMMIT] and occurs within a explicit transaction then you should rollback the 
transaction before continuing. 



*android.database.sqlite.SQLiteDatabaseLockedException()*

public SQLiteDatabaseLockedException()




*android.database.sqlite.SQLiteDatabaseLockedException(String)*

public SQLiteDatabaseLockedException(java.lang.String error)




