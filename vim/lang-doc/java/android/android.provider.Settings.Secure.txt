*android.provider.Settings.Secure* *Settings.Secure* Secure system settings, con

public static final class Settings.Secure
  extends    |android.provider.Settings.NameValueTable|

|android.provider.Settings.Secure_Description|
|android.provider.Settings.Secure_Fields|
|android.provider.Settings.Secure_Constructors|
|android.provider.Settings.Secure_Methods|

================================================================================

*android.provider.Settings.Secure_Fields*
|java.lang.String_android.provider.Settings.Secure.ACCESSIBILITY_CAPTIONING_BACKGROUND_COLOR|
|java.lang.String_android.provider.Settings.Secure.ACCESSIBILITY_CAPTIONING_EDGE_COLOR|
|java.lang.String_android.provider.Settings.Secure.ACCESSIBILITY_CAPTIONING_EDGE_TYPE|
|java.lang.String_android.provider.Settings.Secure.ACCESSIBILITY_CAPTIONING_ENABLED|
|java.lang.String_android.provider.Settings.Secure.ACCESSIBILITY_CAPTIONING_FONT_SCALE|
|java.lang.String_android.provider.Settings.Secure.ACCESSIBILITY_CAPTIONING_FOREGROUND_COLOR|
|java.lang.String_android.provider.Settings.Secure.ACCESSIBILITY_CAPTIONING_LOCALE|
|java.lang.String_android.provider.Settings.Secure.ACCESSIBILITY_CAPTIONING_PRESET|
|java.lang.String_android.provider.Settings.Secure.ACCESSIBILITY_CAPTIONING_TYPEFACE|
|java.lang.String_android.provider.Settings.Secure.ACCESSIBILITY_DISPLAY_MAGNIFICATION_AUTO_UPDATE|
|java.lang.String_android.provider.Settings.Secure.ACCESSIBILITY_DISPLAY_MAGNIFICATION_ENABLED|
|java.lang.String_android.provider.Settings.Secure.ACCESSIBILITY_DISPLAY_MAGNIFICATION_SCALE|
|java.lang.String_android.provider.Settings.Secure.ACCESSIBILITY_ENABLED|
|java.lang.String_android.provider.Settings.Secure.ACCESSIBILITY_SCREEN_READER_URL|
|java.lang.String_android.provider.Settings.Secure.ACCESSIBILITY_SCRIPT_INJECTION|
|java.lang.String_android.provider.Settings.Secure.ACCESSIBILITY_SPEAK_PASSWORD|
|java.lang.String_android.provider.Settings.Secure.ACCESSIBILITY_WEB_CONTENT_KEY_BINDINGS|
|java.lang.String_android.provider.Settings.Secure.ADB_ENABLED|
|java.lang.String_android.provider.Settings.Secure.ALLOW_MOCK_LOCATION|
|java.lang.String_android.provider.Settings.Secure.ALLOWED_GEOLOCATION_ORIGINS|
|java.lang.String_android.provider.Settings.Secure.ANDROID_ID|
|java.lang.String_android.provider.Settings.Secure.ANR_SHOW_BACKGROUND|
|java.lang.String_android.provider.Settings.Secure.BACKGROUND_DATA|
|java.lang.String_android.provider.Settings.Secure.BACKUP_AUTO_RESTORE|
|java.lang.String_android.provider.Settings.Secure.BACKUP_ENABLED|
|java.lang.String_android.provider.Settings.Secure.BACKUP_PROVISIONED|
|java.lang.String_android.provider.Settings.Secure.BACKUP_TRANSPORT|
|java.lang.String_android.provider.Settings.Secure.BAR_SERVICE_COMPONENT|
|java.lang.String_android.provider.Settings.Secure.BLUETOOTH_HCI_LOG|
|java.lang.String_android.provider.Settings.Secure.BLUETOOTH_ON|
|java.lang.String_android.provider.Settings.Secure.BUGREPORT_IN_POWER_MENU|
|android.net.Uri_android.provider.Settings.Secure.CONTENT_URI|
|java.lang.String_android.provider.Settings.Secure.DATA_ROAMING|
|java.lang.String_android.provider.Settings.Secure.DEFAULT_INPUT_METHOD|
|java.lang.String_android.provider.Settings.Secure.DEVELOPMENT_SETTINGS_ENABLED|
|java.lang.String_android.provider.Settings.Secure.DEVICE_PROVISIONED|
|java.lang.String_android.provider.Settings.Secure.DISABLED_SYSTEM_INPUT_METHODS|
|java.lang.String_android.provider.Settings.Secure.ENABLED_ACCESSIBILITY_SERVICES|
|java.lang.String_android.provider.Settings.Secure.ENABLED_INPUT_METHODS|
|java.lang.String_android.provider.Settings.Secure.ENABLED_NOTIFICATION_LISTENERS|
|java.lang.String_android.provider.Settings.Secure.ENABLED_ON_FIRST_BOOT_SYSTEM_PRINT_SERVICES|
|java.lang.String_android.provider.Settings.Secure.ENABLED_PRINT_SERVICES|
|java.lang.String_android.provider.Settings.Secure.ENHANCED_VOICE_PRIVACY_ENABLED|
|java.lang.String_android.provider.Settings.Secure.HTTP_PROXY|
|java.lang.String_android.provider.Settings.Secure.IMMERSIVE_MODE_CONFIRMATIONS|
|java.lang.String_android.provider.Settings.Secure.INCALL_POWER_BUTTON_BEHAVIOR|
|int_android.provider.Settings.Secure.INCALL_POWER_BUTTON_BEHAVIOR_DEFAULT|
|int_android.provider.Settings.Secure.INCALL_POWER_BUTTON_BEHAVIOR_HANGUP|
|int_android.provider.Settings.Secure.INCALL_POWER_BUTTON_BEHAVIOR_SCREEN_OFF|
|java.lang.String_android.provider.Settings.Secure.INPUT_METHOD_SELECTOR_VISIBILITY|
|java.lang.String_android.provider.Settings.Secure.INPUT_METHODS_SUBTYPE_HISTORY|
|java.lang.String_android.provider.Settings.Secure.INSTALL_NON_MARKET_APPS|
|java.lang.String_android.provider.Settings.Secure.LAST_SETUP_SHOWN|
|java.lang.String_android.provider.Settings.Secure.LOCATION_MODE|
|int_android.provider.Settings.Secure.LOCATION_MODE_BATTERY_SAVING|
|int_android.provider.Settings.Secure.LOCATION_MODE_HIGH_ACCURACY|
|int_android.provider.Settings.Secure.LOCATION_MODE_OFF|
|int_android.provider.Settings.Secure.LOCATION_MODE_SENSORS_ONLY|
|java.lang.String_android.provider.Settings.Secure.LOCATION_PROVIDERS_ALLOWED|
|java.lang.String_android.provider.Settings.Secure.LOCK_BIOMETRIC_WEAK_FLAGS|
|java.lang.String_android.provider.Settings.Secure.LOCK_PATTERN_ENABLED|
|java.lang.String_android.provider.Settings.Secure.LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED|
|java.lang.String_android.provider.Settings.Secure.LOCK_PATTERN_VISIBLE|
|java.lang.String_android.provider.Settings.Secure.LOCK_SCREEN_APPWIDGET_IDS|
|java.lang.String_android.provider.Settings.Secure.LOCK_SCREEN_FALLBACK_APPWIDGET_ID|
|java.lang.String_android.provider.Settings.Secure.LOCK_SCREEN_LOCK_AFTER_TIMEOUT|
|java.lang.String_android.provider.Settings.Secure.LOCK_SCREEN_OWNER_INFO|
|java.lang.String_android.provider.Settings.Secure.LOCK_SCREEN_OWNER_INFO_ENABLED|
|java.lang.String_android.provider.Settings.Secure.LOCK_SCREEN_STICKY_APPWIDGET|
|java.lang.String_android.provider.Settings.Secure.LOGGING_ID|
|java.lang.String_android.provider.Settings.Secure.LONG_PRESS_TIMEOUT|
|java.lang.String_android.provider.Settings.Secure.MOUNT_PLAY_NOTIFICATION_SND|
|java.lang.String_android.provider.Settings.Secure.MOUNT_UMS_AUTOSTART|
|java.lang.String_android.provider.Settings.Secure.MOUNT_UMS_NOTIFY_ENABLED|
|java.lang.String_android.provider.Settings.Secure.MOUNT_UMS_PROMPT|
|java.lang.String_android.provider.Settings.Secure.NETWORK_PREFERENCE|
|java.lang.String_android.provider.Settings.Secure.NFC_PAYMENT_DEFAULT_COMPONENT|
|java.lang.String_android.provider.Settings.Secure.PACKAGE_VERIFIER_USER_CONSENT|
|java.lang.String_android.provider.Settings.Secure.PARENTAL_CONTROL_ENABLED|
|java.lang.String_android.provider.Settings.Secure.PARENTAL_CONTROL_LAST_UPDATE|
|java.lang.String_android.provider.Settings.Secure.PARENTAL_CONTROL_REDIRECT_URL|
|java.lang.String_android.provider.Settings.Secure.PAYMENT_SERVICE_SEARCH_URI|
|java.lang.String_android.provider.Settings.Secure.PREFERRED_TTY_MODE|
|java.lang.String_android.provider.Settings.Secure.PRINT_SERVICE_SEARCH_URI|
|java.lang.String_android.provider.Settings.Secure.SCREENSAVER_ACTIVATE_ON_DOCK|
|java.lang.String_android.provider.Settings.Secure.SCREENSAVER_ACTIVATE_ON_SLEEP|
|java.lang.String_android.provider.Settings.Secure.SCREENSAVER_COMPONENTS|
|java.lang.String_android.provider.Settings.Secure.SCREENSAVER_DEFAULT_COMPONENT|
|java.lang.String_android.provider.Settings.Secure.SCREENSAVER_ENABLED|
|java.lang.String_android.provider.Settings.Secure.SEARCH_GLOBAL_SEARCH_ACTIVITY|
|java.lang.String_android.provider.Settings.Secure.SEARCH_MAX_RESULTS_PER_SOURCE|
|java.lang.String_android.provider.Settings.Secure.SEARCH_MAX_RESULTS_TO_DISPLAY|
|java.lang.String_android.provider.Settings.Secure.SEARCH_MAX_SHORTCUTS_RETURNED|
|java.lang.String_android.provider.Settings.Secure.SEARCH_MAX_SOURCE_EVENT_AGE_MILLIS|
|java.lang.String_android.provider.Settings.Secure.SEARCH_MAX_STAT_AGE_MILLIS|
|java.lang.String_android.provider.Settings.Secure.SEARCH_MIN_CLICKS_FOR_SOURCE_RANKING|
|java.lang.String_android.provider.Settings.Secure.SEARCH_MIN_IMPRESSIONS_FOR_SOURCE_RANKING|
|java.lang.String_android.provider.Settings.Secure.SEARCH_NUM_PROMOTED_SOURCES|
|java.lang.String_android.provider.Settings.Secure.SEARCH_PER_SOURCE_CONCURRENT_QUERY_LIMIT|
|java.lang.String_android.provider.Settings.Secure.SEARCH_PREFILL_MILLIS|
|java.lang.String_android.provider.Settings.Secure.SEARCH_PROMOTED_SOURCE_DEADLINE_MILLIS|
|java.lang.String_android.provider.Settings.Secure.SEARCH_QUERY_THREAD_CORE_POOL_SIZE|
|java.lang.String_android.provider.Settings.Secure.SEARCH_QUERY_THREAD_MAX_POOL_SIZE|
|java.lang.String_android.provider.Settings.Secure.SEARCH_SHORTCUT_REFRESH_CORE_POOL_SIZE|
|java.lang.String_android.provider.Settings.Secure.SEARCH_SHORTCUT_REFRESH_MAX_POOL_SIZE|
|java.lang.String_android.provider.Settings.Secure.SEARCH_SOURCE_TIMEOUT_MILLIS|
|java.lang.String_android.provider.Settings.Secure.SEARCH_THREAD_KEEPALIVE_SECONDS|
|java.lang.String_android.provider.Settings.Secure.SEARCH_WEB_RESULTS_OVERRIDE_LIMIT|
|java.lang.String_android.provider.Settings.Secure.SELECTED_INPUT_METHOD_SUBTYPE|
|java.lang.String_android.provider.Settings.Secure.SELECTED_SPELL_CHECKER|
|java.lang.String_android.provider.Settings.Secure.SELECTED_SPELL_CHECKER_SUBTYPE|
|java.lang.String_android.provider.Settings.Secure.SETTINGS_CLASSNAME|
|java.lang.String[]_android.provider.Settings.Secure.SETTINGS_TO_BACKUP|
|java.lang.String_android.provider.Settings.Secure.SMS_DEFAULT_APPLICATION|
|java.lang.String_android.provider.Settings.Secure.SPELL_CHECKER_ENABLED|
|java.lang.String_android.provider.Settings.Secure.SYS_PROP_SETTING_VERSION|
|java.lang.String_android.provider.Settings.Secure.TOUCH_EXPLORATION_ENABLED|
|java.lang.String_android.provider.Settings.Secure.TOUCH_EXPLORATION_GRANTED_ACCESSIBILITY_SERVICES|
|java.lang.String_android.provider.Settings.Secure.TTS_DEFAULT_COUNTRY|
|java.lang.String_android.provider.Settings.Secure.TTS_DEFAULT_LANG|
|java.lang.String_android.provider.Settings.Secure.TTS_DEFAULT_LOCALE|
|java.lang.String_android.provider.Settings.Secure.TTS_DEFAULT_PITCH|
|java.lang.String_android.provider.Settings.Secure.TTS_DEFAULT_RATE|
|java.lang.String_android.provider.Settings.Secure.TTS_DEFAULT_SYNTH|
|java.lang.String_android.provider.Settings.Secure.TTS_DEFAULT_VARIANT|
|java.lang.String_android.provider.Settings.Secure.TTS_ENABLED_PLUGINS|
|java.lang.String_android.provider.Settings.Secure.TTS_USE_DEFAULTS|
|java.lang.String_android.provider.Settings.Secure.TTY_MODE_ENABLED|
|java.lang.String_android.provider.Settings.Secure.UI_NIGHT_MODE|
|java.lang.String_android.provider.Settings.Secure.USB_MASS_STORAGE_ENABLED|
|java.lang.String_android.provider.Settings.Secure.USE_GOOGLE_MAIL|
|java.lang.String_android.provider.Settings.Secure.USER_SETUP_COMPLETE|
|java.lang.String_android.provider.Settings.Secure.VOICE_RECOGNITION_SERVICE|
|java.lang.String_android.provider.Settings.Secure.WIFI_IDLE_MS|
|java.lang.String_android.provider.Settings.Secure.WIFI_MAX_DHCP_RETRY_COUNT|
|java.lang.String_android.provider.Settings.Secure.WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS|
|java.lang.String_android.provider.Settings.Secure.WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON|
|java.lang.String_android.provider.Settings.Secure.WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY|
|java.lang.String_android.provider.Settings.Secure.WIFI_NUM_OPEN_NETWORKS_KEPT|
|java.lang.String_android.provider.Settings.Secure.WIFI_ON|
|java.lang.String_android.provider.Settings.Secure.WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE|
|java.lang.String_android.provider.Settings.Secure.WIFI_WATCHDOG_AP_COUNT|
|java.lang.String_android.provider.Settings.Secure.WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS|
|java.lang.String_android.provider.Settings.Secure.WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED|
|java.lang.String_android.provider.Settings.Secure.WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS|
|java.lang.String_android.provider.Settings.Secure.WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT|
|java.lang.String_android.provider.Settings.Secure.WIFI_WATCHDOG_MAX_AP_CHECKS|
|java.lang.String_android.provider.Settings.Secure.WIFI_WATCHDOG_ON|
|java.lang.String_android.provider.Settings.Secure.WIFI_WATCHDOG_PING_COUNT|
|java.lang.String_android.provider.Settings.Secure.WIFI_WATCHDOG_PING_DELAY_MS|
|java.lang.String_android.provider.Settings.Secure.WIFI_WATCHDOG_PING_TIMEOUT_MS|
|java.lang.String_android.provider.Settings.Secure.WIFI_WATCHDOG_WATCH_LIST|

*android.provider.Settings.Secure_Constructors*
|android.provider.Settings.Secure()|

*android.provider.Settings.Secure_Methods*
|android.provider.Settings.Secure.getFloat(ContentResolver,String)|Convenience 
|android.provider.Settings.Secure.getFloat(ContentResolver,String,float)|Conven
|android.provider.Settings.Secure.getFloatForUser(ContentResolver,String,float,int)|
|android.provider.Settings.Secure.getFloatForUser(ContentResolver,String,int)|
|android.provider.Settings.Secure.getInt(ContentResolver,String)|Convenience fu
|android.provider.Settings.Secure.getInt(ContentResolver,String,int)|Convenienc
|android.provider.Settings.Secure.getIntForUser(ContentResolver,String,int)|
|android.provider.Settings.Secure.getIntForUser(ContentResolver,String,int,int)|
|android.provider.Settings.Secure.getLong(ContentResolver,String)|Convenience f
|android.provider.Settings.Secure.getLong(ContentResolver,String,long)|Convenie
|android.provider.Settings.Secure.getLongForUser(ContentResolver,String,int)|
|android.provider.Settings.Secure.getLongForUser(ContentResolver,String,long,int)|
|android.provider.Settings.Secure.getMovedKeys(HashSet<String>)|
|android.provider.Settings.Secure.getString(ContentResolver,String)|Look up a n
|android.provider.Settings.Secure.getStringForUser(ContentResolver,String,int)|
|android.provider.Settings.Secure.getUriFor(String)|Construct the content URI f
|android.provider.Settings.Secure.isLocationProviderEnabled(ContentResolver,String)|
|android.provider.Settings.Secure.isLocationProviderEnabledForUser(ContentResolver,String,int)|
|android.provider.Settings.Secure.putFloat(ContentResolver,String,float)|Conven
|android.provider.Settings.Secure.putFloatForUser(ContentResolver,String,float,int)|
|android.provider.Settings.Secure.putInt(ContentResolver,String,int)|Convenienc
|android.provider.Settings.Secure.putIntForUser(ContentResolver,String,int,int)|
|android.provider.Settings.Secure.putLong(ContentResolver,String,long)|Convenie
|android.provider.Settings.Secure.putLongForUser(ContentResolver,String,long,int)|
|android.provider.Settings.Secure.putString(ContentResolver,String,String)|Stor
|android.provider.Settings.Secure.putStringForUser(ContentResolver,String,String,int)|
|android.provider.Settings.Secure.setLocationProviderEnabled(ContentResolver,String,boolean)|
|android.provider.Settings.Secure.setLocationProviderEnabledForUser(ContentResolver,String,boolean,int)|

*android.provider.Settings.Secure_Description*

Secure system settings, containing system preferences that applications can 
read but are not allowed to write. These are for preferences that the user must 
explicitly modify through the system UI or specialized APIs for those values, 
not modified directly by applications. 



*java.lang.String_android.provider.Settings.Secure.ACCESSIBILITY_CAPTIONING_BACKGROUND_COLOR*

Integer property that specifes the background color for captions as a packed 
32-bit color. 


*java.lang.String_android.provider.Settings.Secure.ACCESSIBILITY_CAPTIONING_EDGE_COLOR*

Integer property that specifes the edge color for captions as a packed 32-bit 
color. 


*java.lang.String_android.provider.Settings.Secure.ACCESSIBILITY_CAPTIONING_EDGE_TYPE*

Integer property that specifes the edge type for captions, one of: 

(|android.view.accessibility.CaptioningManager.CaptionStyle|) 
(|android.view.accessibility.CaptioningManager.CaptionStyle|) 
(|android.view.accessibility.CaptioningManager.CaptionStyle|) 


*java.lang.String_android.provider.Settings.Secure.ACCESSIBILITY_CAPTIONING_ENABLED*

Setting that specifies whether timed text (captions) should be displayed in 
video content. Text display properties are controlled by the following 
settings: 

(|android.provider.Settings.Secure|) (|android.provider.Settings.Secure|) 
(|android.provider.Settings.Secure|) (|android.provider.Settings.Secure|) 
(|android.provider.Settings.Secure|) (|android.provider.Settings.Secure|) 
(|android.provider.Settings.Secure|) 


*java.lang.String_android.provider.Settings.Secure.ACCESSIBILITY_CAPTIONING_FONT_SCALE*

Floating point property that specifies font scaling for captions. 


*java.lang.String_android.provider.Settings.Secure.ACCESSIBILITY_CAPTIONING_FOREGROUND_COLOR*

Integer property that specifes the foreground color for captions as a packed 
32-bit color. 


*java.lang.String_android.provider.Settings.Secure.ACCESSIBILITY_CAPTIONING_LOCALE*

Setting that specifies the language for captions as a locale string, e.g. 
en_US. 


*java.lang.String_android.provider.Settings.Secure.ACCESSIBILITY_CAPTIONING_PRESET*

Integer property that specifies the preset style for captions, one of: 

(|android.view.accessibility.CaptioningManager.CaptionStyle|) a valid index of 
(|android.view.accessibility.CaptioningManager.CaptionStyle|) 


*java.lang.String_android.provider.Settings.Secure.ACCESSIBILITY_CAPTIONING_TYPEFACE*

String property that specifies the typeface for captions, one of: 

DEFAULT MONOSPACE SANS_SERIF SERIF 


*java.lang.String_android.provider.Settings.Secure.ACCESSIBILITY_DISPLAY_MAGNIFICATION_AUTO_UPDATE*

Setting that specifies whether the display magnification should be 
automatically updated. If this fearture is enabled the system will exit 
magnification mode or pan the viewport when a context change occurs. For 
example, on staring a new activity or rotating the screen, the system may zoom 
out so the user can see the new context he is in. Another example is on showing 
a window that is not visible in the magnified viewport the system may pan the 
viewport to make the window the has popped up so the user knows that the 
context has changed. Whether a screen magnification is performed is controlled 
by (|android.provider.Settings.Secure|) 


*java.lang.String_android.provider.Settings.Secure.ACCESSIBILITY_DISPLAY_MAGNIFICATION_ENABLED*

Setting that specifies whether the display magnification is enabled. Display 
magnifications allows the user to zoom in the display content and is targeted 
to low vision users. The current magnification scale is controlled by 
(|android.provider.Settings.Secure|) . 


*java.lang.String_android.provider.Settings.Secure.ACCESSIBILITY_DISPLAY_MAGNIFICATION_SCALE*

Setting that specifies what the display magnification scale is. Display 
magnifications allows the user to zoom in the display content and is targeted 
to low vision users. Whether a display magnification is performed is controlled 
by (|android.provider.Settings.Secure|) 


*java.lang.String_android.provider.Settings.Secure.ACCESSIBILITY_ENABLED*

If accessibility is enabled. 


*java.lang.String_android.provider.Settings.Secure.ACCESSIBILITY_SCREEN_READER_URL*

The URL for the injected JavaScript based screen-reader used for providing 
accessibility of content in WebView. 

Note: The JavaScript based screen-reader is served by the Google infrastructure 
and enable users with disabilities to efficiently navigate in and explore web 
content. 

This property represents a string value. 


*java.lang.String_android.provider.Settings.Secure.ACCESSIBILITY_SCRIPT_INJECTION*

If injection of accessibility enhancing JavaScript screen-reader is enabled. 

Note: The JavaScript based screen-reader is served by the Google infrastructure 
and enable users with disabilities to efficiently navigate in and explore web 
content. 

This property represents a boolean value. 


*java.lang.String_android.provider.Settings.Secure.ACCESSIBILITY_SPEAK_PASSWORD*

Whether to speak passwords while in accessibility mode. 


*java.lang.String_android.provider.Settings.Secure.ACCESSIBILITY_WEB_CONTENT_KEY_BINDINGS*

Key bindings for navigation in built-in accessibility support for web content. 

Note: These key bindings are for the built-in accessibility navigation for web 
content which is used as a fall back solution if JavaScript in a WebView is not 
enabled or the user has not opted-in script injection from Google. 

The bindings are separated by semi-colon. A binding is a mapping from a key to 
a sequence of actions (for more details look at 
android.webkit.AccessibilityInjector). A key is represented as the hexademical 
string representation of an integer obtained from a meta state (optional) 
shifted sixteen times left and bitwise ored with a key code. An action is 
represented as a hexademical string representation of an integer where the 
first two digits are navigation action index, the second, the third, and the 
fourth digit pairs represent the action arguments. The separate actions in a 
binding are colon separated. The key and the action sequence it maps to are 
separated by equals. 

For example, the binding below maps the DPAD right button to traverse the 
current navigation axis once without firing an accessibility event and to 
perform the same traversal again but to fire an event: 

0x16=0x01000100:0x01000101; 



The goal of this binding is to enable dynamic rebinding of keys to navigation 
actions for web content without requiring a framework change. 

This property represents a string value. 


*java.lang.String_android.provider.Settings.Secure.ADB_ENABLED*




*java.lang.String_android.provider.Settings.Secure.ALLOW_MOCK_LOCATION*

Setting to allow mock locations and location provider status to be injected 
into the LocationManager service for testing purposes during application 
development. These locations and status values override actual location and 
status information generated by network, gps, or other location providers. 


*java.lang.String_android.provider.Settings.Secure.ALLOWED_GEOLOCATION_ORIGINS*

Origins for which browsers should allow geolocation by default. The value is a 
space-separated list of origins. 


*java.lang.String_android.provider.Settings.Secure.ANDROID_ID*

A 64-bit number (as a hex string) that is randomly generated on the device's 
first boot and should remain constant for the lifetime of the device. (The 
value may change if a factory reset is performed on the device.) 


*java.lang.String_android.provider.Settings.Secure.ANR_SHOW_BACKGROUND*

If nonzero, ANRs in invisible background processes bring up a dialog. 
Otherwise, the process will be silently killed. 


*java.lang.String_android.provider.Settings.Secure.BACKGROUND_DATA*

Whether background data usage is allowed. 


*java.lang.String_android.provider.Settings.Secure.BACKUP_AUTO_RESTORE*

Controls whether application data is automatically restored from backup at 
install time. Type: int ( 0 = disabled, 1 = enabled ) 


*java.lang.String_android.provider.Settings.Secure.BACKUP_ENABLED*

Controls whether settings backup is enabled. Type: int ( 0 = disabled, 1 = 
enabled ) 


*java.lang.String_android.provider.Settings.Secure.BACKUP_PROVISIONED*

Indicates whether settings backup has been fully provisioned. Type: int ( 0 = 
unprovisioned, 1 = fully provisioned ) 


*java.lang.String_android.provider.Settings.Secure.BACKUP_TRANSPORT*

Component of the transport to use for backup/restore. 


*java.lang.String_android.provider.Settings.Secure.BAR_SERVICE_COMPONENT*




*java.lang.String_android.provider.Settings.Secure.BLUETOOTH_HCI_LOG*

bluetooth HCI snoop log configuration 


*java.lang.String_android.provider.Settings.Secure.BLUETOOTH_ON*




*java.lang.String_android.provider.Settings.Secure.BUGREPORT_IN_POWER_MENU*

When the user has enable the option to have a "bug report" command in the power 
menu. 


*android.net.Uri_android.provider.Settings.Secure.CONTENT_URI*

The content:// style URL for this table 


*java.lang.String_android.provider.Settings.Secure.DATA_ROAMING*




*java.lang.String_android.provider.Settings.Secure.DEFAULT_INPUT_METHOD*

Setting to record the input method used by default, holding the ID of the 
desired method. 


*java.lang.String_android.provider.Settings.Secure.DEVELOPMENT_SETTINGS_ENABLED*




*java.lang.String_android.provider.Settings.Secure.DEVICE_PROVISIONED*




*java.lang.String_android.provider.Settings.Secure.DISABLED_SYSTEM_INPUT_METHODS*

List of system input methods that are currently disabled. This is a string 
containing the IDs of all disabled input methods, each ID separated by ':'. 


*java.lang.String_android.provider.Settings.Secure.ENABLED_ACCESSIBILITY_SERVICES*

List of the enabled accessibility providers. 


*java.lang.String_android.provider.Settings.Secure.ENABLED_INPUT_METHODS*

List of input methods that are currently enabled. This is a string containing 
the IDs of all enabled input methods, each ID separated by ':'. 


*java.lang.String_android.provider.Settings.Secure.ENABLED_NOTIFICATION_LISTENERS*

Name of a package that the current user has explicitly allowed to see all of 
that user's notifications. 


*java.lang.String_android.provider.Settings.Secure.ENABLED_ON_FIRST_BOOT_SYSTEM_PRINT_SERVICES*

List of the system print services we enabled on first boot. On first boot we 
enable all system, i.e. bundled print services, once, so they work 
out-of-the-box. 


*java.lang.String_android.provider.Settings.Secure.ENABLED_PRINT_SERVICES*

List of the enabled print services. 


*java.lang.String_android.provider.Settings.Secure.ENHANCED_VOICE_PRIVACY_ENABLED*

Whether the enhanced voice privacy mode is enabled. 0 = normal voice privacy 1 
= enhanced voice privacy 


*java.lang.String_android.provider.Settings.Secure.HTTP_PROXY*

Host name and port for global http proxy. Uses ':' seperator for between host 
and port. 


*java.lang.String_android.provider.Settings.Secure.IMMERSIVE_MODE_CONFIRMATIONS*




*java.lang.String_android.provider.Settings.Secure.INCALL_POWER_BUTTON_BEHAVIOR*

What happens when the user presses the Power button while in-call and the 
screen is on. Values: 1 - The Power button turns off the screen and locks the 
device. (Default behavior) 2 - The Power button hangs up the current call. 


*int_android.provider.Settings.Secure.INCALL_POWER_BUTTON_BEHAVIOR_DEFAULT*

INCALL_POWER_BUTTON_BEHAVIOR default value. 


*int_android.provider.Settings.Secure.INCALL_POWER_BUTTON_BEHAVIOR_HANGUP*

INCALL_POWER_BUTTON_BEHAVIOR value for "hang up". 


*int_android.provider.Settings.Secure.INCALL_POWER_BUTTON_BEHAVIOR_SCREEN_OFF*

INCALL_POWER_BUTTON_BEHAVIOR value for "turn off screen". 


*java.lang.String_android.provider.Settings.Secure.INPUT_METHOD_SELECTOR_VISIBILITY*

Setting to record the visibility of input method selector 


*java.lang.String_android.provider.Settings.Secure.INPUT_METHODS_SUBTYPE_HISTORY*

Setting to record the history of input method subtype, holding the pair of ID 
of IME and its last used subtype. 


*java.lang.String_android.provider.Settings.Secure.INSTALL_NON_MARKET_APPS*




*java.lang.String_android.provider.Settings.Secure.LAST_SETUP_SHOWN*

Version for which the setup wizard was last shown. Bumped for each release when 
there is new setup information to show. 


*java.lang.String_android.provider.Settings.Secure.LOCATION_MODE*

The degree of location access enabled by the user. 

When used with (|android.provider.Settings.Secure|) , must be one of 
(|android.provider.Settings.Secure|) , (|android.provider.Settings.Secure|) , 
(|android.provider.Settings.Secure|) , or (|android.provider.Settings.Secure|) 
. When used with (|android.provider.Settings.Secure|) , the caller must 
gracefully handle additional location modes that might be added in the future. 


*int_android.provider.Settings.Secure.LOCATION_MODE_BATTERY_SAVING*

Reduced power usage, such as limiting the number of GPS updates per hour. 
Requests with (|android.location.Criteria|) may be downgraded to 
(|android.location.Criteria|) . 


*int_android.provider.Settings.Secure.LOCATION_MODE_HIGH_ACCURACY*

Best-effort location computation allowed. 


*int_android.provider.Settings.Secure.LOCATION_MODE_OFF*

Location access disabled. 


*int_android.provider.Settings.Secure.LOCATION_MODE_SENSORS_ONLY*

Network Location Provider disabled, but GPS and other sensors enabled. 


*java.lang.String_android.provider.Settings.Secure.LOCATION_PROVIDERS_ALLOWED*

Comma-separated list of location providers that activities may access. 


*java.lang.String_android.provider.Settings.Secure.LOCK_BIOMETRIC_WEAK_FLAGS*

A flag containing settings used for biometric weak 


*java.lang.String_android.provider.Settings.Secure.LOCK_PATTERN_ENABLED*

Whether autolock is enabled (0 = false, 1 = true) 


*java.lang.String_android.provider.Settings.Secure.LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED*

Whether lock pattern will vibrate as user enters (0 = false, 1 = true) 


*java.lang.String_android.provider.Settings.Secure.LOCK_PATTERN_VISIBLE*

Whether lock pattern is visible as user enters (0 = false, 1 = true) 


*java.lang.String_android.provider.Settings.Secure.LOCK_SCREEN_APPWIDGET_IDS*

Ids of the user-selected appwidgets on the lockscreen (comma-delimited). 


*java.lang.String_android.provider.Settings.Secure.LOCK_SCREEN_FALLBACK_APPWIDGET_ID*

Id of the appwidget shown on the lock screen when appwidgets are disabled. 


*java.lang.String_android.provider.Settings.Secure.LOCK_SCREEN_LOCK_AFTER_TIMEOUT*

This preference allows the device to be locked given time after screen goes 
off, subject to current DeviceAdmin policy limits. 


*java.lang.String_android.provider.Settings.Secure.LOCK_SCREEN_OWNER_INFO*

This preference contains the string that shows for owner info on LockScreen. 


*java.lang.String_android.provider.Settings.Secure.LOCK_SCREEN_OWNER_INFO_ENABLED*

This preference enables showing the owner info on LockScreen. 


*java.lang.String_android.provider.Settings.Secure.LOCK_SCREEN_STICKY_APPWIDGET*

Index of the lockscreen appwidget to restore, -1 if none. 


*java.lang.String_android.provider.Settings.Secure.LOGGING_ID*

The Logging ID (a unique 64-bit value) as a hex string. Used as a pseudonymous 
identifier for logging. 


*java.lang.String_android.provider.Settings.Secure.LONG_PRESS_TIMEOUT*

The timout for considering a press to be a long press in milliseconds. 


*java.lang.String_android.provider.Settings.Secure.MOUNT_PLAY_NOTIFICATION_SND*

Whether or not alert sounds are played on MountService events. (0 = false, 1 = 
true) 


*java.lang.String_android.provider.Settings.Secure.MOUNT_UMS_AUTOSTART*

Whether or not UMS auto-starts on UMS host detection. (0 = false, 1 = true) 


*java.lang.String_android.provider.Settings.Secure.MOUNT_UMS_NOTIFY_ENABLED*

Whether or not a notification is displayed while UMS is enabled. (0 = false, 1 
= true) 


*java.lang.String_android.provider.Settings.Secure.MOUNT_UMS_PROMPT*

Whether or not a notification is displayed on UMS host detection. (0 = false, 1 
= true) 


*java.lang.String_android.provider.Settings.Secure.NETWORK_PREFERENCE*




*java.lang.String_android.provider.Settings.Secure.NFC_PAYMENT_DEFAULT_COMPONENT*

The default NFC payment component 


*java.lang.String_android.provider.Settings.Secure.PACKAGE_VERIFIER_USER_CONSENT*

Stores whether an user has consented to have apps verified through PAM. The 
value is boolean (1 or 0). 


*java.lang.String_android.provider.Settings.Secure.PARENTAL_CONTROL_ENABLED*

No longer supported. 


*java.lang.String_android.provider.Settings.Secure.PARENTAL_CONTROL_LAST_UPDATE*

No longer supported. 


*java.lang.String_android.provider.Settings.Secure.PARENTAL_CONTROL_REDIRECT_URL*

No longer supported. 


*java.lang.String_android.provider.Settings.Secure.PAYMENT_SERVICE_SEARCH_URI*

This is the query URI for finding a NFC payment service to install. 


*java.lang.String_android.provider.Settings.Secure.PREFERRED_TTY_MODE*

The preferred TTY mode 0 = TTy Off, CDMA default 1 = TTY Full 2 = TTY HCO 3 = 
TTY VCO 


*java.lang.String_android.provider.Settings.Secure.PRINT_SERVICE_SEARCH_URI*

This is the query URI for finding a print service to install. 


*java.lang.String_android.provider.Settings.Secure.SCREENSAVER_ACTIVATE_ON_DOCK*

If screensavers are enabled, whether the screensaver should be automatically 
launched when the device is inserted into a (desk) dock. 


*java.lang.String_android.provider.Settings.Secure.SCREENSAVER_ACTIVATE_ON_SLEEP*

If screensavers are enabled, whether the screensaver should be automatically 
launched when the screen times out when not on battery. 


*java.lang.String_android.provider.Settings.Secure.SCREENSAVER_COMPONENTS*

The user's chosen screensaver components. 

These will be launched by the PhoneWindowManager after a timeout when not on 
battery, or upon dock insertion (if SCREENSAVER_ACTIVATE_ON_DOCK is set to 1). 


*java.lang.String_android.provider.Settings.Secure.SCREENSAVER_DEFAULT_COMPONENT*

If screensavers are enabled, the default screensaver component. 


*java.lang.String_android.provider.Settings.Secure.SCREENSAVER_ENABLED*

Whether screensavers are enabled. 


*java.lang.String_android.provider.Settings.Secure.SEARCH_GLOBAL_SEARCH_ACTIVITY*

The global search provider chosen by the user (if multiple global search 
providers are installed). This will be the provider returned by 
(|android.app.SearchManager|) if it's still installed. This setting is stored 
as a flattened component name as per (|android.content.ComponentName|) . 


*java.lang.String_android.provider.Settings.Secure.SEARCH_MAX_RESULTS_PER_SOURCE*

The number of suggestions GlobalSearch will ask each non-web search source for. 


*java.lang.String_android.provider.Settings.Secure.SEARCH_MAX_RESULTS_TO_DISPLAY*

The maximum number of suggestions returned by GlobalSearch. 


*java.lang.String_android.provider.Settings.Secure.SEARCH_MAX_SHORTCUTS_RETURNED*

The maximum number of shortcuts shown by GlobalSearch. 


*java.lang.String_android.provider.Settings.Secure.SEARCH_MAX_SOURCE_EVENT_AGE_MILLIS*

The maximum age of log data used for source ranking in GlobalSearch. 


*java.lang.String_android.provider.Settings.Secure.SEARCH_MAX_STAT_AGE_MILLIS*

The maximum age of log data used for shortcuts in GlobalSearch. 


*java.lang.String_android.provider.Settings.Secure.SEARCH_MIN_CLICKS_FOR_SOURCE_RANKING*

The minimum number of clicks needed to rank a source in GlobalSearch. 


*java.lang.String_android.provider.Settings.Secure.SEARCH_MIN_IMPRESSIONS_FOR_SOURCE_RANKING*

The minimum number of impressions needed to rank a source in GlobalSearch. 


*java.lang.String_android.provider.Settings.Secure.SEARCH_NUM_PROMOTED_SOURCES*

The number of promoted sources in GlobalSearch. 


*java.lang.String_android.provider.Settings.Secure.SEARCH_PER_SOURCE_CONCURRENT_QUERY_LIMIT*

The maximum number of concurrent suggestion queries to each source. 


*java.lang.String_android.provider.Settings.Secure.SEARCH_PREFILL_MILLIS*

The maximum number of milliseconds that GlobalSearch shows the previous results 
after receiving a new query. 


*java.lang.String_android.provider.Settings.Secure.SEARCH_PROMOTED_SOURCE_DEADLINE_MILLIS*

The number of milliseconds that GlobalSearch will wait for suggestions from 
promoted sources before continuing with all other sources. 


*java.lang.String_android.provider.Settings.Secure.SEARCH_QUERY_THREAD_CORE_POOL_SIZE*

The size of the core thread pool for suggestion queries in GlobalSearch. 


*java.lang.String_android.provider.Settings.Secure.SEARCH_QUERY_THREAD_MAX_POOL_SIZE*

The maximum size of the thread pool for suggestion queries in GlobalSearch. 


*java.lang.String_android.provider.Settings.Secure.SEARCH_SHORTCUT_REFRESH_CORE_POOL_SIZE*

The size of the core thread pool for shortcut refreshing in GlobalSearch. 


*java.lang.String_android.provider.Settings.Secure.SEARCH_SHORTCUT_REFRESH_MAX_POOL_SIZE*

The maximum size of the thread pool for shortcut refreshing in GlobalSearch. 


*java.lang.String_android.provider.Settings.Secure.SEARCH_SOURCE_TIMEOUT_MILLIS*

The number of milliseconds before GlobalSearch aborts search suggesiton 
queries. 


*java.lang.String_android.provider.Settings.Secure.SEARCH_THREAD_KEEPALIVE_SECONDS*

The maximun time that excess threads in the GlobalSeach thread pools will wait 
before terminating. 


*java.lang.String_android.provider.Settings.Secure.SEARCH_WEB_RESULTS_OVERRIDE_LIMIT*

The number of suggestions the GlobalSearch will ask the web search source for. 


*java.lang.String_android.provider.Settings.Secure.SELECTED_INPUT_METHOD_SUBTYPE*

Setting to record the input method subtype used by default, holding the ID of 
the desired method. 


*java.lang.String_android.provider.Settings.Secure.SELECTED_SPELL_CHECKER*

The (|android.content.ComponentName|) string of the selected spell checker 
service which is one of the services managed by the text service manager. 


*java.lang.String_android.provider.Settings.Secure.SELECTED_SPELL_CHECKER_SUBTYPE*

The (|android.content.ComponentName|) string of the selected subtype of the 
selected spell checker service which is one of the services managed by the text 
service manager. 


*java.lang.String_android.provider.Settings.Secure.SETTINGS_CLASSNAME*

Settings classname to launch when Settings is clicked from All Applications. 
Needed because of user testing between the old and new Settings apps. 


*java.lang.String[]_android.provider.Settings.Secure.SETTINGS_TO_BACKUP*

This are the settings to be backed up. 

NOTE: Settings are backed up and restored in the order they appear in this 
array. If you have one setting depending on another, make sure that they are 
ordered appropriately. 


*java.lang.String_android.provider.Settings.Secure.SMS_DEFAULT_APPLICATION*

Specifies the package name currently configured to be the primary sms 
application 


*java.lang.String_android.provider.Settings.Secure.SPELL_CHECKER_ENABLED*

The (|android.content.ComponentName|) string whether spell checker is enabled 
or not. 


*java.lang.String_android.provider.Settings.Secure.SYS_PROP_SETTING_VERSION*




*java.lang.String_android.provider.Settings.Secure.TOUCH_EXPLORATION_ENABLED*

If touch exploration is enabled. 


*java.lang.String_android.provider.Settings.Secure.TOUCH_EXPLORATION_GRANTED_ACCESSIBILITY_SERVICES*

List of the accessibility services to which the user has granted permission to 
put the device into touch exploration mode. 


*java.lang.String_android.provider.Settings.Secure.TTS_DEFAULT_COUNTRY*

Default text-to-speech country. 


*java.lang.String_android.provider.Settings.Secure.TTS_DEFAULT_LANG*

Default text-to-speech language. 


*java.lang.String_android.provider.Settings.Secure.TTS_DEFAULT_LOCALE*

Stores the default tts locales on a per engine basis. Stored as a comma 
seperated list of values, each value being of the formengine_name:localefor 
example,com.foo.ttsengine:eng-USA,com.bar.ttsengine:esp-ESP. This supersedes 
(|android.provider.Settings.Secure|) , (|android.provider.Settings.Secure|) and 
(|android.provider.Settings.Secure|) . Apps should never need to read this 
setting directly, and can query the TextToSpeech framework classes for the 
locale that is in use. 


*java.lang.String_android.provider.Settings.Secure.TTS_DEFAULT_PITCH*

Default text-to-speech engine pitch. 100 = 1x 


*java.lang.String_android.provider.Settings.Secure.TTS_DEFAULT_RATE*

Default text-to-speech engine speech rate. 100 = 1x 


*java.lang.String_android.provider.Settings.Secure.TTS_DEFAULT_SYNTH*

Default text-to-speech engine. 


*java.lang.String_android.provider.Settings.Secure.TTS_DEFAULT_VARIANT*

Default text-to-speech locale variant. 


*java.lang.String_android.provider.Settings.Secure.TTS_ENABLED_PLUGINS*

Space delimited list of plugin packages that are enabled. 


*java.lang.String_android.provider.Settings.Secure.TTS_USE_DEFAULTS*

Setting to always use the default text-to-speech settings regardless of the 
application settings. 1 = override application settings, 0 = use application 
settings (if specified). 


*java.lang.String_android.provider.Settings.Secure.TTY_MODE_ENABLED*

Whether the TTY mode mode is enabled. 0 = disabled 1 = enabled 


*java.lang.String_android.provider.Settings.Secure.UI_NIGHT_MODE*

The current night mode that has been selected by the user. Owned and controlled 
by UiModeManagerService. Constants are as per UiModeManager. 


*java.lang.String_android.provider.Settings.Secure.USB_MASS_STORAGE_ENABLED*




*java.lang.String_android.provider.Settings.Secure.USE_GOOGLE_MAIL*




*java.lang.String_android.provider.Settings.Secure.USER_SETUP_COMPLETE*

Whether the current user has been set up via setup wizard (0 = false, 1 = true) 


*java.lang.String_android.provider.Settings.Secure.VOICE_RECOGNITION_SERVICE*

The (|android.content.ComponentName|) string of the service to be used as the 
voice recognition service. 


*java.lang.String_android.provider.Settings.Secure.WIFI_IDLE_MS*

The interval in milliseconds after which Wi-Fi is considered idle. When idle, 
it is possible for the device to be switched from Wi-Fi to the mobile data 
network. 


*java.lang.String_android.provider.Settings.Secure.WIFI_MAX_DHCP_RETRY_COUNT*




*java.lang.String_android.provider.Settings.Secure.WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS*




*java.lang.String_android.provider.Settings.Secure.WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON*




*java.lang.String_android.provider.Settings.Secure.WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY*




*java.lang.String_android.provider.Settings.Secure.WIFI_NUM_OPEN_NETWORKS_KEPT*




*java.lang.String_android.provider.Settings.Secure.WIFI_ON*




*java.lang.String_android.provider.Settings.Secure.WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE*

The acceptable packet loss percentage (range 0 - 100) before trying another AP 
on the same network. 


*java.lang.String_android.provider.Settings.Secure.WIFI_WATCHDOG_AP_COUNT*

The number of access points required for a network in order for the watchdog to 
monitor it. 


*java.lang.String_android.provider.Settings.Secure.WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS*

The delay between background checks. 


*java.lang.String_android.provider.Settings.Secure.WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED*

Whether the Wi-Fi watchdog is enabled for background checking even after it 
thinks the user has connected to a good access point. 


*java.lang.String_android.provider.Settings.Secure.WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS*

The timeout for a background ping 


*java.lang.String_android.provider.Settings.Secure.WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT*

The number of initial pings to perform that *may* be ignored if they fail. 
Again, if these fail, they will *not* be used in packet loss calculation. For 
example, one network always seemed to time out for the first couple pings, so 
this is set to 3 by default. 


*java.lang.String_android.provider.Settings.Secure.WIFI_WATCHDOG_MAX_AP_CHECKS*

The maximum number of access points (per network) to attempt to test. If this 
number is reached, the watchdog will no longer monitor the initial connection 
state for the network. This is a safeguard for networks containing multiple APs 
whose DNS does not respond to pings. 


*java.lang.String_android.provider.Settings.Secure.WIFI_WATCHDOG_ON*




*java.lang.String_android.provider.Settings.Secure.WIFI_WATCHDOG_PING_COUNT*

The number of pings to test if an access point is a good connection. 


*java.lang.String_android.provider.Settings.Secure.WIFI_WATCHDOG_PING_DELAY_MS*

The delay between pings. 


*java.lang.String_android.provider.Settings.Secure.WIFI_WATCHDOG_PING_TIMEOUT_MS*

The timeout per ping. 


*java.lang.String_android.provider.Settings.Secure.WIFI_WATCHDOG_WATCH_LIST*

A comma-separated list of SSIDs for which the Wi-Fi watchdog should be enabled. 



*android.provider.Settings.Secure()*

public Settings.Secure()




*android.provider.Settings.Secure.getFloat(ContentResolver,String)*

public static float getFloat(
  android.content.ContentResolver cr,
  java.lang.String name)
  throws |android.provider.Settings.SettingNotFoundException|
         
Convenience function for retrieving a single secure settings value as a float. 
Note that internally setting values are always stored as strings; this function 
converts the string to a float for you. 

This version does not take a default value. If the setting has not been set, or 
the string value is not a number, it throws 
(|android.provider.Settings.SettingNotFoundException|) . 


    cr - The ContentResolver to access. 
    name - The name of the setting to retrieve. 

    Returns: The setting's current value. 

*android.provider.Settings.Secure.getFloat(ContentResolver,String,float)*

public static float getFloat(
  android.content.ContentResolver cr,
  java.lang.String name,
  float def)

Convenience function for retrieving a single secure settings value as a 
floating point number. Note that internally setting values are always stored as 
strings; this function converts the string to an float for you. The default 
value will be returned if the setting is not defined or not a valid float. 


    cr - The ContentResolver to access. 
    name - The name of the setting to retrieve. 
    def - Value to return if the setting is not defined. 

    Returns: The setting's current value, or 'def' if it is not defined or not a valid 
             float. 

*android.provider.Settings.Secure.getFloatForUser(ContentResolver,String,float,int)*

public static float getFloatForUser(
  android.content.ContentResolver cr,
  java.lang.String name,
  float def,
  int userHandle)





*android.provider.Settings.Secure.getFloatForUser(ContentResolver,String,int)*

public static float getFloatForUser(
  android.content.ContentResolver cr,
  java.lang.String name,
  int userHandle)
  throws |android.provider.Settings.SettingNotFoundException|
         




*android.provider.Settings.Secure.getInt(ContentResolver,String)*

public static int getInt(
  android.content.ContentResolver cr,
  java.lang.String name)
  throws |android.provider.Settings.SettingNotFoundException|
         
Convenience function for retrieving a single secure settings value as an 
integer. Note that internally setting values are always stored as strings; this 
function converts the string to an integer for you. 

This version does not take a default value. If the setting has not been set, or 
the string value is not a number, it throws 
(|android.provider.Settings.SettingNotFoundException|) . 


    cr - The ContentResolver to access. 
    name - The name of the setting to retrieve. 

    Returns: The setting's current value. 

*android.provider.Settings.Secure.getInt(ContentResolver,String,int)*

public static int getInt(
  android.content.ContentResolver cr,
  java.lang.String name,
  int def)

Convenience function for retrieving a single secure settings value as an 
integer. Note that internally setting values are always stored as strings; this 
function converts the string to an integer for you. The default value will be 
returned if the setting is not defined or not an integer. 


    cr - The ContentResolver to access. 
    name - The name of the setting to retrieve. 
    def - Value to return if the setting is not defined. 

    Returns: The setting's current value, or 'def' if it is not defined or not a valid 
             integer. 

*android.provider.Settings.Secure.getIntForUser(ContentResolver,String,int)*

public static int getIntForUser(
  android.content.ContentResolver cr,
  java.lang.String name,
  int userHandle)
  throws |android.provider.Settings.SettingNotFoundException|
         




*android.provider.Settings.Secure.getIntForUser(ContentResolver,String,int,int)*

public static int getIntForUser(
  android.content.ContentResolver cr,
  java.lang.String name,
  int def,
  int userHandle)





*android.provider.Settings.Secure.getLong(ContentResolver,String)*

public static long getLong(
  android.content.ContentResolver cr,
  java.lang.String name)
  throws |android.provider.Settings.SettingNotFoundException|
         
Convenience function for retrieving a single secure settings value as along. 
Note that internally setting values are always stored as strings; this function 
converts the string to alongfor you. 

This version does not take a default value. If the setting has not been set, or 
the string value is not a number, it throws 
(|android.provider.Settings.SettingNotFoundException|) . 


    cr - The ContentResolver to access. 
    name - The name of the setting to retrieve. 

    Returns: The setting's current value. 

*android.provider.Settings.Secure.getLong(ContentResolver,String,long)*

public static long getLong(
  android.content.ContentResolver cr,
  java.lang.String name,
  long def)

Convenience function for retrieving a single secure settings value as along. 
Note that internally setting values are always stored as strings; this function 
converts the string to alongfor you. The default value will be returned if the 
setting is not defined or not along. 


    cr - The ContentResolver to access. 
    name - The name of the setting to retrieve. 
    def - Value to return if the setting is not defined. 

    Returns: The setting's current value, or 'def' if it is not defined or not a valid 
             {@code long}. 

*android.provider.Settings.Secure.getLongForUser(ContentResolver,String,int)*

public static long getLongForUser(
  android.content.ContentResolver cr,
  java.lang.String name,
  int userHandle)
  throws |android.provider.Settings.SettingNotFoundException|
         




*android.provider.Settings.Secure.getLongForUser(ContentResolver,String,long,int)*

public static long getLongForUser(
  android.content.ContentResolver cr,
  java.lang.String name,
  long def,
  int userHandle)





*android.provider.Settings.Secure.getMovedKeys(HashSet<String>)*

public static void getMovedKeys(java.util.HashSet<java.lang.String> outKeySet)





*android.provider.Settings.Secure.getString(ContentResolver,String)*

public static |java.lang.String| getString(
  android.content.ContentResolver resolver,
  java.lang.String name)

Look up a name in the database. 


    resolver - to access the database with 
    name - to look up in the table 

    Returns: the corresponding value, or null if not present 

*android.provider.Settings.Secure.getStringForUser(ContentResolver,String,int)*

public static |java.lang.String| getStringForUser(
  android.content.ContentResolver resolver,
  java.lang.String name,
  int userHandle)





*android.provider.Settings.Secure.getUriFor(String)*

public static |android.net.Uri| getUriFor(java.lang.String name)

Construct the content URI for a particular name/value pair, useful for 
monitoring changes with a ContentObserver. 


    name - to look up in the table 

    Returns: the corresponding content URI, or null if not present 

*android.provider.Settings.Secure.isLocationProviderEnabled(ContentResolver,String)*

public static final boolean isLocationProviderEnabled(
  android.content.ContentResolver cr,
  java.lang.String provider)

Helper method for determining if a location provider is enabled. 

    Deprecated: use {@link #LOCATION_MODE} or
             {@link LocationManager#isProviderEnabled(String)}

    cr - the content resolver to use 
    provider - the location provider to query 

    Returns: true if the provider is enabled 

*android.provider.Settings.Secure.isLocationProviderEnabledForUser(ContentResolver,String,int)*

public static final boolean isLocationProviderEnabledForUser(
  android.content.ContentResolver cr,
  java.lang.String provider,
  int userId)

Helper method for determining if a location provider is enabled. 

    Deprecated: use {@link #LOCATION_MODE} or
             {@link LocationManager#isProviderEnabled(String)}

    cr - the content resolver to use 
    provider - the location provider to query 
    userId - the userId to query 

    Returns: true if the provider is enabled 

*android.provider.Settings.Secure.putFloat(ContentResolver,String,float)*

public static boolean putFloat(
  android.content.ContentResolver cr,
  java.lang.String name,
  float value)

Convenience function for updating a single settings value as a floating point 
number. This will either create a new entry in the table if the given name does 
not exist, or modify the value of the existing row with that name. Note that 
internally setting values are always stored as strings, so this function 
converts the given value to a string before storing it. 


    cr - The ContentResolver to access. 
    name - The name of the setting to modify. 
    value - The new value for the setting. 

    Returns: true if the value was set, false on database errors 

*android.provider.Settings.Secure.putFloatForUser(ContentResolver,String,float,int)*

public static boolean putFloatForUser(
  android.content.ContentResolver cr,
  java.lang.String name,
  float value,
  int userHandle)





*android.provider.Settings.Secure.putInt(ContentResolver,String,int)*

public static boolean putInt(
  android.content.ContentResolver cr,
  java.lang.String name,
  int value)

Convenience function for updating a single settings value as an integer. This 
will either create a new entry in the table if the given name does not exist, 
or modify the value of the existing row with that name. Note that internally 
setting values are always stored as strings, so this function converts the 
given value to a string before storing it. 


    cr - The ContentResolver to access. 
    name - The name of the setting to modify. 
    value - The new value for the setting. 

    Returns: true if the value was set, false on database errors 

*android.provider.Settings.Secure.putIntForUser(ContentResolver,String,int,int)*

public static boolean putIntForUser(
  android.content.ContentResolver cr,
  java.lang.String name,
  int value,
  int userHandle)





*android.provider.Settings.Secure.putLong(ContentResolver,String,long)*

public static boolean putLong(
  android.content.ContentResolver cr,
  java.lang.String name,
  long value)

Convenience function for updating a secure settings value as a long integer. 
This will either create a new entry in the table if the given name does not 
exist, or modify the value of the existing row with that name. Note that 
internally setting values are always stored as strings, so this function 
converts the given value to a string before storing it. 


    cr - The ContentResolver to access. 
    name - The name of the setting to modify. 
    value - The new value for the setting. 

    Returns: true if the value was set, false on database errors 

*android.provider.Settings.Secure.putLongForUser(ContentResolver,String,long,int)*

public static boolean putLongForUser(
  android.content.ContentResolver cr,
  java.lang.String name,
  long value,
  int userHandle)





*android.provider.Settings.Secure.putString(ContentResolver,String,String)*

public static boolean putString(
  android.content.ContentResolver resolver,
  java.lang.String name,
  java.lang.String value)

Store a name/value pair into the database. 


    resolver - to access the database with 
    name - to store 
    value - to associate with the name 

    Returns: true if the value was set, false on database errors 

*android.provider.Settings.Secure.putStringForUser(ContentResolver,String,String,int)*

public static boolean putStringForUser(
  android.content.ContentResolver resolver,
  java.lang.String name,
  java.lang.String value,
  int userHandle)





*android.provider.Settings.Secure.setLocationProviderEnabled(ContentResolver,String,boolean)*

public static final void setLocationProviderEnabled(
  android.content.ContentResolver cr,
  java.lang.String provider,
  boolean enabled)

Thread-safe method for enabling or disabling a single location provider. 

    Deprecated: use {@link #putInt(ContentResolver, String, int)} and {@link #LOCATION_MODE}

    cr - the content resolver to use 
    provider - the location provider to enable or disable 
    enabled - true if the provider should be enabled 

*android.provider.Settings.Secure.setLocationProviderEnabledForUser(ContentResolver,String,boolean,int)*

public static final boolean setLocationProviderEnabledForUser(
  android.content.ContentResolver cr,
  java.lang.String provider,
  boolean enabled,
  int userId)

Thread-safe method for enabling or disabling a single location provider. 

    Deprecated: use {@link #putIntForUser(ContentResolver, String, int, int)} and
             {@link #LOCATION_MODE}

    cr - the content resolver to use 
    provider - the location provider to enable or disable 
    enabled - true if the provider should be enabled 
    userId - the userId for which to enable/disable providers 

    Returns: true if the value was set, false on database errors 


