*android.net.Uri* *Uri* Immutable URI reference.

public abstract class Uri
  extends    |java.lang.Object|
  implements |android.os.Parcelable|
             |java.lang.Comparable|

|android.net.Uri_Description|
|android.net.Uri_Fields|
|android.net.Uri_Constructors|
|android.net.Uri_Methods|

================================================================================

*android.net.Uri_Fields*
|android.os.Parcelable.Creator<android.net.Uri>_android.net.Uri.CREATOR|
|android.net.Uri_android.net.Uri.EMPTY|

*android.net.Uri_Methods*
|android.net.Uri.buildUpon()|Constructs a new builder, copying the attributes f
|android.net.Uri.checkFileUriExposed(String)|If this is afile://Uri, it will be
|android.net.Uri.compareTo(Uri)|Compares the string representation of this Uri 
|android.net.Uri.decode(String)|Decodes '%'-escaped octets in the given string 
|android.net.Uri.encode(String)|Encodes characters in the given string as '%'-e
|android.net.Uri.encode(String,String)|Encodes characters in the given string a
|android.net.Uri.equals(Object)|Compares this Uri to another object for equalit
|android.net.Uri.fromFile(File)|Creates a Uri from a file.
|android.net.Uri.fromParts(String,String,String)|Creates an opaque Uri from the
|android.net.Uri.getAuthority()|Gets the decoded authority part of this URI.
|android.net.Uri.getBooleanQueryParameter(String,boolean)|Searches the query st
|android.net.Uri.getCanonicalUri()|If thisUriisfile://, then resolve and return
|android.net.Uri.getEncodedAuthority()|Gets the encoded authority part of this 
|android.net.Uri.getEncodedFragment()|Gets the encoded fragment part of this UR
|android.net.Uri.getEncodedPath()|Gets the encoded path.
|android.net.Uri.getEncodedQuery()|Gets the encoded query component from this U
|android.net.Uri.getEncodedSchemeSpecificPart()|Gets the scheme-specific part o
|android.net.Uri.getEncodedUserInfo()|Gets the encoded user information from th
|android.net.Uri.getFragment()|Gets the decoded fragment part of this URI, ever
|android.net.Uri.getHost()|Gets the encoded host from the authority for this UR
|android.net.Uri.getLastPathSegment()|Gets the decoded last segment in the path
|android.net.Uri.getPath()|Gets the decoded path.
|android.net.Uri.getPathSegments()|Gets the decoded path segments.
|android.net.Uri.getPort()|Gets the port from the authority for this URI.
|android.net.Uri.getQuery()|Gets the decoded query component from this URI.
|android.net.Uri.getQueryParameter(String)|Searches the query string for the fi
|android.net.Uri.getQueryParameterNames()|Returns a set of the unique names of 
|android.net.Uri.getQueryParameters(String)|Searches the query string for param
|android.net.Uri.getScheme()|Gets the scheme of this URI.
|android.net.Uri.getSchemeSpecificPart()|Gets the scheme-specific part of this 
|android.net.Uri.getUserInfo()|Gets the decoded user information from the autho
|android.net.Uri.hashCode()|Hashes the encoded string represention of this Uri 
|android.net.Uri.isAbsolute()|Returns true if this URI is absolute, i.e.
|android.net.Uri.isHierarchical()|Returns true if this URI is hierarchical like
|android.net.Uri.isOpaque()|Returns true if this URI is opaque like "mailto:nob
|android.net.Uri.isRelative()|Returns true if this URI is relative, i.e.
|android.net.Uri.normalizeScheme()|Return an equivalent URI with a lowercase sc
|android.net.Uri.parse(String)|Creates a Uri which parses the given encoded URI
|android.net.Uri.toSafeString()|Return a string representation of the URI that 
|android.net.Uri.toString()|Returns the encoded string representation of this U
|android.net.Uri.withAppendedPath(Uri,String)|Creates a new Uri by appending an
|android.net.Uri.writeToParcel(Parcel,Uri)|Writes a Uri to a Parcel.

*android.net.Uri_Description*

Immutable URI reference. A URI reference includes a URI and a fragment, the 
component of the URI following a '#'. Builds and parses URI references which 
conform to RFC 2396. 

In the interest of performance, this class performs little to no validation. 
Behavior is undefined for invalid input. This class is very forgiving--in the 
face of invalid input, it will return garbage rather than throw an exception 
unless otherwise specified. 



*android.os.Parcelable.Creator<android.net.Uri>_android.net.Uri.CREATOR*

Reads Uris from Parcels. 


*android.net.Uri_android.net.Uri.EMPTY*

The empty URI, equivalent to "". 



*android.net.Uri.buildUpon()*

public abstract |android.net.Uri.Builder| buildUpon()

Constructs a new builder, copying the attributes from this Uri. 



*android.net.Uri.checkFileUriExposed(String)*

public void checkFileUriExposed(java.lang.String location)

If this is afile://Uri, it will be reported to (|android.os.StrictMode|) . 



*android.net.Uri.compareTo(Uri)*

public int compareTo(android.net.Uri other)

Compares the string representation of this Uri with that of another. 



*android.net.Uri.decode(String)*

public static |java.lang.String| decode(java.lang.String s)

Decodes '%'-escaped octets in the given string using the UTF-8 scheme. Replaces 
invalid octets with the unicode replacement character ("\\uFFFD"). 


    s - encoded string to decode 

    Returns: the given string with escaped octets decoded, or null if s is null 

*android.net.Uri.encode(String)*

public static |java.lang.String| encode(java.lang.String s)

Encodes characters in the given string as '%'-escaped octets using the UTF-8 
scheme. Leaves letters ("A-Z", "a-z"), numbers ("0-9"), and unreserved 
characters ("_-!.~'()*") intact. Encodes all other characters. 


    s - string to encode 

    Returns: an encoded version of s suitable for use as a URI component, or null if s is 
             null 

*android.net.Uri.encode(String,String)*

public static |java.lang.String| encode(
  java.lang.String s,
  java.lang.String allow)

Encodes characters in the given string as '%'-escaped octets using the UTF-8 
scheme. Leaves letters ("A-Z", "a-z"), numbers ("0-9"), and unreserved 
characters ("_-!.~'()*") intact. Encodes all other characters with the 
exception of those specified in the allow argument. 


    s - string to encode 
    allow - set of additional characters to allow in the encoded form, null if no 
       characters should be skipped 

    Returns: an encoded version of s suitable for use as a URI component, or null if s is 
             null 

*android.net.Uri.equals(Object)*

public boolean equals(java.lang.Object o)

Compares this Uri to another object for equality. Returns true if the encoded 
string representations of this Uri and the given Uri are equal. Case counts. 
Paths are not normalized. If one Uri specifies a default port explicitly and 
the other leaves it implicit, they will not be considered equal. 



*android.net.Uri.fromFile(File)*

public static |android.net.Uri| fromFile(java.io.File file)

Creates a Uri from a file. The URI has the form "file://". Encodes path 
characters with the exception of '/'. 

Example: "file:///tmp/android.txt" 



    Returns: a Uri for the given file 

*android.net.Uri.fromParts(String,String,String)*

public static |android.net.Uri| fromParts(
  java.lang.String scheme,
  java.lang.String ssp,
  java.lang.String fragment)

Creates an opaque Uri from the given components. Encodes the ssp which means 
this method cannot be used to create hierarchical URIs. 


    scheme - of the URI 
    ssp - scheme-specific-part, everything between the scheme separator (':') and the 
       fragment separator ('#'), which will get encoded 
    fragment - fragment, everything after the '#', null if undefined, will get encoded 

    Returns: Uri composed of the given scheme, ssp, and fragment 

*android.net.Uri.getAuthority()*

public abstract |java.lang.String| getAuthority()

Gets the decoded authority part of this URI. For server addresses, the 
authority is structured as follows:[ userinfo '@' ] host [ ':' port ]Examples: 
"google.com", "bob@google.com:80" 



    Returns: the authority for this URI or null if not present 

*android.net.Uri.getBooleanQueryParameter(String,boolean)*

public boolean getBooleanQueryParameter(
  java.lang.String key,
  boolean defaultValue)

Searches the query string for the first value with the given key and interprets 
it as a boolean value. "false" and "0" are interpreted as false, everything 
else is interpreted as true. 


    key - which will be decoded 
    defaultValue - the default value to return if there is no query parameter for key 

    Returns: the boolean interpretation of the query parameter key 

*android.net.Uri.getCanonicalUri()*

public |android.net.Uri| getCanonicalUri()

If this (|android.net.Uri|) isfile://, then resolve and return its canonical 
path. Also fixes legacy emulated storage paths so they are usable across user 
boundaries. Should always be called from the app process before sending 
elsewhere. 



*android.net.Uri.getEncodedAuthority()*

public abstract |java.lang.String| getEncodedAuthority()

Gets the encoded authority part of this URI. For server addresses, the 
authority is structured as follows:[ userinfo '@' ] host [ ':' port ]Examples: 
"google.com", "bob@google.com:80" 



    Returns: the authority for this URI or null if not present 

*android.net.Uri.getEncodedFragment()*

public abstract |java.lang.String| getEncodedFragment()

Gets the encoded fragment part of this URI, everything after the '#'. 



    Returns: the encoded fragment or null if there isn't one 

*android.net.Uri.getEncodedPath()*

public abstract |java.lang.String| getEncodedPath()

Gets the encoded path. 



    Returns: the encoded path, or null if this is not a hierarchical URI (like 
             "mailto:nobody@google.com") or the URI is invalid 

*android.net.Uri.getEncodedQuery()*

public abstract |java.lang.String| getEncodedQuery()

Gets the encoded query component from this URI. The query comes after the query 
separator ('?') and before the fragment separator ('#'). This method would 
return "q=android" for "http://www.google.com/search?q=android". 



    Returns: the encoded query or null if there isn't one 

*android.net.Uri.getEncodedSchemeSpecificPart()*

public abstract |java.lang.String| getEncodedSchemeSpecificPart()

Gets the scheme-specific part of this URI, i.e. everything between the scheme 
separator ':' and the fragment separator '#'. If this is a relative URI, this 
method returns the entire URI. Leaves escaped octets intact. 

Example: "//www.google.com/search?q=android" 



    Returns: the decoded scheme-specific-part 

*android.net.Uri.getEncodedUserInfo()*

public abstract |java.lang.String| getEncodedUserInfo()

Gets the encoded user information from the authority. For example, if the 
authority is "nobody@google.com", this method will return "nobody". 



    Returns: the user info for this URI or null if not present 

*android.net.Uri.getFragment()*

public abstract |java.lang.String| getFragment()

Gets the decoded fragment part of this URI, everything after the '#'. 



    Returns: the decoded fragment or null if there isn't one 

*android.net.Uri.getHost()*

public abstract |java.lang.String| getHost()

Gets the encoded host from the authority for this URI. For example, if the 
authority is "bob@google.com", this method will return "google.com". 



    Returns: the host for this URI or null if not present 

*android.net.Uri.getLastPathSegment()*

public abstract |java.lang.String| getLastPathSegment()

Gets the decoded last segment in the path. 



    Returns: the decoded last segment or null if the path is empty 

*android.net.Uri.getPath()*

public abstract |java.lang.String| getPath()

Gets the decoded path. 



    Returns: the decoded path, or null if this is not a hierarchical URI (like 
             "mailto:nobody@google.com") or the URI is invalid 

*android.net.Uri.getPathSegments()*

public abstract |java.util.List|<String> getPathSegments()

Gets the decoded path segments. 



    Returns: decoded path segments, each without a leading or trailing '/' 

*android.net.Uri.getPort()*

public abstract int getPort()

Gets the port from the authority for this URI. For example, if the authority is 
"google.com:80", this method will return 80. 



    Returns: the port for this URI or -1 if invalid or not present 

*android.net.Uri.getQuery()*

public abstract |java.lang.String| getQuery()

Gets the decoded query component from this URI. The query comes after the query 
separator ('?') and before the fragment separator ('#'). This method would 
return "q=android" for "http://www.google.com/search?q=android". 



    Returns: the decoded query or null if there isn't one 

*android.net.Uri.getQueryParameter(String)*

public |java.lang.String| getQueryParameter(java.lang.String key)

Searches the query string for the first value with the given key. 

Warning: Prior to Ice Cream Sandwich, this decoded the '+' character as '+' 
rather than ' '. 


    key - which will be encoded 

    Returns: the decoded value or null if no parameter is found 

*android.net.Uri.getQueryParameterNames()*

public |java.util.Set|<String> getQueryParameterNames()

Returns a set of the unique names of all query parameters. Iterating over the 
set will return the names in order of their first occurrence. 



    Returns: a set of decoded names 

*android.net.Uri.getQueryParameters(String)*

public |java.util.List|<String> getQueryParameters(java.lang.String key)

Searches the query string for parameter values with the given key. 


    key - which will be encoded 

    Returns: a list of decoded values 

*android.net.Uri.getScheme()*

public abstract |java.lang.String| getScheme()

Gets the scheme of this URI. Example: "http" 



    Returns: the scheme or null if this is a relative URI 

*android.net.Uri.getSchemeSpecificPart()*

public abstract |java.lang.String| getSchemeSpecificPart()

Gets the scheme-specific part of this URI, i.e. everything between the scheme 
separator ':' and the fragment separator '#'. If this is a relative URI, this 
method returns the entire URI. Decodes escaped octets. 

Example: "//www.google.com/search?q=android" 



    Returns: the decoded scheme-specific-part 

*android.net.Uri.getUserInfo()*

public abstract |java.lang.String| getUserInfo()

Gets the decoded user information from the authority. For example, if the 
authority is "nobody@google.com", this method will return "nobody". 



    Returns: the user info for this URI or null if not present 

*android.net.Uri.hashCode()*

public int hashCode()

Hashes the encoded string represention of this Uri consistently with 
(|android.net.Uri|) . 



*android.net.Uri.isAbsolute()*

public boolean isAbsolute()

Returns true if this URI is absolute, i.e. if it contains an explicit scheme. 



    Returns: true if this URI is absolute, false if it's relative 

*android.net.Uri.isHierarchical()*

public abstract boolean isHierarchical()

Returns true if this URI is hierarchical like "http://google.com". Absolute 
URIs are hierarchical if the scheme-specific part starts with a '/'. Relative 
URIs are always hierarchical. 



*android.net.Uri.isOpaque()*

public boolean isOpaque()

Returns true if this URI is opaque like "mailto:nobody@google.com". The 
scheme-specific part of an opaque URI cannot start with a '/'. 



*android.net.Uri.isRelative()*

public abstract boolean isRelative()

Returns true if this URI is relative, i.e. if it doesn't contain an explicit 
scheme. 



    Returns: true if this URI is relative, false if it's absolute 

*android.net.Uri.normalizeScheme()*

public |android.net.Uri| normalizeScheme()

Return an equivalent URI with a lowercase scheme component. This aligns the Uri 
with Android best practices for intent filtering. 

For example, "HTTP://www.android.com" becomes "http://www.android.com" 

All URIs received from outside Android (such as user input, or external sources 
like Bluetooth, NFC, or the Internet) should be normalized before they are used 
to create an Intent. 

This method does not validate bad URI's, or 'fix' poorly formatted URI's - so 
do not use it for input validation. A Uri will always be returned, even if the 
Uri is badly formatted to begin with and a scheme component cannot be found. 



    Returns: normalized Uri (never null) 

*android.net.Uri.parse(String)*

public static |android.net.Uri| parse(java.lang.String uriString)

Creates a Uri which parses the given encoded URI string. 


    uriString - an RFC 2396-compliant, encoded URI 

    Returns: Uri for this given uri string 

*android.net.Uri.toSafeString()*

public |java.lang.String| toSafeString()

Return a string representation of the URI that is safe to print to logs and 
other places where PII should be avoided. 



*android.net.Uri.toString()*

public abstract |java.lang.String| toString()

Returns the encoded string representation of this URI. Example: 
"http://google.com/" 



*android.net.Uri.withAppendedPath(Uri,String)*

public static |android.net.Uri| withAppendedPath(
  android.net.Uri baseUri,
  java.lang.String pathSegment)

Creates a new Uri by appending an already-encoded path segment to a base Uri. 


    baseUri - Uri to append path segment to 
    pathSegment - encoded path segment to append 

    Returns: a new Uri based on baseUri with the given segment appended to the path 

*android.net.Uri.writeToParcel(Parcel,Uri)*

public static void writeToParcel(
  android.os.Parcel out,
  android.net.Uri uri)

Writes a Uri to a Parcel. 


    out - parcel to write to 
    uri - to write, can be null 


