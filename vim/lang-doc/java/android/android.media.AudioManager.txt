*android.media.AudioManager* *AudioManager* 

public class AudioManager
  extends    |java.lang.Object|

|android.media.AudioManager_Description|
|android.media.AudioManager_Fields|
|android.media.AudioManager_Constructors|
|android.media.AudioManager_Methods|

================================================================================

*android.media.AudioManager_Fields*
|java.lang.String_android.media.AudioManager.ACTION_AUDIO_BECOMING_NOISY|
|java.lang.String_android.media.AudioManager.ACTION_SCO_AUDIO_STATE_CHANGED|
|java.lang.String_android.media.AudioManager.ACTION_SCO_AUDIO_STATE_UPDATED|
|int_android.media.AudioManager.ADJUST_LOWER|
|int_android.media.AudioManager.ADJUST_RAISE|
|int_android.media.AudioManager.ADJUST_SAME|
|int_android.media.AudioManager.AUDIOFOCUS_GAIN|
|int_android.media.AudioManager.AUDIOFOCUS_GAIN_TRANSIENT|
|int_android.media.AudioManager.AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE|
|int_android.media.AudioManager.AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK|
|int_android.media.AudioManager.AUDIOFOCUS_LOSS|
|int_android.media.AudioManager.AUDIOFOCUS_LOSS_TRANSIENT|
|int_android.media.AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK|
|int_android.media.AudioManager.AUDIOFOCUS_REQUEST_FAILED|
|int_android.media.AudioManager.AUDIOFOCUS_REQUEST_GRANTED|
|java.lang.String_android.media.AudioManager.EXTRA_RINGER_MODE|
|java.lang.String_android.media.AudioManager.EXTRA_SCO_AUDIO_PREVIOUS_STATE|
|java.lang.String_android.media.AudioManager.EXTRA_SCO_AUDIO_STATE|
|java.lang.String_android.media.AudioManager.EXTRA_VIBRATE_SETTING|
|java.lang.String_android.media.AudioManager.EXTRA_VIBRATE_TYPE|
|int_android.media.AudioManager.FLAG_ALLOW_RINGER_MODES|
|int_android.media.AudioManager.FLAG_PLAY_SOUND|
|int_android.media.AudioManager.FLAG_REMOVE_SOUND_AND_VIBRATE|
|int_android.media.AudioManager.FLAG_SHOW_UI|
|int_android.media.AudioManager.FLAG_VIBRATE|
|int_android.media.AudioManager.FX_FOCUS_NAVIGATION_DOWN|
|int_android.media.AudioManager.FX_FOCUS_NAVIGATION_LEFT|
|int_android.media.AudioManager.FX_FOCUS_NAVIGATION_RIGHT|
|int_android.media.AudioManager.FX_FOCUS_NAVIGATION_UP|
|int_android.media.AudioManager.FX_KEY_CLICK|
|int_android.media.AudioManager.FX_KEYPRESS_DELETE|
|int_android.media.AudioManager.FX_KEYPRESS_INVALID|
|int_android.media.AudioManager.FX_KEYPRESS_RETURN|
|int_android.media.AudioManager.FX_KEYPRESS_SPACEBAR|
|int_android.media.AudioManager.FX_KEYPRESS_STANDARD|
|int_android.media.AudioManager.MODE_CURRENT|
|int_android.media.AudioManager.MODE_IN_CALL|
|int_android.media.AudioManager.MODE_IN_COMMUNICATION|
|int_android.media.AudioManager.MODE_INVALID|
|int_android.media.AudioManager.MODE_NORMAL|
|int_android.media.AudioManager.MODE_RINGTONE|
|int_android.media.AudioManager.NUM_STREAMS|
|java.lang.String_android.media.AudioManager.PROPERTY_OUTPUT_FRAMES_PER_BUFFER|
|java.lang.String_android.media.AudioManager.PROPERTY_OUTPUT_SAMPLE_RATE|
|java.lang.String_android.media.AudioManager.RINGER_MODE_CHANGED_ACTION|
|int_android.media.AudioManager.RINGER_MODE_NORMAL|
|int_android.media.AudioManager.RINGER_MODE_SILENT|
|int_android.media.AudioManager.RINGER_MODE_VIBRATE|
|int_android.media.AudioManager.ROUTE_ALL|
|int_android.media.AudioManager.ROUTE_BLUETOOTH|
|int_android.media.AudioManager.ROUTE_BLUETOOTH_A2DP|
|int_android.media.AudioManager.ROUTE_BLUETOOTH_SCO|
|int_android.media.AudioManager.ROUTE_EARPIECE|
|int_android.media.AudioManager.ROUTE_HEADSET|
|int_android.media.AudioManager.ROUTE_SPEAKER|
|int_android.media.AudioManager.SCO_AUDIO_STATE_CONNECTED|
|int_android.media.AudioManager.SCO_AUDIO_STATE_CONNECTING|
|int_android.media.AudioManager.SCO_AUDIO_STATE_DISCONNECTED|
|int_android.media.AudioManager.SCO_AUDIO_STATE_ERROR|
|int_android.media.AudioManager.STREAM_ALARM|
|int_android.media.AudioManager.STREAM_DTMF|
|int_android.media.AudioManager.STREAM_MUSIC|
|int_android.media.AudioManager.STREAM_NOTIFICATION|
|int_android.media.AudioManager.STREAM_RING|
|int_android.media.AudioManager.STREAM_SYSTEM|
|int_android.media.AudioManager.STREAM_VOICE_CALL|
|int_android.media.AudioManager.USE_DEFAULT_STREAM_TYPE|
|java.lang.String_android.media.AudioManager.VIBRATE_SETTING_CHANGED_ACTION|
|int_android.media.AudioManager.VIBRATE_SETTING_OFF|
|int_android.media.AudioManager.VIBRATE_SETTING_ON|
|int_android.media.AudioManager.VIBRATE_SETTING_ONLY_SILENT|
|int_android.media.AudioManager.VIBRATE_TYPE_NOTIFICATION|
|int_android.media.AudioManager.VIBRATE_TYPE_RINGER|

*android.media.AudioManager_Methods*
|android.media.AudioManager.abandonAudioFocus(AudioManager.OnAudioFocusChangeListener)|
|android.media.AudioManager.adjustStreamVolume(int,int,int)|
|android.media.AudioManager.adjustSuggestedStreamVolume(int,int,int)|
|android.media.AudioManager.adjustVolume(int,int)|
|android.media.AudioManager.dispatchMediaKeyEvent(KeyEvent)|
|android.media.AudioManager.getMode()|
|android.media.AudioManager.getParameters(String)|
|android.media.AudioManager.getProperty(String)|
|android.media.AudioManager.getRingerMode()|
|android.media.AudioManager.getRouting(int)|
|android.media.AudioManager.getStreamMaxVolume(int)|
|android.media.AudioManager.getStreamVolume(int)|
|android.media.AudioManager.getVibrateSetting(int)|
|android.media.AudioManager.isBluetoothA2dpOn()|
|android.media.AudioManager.isBluetoothScoAvailableOffCall()|
|android.media.AudioManager.isBluetoothScoOn()|
|android.media.AudioManager.isMicrophoneMute()|
|android.media.AudioManager.isMusicActive()|
|android.media.AudioManager.isSpeakerphoneOn()|
|android.media.AudioManager.isWiredHeadsetOn()|
|android.media.AudioManager.loadSoundEffects()|
|android.media.AudioManager.playSoundEffect(int)|
|android.media.AudioManager.playSoundEffect(int,float)|
|android.media.AudioManager.registerMediaButtonEventReceiver(ComponentName)|
|android.media.AudioManager.registerMediaButtonEventReceiver(PendingIntent)|
|android.media.AudioManager.registerRemoteControlClient(RemoteControlClient)|
|android.media.AudioManager.registerRemoteController(RemoteController)|
|android.media.AudioManager.requestAudioFocus(AudioManager.OnAudioFocusChangeListener,int,int)|
|android.media.AudioManager.setBluetoothA2dpOn(boolean)|
|android.media.AudioManager.setBluetoothScoOn(boolean)|
|android.media.AudioManager.setMicrophoneMute(boolean)|
|android.media.AudioManager.setMode(int)|
|android.media.AudioManager.setParameters(String)|
|android.media.AudioManager.setRingerMode(int)|
|android.media.AudioManager.setRouting(int,int,int)|
|android.media.AudioManager.setSpeakerphoneOn(boolean)|
|android.media.AudioManager.setStreamMute(int,boolean)|
|android.media.AudioManager.setStreamSolo(int,boolean)|
|android.media.AudioManager.setStreamVolume(int,int,int)|
|android.media.AudioManager.setVibrateSetting(int,int)|
|android.media.AudioManager.setWiredHeadsetOn(boolean)|
|android.media.AudioManager.shouldVibrate(int)|
|android.media.AudioManager.startBluetoothSco()|
|android.media.AudioManager.stopBluetoothSco()|
|android.media.AudioManager.unloadSoundEffects()|
|android.media.AudioManager.unregisterMediaButtonEventReceiver(ComponentName)|
|android.media.AudioManager.unregisterMediaButtonEventReceiver(PendingIntent)|
|android.media.AudioManager.unregisterRemoteControlClient(RemoteControlClient)|
|android.media.AudioManager.unregisterRemoteController(RemoteController)|

*android.media.AudioManager_Description*





*java.lang.String_android.media.AudioManager.ACTION_AUDIO_BECOMING_NOISY*




*java.lang.String_android.media.AudioManager.ACTION_SCO_AUDIO_STATE_CHANGED*




*java.lang.String_android.media.AudioManager.ACTION_SCO_AUDIO_STATE_UPDATED*




*int_android.media.AudioManager.ADJUST_LOWER*




*int_android.media.AudioManager.ADJUST_RAISE*




*int_android.media.AudioManager.ADJUST_SAME*




*int_android.media.AudioManager.AUDIOFOCUS_GAIN*




*int_android.media.AudioManager.AUDIOFOCUS_GAIN_TRANSIENT*




*int_android.media.AudioManager.AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE*




*int_android.media.AudioManager.AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK*




*int_android.media.AudioManager.AUDIOFOCUS_LOSS*




*int_android.media.AudioManager.AUDIOFOCUS_LOSS_TRANSIENT*




*int_android.media.AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK*




*int_android.media.AudioManager.AUDIOFOCUS_REQUEST_FAILED*




*int_android.media.AudioManager.AUDIOFOCUS_REQUEST_GRANTED*




*java.lang.String_android.media.AudioManager.EXTRA_RINGER_MODE*




*java.lang.String_android.media.AudioManager.EXTRA_SCO_AUDIO_PREVIOUS_STATE*




*java.lang.String_android.media.AudioManager.EXTRA_SCO_AUDIO_STATE*




*java.lang.String_android.media.AudioManager.EXTRA_VIBRATE_SETTING*




*java.lang.String_android.media.AudioManager.EXTRA_VIBRATE_TYPE*




*int_android.media.AudioManager.FLAG_ALLOW_RINGER_MODES*




*int_android.media.AudioManager.FLAG_PLAY_SOUND*




*int_android.media.AudioManager.FLAG_REMOVE_SOUND_AND_VIBRATE*




*int_android.media.AudioManager.FLAG_SHOW_UI*




*int_android.media.AudioManager.FLAG_VIBRATE*




*int_android.media.AudioManager.FX_FOCUS_NAVIGATION_DOWN*




*int_android.media.AudioManager.FX_FOCUS_NAVIGATION_LEFT*




*int_android.media.AudioManager.FX_FOCUS_NAVIGATION_RIGHT*




*int_android.media.AudioManager.FX_FOCUS_NAVIGATION_UP*




*int_android.media.AudioManager.FX_KEY_CLICK*




*int_android.media.AudioManager.FX_KEYPRESS_DELETE*




*int_android.media.AudioManager.FX_KEYPRESS_INVALID*




*int_android.media.AudioManager.FX_KEYPRESS_RETURN*




*int_android.media.AudioManager.FX_KEYPRESS_SPACEBAR*




*int_android.media.AudioManager.FX_KEYPRESS_STANDARD*




*int_android.media.AudioManager.MODE_CURRENT*




*int_android.media.AudioManager.MODE_IN_CALL*




*int_android.media.AudioManager.MODE_IN_COMMUNICATION*




*int_android.media.AudioManager.MODE_INVALID*




*int_android.media.AudioManager.MODE_NORMAL*




*int_android.media.AudioManager.MODE_RINGTONE*




*int_android.media.AudioManager.NUM_STREAMS*




*java.lang.String_android.media.AudioManager.PROPERTY_OUTPUT_FRAMES_PER_BUFFER*




*java.lang.String_android.media.AudioManager.PROPERTY_OUTPUT_SAMPLE_RATE*




*java.lang.String_android.media.AudioManager.RINGER_MODE_CHANGED_ACTION*




*int_android.media.AudioManager.RINGER_MODE_NORMAL*




*int_android.media.AudioManager.RINGER_MODE_SILENT*




*int_android.media.AudioManager.RINGER_MODE_VIBRATE*




*int_android.media.AudioManager.ROUTE_ALL*




*int_android.media.AudioManager.ROUTE_BLUETOOTH*




*int_android.media.AudioManager.ROUTE_BLUETOOTH_A2DP*




*int_android.media.AudioManager.ROUTE_BLUETOOTH_SCO*




*int_android.media.AudioManager.ROUTE_EARPIECE*




*int_android.media.AudioManager.ROUTE_HEADSET*




*int_android.media.AudioManager.ROUTE_SPEAKER*




*int_android.media.AudioManager.SCO_AUDIO_STATE_CONNECTED*




*int_android.media.AudioManager.SCO_AUDIO_STATE_CONNECTING*




*int_android.media.AudioManager.SCO_AUDIO_STATE_DISCONNECTED*




*int_android.media.AudioManager.SCO_AUDIO_STATE_ERROR*




*int_android.media.AudioManager.STREAM_ALARM*




*int_android.media.AudioManager.STREAM_DTMF*




*int_android.media.AudioManager.STREAM_MUSIC*




*int_android.media.AudioManager.STREAM_NOTIFICATION*




*int_android.media.AudioManager.STREAM_RING*




*int_android.media.AudioManager.STREAM_SYSTEM*




*int_android.media.AudioManager.STREAM_VOICE_CALL*




*int_android.media.AudioManager.USE_DEFAULT_STREAM_TYPE*




*java.lang.String_android.media.AudioManager.VIBRATE_SETTING_CHANGED_ACTION*




*int_android.media.AudioManager.VIBRATE_SETTING_OFF*




*int_android.media.AudioManager.VIBRATE_SETTING_ON*




*int_android.media.AudioManager.VIBRATE_SETTING_ONLY_SILENT*




*int_android.media.AudioManager.VIBRATE_TYPE_NOTIFICATION*




*int_android.media.AudioManager.VIBRATE_TYPE_RINGER*





*android.media.AudioManager.abandonAudioFocus(AudioManager.OnAudioFocusChangeListener)*

public int abandonAudioFocus(android.media.AudioManager.OnAudioFocusChangeListener l)





*android.media.AudioManager.adjustStreamVolume(int,int,int)*

public void adjustStreamVolume(
  int streamType,
  int direction,
  int flags)





*android.media.AudioManager.adjustSuggestedStreamVolume(int,int,int)*

public void adjustSuggestedStreamVolume(
  int direction,
  int suggestedStreamType,
  int flags)





*android.media.AudioManager.adjustVolume(int,int)*

public void adjustVolume(
  int direction,
  int flags)





*android.media.AudioManager.dispatchMediaKeyEvent(KeyEvent)*

public void dispatchMediaKeyEvent(android.view.KeyEvent keyEvent)





*android.media.AudioManager.getMode()*

public int getMode()





*android.media.AudioManager.getParameters(String)*

public |java.lang.String| getParameters(java.lang.String keys)





*android.media.AudioManager.getProperty(String)*

public |java.lang.String| getProperty(java.lang.String key)





*android.media.AudioManager.getRingerMode()*

public int getRingerMode()





*android.media.AudioManager.getRouting(int)*

public int getRouting(int mode)





*android.media.AudioManager.getStreamMaxVolume(int)*

public int getStreamMaxVolume(int streamType)





*android.media.AudioManager.getStreamVolume(int)*

public int getStreamVolume(int streamType)





*android.media.AudioManager.getVibrateSetting(int)*

public int getVibrateSetting(int vibrateType)





*android.media.AudioManager.isBluetoothA2dpOn()*

public boolean isBluetoothA2dpOn()





*android.media.AudioManager.isBluetoothScoAvailableOffCall()*

public boolean isBluetoothScoAvailableOffCall()





*android.media.AudioManager.isBluetoothScoOn()*

public boolean isBluetoothScoOn()





*android.media.AudioManager.isMicrophoneMute()*

public boolean isMicrophoneMute()





*android.media.AudioManager.isMusicActive()*

public boolean isMusicActive()





*android.media.AudioManager.isSpeakerphoneOn()*

public boolean isSpeakerphoneOn()





*android.media.AudioManager.isWiredHeadsetOn()*

public boolean isWiredHeadsetOn()





*android.media.AudioManager.loadSoundEffects()*

public void loadSoundEffects()





*android.media.AudioManager.playSoundEffect(int)*

public void playSoundEffect(int effectType)





*android.media.AudioManager.playSoundEffect(int,float)*

public void playSoundEffect(
  int effectType,
  float volume)





*android.media.AudioManager.registerMediaButtonEventReceiver(ComponentName)*

public void registerMediaButtonEventReceiver(android.content.ComponentName eventReceiver)





*android.media.AudioManager.registerMediaButtonEventReceiver(PendingIntent)*

public void registerMediaButtonEventReceiver(android.app.PendingIntent eventReceiver)





*android.media.AudioManager.registerRemoteControlClient(RemoteControlClient)*

public void registerRemoteControlClient(android.media.RemoteControlClient rcClient)





*android.media.AudioManager.registerRemoteController(RemoteController)*

public boolean registerRemoteController(android.media.RemoteController rctlr)





*android.media.AudioManager.requestAudioFocus(AudioManager.OnAudioFocusChangeListener,int,int)*

public int requestAudioFocus(
  android.media.AudioManager.OnAudioFocusChangeListener l,
  int streamType,
  int durationHint)





*android.media.AudioManager.setBluetoothA2dpOn(boolean)*

public void setBluetoothA2dpOn(boolean on)





*android.media.AudioManager.setBluetoothScoOn(boolean)*

public void setBluetoothScoOn(boolean on)





*android.media.AudioManager.setMicrophoneMute(boolean)*

public void setMicrophoneMute(boolean on)





*android.media.AudioManager.setMode(int)*

public void setMode(int mode)





*android.media.AudioManager.setParameters(String)*

public void setParameters(java.lang.String keyValuePairs)





*android.media.AudioManager.setRingerMode(int)*

public void setRingerMode(int ringerMode)





*android.media.AudioManager.setRouting(int,int,int)*

public void setRouting(
  int mode,
  int routes,
  int mask)





*android.media.AudioManager.setSpeakerphoneOn(boolean)*

public void setSpeakerphoneOn(boolean on)





*android.media.AudioManager.setStreamMute(int,boolean)*

public void setStreamMute(
  int streamType,
  boolean state)





*android.media.AudioManager.setStreamSolo(int,boolean)*

public void setStreamSolo(
  int streamType,
  boolean state)





*android.media.AudioManager.setStreamVolume(int,int,int)*

public void setStreamVolume(
  int streamType,
  int index,
  int flags)





*android.media.AudioManager.setVibrateSetting(int,int)*

public void setVibrateSetting(
  int vibrateType,
  int vibrateSetting)





*android.media.AudioManager.setWiredHeadsetOn(boolean)*

public void setWiredHeadsetOn(boolean on)





*android.media.AudioManager.shouldVibrate(int)*

public boolean shouldVibrate(int vibrateType)





*android.media.AudioManager.startBluetoothSco()*

public void startBluetoothSco()





*android.media.AudioManager.stopBluetoothSco()*

public void stopBluetoothSco()





*android.media.AudioManager.unloadSoundEffects()*

public void unloadSoundEffects()





*android.media.AudioManager.unregisterMediaButtonEventReceiver(ComponentName)*

public void unregisterMediaButtonEventReceiver(android.content.ComponentName eventReceiver)





*android.media.AudioManager.unregisterMediaButtonEventReceiver(PendingIntent)*

public void unregisterMediaButtonEventReceiver(android.app.PendingIntent eventReceiver)





*android.media.AudioManager.unregisterRemoteControlClient(RemoteControlClient)*

public void unregisterRemoteControlClient(android.media.RemoteControlClient rcClient)





*android.media.AudioManager.unregisterRemoteController(RemoteController)*

public void unregisterRemoteController(android.media.RemoteController rctlr)






