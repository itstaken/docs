*android.widget.GridLayout.LayoutParams* *GridLayout.LayoutParams* Layout inform

public static class GridLayout.LayoutParams
  extends    |android.view.ViewGroup.MarginLayoutParams|

|android.widget.GridLayout.LayoutParams_Description|
|android.widget.GridLayout.LayoutParams_Fields|
|android.widget.GridLayout.LayoutParams_Constructors|
|android.widget.GridLayout.LayoutParams_Methods|

================================================================================

*android.widget.GridLayout.LayoutParams_Fields*
|android.widget.GridLayout.Spec_android.widget.GridLayout.LayoutParams.columnSpec|
|android.widget.GridLayout.Spec_android.widget.GridLayout.LayoutParams.rowSpec|

*android.widget.GridLayout.LayoutParams_Constructors*
|android.widget.GridLayout.LayoutParams()|Constructs a new LayoutParams with de
|android.widget.GridLayout.LayoutParams(Context,AttributeSet)|Values not define
|android.widget.GridLayout.LayoutParams(GridLayout.LayoutParams)|Copy construct
|android.widget.GridLayout.LayoutParams(GridLayout.Spec,GridLayout.Spec)|Constr
|android.widget.GridLayout.LayoutParams(ViewGroup.LayoutParams)|
|android.widget.GridLayout.LayoutParams(ViewGroup.MarginLayoutParams)|

*android.widget.GridLayout.LayoutParams_Methods*
|android.widget.GridLayout.LayoutParams.equals(Object)|
|android.widget.GridLayout.LayoutParams.hashCode()|
|android.widget.GridLayout.LayoutParams.setBaseAttributes(TypedArray,int,int)|
|android.widget.GridLayout.LayoutParams.setGravity(int)|Describes how the child

*android.widget.GridLayout.LayoutParams_Description*

Layout information associated with each of the children of a GridLayout. 

GridLayout supports both row and column spanning and arbitrary forms of 
alignment within each cell group. The fundamental parameters associated with 
each cell group are gathered into their vertical and horizontal components and 
stored in the (|android.widget.GridLayout.LayoutParams|) and 
(|android.widget.GridLayout.LayoutParams|) layout parameters. 
Specs(|android.widget.GridLayout.Spec|) are immutable structures and may be 
shared between the layout parameters of different children. 

The row and column specs contain the leading and trailing indices along each 
axis and together specify the four grid indices that delimit the cells of this 
cell group. 

The alignment properties of the row and column specs together specify both 
aspects of alignment within the cell group. It is also possible to specify a 
child's alignment within its cell group by using the 
(|android.widget.GridLayout.LayoutParams|) method. 

WRAP_CONTENT and MATCH_PARENT 

Because the default values of the (|android.widget.GridLayout.LayoutParams|) 
and (|android.widget.GridLayout.LayoutParams|) properties are both 
(|android.widget.GridLayout.LayoutParams|) , this value never needs to be 
explicitly declared in the layout parameters of GridLayout's children. In 
addition, GridLayout does not distinguish the special size value 
(|android.widget.GridLayout.LayoutParams|) from 
(|android.widget.GridLayout.LayoutParams|) . A component's ability to expand to 
the size of the parent is instead controlled by the principle of flexibility, 
as discussed in (|android.widget.GridLayout|) . 

Summary 

You should not need to use either of the special size 
values:WRAP_CONTENTorMATCH_PARENTwhen configuring the children of a GridLayout. 

Default values 

(|android.widget.GridLayout.LayoutParams|) = 
(|android.widget.GridLayout.LayoutParams|) 
(|android.widget.GridLayout.LayoutParams|) = 
(|android.widget.GridLayout.LayoutParams|) 
(|android.widget.GridLayout.LayoutParams|) = 0 when 
useDefaultMargins(|android.widget.GridLayout|) isfalse; otherwise 
(|android.widget.GridLayout.LayoutParams|) , to indicate that a default value 
should be computed on demand. (|android.widget.GridLayout.LayoutParams|) = 0 
when useDefaultMargins(|android.widget.GridLayout|) isfalse; otherwise 
(|android.widget.GridLayout.LayoutParams|) , to indicate that a default value 
should be computed on demand. (|android.widget.GridLayout.LayoutParams|) = 0 
when useDefaultMargins(|android.widget.GridLayout|) isfalse; otherwise 
(|android.widget.GridLayout.LayoutParams|) , to indicate that a default value 
should be computed on demand. (|android.widget.GridLayout.LayoutParams|) = 0 
when useDefaultMargins(|android.widget.GridLayout|) isfalse; otherwise 
(|android.widget.GridLayout.LayoutParams|) , to indicate that a default value 
should be computed on demand. (|android.widget.GridLayout.LayoutParams|) .row = 
(|android.widget.GridLayout.LayoutParams|) 
(|android.widget.GridLayout.LayoutParams|) .rowSpan = 1 
(|android.widget.GridLayout.LayoutParams|) .alignment = 
(|android.widget.GridLayout.LayoutParams|) 
(|android.widget.GridLayout.LayoutParams|) .column = 
(|android.widget.GridLayout.LayoutParams|) 
(|android.widget.GridLayout.LayoutParams|) .columnSpan = 1 
(|android.widget.GridLayout.LayoutParams|) .alignment = 
(|android.widget.GridLayout.LayoutParams|) 

See (|android.widget.GridLayout|) for a more complete description of the 
conventions used by GridLayout in the interpretation of the properties of this 
class. 



*android.widget.GridLayout.Spec_android.widget.GridLayout.LayoutParams.columnSpec*

The spec that defines the horizontal characteristics of the cell group 
described by these layout parameters. If an assignment is made to this field 
after a measurement or layout operation has already taken place, a call to 
(|android.view.ViewGroup|) must be made to notify GridLayout of the change. 
GridLayout is normally able to detect when code fails to observe this rule, 
issue a warning and take steps to compensate for the omission. This facility is 
implemented on a best effort basis and should not be relied upon in production 
code - so it is best to include the above calls to remove the warnings as soon 
as it is practical. 


*android.widget.GridLayout.Spec_android.widget.GridLayout.LayoutParams.rowSpec*

The spec that defines the vertical characteristics of the cell group described 
by these layout parameters. If an assignment is made to this field after a 
measurement or layout operation has already taken place, a call to 
(|android.view.ViewGroup|) must be made to notify GridLayout of the change. 
GridLayout is normally able to detect when code fails to observe this rule, 
issue a warning and take steps to compensate for the omission. This facility is 
implemented on a best effort basis and should not be relied upon in production 
code - so it is best to include the above calls to remove the warnings as soon 
as it is practical. 



*android.widget.GridLayout.LayoutParams()*

public GridLayout.LayoutParams()

Constructs a new LayoutParams with default values as defined in 
(|android.widget.GridLayout.LayoutParams|) . 


*android.widget.GridLayout.LayoutParams(Context,AttributeSet)*

public GridLayout.LayoutParams(
  android.content.Context context,
  android.util.AttributeSet attrs)

Values not defined in the attribute set take the default values defined in 
(|android.widget.GridLayout.LayoutParams|) . 


*android.widget.GridLayout.LayoutParams(GridLayout.LayoutParams)*

public GridLayout.LayoutParams(android.widget.GridLayout.LayoutParams source)

Copy constructor. Clones the width, height, margin values, row spec, and column 
spec of the source. 

    source - The layout params to copy from. 

*android.widget.GridLayout.LayoutParams(GridLayout.Spec,GridLayout.Spec)*

public GridLayout.LayoutParams(
  android.widget.GridLayout.Spec rowSpec,
  android.widget.GridLayout.Spec columnSpec)

Constructs a new LayoutParams instance for this rowSpec and columnSpec. All 
other fields are initialized with default values as defined in 
(|android.widget.GridLayout.LayoutParams|) . 

    rowSpec - the rowSpec 
    columnSpec - the columnSpec 

*android.widget.GridLayout.LayoutParams(ViewGroup.LayoutParams)*

public GridLayout.LayoutParams(android.view.ViewGroup.LayoutParams params)




*android.widget.GridLayout.LayoutParams(ViewGroup.MarginLayoutParams)*

public GridLayout.LayoutParams(android.view.ViewGroup.MarginLayoutParams params)




*android.widget.GridLayout.LayoutParams.equals(Object)*

public boolean equals(java.lang.Object o)





*android.widget.GridLayout.LayoutParams.hashCode()*

public int hashCode()





*android.widget.GridLayout.LayoutParams.setBaseAttributes(TypedArray,int,int)*

protected void setBaseAttributes(
  android.content.res.TypedArray attributes,
  int widthAttr,
  int heightAttr)





*android.widget.GridLayout.LayoutParams.setGravity(int)*

public void setGravity(int gravity)

Describes how the child views are positioned. Default isLEFT | BASELINE. See 
(|android.view.Gravity|) . 


    gravity - the new gravity value 


