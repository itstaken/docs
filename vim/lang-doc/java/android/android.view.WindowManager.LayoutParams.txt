*android.view.WindowManager.LayoutParams* *WindowManager.LayoutParams* 

public static class WindowManager.LayoutParams
  extends    |android.view.ViewGroup.LayoutParams|
  implements |android.os.Parcelable|

|android.view.WindowManager.LayoutParams_Description|
|android.view.WindowManager.LayoutParams_Fields|
|android.view.WindowManager.LayoutParams_Constructors|
|android.view.WindowManager.LayoutParams_Methods|

================================================================================

*android.view.WindowManager.LayoutParams_Fields*
|float_android.view.WindowManager.LayoutParams.alpha|
|int_android.view.WindowManager.LayoutParams.ALPHA_CHANGED|
|int_android.view.WindowManager.LayoutParams.ANIMATION_CHANGED|
|float_android.view.WindowManager.LayoutParams.BRIGHTNESS_OVERRIDE_FULL|
|float_android.view.WindowManager.LayoutParams.BRIGHTNESS_OVERRIDE_NONE|
|float_android.view.WindowManager.LayoutParams.BRIGHTNESS_OVERRIDE_OFF|
|int_android.view.WindowManager.LayoutParams.BUTTON_BRIGHTNESS_CHANGED|
|float_android.view.WindowManager.LayoutParams.buttonBrightness|
|android.os.Parcelable.Creator<android.view.WindowManager.LayoutParams>_android.view.WindowManager.LayoutParams.CREATOR|
|int_android.view.WindowManager.LayoutParams.DIM_AMOUNT_CHANGED|
|float_android.view.WindowManager.LayoutParams.dimAmount|
|int_android.view.WindowManager.LayoutParams.EVERYTHING_CHANGED|
|int_android.view.WindowManager.LayoutParams.FIRST_APPLICATION_WINDOW|
|int_android.view.WindowManager.LayoutParams.FIRST_SUB_WINDOW|
|int_android.view.WindowManager.LayoutParams.FIRST_SYSTEM_WINDOW|
|int_android.view.WindowManager.LayoutParams.FLAG_ALLOW_LOCK_WHILE_SCREEN_ON|
|int_android.view.WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM|
|int_android.view.WindowManager.LayoutParams.FLAG_BLUR_BEHIND|
|int_android.view.WindowManager.LayoutParams.FLAG_DIM_BEHIND|
|int_android.view.WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD|
|int_android.view.WindowManager.LayoutParams.FLAG_DITHER|
|int_android.view.WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN|
|int_android.view.WindowManager.LayoutParams.FLAG_FULLSCREEN|
|int_android.view.WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED|
|int_android.view.WindowManager.LayoutParams.FLAG_IGNORE_CHEEK_PRESSES|
|int_android.view.WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON|
|int_android.view.WindowManager.LayoutParams.FLAG_LAYOUT_IN_OVERSCAN|
|int_android.view.WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN|
|int_android.view.WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR|
|int_android.view.WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS|
|int_android.view.WindowManager.LayoutParams.FLAG_LOCAL_FOCUS_MODE|
|int_android.view.WindowManager.LayoutParams.FLAG_NEEDS_MENU_KEY|
|int_android.view.WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE|
|int_android.view.WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL|
|int_android.view.WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE|
|int_android.view.WindowManager.LayoutParams.FLAG_SCALED|
|int_android.view.WindowManager.LayoutParams.FLAG_SECURE|
|int_android.view.WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER|
|int_android.view.WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED|
|int_android.view.WindowManager.LayoutParams.FLAG_SLIPPERY|
|int_android.view.WindowManager.LayoutParams.FLAG_SPLIT_TOUCH|
|int_android.view.WindowManager.LayoutParams.FLAG_TOUCHABLE_WHEN_WAKING|
|int_android.view.WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION|
|int_android.view.WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS|
|int_android.view.WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON|
|int_android.view.WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH|
|int_android.view.WindowManager.LayoutParams.flags|
|int_android.view.WindowManager.LayoutParams.FLAGS_CHANGED|
|int_android.view.WindowManager.LayoutParams.format|
|int_android.view.WindowManager.LayoutParams.FORMAT_CHANGED|
|int_android.view.WindowManager.LayoutParams.gravity|
|boolean_android.view.WindowManager.LayoutParams.hasSystemUiListeners|
|float_android.view.WindowManager.LayoutParams.horizontalMargin|
|float_android.view.WindowManager.LayoutParams.horizontalWeight|
|int_android.view.WindowManager.LayoutParams.INPUT_FEATURE_DISABLE_POINTER_GESTURES|
|int_android.view.WindowManager.LayoutParams.INPUT_FEATURE_DISABLE_USER_ACTIVITY|
|int_android.view.WindowManager.LayoutParams.INPUT_FEATURE_NO_INPUT_CHANNEL|
|int_android.view.WindowManager.LayoutParams.INPUT_FEATURES_CHANGED|
|int_android.view.WindowManager.LayoutParams.inputFeatures|
|int_android.view.WindowManager.LayoutParams.LAST_APPLICATION_WINDOW|
|int_android.view.WindowManager.LayoutParams.LAST_SUB_WINDOW|
|int_android.view.WindowManager.LayoutParams.LAST_SYSTEM_WINDOW|
|int_android.view.WindowManager.LayoutParams.LAYOUT_CHANGED|
|int_android.view.WindowManager.LayoutParams.MEMORY_TYPE_CHANGED|
|int_android.view.WindowManager.LayoutParams.MEMORY_TYPE_GPU|
|int_android.view.WindowManager.LayoutParams.MEMORY_TYPE_HARDWARE|
|int_android.view.WindowManager.LayoutParams.MEMORY_TYPE_NORMAL|
|int_android.view.WindowManager.LayoutParams.MEMORY_TYPE_PUSH_BUFFERS|
|int_android.view.WindowManager.LayoutParams.memoryType|
|java.lang.String_android.view.WindowManager.LayoutParams.packageName|
|int_android.view.WindowManager.LayoutParams.PRIVATE_FLAG_COMPATIBLE_WINDOW|
|int_android.view.WindowManager.LayoutParams.PRIVATE_FLAG_FAKE_HARDWARE_ACCELERATED|
|int_android.view.WindowManager.LayoutParams.PRIVATE_FLAG_FORCE_HARDWARE_ACCELERATED|
|int_android.view.WindowManager.LayoutParams.PRIVATE_FLAG_FORCE_SHOW_NAV_BAR|
|int_android.view.WindowManager.LayoutParams.PRIVATE_FLAG_INHERIT_TRANSLUCENT_DECOR|
|int_android.view.WindowManager.LayoutParams.PRIVATE_FLAG_NO_MOVE_ANIMATION|
|int_android.view.WindowManager.LayoutParams.PRIVATE_FLAG_SET_NEEDS_MENU_KEY|
|int_android.view.WindowManager.LayoutParams.PRIVATE_FLAG_SHOW_FOR_ALL_USERS|
|int_android.view.WindowManager.LayoutParams.PRIVATE_FLAG_SYSTEM_ERROR|
|int_android.view.WindowManager.LayoutParams.PRIVATE_FLAG_WANTS_OFFSET_NOTIFICATIONS|
|int_android.view.WindowManager.LayoutParams.PRIVATE_FLAGS_CHANGED|
|int_android.view.WindowManager.LayoutParams.privateFlags|
|int_android.view.WindowManager.LayoutParams.ROTATION_ANIMATION_CHANGED|
|int_android.view.WindowManager.LayoutParams.ROTATION_ANIMATION_CROSSFADE|
|int_android.view.WindowManager.LayoutParams.ROTATION_ANIMATION_JUMPCUT|
|int_android.view.WindowManager.LayoutParams.ROTATION_ANIMATION_ROTATE|
|int_android.view.WindowManager.LayoutParams.rotationAnimation|
|int_android.view.WindowManager.LayoutParams.SCREEN_BRIGHTNESS_CHANGED|
|int_android.view.WindowManager.LayoutParams.SCREEN_ORIENTATION_CHANGED|
|float_android.view.WindowManager.LayoutParams.screenBrightness|
|int_android.view.WindowManager.LayoutParams.screenOrientation|
|int_android.view.WindowManager.LayoutParams.SOFT_INPUT_ADJUST_NOTHING|
|int_android.view.WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN|
|int_android.view.WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE|
|int_android.view.WindowManager.LayoutParams.SOFT_INPUT_ADJUST_UNSPECIFIED|
|int_android.view.WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION|
|int_android.view.WindowManager.LayoutParams.SOFT_INPUT_MASK_ADJUST|
|int_android.view.WindowManager.LayoutParams.SOFT_INPUT_MASK_STATE|
|int_android.view.WindowManager.LayoutParams.SOFT_INPUT_MODE_CHANGED|
|int_android.view.WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN|
|int_android.view.WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE|
|int_android.view.WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN|
|int_android.view.WindowManager.LayoutParams.SOFT_INPUT_STATE_UNCHANGED|
|int_android.view.WindowManager.LayoutParams.SOFT_INPUT_STATE_UNSPECIFIED|
|int_android.view.WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE|
|int_android.view.WindowManager.LayoutParams.softInputMode|
|int_android.view.WindowManager.LayoutParams.subtreeSystemUiVisibility|
|int_android.view.WindowManager.LayoutParams.SYSTEM_UI_LISTENER_CHANGED|
|int_android.view.WindowManager.LayoutParams.SYSTEM_UI_VISIBILITY_CHANGED|
|int_android.view.WindowManager.LayoutParams.systemUiVisibility|
|int_android.view.WindowManager.LayoutParams.TITLE_CHANGED|
|android.os.IBinder_android.view.WindowManager.LayoutParams.token|
|int_android.view.WindowManager.LayoutParams.TRANSLUCENT_FLAGS_CHANGED|
|int_android.view.WindowManager.LayoutParams.type|
|int_android.view.WindowManager.LayoutParams.TYPE_APPLICATION|
|int_android.view.WindowManager.LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG|
|int_android.view.WindowManager.LayoutParams.TYPE_APPLICATION_MEDIA|
|int_android.view.WindowManager.LayoutParams.TYPE_APPLICATION_MEDIA_OVERLAY|
|int_android.view.WindowManager.LayoutParams.TYPE_APPLICATION_PANEL|
|int_android.view.WindowManager.LayoutParams.TYPE_APPLICATION_STARTING|
|int_android.view.WindowManager.LayoutParams.TYPE_APPLICATION_SUB_PANEL|
|int_android.view.WindowManager.LayoutParams.TYPE_BASE_APPLICATION|
|int_android.view.WindowManager.LayoutParams.TYPE_BOOT_PROGRESS|
|int_android.view.WindowManager.LayoutParams.TYPE_CHANGED|
|int_android.view.WindowManager.LayoutParams.TYPE_DISPLAY_OVERLAY|
|int_android.view.WindowManager.LayoutParams.TYPE_DRAG|
|int_android.view.WindowManager.LayoutParams.TYPE_DREAM|
|int_android.view.WindowManager.LayoutParams.TYPE_HIDDEN_NAV_CONSUMER|
|int_android.view.WindowManager.LayoutParams.TYPE_INPUT_METHOD|
|int_android.view.WindowManager.LayoutParams.TYPE_INPUT_METHOD_DIALOG|
|int_android.view.WindowManager.LayoutParams.TYPE_KEYGUARD|
|int_android.view.WindowManager.LayoutParams.TYPE_KEYGUARD_DIALOG|
|int_android.view.WindowManager.LayoutParams.TYPE_KEYGUARD_SCRIM|
|int_android.view.WindowManager.LayoutParams.TYPE_MAGNIFICATION_OVERLAY|
|int_android.view.WindowManager.LayoutParams.TYPE_NAVIGATION_BAR|
|int_android.view.WindowManager.LayoutParams.TYPE_NAVIGATION_BAR_PANEL|
|int_android.view.WindowManager.LayoutParams.TYPE_PHONE|
|int_android.view.WindowManager.LayoutParams.TYPE_POINTER|
|int_android.view.WindowManager.LayoutParams.TYPE_PRIORITY_PHONE|
|int_android.view.WindowManager.LayoutParams.TYPE_PRIVATE_PRESENTATION|
|int_android.view.WindowManager.LayoutParams.TYPE_RECENTS_OVERLAY|
|int_android.view.WindowManager.LayoutParams.TYPE_SEARCH_BAR|
|int_android.view.WindowManager.LayoutParams.TYPE_SECURE_SYSTEM_OVERLAY|
|int_android.view.WindowManager.LayoutParams.TYPE_STATUS_BAR|
|int_android.view.WindowManager.LayoutParams.TYPE_STATUS_BAR_PANEL|
|int_android.view.WindowManager.LayoutParams.TYPE_STATUS_BAR_SUB_PANEL|
|int_android.view.WindowManager.LayoutParams.TYPE_SYSTEM_ALERT|
|int_android.view.WindowManager.LayoutParams.TYPE_SYSTEM_DIALOG|
|int_android.view.WindowManager.LayoutParams.TYPE_SYSTEM_ERROR|
|int_android.view.WindowManager.LayoutParams.TYPE_SYSTEM_OVERLAY|
|int_android.view.WindowManager.LayoutParams.TYPE_TOAST|
|int_android.view.WindowManager.LayoutParams.TYPE_UNIVERSE_BACKGROUND|
|int_android.view.WindowManager.LayoutParams.TYPE_VOLUME_OVERLAY|
|int_android.view.WindowManager.LayoutParams.TYPE_WALLPAPER|
|int_android.view.WindowManager.LayoutParams.USER_ACTIVITY_TIMEOUT_CHANGED|
|long_android.view.WindowManager.LayoutParams.userActivityTimeout|
|float_android.view.WindowManager.LayoutParams.verticalMargin|
|float_android.view.WindowManager.LayoutParams.verticalWeight|
|int_android.view.WindowManager.LayoutParams.windowAnimations|
|int_android.view.WindowManager.LayoutParams.x|
|int_android.view.WindowManager.LayoutParams.y|

*android.view.WindowManager.LayoutParams_Constructors*
|android.view.WindowManager.LayoutParams()|
|android.view.WindowManager.LayoutParams(int)|
|android.view.WindowManager.LayoutParams(int,int)|
|android.view.WindowManager.LayoutParams(int,int,int)|
|android.view.WindowManager.LayoutParams(int,int,int,int,int)|
|android.view.WindowManager.LayoutParams(int,int,int,int,int,int,int)|
|android.view.WindowManager.LayoutParams(Parcel)|

*android.view.WindowManager.LayoutParams_Methods*
|android.view.WindowManager.LayoutParams.copyFrom(WindowManager.LayoutParams)|
|android.view.WindowManager.LayoutParams.debug(String)|
|android.view.WindowManager.LayoutParams.describeContents()|
|android.view.WindowManager.LayoutParams.getTitle()|
|android.view.WindowManager.LayoutParams.mayUseInputMethod(int)|Given a particu
|android.view.WindowManager.LayoutParams.scale(float)|Scale the layout params' 
|android.view.WindowManager.LayoutParams.setTitle(CharSequence)|
|android.view.WindowManager.LayoutParams.toString()|
|android.view.WindowManager.LayoutParams.writeToParcel(Parcel,int)|

*android.view.WindowManager.LayoutParams_Description*





*float_android.view.WindowManager.LayoutParams.alpha*

An alpha value to apply to this entire window. An alpha of 1.0 means fully 
opaque and 0.0 means fully transparent 


*int_android.view.WindowManager.LayoutParams.ALPHA_CHANGED*




*int_android.view.WindowManager.LayoutParams.ANIMATION_CHANGED*




*float_android.view.WindowManager.LayoutParams.BRIGHTNESS_OVERRIDE_FULL*

Value for (|android.view.WindowManager.LayoutParams|) and 
(|android.view.WindowManager.LayoutParams|) indicating that the screen or 
button backlight brightness should be set to the hightest value when this 
window is in front. 


*float_android.view.WindowManager.LayoutParams.BRIGHTNESS_OVERRIDE_NONE*

Default value for (|android.view.WindowManager.LayoutParams|) and 
(|android.view.WindowManager.LayoutParams|) indicating that the brightness 
value is not overridden for this window and normal brightness policy should be 
used. 


*float_android.view.WindowManager.LayoutParams.BRIGHTNESS_OVERRIDE_OFF*

Value for (|android.view.WindowManager.LayoutParams|) and 
(|android.view.WindowManager.LayoutParams|) indicating that the screen or 
button backlight brightness should be set to the lowest value when this window 
is in front. 


*int_android.view.WindowManager.LayoutParams.BUTTON_BRIGHTNESS_CHANGED*




*float_android.view.WindowManager.LayoutParams.buttonBrightness*

This can be used to override the standard behavior of the button and keyboard 
backlights. A value of less than 0, the default, means to use the standard 
backlight behavior. 0 to 1 adjusts the brightness from dark to full bright. 


*android.os.Parcelable.Creator<android.view.WindowManager.LayoutParams>_android.view.WindowManager.LayoutParams.CREATOR*




*int_android.view.WindowManager.LayoutParams.DIM_AMOUNT_CHANGED*




*float_android.view.WindowManager.LayoutParams.dimAmount*

When (|android.view.WindowManager.LayoutParams|) is set, this is the amount of 
dimming to apply. Range is from 1.0 for completely opaque to 0.0 for no dim. 


*int_android.view.WindowManager.LayoutParams.EVERYTHING_CHANGED*




*int_android.view.WindowManager.LayoutParams.FIRST_APPLICATION_WINDOW*

Start of window types that represent normal application windows. 


*int_android.view.WindowManager.LayoutParams.FIRST_SUB_WINDOW*

Start of types of sub-windows. The (|android.view.WindowManager.LayoutParams|) 
of these windows must be set to the window they are attached to. These types of 
windows are kept next to their attached window in Z-order, and their coordinate 
space is relative to their attached window. 


*int_android.view.WindowManager.LayoutParams.FIRST_SYSTEM_WINDOW*

Start of system-specific window types. These are not normally created by 
applications. 


*int_android.view.WindowManager.LayoutParams.FLAG_ALLOW_LOCK_WHILE_SCREEN_ON*

Window flag: as long as this window is visible to the user, allow the lock 
screen to activate while the screen is on. This can be used independently, or 
in combination with (|android.view.WindowManager.LayoutParams|) and/or 
(|android.view.WindowManager.LayoutParams|) 


*int_android.view.WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM*

Window flag: invert the state of (|android.view.WindowManager.LayoutParams|) 
with respect to how this window interacts with the current method. That is, if 
FLAG_NOT_FOCUSABLE is set and this flag is set, then the window will behave as 
if it needs to interact with the input method and thus be placed behind/away 
from it; if FLAG_NOT_FOCUSABLE is not set and this flag is set, then the window 
will behave as if it doesn't need to interact with the input method and can be 
placed to use more space and cover the input method. 


*int_android.view.WindowManager.LayoutParams.FLAG_BLUR_BEHIND*

Window flag: blur everything behind this window. 


*int_android.view.WindowManager.LayoutParams.FLAG_DIM_BEHIND*

Window flag: everything behind this window will be dimmed. Use 
(|android.view.WindowManager.LayoutParams|) to control the amount of dim. 


*int_android.view.WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD*

Window flag: when set the window will cause the keyguard to be dismissed, only 
if it is not a secure lock keyguard. Because such a keyguard is not needed for 
security, it will never re-appear if the user navigates to another window (in 
contrast to (|android.view.WindowManager.LayoutParams|) , which will only 
temporarily hide both secure and non-secure keyguards but ensure they reappear 
when the user moves to another UI that doesn't hide them). If the keyguard is 
currently active and is secure (requires an unlock pattern) than the user will 
still need to confirm it before seeing this window, unless 
(|android.view.WindowManager.LayoutParams|) has also been set. 


*int_android.view.WindowManager.LayoutParams.FLAG_DITHER*

Window flag: turn on dithering when compositing this window to the screen. 


*int_android.view.WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN*

Window flag: override (|android.view.WindowManager.LayoutParams|) and force the 
screen decorations (such as the status bar) to be shown. 


*int_android.view.WindowManager.LayoutParams.FLAG_FULLSCREEN*

Window flag: hide all screen decorations (such as the status bar) while this 
window is displayed. This allows the window to use the entire display space for 
itself -- the status bar will be hidden when an app window with this flag set 
is on the top layer. A fullscreen window will ignore a value of 
(|android.view.WindowManager.LayoutParams|) for the window's 
(|android.view.WindowManager.LayoutParams|) field; the window will stay 
fullscreen and will not resize. 

This flag can be controlled in your theme through the (|android.R.attr|) 
attribute; this attribute is automatically set for you in the standard 
fullscreen themes such as (|android.R.style|) , (|android.R.style|) , 
(|android.R.style|) , (|android.R.style|) , (|android.R.style|) , 
(|android.R.style|) , and (|android.R.style|) . 


*int_android.view.WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED*

Indicates whether this window should be hardware accelerated. Requesting 
hardware acceleration does not guarantee it will happen. 

This flag can be controlled programmatically only to enable hardware 
acceleration. To enable hardware acceleration for a given window 
programmatically, do the following: 



Window w = activity.getWindow(); // in Activity's onCreate() for instance 
w.setFlags(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED, 
WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED); 

It is important to remember that this flag must be set before setting the 
content view of your activity or dialog. 

This flag cannot be used to disable hardware acceleration after it was enabled 
in your manifest using (|android.R.attr|) . If you need to selectively and 
programmatically disable hardware acceleration (for automated testing for 
instance), make sure it is turned off in your manifest and enable it on your 
activity or dialog when you need it instead, using the method described above. 

This flag is automatically set by the system if the 
android:hardwareAccelerated(|android.R.attr|) XML attribute is set to true on 
an activity or on the application. 


*int_android.view.WindowManager.LayoutParams.FLAG_IGNORE_CHEEK_PRESSES*

Window flag: intended for windows that will often be used when the user is 
holding the screen against their face, it will aggressively filter the event 
stream to prevent unintended presses in this situation that may not be desired 
for a particular window, when such an event stream is detected, the application 
will receive a CANCEL motion event to indicate this so applications can handle 
this accordingly by taking no action on the event until the finger is released. 


*int_android.view.WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON*

Window flag: as long as this window is visible to the user, keep the device's 
screen turned on and bright. 


*int_android.view.WindowManager.LayoutParams.FLAG_LAYOUT_IN_OVERSCAN*

Window flag: allow window contents to extend in to the screen's overscan area, 
if there is one. The window should still correctly position its contents to 
take the overscan area into account. 

This flag can be controlled in your theme through the (|android.R.attr|) 
attribute; this attribute is automatically set for you in the standard overscan 
themes such as (|android.R.style|) , (|android.R.style|) , (|android.R.style|) 
, and (|android.R.style|) . 

When this flag is enabled for a window, its normal content may be obscured to 
some degree by the overscan region of the display. To ensure key parts of that 
content are visible to the user, you can use 
View.setFitsSystemWindows(boolean)(|android.view.View|) to set the point in the 
view hierarchy where the appropriate offsets should be applied. (This can be 
done either by directly calling this function, using the (|android.R.attr|) 
attribute in your view hierarchy, or implementing you own 
View.fitSystemWindows(Rect)(|android.view.View|) method). 

This mechanism for positioning content elements is identical to its equivalent 
use with layout and View.setSystemUiVisibility(int)(|android.view.View|) ; here 
is an example layout that will correctly position its UI elements with this 
overscan flag is 
set:development/samples/ApiDemos/res/layout/overscan_activity.xml complete 


*int_android.view.WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN*

Window flag: place the window within the entire screen, ignoring decorations 
around the border (such as the status bar). The window must correctly position 
its contents to take the screen decoration into account. This flag is normally 
set for you by Window as described in (|android.view.Window|) . 


*int_android.view.WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR*

Window flag: a special option only for use in combination with 
(|android.view.WindowManager.LayoutParams|) . When requesting layout in the 
screen your window may appear on top of or behind screen decorations such as 
the status bar. By also including this flag, the window manager will report the 
inset rectangle needed to ensure your content is not covered by screen 
decorations. This flag is normally set for you by Window as described in 
(|android.view.Window|) . 


*int_android.view.WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS*

Window flag: allow window to extend outside of the screen. 


*int_android.view.WindowManager.LayoutParams.FLAG_LOCAL_FOCUS_MODE*

Flag for a window in local focus mode. Window in local focus mode can control 
focus independent of window manager using (|android.view.Window|) . Usually 
window in this mode will not get touch/key events from window manager, but will 
get events only via local injection using (|android.view.Window|) . 


*int_android.view.WindowManager.LayoutParams.FLAG_NEEDS_MENU_KEY*

Flag for a window belonging to an activity that responds to 
(|android.view.KeyEvent|) and therefore needs a Menu key. For devices where 
Menu is a physical button this flag is ignored, but on devices where the Menu 
key is drawn in software it may be hidden unless this flag is set. 

(Note that Action Bars, when available, are the preferred way to offer 
additional functions otherwise accessed via an options menu.) 


*int_android.view.WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE*

Window flag: this window won't ever get key input focus, so the user can not 
send key or other button events to it. Those will instead go to whatever 
focusable window is behind it. This flag will also enable 
(|android.view.WindowManager.LayoutParams|) whether or not that is explicitly 
set. 

Setting this flag also implies that the window will not need to interact with a 
soft input method, so it will be Z-ordered and positioned independently of any 
active input method (typically this means it gets Z-ordered on top of the input 
method, so it can use the full screen for its content and cover the input 
method if needed. You can use (|android.view.WindowManager.LayoutParams|) to 
modify this behavior. 


*int_android.view.WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL*

Window flag: even when this window is focusable (its 
(|android.view.WindowManager.LayoutParams|) is not set), allow any pointer 
events outside of the window to be sent to the windows behind it. Otherwise it 
will consume all pointer events itself, regardless of whether they are inside 
of the window. 


*int_android.view.WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE*

Window flag: this window can never receive touch events. 


*int_android.view.WindowManager.LayoutParams.FLAG_SCALED*

Window flag: a special mode where the layout parameters are used to perform 
scaling of the surface when it is composited to the screen. 


*int_android.view.WindowManager.LayoutParams.FLAG_SECURE*

Window flag: treat the content of the window as secure, preventing it from 
appearing in screenshots or from being viewed on non-secure displays. 

See (|android.view.Display|) for more details about secure surfaces and secure 
displays. 


*int_android.view.WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER*

Window flag: ask that the system wallpaper be shown behind your window. The 
window surface must be translucent to be able to actually see the wallpaper 
behind it; this flag just ensures that the wallpaper surface will be there if 
this window actually has translucent regions. 

This flag can be controlled in your theme through the (|android.R.attr|) 
attribute; this attribute is automatically set for you in the standard 
wallpaper themes such as (|android.R.style|) , (|android.R.style|) , 
(|android.R.style|) , (|android.R.style|) , (|android.R.style|) , 
(|android.R.style|) , and (|android.R.style|) . 


*int_android.view.WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED*

Window flag: special flag to let windows be shown when the screen is locked. 
This will let application windows take precedence over key guard or any other 
lock screens. Can be used with (|android.view.WindowManager.LayoutParams|) to 
turn screen on and display windows directly before showing the key guard 
window. Can be used with (|android.view.WindowManager.LayoutParams|) to 
automatically fully dismisss non-secure keyguards. This flag only applies to 
the top-most full-screen window. 


*int_android.view.WindowManager.LayoutParams.FLAG_SLIPPERY*

Window flag: Enable touches to slide out of a window into neighboring windows 
in mid-gesture instead of being captured for the duration of the gesture. 

This flag changes the behavior of touch focus for this window only. Touches can 
slide out of the window but they cannot necessarily slide back in (unless the 
other window with touch focus permits it). 


*int_android.view.WindowManager.LayoutParams.FLAG_SPLIT_TOUCH*

Window flag: when set the window will accept for touch events outside of its 
bounds to be sent to other windows that also support split touch. When this 
flag is not set, the first pointer that goes down determines the window to 
which all subsequent touches go until all pointers go up. When this flag is 
set, each pointer (not necessarily the first) that goes down determines the 
window to which all subsequent touches of that pointer will go until that 
pointer goes up thereby enabling touches with multiple pointers to be split 
across multiple windows. 


*int_android.view.WindowManager.LayoutParams.FLAG_TOUCHABLE_WHEN_WAKING*

Window flag: when set, if the device is asleep when the touch screen is 
pressed, you will receive this first touch event. Usually the first touch event 
is consumed by the system since the user can not see what they are pressing on. 


*int_android.view.WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION*

Window flag: request a translucent navigation bar with minimal system-provided 
background protection. 

This flag can be controlled in your theme through the (|android.R.attr|) 
attribute; this attribute is automatically set for you in the standard 
translucent decor themes such as (|android.R.style|) , (|android.R.style|) , 
(|android.R.style|) , and (|android.R.style|) . 

When this flag is enabled for a window, it automatically sets the system UI 
visibility flags (|android.view.View|) and (|android.view.View|) . 


*int_android.view.WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS*

Window flag: request a translucent status bar with minimal system-provided 
background protection. 

This flag can be controlled in your theme through the (|android.R.attr|) 
attribute; this attribute is automatically set for you in the standard 
translucent decor themes such as (|android.R.style|) , (|android.R.style|) , 
(|android.R.style|) , and (|android.R.style|) . 

When this flag is enabled for a window, it automatically sets the system UI 
visibility flags (|android.view.View|) and (|android.view.View|) . 


*int_android.view.WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON*

Window flag: when set as a window is being added or made visible, once the 
window has been shown then the system will poke the power manager's user 
activity (as if the user had woken up the device) to turn the screen on. 


*int_android.view.WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH*

Window flag: if you have set (|android.view.WindowManager.LayoutParams|) , you 
can set this flag to receive a single special MotionEvent with the action 
MotionEvent.ACTION_OUTSIDE(|android.view.MotionEvent|) for touches that occur 
outside of your window. Note that you will not receive the full down/move/up 
gesture, only the location of the first down as an ACTION_OUTSIDE. 


*int_android.view.WindowManager.LayoutParams.flags*

Various behavioral options/flags. Default is none. 


*int_android.view.WindowManager.LayoutParams.FLAGS_CHANGED*




*int_android.view.WindowManager.LayoutParams.format*

The desired bitmap format. May be one of the constants in 
(|android.graphics.PixelFormat|) . Default is OPAQUE. 


*int_android.view.WindowManager.LayoutParams.FORMAT_CHANGED*




*int_android.view.WindowManager.LayoutParams.gravity*

Placement of window within the screen as per (|android.view.Gravity|) . Both 
Gravity.apply(|android.view.Gravity|) and 
Gravity.applyDisplay(|android.view.Gravity|) are used during window layout, 
with this value given as the desired gravity. For example you can specify 
Gravity.DISPLAY_CLIP_HORIZONTAL(|android.view.Gravity|) and 
Gravity.DISPLAY_CLIP_VERTICAL(|android.view.Gravity|) here to control the 
behavior of Gravity.applyDisplay(|android.view.Gravity|) . 


*boolean_android.view.WindowManager.LayoutParams.hasSystemUiListeners*

Get callbacks about the system ui visibility changing. 

TODO: Maybe there should be a bitfield of optional callbacks that we need. 


*float_android.view.WindowManager.LayoutParams.horizontalMargin*

The horizontal margin, as a percentage of the container's width, between the 
container and the widget. See Gravity.apply(|android.view.Gravity|) for how 
this is used. This field is added with 
(|android.view.WindowManager.LayoutParams|) to supply the xAdj parameter. 


*float_android.view.WindowManager.LayoutParams.horizontalWeight*

Indicates how much of the extra space will be allocated horizontally to the 
view associated with these LayoutParams. Specify 0 if the view should not be 
stretched. Otherwise the extra pixels will be pro-rated among all views whose 
weight is greater than 0. 


*int_android.view.WindowManager.LayoutParams.INPUT_FEATURE_DISABLE_POINTER_GESTURES*

When this window has focus, disable touch pad pointer gesture processing. The 
window will receive raw position updates from the touch pad instead of pointer 
movements and synthetic touch events. 


*int_android.view.WindowManager.LayoutParams.INPUT_FEATURE_DISABLE_USER_ACTIVITY*

When this window has focus, does not call user activity for all input events so 
the application will have to do it itself. Should only be used by the keyguard 
and phone app. 

Should only be used by the keyguard and phone app. 


*int_android.view.WindowManager.LayoutParams.INPUT_FEATURE_NO_INPUT_CHANNEL*

Does not construct an input channel for this window. The channel will therefore 
be incapable of receiving input. 


*int_android.view.WindowManager.LayoutParams.INPUT_FEATURES_CHANGED*




*int_android.view.WindowManager.LayoutParams.inputFeatures*

Control special features of the input subsystem. 


*int_android.view.WindowManager.LayoutParams.LAST_APPLICATION_WINDOW*

End of types of application windows. 


*int_android.view.WindowManager.LayoutParams.LAST_SUB_WINDOW*

End of types of sub-windows. 


*int_android.view.WindowManager.LayoutParams.LAST_SYSTEM_WINDOW*

End of types of system windows. 


*int_android.view.WindowManager.LayoutParams.LAYOUT_CHANGED*




*int_android.view.WindowManager.LayoutParams.MEMORY_TYPE_CHANGED*




*int_android.view.WindowManager.LayoutParams.MEMORY_TYPE_GPU*




*int_android.view.WindowManager.LayoutParams.MEMORY_TYPE_HARDWARE*




*int_android.view.WindowManager.LayoutParams.MEMORY_TYPE_NORMAL*




*int_android.view.WindowManager.LayoutParams.MEMORY_TYPE_PUSH_BUFFERS*




*int_android.view.WindowManager.LayoutParams.memoryType*




*java.lang.String_android.view.WindowManager.LayoutParams.packageName*

Name of the package owning this window. 


*int_android.view.WindowManager.LayoutParams.PRIVATE_FLAG_COMPATIBLE_WINDOW*

Window flag: special flag to limit the size of the window to be original size 
([320x480] x density). Used to create window for applications running under 
compatibility mode. 


*int_android.view.WindowManager.LayoutParams.PRIVATE_FLAG_FAKE_HARDWARE_ACCELERATED*

If the window has requested hardware acceleration, but this is not allowed in 
the process it is in, then still render it as if it is hardware accelerated. 
This is used for the starting preview windows in the system process, which 
don't need to have the overhead of hardware acceleration (they are just a 
static rendering), but should be rendered as such to match the actual window of 
the app even if it is hardware accelerated. Even if the window isn't hardware 
accelerated, still do its rendering as if it was. Like 
(|android.view.WindowManager.LayoutParams|) except for trusted system windows 
that need hardware acceleration (e.g. LockScreen), where hardware acceleration 
is generally disabled. This flag must be specified in addition to 
(|android.view.WindowManager.LayoutParams|) to enable hardware acceleration for 
system windows. 


*int_android.view.WindowManager.LayoutParams.PRIVATE_FLAG_FORCE_HARDWARE_ACCELERATED*

In the system process, we globally do not use hardware acceleration because 
there are many threads doing UI there and they conflict. If certain parts of 
the UI that really do want to use hardware acceleration, this flag can be set 
to force it. This is basically for the lock screen. Anyone else using it, you 
are probably wrong. 


*int_android.view.WindowManager.LayoutParams.PRIVATE_FLAG_FORCE_SHOW_NAV_BAR*

Special flag for the volume overlay: force the window manager out of "hide nav 
bar" mode while the window is on screen. 


*int_android.view.WindowManager.LayoutParams.PRIVATE_FLAG_INHERIT_TRANSLUCENT_DECOR*

Window flag: maintain the previous translucent decor state when this window 
becomes top-most. 


*int_android.view.WindowManager.LayoutParams.PRIVATE_FLAG_NO_MOVE_ANIMATION*

Never animate position changes of the window. 


*int_android.view.WindowManager.LayoutParams.PRIVATE_FLAG_SET_NEEDS_MENU_KEY*

This is set for a window that has explicitly specified its FLAG_NEEDS_MENU_KEY, 
so we know the value on this window is the appropriate one to use. If this is 
not set, we should look at windows behind it to determine the appropriate 
value. 


*int_android.view.WindowManager.LayoutParams.PRIVATE_FLAG_SHOW_FOR_ALL_USERS*

In a multiuser system if this flag is set and the owner is a system process 
then this window will appear on all user screens. This overrides the default 
behavior of window types that normally only appear on the owning user's screen. 
Refer to each window type to determine its default behavior. 


*int_android.view.WindowManager.LayoutParams.PRIVATE_FLAG_SYSTEM_ERROR*

Window flag: a special option intended for system dialogs. When this flag is 
set, the window will demand focus unconditionally when it is created. 


*int_android.view.WindowManager.LayoutParams.PRIVATE_FLAG_WANTS_OFFSET_NOTIFICATIONS*

By default, wallpapers are sent new offsets when the wallpaper is scrolled. 
Wallpapers may elect to skip these notifications if they are not doing anything 
productive with them (they do not affect the wallpaper scrolling operation) by 
calling (|android.service.wallpaper.WallpaperService.Engine|) . 


*int_android.view.WindowManager.LayoutParams.PRIVATE_FLAGS_CHANGED*




*int_android.view.WindowManager.LayoutParams.privateFlags*

Control flags that are private to the platform. 


*int_android.view.WindowManager.LayoutParams.ROTATION_ANIMATION_CHANGED*




*int_android.view.WindowManager.LayoutParams.ROTATION_ANIMATION_CROSSFADE*

Value for (|android.view.WindowManager.LayoutParams|) to define the animation 
used to specify that this window will fade in or out following a rotation. 


*int_android.view.WindowManager.LayoutParams.ROTATION_ANIMATION_JUMPCUT*

Value for (|android.view.WindowManager.LayoutParams|) to define the animation 
used to specify that this window will immediately disappear or appear following 
a rotation. 


*int_android.view.WindowManager.LayoutParams.ROTATION_ANIMATION_ROTATE*

Value for (|android.view.WindowManager.LayoutParams|) to define the animation 
used to specify that this window will rotate in or out following a rotation. 


*int_android.view.WindowManager.LayoutParams.rotationAnimation*

Define the exit and entry animations used on this window when the device is 
rotated. This only has an affect if the incoming and outgoing topmost opaque 
windows have the #FLAG_FULLSCREEN bit set and are not covered by other windows. 
All other situations default to the (|android.view.WindowManager.LayoutParams|) 
behavior. 


*int_android.view.WindowManager.LayoutParams.SCREEN_BRIGHTNESS_CHANGED*




*int_android.view.WindowManager.LayoutParams.SCREEN_ORIENTATION_CHANGED*




*float_android.view.WindowManager.LayoutParams.screenBrightness*

This can be used to override the user's preferred brightness of the screen. A 
value of less than 0, the default, means to use the preferred screen 
brightness. 0 to 1 adjusts the brightness from dark to full bright. 


*int_android.view.WindowManager.LayoutParams.screenOrientation*

Specific orientation value for a window. May be any of the same values allowed 
for (|android.content.pm.ActivityInfo|) . If not set, a default value of 
(|android.content.pm.ActivityInfo|) will be used. 


*int_android.view.WindowManager.LayoutParams.SOFT_INPUT_ADJUST_NOTHING*

Adjustment option for (|android.view.WindowManager.LayoutParams|) : set to have 
a window not adjust for a shown input method. The window will not be resized, 
and it will not be panned to make its focus visible. 


*int_android.view.WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN*

Adjustment option for (|android.view.WindowManager.LayoutParams|) : set to have 
a window pan when an input method is shown, so it doesn't need to deal with 
resizing but just panned by the framework to ensure the current input focus is 
visible. This can not be combined with 
(|android.view.WindowManager.LayoutParams|) ; if neither of these are set, then 
the system will try to pick one or the other depending on the contents of the 
window. 


*int_android.view.WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE*

Adjustment option for (|android.view.WindowManager.LayoutParams|) : set to 
allow the window to be resized when an input method is shown, so that its 
contents are not covered by the input method. This can not be combined with 
(|android.view.WindowManager.LayoutParams|) ; if neither of these are set, then 
the system will try to pick one or the other depending on the contents of the 
window. If the window's layout parameter flags include 
(|android.view.WindowManager.LayoutParams|) , this value for 
(|android.view.WindowManager.LayoutParams|) will be ignored; the window will 
not resize, but will stay fullscreen. 


*int_android.view.WindowManager.LayoutParams.SOFT_INPUT_ADJUST_UNSPECIFIED*

Adjustment option for (|android.view.WindowManager.LayoutParams|) : nothing 
specified. The system will try to pick one or the other depending on the 
contents of the window. 


*int_android.view.WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION*

Bit for (|android.view.WindowManager.LayoutParams|) : set when the user has 
navigated forward to the window. This is normally set automatically for you by 
the system, though you may want to set it in certain cases when you are 
displaying a window yourself. This flag will always be cleared automatically 
after the window is displayed. 


*int_android.view.WindowManager.LayoutParams.SOFT_INPUT_MASK_ADJUST*

Mask for (|android.view.WindowManager.LayoutParams|) of the bits that determine 
the way that the window should be adjusted to accommodate the soft input 
window. 


*int_android.view.WindowManager.LayoutParams.SOFT_INPUT_MASK_STATE*

Mask for (|android.view.WindowManager.LayoutParams|) of the bits that determine 
the desired visibility state of the soft input area for this window. 


*int_android.view.WindowManager.LayoutParams.SOFT_INPUT_MODE_CHANGED*




*int_android.view.WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN*

Visibility state for (|android.view.WindowManager.LayoutParams|) : please 
always hide any soft input area when this window receives focus. 


*int_android.view.WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE*

Visibility state for (|android.view.WindowManager.LayoutParams|) : please 
always make the soft input area visible when this window receives input focus. 


*int_android.view.WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN*

Visibility state for (|android.view.WindowManager.LayoutParams|) : please hide 
any soft input area when normally appropriate (when the user is navigating 
forward to your window). 


*int_android.view.WindowManager.LayoutParams.SOFT_INPUT_STATE_UNCHANGED*

Visibility state for (|android.view.WindowManager.LayoutParams|) : please don't 
change the state of the soft input area. 


*int_android.view.WindowManager.LayoutParams.SOFT_INPUT_STATE_UNSPECIFIED*

Visibility state for (|android.view.WindowManager.LayoutParams|) : no state has 
been specified. 


*int_android.view.WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE*

Visibility state for (|android.view.WindowManager.LayoutParams|) : please show 
the soft input area when normally appropriate (when the user is navigating 
forward to your window). 


*int_android.view.WindowManager.LayoutParams.softInputMode*

Desired operating mode for any soft input area. May be any combination of: 

One of the visibility states (|android.view.WindowManager.LayoutParams|) , 
(|android.view.WindowManager.LayoutParams|) , 
(|android.view.WindowManager.LayoutParams|) , 
(|android.view.WindowManager.LayoutParams|) , or 
(|android.view.WindowManager.LayoutParams|) . One of the adjustment options 
(|android.view.WindowManager.LayoutParams|) , 
(|android.view.WindowManager.LayoutParams|) , or 
(|android.view.WindowManager.LayoutParams|) . 

This flag can be controlled in your theme through the (|android.R.attr|) 
attribute. 


*int_android.view.WindowManager.LayoutParams.subtreeSystemUiVisibility*




*int_android.view.WindowManager.LayoutParams.SYSTEM_UI_LISTENER_CHANGED*




*int_android.view.WindowManager.LayoutParams.SYSTEM_UI_VISIBILITY_CHANGED*




*int_android.view.WindowManager.LayoutParams.systemUiVisibility*

Control the visibility of the status bar. 


*int_android.view.WindowManager.LayoutParams.TITLE_CHANGED*




*android.os.IBinder_android.view.WindowManager.LayoutParams.token*

Identifier for this window. This will usually be filled in for you. 


*int_android.view.WindowManager.LayoutParams.TRANSLUCENT_FLAGS_CHANGED*




*int_android.view.WindowManager.LayoutParams.type*

The general type of window. There are three main classes of window types: 

Application windows (ranging from (|android.view.WindowManager.LayoutParams|) 
to (|android.view.WindowManager.LayoutParams|) ) are normal top-level 
application windows. For these types of windows, the 
(|android.view.WindowManager.LayoutParams|) must be set to the token of the 
activity they are a part of (this will normally be done for you if 
(|android.view.WindowManager.LayoutParams|) is null). Sub-windows (ranging from 
(|android.view.WindowManager.LayoutParams|) to 
(|android.view.WindowManager.LayoutParams|) ) are associated with another 
top-level window. For these types of windows, the 
(|android.view.WindowManager.LayoutParams|) must be the token of the window it 
is attached to. System windows (ranging from 
(|android.view.WindowManager.LayoutParams|) to 
(|android.view.WindowManager.LayoutParams|) ) are special types of windows for 
use by the system for specific purposes. They should not normally be used by 
applications, and a special permission is required to use them. 


*int_android.view.WindowManager.LayoutParams.TYPE_APPLICATION*

Window type: a normal application window. The 
(|android.view.WindowManager.LayoutParams|) must be an Activity token 
identifying who the window belongs to. In multiuser systems shows only on the 
owning user's window. 


*int_android.view.WindowManager.LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG*

Window type: like (|android.view.WindowManager.LayoutParams|) , but layout of 
the window happens as that of a top-level window, not as a child of its 
container. 


*int_android.view.WindowManager.LayoutParams.TYPE_APPLICATION_MEDIA*

Window type: window for showing media (such as video). These windows are 
displayed behind their attached window. 


*int_android.view.WindowManager.LayoutParams.TYPE_APPLICATION_MEDIA_OVERLAY*

Window type: window for showing overlays on top of media windows. These windows 
are displayed between TYPE_APPLICATION_MEDIA and the application window. They 
should be translucent to be useful. This is a big ugly hack so: 


*int_android.view.WindowManager.LayoutParams.TYPE_APPLICATION_PANEL*

Window type: a panel on top of an application window. These windows appear on 
top of their attached window. 


*int_android.view.WindowManager.LayoutParams.TYPE_APPLICATION_STARTING*

Window type: special application window that is displayed while the application 
is starting. Not for use by applications themselves; this is used by the system 
to display something until the application can show its own windows. In 
multiuser systems shows on all users' windows. 


*int_android.view.WindowManager.LayoutParams.TYPE_APPLICATION_SUB_PANEL*

Window type: a sub-panel on top of an application window. These windows are 
displayed on top their attached window and any 
(|android.view.WindowManager.LayoutParams|) panels. 


*int_android.view.WindowManager.LayoutParams.TYPE_BASE_APPLICATION*

Window type: an application window that serves as the "base" window of the 
overall application; all other application windows will appear on top of it. In 
multiuser systems shows only on the owning user's window. 


*int_android.view.WindowManager.LayoutParams.TYPE_BOOT_PROGRESS*

Window type: The boot progress dialog, goes on top of everything in the world. 
In multiuser systems shows on all users' windows. 


*int_android.view.WindowManager.LayoutParams.TYPE_CHANGED*




*int_android.view.WindowManager.LayoutParams.TYPE_DISPLAY_OVERLAY*

Window type: Display overlay window. Used to simulate secondary display 
devices. In multiuser systems shows on all users' windows. 


*int_android.view.WindowManager.LayoutParams.TYPE_DRAG*

Window type: the drag-and-drop pseudowindow. There is only one drag layer (at 
most), and it is placed on top of all other windows. In multiuser systems shows 
only on the owning user's window. 


*int_android.view.WindowManager.LayoutParams.TYPE_DREAM*

Window type: Dreams (screen saver) window, just above keyguard. In multiuser 
systems shows only on the owning user's window. 


*int_android.view.WindowManager.LayoutParams.TYPE_HIDDEN_NAV_CONSUMER*

Window type: Fake window to consume touch events when the navigation bar is 
hidden. In multiuser systems shows on all users' windows. 


*int_android.view.WindowManager.LayoutParams.TYPE_INPUT_METHOD*

Window type: internal input methods windows, which appear above the normal UI. 
Application windows may be resized or panned to keep the input focus visible 
while this window is displayed. In multiuser systems shows only on the owning 
user's window. 


*int_android.view.WindowManager.LayoutParams.TYPE_INPUT_METHOD_DIALOG*

Window type: internal input methods dialog windows, which appear above the 
current input method window. In multiuser systems shows only on the owning 
user's window. 


*int_android.view.WindowManager.LayoutParams.TYPE_KEYGUARD*

Window type: keyguard window. In multiuser systems shows on all users' windows. 


*int_android.view.WindowManager.LayoutParams.TYPE_KEYGUARD_DIALOG*

Window type: dialogs that the keyguard shows In multiuser systems shows on all 
users' windows. 


*int_android.view.WindowManager.LayoutParams.TYPE_KEYGUARD_SCRIM*

Window type: keyguard scrim window. Shows if keyguard needs to be restarted. In 
multiuser systems shows on all users' windows. 


*int_android.view.WindowManager.LayoutParams.TYPE_MAGNIFICATION_OVERLAY*

Window type: Magnification overlay window. Used to highlight the magnified 
portion of a display when accessibility magnification is enabled. In multiuser 
systems shows on all users' windows. 


*int_android.view.WindowManager.LayoutParams.TYPE_NAVIGATION_BAR*

Window type: Navigation bar (when distinct from status bar) In multiuser 
systems shows on all users' windows. 


*int_android.view.WindowManager.LayoutParams.TYPE_NAVIGATION_BAR_PANEL*

Window type: Navigation bar panel (when navigation bar is distinct from status 
bar) In multiuser systems shows on all users' windows. 


*int_android.view.WindowManager.LayoutParams.TYPE_PHONE*

Window type: phone. These are non-application windows providing user 
interaction with the phone (in particular incoming calls). These windows are 
normally placed above all applications, but behind the status bar. In multiuser 
systems shows on all users' windows. 


*int_android.view.WindowManager.LayoutParams.TYPE_POINTER*

Window type: (mouse) pointer In multiuser systems shows on all users' windows. 


*int_android.view.WindowManager.LayoutParams.TYPE_PRIORITY_PHONE*

Window type: priority phone UI, which needs to be displayed even if the 
keyguard is active. These windows must not take input focus, or they will 
interfere with the keyguard. In multiuser systems shows on all users' windows. 


*int_android.view.WindowManager.LayoutParams.TYPE_PRIVATE_PRESENTATION*

Window type: Window for Presentation on top of private virtual display. 


*int_android.view.WindowManager.LayoutParams.TYPE_RECENTS_OVERLAY*

Window type: Recents. Same layer as (|android.view.WindowManager.LayoutParams|) 
but only appears on one user's screen. In multiuser systems shows on all users' 
windows. 


*int_android.view.WindowManager.LayoutParams.TYPE_SEARCH_BAR*

Window type: the search bar. There can be only one search bar window; it is 
placed at the top of the screen. In multiuser systems shows on all users' 
windows. 


*int_android.view.WindowManager.LayoutParams.TYPE_SECURE_SYSTEM_OVERLAY*

Window type: secure system overlay windows, which need to be displayed on top 
of everything else. These windows must not take input focus, or they will 
interfere with the keyguard. 

This is exactly like (|android.view.WindowManager.LayoutParams|) except that 
only the system itself is allowed to create these overlays. Applications cannot 
obtain permission to create secure system overlays. 

In multiuser systems shows only on the owning user's window. 


*int_android.view.WindowManager.LayoutParams.TYPE_STATUS_BAR*

Window type: the status bar. There can be only one status bar window; it is 
placed at the top of the screen, and all other windows are shifted down so they 
are below it. In multiuser systems shows on all users' windows. 


*int_android.view.WindowManager.LayoutParams.TYPE_STATUS_BAR_PANEL*

Window type: panel that slides out from over the status bar In multiuser 
systems shows on all users' windows. 


*int_android.view.WindowManager.LayoutParams.TYPE_STATUS_BAR_SUB_PANEL*

Window type: panel that slides out from under the status bar In multiuser 
systems shows on all users' windows. 


*int_android.view.WindowManager.LayoutParams.TYPE_SYSTEM_ALERT*

Window type: system window, such as low power alert. These windows are always 
on top of application windows. In multiuser systems shows only on the owning 
user's window. 


*int_android.view.WindowManager.LayoutParams.TYPE_SYSTEM_DIALOG*

Window type: panel that slides out from the status bar In multiuser systems 
shows on all users' windows. 


*int_android.view.WindowManager.LayoutParams.TYPE_SYSTEM_ERROR*

Window type: internal system error windows, appear on top of everything they 
can. In multiuser systems shows only on the owning user's window. 


*int_android.view.WindowManager.LayoutParams.TYPE_SYSTEM_OVERLAY*

Window type: system overlay windows, which need to be displayed on top of 
everything else. These windows must not take input focus, or they will 
interfere with the keyguard. In multiuser systems shows only on the owning 
user's window. 


*int_android.view.WindowManager.LayoutParams.TYPE_TOAST*

Window type: transient notifications. In multiuser systems shows only on the 
owning user's window. 


*int_android.view.WindowManager.LayoutParams.TYPE_UNIVERSE_BACKGROUND*

Window type: Behind the universe of the real windows. In multiuser systems 
shows on all users' windows. 


*int_android.view.WindowManager.LayoutParams.TYPE_VOLUME_OVERLAY*

Window type: The volume level overlay/dialog shown when the user changes the 
system volume. In multiuser systems shows on all users' windows. 


*int_android.view.WindowManager.LayoutParams.TYPE_WALLPAPER*

Window type: wallpaper window, placed behind any window that wants to sit on 
top of the wallpaper. In multiuser systems shows only on the owning user's 
window. 


*int_android.view.WindowManager.LayoutParams.USER_ACTIVITY_TIMEOUT_CHANGED*




*long_android.view.WindowManager.LayoutParams.userActivityTimeout*

Sets the number of milliseconds before the user activity timeout occurs when 
this window has focus. A value of -1 uses the standard timeout. A value of 0 
uses the minimum support display timeout. 

This property can only be used to reduce the user specified display timeout; it 
can never make the timeout longer than it normally would be. 

Should only be used by the keyguard and phone app. 


*float_android.view.WindowManager.LayoutParams.verticalMargin*

The vertical margin, as a percentage of the container's height, between the 
container and the widget. See Gravity.apply(|android.view.Gravity|) for how 
this is used. This field is added with 
(|android.view.WindowManager.LayoutParams|) to supply the yAdj parameter. 


*float_android.view.WindowManager.LayoutParams.verticalWeight*

Indicates how much of the extra space will be allocated vertically to the view 
associated with these LayoutParams. Specify 0 if the view should not be 
stretched. Otherwise the extra pixels will be pro-rated among all views whose 
weight is greater than 0. 


*int_android.view.WindowManager.LayoutParams.windowAnimations*

A style resource defining the animations to use for this window. This must be a 
system resource; it can not be an application resource because the window 
manager does not have access to applications. 


*int_android.view.WindowManager.LayoutParams.x*

X position for this window. With the default gravity it is ignored. When using 
(|android.view.Gravity|) or (|android.view.Gravity|) or 
(|android.view.Gravity|) or (|android.view.Gravity|) it provides an offset from 
the given edge. 


*int_android.view.WindowManager.LayoutParams.y*

Y position for this window. With the default gravity it is ignored. When using 
(|android.view.Gravity|) or (|android.view.Gravity|) it provides an offset from 
the given edge. 



*android.view.WindowManager.LayoutParams()*

public WindowManager.LayoutParams()




*android.view.WindowManager.LayoutParams(int)*

public WindowManager.LayoutParams(int _type)




*android.view.WindowManager.LayoutParams(int,int)*

public WindowManager.LayoutParams(
  int _type,
  int _flags)




*android.view.WindowManager.LayoutParams(int,int,int)*

public WindowManager.LayoutParams(
  int _type,
  int _flags,
  int _format)




*android.view.WindowManager.LayoutParams(int,int,int,int,int)*

public WindowManager.LayoutParams(
  int w,
  int h,
  int _type,
  int _flags,
  int _format)




*android.view.WindowManager.LayoutParams(int,int,int,int,int,int,int)*

public WindowManager.LayoutParams(
  int w,
  int h,
  int xpos,
  int ypos,
  int _type,
  int _flags,
  int _format)




*android.view.WindowManager.LayoutParams(Parcel)*

public WindowManager.LayoutParams(android.os.Parcel in)




*android.view.WindowManager.LayoutParams.copyFrom(WindowManager.LayoutParams)*

public final int copyFrom(android.view.WindowManager.LayoutParams o)





*android.view.WindowManager.LayoutParams.debug(String)*

public |java.lang.String| debug(java.lang.String output)





*android.view.WindowManager.LayoutParams.describeContents()*

public int describeContents()





*android.view.WindowManager.LayoutParams.getTitle()*

public final |java.lang.CharSequence| getTitle()





*android.view.WindowManager.LayoutParams.mayUseInputMethod(int)*

public static boolean mayUseInputMethod(int flags)

Given a particular set of window manager flags, determine whether such a window 
may be a target for an input method when it has focus. In particular, this 
checks the (|android.view.WindowManager.LayoutParams|) and 
(|android.view.WindowManager.LayoutParams|) flags and returns true if the 
combination of the two corresponds to a window that needs to be behind the 
input method so that the user can type into it. 


    flags - The current window manager flags. 

    Returns: Returns true if such a window should be behind/interact with an input method, 
             false if not. 

*android.view.WindowManager.LayoutParams.scale(float)*

public void scale(float scale)

Scale the layout params' coordinates and size. 



*android.view.WindowManager.LayoutParams.setTitle(CharSequence)*

public final void setTitle(java.lang.CharSequence title)





*android.view.WindowManager.LayoutParams.toString()*

public |java.lang.String| toString()





*android.view.WindowManager.LayoutParams.writeToParcel(Parcel,int)*

public void writeToParcel(
  android.os.Parcel out,
  int parcelableFlags)






