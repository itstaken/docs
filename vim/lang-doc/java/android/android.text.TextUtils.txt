*android.text.TextUtils* *TextUtils* 

public class TextUtils
  extends    |java.lang.Object|

|android.text.TextUtils_Description|
|android.text.TextUtils_Fields|
|android.text.TextUtils_Constructors|
|android.text.TextUtils_Methods|

================================================================================

*android.text.TextUtils_Fields*
|int_android.text.TextUtils.ABSOLUTE_SIZE_SPAN|
|int_android.text.TextUtils.ALIGNMENT_SPAN|
|int_android.text.TextUtils.ANNOTATION|
|int_android.text.TextUtils.BACKGROUND_COLOR_SPAN|
|int_android.text.TextUtils.BULLET_SPAN|
|int_android.text.TextUtils.CAP_MODE_CHARACTERS|
|int_android.text.TextUtils.CAP_MODE_SENTENCES|
|int_android.text.TextUtils.CAP_MODE_WORDS|
|android.os.Parcelable.Creator<java.lang.CharSequence>_android.text.TextUtils.CHAR_SEQUENCE_CREATOR|
|int_android.text.TextUtils.EASY_EDIT_SPAN|
|int_android.text.TextUtils.FIRST_SPAN|
|int_android.text.TextUtils.FOREGROUND_COLOR_SPAN|
|int_android.text.TextUtils.LAST_SPAN|
|int_android.text.TextUtils.LEADING_MARGIN_SPAN|
|int_android.text.TextUtils.LOCALE_SPAN|
|int_android.text.TextUtils.QUOTE_SPAN|
|int_android.text.TextUtils.RELATIVE_SIZE_SPAN|
|int_android.text.TextUtils.SCALE_X_SPAN|
|int_android.text.TextUtils.SPELL_CHECK_SPAN|
|int_android.text.TextUtils.STRIKETHROUGH_SPAN|
|int_android.text.TextUtils.STYLE_SPAN|
|int_android.text.TextUtils.SUBSCRIPT_SPAN|
|int_android.text.TextUtils.SUGGESTION_RANGE_SPAN|
|int_android.text.TextUtils.SUGGESTION_SPAN|
|int_android.text.TextUtils.SUPERSCRIPT_SPAN|
|int_android.text.TextUtils.TEXT_APPEARANCE_SPAN|
|int_android.text.TextUtils.TYPEFACE_SPAN|
|int_android.text.TextUtils.UNDERLINE_SPAN|
|int_android.text.TextUtils.URL_SPAN|

*android.text.TextUtils_Methods*
|android.text.TextUtils.commaEllipsize(CharSequence,TextPaint,float,String,String)|
|android.text.TextUtils.commaEllipsize(CharSequence,TextPaint,float,String,String,TextDirectionHeuristic)|
|android.text.TextUtils.concat(CharSequence...)|Returns a CharSequence concaten
|android.text.TextUtils.copySpansFrom(Spanned,int,int,Class,Spannable,int)|Copi
|android.text.TextUtils.delimitedStringContains(String,char,String)|Does a comm
|android.text.TextUtils.dumpSpans(CharSequence,Printer,String)|Debugging tool t
|android.text.TextUtils.ellipsize(CharSequence,TextPaint,float,TextUtils.TruncateAt)|
|android.text.TextUtils.ellipsize(CharSequence,TextPaint,float,TextUtils.TruncateAt,boolean,TextUtils.EllipsizeCallback)|
|android.text.TextUtils.ellipsize(CharSequence,TextPaint,float,TextUtils.TruncateAt,boolean,TextUtils.EllipsizeCallback,TextDirectionHeuristic,String)|
|android.text.TextUtils.equals(CharSequence,CharSequence)|Returns true if a and
|android.text.TextUtils.expandTemplate(CharSequence,CharSequence...)|Replace in
|android.text.TextUtils.getCapsMode(CharSequence,int,int)|Determine what caps m
|android.text.TextUtils.getChars(CharSequence,int,int,char[],int)|
|android.text.TextUtils.getLayoutDirectionFromLocale(Locale)|Return the layout 
|android.text.TextUtils.getOffsetAfter(CharSequence,int)|
|android.text.TextUtils.getOffsetBefore(CharSequence,int)|
|android.text.TextUtils.getReverse(CharSequence,int,int)|
|android.text.TextUtils.getTrimmedLength(CharSequence)|Returns the length that 
|android.text.TextUtils.htmlEncode(String)|Html-encode the string.
|android.text.TextUtils.indexOf(CharSequence,char)|
|android.text.TextUtils.indexOf(CharSequence,char,int)|
|android.text.TextUtils.indexOf(CharSequence,char,int,int)|
|android.text.TextUtils.indexOf(CharSequence,CharSequence)|
|android.text.TextUtils.indexOf(CharSequence,CharSequence,int)|
|android.text.TextUtils.indexOf(CharSequence,CharSequence,int,int)|
|android.text.TextUtils.isDigitsOnly(CharSequence)|Returns whether the given Ch
|android.text.TextUtils.isEmpty(CharSequence)|Returns true if the string is nul
|android.text.TextUtils.isGraphic(char)|Returns whether this character is a pri
|android.text.TextUtils.isGraphic(CharSequence)|Returns whether the given CharS
|android.text.TextUtils.isPrintableAscii(char)|
|android.text.TextUtils.isPrintableAsciiOnly(CharSequence)|
|android.text.TextUtils.join(CharSequence,Iterable)|Returns a string containing
|android.text.TextUtils.join(CharSequence,Object[])|Returns a string containing
|android.text.TextUtils.join(Iterable<CharSequence>)|Returns list of multipleCh
|android.text.TextUtils.lastIndexOf(CharSequence,char)|
|android.text.TextUtils.lastIndexOf(CharSequence,char,int)|
|android.text.TextUtils.lastIndexOf(CharSequence,char,int,int)|
|android.text.TextUtils.packRangeInLong(int,int)|Pack 2 int values into a long,
|android.text.TextUtils.regionMatches(CharSequence,int,CharSequence,int,int)|
|android.text.TextUtils.removeEmptySpans(T[],Spanned,Class<T>)|Removes empty sp
|android.text.TextUtils.replace(CharSequence,String[],CharSequence[])|Return a 
|android.text.TextUtils.split(String,Pattern)|Splits a string on a pattern.
|android.text.TextUtils.split(String,String)|String.split() returns [''] when t
|android.text.TextUtils.stringOrSpannedString(CharSequence)|
|android.text.TextUtils.substring(CharSequence,int,int)|Create a new String obj
|android.text.TextUtils.unpackRangeEndFromLong(long)|Get the end value from a r
|android.text.TextUtils.unpackRangeStartFromLong(long)|Get the start value from
|android.text.TextUtils.writeToParcel(CharSequence,Parcel,int)|Flatten a CharSe

*android.text.TextUtils_Description*





*int_android.text.TextUtils.ABSOLUTE_SIZE_SPAN*




*int_android.text.TextUtils.ALIGNMENT_SPAN*




*int_android.text.TextUtils.ANNOTATION*




*int_android.text.TextUtils.BACKGROUND_COLOR_SPAN*




*int_android.text.TextUtils.BULLET_SPAN*




*int_android.text.TextUtils.CAP_MODE_CHARACTERS*

Capitalization mode for (|android.text.TextUtils|) : capitalize all characters. 
This value is explicitly defined to be the same as (|android.text.InputType|) . 


*int_android.text.TextUtils.CAP_MODE_SENTENCES*

Capitalization mode for (|android.text.TextUtils|) : capitalize the first 
character of each sentence. This value is explicitly defined to be the same as 
(|android.text.InputType|) . 


*int_android.text.TextUtils.CAP_MODE_WORDS*

Capitalization mode for (|android.text.TextUtils|) : capitalize the first 
character of all words. This value is explicitly defined to be the same as 
(|android.text.InputType|) . 


*android.os.Parcelable.Creator<java.lang.CharSequence>_android.text.TextUtils.CHAR_SEQUENCE_CREATOR*




*int_android.text.TextUtils.EASY_EDIT_SPAN*




*int_android.text.TextUtils.FIRST_SPAN*




*int_android.text.TextUtils.FOREGROUND_COLOR_SPAN*




*int_android.text.TextUtils.LAST_SPAN*




*int_android.text.TextUtils.LEADING_MARGIN_SPAN*




*int_android.text.TextUtils.LOCALE_SPAN*




*int_android.text.TextUtils.QUOTE_SPAN*




*int_android.text.TextUtils.RELATIVE_SIZE_SPAN*




*int_android.text.TextUtils.SCALE_X_SPAN*




*int_android.text.TextUtils.SPELL_CHECK_SPAN*




*int_android.text.TextUtils.STRIKETHROUGH_SPAN*




*int_android.text.TextUtils.STYLE_SPAN*




*int_android.text.TextUtils.SUBSCRIPT_SPAN*




*int_android.text.TextUtils.SUGGESTION_RANGE_SPAN*




*int_android.text.TextUtils.SUGGESTION_SPAN*




*int_android.text.TextUtils.SUPERSCRIPT_SPAN*




*int_android.text.TextUtils.TEXT_APPEARANCE_SPAN*




*int_android.text.TextUtils.TYPEFACE_SPAN*




*int_android.text.TextUtils.UNDERLINE_SPAN*




*int_android.text.TextUtils.URL_SPAN*





*android.text.TextUtils.commaEllipsize(CharSequence,TextPaint,float,String,String)*

public static |java.lang.CharSequence| commaEllipsize(
  java.lang.CharSequence text,
  android.text.TextPaint p,
  float avail,
  java.lang.String oneMore,
  java.lang.String more)

Converts a CharSequence of the comma-separated form "Andy, Bob, Charles, David" 
that is too wide to fit into the specified width into one like "Andy, Bob, 2 
more". 


    text - the text to truncate 
    p - the Paint with which to measure the text 
    avail - the horizontal width available for the text 
    oneMore - the string for "1 more" in the current locale 
    more - the string for "%d more" in the current locale 

*android.text.TextUtils.commaEllipsize(CharSequence,TextPaint,float,String,String,TextDirectionHeuristic)*

public static |java.lang.CharSequence| commaEllipsize(
  java.lang.CharSequence text,
  android.text.TextPaint p,
  float avail,
  java.lang.String oneMore,
  java.lang.String more,
  android.text.TextDirectionHeuristic textDir)





*android.text.TextUtils.concat(CharSequence...)*

public static |java.lang.CharSequence| concat(java.lang.CharSequence[] text)

Returns a CharSequence concatenating the specified CharSequences, retaining 
their spans if any. 



*android.text.TextUtils.copySpansFrom(Spanned,int,int,Class,Spannable,int)*

public static void copySpansFrom(
  android.text.Spanned source,
  int start,
  int end,
  java.lang.Class kind,
  android.text.Spannable dest,
  int destoff)

Copies the spans from the region start...end in source to the region 
destoff...destoff+end-start in dest. Spans in source that begin before start or 
end after end but overlap this range are trimmed as if they began at start or 
ended at end. 



*android.text.TextUtils.delimitedStringContains(String,char,String)*

public static boolean delimitedStringContains(
  java.lang.String delimitedString,
  char delimiter,
  java.lang.String item)

Does a comma-delimited list 'delimitedString' contain a certain item? (without 
allocating memory) 



*android.text.TextUtils.dumpSpans(CharSequence,Printer,String)*

public static void dumpSpans(
  java.lang.CharSequence cs,
  android.util.Printer printer,
  java.lang.String prefix)

Debugging tool to print the spans in a CharSequence. The output will be printed 
one span per line. If the CharSequence is not a Spanned, then the entire string 
will be printed on a single line. 



*android.text.TextUtils.ellipsize(CharSequence,TextPaint,float,TextUtils.TruncateAt)*

public static |java.lang.CharSequence| ellipsize(
  java.lang.CharSequence text,
  android.text.TextPaint p,
  float avail,
  android.text.TextUtils.TruncateAt where)

Returns the original text if it fits in the specified width given the 
properties of the specified Paint, or, if it does not fit, a truncated copy 
with ellipsis character added at the specified edge or center. 



*android.text.TextUtils.ellipsize(CharSequence,TextPaint,float,TextUtils.TruncateAt,boolean,TextUtils.EllipsizeCallback)*

public static |java.lang.CharSequence| ellipsize(
  java.lang.CharSequence text,
  android.text.TextPaint paint,
  float avail,
  android.text.TextUtils.TruncateAt where,
  boolean preserveLength,
  android.text.TextUtils.EllipsizeCallback callback)

Returns the original text if it fits in the specified width given the 
properties of the specified Paint, or, if it does not fit, a copy with ellipsis 
character added at the specified edge or center. If preserveLength is 
specified, the returned copy will be padded with zero-width spaces to preserve 
the original length and offsets instead of truncating. If callback is non-null, 
it will be called to report the start and end of the ellipsized range. 
TextDirection is determined by the first strong directional character. 



*android.text.TextUtils.ellipsize(CharSequence,TextPaint,float,TextUtils.TruncateAt,boolean,TextUtils.EllipsizeCallback,TextDirectionHeuristic,String)*

public static |java.lang.CharSequence| ellipsize(
  java.lang.CharSequence text,
  android.text.TextPaint paint,
  float avail,
  android.text.TextUtils.TruncateAt where,
  boolean preserveLength,
  android.text.TextUtils.EllipsizeCallback callback,
  android.text.TextDirectionHeuristic textDir,
  java.lang.String ellipsis)

Returns the original text if it fits in the specified width given the 
properties of the specified Paint, or, if it does not fit, a copy with ellipsis 
character added at the specified edge or center. If preserveLength is 
specified, the returned copy will be padded with zero-width spaces to preserve 
the original length and offsets instead of truncating. If callback is non-null, 
it will be called to report the start and end of the ellipsized range. 



*android.text.TextUtils.equals(CharSequence,CharSequence)*

public static boolean equals(
  java.lang.CharSequence a,
  java.lang.CharSequence b)

Returns true if a and b are equal, including if they are both null. Note: In 
platform versions 1.1 and earlier, this method only worked well if both the 
arguments were instances of String. 


    a - first CharSequence to check 
    b - second CharSequence to check 

    Returns: true if a and b are equal 

*android.text.TextUtils.expandTemplate(CharSequence,CharSequence...)*

public static |java.lang.CharSequence| expandTemplate(
  java.lang.CharSequence template,
  java.lang.CharSequence[] values)

Replace instances of "^1", "^2", etc. in the template CharSequence with the 
corresponding values. "^^" is used to produce a single caret in the output. 
Only up to 9 replacement values are supported, "^10" will be produce the first 
replacement value followed by a '0'. 


    template - the input text containing "^1"-style placeholder values. This object is not 
       modified; a copy is returned. 
    values - CharSequences substituted into the template. The first is substituted for "^1", 
       the second for "^2", and so on. 

    Returns: the new CharSequence produced by doing the replacement 

*android.text.TextUtils.getCapsMode(CharSequence,int,int)*

public static int getCapsMode(
  java.lang.CharSequence cs,
  int off,
  int reqModes)

Determine what caps mode should be in effect at the current offset in the text. 
Only the mode bits set in reqModes will be checked. Note that the caps mode 
flags here are explicitly defined to match those in (|android.text.InputType|) 
. 


    cs - The text that should be checked for caps modes. 
    off - Location in the text at which to check. 
    reqModes - The modes to be checked: may be any combination of {@link 
       #CAP_MODE_CHARACTERS}, {@link #CAP_MODE_WORDS}, and {@link 
       #CAP_MODE_SENTENCES}. 

    Returns: Returns the actual capitalization modes that can be in effect at the current 
             position, which is any combination of {@link 
             #CAP_MODE_CHARACTERS}, {@link #CAP_MODE_WORDS}, and {@link 
             #CAP_MODE_SENTENCES}. 

*android.text.TextUtils.getChars(CharSequence,int,int,char[],int)*

public static void getChars(
  java.lang.CharSequence s,
  int start,
  int end,
  char[] dest,
  int destoff)





*android.text.TextUtils.getLayoutDirectionFromLocale(Locale)*

public static int getLayoutDirectionFromLocale(java.util.Locale locale)

Return the layout direction for a given Locale 


    locale - the Locale for which we want the layout direction. Can be null. 

    Returns: the layout direction. This may be one of: {@link 
             android.view.View#LAYOUT_DIRECTION_LTR} or {@link 
             android.view.View#LAYOUT_DIRECTION_RTL}. 

Be careful: this code will need to be updated when vertical scripts will be 
             supported 

*android.text.TextUtils.getOffsetAfter(CharSequence,int)*

public static int getOffsetAfter(
  java.lang.CharSequence text,
  int offset)





*android.text.TextUtils.getOffsetBefore(CharSequence,int)*

public static int getOffsetBefore(
  java.lang.CharSequence text,
  int offset)





*android.text.TextUtils.getReverse(CharSequence,int,int)*

public static |java.lang.CharSequence| getReverse(
  java.lang.CharSequence source,
  int start,
  int end)





*android.text.TextUtils.getTrimmedLength(CharSequence)*

public static int getTrimmedLength(java.lang.CharSequence s)

Returns the length that the specified CharSequence would have if spaces and 
control characters were trimmed from the start and end, as by 
(|java.lang.String|) . 



*android.text.TextUtils.htmlEncode(String)*

public static |java.lang.String| htmlEncode(java.lang.String s)

Html-encode the string. 


    s - the string to be encoded 

    Returns: the encoded string 

*android.text.TextUtils.indexOf(CharSequence,char)*

public static int indexOf(
  java.lang.CharSequence s,
  char ch)





*android.text.TextUtils.indexOf(CharSequence,char,int)*

public static int indexOf(
  java.lang.CharSequence s,
  char ch,
  int start)





*android.text.TextUtils.indexOf(CharSequence,char,int,int)*

public static int indexOf(
  java.lang.CharSequence s,
  char ch,
  int start,
  int end)





*android.text.TextUtils.indexOf(CharSequence,CharSequence)*

public static int indexOf(
  java.lang.CharSequence s,
  java.lang.CharSequence needle)





*android.text.TextUtils.indexOf(CharSequence,CharSequence,int)*

public static int indexOf(
  java.lang.CharSequence s,
  java.lang.CharSequence needle,
  int start)





*android.text.TextUtils.indexOf(CharSequence,CharSequence,int,int)*

public static int indexOf(
  java.lang.CharSequence s,
  java.lang.CharSequence needle,
  int start,
  int end)





*android.text.TextUtils.isDigitsOnly(CharSequence)*

public static boolean isDigitsOnly(java.lang.CharSequence str)

Returns whether the given CharSequence contains only digits. 



*android.text.TextUtils.isEmpty(CharSequence)*

public static boolean isEmpty(java.lang.CharSequence str)

Returns true if the string is null or 0-length. 


    str - the string to be examined 

    Returns: true if str is null or zero length 

*android.text.TextUtils.isGraphic(char)*

public static boolean isGraphic(char c)

Returns whether this character is a printable character. 



*android.text.TextUtils.isGraphic(CharSequence)*

public static boolean isGraphic(java.lang.CharSequence str)

Returns whether the given CharSequence contains any printable characters. 



*android.text.TextUtils.isPrintableAscii(char)*

public static boolean isPrintableAscii(char c)





*android.text.TextUtils.isPrintableAsciiOnly(CharSequence)*

public static boolean isPrintableAsciiOnly(java.lang.CharSequence str)





*android.text.TextUtils.join(CharSequence,Iterable)*

public static |java.lang.String| join(
  java.lang.CharSequence delimiter,
  java.lang.Iterable tokens)

Returns a string containing the tokens joined by delimiters. 


    tokens - an array objects to be joined. Strings will be formed from the objects by 
       calling object.toString(). 

*android.text.TextUtils.join(CharSequence,Object[])*

public static |java.lang.String| join(
  java.lang.CharSequence delimiter,
  java.lang.Object[] tokens)

Returns a string containing the tokens joined by delimiters. 


    tokens - an array objects to be joined. Strings will be formed from the objects by 
       calling object.toString(). 

*android.text.TextUtils.join(Iterable<CharSequence>)*

public static |java.lang.CharSequence| join(java.lang.Iterable<java.lang.CharSequence> list)

Returns list of multiple (|java.lang.CharSequence|) joined into a single 
(|java.lang.CharSequence|) separated by localized delimiter such as ", ". 



*android.text.TextUtils.lastIndexOf(CharSequence,char)*

public static int lastIndexOf(
  java.lang.CharSequence s,
  char ch)





*android.text.TextUtils.lastIndexOf(CharSequence,char,int)*

public static int lastIndexOf(
  java.lang.CharSequence s,
  char ch,
  int last)





*android.text.TextUtils.lastIndexOf(CharSequence,char,int,int)*

public static int lastIndexOf(
  java.lang.CharSequence s,
  char ch,
  int start,
  int last)





*android.text.TextUtils.packRangeInLong(int,int)*

public static long packRangeInLong(
  int start,
  int end)

Pack 2 int values into a long, useful as a return value for a range 



*android.text.TextUtils.regionMatches(CharSequence,int,CharSequence,int,int)*

public static boolean regionMatches(
  java.lang.CharSequence one,
  int toffset,
  java.lang.CharSequence two,
  int ooffset,
  int len)





*android.text.TextUtils.removeEmptySpans(T[],Spanned,Class<T>)*

public static |T|[] removeEmptySpans(
  T[] spans,
  android.text.Spanned spanned,
  java.lang.Class<T> klass)

Removes empty spans from the spans array. 

When parsing a Spanned using (|android.text.Spanned|) , empty spans will 
(correctly) create span transitions, and calling getSpans on a slice of text 
bounded by one of these transitions will (correctly) include the empty 
overlapping span. 

However, these empty spans should not be taken into account when layouting or 
rendering the string and this method provides a way to filter getSpans' results 
accordingly. 


    spans - A list of spans retrieved using {@link Spanned#getSpans(int, int, Class)} from 
       the spanned 
    spanned - The Spanned from which spans were extracted 

    Returns: A subset of spans where empty spans ({@link Spanned#getSpanStart(Object)} == 
             {@link Spanned#getSpanEnd(Object)} have been removed. The initial 
             order is preserved 

*android.text.TextUtils.replace(CharSequence,String[],CharSequence[])*

public static |java.lang.CharSequence| replace(
  java.lang.CharSequence template,
  java.lang.String[] sources,
  java.lang.CharSequence[] destinations)

Return a new CharSequence in which each of the source strings is replaced by 
the corresponding element of the destinations. 



*android.text.TextUtils.split(String,Pattern)*

public static |java.lang.String|[] split(
  java.lang.String text,
  java.util.regex.Pattern pattern)

Splits a string on a pattern. String.split() returns [''] when the string to be 
split is empty. This returns []. This does not remove any empty strings from 
the result. 


    text - the string to split 
    pattern - the regular expression to match 

    Returns: an array of strings. The array will be empty if text is empty 

*android.text.TextUtils.split(String,String)*

public static |java.lang.String|[] split(
  java.lang.String text,
  java.lang.String expression)

String.split() returns [''] when the string to be split is empty. This returns 
[]. This does not remove any empty strings from the result. For example 
split("a,", "," ) returns {"a", ""}. 


    text - the string to split 
    expression - the regular expression to match 

    Returns: an array of strings. The array will be empty if text is empty 

*android.text.TextUtils.stringOrSpannedString(CharSequence)*

public static |java.lang.CharSequence| stringOrSpannedString(java.lang.CharSequence source)





*android.text.TextUtils.substring(CharSequence,int,int)*

public static |java.lang.String| substring(
  java.lang.CharSequence source,
  int start,
  int end)

Create a new String object containing the given range of characters from the 
source string. This is different than simply calling 
CharSequence.subSequence(|java.lang.CharSequence|) in that it does not preserve 
any style runs in the source sequence, allowing a more efficient 
implementation. 



*android.text.TextUtils.unpackRangeEndFromLong(long)*

public static int unpackRangeEndFromLong(long range)

Get the end value from a range packed in a long by (|android.text.TextUtils|) 



*android.text.TextUtils.unpackRangeStartFromLong(long)*

public static int unpackRangeStartFromLong(long range)

Get the start value from a range packed in a long by (|android.text.TextUtils|) 



*android.text.TextUtils.writeToParcel(CharSequence,Parcel,int)*

public static void writeToParcel(
  java.lang.CharSequence cs,
  android.os.Parcel p,
  int parcelableFlags)

Flatten a CharSequence and whatever styles can be copied across processes into 
the parcel. 




