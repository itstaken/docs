*android.text.TextDirectionHeuristics* *TextDirectionHeuristics* Some objects th

public class TextDirectionHeuristics
  extends    |java.lang.Object|

|android.text.TextDirectionHeuristics_Description|
|android.text.TextDirectionHeuristics_Fields|
|android.text.TextDirectionHeuristics_Constructors|
|android.text.TextDirectionHeuristics_Methods|

================================================================================

*android.text.TextDirectionHeuristics_Fields*
|android.text.TextDirectionHeuristic_android.text.TextDirectionHeuristics.ANYRTL_LTR|
|android.text.TextDirectionHeuristic_android.text.TextDirectionHeuristics.FIRSTSTRONG_LTR|
|android.text.TextDirectionHeuristic_android.text.TextDirectionHeuristics.FIRSTSTRONG_RTL|
|android.text.TextDirectionHeuristic_android.text.TextDirectionHeuristics.LOCALE|
|android.text.TextDirectionHeuristic_android.text.TextDirectionHeuristics.LTR|
|android.text.TextDirectionHeuristic_android.text.TextDirectionHeuristics.RTL|

*android.text.TextDirectionHeuristics_Constructors*
|android.text.TextDirectionHeuristics()|

*android.text.TextDirectionHeuristics_Description*

Some objects that implement (|android.text.TextDirectionHeuristic|) . Use these 
with the unicodeWrap()(|android.text.BidiFormatter|) methods in 
(|android.text.BidiFormatter|) . Also notice that these direction heuristics 
correspond to the same types of constants provided in the (|android.view.View|) 
class for setTextDirection()(|android.view.View|) , such as 
(|android.view.View|) . To support versions lower than 
(|android.os.Build.VERSION_CODES|) , you can use the support library's 
(|android.support.v4.text.TextDirectionHeuristicsCompat|) class. 



*android.text.TextDirectionHeuristic_android.text.TextDirectionHeuristics.ANYRTL_LTR*

If the text contains any strong right to left non-format character, determines 
that the direction is right to left, falling back to left to right if it finds 
none. 


*android.text.TextDirectionHeuristic_android.text.TextDirectionHeuristics.FIRSTSTRONG_LTR*

Determines the direction based on the first strong directional character, 
including bidi format chars, falling back to left to right if it finds none. 
This is the default behavior of the Unicode Bidirectional Algorithm. 


*android.text.TextDirectionHeuristic_android.text.TextDirectionHeuristics.FIRSTSTRONG_RTL*

Determines the direction based on the first strong directional character, 
including bidi format chars, falling back to right to left if it finds none. 
This is similar to the default behavior of the Unicode Bidirectional Algorithm, 
just with different fallback behavior. 


*android.text.TextDirectionHeuristic_android.text.TextDirectionHeuristics.LOCALE*

Force the paragraph direction to the Locale direction. Falls back to left to 
right. 


*android.text.TextDirectionHeuristic_android.text.TextDirectionHeuristics.LTR*

Always decides that the direction is left to right. 


*android.text.TextDirectionHeuristic_android.text.TextDirectionHeuristics.RTL*

Always decides that the direction is right to left. 



*android.text.TextDirectionHeuristics()*

public TextDirectionHeuristics()




