*android.view.DisplayInfo* *DisplayInfo* Describes the characteristics of a part

public final class DisplayInfo
  extends    |java.lang.Object|
  implements |android.os.Parcelable|

|android.view.DisplayInfo_Description|
|android.view.DisplayInfo_Fields|
|android.view.DisplayInfo_Constructors|
|android.view.DisplayInfo_Methods|

================================================================================

*android.view.DisplayInfo_Fields*
|java.lang.String_android.view.DisplayInfo.address|
|int_android.view.DisplayInfo.appHeight|
|int_android.view.DisplayInfo.appWidth|
|android.os.Parcelable.Creator<android.view.DisplayInfo>_android.view.DisplayInfo.CREATOR|
|int_android.view.DisplayInfo.flags|
|int_android.view.DisplayInfo.largestNominalAppHeight|
|int_android.view.DisplayInfo.largestNominalAppWidth|
|int_android.view.DisplayInfo.layerStack|
|int_android.view.DisplayInfo.logicalDensityDpi|
|int_android.view.DisplayInfo.logicalHeight|
|int_android.view.DisplayInfo.logicalWidth|
|java.lang.String_android.view.DisplayInfo.name|
|int_android.view.DisplayInfo.overscanBottom|
|int_android.view.DisplayInfo.overscanLeft|
|int_android.view.DisplayInfo.overscanRight|
|int_android.view.DisplayInfo.overscanTop|
|java.lang.String_android.view.DisplayInfo.ownerPackageName|
|int_android.view.DisplayInfo.ownerUid|
|float_android.view.DisplayInfo.physicalXDpi|
|float_android.view.DisplayInfo.physicalYDpi|
|float_android.view.DisplayInfo.refreshRate|
|int_android.view.DisplayInfo.rotation|
|int_android.view.DisplayInfo.smallestNominalAppHeight|
|int_android.view.DisplayInfo.smallestNominalAppWidth|
|int_android.view.DisplayInfo.type|

*android.view.DisplayInfo_Constructors*
|android.view.DisplayInfo()|
|android.view.DisplayInfo(DisplayInfo)|

*android.view.DisplayInfo_Methods*
|android.view.DisplayInfo.copyFrom(DisplayInfo)|
|android.view.DisplayInfo.describeContents()|
|android.view.DisplayInfo.equals(DisplayInfo)|
|android.view.DisplayInfo.equals(Object)|
|android.view.DisplayInfo.getAppMetrics(DisplayMetrics)|
|android.view.DisplayInfo.getAppMetrics(DisplayMetrics,CompatibilityInfo,IBinder)|
|android.view.DisplayInfo.getAppMetrics(DisplayMetrics,DisplayAdjustments)|
|android.view.DisplayInfo.getLogicalMetrics(DisplayMetrics,CompatibilityInfo,IBinder)|
|android.view.DisplayInfo.getNaturalHeight()|
|android.view.DisplayInfo.getNaturalWidth()|
|android.view.DisplayInfo.hasAccess(int)|Returns true if the specified UID has 
|android.view.DisplayInfo.hashCode()|
|android.view.DisplayInfo.readFromParcel(Parcel)|
|android.view.DisplayInfo.toString()|
|android.view.DisplayInfo.writeToParcel(Parcel,int)|

*android.view.DisplayInfo_Description*

Describes the characteristics of a particular logical display. 



*java.lang.String_android.view.DisplayInfo.address*

Display address, or null if none. Interpretation varies by display type. 


*int_android.view.DisplayInfo.appHeight*

The height of the portion of the display that is available to applications, in 
pixels. Represents the size of the display minus any system decorations. 


*int_android.view.DisplayInfo.appWidth*

The width of the portion of the display that is available to applications, in 
pixels. Represents the size of the display minus any system decorations. 


*android.os.Parcelable.Creator<android.view.DisplayInfo>_android.view.DisplayInfo.CREATOR*




*int_android.view.DisplayInfo.flags*

Display flags. 


*int_android.view.DisplayInfo.largestNominalAppHeight*

The largest value of (|android.view.DisplayInfo|) that an application is likely 
to encounter, in pixels, excepting cases where the height may be even larger 
due to system decorations such as the status bar being hidden, for example. 


*int_android.view.DisplayInfo.largestNominalAppWidth*

The largest value of (|android.view.DisplayInfo|) that an application is likely 
to encounter, in pixels, excepting cases where the width may be even larger due 
to system decorations such as the status bar being hidden, for example. 


*int_android.view.DisplayInfo.layerStack*

The surface flinger layer stack associated with this logical display. 


*int_android.view.DisplayInfo.logicalDensityDpi*

The logical display density which is the basis for density-independent pixels. 


*int_android.view.DisplayInfo.logicalHeight*

The logical height of the display, in pixels. Represents the usable size of the 
display which may be smaller than the physical size when the system is 
emulating a smaller display. 


*int_android.view.DisplayInfo.logicalWidth*

The logical width of the display, in pixels. Represents the usable size of the 
display which may be smaller than the physical size when the system is 
emulating a smaller display. 


*java.lang.String_android.view.DisplayInfo.name*

The human-readable name of the display. 


*int_android.view.DisplayInfo.overscanBottom*




*int_android.view.DisplayInfo.overscanLeft*




*int_android.view.DisplayInfo.overscanRight*




*int_android.view.DisplayInfo.overscanTop*




*java.lang.String_android.view.DisplayInfo.ownerPackageName*

The package name of the application that owns this display, or null if it is 
owned by the system. 

If the display is private, then only the owner can use it. 


*int_android.view.DisplayInfo.ownerUid*

The UID of the application that owns this display, or zero if it is owned by 
the system. 

If the display is private, then only the owner can use it. 


*float_android.view.DisplayInfo.physicalXDpi*

The exact physical pixels per inch of the screen in the X dimension. 

The value of this field is indeterminate if the logical display is presented on 
more than one physical display. 


*float_android.view.DisplayInfo.physicalYDpi*

The exact physical pixels per inch of the screen in the Y dimension. 

The value of this field is indeterminate if the logical display is presented on 
more than one physical display. 


*float_android.view.DisplayInfo.refreshRate*

The refresh rate of this display in frames per second. 

The value of this field is indeterminate if the logical display is presented on 
more than one physical display. 


*int_android.view.DisplayInfo.rotation*

The rotation of the display relative to its natural orientation. May be one of 
(|android.view.Surface|) , (|android.view.Surface|) , (|android.view.Surface|) 
, (|android.view.Surface|) . 

The value of this field is indeterminate if the logical display is presented on 
more than one physical display. 


*int_android.view.DisplayInfo.smallestNominalAppHeight*

The smallest value of (|android.view.DisplayInfo|) that an application is 
likely to encounter, in pixels, excepting cases where the height may be even 
smaller due to the presence of a soft keyboard, for example. 


*int_android.view.DisplayInfo.smallestNominalAppWidth*

The smallest value of (|android.view.DisplayInfo|) that an application is 
likely to encounter, in pixels, excepting cases where the width may be even 
smaller due to the presence of a soft keyboard, for example. 


*int_android.view.DisplayInfo.type*

Display type. 



*android.view.DisplayInfo()*

public DisplayInfo()




*android.view.DisplayInfo(DisplayInfo)*

public DisplayInfo(android.view.DisplayInfo other)




*android.view.DisplayInfo.copyFrom(DisplayInfo)*

public void copyFrom(android.view.DisplayInfo other)





*android.view.DisplayInfo.describeContents()*

public int describeContents()





*android.view.DisplayInfo.equals(DisplayInfo)*

public boolean equals(android.view.DisplayInfo other)





*android.view.DisplayInfo.equals(Object)*

public boolean equals(java.lang.Object o)





*android.view.DisplayInfo.getAppMetrics(DisplayMetrics)*

public void getAppMetrics(android.util.DisplayMetrics outMetrics)





*android.view.DisplayInfo.getAppMetrics(DisplayMetrics,CompatibilityInfo,IBinder)*

public void getAppMetrics(
  android.util.DisplayMetrics outMetrics,
  android.content.res.CompatibilityInfo ci,
  android.os.IBinder token)





*android.view.DisplayInfo.getAppMetrics(DisplayMetrics,DisplayAdjustments)*

public void getAppMetrics(
  android.util.DisplayMetrics outMetrics,
  android.view.DisplayAdjustments displayAdjustments)





*android.view.DisplayInfo.getLogicalMetrics(DisplayMetrics,CompatibilityInfo,IBinder)*

public void getLogicalMetrics(
  android.util.DisplayMetrics outMetrics,
  android.content.res.CompatibilityInfo compatInfo,
  android.os.IBinder token)





*android.view.DisplayInfo.getNaturalHeight()*

public int getNaturalHeight()





*android.view.DisplayInfo.getNaturalWidth()*

public int getNaturalWidth()





*android.view.DisplayInfo.hasAccess(int)*

public boolean hasAccess(int uid)

Returns true if the specified UID has access to this display. 



*android.view.DisplayInfo.hashCode()*

public int hashCode()





*android.view.DisplayInfo.readFromParcel(Parcel)*

public void readFromParcel(android.os.Parcel source)





*android.view.DisplayInfo.toString()*

public |java.lang.String| toString()





*android.view.DisplayInfo.writeToParcel(Parcel,int)*

public void writeToParcel(
  android.os.Parcel dest,
  int flags)






