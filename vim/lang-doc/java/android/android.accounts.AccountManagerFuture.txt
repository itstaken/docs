*android.accounts.AccountManagerFuture* *AccountManagerFuture* A AccountManagerF

public interface interface AccountManagerFuture<V>


|android.accounts.AccountManagerFuture_Description|
|android.accounts.AccountManagerFuture_Fields|
|android.accounts.AccountManagerFuture_Constructors|
|android.accounts.AccountManagerFuture_Methods|

================================================================================

*android.accounts.AccountManagerFuture_Methods*
|android.accounts.AccountManagerFuture.cancel(boolean)|Attempts to cancel execu
|android.accounts.AccountManagerFuture.getResult()|Accessor for the future resu
|android.accounts.AccountManagerFuture.getResult(long,TimeUnit)|Accessor for th
|android.accounts.AccountManagerFuture.isCancelled()|Returns true if this task 
|android.accounts.AccountManagerFuture.isDone()|Returns true if this task compl

*android.accounts.AccountManagerFuture_Description*

A AccountManagerFuture represents the result of an asynchronous 
(|android.accounts.AccountManager|) call. Methods are provided to check if the 
computation is complete, to wait for its completion, and to retrieve the result 
of the computation. The result can only be retrieved using method get when the 
computation has completed, blocking if necessary until it is ready. 
Cancellation is performed by the cancel method. Additional methods are provided 
to determine if the task completed normally or was cancelled. Once a 
computation has completed, the computation cannot be cancelled. If you would 
like to use a Future for the sake of cancellability but not provide a usable 
result, you can declare types of the form Future<?> and return null as a result 
of the underlying task. 



*android.accounts.AccountManagerFuture.cancel(boolean)*

public boolean cancel(boolean mayInterruptIfRunning)

Attempts to cancel execution of this task. This attempt will fail if the task 
has already completed, has already been cancelled, or could not be cancelled 
for some other reason. If successful, and this task has not started when cancel 
is called, this task should never run. If the task has already started, then 
the mayInterruptIfRunning parameter determines whether the thread executing 
this task should be interrupted in an attempt to stop the task. 

After this method returns, subsequent calls to 
(|android.accounts.AccountManagerFuture|) will always return true. Subsequent 
calls to (|android.accounts.AccountManagerFuture|) will always return true if 
this method returned true. 


    mayInterruptIfRunning - true if the thread executing this task should be interrupted; otherwise, 
       in-progress tasks are allowed to complete 

    Returns: false if the task could not be cancelled, typically because it has already 
             completed normally; true otherwise 

*android.accounts.AccountManagerFuture.getResult()*

public |V| getResult()
  throws |android.accounts.AuthenticatorException|
         |java.io.IOException|
         |android.accounts.OperationCanceledException|
         
Accessor for the future result the (|android.accounts.AccountManagerFuture|) 
represents. This call will block until the result is available. In order to 
check if the result is available without blocking, one may call 
(|android.accounts.AccountManagerFuture|) and 
(|android.accounts.AccountManagerFuture|) . If the request that generated this 
result fails or is canceled then an exception will be thrown rather than the 
call returning normally. 



    Returns: the actual result 

*android.accounts.AccountManagerFuture.getResult(long,TimeUnit)*

public |V| getResult(
  long timeout,
  java.util.concurrent.TimeUnit unit)
  throws |android.accounts.AuthenticatorException|
         |java.io.IOException|
         |android.accounts.OperationCanceledException|
         
Accessor for the future result the (|android.accounts.AccountManagerFuture|) 
represents. This call will block until the result is available. In order to 
check if the result is available without blocking, one may call 
(|android.accounts.AccountManagerFuture|) and 
(|android.accounts.AccountManagerFuture|) . If the request that generated this 
result fails or is canceled then an exception will be thrown rather than the 
call returning normally. If a timeout is specified then the request will 
automatically be canceled if it does not complete in that amount of time. 


    timeout - the maximum time to wait 
    unit - the time unit of the timeout argument. This must not be null. 

    Returns: the actual result 

*android.accounts.AccountManagerFuture.isCancelled()*

public boolean isCancelled()

Returns true if this task was cancelled before it completed normally. 



    Returns: true if this task was cancelled before it completed 

*android.accounts.AccountManagerFuture.isDone()*

public boolean isDone()

Returns true if this task completed. 

Completion may be due to normal termination, an exception, or cancellation -- 
in all of these cases, this method will return true. 



    Returns: true if this task completed 


