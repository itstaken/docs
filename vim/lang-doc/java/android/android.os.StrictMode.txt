*android.os.StrictMode* *StrictMode* StrictMode is a developer tool which detect

public final class StrictMode
  extends    |java.lang.Object|

|android.os.StrictMode_Description|
|android.os.StrictMode_Fields|
|android.os.StrictMode_Constructors|
|android.os.StrictMode_Methods|

================================================================================

*android.os.StrictMode_Fields*
|int_android.os.StrictMode.DETECT_CUSTOM|
|int_android.os.StrictMode.DETECT_DISK_READ|
|int_android.os.StrictMode.DETECT_DISK_WRITE|
|int_android.os.StrictMode.DETECT_NETWORK|
|int_android.os.StrictMode.DETECT_VM_ACTIVITY_LEAKS|
|int_android.os.StrictMode.DETECT_VM_CLOSABLE_LEAKS|
|int_android.os.StrictMode.DETECT_VM_CURSOR_LEAKS|
|int_android.os.StrictMode.DETECT_VM_REGISTRATION_LEAKS|
|java.lang.String_android.os.StrictMode.DISABLE_PROPERTY|
|int_android.os.StrictMode.PENALTY_DEATH|
|int_android.os.StrictMode.PENALTY_DEATH_ON_NETWORK|
|int_android.os.StrictMode.PENALTY_DIALOG|
|int_android.os.StrictMode.PENALTY_DROPBOX|
|int_android.os.StrictMode.PENALTY_FLASH|
|int_android.os.StrictMode.PENALTY_GATHER|
|int_android.os.StrictMode.PENALTY_LOG|
|java.lang.String_android.os.StrictMode.VISUAL_PROPERTY|

*android.os.StrictMode_Methods*
|android.os.StrictMode.allowThreadDiskReads()|A convenience wrapper that takes 
|android.os.StrictMode.allowThreadDiskWrites()|A convenience wrapper that takes
|android.os.StrictMode.conditionallyCheckInstanceCounts()|
|android.os.StrictMode.conditionallyEnableDebugLogging()|Enable DropBox logging
|android.os.StrictMode.decrementExpectedActivityCount(Class)|
|android.os.StrictMode.enableDeathOnNetwork()|Used by the framework to make net
|android.os.StrictMode.enableDefaults()|Enable the recommended StrictMode defau
|android.os.StrictMode.enterCriticalSpan(String)|Enter a named critical span (e
|android.os.StrictMode.getThreadPolicy()|Returns the current thread's policy.
|android.os.StrictMode.getThreadPolicyMask()|Returns the bitmask of the current
|android.os.StrictMode.getVmPolicy()|Gets the current VM policy.
|android.os.StrictMode.incrementExpectedActivityCount(Class)|
|android.os.StrictMode.noteDiskRead()|
|android.os.StrictMode.noteDiskWrite()|
|android.os.StrictMode.noteSlowCall(String)|For code to note that it's slow.
|android.os.StrictMode.onFileUriExposed(String)|
|android.os.StrictMode.onIntentReceiverLeaked(Throwable)|
|android.os.StrictMode.onServiceConnectionLeaked(Throwable)|
|android.os.StrictMode.onSqliteObjectLeaked(String,Throwable)|
|android.os.StrictMode.onVmPolicyViolation(String,Throwable)|
|android.os.StrictMode.onWebViewMethodCalledOnWrongThread(Throwable)|
|android.os.StrictMode.setThreadPolicy(StrictMode.ThreadPolicy)|Sets the policy
|android.os.StrictMode.setVmPolicy(StrictMode.VmPolicy)|Sets the policy for wha
|android.os.StrictMode.trackActivity(Object)|Returns an object that is used to 
|android.os.StrictMode.vmClosableObjectLeaksEnabled()|
|android.os.StrictMode.vmFileUriExposureEnabled()|
|android.os.StrictMode.vmRegistrationLeaksEnabled()|
|android.os.StrictMode.vmSqliteObjectLeaksEnabled()|

*android.os.StrictMode_Description*

StrictMode is a developer tool which detects things you might be doing by 
accident and brings them to your attention so you can fix them. 

StrictMode is most commonly used to catch accidental disk or network access on 
the application's main thread, where UI operations are received and animations 
take place. Keeping disk and network operations off the main thread makes for 
much smoother, more responsive applications. By keeping your application's main 
thread responsive, you also prevent <a 
href="guide/practices/design/responsiveness.html">ANR dialogs from being shown 
to users. 

Note that even though an Android device's disk is often on flash memory, many 
devices run a filesystem on top of that memory with very limited concurrency. 
It's often the case that almost all disk accesses are fast, but may in 
individual cases be dramatically slower when certain I/O is happening in the 
background from other processes. If possible, it's best to assume that such 
things are not fast. 

Example code to enable from early in your (|android.app.Application|) , 
(|android.app.Activity|) , or other application component's 
(|android.app.Application|) method: 



public void onCreate() { if (DEVELOPER_MODE) { StrictMode.setThreadPolicy(new 
StrictMode.ThreadPolicy.Builder(|android.os.StrictMode.ThreadPolicy.Builder|) 
() .detectDiskReads() .detectDiskWrites() .detectNetwork() // or .detectAll() 
for all detectable problems .penaltyLog() .build()); StrictMode.setVmPolicy(new 
StrictMode.VmPolicy.Builder(|android.os.StrictMode.VmPolicy.Builder|) () 
.detectLeakedSqlLiteObjects() .detectLeakedClosableObjects() .penaltyLog() 
.penaltyDeath() .build()); } super.onCreate(); } 

You can decide what should happen when a violation is detected. For example, 
using (|android.os.StrictMode.ThreadPolicy.Builder|) you can watch the output 
of adb logcat while you use your application to see the violations as they 
happen. 

If you find violations that you feel are problematic, there are a variety of 
tools to help solve them: threads, (|android.os.Handler|) , 
(|android.os.AsyncTask|) , (|android.app.IntentService|) , etc. But don't feel 
compelled to fix everything that StrictMode finds. In particular, many cases of 
disk access are often necessary during the normal activity lifecycle. Use 
StrictMode to find things you did by accident. Network requests on the UI 
thread are almost always a problem, though. 

StrictMode is not a security mechanism and is not guaranteed to find all disk 
or network accesses. While it does propagate its state across process 
boundaries when doing (|android.os.Binder|) calls, it's still ultimately a best 
effort mechanism. Notably, disk or network access from JNI calls won't 
necessarily trigger it. Future versions of Android may catch more (or fewer) 
operations, so you should never leave StrictMode enabled in applications 
distributed on Google Play. 



*int_android.os.StrictMode.DETECT_CUSTOM*

For StrictMode.noteSlowCall() 


*int_android.os.StrictMode.DETECT_DISK_READ*




*int_android.os.StrictMode.DETECT_DISK_WRITE*




*int_android.os.StrictMode.DETECT_NETWORK*




*int_android.os.StrictMode.DETECT_VM_ACTIVITY_LEAKS*

Note, a "VM_" bit, not thread. 


*int_android.os.StrictMode.DETECT_VM_CLOSABLE_LEAKS*

Note, a "VM_" bit, not thread. 


*int_android.os.StrictMode.DETECT_VM_CURSOR_LEAKS*

Note, a "VM_" bit, not thread. 


*int_android.os.StrictMode.DETECT_VM_REGISTRATION_LEAKS*




*java.lang.String_android.os.StrictMode.DISABLE_PROPERTY*

Boolean system property to disable strict mode checks outright. Set this to 
'true' to force disable; 'false' has no effect on other enable/disable policy. 


*int_android.os.StrictMode.PENALTY_DEATH*

Death on any detected violation. 


*int_android.os.StrictMode.PENALTY_DEATH_ON_NETWORK*

Death just for detected network usage. 


*int_android.os.StrictMode.PENALTY_DIALOG*




*int_android.os.StrictMode.PENALTY_DROPBOX*




*int_android.os.StrictMode.PENALTY_FLASH*

Flash the screen during violations. 


*int_android.os.StrictMode.PENALTY_GATHER*

Non-public penalty mode which overrides all the other penalty bits and signals 
that we're in a Binder call and we should ignore the other penalty bits and 
instead serialize back all our offending stack traces to the caller to 
ultimately handle in the originating process. 

This must be kept in sync with the constant in libs/binder/Parcel.cpp 


*int_android.os.StrictMode.PENALTY_LOG*




*java.lang.String_android.os.StrictMode.VISUAL_PROPERTY*

The boolean system property to control screen flashes on violations. 



*android.os.StrictMode.allowThreadDiskReads()*

public static |android.os.StrictMode.ThreadPolicy| allowThreadDiskReads()

A convenience wrapper that takes the current 
(|android.os.StrictMode.ThreadPolicy|) from (|android.os.StrictMode|) , 
modifies it to permit disk reads, and sets the new policy with 
(|android.os.StrictMode|) , returning the old policy so you can restore it at 
the end of a block. 



    Returns: the old policy, to be passed to setThreadPolicy to restore the policy. 

*android.os.StrictMode.allowThreadDiskWrites()*

public static |android.os.StrictMode.ThreadPolicy| allowThreadDiskWrites()

A convenience wrapper that takes the current 
(|android.os.StrictMode.ThreadPolicy|) from (|android.os.StrictMode|) , 
modifies it to permit both disk reads and writes, and sets the new policy with 
(|android.os.StrictMode|) , returning the old policy so you can restore it at 
the end of a block. 



    Returns: the old policy, to be passed to {@link #setThreadPolicy} to restore the policy 
             at the end of a block 

*android.os.StrictMode.conditionallyCheckInstanceCounts()*

public static void conditionallyCheckInstanceCounts()





*android.os.StrictMode.conditionallyEnableDebugLogging()*

public static boolean conditionallyEnableDebugLogging()

Enable DropBox logging for debug phone builds. 



*android.os.StrictMode.decrementExpectedActivityCount(Class)*

public static void decrementExpectedActivityCount(java.lang.Class klass)





*android.os.StrictMode.enableDeathOnNetwork()*

public static void enableDeathOnNetwork()

Used by the framework to make network usage on the main thread a fatal error. 



*android.os.StrictMode.enableDefaults()*

public static void enableDefaults()

Enable the recommended StrictMode defaults, with violations just being logged. 

This catches disk and network access on the main thread, as well as leaked 
SQLite cursors and unclosed resources. This is simply a wrapper around 
(|android.os.StrictMode|) and (|android.os.StrictMode|) . 



*android.os.StrictMode.enterCriticalSpan(String)*

public static |android.os.StrictMode.Span| enterCriticalSpan(java.lang.String name)

Enter a named critical span (e.g. an animation) 

The name is an arbitary label (or tag) that will be applied to any strictmode 
violation that happens while this span is active. You must call finish() on the 
span when done. 

This will never return null, but on devices without debugging enabled, this may 
return a dummy object on which the finish() method is a no-op. 

TODO: add CloseGuard to this, verifying callers call finish. 



*android.os.StrictMode.getThreadPolicy()*

public static |android.os.StrictMode.ThreadPolicy| getThreadPolicy()

Returns the current thread's policy. 



*android.os.StrictMode.getThreadPolicyMask()*

public static int getThreadPolicyMask()

Returns the bitmask of the current thread's policy. 



    Returns: the bitmask of all the DETECT_* and PENALTY_* bits currently enabled 

*android.os.StrictMode.getVmPolicy()*

public static |android.os.StrictMode.VmPolicy| getVmPolicy()

Gets the current VM policy. 



*android.os.StrictMode.incrementExpectedActivityCount(Class)*

public static void incrementExpectedActivityCount(java.lang.Class klass)





*android.os.StrictMode.noteDiskRead()*

public static void noteDiskRead()





*android.os.StrictMode.noteDiskWrite()*

public static void noteDiskWrite()





*android.os.StrictMode.noteSlowCall(String)*

public static void noteSlowCall(java.lang.String name)

For code to note that it's slow. This is a no-op unless the current thread's 
(|android.os.StrictMode.ThreadPolicy|) has 
(|android.os.StrictMode.ThreadPolicy.Builder|) enabled. 


    name - a short string for the exception stack trace that's built if when this fires. 

*android.os.StrictMode.onFileUriExposed(String)*

public static void onFileUriExposed(java.lang.String location)





*android.os.StrictMode.onIntentReceiverLeaked(Throwable)*

public static void onIntentReceiverLeaked(java.lang.Throwable originStack)





*android.os.StrictMode.onServiceConnectionLeaked(Throwable)*

public static void onServiceConnectionLeaked(java.lang.Throwable originStack)





*android.os.StrictMode.onSqliteObjectLeaked(String,Throwable)*

public static void onSqliteObjectLeaked(
  java.lang.String message,
  java.lang.Throwable originStack)





*android.os.StrictMode.onVmPolicyViolation(String,Throwable)*

public static void onVmPolicyViolation(
  java.lang.String message,
  java.lang.Throwable originStack)





*android.os.StrictMode.onWebViewMethodCalledOnWrongThread(Throwable)*

public static void onWebViewMethodCalledOnWrongThread(java.lang.Throwable originStack)





*android.os.StrictMode.setThreadPolicy(StrictMode.ThreadPolicy)*

public static void setThreadPolicy(android.os.StrictMode.ThreadPolicy policy)

Sets the policy for what actions on the current thread should be detected, as 
well as the penalty if such actions occur. 

Internally this sets a thread-local variable which is propagated across 
cross-process IPC calls, meaning you can catch violations when a system service 
or another process accesses the disk or network on your behalf. 


    policy - the policy to put into place 

*android.os.StrictMode.setVmPolicy(StrictMode.VmPolicy)*

public static void setVmPolicy(android.os.StrictMode.VmPolicy policy)

Sets the policy for what actions in the VM process (on any thread) should be 
detected, as well as the penalty if such actions occur. 


    policy - the policy to put into place 

*android.os.StrictMode.trackActivity(Object)*

public static |java.lang.Object| trackActivity(java.lang.Object instance)

Returns an object that is used to track instances of activites. The activity 
should store a reference to the tracker object in one of its fields. 



*android.os.StrictMode.vmClosableObjectLeaksEnabled()*

public static boolean vmClosableObjectLeaksEnabled()





*android.os.StrictMode.vmFileUriExposureEnabled()*

public static boolean vmFileUriExposureEnabled()





*android.os.StrictMode.vmRegistrationLeaksEnabled()*

public static boolean vmRegistrationLeaksEnabled()





*android.os.StrictMode.vmSqliteObjectLeaksEnabled()*

public static boolean vmSqliteObjectLeaksEnabled()






