*android.widget.ShareActionProvider* *ShareActionProvider* This is a provider fo

public class ShareActionProvider
  extends    |android.view.ActionProvider|

|android.widget.ShareActionProvider_Description|
|android.widget.ShareActionProvider_Fields|
|android.widget.ShareActionProvider_Constructors|
|android.widget.ShareActionProvider_Methods|

================================================================================

*android.widget.ShareActionProvider_Fields*
|java.lang.String_android.widget.ShareActionProvider.DEFAULT_SHARE_HISTORY_FILE_NAME|

*android.widget.ShareActionProvider_Constructors*
|android.widget.ShareActionProvider(Context)|Creates a new instance.

*android.widget.ShareActionProvider_Methods*
|android.widget.ShareActionProvider.hasSubMenu()|
|android.widget.ShareActionProvider.onCreateActionView()|
|android.widget.ShareActionProvider.onPrepareSubMenu(SubMenu)|
|android.widget.ShareActionProvider.setOnShareTargetSelectedListener(ShareActionProvider.OnShareTargetSelectedListener)|
|android.widget.ShareActionProvider.setShareHistoryFileName(String)|Sets the fi
|android.widget.ShareActionProvider.setShareIntent(Intent)|Sets an intent with 

*android.widget.ShareActionProvider_Description*

This is a provider for a share action. It is responsible for creating views 
that enable data sharing and also to show a sub menu with sharing activities if 
the hosting item is placed on the overflow menu. 

Here is how to use the action provider with custom backing file in a 
(|android.view.MenuItem|) : 



// In Activity#onCreateOptionsMenu public boolean onCreateOptionsMenu(Menu 
menu) { // Get the menu item. MenuItem menuItem = 
menu.findItem(R.id.my_menu_item); // Get the provider and hold onto it to 
set/change the share intent. mShareActionProvider = (ShareActionProvider) 
menuItem.getActionProvider(); // Set history different from the default before 
getting the action // view since a call to 
MenuItem.getActionView()(|android.view.MenuItem|) calls // 
(|android.view.ActionProvider|) which uses the backing file name. Omit this // 
line if using the default share history file is desired. 
mShareActionProvider.setShareHistoryFileName("custom_share_history.xml"); . . . 
} 

// Somewhere in the application. public void doShare(Intent shareIntent) { // 
When you want to share set the share intent. 
mShareActionProvider.setShareIntent(shareIntent); } 

Note: While the sample snippet demonstrates how to use this provider in the 
context of a menu item, the use of the provider is not limited to menu items. 



*java.lang.String_android.widget.ShareActionProvider.DEFAULT_SHARE_HISTORY_FILE_NAME*

The default name for storing share history. 



*android.widget.ShareActionProvider(Context)*

public ShareActionProvider(android.content.Context context)

Creates a new instance. 

    context - Context for accessing resources. 

*android.widget.ShareActionProvider.hasSubMenu()*

public boolean hasSubMenu()





*android.widget.ShareActionProvider.onCreateActionView()*

public |android.view.View| onCreateActionView()





*android.widget.ShareActionProvider.onPrepareSubMenu(SubMenu)*

public void onPrepareSubMenu(android.view.SubMenu subMenu)





*android.widget.ShareActionProvider.setOnShareTargetSelectedListener(ShareActionProvider.OnShareTargetSelectedListener)*

public void setOnShareTargetSelectedListener(android.widget.ShareActionProvider.OnShareTargetSelectedListener listener)

Sets a listener to be notified when a share target has been selected. The 
listener can optionally decide to handle the selection and not rely on the 
default behavior which is to launch the activity. 

Note: If you choose the backing share history file you will still be notified 
in this callback. 


    listener - The listener. 

*android.widget.ShareActionProvider.setShareHistoryFileName(String)*

public void setShareHistoryFileName(java.lang.String shareHistoryFile)

Sets the file name of a file for persisting the share history which history 
will be used for ordering share targets. This file will be used for all view 
created by (|android.widget.ShareActionProvider|) . Defaults to 
(|android.widget.ShareActionProvider|) . Set to null if share history should 
not be persisted between sessions. 

Note: The history file name can be set any time, however only the action views 
created by (|android.widget.ShareActionProvider|) after setting the file name 
will be backed by the provided file. Therefore, if you want to use different 
history files for sharing specific types of content, every time you change the 
history file (|android.widget.ShareActionProvider|) you must call 
(|android.app.Activity|) to recreate the action view. You should not call 
(|android.app.Activity|) from (|android.app.Activity|) . 



private void doShare(Intent intent) { if (IMAGE.equals(intent.getMimeType())) { 
mShareActionProvider.setHistoryFileName(SHARE_IMAGE_HISTORY_FILE_NAME); } else 
if (TEXT.equals(intent.getMimeType())) { 
mShareActionProvider.setHistoryFileName(SHARE_TEXT_HISTORY_FILE_NAME); } 
mShareActionProvider.setIntent(intent); invalidateOptionsMenu(); } 


    shareHistoryFile - The share history file name. 

*android.widget.ShareActionProvider.setShareIntent(Intent)*

public void setShareIntent(android.content.Intent shareIntent)

Sets an intent with information about the share action. Here is a sample for 
constructing a share intent: 

Intent shareIntent = new Intent(Intent.ACTION_SEND); 
shareIntent.setType("image/*"); Uri uri = Uri.fromFile(new File(getFilesDir(), 
"foo.jpg")); shareIntent.putExtra(Intent.EXTRA_STREAM, uri.toString()); 


    shareIntent - The share intent. 


