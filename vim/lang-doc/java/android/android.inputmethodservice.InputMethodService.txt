*android.inputmethodservice.InputMethodService* *InputMethodService* InputMethod

public class InputMethodService
  extends    |android.inputmethodservice.AbstractInputMethodService|

|android.inputmethodservice.InputMethodService_Description|
|android.inputmethodservice.InputMethodService_Fields|
|android.inputmethodservice.InputMethodService_Constructors|
|android.inputmethodservice.InputMethodService_Methods|

================================================================================

*android.inputmethodservice.InputMethodService_Fields*
|int_android.inputmethodservice.InputMethodService.BACK_DISPOSITION_DEFAULT|
|int_android.inputmethodservice.InputMethodService.BACK_DISPOSITION_WILL_DISMISS|
|int_android.inputmethodservice.InputMethodService.BACK_DISPOSITION_WILL_NOT_DISMISS|
|int_android.inputmethodservice.InputMethodService.IME_ACTIVE|
|int_android.inputmethodservice.InputMethodService.IME_VISIBLE|

*android.inputmethodservice.InputMethodService_Constructors*
|android.inputmethodservice.InputMethodService()|

*android.inputmethodservice.InputMethodService_Methods*
|android.inputmethodservice.InputMethodService.dump(FileDescriptor,PrintWriter,String[])|
|android.inputmethodservice.InputMethodService.enableHardwareAcceleration()|You
|android.inputmethodservice.InputMethodService.getBackDisposition()|
|android.inputmethodservice.InputMethodService.getCandidatesHiddenVisibility()|
|android.inputmethodservice.InputMethodService.getCurrentInputBinding()|Return 
|android.inputmethodservice.InputMethodService.getCurrentInputConnection()|Retr
|android.inputmethodservice.InputMethodService.getCurrentInputEditorInfo()|
|android.inputmethodservice.InputMethodService.getCurrentInputStarted()|
|android.inputmethodservice.InputMethodService.getLayoutInflater()|
|android.inputmethodservice.InputMethodService.getMaxWidth()|Return the maximum
|android.inputmethodservice.InputMethodService.getTextForImeAction(int)|Return 
|android.inputmethodservice.InputMethodService.getWindow()|
|android.inputmethodservice.InputMethodService.hideStatusIcon()|
|android.inputmethodservice.InputMethodService.hideWindow()|
|android.inputmethodservice.InputMethodService.isExtractViewShown()|Return whet
|android.inputmethodservice.InputMethodService.isFullscreenMode()|Return whethe
|android.inputmethodservice.InputMethodService.isInputViewShown()|Return whethe
|android.inputmethodservice.InputMethodService.isShowInputRequested()|Returns t
|android.inputmethodservice.InputMethodService.onAppPrivateCommand(String,Bundle)|
|android.inputmethodservice.InputMethodService.onBindInput()|Called when a new 
|android.inputmethodservice.InputMethodService.onComputeInsets(InputMethodService.Insets)|
|android.inputmethodservice.InputMethodService.onConfigurationChanged(Configuration)|
|android.inputmethodservice.InputMethodService.onConfigureWindow(Window,boolean,boolean)|
|android.inputmethodservice.InputMethodService.onCreate()|
|android.inputmethodservice.InputMethodService.onCreateCandidatesView()|Create 
|android.inputmethodservice.InputMethodService.onCreateExtractTextView()|Called
|android.inputmethodservice.InputMethodService.onCreateInputMethodInterface()|I
|android.inputmethodservice.InputMethodService.onCreateInputMethodSessionInterface()|
|android.inputmethodservice.InputMethodService.onCreateInputView()|Create and r
|android.inputmethodservice.InputMethodService.onCurrentInputMethodSubtypeChanged(InputMethodSubtype)|
|android.inputmethodservice.InputMethodService.onDestroy()|
|android.inputmethodservice.InputMethodService.onDisplayCompletions(CompletionInfo[])|
|android.inputmethodservice.InputMethodService.onEvaluateFullscreenMode()|Overr
|android.inputmethodservice.InputMethodService.onEvaluateInputViewShown()|Overr
|android.inputmethodservice.InputMethodService.onExtractedCursorMovement(int,int)|
|android.inputmethodservice.InputMethodService.onExtractedDeleteText(int,int)|
|android.inputmethodservice.InputMethodService.onExtractedReplaceText(int,int,CharSequence)|
|android.inputmethodservice.InputMethodService.onExtractedSelectionChanged(int,int)|
|android.inputmethodservice.InputMethodService.onExtractedSetSpan(Object,int,int,int)|
|android.inputmethodservice.InputMethodService.onExtractedTextClicked()|This is
|android.inputmethodservice.InputMethodService.onExtractingInputChanged(EditorInfo)|
|android.inputmethodservice.InputMethodService.onExtractTextContextMenuItem(int)|
|android.inputmethodservice.InputMethodService.onFinishCandidatesView(boolean)|
|android.inputmethodservice.InputMethodService.onFinishInput()|Called to inform
|android.inputmethodservice.InputMethodService.onFinishInputView(boolean)|Calle
|android.inputmethodservice.InputMethodService.onGenericMotionEvent(MotionEvent)|
|android.inputmethodservice.InputMethodService.onInitializeInterface()|This is 
|android.inputmethodservice.InputMethodService.onKeyDown(int,KeyEvent)|Override
|android.inputmethodservice.InputMethodService.onKeyLongPress(int,KeyEvent)|Def
|android.inputmethodservice.InputMethodService.onKeyMultiple(int,int,KeyEvent)|
|android.inputmethodservice.InputMethodService.onKeyUp(int,KeyEvent)|Override t
|android.inputmethodservice.InputMethodService.onShowInputRequested(int,boolean)|
|android.inputmethodservice.InputMethodService.onStartCandidatesView(EditorInfo,boolean)|
|android.inputmethodservice.InputMethodService.onStartInput(EditorInfo,boolean)|
|android.inputmethodservice.InputMethodService.onStartInputView(EditorInfo,boolean)|
|android.inputmethodservice.InputMethodService.onTrackballEvent(MotionEvent)|Ov
|android.inputmethodservice.InputMethodService.onUnbindInput()|Called when the 
|android.inputmethodservice.InputMethodService.onUpdateCursor(Rect)|Called when
|android.inputmethodservice.InputMethodService.onUpdateExtractedText(int,ExtractedText)|
|android.inputmethodservice.InputMethodService.onUpdateExtractingViews(EditorInfo)|
|android.inputmethodservice.InputMethodService.onUpdateExtractingVisibility(EditorInfo)|
|android.inputmethodservice.InputMethodService.onUpdateSelection(int,int,int,int,int,int)|
|android.inputmethodservice.InputMethodService.onViewClicked(boolean)|Called wh
|android.inputmethodservice.InputMethodService.onWindowHidden()|Called when the
|android.inputmethodservice.InputMethodService.onWindowShown()|Called when the 
|android.inputmethodservice.InputMethodService.requestHideSelf(int)|Close this 
|android.inputmethodservice.InputMethodService.sendDefaultEditorAction(boolean)|
|android.inputmethodservice.InputMethodService.sendDownUpKeyEvents(int)|Send th
|android.inputmethodservice.InputMethodService.sendKeyChar(char)|Send the given
|android.inputmethodservice.InputMethodService.setBackDisposition(int)|
|android.inputmethodservice.InputMethodService.setCandidatesView(View)|Replaces
|android.inputmethodservice.InputMethodService.setCandidatesViewShown(boolean)|
|android.inputmethodservice.InputMethodService.setExtractView(View)|
|android.inputmethodservice.InputMethodService.setExtractViewShown(boolean)|Con
|android.inputmethodservice.InputMethodService.setInputView(View)|Replaces the 
|android.inputmethodservice.InputMethodService.setTheme(int)|You can call this 
|android.inputmethodservice.InputMethodService.showStatusIcon(int)|
|android.inputmethodservice.InputMethodService.showWindow(boolean)|
|android.inputmethodservice.InputMethodService.switchInputMethod(String)|Force 
|android.inputmethodservice.InputMethodService.updateFullscreenMode()|Re-evalua
|android.inputmethodservice.InputMethodService.updateInputViewShown()|Re-evalua

*android.inputmethodservice.InputMethodService_Description*

InputMethodService provides a standard implementation of an InputMethod, which 
final implementations can derive from and customize. See the base class 
(|android.inputmethodservice.AbstractInputMethodService|) and the 
(|android.view.inputmethod.InputMethod|) interface for more information on the 
basics of writing input methods. 

In addition to the normal Service lifecycle methods, this class introduces some 
new specific callbacks that most subclasses will want to make use of: 

(|android.inputmethodservice.InputMethodService|) for user-interface 
initialization, in particular to deal with configuration changes while the 
service is running. (|android.inputmethodservice.InputMethodService|) to find 
out about switching to a new client. 
(|android.inputmethodservice.InputMethodService|) to deal with an input session 
starting with the client. (|android.inputmethodservice.InputMethodService|) , 
(|android.inputmethodservice.InputMethodService|) , and 
(|android.inputmethodservice.InputMethodService|) for non-demand generation of 
the UI. (|android.inputmethodservice.InputMethodService|) to deal with input 
starting within the input area of the IME. 

An input method has significant discretion in how it goes about its work: the 
(|android.inputmethodservice.InputMethodService|) provides a basic framework 
for standard UI elements (input view, candidates view, and running in 
fullscreen mode), but it is up to a particular implementor to decide how to use 
them. For example, one input method could implement an input area with a 
keyboard, another could allow the user to draw text, while a third could have 
no input area (and thus not be visible to the user) but instead listen to audio 
and perform text to speech conversion. 

In the implementation provided here, all of these elements are placed together 
in a single window managed by the InputMethodService. It will execute callbacks 
as it needs information about them, and provides APIs for programmatic control 
over them. They layout of these elements is explicitly defined: 

The soft input view, if available, is placed at the bottom of the screen. The 
candidates view, if currently shown, is placed above the soft input view. If 
not running fullscreen, the application is moved or resized to be above these 
views; if running fullscreen, the window will completely cover the application 
and its top part will contain the extract text of what is currently being 
edited by the application. 



Soft Input View 

Central to most input methods is the soft input view. This is where most user 
interaction occurs: pressing on soft keys, drawing characters, or however else 
your input method wants to generate text. Most implementations will simply have 
their own view doing all of this work, and return a new instance of it when 
(|android.inputmethodservice.InputMethodService|) is called. At that point, as 
long as the input view is visible, you will see user interaction in that view 
and can call back on the InputMethodService to interact with the application as 
appropriate. 

There are some situations where you want to decide whether or not your soft 
input view should be shown to the user. This is done by implementing the 
(|android.inputmethodservice.InputMethodService|) to return true or false based 
on whether it should be shown in the current environment. If any of your state 
has changed that may impact this, call 
(|android.inputmethodservice.InputMethodService|) to have it re-evaluated. The 
default implementation always shows the input view unless there is a hard 
keyboard available, which is the appropriate behavior for most input methods. 



Candidates View 

Often while the user is generating raw text, an input method wants to provide 
them with a list of possible interpretations of that text that can be selected 
for use. This is accomplished with the candidates view, and like the soft input 
view you implement (|android.inputmethodservice.InputMethodService|) to 
instantiate your own view implementing your candidates UI. 

Management of the candidates view is a little different than the input view, 
because the candidates view tends to be more transient, being shown only when 
there are possible candidates for the current text being entered by the user. 
To control whether the candidates view is shown, you use 
(|android.inputmethodservice.InputMethodService|) . Note that because the 
candidate view tends to be shown and hidden a lot, it does not impact the 
application UI in the same way as the soft input view: it will never cause 
application windows to resize, only cause them to be panned if needed for the 
user to see the current focus. 



Fullscreen Mode 

Sometimes your input method UI is too large to integrate with the application 
UI, so you just want to take over the screen. This is accomplished by switching 
to full-screen mode, causing the input method window to fill the entire screen 
and add its own "extracted text" editor showing the user the text that is being 
typed. Unlike the other UI elements, there is a standard implementation for the 
extract editor that you should not need to change. The editor is placed at the 
top of the IME, above the input and candidates views. 

Similar to the input view, you control whether the IME is running in fullscreen 
mode by implementing (|android.inputmethodservice.InputMethodService|) to 
return true or false based on whether it should be fullscreen in the current 
environment. If any of your state has changed that may impact this, call 
(|android.inputmethodservice.InputMethodService|) to have it re-evaluated. The 
default implementation selects fullscreen mode when the screen is in a 
landscape orientation, which is appropriate behavior for most input methods 
that have a significant input area. 

When in fullscreen mode, you have some special requirements because the user 
can not see the application UI. In particular, you should implement 
(|android.inputmethodservice.InputMethodService|) to show completions generated 
by your application, typically in your candidates view like you would normally 
show candidates. 



Generating Text 

The key part of an IME is of course generating text for the application. This 
is done through calls to the (|android.view.inputmethod.InputConnection|) 
interface to the application, which can be retrieved from 
(|android.inputmethodservice.InputMethodService|) . This interface allows you 
to generate raw key events or, if the target supports it, directly edit in 
strings of candidates and committed text. 

Information about what the target is expected and supports can be found through 
the (|android.view.inputmethod.EditorInfo|) class, which is retrieved with 
(|android.inputmethodservice.InputMethodService|) method. The most important 
part of this is EditorInfo.inputType(|android.view.inputmethod.EditorInfo|) ; 
in particular, if this is 
EditorInfo.TYPE_NULL(|android.view.inputmethod.EditorInfo|) , then the target 
does not support complex edits and you need to only deliver raw key events to 
it. An input method will also want to look at other values here, to for example 
detect password mode, auto complete text views, phone number entry, etc. 

When the user switches between input targets, you will receive calls to 
(|android.inputmethodservice.InputMethodService|) and 
(|android.inputmethodservice.InputMethodService|) . You can use these to reset 
and initialize your input state for the current target. For example, you will 
often want to clear any input state, and update a soft keyboard to be 
appropriate for the new inputType. 



*int_android.inputmethodservice.InputMethodService.BACK_DISPOSITION_DEFAULT*

The back button will close the input window. 


*int_android.inputmethodservice.InputMethodService.BACK_DISPOSITION_WILL_DISMISS*

This input method will consume the back key. 


*int_android.inputmethodservice.InputMethodService.BACK_DISPOSITION_WILL_NOT_DISMISS*

This input method will not consume the back key. 


*int_android.inputmethodservice.InputMethodService.IME_ACTIVE*




*int_android.inputmethodservice.InputMethodService.IME_VISIBLE*





*android.inputmethodservice.InputMethodService()*

public InputMethodService()




*android.inputmethodservice.InputMethodService.dump(FileDescriptor,PrintWriter,String[])*

protected void dump(
  java.io.FileDescriptor fd,
  java.io.PrintWriter fout,
  java.lang.String[] args)

Performs a dump of the InputMethodService's internal state. Override to add 
your own information to the dump. 



*android.inputmethodservice.InputMethodService.enableHardwareAcceleration()*

public boolean enableHardwareAcceleration()

You can call this to try to enable hardware accelerated drawing for your IME. 
This must be set before (|android.inputmethodservice.InputMethodService|) , so 
you will typically call it in your constructor. It is not always possible to 
use hardware acclerated drawing in an IME (for example on low-end devices that 
do not have the resources to support this), so the call returns true if it 
succeeds otherwise false if you will need to draw in software. You must be able 
to handle either case. 



*android.inputmethodservice.InputMethodService.getBackDisposition()*

public int getBackDisposition()





*android.inputmethodservice.InputMethodService.getCandidatesHiddenVisibility()*

public int getCandidatesHiddenVisibility()

Returns the visibility mode (either View.INVISIBLE(|android.view.View|) or 
View.GONE(|android.view.View|) ) of the candidates view when it is not shown. 
The default implementation returns GONE when 
(|android.inputmethodservice.InputMethodService|) returns true, otherwise 
VISIBLE. Be careful if you change this to return GONE in other situations -- if 
showing or hiding the candidates view causes your window to resize, this can 
cause temporary drawing artifacts as the resize takes place. 



*android.inputmethodservice.InputMethodService.getCurrentInputBinding()*

public |android.view.inputmethod.InputBinding| getCurrentInputBinding()

Return the currently active InputBinding for the input method, or null if there 
is none. 



*android.inputmethodservice.InputMethodService.getCurrentInputConnection()*

public |android.view.inputmethod.InputConnection| getCurrentInputConnection()

Retrieve the currently active InputConnection that is bound to the input 
method, or null if there is none. 



*android.inputmethodservice.InputMethodService.getCurrentInputEditorInfo()*

public |android.view.inputmethod.EditorInfo| getCurrentInputEditorInfo()





*android.inputmethodservice.InputMethodService.getCurrentInputStarted()*

public boolean getCurrentInputStarted()





*android.inputmethodservice.InputMethodService.getLayoutInflater()*

public |android.view.LayoutInflater| getLayoutInflater()





*android.inputmethodservice.InputMethodService.getMaxWidth()*

public int getMaxWidth()

Return the maximum width, in pixels, available the input method. Input methods 
are positioned at the bottom of the screen and, unless running in fullscreen, 
will generally want to be as short as possible so should compute their height 
based on their contents. However, they can stretch as much as needed 
horizontally. The function returns to you the maximum amount of space available 
horizontally, which you can use if needed for UI placement. 

In many cases this is not needed, you can just rely on the normal view layout 
mechanisms to position your views within the full horizontal space given to the 
input method. 

Note that this value can change dynamically, in particular when the screen 
orientation changes. 



*android.inputmethodservice.InputMethodService.getTextForImeAction(int)*

public |java.lang.CharSequence| getTextForImeAction(int imeOptions)

Return text that can be used as a button label for the given 
EditorInfo.imeOptions(|android.view.inputmethod.EditorInfo|) . Returns null if 
there is no action requested. Note that there is no guarantee that the returned 
text will be relatively short, so you probably do not want to use it as text on 
a soft keyboard key label. 


    imeOptions - The value from @link EditorInfo#imeOptions EditorInfo.imeOptions}. 

    Returns: Returns a label to use, or null if there is no action. 

*android.inputmethodservice.InputMethodService.getWindow()*

public |android.app.Dialog| getWindow()





*android.inputmethodservice.InputMethodService.hideStatusIcon()*

public void hideStatusIcon()





*android.inputmethodservice.InputMethodService.hideWindow()*

public void hideWindow()





*android.inputmethodservice.InputMethodService.isExtractViewShown()*

public boolean isExtractViewShown()

Return whether the fullscreen extract view is shown. This will only return true 
if (|android.inputmethodservice.InputMethodService|) returns true, and in that 
case its value depends on the last call to 
(|android.inputmethodservice.InputMethodService|) . This effectively lets you 
determine if the application window is entirely covered (when this returns 
true) or if some part of it may be shown (if this returns false, though if 
(|android.inputmethodservice.InputMethodService|) returns true in that case 
then it is probably only a sliver of the application). 



*android.inputmethodservice.InputMethodService.isFullscreenMode()*

public boolean isFullscreenMode()

Return whether the input method is currently running in fullscreen mode. This 
is the mode that was last determined and applied by 
(|android.inputmethodservice.InputMethodService|) . 



*android.inputmethodservice.InputMethodService.isInputViewShown()*

public boolean isInputViewShown()

Return whether the soft input view is currently shown to the user. This is the 
state that was last determined and applied by 
(|android.inputmethodservice.InputMethodService|) . 



*android.inputmethodservice.InputMethodService.isShowInputRequested()*

public boolean isShowInputRequested()

Returns true if we have been asked to show our input view. 



*android.inputmethodservice.InputMethodService.onAppPrivateCommand(String,Bundle)*

public void onAppPrivateCommand(
  java.lang.String action,
  android.os.Bundle data)





*android.inputmethodservice.InputMethodService.onBindInput()*

public void onBindInput()

Called when a new client has bound to the input method. This may be followed by 
a series of (|android.inputmethodservice.InputMethodService|) and 
(|android.inputmethodservice.InputMethodService|) calls as the user navigates 
through its UI. Upon this call you know that 
(|android.inputmethodservice.InputMethodService|) and 
(|android.inputmethodservice.InputMethodService|) return valid objects. 



*android.inputmethodservice.InputMethodService.onComputeInsets(InputMethodService.Insets)*

public void onComputeInsets(android.inputmethodservice.InputMethodService.Insets outInsets)

Compute the interesting insets into your UI. The default implementation uses 
the top of the candidates frame for the visible insets, and the top of the 
input frame for the content insets. The default touchable insets are 
(|android.inputmethodservice.InputMethodService.Insets|) . 

Note that this method is not called when 
(|android.inputmethodservice.InputMethodService|) returns true, since in that 
case the application is left as-is behind the input method and not impacted by 
anything in its UI. 


    outInsets - Fill in with the current UI insets. 

*android.inputmethodservice.InputMethodService.onConfigurationChanged(Configuration)*

public void onConfigurationChanged(android.content.res.Configuration newConfig)

Take care of handling configuration changes. Subclasses of InputMethodService 
generally don't need to deal directly with this on their own; the standard 
implementation here takes care of regenerating the input method UI as a result 
of the configuration change, so you can rely on your 
(|android.inputmethodservice.InputMethodService|) and other methods being 
called as appropriate due to a configuration change. 

When a configuration change does happen, 
(|android.inputmethodservice.InputMethodService|) is guaranteed to be called 
the next time prior to any of the other input or UI creation callbacks. The 
following will be called immediately depending if appropriate for current 
state: (|android.inputmethodservice.InputMethodService|) if input is active, 
and (|android.inputmethodservice.InputMethodService|) and 
(|android.inputmethodservice.InputMethodService|) and related appropriate 
functions if the UI is displayed. 



*android.inputmethodservice.InputMethodService.onConfigureWindow(Window,boolean,boolean)*

public void onConfigureWindow(
  android.view.Window win,
  boolean isFullscreen,
  boolean isCandidatesOnly)

Update the given window's parameters for the given mode. This is called when 
the window is first displayed and each time the fullscreen or candidates only 
mode changes. 

The default implementation makes the layout for the window MATCH_PARENT x 
MATCH_PARENT when in fullscreen mode, and MATCH_PARENT x WRAP_CONTENT when in 
non-fullscreen mode. 


    win - The input method's window. 
    isFullscreen - If true, the window is running in fullscreen mode and intended to cover the 
       entire application display. 
    isCandidatesOnly - If true, the window is only showing the candidates view and none of the rest of 
       its UI. This is mutually exclusive with fullscreen mode. 

*android.inputmethodservice.InputMethodService.onCreate()*

public void onCreate()





*android.inputmethodservice.InputMethodService.onCreateCandidatesView()*

public |android.view.View| onCreateCandidatesView()

Create and return the view hierarchy used to show candidates. This will be 
called once, when the candidates are first displayed. You can return null to 
have no candidates view; the default implementation returns null. 

To control when the candidates view is displayed, use 
(|android.inputmethodservice.InputMethodService|) . To change the candidates 
view after the first one is created by this function, use 
(|android.inputmethodservice.InputMethodService|) . 



*android.inputmethodservice.InputMethodService.onCreateExtractTextView()*

public |android.view.View| onCreateExtractTextView()

Called by the framework to create the layout for showing extacted text. Only 
called when in fullscreen mode. The returned view hierarchy must have an 
(|android.inputmethodservice.ExtractEditText|) whose ID is (|android.R.id|) . 



*android.inputmethodservice.InputMethodService.onCreateInputMethodInterface()*

public |android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodImpl| onCreateInputMethodInterface()

Implement to return our standard 
(|android.inputmethodservice.InputMethodService.InputMethodImpl|) . Subclasses 
can override to provide their own customized version. 



*android.inputmethodservice.InputMethodService.onCreateInputMethodSessionInterface()*

public |android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl| onCreateInputMethodSessionInterface()

Implement to return our standard 
(|android.inputmethodservice.InputMethodService.InputMethodSessionImpl|) . 
Subclasses can override to provide their own customized version. 



*android.inputmethodservice.InputMethodService.onCreateInputView()*

public |android.view.View| onCreateInputView()

Create and return the view hierarchy used for the input area (such as a soft 
keyboard). This will be called once, when the input area is first displayed. 
You can return null to have no input area; the default implementation returns 
null. 

To control when the input view is displayed, implement 
(|android.inputmethodservice.InputMethodService|) . To change the input view 
after the first one is created by this function, use 
(|android.inputmethodservice.InputMethodService|) . 



*android.inputmethodservice.InputMethodService.onCurrentInputMethodSubtypeChanged(InputMethodSubtype)*

protected void onCurrentInputMethodSubtypeChanged(android.view.inputmethod.InputMethodSubtype newSubtype)

Called when the subtype was changed. 


    newSubtype - the subtype which is being changed to. 

*android.inputmethodservice.InputMethodService.onDestroy()*

public void onDestroy()





*android.inputmethodservice.InputMethodService.onDisplayCompletions(CompletionInfo[])*

public void onDisplayCompletions(android.view.inputmethod.CompletionInfo[] completions)

Called when the application has reported auto-completion candidates that it 
would like to have the input method displayed. Typically these are only used 
when an input method is running in full-screen mode, since otherwise the user 
can see and interact with the pop-up window of completions shown by the 
application. 

The default implementation here does nothing. 



*android.inputmethodservice.InputMethodService.onEvaluateFullscreenMode()*

public boolean onEvaluateFullscreenMode()

Override this to control when the input method should run in fullscreen mode. 
The default implementation runs in fullsceen only when the screen is in 
landscape mode. If you change what this returns, you will need to call 
(|android.inputmethodservice.InputMethodService|) yourself whenever the 
returned value may have changed to have it re-evaluated and applied. 



*android.inputmethodservice.InputMethodService.onEvaluateInputViewShown()*

public boolean onEvaluateInputViewShown()

Override this to control when the soft input area should be shown to the user. 
The default implementation only shows the input view when there is no hard 
keyboard or the keyboard is hidden. If you change what this returns, you will 
need to call (|android.inputmethodservice.InputMethodService|) yourself 
whenever the returned value may have changed to have it re-evaluated and 
applied. 



*android.inputmethodservice.InputMethodService.onExtractedCursorMovement(int,int)*

public void onExtractedCursorMovement(
  int dx,
  int dy)

This is called when the user has performed a cursor movement in the extracted 
text view, when it is running in fullscreen mode. The default implementation 
hides the candidates view when a vertical movement happens, but only if the 
extracted text editor has a vertical scroll bar because its text doesn't fit. 
Re-implement this to provide whatever behavior you want. 


    dx - The amount of cursor movement in the x dimension. 
    dy - The amount of cursor movement in the y dimension. 

*android.inputmethodservice.InputMethodService.onExtractedDeleteText(int,int)*

public void onExtractedDeleteText(
  int start,
  int end)





*android.inputmethodservice.InputMethodService.onExtractedReplaceText(int,int,CharSequence)*

public void onExtractedReplaceText(
  int start,
  int end,
  java.lang.CharSequence text)





*android.inputmethodservice.InputMethodService.onExtractedSelectionChanged(int,int)*

public void onExtractedSelectionChanged(
  int start,
  int end)

This is called when the user has moved the cursor in the extracted text view, 
when running in fullsreen mode. The default implementation performs the 
corresponding selection change on the underlying text editor. 



*android.inputmethodservice.InputMethodService.onExtractedSetSpan(Object,int,int,int)*

public void onExtractedSetSpan(
  java.lang.Object span,
  int start,
  int end,
  int flags)





*android.inputmethodservice.InputMethodService.onExtractedTextClicked()*

public void onExtractedTextClicked()

This is called when the user has clicked on the extracted text view, when 
running in fullscreen mode. The default implementation hides the candidates 
view when this happens, but only if the extracted text editor has a vertical 
scroll bar because its text doesn't fit. Re-implement this to provide whatever 
behavior you want. 



*android.inputmethodservice.InputMethodService.onExtractingInputChanged(EditorInfo)*

public void onExtractingInputChanged(android.view.inputmethod.EditorInfo ei)

This is called when, while currently displayed in extract mode, the current 
input target changes. The default implementation will auto-hide the IME if the 
new target is not a full editor, since this can be a confusing experience for 
the user. 



*android.inputmethodservice.InputMethodService.onExtractTextContextMenuItem(int)*

public boolean onExtractTextContextMenuItem(int id)

This is called when the user has selected a context menu item from the 
extracted text view, when running in fullscreen mode. The default 
implementation sends this action to the current InputConnection's 
(|android.view.inputmethod.InputConnection|) , for it to be processed in 
underlying "real" editor. Re-implement this to provide whatever behavior you 
want. 



*android.inputmethodservice.InputMethodService.onFinishCandidatesView(boolean)*

public void onFinishCandidatesView(boolean finishingInput)

Called when the candidates view is being hidden from the user. This will be 
called either prior to hiding the window, or prior to switching to another 
target for editing. 

The default implementation uses the InputConnection to clear any active 
composing text; you can override this (not calling the base class 
implementation) to perform whatever behavior you would like. 


    finishingInput - If true, {@link #onFinishInput} will be called immediately after. 

*android.inputmethodservice.InputMethodService.onFinishInput()*

public void onFinishInput()

Called to inform the input method that text input has finished in the last 
editor. At this point there may be a call to 
(|android.inputmethodservice.InputMethodService|) to perform input in a new 
editor, or the input method may be left idle. This method is not called when 
input restarts in the same editor. 

The default implementation uses the InputConnection to clear any active 
composing text; you can override this (not calling the base class 
implementation) to perform whatever behavior you would like. 



*android.inputmethodservice.InputMethodService.onFinishInputView(boolean)*

public void onFinishInputView(boolean finishingInput)

Called when the input view is being hidden from the user. This will be called 
either prior to hiding the window, or prior to switching to another target for 
editing. 

The default implementation uses the InputConnection to clear any active 
composing text; you can override this (not calling the base class 
implementation) to perform whatever behavior you would like. 


    finishingInput - If true, {@link #onFinishInput} will be called immediately after. 

*android.inputmethodservice.InputMethodService.onGenericMotionEvent(MotionEvent)*

public boolean onGenericMotionEvent(android.view.MotionEvent event)

Override this to intercept generic motion events before they are processed by 
the application. If you return true, the application will not itself process 
the event. If you return false, the normal application processing will occur as 
if the IME had not seen the event at all. 



*android.inputmethodservice.InputMethodService.onInitializeInterface()*

public void onInitializeInterface()

This is a hook that subclasses can use to perform initialization of their 
interface. It is called for you prior to any of your UI objects being created, 
both after the service is first created and after a configuration change 
happens. 



*android.inputmethodservice.InputMethodService.onKeyDown(int,KeyEvent)*

public boolean onKeyDown(
  int keyCode,
  android.view.KeyEvent event)

Override this to intercept key down events before they are processed by the 
application. If you return true, the application will not process the event 
itself. If you return false, the normal application processing will occur as if 
the IME had not seen the event at all. 

The default implementation intercepts 
KeyEvent.KEYCODE_BACK(|android.view.KeyEvent|) if the IME is currently shown, 
to possibly hide it when the key goes up (if not canceled or long pressed). In 
addition, in fullscreen mode only, it will consume DPAD movement events to move 
the cursor in the extracted text view, not allowing them to perform navigation 
in the underlying application. 



*android.inputmethodservice.InputMethodService.onKeyLongPress(int,KeyEvent)*

public boolean onKeyLongPress(
  int keyCode,
  android.view.KeyEvent event)

Default implementation of 
KeyEvent.Callback.onKeyLongPress()(|KeyEvent.Callback|) : always returns false 
(doesn't handle the event). 



*android.inputmethodservice.InputMethodService.onKeyMultiple(int,int,KeyEvent)*

public boolean onKeyMultiple(
  int keyCode,
  int count,
  android.view.KeyEvent event)

Override this to intercept special key multiple events before they are 
processed by the application. If you return true, the application will not 
itself process the event. If you return false, the normal application 
processing will occur as if the IME had not seen the event at all. 

The default implementation always returns false, except when in fullscreen 
mode, where it will consume DPAD movement events to move the cursor in the 
extracted text view, not allowing them to perform navigation in the underlying 
application. 



*android.inputmethodservice.InputMethodService.onKeyUp(int,KeyEvent)*

public boolean onKeyUp(
  int keyCode,
  android.view.KeyEvent event)

Override this to intercept key up events before they are processed by the 
application. If you return true, the application will not itself process the 
event. If you return false, the normal application processing will occur as if 
the IME had not seen the event at all. 

The default implementation intercepts 
KeyEvent.KEYCODE_BACK(|android.view.KeyEvent|) to hide the current IME UI if it 
is shown. In addition, in fullscreen mode only, it will consume DPAD movement 
events to move the cursor in the extracted text view, not allowing them to 
perform navigation in the underlying application. 



*android.inputmethodservice.InputMethodService.onShowInputRequested(int,boolean)*

public boolean onShowInputRequested(
  int flags,
  boolean configChange)

The system has decided that it may be time to show your input method. This is 
called due to a corresponding call to your 
InputMethod.showSoftInput()(|android.view.inputmethod.InputMethod|) method. The 
default implementation uses (|android.inputmethodservice.InputMethodService|) , 
(|android.inputmethodservice.InputMethodService|) , and the current 
configuration to decide whether the input view should be shown at this point. 


    flags - Provides additional information about the show request, as per {@link 
       InputMethod#showSoftInput InputMethod.showSoftInput()}. 
    configChange - This is true if we are re-showing due to a configuration change. 

    Returns: Returns true to indicate that the window should be shown. 

*android.inputmethodservice.InputMethodService.onStartCandidatesView(EditorInfo,boolean)*

public void onStartCandidatesView(
  android.view.inputmethod.EditorInfo info,
  boolean restarting)

Called when only the candidates view has been shown for showing processing as 
the user enters text through a hard keyboard. This will always be called after 
(|android.inputmethodservice.InputMethodService|) , allowing you to do your 
general setup there and just view-specific setup here. You are guaranteed that 
(|android.inputmethodservice.InputMethodService|) will have been called some 
time before this function is called. 

Note that this will not be called when the input method is running in full 
editing mode, and thus receiving 
(|android.inputmethodservice.InputMethodService|) to initiate that operation. 
This is only for the case when candidates are being shown while the input 
method editor is hidden but wants to show its candidates UI as text is entered 
through some other mechanism. 


    info - Description of the type of text being edited. 
    restarting - Set to true if we are restarting input on the same text field as before. 

*android.inputmethodservice.InputMethodService.onStartInput(EditorInfo,boolean)*

public void onStartInput(
  android.view.inputmethod.EditorInfo attribute,
  boolean restarting)

Called to inform the input method that text input has started in an editor. You 
should use this callback to initialize the state of your input to match the 
state of the editor given to it. 


    attribute - The attributes of the editor that input is starting in. 
    restarting - Set to true if input is restarting in the same editor such as because the 
       application has changed the text in the editor. Otherwise will be false, 
       indicating this is a new session with the editor. 

*android.inputmethodservice.InputMethodService.onStartInputView(EditorInfo,boolean)*

public void onStartInputView(
  android.view.inputmethod.EditorInfo info,
  boolean restarting)

Called when the input view is being shown and input has started on a new 
editor. This will always be called after 
(|android.inputmethodservice.InputMethodService|) , allowing you to do your 
general setup there and just view-specific setup here. You are guaranteed that 
(|android.inputmethodservice.InputMethodService|) will have been called some 
time before this function is called. 


    info - Description of the type of text being edited. 
    restarting - Set to true if we are restarting input on the same text field as before. 

*android.inputmethodservice.InputMethodService.onTrackballEvent(MotionEvent)*

public boolean onTrackballEvent(android.view.MotionEvent event)

Override this to intercept trackball motion events before they are processed by 
the application. If you return true, the application will not itself process 
the event. If you return false, the normal application processing will occur as 
if the IME had not seen the event at all. 



*android.inputmethodservice.InputMethodService.onUnbindInput()*

public void onUnbindInput()

Called when the previous bound client is no longer associated with the input 
method. After returning (|android.inputmethodservice.InputMethodService|) and 
(|android.inputmethodservice.InputMethodService|) will no longer return valid 
objects. 



*android.inputmethodservice.InputMethodService.onUpdateCursor(Rect)*

public void onUpdateCursor(Rect newCursor)

Called when the application has reported a new location of its text cursor. 
This is only called if explicitly requested by the input method. The default 
implementation does nothing. 



*android.inputmethodservice.InputMethodService.onUpdateExtractedText(int,ExtractedText)*

public void onUpdateExtractedText(
  int token,
  android.view.inputmethod.ExtractedText text)

Called when the application has reported new extracted text to be shown due to 
changes in its current text state. The default implementation here places the 
new text in the extract edit text, when the input method is running in 
fullscreen mode. 



*android.inputmethodservice.InputMethodService.onUpdateExtractingViews(EditorInfo)*

public void onUpdateExtractingViews(android.view.inputmethod.EditorInfo ei)

Called when the fullscreen-mode extracting editor info has changed, to update 
the state of its UI such as the action buttons shown. You do not need to deal 
with this if you are using the standard full screen extract UI. If replacing 
it, you will need to re-implement this to put the appropriate action button in 
your own UI and handle it, and perform any other changes. 

The standard implementation turns on or off its accessory area depending on 
whether there is an action button, and hides or shows the entire extract area 
depending on whether it makes sense for the current editor. In particular, a 
(|android.text.InputType|) or (|android.text.InputType|) input type will turn 
off the extract area since there is no text to be shown. 



*android.inputmethodservice.InputMethodService.onUpdateExtractingVisibility(EditorInfo)*

public void onUpdateExtractingVisibility(android.view.inputmethod.EditorInfo ei)

Called when the fullscreen-mode extracting editor info has changed, to 
determine whether the extracting (extract text and candidates) portion of the 
UI should be shown. The standard implementation hides or shows the extract area 
depending on whether it makes sense for the current editor. In particular, a 
(|android.text.InputType|) input type or 
(|android.view.inputmethod.EditorInfo|) flag will turn off the extract area 
since there is no text to be shown. 



*android.inputmethodservice.InputMethodService.onUpdateSelection(int,int,int,int,int,int)*

public void onUpdateSelection(
  int oldSelStart,
  int oldSelEnd,
  int newSelStart,
  int newSelEnd,
  int candidatesStart,
  int candidatesEnd)

Called when the application has reported a new selection region of the text. 
This is called whether or not the input method has requested extracted text 
updates, although if so it will not receive this call if the extracted text has 
changed as well. 

Be careful about changing the text in reaction to this call with methods such 
as setComposingText, commitText or deleteSurroundingText. If the cursor moves 
as a result, this method will be called again, which may result in an infinite 
loop. 

The default implementation takes care of updating the cursor in the extract 
text, if it is being shown. 



*android.inputmethodservice.InputMethodService.onViewClicked(boolean)*

public void onViewClicked(boolean focusChanged)

Called when the user tapped or clicked a text view. IMEs can't rely on this 
method being called because this was not part of the original IME protocol, so 
applications with custom text editing written before this method appeared will 
not call to inform the IME of this interaction. 


    focusChanged - true if the user changed the focused view by this click. 

*android.inputmethodservice.InputMethodService.onWindowHidden()*

public void onWindowHidden()

Called when the input method window has been hidden from the user, after 
previously being visible. 



*android.inputmethodservice.InputMethodService.onWindowShown()*

public void onWindowShown()

Called when the input method window has been shown to the user, after 
previously not being visible. This is done after all of the UI setup for the 
window has occurred (creating its views etc). 



*android.inputmethodservice.InputMethodService.requestHideSelf(int)*

public void requestHideSelf(int flags)

Close this input method's soft input area, removing it from the display. The 
input method will continue running, but the user can no longer use it to 
generate input by touching the screen. 


    flags - Provides additional operating flags. Currently may be 0 or have the {@link 
       InputMethodManager#HIDE_IMPLICIT_ONLY 
       InputMethodManager.HIDE_IMPLICIT_ONLY} bit set. 

*android.inputmethodservice.InputMethodService.sendDefaultEditorAction(boolean)*

public boolean sendDefaultEditorAction(boolean fromEnterKey)

Ask the input target to execute its default action via 
InputConnection.performEditorAction()(|android.view.inputmethod.InputConnection|)
. 


    fromEnterKey - If true, this will be executed as if the user had pressed an enter key on the 
       keyboard, that is it will not be done if the editor has set {@link 
       EditorInfo#IME_FLAG_NO_ENTER_ACTION 
       EditorInfo.IME_FLAG_NO_ENTER_ACTION}. If false, the action will be sent 
       regardless of how the editor has set that flag. 

    Returns: Returns a boolean indicating whether an action has been sent. If false, either 
             the editor did not specify a default action or it does not want an 
             action from the enter key. If true, the action was sent (or there 
             was no input connection at all). 

*android.inputmethodservice.InputMethodService.sendDownUpKeyEvents(int)*

public void sendDownUpKeyEvents(int keyEventCode)

Send the given key event code (as defined by (|android.view.KeyEvent|) ) to the 
current input connection is a key down + key up event pair. The sent events 
have KeyEvent.FLAG_SOFT_KEYBOARD(|android.view.KeyEvent|) set, so that the 
recipient can identify them as coming from a software input method, and 
KeyEvent.FLAG_KEEP_TOUCH_MODE(|android.view.KeyEvent|) , so that they don't 
impact the current touch mode of the UI. 

Note that it's discouraged to send such key events in normal operation; this is 
mainly for use with (|android.text.InputType|) type text fields, or for 
non-rich input methods. A reasonably capable software input method should use 
the (|android.view.inputmethod.InputConnection|) family of methods to send text 
to an application, rather than sending key events. 


    keyEventCode - The raw key code to send, as defined by {@link KeyEvent}. 

*android.inputmethodservice.InputMethodService.sendKeyChar(char)*

public void sendKeyChar(char charCode)

Send the given UTF-16 character to the current input connection. Most 
characters will be delivered simply by calling 
InputConnection.commitText()(|android.view.inputmethod.InputConnection|) with 
the character; some, however, may be handled different. In particular, the 
enter character ('\n') will either be delivered as an action code or a raw key 
event, as appropriate. Consider this as a convenience method for IMEs that do 
not have a full implementation of actions; a fully complying IME will decide of 
the right action for each event and will likely never call this method except 
maybe to handle events coming from an actual hardware keyboard. 


    charCode - The UTF-16 character code to send. 

*android.inputmethodservice.InputMethodService.setBackDisposition(int)*

public void setBackDisposition(int disposition)





*android.inputmethodservice.InputMethodService.setCandidatesView(View)*

public void setCandidatesView(android.view.View view)

Replaces the current candidates view with a new one. You only need to call this 
when dynamically changing the view; normally, you should implement 
(|android.inputmethodservice.InputMethodService|) and create your view when 
first needed by the input method. 



*android.inputmethodservice.InputMethodService.setCandidatesViewShown(boolean)*

public void setCandidatesViewShown(boolean shown)

Controls the visibility of the candidates display area. By default it is 
hidden. 



*android.inputmethodservice.InputMethodService.setExtractView(View)*

public void setExtractView(android.view.View view)





*android.inputmethodservice.InputMethodService.setExtractViewShown(boolean)*

public void setExtractViewShown(boolean shown)

Controls the visibility of the extracted text area. This only applies when the 
input method is in fullscreen mode, and thus showing extracted text. When 
false, the extracted text will not be shown, allowing some of the application 
to be seen behind. This is normally set for you by 
(|android.inputmethodservice.InputMethodService|) . This controls the 
visibility of both the extracted text and candidate view; the latter since it 
is not useful if there is no text to see. 



*android.inputmethodservice.InputMethodService.setInputView(View)*

public void setInputView(android.view.View view)

Replaces the current input view with a new one. You only need to call this when 
dynamically changing the view; normally, you should implement 
(|android.inputmethodservice.InputMethodService|) and create your view when 
first needed by the input method. 



*android.inputmethodservice.InputMethodService.setTheme(int)*

public void setTheme(int theme)

You can call this to customize the theme used by your IME's window. This theme 
should typically be one that derives from (|android.R.style|) , which is the 
default theme you will get. This must be set before 
(|android.inputmethodservice.InputMethodService|) , so you will typically call 
it in your constructor with the resource ID of your custom theme. 



*android.inputmethodservice.InputMethodService.showStatusIcon(int)*

public void showStatusIcon(int iconResId)





*android.inputmethodservice.InputMethodService.showWindow(boolean)*

public void showWindow(boolean showInput)





*android.inputmethodservice.InputMethodService.switchInputMethod(String)*

public void switchInputMethod(java.lang.String id)

Force switch to a new input method, as identified by id. This input method will 
be destroyed, and the requested one started on the current input field. 


    id - Unique identifier of the new input method ot start. 

*android.inputmethodservice.InputMethodService.updateFullscreenMode()*

public void updateFullscreenMode()

Re-evaluate whether the input method should be running in fullscreen mode, and 
update its UI if this has changed since the last time it was evaluated. This 
will call (|android.inputmethodservice.InputMethodService|) to determine 
whether it should currently run in fullscreen mode. You can use 
(|android.inputmethodservice.InputMethodService|) to determine if the input 
method is currently running in fullscreen mode. 



*android.inputmethodservice.InputMethodService.updateInputViewShown()*

public void updateInputViewShown()

Re-evaluate whether the soft input area should currently be shown, and update 
its UI if this has changed since the last time it was evaluated. This will call 
(|android.inputmethodservice.InputMethodService|) to determine whether the 
input view should currently be shown. You can use 
(|android.inputmethodservice.InputMethodService|) to determine if the input 
view is currently shown. 




