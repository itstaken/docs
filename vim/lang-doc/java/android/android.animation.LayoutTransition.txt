*android.animation.LayoutTransition* *LayoutTransition* This class enables autom

public class LayoutTransition
  extends    |java.lang.Object|

|android.animation.LayoutTransition_Description|
|android.animation.LayoutTransition_Fields|
|android.animation.LayoutTransition_Constructors|
|android.animation.LayoutTransition_Methods|

================================================================================

*android.animation.LayoutTransition_Fields*
|int_android.animation.LayoutTransition.APPEARING|
|int_android.animation.LayoutTransition.CHANGE_APPEARING|
|int_android.animation.LayoutTransition.CHANGE_DISAPPEARING|
|int_android.animation.LayoutTransition.CHANGING|
|int_android.animation.LayoutTransition.DISAPPEARING|

*android.animation.LayoutTransition_Constructors*
|android.animation.LayoutTransition()|Constructs a LayoutTransition object.

*android.animation.LayoutTransition_Methods*
|android.animation.LayoutTransition.addChild(ViewGroup,View)|This method is cal
|android.animation.LayoutTransition.addTransitionListener(LayoutTransition.TransitionListener)|
|android.animation.LayoutTransition.cancel()|Cancels the currently running tran
|android.animation.LayoutTransition.cancel(int)|Cancels the specified type of t
|android.animation.LayoutTransition.disableTransitionType(int)|Disables the spe
|android.animation.LayoutTransition.enableTransitionType(int)|Enables the speci
|android.animation.LayoutTransition.endChangingAnimations()|Ends the animations
|android.animation.LayoutTransition.getAnimator(int)|Gets the animation used du
|android.animation.LayoutTransition.getDuration(int)|Gets the duration on one o
|android.animation.LayoutTransition.getInterpolator(int)|Gets the interpolator 
|android.animation.LayoutTransition.getStagger(int)|Gets the length of time to 
|android.animation.LayoutTransition.getStartDelay(int)|Gets the start delay on 
|android.animation.LayoutTransition.getTransitionListeners()|Gets the current l
|android.animation.LayoutTransition.hideChild(ViewGroup,View)|
|android.animation.LayoutTransition.hideChild(ViewGroup,View,int)|This method i
|android.animation.LayoutTransition.isChangingLayout()|Returns true if animatio
|android.animation.LayoutTransition.isRunning()|Returns true if any of the anim
|android.animation.LayoutTransition.isTransitionTypeEnabled(int)|Returns whethe
|android.animation.LayoutTransition.layoutChange(ViewGroup)|This method is call
|android.animation.LayoutTransition.removeChild(ViewGroup,View)|This method is 
|android.animation.LayoutTransition.removeTransitionListener(LayoutTransition.TransitionListener)|
|android.animation.LayoutTransition.setAnimateParentHierarchy(boolean)|This fla
|android.animation.LayoutTransition.setAnimator(int,Animator)|Sets the animatio
|android.animation.LayoutTransition.setDuration(int,long)|Sets the duration on 
|android.animation.LayoutTransition.setDuration(long)|Sets the duration to be u
|android.animation.LayoutTransition.setInterpolator(int,TimeInterpolator)|Sets 
|android.animation.LayoutTransition.setStagger(int,long)|Sets the length of tim
|android.animation.LayoutTransition.setStartDelay(int,long)|Sets the start dela
|android.animation.LayoutTransition.showChild(ViewGroup,View)|
|android.animation.LayoutTransition.showChild(ViewGroup,View,int)|This method i
|android.animation.LayoutTransition.startChangingAnimations()|Starts the animat

*android.animation.LayoutTransition_Description*

This class enables automatic animations on layout changes in ViewGroup objects. 
To enable transitions for a layout container, create a LayoutTransition object 
and set it on any ViewGroup by calling (|android.view.ViewGroup|) . This will 
cause default animations to run whenever items are added to or removed from 
that container. To specify custom animations, use the 
setAnimator()(|android.animation.LayoutTransition|) method. 

One of the core concepts of these transition animations is that there are two 
types of changes that cause the transition and four different animations that 
run because of those changes. The changes that trigger the transition are items 
being added to a container (referred to as an "appearing" transition) or 
removed from a container (also known as "disappearing"). Setting the visibility 
of views (between GONE and VISIBLE) will trigger the same add/remove logic. The 
animations that run due to those events are one that animates items being 
added, one that animates items being removed, and two that animate the other 
items in the container that change due to the add/remove occurrence. Users of 
the transition may want different animations for the changing items depending 
on whether they are changing due to an appearing or disappearing event, so 
there is one animation for each of these variations of the changing event. Most 
of the API of this class is concerned with setting up the basic properties of 
the animations used in these four situations, or with setting up custom 
animations for any or all of the four. 

By default, the DISAPPEARING animation begins immediately, as does the 
CHANGE_APPEARING animation. The other animations begin after a delay that is 
set to the default duration of the animations. This behavior facilitates a 
sequence of animations in transitions as follows: when an item is being added 
to a layout, the other children of that container will move first (thus 
creating space for the new item), then the appearing animation will run to 
animate the item being added. Conversely, when an item is removed from a 
container, the animation to remove it will run first, then the animations of 
the other children in the layout will run (closing the gap created in the 
layout when the item was removed). If this default choreography behavior is not 
desired, the (|android.animation.LayoutTransition|) and 
(|android.animation.LayoutTransition|) of any or all of the animations can be 
changed as appropriate. 

The animations specified for the transition, both the defaults and any custom 
animations set on the transition object, are templates only. That is, these 
animations exist to hold the basic animation properties, such as the duration, 
start delay, and properties being animated. But the actual target object, as 
well as the start and end values for those properties, are set automatically in 
the process of setting up the transition each time it runs. Each of the 
animations is cloned from the original copy and the clone is then populated 
with the dynamic values of the target being animated (such as one of the items 
in a layout container that is moving as a result of the layout event) as well 
as the values that are changing (such as the position and size of that object). 
The actual values that are pushed to each animation depends on what properties 
are specified for the animation. For example, the default CHANGE_APPEARING 
animation animates the left, top, right, bottom, scrollX, and scrollY 
properties. Values for these properties are updated with the pre- and 
post-layout values when the transition begins. Custom animations will be 
similarly populated with the target and values being animated, assuming they 
use ObjectAnimator objects with property names that are known on the target 
object. 

This class, and the associated XML flag for containers, 
animateLayoutChanges="true", provides a simple utility meant for automating 
changes in straightforward situations. Using LayoutTransition at multiple 
levels of a nested view hierarchy may not work due to the interrelationship of 
the various levels of layout. Also, a container that is being scrolled at the 
same time as items are being added or removed is probably not a good candidate 
for this utility, because the before/after locations calculated by 
LayoutTransition may not match the actual locations when the animations finish 
due to the container being scrolled as the animations are running. You can work 
around that particular issue by disabling the 'changing' animations by setting 
the CHANGE_APPEARING and CHANGE_DISAPPEARING animations to null, and setting 
the startDelay of the other animations appropriately. 



*int_android.animation.LayoutTransition.APPEARING*

A flag indicating the animation that runs on those items that are appearing in 
the container. 


*int_android.animation.LayoutTransition.CHANGE_APPEARING*

A flag indicating the animation that runs on those items that are changing due 
to a new item appearing in the container. 


*int_android.animation.LayoutTransition.CHANGE_DISAPPEARING*

A flag indicating the animation that runs on those items that are changing due 
to an item disappearing from the container. 


*int_android.animation.LayoutTransition.CHANGING*

A flag indicating the animation that runs on those items that are changing due 
to a layout change not caused by items being added to or removed from the 
container. This transition type is not enabled by default; it can be enabled 
via (|android.animation.LayoutTransition|) . 


*int_android.animation.LayoutTransition.DISAPPEARING*

A flag indicating the animation that runs on those items that are disappearing 
from the container. 



*android.animation.LayoutTransition()*

public LayoutTransition()

Constructs a LayoutTransition object. By default, the object will listen to 
layout events on any ViewGroup that it is set on and will run default 
animations for each type of layout event. 


*android.animation.LayoutTransition.addChild(ViewGroup,View)*

public void addChild(
  android.view.ViewGroup parent,
  android.view.View child)

This method is called by ViewGroup when a child view is about to be added to 
the container. This callback starts the process of a transition; we grab the 
starting values, listen for changes to all of the children of the container, 
and start appropriate animations. 


    parent - The ViewGroup to which the View is being added. 
    child - The View being added to the ViewGroup. 

*android.animation.LayoutTransition.addTransitionListener(LayoutTransition.TransitionListener)*

public void addTransitionListener(android.animation.LayoutTransition.TransitionListener listener)

Add a listener that will be called when the bounds of the view change due to 
layout processing. 


    listener - The listener that will be called when layout bounds change. 

*android.animation.LayoutTransition.cancel()*

public void cancel()

Cancels the currently running transition. Note that we cancel() the changing 
animations but end() the visibility animations. This is because this method is 
currently called in the context of starting a new transition, so we want to 
move things from their mid- transition positions, but we want them to have 
their end-transition visibility. 



*android.animation.LayoutTransition.cancel(int)*

public void cancel(int transitionType)

Cancels the specified type of transition. Note that we cancel() the changing 
animations but end() the visibility animations. This is because this method is 
currently called in the context of starting a new transition, so we want to 
move things from their mid- transition positions, but we want them to have 
their end-transition visibility. 



*android.animation.LayoutTransition.disableTransitionType(int)*

public void disableTransitionType(int transitionType)

Disables the specified transitionType for this LayoutTransition object. By 
default, all transition types except (|android.animation.LayoutTransition|) are 
enabled. 


    transitionType - One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING}, {@link 
       #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}. 

*android.animation.LayoutTransition.enableTransitionType(int)*

public void enableTransitionType(int transitionType)

Enables the specified transitionType for this LayoutTransition object. By 
default, a LayoutTransition listens for changes in children being 
added/remove/hidden/shown in the container, and runs the animations associated 
with those events. That is, all transition types besides 
(|android.animation.LayoutTransition|) are enabled by default. You can also 
enable (|android.animation.LayoutTransition|) animations by calling this method 
with the (|android.animation.LayoutTransition|) transitionType. 


    transitionType - One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING}, {@link 
       #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}. 

*android.animation.LayoutTransition.endChangingAnimations()*

public void endChangingAnimations()

Ends the animations that are set up for a CHANGING transition. This is a 
variant of startChangingAnimations() which is called when the window the 
transition is playing in is not visible. We need to make sure the animations 
put their targets in their end states and that the transition finishes to 
remove any mid-process state (such as isRunning()). 



*android.animation.LayoutTransition.getAnimator(int)*

public |android.animation.Animator| getAnimator(int transitionType)

Gets the animation used during one of the transition types that may run. 


    transitionType - One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING}, {@link 
       #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which 
       determines the animation whose animator is being returned. 

    Returns: Animator The animation being used for the given transition type. 

*android.animation.LayoutTransition.getDuration(int)*

public long getDuration(int transitionType)

Gets the duration on one of the animation objects used by this transition. The 
transitionType parameter determines the animation whose duration is returned. 


    transitionType - One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING}, {@link 
       #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which 
       determines the animation whose duration is returned. 

    Returns: long The duration of the specified animation. 

*android.animation.LayoutTransition.getInterpolator(int)*

public |android.animation.TimeInterpolator| getInterpolator(int transitionType)

Gets the interpolator on one of the animation objects used by this transition. 
The transitionType parameter determines the animation whose interpolator is 
returned. 


    transitionType - One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING}, {@link 
       #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which 
       determines the animation whose interpolator is being returned. 

    Returns: TimeInterpolator The interpolator that the specified animation uses. 

*android.animation.LayoutTransition.getStagger(int)*

public long getStagger(int transitionType)

Gets the length of time to delay between starting each animation during one of 
the change animations. 


    transitionType - A value of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING}, or {@link 
       #CHANGING}. 

    Returns: long The length of time, in milliseconds, to delay before launching the next 
             animation in the sequence. 

*android.animation.LayoutTransition.getStartDelay(int)*

public long getStartDelay(int transitionType)

Gets the start delay on one of the animation objects used by this transition. 
The transitionType parameter determines the animation whose start delay is 
returned. 


    transitionType - One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING}, {@link 
       #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which 
       determines the animation whose start delay is returned. 

    Returns: long The start delay of the specified animation. 

*android.animation.LayoutTransition.getTransitionListeners()*

public |java.util.List|<TransitionListener> getTransitionListeners()

Gets the current list of listeners for layout changes. 



    Returns: 

*android.animation.LayoutTransition.hideChild(ViewGroup,View)*

public void hideChild(
  android.view.ViewGroup parent,
  android.view.View child)



    Deprecated: Use {@link #hideChild(android.view.ViewGroup, android.view.View, int)}.


*android.animation.LayoutTransition.hideChild(ViewGroup,View,int)*

public void hideChild(
  android.view.ViewGroup parent,
  android.view.View child,
  int newVisibility)

This method is called by ViewGroup when a child view is about to be hidden in 
container. This callback starts the process of a transition; we grab the 
starting values, listen for changes to all of the children of the container, 
and start appropriate animations. 


    parent - The parent ViewGroup of the View being hidden. 
    child - The View being hidden. 
    newVisibility - The new visibility value of the child View, either {@link View#GONE} or {@link 
       View#INVISIBLE}. 

*android.animation.LayoutTransition.isChangingLayout()*

public boolean isChangingLayout()

Returns true if animations are running which animate layout-related properties. 
This essentially means that either CHANGE_APPEARING or CHANGE_DISAPPEARING 
animations are running, since these animations operate on layout-related 
properties. 



    Returns: true if CHANGE_APPEARING or CHANGE_DISAPPEARING animations are currently 
             running. 

*android.animation.LayoutTransition.isRunning()*

public boolean isRunning()

Returns true if any of the animations in this transition are currently running. 



    Returns: true if any animations in the transition are running. 

*android.animation.LayoutTransition.isTransitionTypeEnabled(int)*

public boolean isTransitionTypeEnabled(int transitionType)

Returns whether the specified transitionType is enabled for this 
LayoutTransition object. By default, all transition types except 
(|android.animation.LayoutTransition|) are enabled. 


    transitionType - One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING}, {@link 
       #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}. 

    Returns: true if the specified transitionType is currently enabled, false otherwise. 

*android.animation.LayoutTransition.layoutChange(ViewGroup)*

public void layoutChange(android.view.ViewGroup parent)

This method is called by ViewGroup when there is a call to layout() on the 
container with this LayoutTransition. If the CHANGING transition is enabled and 
if there is no other transition currently running on the container, then this 
call runs a CHANGING transition. The transition does not start immediately; it 
just sets up the mechanism to run if any of the children of the container 
change their layout parameters (similar to the CHANGE_APPEARING and 
CHANGE_DISAPPEARING transitions). 


    parent - The ViewGroup whose layout() method has been called. 

*android.animation.LayoutTransition.removeChild(ViewGroup,View)*

public void removeChild(
  android.view.ViewGroup parent,
  android.view.View child)

This method is called by ViewGroup when a child view is about to be removed 
from the container. This callback starts the process of a transition; we grab 
the starting values, listen for changes to all of the children of the 
container, and start appropriate animations. 


    parent - The ViewGroup from which the View is being removed. 
    child - The View being removed from the ViewGroup. 

*android.animation.LayoutTransition.removeTransitionListener(LayoutTransition.TransitionListener)*

public void removeTransitionListener(android.animation.LayoutTransition.TransitionListener listener)

Remove a listener for layout changes. 


    listener - The listener for layout bounds change. 

*android.animation.LayoutTransition.setAnimateParentHierarchy(boolean)*

public void setAnimateParentHierarchy(boolean animateParentHierarchy)

This flag controls whether CHANGE_APPEARING or CHANGE_DISAPPEARING animations 
will cause the default changing animation to be run on the parent hierarchy as 
well. This allows containers of transitioning views to also transition, which 
may be necessary in situations where the containers bounds change between the 
before/after states and may clip their children during the transition 
animations. For example, layouts with wrap_content will adjust their bounds 
according to the dimensions of their children. 

The default changing transitions animate the bounds and scroll positions of the 
target views. These are the animations that will run on the parent hierarchy, 
not the custom animations that happen to be set on the transition. This allows 
custom behavior for the children of the transitioning container, but uses 
standard behavior of resizing/rescrolling on any changing parents. 


    animateParentHierarchy - A boolean value indicating whether the parents of transitioning views should 
       also be animated during the transition. Default value is true. 

*android.animation.LayoutTransition.setAnimator(int,Animator)*

public void setAnimator(
  int transitionType,
  android.animation.Animator animator)

Sets the animation used during one of the transition types that may run. Any 
Animator object can be used, but to be most useful in the context of layout 
transitions, the animation should either be a ObjectAnimator or a AnimatorSet 
of animations including PropertyAnimators. Also, these ObjectAnimator objects 
should be able to get and set values on their target objects automatically. For 
example, a ObjectAnimator that animates the property "left" is able to set and 
get the left property from the View objects being animated by the layout 
transition. The transition works by setting target objects and properties 
dynamically, according to the pre- and post-layoout values of those objects, so 
having animations that can handle those properties appropriately will work best 
for custom animation. The dynamic setting of values is only the case for the 
CHANGE animations; the APPEARING and DISAPPEARING animations are simply run 
with the values they have. 

It is also worth noting that any and all animations (and their underlying 
PropertyValuesHolder objects) will have their start and end values set 
according to the pre- and post-layout values. So, for example, a custom 
animation on "alpha" as the CHANGE_APPEARING animation will inherit the real 
value of alpha on the target object (presumably 1) as its starting and ending 
value when the animation begins. Animations which need to use values at the 
beginning and end that may not match the values queried when the transition 
begins may need to use a different mechanism than a standard ObjectAnimator 
object. 


    transitionType - One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING}, {@link 
       #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which 
       determines the animation whose animator is being set. 
    animator - The animation being assigned. A value of null means that no animation will be 
       run for the specified transitionType. 

*android.animation.LayoutTransition.setDuration(int,long)*

public void setDuration(
  int transitionType,
  long duration)

Sets the duration on one of the animation objects used by this transition. The 
transitionType parameter determines the animation whose duration is being set. 


    transitionType - One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING}, {@link 
       #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which 
       determines the animation whose duration is being set. 
    duration - The length of time, in milliseconds, that the specified animation should run. 

*android.animation.LayoutTransition.setDuration(long)*

public void setDuration(long duration)

Sets the duration to be used by all animations of this transition object. If 
you want to set the duration of just one of the animations in particular, use 
the (|android.animation.LayoutTransition|) method. 


    duration - The length of time, in milliseconds, that the transition animations should 
       last. 

*android.animation.LayoutTransition.setInterpolator(int,TimeInterpolator)*

public void setInterpolator(
  int transitionType,
  android.animation.TimeInterpolator interpolator)

Sets the interpolator on one of the animation objects used by this transition. 
The transitionType parameter determines the animation whose interpolator is 
being set. 


    transitionType - One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING}, {@link 
       #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which 
       determines the animation whose interpolator is being set. 
    interpolator - The interpolator that the specified animation should use. 

*android.animation.LayoutTransition.setStagger(int,long)*

public void setStagger(
  int transitionType,
  long duration)

Sets the length of time to delay between starting each animation during one of 
the change animations. 


    transitionType - A value of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING}, or {@link 
       #CHANGING}. 
    duration - The length of time, in milliseconds, to delay before launching the next 
       animation in the sequence. 

*android.animation.LayoutTransition.setStartDelay(int,long)*

public void setStartDelay(
  int transitionType,
  long delay)

Sets the start delay on one of the animation objects used by this transition. 
The transitionType parameter determines the animation whose start delay is 
being set. 


    transitionType - One of {@link #CHANGE_APPEARING}, {@link #CHANGE_DISAPPEARING}, {@link 
       #CHANGING}, {@link #APPEARING}, or {@link #DISAPPEARING}, which 
       determines the animation whose start delay is being set. 
    delay - The length of time, in milliseconds, to delay before starting the animation. 

*android.animation.LayoutTransition.showChild(ViewGroup,View)*

public void showChild(
  android.view.ViewGroup parent,
  android.view.View child)



    Deprecated: Use {@link #showChild(android.view.ViewGroup, android.view.View, int)}.


*android.animation.LayoutTransition.showChild(ViewGroup,View,int)*

public void showChild(
  android.view.ViewGroup parent,
  android.view.View child,
  int oldVisibility)

This method is called by ViewGroup when a child view is about to be made 
visible in the container. This callback starts the process of a transition; we 
grab the starting values, listen for changes to all of the children of the 
container, and start appropriate animations. 


    parent - The ViewGroup in which the View is being made visible. 
    child - The View being made visible. 
    oldVisibility - The previous visibility value of the child View, either {@link View#GONE} or 
       {@link View#INVISIBLE}. 

*android.animation.LayoutTransition.startChangingAnimations()*

public void startChangingAnimations()

Starts the animations set up for a CHANGING transition. We separate the setup 
of these animations from actually starting them, to avoid side-effects that 
starting the animations may have on the properties of the affected objects. 
After setup, we tell the affected parent that this transition should be 
started. The parent informs its ViewAncestor, which then starts the transition 
after the current layout/measurement phase, just prior to drawing the view 
hierarchy. 




