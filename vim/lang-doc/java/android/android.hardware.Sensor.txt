*android.hardware.Sensor* *Sensor* Class representing a sensor.

public final class Sensor
  extends    |java.lang.Object|

|android.hardware.Sensor_Description|
|android.hardware.Sensor_Fields|
|android.hardware.Sensor_Constructors|
|android.hardware.Sensor_Methods|

================================================================================

*android.hardware.Sensor_Fields*
|int_android.hardware.Sensor.TYPE_ACCELEROMETER|
|int_android.hardware.Sensor.TYPE_ALL|
|int_android.hardware.Sensor.TYPE_AMBIENT_TEMPERATURE|
|int_android.hardware.Sensor.TYPE_GAME_ROTATION_VECTOR|
|int_android.hardware.Sensor.TYPE_GEOMAGNETIC_ROTATION_VECTOR|
|int_android.hardware.Sensor.TYPE_GRAVITY|
|int_android.hardware.Sensor.TYPE_GYROSCOPE|
|int_android.hardware.Sensor.TYPE_GYROSCOPE_UNCALIBRATED|
|int_android.hardware.Sensor.TYPE_LIGHT|
|int_android.hardware.Sensor.TYPE_LINEAR_ACCELERATION|
|int_android.hardware.Sensor.TYPE_MAGNETIC_FIELD|
|int_android.hardware.Sensor.TYPE_MAGNETIC_FIELD_UNCALIBRATED|
|int_android.hardware.Sensor.TYPE_ORIENTATION|
|int_android.hardware.Sensor.TYPE_PRESSURE|
|int_android.hardware.Sensor.TYPE_PROXIMITY|
|int_android.hardware.Sensor.TYPE_RELATIVE_HUMIDITY|
|int_android.hardware.Sensor.TYPE_ROTATION_VECTOR|
|int_android.hardware.Sensor.TYPE_SIGNIFICANT_MOTION|
|int_android.hardware.Sensor.TYPE_STEP_COUNTER|
|int_android.hardware.Sensor.TYPE_STEP_DETECTOR|
|int_android.hardware.Sensor.TYPE_TEMPERATURE|

*android.hardware.Sensor_Methods*
|android.hardware.Sensor.getFifoMaxEventCount()|
|android.hardware.Sensor.getFifoReservedEventCount()|
|android.hardware.Sensor.getHandle()|
|android.hardware.Sensor.getMaximumRange()|
|android.hardware.Sensor.getMinDelay()|
|android.hardware.Sensor.getName()|
|android.hardware.Sensor.getPower()|
|android.hardware.Sensor.getResolution()|
|android.hardware.Sensor.getType()|
|android.hardware.Sensor.getVendor()|
|android.hardware.Sensor.getVersion()|
|android.hardware.Sensor.toString()|

*android.hardware.Sensor_Description*

Class representing a sensor. Use (|android.hardware.SensorManager|) to get the 
list of available Sensors. 



*int_android.hardware.Sensor.TYPE_ACCELEROMETER*

A constant describing an accelerometer sensor type. See 
SensorEvent.values(|android.hardware.SensorEvent|) for more details. 


*int_android.hardware.Sensor.TYPE_ALL*

A constant describing all sensor types. 


*int_android.hardware.Sensor.TYPE_AMBIENT_TEMPERATURE*

A constant describing an ambient temperature sensor type. See 
SensorEvent.values(|android.hardware.SensorEvent|) for more details. 


*int_android.hardware.Sensor.TYPE_GAME_ROTATION_VECTOR*

A constant describing an uncalibrated rotation vector sensor type. Identical to 
(|android.hardware.Sensor|) except that it doesn't use the geomagnetic field. 
Therefore the Y axis doesn't point north, but instead to some other reference, 
that reference is allowed to drift by the same order of magnitude as the 
gyroscope drift around the Z axis. 

In the ideal case, a phone rotated and returning to the same real-world 
orientation should report the same game rotation vector (without using the 
earth's geomagnetic field). However, the orientation may drift somewhat over 
time. 

See SensorEvent.values(|android.hardware.SensorEvent|) for more details. 


*int_android.hardware.Sensor.TYPE_GEOMAGNETIC_ROTATION_VECTOR*

A constant describing the geo-magnetic rotation vector. 

Similar to (|android.hardware.Sensor|) , but using a magnetometer instead of 
using a gyroscope. This sensor uses lower power than the other rotation 
vectors, because it doesn't use the gyroscope. However, it is more noisy and 
will work best outdoors. 

See SensorEvent.values(|android.hardware.SensorEvent|) for more details. 


*int_android.hardware.Sensor.TYPE_GRAVITY*

A constant describing a gravity sensor type. See 
SensorEvent.values(|android.hardware.SensorEvent|) for more details. 


*int_android.hardware.Sensor.TYPE_GYROSCOPE*

A constant describing a gyroscope sensor type. See 
SensorEvent.values(|android.hardware.SensorEvent|) for more details. 


*int_android.hardware.Sensor.TYPE_GYROSCOPE_UNCALIBRATED*

A constant describing an uncalibrated gyroscope sensor type. Similar to 
(|android.hardware.Sensor|) but no gyro-drift compensation has been performed 
to adjust the given sensor values. However, such gyro-drift bias values are 
returned to you separately in the result (|android.hardware.SensorEvent|) so 
you may use them for custom calibrations. Factory calibration and temperature 
compensation is still applied to the rate of rotation (angular speeds). 

See SensorEvent.values(|android.hardware.SensorEvent|) for more details. 


*int_android.hardware.Sensor.TYPE_LIGHT*

A constant describing a light sensor type. See 
SensorEvent.values(|android.hardware.SensorEvent|) for more details. 


*int_android.hardware.Sensor.TYPE_LINEAR_ACCELERATION*

A constant describing a linear acceleration sensor type. See 
SensorEvent.values(|android.hardware.SensorEvent|) for more details. 


*int_android.hardware.Sensor.TYPE_MAGNETIC_FIELD*

A constant describing a magnetic field sensor type. See 
SensorEvent.values(|android.hardware.SensorEvent|) for more details. 


*int_android.hardware.Sensor.TYPE_MAGNETIC_FIELD_UNCALIBRATED*

A constant describing an uncalibrated magnetic field sensor type. 

Similar to (|android.hardware.Sensor|) but the hard iron calibration (device 
calibration due to distortions that arise from magnetized iron, steel or 
permanent magnets on the device) is not considered in the given sensor values. 
However, such hard iron bias values are returned to you separately in the 
result (|android.hardware.SensorEvent|) so you may use them for custom 
calibrations. Also, no periodic calibration is performed (i.e. there are no 
discontinuities in the data stream while using this sensor) and assumptions 
that the magnetic field is due to the Earth's poles is avoided, but factory 
calibration and temperature compensation have been performed. 

See SensorEvent.values(|android.hardware.SensorEvent|) for more details. 


*int_android.hardware.Sensor.TYPE_ORIENTATION*

A constant describing an orientation sensor type. See 
SensorEvent.values(|android.hardware.SensorEvent|) for more details. 


*int_android.hardware.Sensor.TYPE_PRESSURE*

A constant describing a pressure sensor type. See 
SensorEvent.values(|android.hardware.SensorEvent|) for more details. 


*int_android.hardware.Sensor.TYPE_PROXIMITY*

A constant describing a proximity sensor type. See 
SensorEvent.values(|android.hardware.SensorEvent|) for more details. 


*int_android.hardware.Sensor.TYPE_RELATIVE_HUMIDITY*

A constant describing a relative humidity sensor type. See 
SensorEvent.values(|android.hardware.SensorEvent|) for more details. 


*int_android.hardware.Sensor.TYPE_ROTATION_VECTOR*

A constant describing a rotation vector sensor type. See 
SensorEvent.values(|android.hardware.SensorEvent|) for more details. 


*int_android.hardware.Sensor.TYPE_SIGNIFICANT_MOTION*

A constant describing a significant motion trigger sensor. 

It triggers when an event occurs and then automatically disables itself. The 
sensor continues to operate while the device is asleep and will automatically 
wake the device to notify when significant motion is detected. The application 
does not need to hold any wake locks for this sensor to trigger. See 
(|android.hardware.TriggerEvent|) for more details. 


*int_android.hardware.Sensor.TYPE_STEP_COUNTER*

A constant describing a step counter sensor. 

A sensor of this type returns the number of steps taken by the user since the 
last reboot while activated. The value is returned as a float (with the 
fractional part set to zero) and is reset to zero only on a system reboot. The 
timestamp of the event is set to the time when the first step for that event 
was taken. This sensor is implemented in hardware and is expected to be low 
power. 

See SensorEvent.values(|android.hardware.SensorEvent|) for more details. 


*int_android.hardware.Sensor.TYPE_STEP_DETECTOR*

A constant describing a step detector sensor. 

A sensor of this type triggers an event each time a step is taken by the user. 
The only allowed value to return is 1.0 and an event is generated for each 
step. Like with any other event, the timestamp indicates when the event (here 
the step) occurred, this corresponds to when the foot hit the ground, 
generating a high variation in acceleration. 

See SensorEvent.values(|android.hardware.SensorEvent|) for more details. 


*int_android.hardware.Sensor.TYPE_TEMPERATURE*

A constant describing a temperature sensor type 



*android.hardware.Sensor.getFifoMaxEventCount()*

public int getFifoMaxEventCount()





    Returns: Maximum number of events of this sensor that could be batched. If this value is 
             zero it indicates that batch mode is not supported for this 
             sensor. If other applications registered to batched sensors, the 
             actual number of events that can be batched might be smaller 
             because the hardware FiFo will be partially used to batch the 
             other sensors. 

*android.hardware.Sensor.getFifoReservedEventCount()*

public int getFifoReservedEventCount()





    Returns: Number of events reserved for this sensor in the batch mode FIFO. This gives a 
             guarantee on the minimum number of events that can be batched. 

*android.hardware.Sensor.getHandle()*

public int getHandle()





*android.hardware.Sensor.getMaximumRange()*

public float getMaximumRange()





    Returns: maximum range of the sensor in the sensor's unit. 

*android.hardware.Sensor.getMinDelay()*

public int getMinDelay()





    Returns: the minimum delay allowed between two events in microsecond or zero if this 
             sensor only returns a value when the data it's measuring changes. 

*android.hardware.Sensor.getName()*

public |java.lang.String| getName()





    Returns: name string of the sensor. 

*android.hardware.Sensor.getPower()*

public float getPower()





    Returns: the power in mA used by this sensor while in use 

*android.hardware.Sensor.getResolution()*

public float getResolution()





    Returns: resolution of the sensor in the sensor's unit. 

*android.hardware.Sensor.getType()*

public int getType()





    Returns: generic type of this sensor. 

*android.hardware.Sensor.getVendor()*

public |java.lang.String| getVendor()





    Returns: vendor string of this sensor. 

*android.hardware.Sensor.getVersion()*

public int getVersion()





    Returns: version of the sensor's module. 

*android.hardware.Sensor.toString()*

public |java.lang.String| toString()






