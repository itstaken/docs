*android.net.sip.SipAudioCall* *SipAudioCall* 

public class SipAudioCall
  extends    |java.lang.Object|

|android.net.sip.SipAudioCall_Description|
|android.net.sip.SipAudioCall_Fields|
|android.net.sip.SipAudioCall_Constructors|
|android.net.sip.SipAudioCall_Methods|

================================================================================

*android.net.sip.SipAudioCall_Constructors*
|android.net.sip.SipAudioCall(Context,SipProfile)|

*android.net.sip.SipAudioCall_Methods*
|android.net.sip.SipAudioCall.answerCall(int)|
|android.net.sip.SipAudioCall.attachCall(SipSession,String)|
|android.net.sip.SipAudioCall.close()|
|android.net.sip.SipAudioCall.continueCall(int)|
|android.net.sip.SipAudioCall.endCall()|
|android.net.sip.SipAudioCall.getLocalProfile()|
|android.net.sip.SipAudioCall.getPeerProfile()|
|android.net.sip.SipAudioCall.getState()|
|android.net.sip.SipAudioCall.holdCall(int)|
|android.net.sip.SipAudioCall.isInCall()|
|android.net.sip.SipAudioCall.isMuted()|
|android.net.sip.SipAudioCall.isOnHold()|
|android.net.sip.SipAudioCall.makeCall(SipProfile,SipSession,int)|
|android.net.sip.SipAudioCall.sendDtmf(int)|
|android.net.sip.SipAudioCall.sendDtmf(int,Message)|
|android.net.sip.SipAudioCall.setListener(SipAudioCall.Listener)|
|android.net.sip.SipAudioCall.setListener(SipAudioCall.Listener,boolean)|
|android.net.sip.SipAudioCall.setSpeakerMode(boolean)|
|android.net.sip.SipAudioCall.startAudio()|
|android.net.sip.SipAudioCall.toggleMute()|

*android.net.sip.SipAudioCall_Description*





*android.net.sip.SipAudioCall(Context,SipProfile)*

public SipAudioCall(
  android.content.Context context,
  android.net.sip.SipProfile localProfile)




*android.net.sip.SipAudioCall.answerCall(int)*

public void answerCall(int timeout)
  throws |android.net.sip.SipException|
         




*android.net.sip.SipAudioCall.attachCall(SipSession,String)*

public void attachCall(
  android.net.sip.SipSession session,
  java.lang.String sessionDescription)
  throws |android.net.sip.SipException|
         




*android.net.sip.SipAudioCall.close()*

public void close()





*android.net.sip.SipAudioCall.continueCall(int)*

public void continueCall(int timeout)
  throws |android.net.sip.SipException|
         




*android.net.sip.SipAudioCall.endCall()*

public void endCall()
  throws |android.net.sip.SipException|
         




*android.net.sip.SipAudioCall.getLocalProfile()*

public |android.net.sip.SipProfile| getLocalProfile()





*android.net.sip.SipAudioCall.getPeerProfile()*

public |android.net.sip.SipProfile| getPeerProfile()





*android.net.sip.SipAudioCall.getState()*

public int getState()





*android.net.sip.SipAudioCall.holdCall(int)*

public void holdCall(int timeout)
  throws |android.net.sip.SipException|
         




*android.net.sip.SipAudioCall.isInCall()*

public boolean isInCall()





*android.net.sip.SipAudioCall.isMuted()*

public boolean isMuted()





*android.net.sip.SipAudioCall.isOnHold()*

public boolean isOnHold()





*android.net.sip.SipAudioCall.makeCall(SipProfile,SipSession,int)*

public void makeCall(
  android.net.sip.SipProfile peerProfile,
  android.net.sip.SipSession sipSession,
  int timeout)
  throws |android.net.sip.SipException|
         




*android.net.sip.SipAudioCall.sendDtmf(int)*

public void sendDtmf(int code)





*android.net.sip.SipAudioCall.sendDtmf(int,Message)*

public void sendDtmf(
  int code,
  android.os.Message result)





*android.net.sip.SipAudioCall.setListener(SipAudioCall.Listener)*

public void setListener(android.net.sip.SipAudioCall.Listener listener)





*android.net.sip.SipAudioCall.setListener(SipAudioCall.Listener,boolean)*

public void setListener(
  android.net.sip.SipAudioCall.Listener listener,
  boolean callbackImmediately)





*android.net.sip.SipAudioCall.setSpeakerMode(boolean)*

public void setSpeakerMode(boolean speakerMode)





*android.net.sip.SipAudioCall.startAudio()*

public void startAudio()





*android.net.sip.SipAudioCall.toggleMute()*

public void toggleMute()






