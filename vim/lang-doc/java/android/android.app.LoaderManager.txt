*android.app.LoaderManager* *LoaderManager* Interface associated with anActivity

public abstract class LoaderManager
  extends    |java.lang.Object|

|android.app.LoaderManager_Description|
|android.app.LoaderManager_Fields|
|android.app.LoaderManager_Constructors|
|android.app.LoaderManager_Methods|

================================================================================

*android.app.LoaderManager_Constructors*
|android.app.LoaderManager()|

*android.app.LoaderManager_Methods*
|android.app.LoaderManager.destroyLoader(int)|Stops and removes the loader with
|android.app.LoaderManager.dump(String,FileDescriptor,PrintWriter,String[])|Pri
|android.app.LoaderManager.enableDebugLogging(boolean)|Control whether the fram
|android.app.LoaderManager.getLoader(int)|Return the Loader with the given id o
|android.app.LoaderManager.initLoader(int,Bundle,LoaderManager.LoaderCallbacks<D>)|
|android.app.LoaderManager.restartLoader(int,Bundle,LoaderManager.LoaderCallbacks<D>)|

*android.app.LoaderManager_Description*

Interface associated with an (|android.app.Activity|) or 
(|android.app.Fragment|) for managing one or more (|android.content.Loader|) 
instances associated with it. This helps an application manage longer-running 
operations in conjunction with the Activity or Fragment lifecycle; the most 
common use of this is with a (|android.content.CursorLoader|) , however 
applications are free to write their own loaders for loading other types of 
data. 

While the LoaderManager API was introduced in 
(|android.os.Build.VERSION_CODES|) , a version of the API at is also available 
for use on older platforms through (|android.support.v4.app.FragmentActivity|) 
. See the blog post 

Fragments For All for more details. 

As an example, here is the full implementation of a (|android.app.Fragment|) 
that displays a (|android.widget.ListView|) containing the results of a query 
against the contacts content provider. It uses a 
(|android.content.CursorLoader|) to manage the query on the 
provider.development/samples/ApiDemos/src/com/example/android/apis/app/LoaderCursor.java
fragment_cursor Developer Guides For more information about using loaders, read 
the <a href="guide/topics/fundamentals/loaders.html">Loaders developer guide. 



*android.app.LoaderManager()*

public LoaderManager()




*android.app.LoaderManager.destroyLoader(int)*

public abstract void destroyLoader(int id)

Stops and removes the loader with the given ID. If this loader had previously 
reported data to the client through 
(|android.app.LoaderManager.LoaderCallbacks|) , a call will be made to 
(|android.app.LoaderManager.LoaderCallbacks|) . 



*android.app.LoaderManager.dump(String,FileDescriptor,PrintWriter,String[])*

public abstract void dump(
  java.lang.String prefix,
  java.io.FileDescriptor fd,
  java.io.PrintWriter writer,
  java.lang.String[] args)

Print the LoaderManager's state into the given stream. 


    prefix - Text to print at the front of each line. 
    fd - The raw file descriptor that the dump is being sent to. 
    writer - A PrintWriter to which the dump is to be set. 
    args - Additional arguments to the dump request. 

*android.app.LoaderManager.enableDebugLogging(boolean)*

public static void enableDebugLogging(boolean enabled)

Control whether the framework's internal loader manager debugging logs are 
turned on. If enabled, you will see output in logcat as the framework performs 
loader operations. 



*android.app.LoaderManager.getLoader(int)*

public abstract |android.content.Loader|<D> getLoader(int id)

Return the Loader with the given id or null if no matching Loader is found. 



*android.app.LoaderManager.initLoader(int,Bundle,LoaderManager.LoaderCallbacks<D>)*

public abstract |android.content.Loader|<D> initLoader(
  int id,
  android.os.Bundle args,
  android.app.LoaderManager.LoaderCallbacks<D> callback)

Ensures a loader is initialized and active. If the loader doesn't already 
exist, one is created and (if the activity/fragment is currently started) 
starts the loader. Otherwise the last created loader is re-used. 

In either case, the given callback is associated with the loader, and will be 
called as the loader state changes. If at the point of call the caller is in 
its started state, and the requested loader already exists and has generated 
its data, then callback (|android.app.LoaderManager.LoaderCallbacks|) will be 
called immediately (inside of this function), so you must be prepared for this 
to happen. 


    id - A unique identifier for this loader. Can be whatever you want. Identifiers are 
       scoped to a particular LoaderManager instance. 
    args - Optional arguments to supply to the loader at construction. If a loader already 
       exists (a new one does not need to be created), this parameter will be 
       ignored and the last arguments continue to be used. 
    callback - Interface the LoaderManager will call to report about changes in the state of 
       the loader. Required. 

*android.app.LoaderManager.restartLoader(int,Bundle,LoaderManager.LoaderCallbacks<D>)*

public abstract |android.content.Loader|<D> restartLoader(
  int id,
  android.os.Bundle args,
  android.app.LoaderManager.LoaderCallbacks<D> callback)

Starts a new or restarts an existing (|android.content.Loader|) in this 
manager, registers the callbacks to it, and (if the activity/fragment is 
currently started) starts loading it. If a loader with the same id has 
previously been started it will automatically be destroyed when the new loader 
completes its work. The callback will be delivered before the old loader is 
destroyed. 


    id - A unique identifier for this loader. Can be whatever you want. Identifiers are 
       scoped to a particular LoaderManager instance. 
    args - Optional arguments to supply to the loader at construction. 
    callback - Interface the LoaderManager will call to report about changes in the state of 
       the loader. Required. 


