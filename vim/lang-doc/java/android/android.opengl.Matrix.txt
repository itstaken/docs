*android.opengl.Matrix* *Matrix* 

public class Matrix
  extends    |java.lang.Object|

|android.opengl.Matrix_Description|
|android.opengl.Matrix_Fields|
|android.opengl.Matrix_Constructors|
|android.opengl.Matrix_Methods|

================================================================================

*android.opengl.Matrix_Constructors*
|android.opengl.Matrix()|

*android.opengl.Matrix_Methods*
|android.opengl.Matrix.frustumM(float[],int,float,float,float,float,float,float)|
|android.opengl.Matrix.invertM(float[],int,float[],int)|
|android.opengl.Matrix.length(float,float,float)|
|android.opengl.Matrix.multiplyMM(float[],int,float[],int,float[],int)|
|android.opengl.Matrix.multiplyMV(float[],int,float[],int,float[],int)|
|android.opengl.Matrix.orthoM(float[],int,float,float,float,float,float,float)|
|android.opengl.Matrix.perspectiveM(float[],int,float,float,float,float)|
|android.opengl.Matrix.rotateM(float[],int,float[],int,float,float,float,float)|
|android.opengl.Matrix.rotateM(float[],int,float,float,float,float)|
|android.opengl.Matrix.scaleM(float[],int,float[],int,float,float,float)|
|android.opengl.Matrix.scaleM(float[],int,float,float,float)|
|android.opengl.Matrix.setIdentityM(float[],int)|
|android.opengl.Matrix.setLookAtM(float[],int,float,float,float,float,float,float,float,float,float)|
|android.opengl.Matrix.setRotateEulerM(float[],int,float,float,float)|
|android.opengl.Matrix.setRotateM(float[],int,float,float,float,float)|
|android.opengl.Matrix.translateM(float[],int,float[],int,float,float,float)|
|android.opengl.Matrix.translateM(float[],int,float,float,float)|
|android.opengl.Matrix.transposeM(float[],int,float[],int)|

*android.opengl.Matrix_Description*





*android.opengl.Matrix()*

public Matrix()




*android.opengl.Matrix.frustumM(float[],int,float,float,float,float,float,float)*

public static void frustumM(
  float[] m,
  int offset,
  float left,
  float right,
  float bottom,
  float top,
  float near,
  float far)





*android.opengl.Matrix.invertM(float[],int,float[],int)*

public static boolean invertM(
  float[] mInv,
  int mInvOffset,
  float[] m,
  int mOffset)





*android.opengl.Matrix.length(float,float,float)*

public static float length(
  float x,
  float y,
  float z)





*android.opengl.Matrix.multiplyMM(float[],int,float[],int,float[],int)*

public static native void multiplyMM(
  float[] result,
  int resultOffset,
  float[] lhs,
  int lhsOffset,
  float[] rhs,
  int rhsOffset)





*android.opengl.Matrix.multiplyMV(float[],int,float[],int,float[],int)*

public static native void multiplyMV(
  float[] resultVec,
  int resultVecOffset,
  float[] lhsMat,
  int lhsMatOffset,
  float[] rhsVec,
  int rhsVecOffset)





*android.opengl.Matrix.orthoM(float[],int,float,float,float,float,float,float)*

public static void orthoM(
  float[] m,
  int mOffset,
  float left,
  float right,
  float bottom,
  float top,
  float near,
  float far)





*android.opengl.Matrix.perspectiveM(float[],int,float,float,float,float)*

public static void perspectiveM(
  float[] m,
  int offset,
  float fovy,
  float aspect,
  float zNear,
  float zFar)





*android.opengl.Matrix.rotateM(float[],int,float[],int,float,float,float,float)*

public static void rotateM(
  float[] rm,
  int rmOffset,
  float[] m,
  int mOffset,
  float a,
  float x,
  float y,
  float z)





*android.opengl.Matrix.rotateM(float[],int,float,float,float,float)*

public static void rotateM(
  float[] m,
  int mOffset,
  float a,
  float x,
  float y,
  float z)





*android.opengl.Matrix.scaleM(float[],int,float[],int,float,float,float)*

public static void scaleM(
  float[] sm,
  int smOffset,
  float[] m,
  int mOffset,
  float x,
  float y,
  float z)





*android.opengl.Matrix.scaleM(float[],int,float,float,float)*

public static void scaleM(
  float[] m,
  int mOffset,
  float x,
  float y,
  float z)





*android.opengl.Matrix.setIdentityM(float[],int)*

public static void setIdentityM(
  float[] sm,
  int smOffset)





*android.opengl.Matrix.setLookAtM(float[],int,float,float,float,float,float,float,float,float,float)*

public static void setLookAtM(
  float[] rm,
  int rmOffset,
  float eyeX,
  float eyeY,
  float eyeZ,
  float centerX,
  float centerY,
  float centerZ,
  float upX,
  float upY,
  float upZ)





*android.opengl.Matrix.setRotateEulerM(float[],int,float,float,float)*

public static void setRotateEulerM(
  float[] rm,
  int rmOffset,
  float x,
  float y,
  float z)





*android.opengl.Matrix.setRotateM(float[],int,float,float,float,float)*

public static void setRotateM(
  float[] rm,
  int rmOffset,
  float a,
  float x,
  float y,
  float z)





*android.opengl.Matrix.translateM(float[],int,float[],int,float,float,float)*

public static void translateM(
  float[] tm,
  int tmOffset,
  float[] m,
  int mOffset,
  float x,
  float y,
  float z)





*android.opengl.Matrix.translateM(float[],int,float,float,float)*

public static void translateM(
  float[] m,
  int mOffset,
  float x,
  float y,
  float z)





*android.opengl.Matrix.transposeM(float[],int,float[],int)*

public static void transposeM(
  float[] mTrans,
  int mTransOffset,
  float[] m,
  int mOffset)






