*android.util.SparseIntArray* *SparseIntArray* SparseIntArrays map integers to i

public class SparseIntArray
  extends    |java.lang.Object|
  implements |java.lang.Cloneable|

|android.util.SparseIntArray_Description|
|android.util.SparseIntArray_Fields|
|android.util.SparseIntArray_Constructors|
|android.util.SparseIntArray_Methods|

================================================================================

*android.util.SparseIntArray_Constructors*
|android.util.SparseIntArray()|Creates a new SparseIntArray containing no mappi
|android.util.SparseIntArray(int)|Creates a new SparseIntArray containing no ma

*android.util.SparseIntArray_Methods*
|android.util.SparseIntArray.append(int,int)|Puts a key/value pair into the arr
|android.util.SparseIntArray.clear()|Removes all key-value mappings from this S
|android.util.SparseIntArray.clone()|
|android.util.SparseIntArray.delete(int)|Removes the mapping from the specified
|android.util.SparseIntArray.get(int)|Gets the int mapped from the specified ke
|android.util.SparseIntArray.get(int,int)|Gets the int mapped from the specifie
|android.util.SparseIntArray.indexOfKey(int)|Returns the index for which#keyAtw
|android.util.SparseIntArray.indexOfValue(int)|Returns an index for which#value
|android.util.SparseIntArray.keyAt(int)|Given an index in the range 0...size()-
|android.util.SparseIntArray.put(int,int)|Adds a mapping from the specified key
|android.util.SparseIntArray.removeAt(int)|Removes the mapping at the given ind
|android.util.SparseIntArray.size()|Returns the number of key-value mappings th
|android.util.SparseIntArray.toString()|
|android.util.SparseIntArray.valueAt(int)|Given an index in the range 0...size(

*android.util.SparseIntArray_Description*

SparseIntArrays map integers to integers. Unlike a normal array of integers, 
there can be gaps in the indices. It is intended to be more memory efficient 
than using a HashMap to map Integers to Integers, both because it avoids 
auto-boxing keys and values and its data structure doesn't rely on an extra 
entry object for each mapping. 

Note that this container keeps its mappings in an array data structure, using a 
binary search to find keys. The implementation is not intended to be 
appropriate for data structures that may contain large numbers of items. It is 
generally slower than a traditional HashMap, since lookups require a binary 
search and adds and removes require inserting and deleting entries in the 
array. For containers holding up to hundreds of items, the performance 
difference is not significant, less than 50%. 

It is possible to iterate over the items in this container using 
(|android.util.SparseIntArray|) and (|android.util.SparseIntArray|) . Iterating 
over the keys using keyAt(int) with ascending values of the index will return 
the keys in ascending order, or the values corresponding to the keys in 
ascending order in the case of valueAt(int). 



*android.util.SparseIntArray()*

public SparseIntArray()

Creates a new SparseIntArray containing no mappings. 


*android.util.SparseIntArray(int)*

public SparseIntArray(int initialCapacity)

Creates a new SparseIntArray containing no mappings that will not require any 
additional memory allocation to store the specified number of mappings. If you 
supply an initial capacity of 0, the sparse array will be initialized with a 
light-weight representation not requiring any additional array allocations. 


*android.util.SparseIntArray.append(int,int)*

public void append(
  int key,
  int value)

Puts a key/value pair into the array, optimizing for the case where the key is 
greater than all existing keys in the array. 



*android.util.SparseIntArray.clear()*

public void clear()

Removes all key-value mappings from this SparseIntArray. 



*android.util.SparseIntArray.clone()*

public |android.util.SparseIntArray| clone()





*android.util.SparseIntArray.delete(int)*

public void delete(int key)

Removes the mapping from the specified key, if there was any. 



*android.util.SparseIntArray.get(int)*

public int get(int key)

Gets the int mapped from the specified key, or 0 if no such mapping has been 
made. 



*android.util.SparseIntArray.get(int,int)*

public int get(
  int key,
  int valueIfKeyNotFound)

Gets the int mapped from the specified key, or the specified value if no such 
mapping has been made. 



*android.util.SparseIntArray.indexOfKey(int)*

public int indexOfKey(int key)

Returns the index for which (|android.util.SparseIntArray|) would return the 
specified key, or a negative number if the specified key is not mapped. 



*android.util.SparseIntArray.indexOfValue(int)*

public int indexOfValue(int value)

Returns an index for which (|android.util.SparseIntArray|) would return the 
specified key, or a negative number if no keys map to the specified value. 
Beware that this is a linear search, unlike lookups by key, and that multiple 
keys can map to the same value and this will find only one of them. 



*android.util.SparseIntArray.keyAt(int)*

public int keyAt(int index)

Given an index in the range 0...size()-1, returns the key from the indexth 
key-value mapping that this SparseIntArray stores. 

The keys corresponding to indices in ascending order are guaranteed to be in 
ascending order, e.g., keyAt(0) will return the smallest key and 
keyAt(size()-1) will return the largest key. 



*android.util.SparseIntArray.put(int,int)*

public void put(
  int key,
  int value)

Adds a mapping from the specified key to the specified value, replacing the 
previous mapping from the specified key if there was one. 



*android.util.SparseIntArray.removeAt(int)*

public void removeAt(int index)

Removes the mapping at the given index. 



*android.util.SparseIntArray.size()*

public int size()

Returns the number of key-value mappings that this SparseIntArray currently 
stores. 



*android.util.SparseIntArray.toString()*

public |java.lang.String| toString()

This implementation composes a string by iterating over its mappings. 



*android.util.SparseIntArray.valueAt(int)*

public int valueAt(int index)

Given an index in the range 0...size()-1, returns the value from the indexth 
key-value mapping that this SparseIntArray stores. 

The values corresponding to indices in ascending order are guaranteed to be 
associated with keys in ascending order, e.g., valueAt(0) will return the value 
associated with the smallest key and valueAt(size()-1) will return the value 
associated with the largest key. 




