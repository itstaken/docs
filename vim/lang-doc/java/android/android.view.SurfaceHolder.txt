*android.view.SurfaceHolder* *SurfaceHolder* Abstract interface to someone holdi

public interface interface SurfaceHolder


|android.view.SurfaceHolder_Description|
|android.view.SurfaceHolder_Fields|
|android.view.SurfaceHolder_Constructors|
|android.view.SurfaceHolder_Methods|

================================================================================

*android.view.SurfaceHolder_Fields*
|int_android.view.SurfaceHolder.SURFACE_TYPE_GPU|
|int_android.view.SurfaceHolder.SURFACE_TYPE_HARDWARE|
|int_android.view.SurfaceHolder.SURFACE_TYPE_NORMAL|
|int_android.view.SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS|

*android.view.SurfaceHolder_Methods*
|android.view.SurfaceHolder.addCallback(SurfaceHolder.Callback)|Add a Callback 
|android.view.SurfaceHolder.getSurface()|Direct access to the surface object.
|android.view.SurfaceHolder.getSurfaceFrame()|Retrieve the current size of the 
|android.view.SurfaceHolder.isCreating()|Use this method to find out if the sur
|android.view.SurfaceHolder.lockCanvas()|Start editing the pixels in the surfac
|android.view.SurfaceHolder.lockCanvas(Rect)|Just like#lockCanvas()but allows s
|android.view.SurfaceHolder.removeCallback(SurfaceHolder.Callback)|Removes a pr
|android.view.SurfaceHolder.setFixedSize(int,int)|Make the surface a fixed size
|android.view.SurfaceHolder.setFormat(int)|Set the desired PixelFormat of the s
|android.view.SurfaceHolder.setKeepScreenOn(boolean)|Enable or disable option t
|android.view.SurfaceHolder.setSizeFromLayout()|Allow the surface to resized ba
|android.view.SurfaceHolder.setType(int)|Sets the surface's type.
|android.view.SurfaceHolder.unlockCanvasAndPost(Canvas)|Finish editing pixels i

*android.view.SurfaceHolder_Description*

Abstract interface to someone holding a display surface. Allows you to control 
the surface size and format, edit the pixels in the surface, and monitor 
changes to the surface. This interface is typically available through the 
(|android.view.SurfaceView|) class. 

When using this interface from a thread other than the one running its 
(|android.view.SurfaceView|) , you will want to carefully read the methods 
(|android.view.SurfaceHolder|) and 
Callback.surfaceCreated()(|android.view.SurfaceHolder.Callback|) . 



*int_android.view.SurfaceHolder.SURFACE_TYPE_GPU*




*int_android.view.SurfaceHolder.SURFACE_TYPE_HARDWARE*




*int_android.view.SurfaceHolder.SURFACE_TYPE_NORMAL*




*int_android.view.SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS*





*android.view.SurfaceHolder.addCallback(SurfaceHolder.Callback)*

public void addCallback(android.view.SurfaceHolder.Callback callback)

Add a Callback interface for this holder. There can several Callback interfaces 
associated with a holder. 


    callback - The new Callback interface. 

*android.view.SurfaceHolder.getSurface()*

public |android.view.Surface| getSurface()

Direct access to the surface object. The Surface may not always be available -- 
for example when using a (|android.view.SurfaceView|) the holder's Surface is 
not created until the view has been attached to the window manager and 
performed a layout in order to determine the dimensions and screen position of 
the Surface. You will thus usually need to implement 
Callback.surfaceCreated(|android.view.SurfaceHolder.Callback|) to find out when 
the Surface is available for use. 

Note that if you directly access the Surface from another thread, it is 
critical that you correctly implement 
Callback.surfaceCreated(|android.view.SurfaceHolder.Callback|) and 
Callback.surfaceDestroyed(|android.view.SurfaceHolder.Callback|) to ensure that 
thread only accesses the Surface while it is valid, and that the Surface does 
not get destroyed while the thread is using it. 

This method is intended to be used by frameworks which often need direct access 
to the Surface object (usually to pass it to native code). 



    Returns: Surface The surface. 

*android.view.SurfaceHolder.getSurfaceFrame()*

public Rect getSurfaceFrame()

Retrieve the current size of the surface. Note: do not modify the returned 
Rect. This is only safe to call from the thread of (|android.view.SurfaceView|) 
's window, or while inside of (|android.view.SurfaceHolder|) . 



    Returns: Rect The surface's dimensions. The left and top are always 0. 

*android.view.SurfaceHolder.isCreating()*

public boolean isCreating()

Use this method to find out if the surface is in the process of being created 
from Callback methods. This is intended to be used with 
(|android.view.SurfaceHolder.Callback|) . 



    Returns: true if the surface is in the process of being created. 

*android.view.SurfaceHolder.lockCanvas()*

public Canvas lockCanvas()

Start editing the pixels in the surface. The returned Canvas can be used to 
draw into the surface's bitmap. A null is returned if the surface has not been 
created or otherwise cannot be edited. You will usually need to implement 
Callback.surfaceCreated(|android.view.SurfaceHolder.Callback|) to find out when 
the Surface is available for use. 

The content of the Surface is never preserved between unlockCanvas() and 
lockCanvas(), for this reason, every pixel within the Surface area must be 
written. The only exception to this rule is when a dirty rectangle is 
specified, in which case, non-dirty pixels will be preserved. 

If you call this repeatedly when the Surface is not ready (before 
Callback.surfaceCreated(|android.view.SurfaceHolder.Callback|) or after 
Callback.surfaceDestroyed(|android.view.SurfaceHolder.Callback|) ), your calls 
will be throttled to a slow rate in order to avoid consuming CPU. 

If null is not returned, this function internally holds a lock until the 
corresponding (|android.view.SurfaceHolder|) call, preventing 
(|android.view.SurfaceView|) from creating, destroying, or modifying the 
surface while it is being drawn. This can be more convenient than accessing the 
Surface directly, as you do not need to do special synchronization with a 
drawing thread in 
Callback.surfaceDestroyed(|android.view.SurfaceHolder.Callback|) . 



    Returns: Canvas Use to draw into the surface. 

*android.view.SurfaceHolder.lockCanvas(Rect)*

public Canvas lockCanvas(Rect dirty)

Just like (|android.view.SurfaceHolder|) but allows specification of a dirty 
rectangle. Every pixel within that rectangle must be written; however pixels 
outside the dirty rectangle will be preserved by the next call to lockCanvas(). 


    dirty - Area of the Surface that will be modified. 

    Returns: Canvas Use to draw into the surface. 

*android.view.SurfaceHolder.removeCallback(SurfaceHolder.Callback)*

public void removeCallback(android.view.SurfaceHolder.Callback callback)

Removes a previously added Callback interface from this holder. 


    callback - The Callback interface to remove. 

*android.view.SurfaceHolder.setFixedSize(int,int)*

public void setFixedSize(
  int width,
  int height)

Make the surface a fixed size. It will never change from this size. When 
working with a (|android.view.SurfaceView|) , this must be called from the same 
thread running the SurfaceView's window. 


    width - The surface's width. 
    height - The surface's height. 

*android.view.SurfaceHolder.setFormat(int)*

public void setFormat(int format)

Set the desired PixelFormat of the surface. The default is OPAQUE. When working 
with a (|android.view.SurfaceView|) , this must be called from the same thread 
running the SurfaceView's window. 


    format - A constant from PixelFormat. 

*android.view.SurfaceHolder.setKeepScreenOn(boolean)*

public void setKeepScreenOn(boolean screenOn)

Enable or disable option to keep the screen turned on while this surface is 
displayed. The default is false, allowing it to turn off. This is safe to call 
from any thread. 


    screenOn - Set to true to force the screen to stay on, false to allow it to turn off. 

*android.view.SurfaceHolder.setSizeFromLayout()*

public void setSizeFromLayout()

Allow the surface to resized based on layout of its container (this is the 
default). When this is enabled, you should monitor 
(|android.view.SurfaceHolder.Callback|) for changes to the size of the surface. 
When working with a (|android.view.SurfaceView|) , this must be called from the 
same thread running the SurfaceView's window. 



*android.view.SurfaceHolder.setType(int)*

public void setType(int type)

Sets the surface's type. 

    Deprecated: this is ignored, this value is set automatically when needed.


*android.view.SurfaceHolder.unlockCanvasAndPost(Canvas)*

public void unlockCanvasAndPost(Canvas canvas)

Finish editing pixels in the surface. After this call, the surface's current 
pixels will be shown on the screen, but its content is lost, in particular 
there is no guarantee that the content of the Surface will remain unchanged 
when lockCanvas() is called again. 


    canvas - The Canvas previously returned by lockCanvas(). 


