*android.webkit.CookieManager* *CookieManager* Manages the cookies used by an ap

public class CookieManager
  extends    |java.lang.Object|

|android.webkit.CookieManager_Description|
|android.webkit.CookieManager_Fields|
|android.webkit.CookieManager_Constructors|
|android.webkit.CookieManager_Methods|

================================================================================

*android.webkit.CookieManager_Constructors*
|android.webkit.CookieManager()|

*android.webkit.CookieManager_Methods*
|android.webkit.CookieManager.acceptCookie()|Gets whether the application'sWebV
|android.webkit.CookieManager.allowFileSchemeCookies()|Gets whether the applica
|android.webkit.CookieManager.allowFileSchemeCookiesImpl()|Implements#allowFile
|android.webkit.CookieManager.clone()|
|android.webkit.CookieManager.flushCookieStore()|Flushes all cookies managed by
|android.webkit.CookieManager.getCookie(String)|Gets the cookies for the given 
|android.webkit.CookieManager.getCookie(String,boolean)|See#getCookie(String).
|android.webkit.CookieManager.getCookie(WebAddress)|Gets cookie(s) for a given 
|android.webkit.CookieManager.getInstance()|Gets the singleton CookieManager in
|android.webkit.CookieManager.hasCookies()|Gets whether there are stored cookie
|android.webkit.CookieManager.hasCookies(boolean)|See#hasCookies().
|android.webkit.CookieManager.removeAllCookie()|Removes all cookies.
|android.webkit.CookieManager.removeExpiredCookie()|Removes all expired cookies
|android.webkit.CookieManager.removeSessionCookie()|Removes all session cookies
|android.webkit.CookieManager.setAcceptCookie(boolean)|Sets whether the applica
|android.webkit.CookieManager.setAcceptFileSchemeCookies(boolean)|Sets whether 
|android.webkit.CookieManager.setAcceptFileSchemeCookiesImpl(boolean)|Implement
|android.webkit.CookieManager.setCookie(String,String)|Sets a cookie for the gi

*android.webkit.CookieManager_Description*

Manages the cookies used by an application's (|android.webkit.WebView|) 
instances. Cookies are manipulated according to RFC2109. 



*android.webkit.CookieManager()*

protected CookieManager()




*android.webkit.CookieManager.acceptCookie()*

public synchronized boolean acceptCookie()

Gets whether the application's (|android.webkit.WebView|) instances send and 
accept cookies. 



    Returns: true if {@link WebView} instances send and accept cookies 

*android.webkit.CookieManager.allowFileSchemeCookies()*

public static boolean allowFileSchemeCookies()

Gets whether the application's (|android.webkit.WebView|) instances send and 
accept cookies for file scheme URLs. 



    Returns: true if {@link WebView} instances send and accept cookies for file scheme URLs 

*android.webkit.CookieManager.allowFileSchemeCookiesImpl()*

protected boolean allowFileSchemeCookiesImpl()

Implements (|android.webkit.CookieManager|) . 



*android.webkit.CookieManager.clone()*

protected |java.lang.Object| clone()
  throws |java.lang.CloneNotSupportedException|
         




*android.webkit.CookieManager.flushCookieStore()*

protected void flushCookieStore()

Flushes all cookies managed by the Chrome HTTP stack to flash. 



*android.webkit.CookieManager.getCookie(String)*

public |java.lang.String| getCookie(java.lang.String url)

Gets the cookies for the given URL. 


    url - the URL for which the cookies are requested 

    Returns: value the cookies as a string, using the format of the 'Cookie' HTTP request 
             header 

*android.webkit.CookieManager.getCookie(String,boolean)*

public |java.lang.String| getCookie(
  java.lang.String url,
  boolean privateBrowsing)

See (|android.webkit.CookieManager|) . 


    url - the URL for which the cookies are requested 
    privateBrowsing - whether to use the private browsing cookie jar 

    Returns: value the cookies as a string, using the format of the 'Cookie' HTTP request 
             header 

*android.webkit.CookieManager.getCookie(WebAddress)*

public synchronized |java.lang.String| getCookie(android.net.WebAddress uri)

Gets cookie(s) for a given uri so that it can be set to "cookie:" in http 
request header. 


    uri - the WebAddress for which the cookies are requested 

    Returns: value the cookies as a string, using the format of the 'Cookie' HTTP request 
             header 

*android.webkit.CookieManager.getInstance()*

public static synchronized |android.webkit.CookieManager| getInstance()

Gets the singleton CookieManager instance. If this method is used before the 
application instantiates a (|android.webkit.WebView|) instance, 
CookieSyncManager.createInstance(Context)(|android.webkit.CookieSyncManager|) 
must be called first. 



    Returns: the singleton CookieManager instance 

*android.webkit.CookieManager.hasCookies()*

public synchronized boolean hasCookies()

Gets whether there are stored cookies. 



    Returns: true if there are stored cookies 

*android.webkit.CookieManager.hasCookies(boolean)*

public synchronized boolean hasCookies(boolean privateBrowsing)

See (|android.webkit.CookieManager|) . 


    privateBrowsing - whether to use the private browsing cookie jar 

*android.webkit.CookieManager.removeAllCookie()*

public void removeAllCookie()

Removes all cookies. 



*android.webkit.CookieManager.removeExpiredCookie()*

public void removeExpiredCookie()

Removes all expired cookies. 



*android.webkit.CookieManager.removeSessionCookie()*

public void removeSessionCookie()

Removes all session cookies, which are cookies without an expiration date. 



*android.webkit.CookieManager.setAcceptCookie(boolean)*

public synchronized void setAcceptCookie(boolean accept)

Sets whether the application's (|android.webkit.WebView|) instances should send 
and accept cookies. 


    accept - whether {@link WebView} instances should send and accept cookies 

*android.webkit.CookieManager.setAcceptFileSchemeCookies(boolean)*

public static void setAcceptFileSchemeCookies(boolean accept)

Sets whether the application's (|android.webkit.WebView|) instances should send 
and accept cookies for file scheme URLs. Use of cookies with file scheme URLs 
is potentially insecure. Do not use this feature unless you can be sure that no 
unintentional sharing of cookie data can take place. 

Note that calls to this method will have no effect if made after a 
(|android.webkit.WebView|) or CookieManager instance has been created. 



*android.webkit.CookieManager.setAcceptFileSchemeCookiesImpl(boolean)*

protected void setAcceptFileSchemeCookiesImpl(boolean accept)

Implements (|android.webkit.CookieManager|) . 



*android.webkit.CookieManager.setCookie(String,String)*

public void setCookie(
  java.lang.String url,
  java.lang.String value)

Sets a cookie for the given URL. Any existing cookie with the same host, path 
and name will be replaced with the new cookie. The cookie being set must not 
have expired and must not be a session cookie, otherwise it will be ignored. 


    url - the URL for which the cookie is set 
    value - the cookie as a string, using the format of the 'Set-Cookie' HTTP response 
       header 


