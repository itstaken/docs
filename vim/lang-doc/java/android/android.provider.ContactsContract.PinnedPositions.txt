*android.provider.ContactsContract.PinnedPositions* *ContactsContract.PinnedPositions* 

public static final class ContactsContract.PinnedPositions
  extends    |java.lang.Object|

|android.provider.ContactsContract.PinnedPositions_Description|
|android.provider.ContactsContract.PinnedPositions_Fields|
|android.provider.ContactsContract.PinnedPositions_Constructors|
|android.provider.ContactsContract.PinnedPositions_Methods|

================================================================================

*android.provider.ContactsContract.PinnedPositions_Fields*
|int_android.provider.ContactsContract.PinnedPositions.DEMOTED|
|java.lang.String_android.provider.ContactsContract.PinnedPositions.STAR_WHEN_PINNING|
|java.lang.String_android.provider.ContactsContract.PinnedPositions.UNDEMOTE|
|int_android.provider.ContactsContract.PinnedPositions.UNPINNED|
|android.net.Uri_android.provider.ContactsContract.PinnedPositions.UPDATE_URI|

*android.provider.ContactsContract.PinnedPositions_Constructors*
|android.provider.ContactsContract.PinnedPositions()|

*android.provider.ContactsContract.PinnedPositions_Description*

API allowing applications to send pinning information for specified contacts to 
the Contacts Provider. 

This pinning information can be used by individual applications to customize 
how they order particular pinned contacts. For example, a Dialer application 
could use pinned information to order user-pinned contacts in a top row of 
favorites. 

It is possible for two or more contacts to occupy the same pinned position (due 
to aggregation and sync), so this pinning information should be used on a 
best-effort basis to order contacts in-application rather than an absolute 
guide on where a contact should be positioned. Contacts returned by the 
ContactsProvider will not be ordered based on this information, so it is up to 
the client application to reorder these contacts within their own UI adhering 
to (or ignoring as appropriate) information stored in the pinned column. 

By default, unpinned contacts will have a pinned position of 
(|android.provider.ContactsContract.PinnedPositions|) , or 
(|java.lang.Integer|) (2^31 - 1). Client-provided pinned positions can be 
positive integers that range anywhere from 0 to 
(|android.provider.ContactsContract.PinnedPositions|) . 

When using (|android.provider.ContactsContract.PinnedPositions|) to update the 
pinned positions of certain contacts, it may make sense for your application to 
star any pinned contacts by default. To specify this behavior, set the boolean 
query parameter (|android.provider.ContactsContract.PinnedPositions|) to true 
to force all pinned and unpinned contacts to be automatically starred and 
unstarred. 



*int_android.provider.ContactsContract.PinnedPositions.DEMOTED*

Value of pinned position for a contact that a user has indicated should be 
considered of the lowest priority. It is up to the client application to 
determine how to present such a contact - for example all the way at the bottom 
of a contact list, or simply just hidden from view. 


*java.lang.String_android.provider.ContactsContract.PinnedPositions.STAR_WHEN_PINNING*

A boolean query parameter that can be used with 
(|android.provider.ContactsContract.PinnedPositions|) . If "1" or "true", any 
contact that is pinned or unpinned will be correspondingly starred or 
unstarred. Otherwise, starring information will not be affected by pinned 
updates. This is false by default. 

Example: 

ContentValues values = new ContentValues(); values.put("10", 20); 
values.put("15", PinnedPositions.UNPINNED); int count = 
resolver.update(ContactsContract.PinnedPositions.UPDATE_URI.buildUpon() 
.appendQueryParameter(PinnedPositions.FORCE_STAR_WHEN_PINNING, "true").build(), 
values, null, null); 

This will pin the contact with id 10 at position 20 and star it automatically 
if not already starred, and unpin the contact with id 15, and unstar it 
automatically if not already unstarred. 


*java.lang.String_android.provider.ContactsContract.PinnedPositions.UNDEMOTE*

Clients can provide this value as a pinned position to undemote a formerly 
demoted contact. If the contact was formerly demoted, it will be restored to an 
(|android.provider.ContactsContract.PinnedPositions|) position. If it was 
otherwise already pinned at another position, it will not be affected. 

Example: 

ContentValues values = new ContentValues(); values.put("15", 
PinnedPositions.UNDEMOTE); int count = 
resolver.update(ContactsContract.PinnedPositions.UPDATE_URI.buildUpon() 
.build(), values, null, null); 

This restores the contact with id 15 to an 
(|android.provider.ContactsContract.PinnedPositions|) position, meaning that 
other apps (e.g. the Dialer) that were formerly hiding this contact from view 
based on its (|android.provider.ContactsContract.PinnedPositions|) position 
will start displaying it again. 


*int_android.provider.ContactsContract.PinnedPositions.UNPINNED*

Default value for the pinned position of an unpinned contact. Also equal to 
(|java.lang.Integer|) . 


*android.net.Uri_android.provider.ContactsContract.PinnedPositions.UPDATE_URI*

This URI allows applications to update pinned positions for a provided set of 
contacts. 

The list of contactIds to pin and their corresponding pinned positions should 
be provided in key-value pairs stored in a (|android.content.ContentValues|) 
object where the key is a valid contactId, while each pinned position is a 
positive integer. 

Example: 

ContentValues values = new ContentValues(); values.put("10", 20); 
values.put("12", 2); values.put("15", PinnedPositions.UNPINNED); int count = 
resolver.update(PinnedPositions.UPDATE_URI, values, null, null); 

This pins the contact with id 10 at position 20, the contact with id 12 at 
position 2, and unpins the contact with id 15. 



*android.provider.ContactsContract.PinnedPositions()*

public ContactsContract.PinnedPositions()




