*android.os.Binder* *Binder* Base class for a remotable object, the core part of

public class Binder
  extends    |java.lang.Object|
  implements |android.os.IBinder|

|android.os.Binder_Description|
|android.os.Binder_Fields|
|android.os.Binder_Constructors|
|android.os.Binder_Methods|

================================================================================

*android.os.Binder_Constructors*
|android.os.Binder()|Default constructor initializes the object.

*android.os.Binder_Methods*
|android.os.Binder.attachInterface(IInterface,String)|Convenience method for as
|android.os.Binder.clearCallingIdentity()|Reset the identity of the incoming IP
|android.os.Binder.dump(FileDescriptor,PrintWriter,String[])|Print the object's
|android.os.Binder.dump(FileDescriptor,String[])|Implemented to call the more c
|android.os.Binder.dumpAsync(FileDescriptor,String[])|Like#dump(FileDescriptor,
|android.os.Binder.finalize()|
|android.os.Binder.flushPendingCommands()|Flush any Binder commands pending in 
|android.os.Binder.getCallingPid()|Return the ID of the process that sent you t
|android.os.Binder.getCallingUid()|Return the Linux uid assigned to the process
|android.os.Binder.getCallingUserHandle()|Return the UserHandle assigned to the
|android.os.Binder.getInterfaceDescriptor()|Default implementation returns an e
|android.os.Binder.getThreadStrictModePolicy()|Gets the current native thread-l
|android.os.Binder.isBinderAlive()|Note that if you're calling on a local binde
|android.os.Binder.isProxy(IInterface)|Returns true if the specified interface 
|android.os.Binder.joinThreadPool()|Add the calling thread to the IPC thread po
|android.os.Binder.linkToDeath(IBinder.DeathRecipient,int)|Local implementation
|android.os.Binder.onTransact(int,Parcel,Parcel,int)|Default implementation is 
|android.os.Binder.pingBinder()|Default implementation always returns true -- i
|android.os.Binder.queryLocalInterface(String)|Use information supplied to atta
|android.os.Binder.restoreCallingIdentity(long)|Restore the identity of the inc
|android.os.Binder.setDumpDisabled(String)|Control disabling of dump calls in t
|android.os.Binder.setThreadStrictModePolicy(int)|Sets the native thread-local 
|android.os.Binder.transact(int,Parcel,Parcel,int)|Default implementation rewin
|android.os.Binder.unlinkToDeath(IBinder.DeathRecipient,int)|Local implementati

*android.os.Binder_Description*

Base class for a remotable object, the core part of a lightweight remote 
procedure call mechanism defined by (|android.os.IBinder|) . This class is an 
implementation of IBinder that provides the standard support creating a local 
implementation of such an object. 

Most developers will not implement this class directly, instead using the <a 
href="guide/components/aidl.html">aidl tool to describe the desired interface, 
having it generate the appropriate Binder subclass. You can, however, derive 
directly from Binder to implement your own custom RPC protocol or simply 
instantiate a raw Binder object directly to use as a token that can be shared 
across processes. 



*android.os.Binder()*

public Binder()

Default constructor initializes the object. 


*android.os.Binder.attachInterface(IInterface,String)*

public void attachInterface(
  android.os.IInterface owner,
  java.lang.String descriptor)

Convenience method for associating a specific interface with the Binder. After 
calling, queryLocalInterface() will be implemented for you to return the given 
owner IInterface when the corresponding descriptor is requested. 



*android.os.Binder.clearCallingIdentity()*

public static final native long clearCallingIdentity()

Reset the identity of the incoming IPC on the current thread. This can be 
useful if, while handling an incoming call, you will be calling on interfaces 
of other objects that may be local to your process and need to do permission 
checks on the calls coming into them (so they will check the permission of your 
own local process, and not whatever process originally called you). 



    Returns: Returns an opaque token that can be used to restore the original calling 
             identity by passing it to {@link #restoreCallingIdentity(long)}. 

*android.os.Binder.dump(FileDescriptor,PrintWriter,String[])*

protected void dump(
  java.io.FileDescriptor fd,
  java.io.PrintWriter fout,
  java.lang.String[] args)

Print the object's state into the given stream. 


    fd - The raw file descriptor that the dump is being sent to. 
    fout - The file to which you should dump your state. This will be closed for you after 
       you return. 
    args - additional arguments to the dump request. 

*android.os.Binder.dump(FileDescriptor,String[])*

public void dump(
  java.io.FileDescriptor fd,
  java.lang.String[] args)

Implemented to call the more convenient version (|android.os.Binder|) . 



*android.os.Binder.dumpAsync(FileDescriptor,String[])*

public void dumpAsync(
  java.io.FileDescriptor fd,
  java.lang.String[] args)

Like (|android.os.Binder|) , but ensures the target executes asynchronously. 



*android.os.Binder.finalize()*

protected void finalize()
  throws |java.lang.Throwable|
         




*android.os.Binder.flushPendingCommands()*

public static final native void flushPendingCommands()

Flush any Binder commands pending in the current thread to the kernel driver. 
This can be useful to call before performing an operation that may block for a 
long time, to ensure that any pending object references have been released in 
order to prevent the process from holding on to objects longer than it needs 
to. 



*android.os.Binder.getCallingPid()*

public static final native int getCallingPid()

Return the ID of the process that sent you the current transaction that is 
being processed. This pid can be used with higher-level system services to 
determine its identity and check permissions. If the current thread is not 
currently executing an incoming transaction, then its own pid is returned. 



*android.os.Binder.getCallingUid()*

public static final native int getCallingUid()

Return the Linux uid assigned to the process that sent you the current 
transaction that is being processed. This uid can be used with higher-level 
system services to determine its identity and check permissions. If the current 
thread is not currently executing an incoming transaction, then its own uid is 
returned. 



*android.os.Binder.getCallingUserHandle()*

public static final |android.os.UserHandle| getCallingUserHandle()

Return the UserHandle assigned to the process that sent you the current 
transaction that is being processed. This is the user of the caller. It is 
distinct from (|android.os.Binder|) in that a particular user will have 
multiple distinct apps running under it each with their own uid. If the current 
thread is not currently executing an incoming transaction, then its own 
UserHandle is returned. 



*android.os.Binder.getInterfaceDescriptor()*

public |java.lang.String| getInterfaceDescriptor()

Default implementation returns an empty interface name. 



*android.os.Binder.getThreadStrictModePolicy()*

public static final native int getThreadStrictModePolicy()

Gets the current native thread-local StrictMode policy mask. 



*android.os.Binder.isBinderAlive()*

public boolean isBinderAlive()

Note that if you're calling on a local binder, this always returns true because 
your process is alive if you're calling it. 



*android.os.Binder.isProxy(IInterface)*

public static final boolean isProxy(android.os.IInterface iface)

Returns true if the specified interface is a proxy. 



*android.os.Binder.joinThreadPool()*

public static final native void joinThreadPool()

Add the calling thread to the IPC thread pool. This function does not return 
until the current process is exiting. 



*android.os.Binder.linkToDeath(IBinder.DeathRecipient,int)*

public void linkToDeath(
  android.os.IBinder.DeathRecipient recipient,
  int flags)

Local implementation is a no-op. 



*android.os.Binder.onTransact(int,Parcel,Parcel,int)*

protected boolean onTransact(
  int code,
  android.os.Parcel data,
  android.os.Parcel reply,
  int flags)
  throws |android.os.RemoteException|
         
Default implementation is a stub that returns false. You will want to override 
this to do the appropriate unmarshalling of transactions. 

If you want to call this, call transact(). 



*android.os.Binder.pingBinder()*

public boolean pingBinder()

Default implementation always returns true -- if you got here, the object is 
alive. 



*android.os.Binder.queryLocalInterface(String)*

public |android.os.IInterface| queryLocalInterface(java.lang.String descriptor)

Use information supplied to attachInterface() to return the associated 
IInterface if it matches the requested descriptor. 



*android.os.Binder.restoreCallingIdentity(long)*

public static final native void restoreCallingIdentity(long token)

Restore the identity of the incoming IPC on the current thread back to a 
previously identity that was returned by (|android.os.Binder|) . 


    token - The opaque token that was previously returned by {@link #clearCallingIdentity}. 

*android.os.Binder.setDumpDisabled(String)*

public static void setDumpDisabled(java.lang.String msg)

Control disabling of dump calls in this process. This is used by the system 
process watchdog to disable incoming dump calls while it has detecting the 
system is hung and is reporting that back to the activity controller. This is 
to prevent the controller from getting hung up on bug reports at this point. 


    msg - The message to show instead of the dump; if null, dumps are re-enabled. 

*android.os.Binder.setThreadStrictModePolicy(int)*

public static final native void setThreadStrictModePolicy(int policyMask)

Sets the native thread-local StrictMode policy mask. 

The StrictMode settings are kept in two places: a Java-level threadlocal for 
libcore/Dalvik, and a native threadlocal (set here) for propagation via Binder 
calls. This is a little unfortunate, but necessary to break otherwise more 
unfortunate dependencies either of Dalvik on Android, or Android native-only 
code on Dalvik. 



*android.os.Binder.transact(int,Parcel,Parcel,int)*

public final boolean transact(
  int code,
  android.os.Parcel data,
  android.os.Parcel reply,
  int flags)
  throws |android.os.RemoteException|
         
Default implementation rewinds the parcels and calls onTransact. On the remote 
side, transact calls into the binder to do the IPC. 



*android.os.Binder.unlinkToDeath(IBinder.DeathRecipient,int)*

public boolean unlinkToDeath(
  android.os.IBinder.DeathRecipient recipient,
  int flags)

Local implementation is a no-op. 




