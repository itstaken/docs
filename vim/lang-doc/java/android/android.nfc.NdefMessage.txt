*android.nfc.NdefMessage* *NdefMessage* Represents an immutable NDEF Message.

public final class NdefMessage
  extends    |java.lang.Object|
  implements |android.os.Parcelable|

|android.nfc.NdefMessage_Description|
|android.nfc.NdefMessage_Fields|
|android.nfc.NdefMessage_Constructors|
|android.nfc.NdefMessage_Methods|

================================================================================

*android.nfc.NdefMessage_Fields*
|android.os.Parcelable.Creator<android.nfc.NdefMessage>_android.nfc.NdefMessage.CREATOR|

*android.nfc.NdefMessage_Constructors*
|android.nfc.NdefMessage(byte[])|Construct an NDEF Message by parsing raw bytes
|android.nfc.NdefMessage(NdefRecord[])|Construct an NDEF Message from one or mo
|android.nfc.NdefMessage(NdefRecord,NdefRecord...)|Construct an NDEF Message fr

*android.nfc.NdefMessage_Methods*
|android.nfc.NdefMessage.describeContents()|
|android.nfc.NdefMessage.equals(Object)|Returns true if the specified NDEF Mess
|android.nfc.NdefMessage.getByteArrayLength()|Return the length of this NDEF Me
|android.nfc.NdefMessage.getRecords()|Get the NDEF Records inside this NDEF Mes
|android.nfc.NdefMessage.hashCode()|
|android.nfc.NdefMessage.toByteArray()|Return this NDEF Message as raw bytes.
|android.nfc.NdefMessage.toString()|
|android.nfc.NdefMessage.writeToParcel(Parcel,int)|

*android.nfc.NdefMessage_Description*

Represents an immutable NDEF Message. 

NDEF (NFC Data Exchange Format) is a light-weight binary format, used to 
encapsulate typed data. It is specified by the NFC Forum, for transmission and 
storage with NFC, however it is transport agnostic. 

NDEF defines messages and records. An NDEF Record contains typed data, such as 
MIME-type media, a URI, or a custom application payload. An NDEF Message is a 
container for one or more NDEF Records. 

When an Android device receives an NDEF Message (for example by reading an NFC 
tag) it processes it through a dispatch mechanism to determine an activity to 
launch. The type of the first record in the message has special importance for 
message dispatch, so design this record carefully. 

Use (|android.nfc.NdefMessage|) to construct an NDEF Message from binary data, 
or (|android.nfc.NdefMessage|) to construct from one or more 
(|android.nfc.NdefRecord|) s. (|android.nfc.NdefMessage|) and 
(|android.nfc.NdefRecord|) implementations are always available, even on 
Android devices that do not have NFC hardware. (|android.nfc.NdefRecord|) s are 
intended to be immutable (and thread-safe), however they may contain mutable 
fields. So take care not to modify mutable fields passed into constructors, or 
modify mutable fields obtained by getter methods, unless such modification is 
explicitly marked as safe. 



*android.os.Parcelable.Creator<android.nfc.NdefMessage>_android.nfc.NdefMessage.CREATOR*





*android.nfc.NdefMessage(byte[])*

public NdefMessage(byte[] data)
  throws |android.nfc.FormatException|
         
Construct an NDEF Message by parsing raw bytes. Strict validation of the NDEF 
binary structure is performed: there must be at least one record, every record 
flag must be correct, and the total length of the message must match the length 
of the input data. This parser can handle chunked records, and converts them 
into logical (|android.nfc.NdefRecord|) s within the message. Once the input 
data has been parsed to one or more logical records, basic validation of the 
tnf, type, id, and payload fields of each record is performed, as per the 
documentation on on (|android.nfc.NdefRecord|) If either strict validation of 
the binary format fails, or basic validation during record construction fails, 
a (|android.nfc.FormatException|) is thrown Deep inspection of the type, id and 
payload fields of each record is not performed, so it is possible to parse 
input that has a valid binary format and confirms to the basic validation 
requirements of (|android.nfc.NdefRecord|) , but fails more strict requirements 
as specified by the NFC Forum. 

It is safe to re-use the data byte array after construction: this constructor 
will make an internal copy of all necessary fields. 

    data - raw bytes to parse 

*android.nfc.NdefMessage(NdefRecord[])*

public NdefMessage(android.nfc.NdefRecord[] records)

Construct an NDEF Message from one or more NDEF Records. 

    records - one or more records 

*android.nfc.NdefMessage(NdefRecord,NdefRecord...)*

public NdefMessage(
  android.nfc.NdefRecord record,
  android.nfc.NdefRecord[] records)

Construct an NDEF Message from one or more NDEF Records. 

    record - first record (mandatory) 
    records - additional records (optional) 

*android.nfc.NdefMessage.describeContents()*

public int describeContents()





*android.nfc.NdefMessage.equals(Object)*

public boolean equals(java.lang.Object obj)

Returns true if the specified NDEF Message contains identical NDEF Records. 



*android.nfc.NdefMessage.getByteArrayLength()*

public int getByteArrayLength()

Return the length of this NDEF Message if it is written to a byte array with 
(|android.nfc.NdefMessage|) . An NDEF Message can be formatted to bytes in 
different ways depending on chunking, SR, and ID flags, so the length returned 
by this method may not be equal to the length of the original byte array used 
to construct this NDEF Message. However it will always be equal to the length 
of the byte array produced by (|android.nfc.NdefMessage|) . 



    Returns: length of this NDEF Message when written to bytes with {@link #toByteArray} 

*android.nfc.NdefMessage.getRecords()*

public |android.nfc.NdefRecord|[] getRecords()

Get the NDEF Records inside this NDEF Message. An (|android.nfc.NdefMessage|) 
always has one or more NDEF Records: so the following code to retrieve the 
first record is always safe (no need to check for null or array length >= 1): 

NdefRecord firstRecord = ndefMessage.getRecords()[0]; 



    Returns: array of one or more NDEF records. 

*android.nfc.NdefMessage.hashCode()*

public int hashCode()





*android.nfc.NdefMessage.toByteArray()*

public byte[] toByteArray()

Return this NDEF Message as raw bytes. The NDEF Message is formatted as per the 
NDEF 1.0 specification, and the byte array is suitable for network transmission 
or storage in an NFC Forum NDEF compatible tag. This method will not chunk any 
records, and will always use the short record (SR) format and omit the 
identifier field when possible. 



    Returns: NDEF Message in binary format 

*android.nfc.NdefMessage.toString()*

public |java.lang.String| toString()





*android.nfc.NdefMessage.writeToParcel(Parcel,int)*

public void writeToParcel(
  android.os.Parcel dest,
  int flags)






