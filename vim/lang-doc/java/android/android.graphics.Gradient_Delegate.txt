*android.graphics.Gradient_Delegate* *Gradient_Delegate* Base class for true Gra

public abstract class Gradient_Delegate
  extends    |android.graphics.Shader_Delegate|

|android.graphics.Gradient_Delegate_Description|
|android.graphics.Gradient_Delegate_Fields|
|android.graphics.Gradient_Delegate_Constructors|
|android.graphics.Gradient_Delegate_Methods|

================================================================================

*android.graphics.Gradient_Delegate_Fields*
|int[]_android.graphics.Gradient_Delegate.mColors|
|float[]_android.graphics.Gradient_Delegate.mPositions|

*android.graphics.Gradient_Delegate_Constructors*
|android.graphics.Gradient_Delegate(int[],float[])|Creates the base shader and 

*android.graphics.Gradient_Delegate_Methods*
|android.graphics.Gradient_Delegate.getSupportMessage()|
|android.graphics.Gradient_Delegate.isSupported()|

*android.graphics.Gradient_Delegate_Description*

Base class for true Gradient shader delegate. 



*int[]_android.graphics.Gradient_Delegate.mColors*




*float[]_android.graphics.Gradient_Delegate.mPositions*





*android.graphics.Gradient_Delegate(int[],float[])*

protected Gradient_Delegate(
  int[] colors,
  float[] positions)

Creates the base shader and do some basic test on the parameters. 

    colors - The colors to be distributed along the gradient line 
    positions - May be null. The relative positions [0..1] of each corresponding color in the 
       colors array. If this is null, the the colors are distributed evenly 
       along the gradient line. 

*android.graphics.Gradient_Delegate.getSupportMessage()*

public |java.lang.String| getSupportMessage()





*android.graphics.Gradient_Delegate.isSupported()*

public boolean isSupported()






