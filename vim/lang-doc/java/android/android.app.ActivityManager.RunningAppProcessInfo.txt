*android.app.ActivityManager.RunningAppProcessInfo* *ActivityManager.RunningAppProcessInfo* 

public static class ActivityManager.RunningAppProcessInfo
  extends    |java.lang.Object|
  implements |android.os.Parcelable|

|android.app.ActivityManager.RunningAppProcessInfo_Description|
|android.app.ActivityManager.RunningAppProcessInfo_Fields|
|android.app.ActivityManager.RunningAppProcessInfo_Constructors|
|android.app.ActivityManager.RunningAppProcessInfo_Methods|

================================================================================

*android.app.ActivityManager.RunningAppProcessInfo_Fields*
|android.os.Parcelable.Creator<android.app.ActivityManager.RunningAppProcessInfo>_android.app.ActivityManager.RunningAppProcessInfo.CREATOR|
|int_android.app.ActivityManager.RunningAppProcessInfo.FLAG_CANT_SAVE_STATE|
|int_android.app.ActivityManager.RunningAppProcessInfo.FLAG_HAS_ACTIVITIES|
|int_android.app.ActivityManager.RunningAppProcessInfo.FLAG_PERSISTENT|
|int_android.app.ActivityManager.RunningAppProcessInfo.flags|
|int_android.app.ActivityManager.RunningAppProcessInfo.importance|
|int_android.app.ActivityManager.RunningAppProcessInfo.IMPORTANCE_BACKGROUND|
|int_android.app.ActivityManager.RunningAppProcessInfo.IMPORTANCE_CANT_SAVE_STATE|
|int_android.app.ActivityManager.RunningAppProcessInfo.IMPORTANCE_EMPTY|
|int_android.app.ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND|
|int_android.app.ActivityManager.RunningAppProcessInfo.IMPORTANCE_PERCEPTIBLE|
|int_android.app.ActivityManager.RunningAppProcessInfo.IMPORTANCE_PERSISTENT|
|int_android.app.ActivityManager.RunningAppProcessInfo.IMPORTANCE_SERVICE|
|int_android.app.ActivityManager.RunningAppProcessInfo.IMPORTANCE_VISIBLE|
|int_android.app.ActivityManager.RunningAppProcessInfo.importanceReasonCode|
|android.content.ComponentName_android.app.ActivityManager.RunningAppProcessInfo.importanceReasonComponent|
|int_android.app.ActivityManager.RunningAppProcessInfo.importanceReasonImportance|
|int_android.app.ActivityManager.RunningAppProcessInfo.importanceReasonPid|
|int_android.app.ActivityManager.RunningAppProcessInfo.lastTrimLevel|
|int_android.app.ActivityManager.RunningAppProcessInfo.lru|
|int_android.app.ActivityManager.RunningAppProcessInfo.pid|
|java.lang.String[]_android.app.ActivityManager.RunningAppProcessInfo.pkgList|
|java.lang.String_android.app.ActivityManager.RunningAppProcessInfo.processName|
|int_android.app.ActivityManager.RunningAppProcessInfo.REASON_PROVIDER_IN_USE|
|int_android.app.ActivityManager.RunningAppProcessInfo.REASON_SERVICE_IN_USE|
|int_android.app.ActivityManager.RunningAppProcessInfo.REASON_UNKNOWN|
|int_android.app.ActivityManager.RunningAppProcessInfo.uid|

*android.app.ActivityManager.RunningAppProcessInfo_Constructors*
|android.app.ActivityManager.RunningAppProcessInfo()|
|android.app.ActivityManager.RunningAppProcessInfo(String,int,String[])|

*android.app.ActivityManager.RunningAppProcessInfo_Methods*
|android.app.ActivityManager.RunningAppProcessInfo.describeContents()|
|android.app.ActivityManager.RunningAppProcessInfo.readFromParcel(Parcel)|
|android.app.ActivityManager.RunningAppProcessInfo.writeToParcel(Parcel,int)|

*android.app.ActivityManager.RunningAppProcessInfo_Description*

Information you can retrieve about a running process. 



*android.os.Parcelable.Creator<android.app.ActivityManager.RunningAppProcessInfo>_android.app.ActivityManager.RunningAppProcessInfo.CREATOR*




*int_android.app.ActivityManager.RunningAppProcessInfo.FLAG_CANT_SAVE_STATE*

Constant for (|android.app.ActivityManager.RunningAppProcessInfo|) : this is an 
app that is unable to correctly save its state when going to the background, so 
it can not be killed while in the background. 


*int_android.app.ActivityManager.RunningAppProcessInfo.FLAG_HAS_ACTIVITIES*

Constant for (|android.app.ActivityManager.RunningAppProcessInfo|) : this 
process is associated with a persistent system app. 


*int_android.app.ActivityManager.RunningAppProcessInfo.FLAG_PERSISTENT*

Constant for (|android.app.ActivityManager.RunningAppProcessInfo|) : this 
process is associated with a persistent system app. 


*int_android.app.ActivityManager.RunningAppProcessInfo.flags*

Flags of information. May be any of 
(|android.app.ActivityManager.RunningAppProcessInfo|) . 


*int_android.app.ActivityManager.RunningAppProcessInfo.importance*

The relative importance level that the system places on this process. May be 
one of (|android.app.ActivityManager.RunningAppProcessInfo|) , 
(|android.app.ActivityManager.RunningAppProcessInfo|) , 
(|android.app.ActivityManager.RunningAppProcessInfo|) , 
(|android.app.ActivityManager.RunningAppProcessInfo|) , or 
(|android.app.ActivityManager.RunningAppProcessInfo|) . These constants are 
numbered so that "more important" values are always smaller than "less 
important" values. 


*int_android.app.ActivityManager.RunningAppProcessInfo.IMPORTANCE_BACKGROUND*

Constant for (|android.app.ActivityManager.RunningAppProcessInfo|) : this 
process process contains background code that is expendable. 


*int_android.app.ActivityManager.RunningAppProcessInfo.IMPORTANCE_CANT_SAVE_STATE*

Constant for (|android.app.ActivityManager.RunningAppProcessInfo|) : this 
process is running an application that can not save its state, and thus can't 
be killed while in the background. 


*int_android.app.ActivityManager.RunningAppProcessInfo.IMPORTANCE_EMPTY*

Constant for (|android.app.ActivityManager.RunningAppProcessInfo|) : this 
process is empty of any actively running code. 


*int_android.app.ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND*

Constant for (|android.app.ActivityManager.RunningAppProcessInfo|) : this 
process is running the foreground UI. 


*int_android.app.ActivityManager.RunningAppProcessInfo.IMPORTANCE_PERCEPTIBLE*

Constant for (|android.app.ActivityManager.RunningAppProcessInfo|) : this 
process is running something that is considered to be actively perceptible to 
the user. An example would be an application performing background music 
playback. 


*int_android.app.ActivityManager.RunningAppProcessInfo.IMPORTANCE_PERSISTENT*

Constant for (|android.app.ActivityManager.RunningAppProcessInfo|) : this is a 
persistent process. Only used when reporting to process observers. 


*int_android.app.ActivityManager.RunningAppProcessInfo.IMPORTANCE_SERVICE*

Constant for (|android.app.ActivityManager.RunningAppProcessInfo|) : this 
process is contains services that should remain running. 


*int_android.app.ActivityManager.RunningAppProcessInfo.IMPORTANCE_VISIBLE*

Constant for (|android.app.ActivityManager.RunningAppProcessInfo|) : this 
process is running something that is actively visible to the user, though not 
in the immediate foreground. 


*int_android.app.ActivityManager.RunningAppProcessInfo.importanceReasonCode*

The reason for (|android.app.ActivityManager.RunningAppProcessInfo|) , if any. 


*android.content.ComponentName_android.app.ActivityManager.RunningAppProcessInfo.importanceReasonComponent*

For the specified values of 
(|android.app.ActivityManager.RunningAppProcessInfo|) , this is the name of the 
component that is being used in this process. 


*int_android.app.ActivityManager.RunningAppProcessInfo.importanceReasonImportance*

When (|android.app.ActivityManager.RunningAppProcessInfo|) is non-0, this is 
the importance of the other pid. @hide 


*int_android.app.ActivityManager.RunningAppProcessInfo.importanceReasonPid*

For the specified values of 
(|android.app.ActivityManager.RunningAppProcessInfo|) , this is the process ID 
of the other process that is a client of this process. This will be 0 if no 
other process is using this one. 


*int_android.app.ActivityManager.RunningAppProcessInfo.lastTrimLevel*

Last memory trim level reported to the process: corresponds to the values 
supplied to 
ComponentCallbacks2.onTrimMemory(int)(|android.content.ComponentCallbacks2|) . 


*int_android.app.ActivityManager.RunningAppProcessInfo.lru*

An additional ordering within a particular 
(|android.app.ActivityManager.RunningAppProcessInfo|) category, providing 
finer-grained information about the relative utility of processes within a 
category. This number means nothing except that a smaller values are more 
recently used (and thus more important). Currently an LRU value is only 
maintained for the (|android.app.ActivityManager.RunningAppProcessInfo|) 
category, though others may be maintained in the future. 


*int_android.app.ActivityManager.RunningAppProcessInfo.pid*

The pid of this process; 0 if none 


*java.lang.String[]_android.app.ActivityManager.RunningAppProcessInfo.pkgList*

All packages that have been loaded into the process. 


*java.lang.String_android.app.ActivityManager.RunningAppProcessInfo.processName*

The name of the process that this object is associated with 


*int_android.app.ActivityManager.RunningAppProcessInfo.REASON_PROVIDER_IN_USE*

Constant for (|android.app.ActivityManager.RunningAppProcessInfo|) : one of the 
application's content providers is being used by another process. The pid of 
the client process is in (|android.app.ActivityManager.RunningAppProcessInfo|) 
and the target provider in this process is in 
(|android.app.ActivityManager.RunningAppProcessInfo|) . 


*int_android.app.ActivityManager.RunningAppProcessInfo.REASON_SERVICE_IN_USE*

Constant for (|android.app.ActivityManager.RunningAppProcessInfo|) : one of the 
application's content providers is being used by another process. The pid of 
the client process is in (|android.app.ActivityManager.RunningAppProcessInfo|) 
and the target provider in this process is in 
(|android.app.ActivityManager.RunningAppProcessInfo|) . 


*int_android.app.ActivityManager.RunningAppProcessInfo.REASON_UNKNOWN*

Constant for (|android.app.ActivityManager.RunningAppProcessInfo|) : nothing 
special has been specified for the reason for this level. 


*int_android.app.ActivityManager.RunningAppProcessInfo.uid*

The user id of this process. 



*android.app.ActivityManager.RunningAppProcessInfo()*

public ActivityManager.RunningAppProcessInfo()




*android.app.ActivityManager.RunningAppProcessInfo(String,int,String[])*

public ActivityManager.RunningAppProcessInfo(
  java.lang.String pProcessName,
  int pPid,
  java.lang.String[] pArr)




*android.app.ActivityManager.RunningAppProcessInfo.describeContents()*

public int describeContents()





*android.app.ActivityManager.RunningAppProcessInfo.readFromParcel(Parcel)*

public void readFromParcel(android.os.Parcel source)





*android.app.ActivityManager.RunningAppProcessInfo.writeToParcel(Parcel,int)*

public void writeToParcel(
  android.os.Parcel dest,
  int flags)






