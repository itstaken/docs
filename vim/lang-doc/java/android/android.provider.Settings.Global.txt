*android.provider.Settings.Global* *Settings.Global* Global system settings, con

public static final class Settings.Global
  extends    |android.provider.Settings.NameValueTable|

|android.provider.Settings.Global_Description|
|android.provider.Settings.Global_Fields|
|android.provider.Settings.Global_Constructors|
|android.provider.Settings.Global_Methods|

================================================================================

*android.provider.Settings.Global_Fields*
|java.lang.String_android.provider.Settings.Global.ADB_ENABLED|
|java.lang.String_android.provider.Settings.Global.AIRPLANE_MODE_ON|
|java.lang.String_android.provider.Settings.Global.AIRPLANE_MODE_RADIOS|
|java.lang.String_android.provider.Settings.Global.AIRPLANE_MODE_TOGGLEABLE_RADIOS|
|java.lang.String_android.provider.Settings.Global.ALWAYS_FINISH_ACTIVITIES|
|java.lang.String_android.provider.Settings.Global.ANIMATOR_DURATION_SCALE|
|java.lang.String_android.provider.Settings.Global.ASSISTED_GPS_ENABLED|
|java.lang.String_android.provider.Settings.Global.AUDIO_SAFE_VOLUME_STATE|
|java.lang.String_android.provider.Settings.Global.AUTO_TIME|
|java.lang.String_android.provider.Settings.Global.AUTO_TIME_ZONE|
|java.lang.String_android.provider.Settings.Global.BATTERY_DISCHARGE_DURATION_THRESHOLD|
|java.lang.String_android.provider.Settings.Global.BATTERY_DISCHARGE_THRESHOLD|
|java.lang.String_android.provider.Settings.Global.BLUETOOTH_A2DP_SINK_PRIORITY_PREFIX|
|java.lang.String_android.provider.Settings.Global.BLUETOOTH_HEADSET_PRIORITY_PREFIX|
|java.lang.String_android.provider.Settings.Global.BLUETOOTH_INPUT_DEVICE_PRIORITY_PREFIX|
|java.lang.String_android.provider.Settings.Global.BLUETOOTH_MAP_PRIORITY_PREFIX|
|java.lang.String_android.provider.Settings.Global.BLUETOOTH_ON|
|java.lang.String_android.provider.Settings.Global.BUGREPORT_IN_POWER_MENU|
|java.lang.String_android.provider.Settings.Global.CALL_AUTO_RETRY|
|java.lang.String_android.provider.Settings.Global.CAPTIVE_PORTAL_DETECTION_ENABLED|
|java.lang.String_android.provider.Settings.Global.CAPTIVE_PORTAL_SERVER|
|java.lang.String_android.provider.Settings.Global.CAR_DOCK_SOUND|
|java.lang.String_android.provider.Settings.Global.CAR_UNDOCK_SOUND|
|java.lang.String_android.provider.Settings.Global.CDMA_CELL_BROADCAST_SMS|
|java.lang.String_android.provider.Settings.Global.CDMA_ROAMING_MODE|
|java.lang.String_android.provider.Settings.Global.CDMA_SUBSCRIPTION_MODE|
|java.lang.String_android.provider.Settings.Global.CERT_PIN_UPDATE_CONTENT_URL|
|java.lang.String_android.provider.Settings.Global.CERT_PIN_UPDATE_METADATA_URL|
|java.lang.String_android.provider.Settings.Global.COMPATIBILITY_MODE|
|java.lang.String_android.provider.Settings.Global.CONNECTIVITY_CHANGE_DELAY|
|java.lang.String_android.provider.Settings.Global.CONNECTIVITY_SAMPLING_INTERVAL_IN_SECONDS|
|android.net.Uri_android.provider.Settings.Global.CONTENT_URI|
|java.lang.String_android.provider.Settings.Global.DATA_ACTIVITY_TIMEOUT_MOBILE|
|java.lang.String_android.provider.Settings.Global.DATA_ACTIVITY_TIMEOUT_WIFI|
|java.lang.String_android.provider.Settings.Global.DATA_ROAMING|
|java.lang.String_android.provider.Settings.Global.DATA_STALL_ALARM_AGGRESSIVE_DELAY_IN_MS|
|java.lang.String_android.provider.Settings.Global.DATA_STALL_ALARM_NON_AGGRESSIVE_DELAY_IN_MS|
|java.lang.String_android.provider.Settings.Global.DEBUG_APP|
|java.lang.String_android.provider.Settings.Global.DEFAULT_DNS_SERVER|
|java.lang.String_android.provider.Settings.Global.DEFAULT_INSTALL_LOCATION|
|java.lang.String_android.provider.Settings.Global.DESK_DOCK_SOUND|
|java.lang.String_android.provider.Settings.Global.DESK_UNDOCK_SOUND|
|java.lang.String_android.provider.Settings.Global.DEVELOPMENT_FORCE_RTL|
|java.lang.String_android.provider.Settings.Global.DEVELOPMENT_SETTINGS_ENABLED|
|java.lang.String_android.provider.Settings.Global.DEVICE_PROVISIONED|
|java.lang.String_android.provider.Settings.Global.DISK_FREE_CHANGE_REPORTING_THRESHOLD|
|java.lang.String_android.provider.Settings.Global.DISPLAY_DENSITY_FORCED|
|java.lang.String_android.provider.Settings.Global.DISPLAY_SIZE_FORCED|
|java.lang.String_android.provider.Settings.Global.DOCK_AUDIO_MEDIA_ENABLED|
|java.lang.String_android.provider.Settings.Global.DOCK_SOUNDS_ENABLED|
|java.lang.String_android.provider.Settings.Global.DOWNLOAD_MAX_BYTES_OVER_MOBILE|
|java.lang.String_android.provider.Settings.Global.DOWNLOAD_RECOMMENDED_MAX_BYTES_OVER_MOBILE|
|java.lang.String_android.provider.Settings.Global.DROPBOX_AGE_SECONDS|
|java.lang.String_android.provider.Settings.Global.DROPBOX_MAX_FILES|
|java.lang.String_android.provider.Settings.Global.DROPBOX_QUOTA_KB|
|java.lang.String_android.provider.Settings.Global.DROPBOX_QUOTA_PERCENT|
|java.lang.String_android.provider.Settings.Global.DROPBOX_RESERVE_PERCENT|
|java.lang.String_android.provider.Settings.Global.DROPBOX_TAG_PREFIX|
|java.lang.String_android.provider.Settings.Global.EMERGENCY_TONE|
|java.lang.String_android.provider.Settings.Global.ENABLE_ACCESSIBILITY_GLOBAL_GESTURE_ENABLED|
|java.lang.String_android.provider.Settings.Global.ERROR_LOGCAT_PREFIX|
|java.lang.String_android.provider.Settings.Global.FANCY_IME_ANIMATIONS|
|java.lang.String_android.provider.Settings.Global.GLOBAL_HTTP_PROXY_EXCLUSION_LIST|
|java.lang.String_android.provider.Settings.Global.GLOBAL_HTTP_PROXY_HOST|
|java.lang.String_android.provider.Settings.Global.GLOBAL_HTTP_PROXY_PAC|
|java.lang.String_android.provider.Settings.Global.GLOBAL_HTTP_PROXY_PORT|
|java.lang.String_android.provider.Settings.Global.GPRS_REGISTER_CHECK_PERIOD_MS|
|java.lang.String_android.provider.Settings.Global.HTTP_PROXY|
|java.lang.String_android.provider.Settings.Global.INET_CONDITION_DEBOUNCE_DOWN_DELAY|
|java.lang.String_android.provider.Settings.Global.INET_CONDITION_DEBOUNCE_UP_DELAY|
|java.lang.String_android.provider.Settings.Global.INSTALL_NON_MARKET_APPS|
|java.lang.String_android.provider.Settings.Global.INTENT_FIREWALL_UPDATE_CONTENT_URL|
|java.lang.String_android.provider.Settings.Global.INTENT_FIREWALL_UPDATE_METADATA_URL|
|java.lang.String_android.provider.Settings.Global.LOCK_SOUND|
|java.lang.String_android.provider.Settings.Global.LOW_BATTERY_SOUND|
|java.lang.String_android.provider.Settings.Global.LOW_BATTERY_SOUND_TIMEOUT|
|java.lang.String_android.provider.Settings.Global.MDC_INITIAL_MAX_RETRY|
|java.lang.String_android.provider.Settings.Global.MOBILE_DATA|
|java.lang.String_android.provider.Settings.Global.MODE_RINGER|
|java.lang.String_android.provider.Settings.Global.NETSTATS_DEV_BUCKET_DURATION|
|java.lang.String_android.provider.Settings.Global.NETSTATS_DEV_DELETE_AGE|
|java.lang.String_android.provider.Settings.Global.NETSTATS_DEV_PERSIST_BYTES|
|java.lang.String_android.provider.Settings.Global.NETSTATS_DEV_ROTATE_AGE|
|java.lang.String_android.provider.Settings.Global.NETSTATS_ENABLED|
|java.lang.String_android.provider.Settings.Global.NETSTATS_GLOBAL_ALERT_BYTES|
|java.lang.String_android.provider.Settings.Global.NETSTATS_POLL_INTERVAL|
|java.lang.String_android.provider.Settings.Global.NETSTATS_REPORT_XT_OVER_DEV|
|java.lang.String_android.provider.Settings.Global.NETSTATS_SAMPLE_ENABLED|
|java.lang.String_android.provider.Settings.Global.NETSTATS_TIME_CACHE_MAX_AGE|
|java.lang.String_android.provider.Settings.Global.NETSTATS_UID_BUCKET_DURATION|
|java.lang.String_android.provider.Settings.Global.NETSTATS_UID_DELETE_AGE|
|java.lang.String_android.provider.Settings.Global.NETSTATS_UID_PERSIST_BYTES|
|java.lang.String_android.provider.Settings.Global.NETSTATS_UID_ROTATE_AGE|
|java.lang.String_android.provider.Settings.Global.NETSTATS_UID_TAG_BUCKET_DURATION|
|java.lang.String_android.provider.Settings.Global.NETSTATS_UID_TAG_DELETE_AGE|
|java.lang.String_android.provider.Settings.Global.NETSTATS_UID_TAG_PERSIST_BYTES|
|java.lang.String_android.provider.Settings.Global.NETSTATS_UID_TAG_ROTATE_AGE|
|java.lang.String_android.provider.Settings.Global.NETWORK_PREFERENCE|
|java.lang.String_android.provider.Settings.Global.NITZ_UPDATE_DIFF|
|java.lang.String_android.provider.Settings.Global.NITZ_UPDATE_SPACING|
|java.lang.String_android.provider.Settings.Global.NSD_ON|
|java.lang.String_android.provider.Settings.Global.NTP_SERVER|
|java.lang.String_android.provider.Settings.Global.NTP_TIMEOUT|
|java.lang.String_android.provider.Settings.Global.OVERLAY_DISPLAY_DEVICES|
|java.lang.String_android.provider.Settings.Global.PAC_CHANGE_DELAY|
|java.lang.String_android.provider.Settings.Global.PACKAGE_VERIFIER_DEFAULT_RESPONSE|
|java.lang.String_android.provider.Settings.Global.PACKAGE_VERIFIER_ENABLE|
|java.lang.String_android.provider.Settings.Global.PACKAGE_VERIFIER_INCLUDE_ADB|
|java.lang.String_android.provider.Settings.Global.PACKAGE_VERIFIER_SETTING_VISIBLE|
|java.lang.String_android.provider.Settings.Global.PACKAGE_VERIFIER_TIMEOUT|
|java.lang.String_android.provider.Settings.Global.PDP_WATCHDOG_ERROR_POLL_COUNT|
|java.lang.String_android.provider.Settings.Global.PDP_WATCHDOG_ERROR_POLL_INTERVAL_MS|
|java.lang.String_android.provider.Settings.Global.PDP_WATCHDOG_LONG_POLL_INTERVAL_MS|
|java.lang.String_android.provider.Settings.Global.PDP_WATCHDOG_MAX_PDP_RESET_FAIL_COUNT|
|java.lang.String_android.provider.Settings.Global.PDP_WATCHDOG_POLL_INTERVAL_MS|
|java.lang.String_android.provider.Settings.Global.PDP_WATCHDOG_TRIGGER_PACKET_COUNT|
|java.lang.String_android.provider.Settings.Global.POWER_SOUNDS_ENABLED|
|java.lang.String_android.provider.Settings.Global.PREFERRED_NETWORK_MODE|
|java.lang.String_android.provider.Settings.Global.PROVISIONING_APN_ALARM_DELAY_IN_MS|
|java.lang.String_android.provider.Settings.Global.RADIO_BLUETOOTH|
|java.lang.String_android.provider.Settings.Global.RADIO_CELL|
|java.lang.String_android.provider.Settings.Global.RADIO_NFC|
|java.lang.String_android.provider.Settings.Global.RADIO_WIFI|
|java.lang.String_android.provider.Settings.Global.RADIO_WIMAX|
|java.lang.String_android.provider.Settings.Global.READ_EXTERNAL_STORAGE_ENFORCED_DEFAULT|
|java.lang.String_android.provider.Settings.Global.SAMPLING_PROFILER_MS|
|java.lang.String_android.provider.Settings.Global.SELINUX_STATUS|
|java.lang.String_android.provider.Settings.Global.SELINUX_UPDATE_CONTENT_URL|
|java.lang.String_android.provider.Settings.Global.SELINUX_UPDATE_METADATA_URL|
|java.lang.String_android.provider.Settings.Global.SEND_ACTION_APP_ERROR|
|java.lang.String_android.provider.Settings.Global.SET_GLOBAL_HTTP_PROXY|
|java.lang.String_android.provider.Settings.Global.SET_INSTALL_LOCATION|
|java.lang.String[]_android.provider.Settings.Global.SETTINGS_TO_BACKUP|
|java.lang.String_android.provider.Settings.Global.SETUP_PREPAID_DATA_SERVICE_URL|
|java.lang.String_android.provider.Settings.Global.SETUP_PREPAID_DETECTION_REDIR_HOST|
|java.lang.String_android.provider.Settings.Global.SETUP_PREPAID_DETECTION_TARGET_URL|
|java.lang.String_android.provider.Settings.Global.SHOW_PROCESSES|
|java.lang.String_android.provider.Settings.Global.SMS_OUTGOING_CHECK_INTERVAL_MS|
|java.lang.String_android.provider.Settings.Global.SMS_OUTGOING_CHECK_MAX_COUNT|
|java.lang.String_android.provider.Settings.Global.SMS_SHORT_CODE_CONFIRMATION|
|java.lang.String_android.provider.Settings.Global.SMS_SHORT_CODE_RULE|
|java.lang.String_android.provider.Settings.Global.SMS_SHORT_CODES_UPDATE_CONTENT_URL|
|java.lang.String_android.provider.Settings.Global.SMS_SHORT_CODES_UPDATE_METADATA_URL|
|java.lang.String_android.provider.Settings.Global.STAY_ON_WHILE_PLUGGED_IN|
|java.lang.String_android.provider.Settings.Global.SYNC_MAX_RETRY_DELAY_IN_SECONDS|
|java.lang.String_android.provider.Settings.Global.SYS_FREE_STORAGE_LOG_INTERVAL|
|java.lang.String_android.provider.Settings.Global.SYS_PROP_SETTING_VERSION|
|java.lang.String_android.provider.Settings.Global.SYS_STORAGE_FULL_THRESHOLD_BYTES|
|java.lang.String_android.provider.Settings.Global.SYS_STORAGE_THRESHOLD_MAX_BYTES|
|java.lang.String_android.provider.Settings.Global.SYS_STORAGE_THRESHOLD_PERCENTAGE|
|java.lang.String_android.provider.Settings.Global.TETHER_DUN_APN|
|java.lang.String_android.provider.Settings.Global.TETHER_DUN_REQUIRED|
|java.lang.String_android.provider.Settings.Global.TETHER_SUPPORTED|
|java.lang.String_android.provider.Settings.Global.TRANSITION_ANIMATION_SCALE|
|java.lang.String_android.provider.Settings.Global.TZINFO_UPDATE_CONTENT_URL|
|java.lang.String_android.provider.Settings.Global.TZINFO_UPDATE_METADATA_URL|
|java.lang.String_android.provider.Settings.Global.UNLOCK_SOUND|
|java.lang.String_android.provider.Settings.Global.USB_MASS_STORAGE_ENABLED|
|java.lang.String_android.provider.Settings.Global.USE_GOOGLE_MAIL|
|java.lang.String_android.provider.Settings.Global.WAIT_FOR_DEBUGGER|
|java.lang.String_android.provider.Settings.Global.WEB_AUTOFILL_QUERY_URL|
|java.lang.String_android.provider.Settings.Global.WIFI_COUNTRY_CODE|
|java.lang.String_android.provider.Settings.Global.WIFI_DISPLAY_CERTIFICATION_ON|
|java.lang.String_android.provider.Settings.Global.WIFI_DISPLAY_ON|
|java.lang.String_android.provider.Settings.Global.WIFI_DISPLAY_WPS_CONFIG|
|java.lang.String_android.provider.Settings.Global.WIFI_FRAMEWORK_SCAN_INTERVAL_MS|
|java.lang.String_android.provider.Settings.Global.WIFI_FREQUENCY_BAND|
|java.lang.String_android.provider.Settings.Global.WIFI_IDLE_MS|
|java.lang.String_android.provider.Settings.Global.WIFI_MAX_DHCP_RETRY_COUNT|
|java.lang.String_android.provider.Settings.Global.WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS|
|java.lang.String_android.provider.Settings.Global.WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON|
|java.lang.String_android.provider.Settings.Global.WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY|
|java.lang.String_android.provider.Settings.Global.WIFI_NUM_OPEN_NETWORKS_KEPT|
|java.lang.String_android.provider.Settings.Global.WIFI_ON|
|java.lang.String_android.provider.Settings.Global.WIFI_P2P_DEVICE_NAME|
|java.lang.String_android.provider.Settings.Global.WIFI_REENABLE_DELAY_MS|
|java.lang.String_android.provider.Settings.Global.WIFI_SAVED_STATE|
|java.lang.String_android.provider.Settings.Global.WIFI_SCAN_ALWAYS_AVAILABLE|
|java.lang.String_android.provider.Settings.Global.WIFI_SCAN_INTERVAL_WHEN_P2P_CONNECTED_MS|
|java.lang.String_android.provider.Settings.Global.WIFI_SLEEP_POLICY|
|int_android.provider.Settings.Global.WIFI_SLEEP_POLICY_DEFAULT|
|int_android.provider.Settings.Global.WIFI_SLEEP_POLICY_NEVER|
|int_android.provider.Settings.Global.WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED|
|java.lang.String_android.provider.Settings.Global.WIFI_SUPPLICANT_SCAN_INTERVAL_MS|
|java.lang.String_android.provider.Settings.Global.WIFI_SUSPEND_OPTIMIZATIONS_ENABLED|
|java.lang.String_android.provider.Settings.Global.WIFI_WATCHDOG_ON|
|java.lang.String_android.provider.Settings.Global.WIFI_WATCHDOG_POOR_NETWORK_TEST_ENABLED|
|java.lang.String_android.provider.Settings.Global.WIMAX_NETWORKS_AVAILABLE_NOTIFICATION_ON|
|java.lang.String_android.provider.Settings.Global.WINDOW_ANIMATION_SCALE|
|java.lang.String_android.provider.Settings.Global.WIRELESS_CHARGING_STARTED_SOUND|
|java.lang.String_android.provider.Settings.Global.WTF_IS_FATAL|

*android.provider.Settings.Global_Constructors*
|android.provider.Settings.Global()|

*android.provider.Settings.Global_Methods*
|android.provider.Settings.Global.getBluetoothA2dpSinkPriorityKey(String)|Get t
|android.provider.Settings.Global.getBluetoothHeadsetPriorityKey(String)|Get th
|android.provider.Settings.Global.getBluetoothInputDevicePriorityKey(String)|Ge
|android.provider.Settings.Global.getBluetoothMapPriorityKey(String)|Get the ke
|android.provider.Settings.Global.getFloat(ContentResolver,String)|Convenience 
|android.provider.Settings.Global.getFloat(ContentResolver,String,float)|Conven
|android.provider.Settings.Global.getInt(ContentResolver,String)|Convenience fu
|android.provider.Settings.Global.getInt(ContentResolver,String,int)|Convenienc
|android.provider.Settings.Global.getLong(ContentResolver,String)|Convenience f
|android.provider.Settings.Global.getLong(ContentResolver,String,long)|Convenie
|android.provider.Settings.Global.getString(ContentResolver,String)|Look up a n
|android.provider.Settings.Global.getStringForUser(ContentResolver,String,int)|
|android.provider.Settings.Global.getUriFor(String)|Construct the content URI f
|android.provider.Settings.Global.putFloat(ContentResolver,String,float)|Conven
|android.provider.Settings.Global.putInt(ContentResolver,String,int)|Convenienc
|android.provider.Settings.Global.putLong(ContentResolver,String,long)|Convenie
|android.provider.Settings.Global.putString(ContentResolver,String,String)|Stor
|android.provider.Settings.Global.putStringForUser(ContentResolver,String,String,int)|

*android.provider.Settings.Global_Description*

Global system settings, containing preferences that always apply identically to 
all defined users. Applications can read these but are not allowed to write; 
like the "Secure" settings, these are for preferences that the user must 
explicitly modify through the system UI or specialized APIs for those values. 



*java.lang.String_android.provider.Settings.Global.ADB_ENABLED*

Whether ADB is enabled. 


*java.lang.String_android.provider.Settings.Global.AIRPLANE_MODE_ON*

Whether Airplane Mode is on. 


*java.lang.String_android.provider.Settings.Global.AIRPLANE_MODE_RADIOS*

A comma separated list of radios that need to be disabled when airplane mode is 
on. This overrides WIFI_ON and BLUETOOTH_ON, if Wi-Fi and bluetooth are 
included in the comma separated list. 


*java.lang.String_android.provider.Settings.Global.AIRPLANE_MODE_TOGGLEABLE_RADIOS*

A comma separated list of radios that should to be disabled when airplane mode 
is on, but can be manually reenabled by the user. For example, if RADIO_WIFI is 
added to both AIRPLANE_MODE_RADIOS and AIRPLANE_MODE_TOGGLEABLE_RADIOS, then 
Wifi will be turned off when entering airplane mode, but the user will be able 
to reenable Wifi in the Settings app. 


*java.lang.String_android.provider.Settings.Global.ALWAYS_FINISH_ACTIVITIES*

If 1, the activity manager will aggressively finish activities and processes as 
soon as they are no longer needed. If 0, the normal extended lifetime is used. 


*java.lang.String_android.provider.Settings.Global.ANIMATOR_DURATION_SCALE*

Scaling factor for Animator-based animations. This affects both the start delay 
and duration of all such animations. Setting to 0 will cause animations to end 
immediately. The default value is 1. 


*java.lang.String_android.provider.Settings.Global.ASSISTED_GPS_ENABLED*

Whether assisted GPS should be enabled or not. 


*java.lang.String_android.provider.Settings.Global.AUDIO_SAFE_VOLUME_STATE*

Persisted safe headphone volume management state by AudioService 


*java.lang.String_android.provider.Settings.Global.AUTO_TIME*

Value to specify if the user prefers the date, time and time zone to be 
automatically fetched from the network (NITZ). 1=yes, 0=no 


*java.lang.String_android.provider.Settings.Global.AUTO_TIME_ZONE*

Value to specify if the user prefers the time zone to be automatically fetched 
from the network (NITZ). 1=yes, 0=no 


*java.lang.String_android.provider.Settings.Global.BATTERY_DISCHARGE_DURATION_THRESHOLD*

Threshold values for the duration and level of a discharge cycle, under which 
we log discharge cycle info. 


*java.lang.String_android.provider.Settings.Global.BATTERY_DISCHARGE_THRESHOLD*




*java.lang.String_android.provider.Settings.Global.BLUETOOTH_A2DP_SINK_PRIORITY_PREFIX*




*java.lang.String_android.provider.Settings.Global.BLUETOOTH_HEADSET_PRIORITY_PREFIX*




*java.lang.String_android.provider.Settings.Global.BLUETOOTH_INPUT_DEVICE_PRIORITY_PREFIX*




*java.lang.String_android.provider.Settings.Global.BLUETOOTH_MAP_PRIORITY_PREFIX*




*java.lang.String_android.provider.Settings.Global.BLUETOOTH_ON*

Whether bluetooth is enabled/disabled 0=disabled. 1=enabled. 


*java.lang.String_android.provider.Settings.Global.BUGREPORT_IN_POWER_MENU*

When the user has enable the option to have a "bug report" command in the power 
menu. 


*java.lang.String_android.provider.Settings.Global.CALL_AUTO_RETRY*

CDMA only settings Whether the auto retry is enabled. The value is boolean (1 
or 0). 


*java.lang.String_android.provider.Settings.Global.CAPTIVE_PORTAL_DETECTION_ENABLED*

Setting to turn off captive portal detection. Feature is enabled by default and 
the setting needs to be set to 0 to disable it. 


*java.lang.String_android.provider.Settings.Global.CAPTIVE_PORTAL_SERVER*

The server used for captive portal detection upon a new conection. A 204 
response code from the server is used for validation. 


*java.lang.String_android.provider.Settings.Global.CAR_DOCK_SOUND*

URI for the car dock "in" event sound. 


*java.lang.String_android.provider.Settings.Global.CAR_UNDOCK_SOUND*

URI for the car dock "out" event sound. 


*java.lang.String_android.provider.Settings.Global.CDMA_CELL_BROADCAST_SMS*

CDMA Cell Broadcast SMS 0 = CDMA Cell Broadcast SMS disabled 1 = CDMA Cell 
Broadcast SMS enabled 


*java.lang.String_android.provider.Settings.Global.CDMA_ROAMING_MODE*

The CDMA roaming mode 0 = Home Networks, CDMA default 1 = Roaming on Affiliated 
networks 2 = Roaming on any networks 


*java.lang.String_android.provider.Settings.Global.CDMA_SUBSCRIPTION_MODE*

The CDMA subscription mode 0 = RUIM/SIM (default) 1 = NV 


*java.lang.String_android.provider.Settings.Global.CERT_PIN_UPDATE_CONTENT_URL*

URL for cert pinlist updates 


*java.lang.String_android.provider.Settings.Global.CERT_PIN_UPDATE_METADATA_URL*

URL for cert pinlist updates 


*java.lang.String_android.provider.Settings.Global.COMPATIBILITY_MODE*

If 0, the compatibility mode is off for all applications. If 1, older 
applications run under compatibility mode. TODO: remove this settings before 
code freeze (bug/1907571) 


*java.lang.String_android.provider.Settings.Global.CONNECTIVITY_CHANGE_DELAY*

The number of milliseconds to delay before sending out 
(|android.net.ConnectivityManager|) broadcasts. 


*java.lang.String_android.provider.Settings.Global.CONNECTIVITY_SAMPLING_INTERVAL_IN_SECONDS*

Network sampling interval, in seconds. We'll generate link information about 
bytes/packets sent and error rates based on data sampled in this interval 


*android.net.Uri_android.provider.Settings.Global.CONTENT_URI*

The content:// style URL for global secure settings items. Not public. 


*java.lang.String_android.provider.Settings.Global.DATA_ACTIVITY_TIMEOUT_MOBILE*

Inactivity timeout to track mobile data activity. 

If set to a positive integer, it indicates the inactivity timeout value in 
seconds to infer the data activity of mobile network. After a period of no 
activity on mobile networks with length specified by the timeout, 
anACTION_DATA_ACTIVITY_CHANGEintent is fired to indicate a transition of 
network status from "active" to "idle". Any subsequent activity on mobile 
networks triggers the firing ofACTION_DATA_ACTIVITY_CHANGEintent indicating 
transition from "idle" to "active". 

Network activity refers to transmitting or receiving data on the network 
interfaces. 

Tracking is disabled if set to zero or negative value. 


*java.lang.String_android.provider.Settings.Global.DATA_ACTIVITY_TIMEOUT_WIFI*

Timeout to tracking Wifi data activity. Same asDATA_ACTIVITY_TIMEOUT_MOBILEbut 
for Wifi network. 


*java.lang.String_android.provider.Settings.Global.DATA_ROAMING*

Whether or not data roaming is enabled. (0 = false, 1 = true) 


*java.lang.String_android.provider.Settings.Global.DATA_STALL_ALARM_AGGRESSIVE_DELAY_IN_MS*

The number of milliseconds to delay when checking for data stalls during 
aggressive detection. (screen on or suspected data stall) 


*java.lang.String_android.provider.Settings.Global.DATA_STALL_ALARM_NON_AGGRESSIVE_DELAY_IN_MS*

The number of milliseconds to delay when checking for data stalls during 
non-aggressive detection. (screen is turned off.) 


*java.lang.String_android.provider.Settings.Global.DEBUG_APP*

Name of an application package to be debugged. 


*java.lang.String_android.provider.Settings.Global.DEFAULT_DNS_SERVER*

Setting for default DNS in case nobody suggests one 


*java.lang.String_android.provider.Settings.Global.DEFAULT_INSTALL_LOCATION*

Default install location value. 0 = auto, let system decide 1 = internal 2 = 
sdcard 


*java.lang.String_android.provider.Settings.Global.DESK_DOCK_SOUND*

URI for the desk dock "in" event sound. 


*java.lang.String_android.provider.Settings.Global.DESK_UNDOCK_SOUND*

URI for the desk dock "out" event sound. 


*java.lang.String_android.provider.Settings.Global.DEVELOPMENT_FORCE_RTL*

Developer setting to force RTL layout. 


*java.lang.String_android.provider.Settings.Global.DEVELOPMENT_SETTINGS_ENABLED*

Whether user has enabled development settings. 


*java.lang.String_android.provider.Settings.Global.DEVICE_PROVISIONED*

Whether the device has been provisioned (0 = false, 1 = true) 


*java.lang.String_android.provider.Settings.Global.DISK_FREE_CHANGE_REPORTING_THRESHOLD*

Threshold for the amount of change in disk free space required to report the 
amount of free space. Used to prevent spamming the logs when the disk free 
space isn't changing frequently. 


*java.lang.String_android.provider.Settings.Global.DISPLAY_DENSITY_FORCED*

The saved value for WindowManagerService.setForcedDisplayDensity(). One integer 
in dpi. If unset, then use the real display density. 


*java.lang.String_android.provider.Settings.Global.DISPLAY_SIZE_FORCED*

The saved value for WindowManagerService.setForcedDisplaySize(). Two integers 
separated by a comma. If unset, then use the real display size. 


*java.lang.String_android.provider.Settings.Global.DOCK_AUDIO_MEDIA_ENABLED*

Use Dock audio output for media: 0 = disabled 1 = enabled 


*java.lang.String_android.provider.Settings.Global.DOCK_SOUNDS_ENABLED*

Whether to play a sound for dock events. 


*java.lang.String_android.provider.Settings.Global.DOWNLOAD_MAX_BYTES_OVER_MOBILE*

The maximum size, in bytes, of a download that the download manager will 
transfer over a non-wifi connection. 


*java.lang.String_android.provider.Settings.Global.DOWNLOAD_RECOMMENDED_MAX_BYTES_OVER_MOBILE*

The recommended maximum size, in bytes, of a download that the download manager 
should transfer over a non-wifi connection. Over this size, the use will be 
warned, but will have the option to start the download over the mobile 
connection anyway. 


*java.lang.String_android.provider.Settings.Global.DROPBOX_AGE_SECONDS*

Maximum age of entries kept by (|android.os.DropBoxManager|) . 


*java.lang.String_android.provider.Settings.Global.DROPBOX_MAX_FILES*

Maximum number of entry files which (|android.os.DropBoxManager|) will keep 
around. 


*java.lang.String_android.provider.Settings.Global.DROPBOX_QUOTA_KB*

Maximum amount of disk space used by (|android.os.DropBoxManager|) no matter 
what. 


*java.lang.String_android.provider.Settings.Global.DROPBOX_QUOTA_PERCENT*

Percent of free disk (excluding reserve) which (|android.os.DropBoxManager|) 
will use. 


*java.lang.String_android.provider.Settings.Global.DROPBOX_RESERVE_PERCENT*

Percent of total disk which (|android.os.DropBoxManager|) will never dip into. 


*java.lang.String_android.provider.Settings.Global.DROPBOX_TAG_PREFIX*

Prefix for per-tag dropbox disable/enable settings. 


*java.lang.String_android.provider.Settings.Global.EMERGENCY_TONE*

CDMA only settings Emergency Tone 0 = Off 1 = Alert 2 = Vibrate 


*java.lang.String_android.provider.Settings.Global.ENABLE_ACCESSIBILITY_GLOBAL_GESTURE_ENABLED*

Setting whether the global gesture for enabling accessibility is enabled. If 
this gesture is enabled the user will be able to perfrom it to enable the 
accessibility state without visiting the settings app. 


*java.lang.String_android.provider.Settings.Global.ERROR_LOGCAT_PREFIX*

Lines of logcat to include with system crash/ANR/etc. reports, as a prefix of 
the dropbox tag of the report type. For example, "logcat_for_system_server_anr" 
controls the lines of logcat captured with system server ANR reports. 0 to 
disable. 


*java.lang.String_android.provider.Settings.Global.FANCY_IME_ANIMATIONS*

Scaling factor for normal window animations. Setting to 0 will disable window 
animations. 


*java.lang.String_android.provider.Settings.Global.GLOBAL_HTTP_PROXY_EXCLUSION_LIST*

Exclusion list for global proxy. This string contains a list of comma-separated 
domains where the global proxy does not apply. Domains should be listed in a 
comma- separated list. Example of acceptable formats: 
".domain1.com,my.domain2.com" Use ConnectivityManager to set/get. 


*java.lang.String_android.provider.Settings.Global.GLOBAL_HTTP_PROXY_HOST*

Host name for global http proxy. Set via ConnectivityManager. 


*java.lang.String_android.provider.Settings.Global.GLOBAL_HTTP_PROXY_PAC*

The location PAC File for the proxy. 


*java.lang.String_android.provider.Settings.Global.GLOBAL_HTTP_PROXY_PORT*

Integer host port for global http proxy. Set via ConnectivityManager. 


*java.lang.String_android.provider.Settings.Global.GPRS_REGISTER_CHECK_PERIOD_MS*

The interval in milliseconds at which to check gprs registration after the 
first registration mismatch of gprs and voice service, to detect possible data 
network registration problems. 


*java.lang.String_android.provider.Settings.Global.HTTP_PROXY*

Host name and port for global http proxy. Uses ':' seperator for between host 
and port. 


*java.lang.String_android.provider.Settings.Global.INET_CONDITION_DEBOUNCE_DOWN_DELAY*

ms during which to consume extra events related to Inet connection condtion 
after a transtion to partly-connected 


*java.lang.String_android.provider.Settings.Global.INET_CONDITION_DEBOUNCE_UP_DELAY*

ms during which to consume extra events related to Inet connection condition 
after a transtion to fully-connected 


*java.lang.String_android.provider.Settings.Global.INSTALL_NON_MARKET_APPS*

Whether the package installer should allow installation of apps downloaded from 
sources other than Google Play. 

1 = allow installing from other sources 0 = only allow installing from Google 
Play 


*java.lang.String_android.provider.Settings.Global.INTENT_FIREWALL_UPDATE_CONTENT_URL*

URL for intent firewall updates 


*java.lang.String_android.provider.Settings.Global.INTENT_FIREWALL_UPDATE_METADATA_URL*

URL for intent firewall update metadata 


*java.lang.String_android.provider.Settings.Global.LOCK_SOUND*

URI for the "device locked" (keyguard shown) sound. 


*java.lang.String_android.provider.Settings.Global.LOW_BATTERY_SOUND*

URI for the low battery sound file. 


*java.lang.String_android.provider.Settings.Global.LOW_BATTERY_SOUND_TIMEOUT*

Milliseconds after screen-off after which low battery sounds will be silenced. 

If zero, battery sounds will always play. Defaults to 
@integer/def_low_battery_sound_timeout in SettingsProvider. 


*java.lang.String_android.provider.Settings.Global.MDC_INITIAL_MAX_RETRY*

The value passed to a Mobile DataConnection via bringUp which defines the 
number of retries to preform when setting up the initial connection. The 
default value defined in DataConnectionTrackerBase#DEFAULT_MDC_INITIAL_RETRY is 
currently 1. 


*java.lang.String_android.provider.Settings.Global.MOBILE_DATA*

Whether mobile data connections are allowed by the user. See 
ConnectivityManager for more info. 


*java.lang.String_android.provider.Settings.Global.MODE_RINGER*

Ringer mode. This is used internally, changing this value will not change the 
ringer mode. See AudioManager. 


*java.lang.String_android.provider.Settings.Global.NETSTATS_DEV_BUCKET_DURATION*




*java.lang.String_android.provider.Settings.Global.NETSTATS_DEV_DELETE_AGE*




*java.lang.String_android.provider.Settings.Global.NETSTATS_DEV_PERSIST_BYTES*




*java.lang.String_android.provider.Settings.Global.NETSTATS_DEV_ROTATE_AGE*




*java.lang.String_android.provider.Settings.Global.NETSTATS_ENABLED*




*java.lang.String_android.provider.Settings.Global.NETSTATS_GLOBAL_ALERT_BYTES*




*java.lang.String_android.provider.Settings.Global.NETSTATS_POLL_INTERVAL*




*java.lang.String_android.provider.Settings.Global.NETSTATS_REPORT_XT_OVER_DEV*




*java.lang.String_android.provider.Settings.Global.NETSTATS_SAMPLE_ENABLED*




*java.lang.String_android.provider.Settings.Global.NETSTATS_TIME_CACHE_MAX_AGE*




*java.lang.String_android.provider.Settings.Global.NETSTATS_UID_BUCKET_DURATION*




*java.lang.String_android.provider.Settings.Global.NETSTATS_UID_DELETE_AGE*




*java.lang.String_android.provider.Settings.Global.NETSTATS_UID_PERSIST_BYTES*




*java.lang.String_android.provider.Settings.Global.NETSTATS_UID_ROTATE_AGE*




*java.lang.String_android.provider.Settings.Global.NETSTATS_UID_TAG_BUCKET_DURATION*




*java.lang.String_android.provider.Settings.Global.NETSTATS_UID_TAG_DELETE_AGE*




*java.lang.String_android.provider.Settings.Global.NETSTATS_UID_TAG_PERSIST_BYTES*




*java.lang.String_android.provider.Settings.Global.NETSTATS_UID_TAG_ROTATE_AGE*




*java.lang.String_android.provider.Settings.Global.NETWORK_PREFERENCE*

User preference for which network(s) should be used. Only the connectivity 
service should touch this. 


*java.lang.String_android.provider.Settings.Global.NITZ_UPDATE_DIFF*

If the NITZ_UPDATE_DIFF time is exceeded then an automatic adjustment to 
SystemClock will be allowed even if NITZ_UPDATE_SPACING has not been exceeded. 


*java.lang.String_android.provider.Settings.Global.NITZ_UPDATE_SPACING*

The length of time in milli-seconds that automatic small adjustments to 
SystemClock are ignored if NITZ_UPDATE_DIFF is not exceeded. 


*java.lang.String_android.provider.Settings.Global.NSD_ON*

Whether network service discovery is enabled. 


*java.lang.String_android.provider.Settings.Global.NTP_SERVER*

Preferred NTP server. 


*java.lang.String_android.provider.Settings.Global.NTP_TIMEOUT*

Timeout in milliseconds to wait for NTP server. 


*java.lang.String_android.provider.Settings.Global.OVERLAY_DISPLAY_DEVICES*

Overlay display devices setting. The associated value is a specially formatted 
string that describes the size and density of simulated secondary display 
devices. 

Format: {width}x{height}/{dpi};... 

Example: 

1280x720/213: make one overlay that is 1280x720 at 213dpi. 
1920x1080/320;1280x720/213: make two overlays, the first at 1080p and the 
second at 720p. If the value is empty, then no overlay display devices are 
created. 


*java.lang.String_android.provider.Settings.Global.PAC_CHANGE_DELAY*

The series of successively longer delays used in retrying to download PAC file. 
Last delay is used between successful PAC downloads. 


*java.lang.String_android.provider.Settings.Global.PACKAGE_VERIFIER_DEFAULT_RESPONSE*

Default response code for package verification. 


*java.lang.String_android.provider.Settings.Global.PACKAGE_VERIFIER_ENABLE*

Whether the package manager should send package verification broadcasts for 
verifiers to review apps prior to installation. 1 = request apps to be verified 
prior to installation, if a verifier exists. 0 = do not verify apps before 
installation 


*java.lang.String_android.provider.Settings.Global.PACKAGE_VERIFIER_INCLUDE_ADB*

Run package verificaiton on apps installed through ADB/ADT/USB 1 = perform 
package verification on ADB installs (default) 0 = bypass package verification 
on ADB installs 


*java.lang.String_android.provider.Settings.Global.PACKAGE_VERIFIER_SETTING_VISIBLE*

Show package verification setting in the Settings app. 1 = show (default) 0 = 
hide 


*java.lang.String_android.provider.Settings.Global.PACKAGE_VERIFIER_TIMEOUT*

Timeout for package verification. 


*java.lang.String_android.provider.Settings.Global.PDP_WATCHDOG_ERROR_POLL_COUNT*

The number of polls to perform (at (|android.provider.Settings.Global|) ) after 
hitting (|android.provider.Settings.Global|) before attempting data connection 
recovery. 


*java.lang.String_android.provider.Settings.Global.PDP_WATCHDOG_ERROR_POLL_INTERVAL_MS*

The interval in milliseconds at which to check packet counts on the mobile data 
interface after (|android.provider.Settings.Global|) outgoing packets has been 
reached without incoming packets. 


*java.lang.String_android.provider.Settings.Global.PDP_WATCHDOG_LONG_POLL_INTERVAL_MS*

The interval in milliseconds at which to check packet counts on the mobile data 
interface when screen is off, to detect possible data connection problems. 


*java.lang.String_android.provider.Settings.Global.PDP_WATCHDOG_MAX_PDP_RESET_FAIL_COUNT*

The number of failed PDP reset attempts before moving to something more 
drastic: re-registering to the network. 


*java.lang.String_android.provider.Settings.Global.PDP_WATCHDOG_POLL_INTERVAL_MS*

The interval in milliseconds at which to check packet counts on the mobile data 
interface when screen is on, to detect possible data connection problems. 


*java.lang.String_android.provider.Settings.Global.PDP_WATCHDOG_TRIGGER_PACKET_COUNT*

The number of outgoing packets sent without seeing an incoming packet that 
triggers a countdown (of (|android.provider.Settings.Global|) device is logged 
to the event log 


*java.lang.String_android.provider.Settings.Global.POWER_SOUNDS_ENABLED*

Whether to play a sound for low-battery alerts. 


*java.lang.String_android.provider.Settings.Global.PREFERRED_NETWORK_MODE*

The preferred network mode 7 = Global 6 = EvDo only 5 = CDMA w/o EvDo 4 = CDMA 
/ EvDo auto 3 = GSM / WCDMA auto 2 = WCDMA only 1 = GSM only 0 = GSM / WCDMA 
preferred 


*java.lang.String_android.provider.Settings.Global.PROVISIONING_APN_ALARM_DELAY_IN_MS*

The number of milliseconds to allow the provisioning apn to remain active 


*java.lang.String_android.provider.Settings.Global.RADIO_BLUETOOTH*

Constant for use in AIRPLANE_MODE_RADIOS to specify Bluetooth radio. 


*java.lang.String_android.provider.Settings.Global.RADIO_CELL*

Constant for use in AIRPLANE_MODE_RADIOS to specify Cellular radio. 


*java.lang.String_android.provider.Settings.Global.RADIO_NFC*

Constant for use in AIRPLANE_MODE_RADIOS to specify NFC radio. 


*java.lang.String_android.provider.Settings.Global.RADIO_WIFI*

Constant for use in AIRPLANE_MODE_RADIOS to specify Wi-Fi radio. 


*java.lang.String_android.provider.Settings.Global.RADIO_WIMAX*




*java.lang.String_android.provider.Settings.Global.READ_EXTERNAL_STORAGE_ENFORCED_DEFAULT*




*java.lang.String_android.provider.Settings.Global.SAMPLING_PROFILER_MS*

A positive value indicates how often the SamplingProfiler should take 
snapshots. Zero value means SamplingProfiler is disabled. 


*java.lang.String_android.provider.Settings.Global.SELINUX_STATUS*

SELinux enforcement status. If 0, permissive; if 1, enforcing. 


*java.lang.String_android.provider.Settings.Global.SELINUX_UPDATE_CONTENT_URL*

URL for selinux (mandatory access control) updates 


*java.lang.String_android.provider.Settings.Global.SELINUX_UPDATE_METADATA_URL*

URL for selinux (mandatory access control) update metadata 


*java.lang.String_android.provider.Settings.Global.SEND_ACTION_APP_ERROR*

Flag for allowing ActivityManagerService to send ACTION_APP_ERROR intents on 
application crashes and ANRs. If this is disabled, the crash/ANR dialog will 
never display the "Report" button. 

Type: int (0 = disallow, 1 = allow) 


*java.lang.String_android.provider.Settings.Global.SET_GLOBAL_HTTP_PROXY*

Enables the UI setting to allow the user to specify the global HTTP proxy and 
associated exclusion list. 


*java.lang.String_android.provider.Settings.Global.SET_INSTALL_LOCATION*

Let user pick default install location. 


*java.lang.String[]_android.provider.Settings.Global.SETTINGS_TO_BACKUP*

Settings to backup. This is here so that it's in the same place as the settings 
keys and easy to update. 

These keys may be mentioned in the SETTINGS_TO_BACKUP arrays in System and 
Secure as well. This is because those tables drive both backup and restore, and 
restore needs to properly whitelist keys that used to live in those namespaces. 
The keys will only actually be backed up / restored if they are also mentioned 
in this table (Global.SETTINGS_TO_BACKUP). 

NOTE: Settings are backed up and restored in the order they appear in this 
array. If you have one setting depending on another, make sure that they are 
ordered appropriately. 


*java.lang.String_android.provider.Settings.Global.SETUP_PREPAID_DATA_SERVICE_URL*

URL to open browser on to allow user to manage a prepay account 


*java.lang.String_android.provider.Settings.Global.SETUP_PREPAID_DETECTION_REDIR_HOST*

Host to check for a redirect to after an attempt to GET 
SETUP_PREPAID_DETECTION_TARGET_URL. (If we redirected there, this is a prepaid 
device with zero balance.) 


*java.lang.String_android.provider.Settings.Global.SETUP_PREPAID_DETECTION_TARGET_URL*

URL to attempt a GET on to see if this is a prepay device 


*java.lang.String_android.provider.Settings.Global.SHOW_PROCESSES*

Control whether the process CPU usage meter should be shown. 


*java.lang.String_android.provider.Settings.Global.SMS_OUTGOING_CHECK_INTERVAL_MS*

The interval in milliseconds at which to check the number of SMS sent out 
without asking for use permit, to limit the un-authorized SMS usage. 


*java.lang.String_android.provider.Settings.Global.SMS_OUTGOING_CHECK_MAX_COUNT*

The number of outgoing SMS sent without asking for user permit (of 
(|android.provider.Settings.Global|) 


*java.lang.String_android.provider.Settings.Global.SMS_SHORT_CODE_CONFIRMATION*

Used to disable SMS short code confirmation - defaults to true. True indcates 
we will do the check, etc. Set to false to disable. 


*java.lang.String_android.provider.Settings.Global.SMS_SHORT_CODE_RULE*

Used to select which country we use to determine premium sms codes. One of 
com.android.internal.telephony.SMSDispatcher.PREMIUM_RULE_USE_SIM, 
com.android.internal.telephony.SMSDispatcher.PREMIUM_RULE_USE_NETWORK, or 
com.android.internal.telephony.SMSDispatcher.PREMIUM_RULE_USE_BOTH. 


*java.lang.String_android.provider.Settings.Global.SMS_SHORT_CODES_UPDATE_CONTENT_URL*

URL for sms short code updates 


*java.lang.String_android.provider.Settings.Global.SMS_SHORT_CODES_UPDATE_METADATA_URL*

URL for sms short code update metadata 


*java.lang.String_android.provider.Settings.Global.STAY_ON_WHILE_PLUGGED_IN*

Whether we keep the device on while the device is plugged in. Supported values 
are: 

0to never stay on while plugged in (|android.os.BatteryManager|) to stay on for 
AC charger (|android.os.BatteryManager|) to stay on for USB charger 
(|android.os.BatteryManager|) to stay on for wireless charger 

These values can be OR-ed together. 


*java.lang.String_android.provider.Settings.Global.SYNC_MAX_RETRY_DELAY_IN_SECONDS*

The maximum reconnect delay for short network outages or when the network is 
suspended due to phone use. 


*java.lang.String_android.provider.Settings.Global.SYS_FREE_STORAGE_LOG_INTERVAL*

The interval in minutes after which the amount of free storage left on the 
device is logged to the event log 


*java.lang.String_android.provider.Settings.Global.SYS_PROP_SETTING_VERSION*




*java.lang.String_android.provider.Settings.Global.SYS_STORAGE_FULL_THRESHOLD_BYTES*

Minimum bytes of free storage on the device before the data partition is 
considered full. By default, 1 MB is reserved to avoid system-wide SQLite disk 
full exceptions. 


*java.lang.String_android.provider.Settings.Global.SYS_STORAGE_THRESHOLD_MAX_BYTES*

Maximum byte size of the low storage threshold. This is to ensure that 
(|android.provider.Settings.Global|) does not result in an overly large 
threshold for large storage devices. Currently this must be less than 2GB. This 
default is 500MB. 


*java.lang.String_android.provider.Settings.Global.SYS_STORAGE_THRESHOLD_PERCENTAGE*

Minimum percentage of free storage on the device that is used to determine if 
the device is running low on storage. The default is 10. 

Say this value is set to 10, the device is considered running low on storage if 
90% or more of the device storage is filled up. 


*java.lang.String_android.provider.Settings.Global.TETHER_DUN_APN*

Used to hold a gservices-provisioned apn value for DUN. If set, or the 
corresponding build config values are set it will override the APN DB values. 
Consists of a comma seperated list of strings: 
"name,apn,proxy,port,username,password,server,mmsc,mmsproxy,mmsport,mcc,mnc,auth,type"
note that empty fields can be ommitted: "name,apn,,,,,,,,,310,260,,DUN" 


*java.lang.String_android.provider.Settings.Global.TETHER_DUN_REQUIRED*

Used to require DUN APN on the device or not - defaults to a build config value 
which defaults to false 


*java.lang.String_android.provider.Settings.Global.TETHER_SUPPORTED*

Used to disable Tethering on a device - defaults to true 


*java.lang.String_android.provider.Settings.Global.TRANSITION_ANIMATION_SCALE*

Scaling factor for activity transition animations. Setting to 0 will disable 
window animations. 


*java.lang.String_android.provider.Settings.Global.TZINFO_UPDATE_CONTENT_URL*

URL for tzinfo (time zone) updates 


*java.lang.String_android.provider.Settings.Global.TZINFO_UPDATE_METADATA_URL*

URL for tzinfo (time zone) update metadata 


*java.lang.String_android.provider.Settings.Global.UNLOCK_SOUND*

URI for the "device unlocked" sound. 


*java.lang.String_android.provider.Settings.Global.USB_MASS_STORAGE_ENABLED*

USB Mass Storage Enabled 


*java.lang.String_android.provider.Settings.Global.USE_GOOGLE_MAIL*

If this setting is set (to anything), then all references to Gmail on the 
device must change to Google Mail. 


*java.lang.String_android.provider.Settings.Global.WAIT_FOR_DEBUGGER*

If 1, when launching DEBUG_APP it will wait for the debugger before starting 
user code. If 0, it will run normally. 


*java.lang.String_android.provider.Settings.Global.WEB_AUTOFILL_QUERY_URL*

Autofill server address (Used in WebView/browser). 


*java.lang.String_android.provider.Settings.Global.WIFI_COUNTRY_CODE*

802.11 country code in ISO 3166 format 


*java.lang.String_android.provider.Settings.Global.WIFI_DISPLAY_CERTIFICATION_ON*

Whether Wifi display certification mode is enabled/disabled 0=disabled. 
1=enabled. 


*java.lang.String_android.provider.Settings.Global.WIFI_DISPLAY_ON*

Whether Wifi display is enabled/disabled 0=disabled. 1=enabled. 


*java.lang.String_android.provider.Settings.Global.WIFI_DISPLAY_WPS_CONFIG*

WPS Configuration method used by Wifi display, this setting only takes effect 
when WIFI_DISPLAY_CERTIFICATION_ON is 1 (enabled). 

Possible values are: 

WpsInfo.INVALID: use default WPS method chosen by framework WpsInfo.PBC : use 
Push button WpsInfo.KEYPAD : use Keypad WpsInfo.DISPLAY: use Display 


*java.lang.String_android.provider.Settings.Global.WIFI_FRAMEWORK_SCAN_INTERVAL_MS*

The interval in milliseconds to issue wake up scans when wifi needs to connect. 
This is necessary to connect to an access point when device is on the move and 
the screen is off. 


*java.lang.String_android.provider.Settings.Global.WIFI_FREQUENCY_BAND*

The operational wifi frequency band Set to one of (|WifiManager|) , 
(|WifiManager|) or (|WifiManager|) 


*java.lang.String_android.provider.Settings.Global.WIFI_IDLE_MS*

The interval in milliseconds after which Wi-Fi is considered idle. When idle, 
it is possible for the device to be switched from Wi-Fi to the mobile data 
network. 


*java.lang.String_android.provider.Settings.Global.WIFI_MAX_DHCP_RETRY_COUNT*

The maximum number of times we will retry a connection to an access point for 
which we have failed in acquiring an IP address from DHCP. A value of N means 
that we will make N+1 connection attempts in all. 


*java.lang.String_android.provider.Settings.Global.WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS*

Maximum amount of time in milliseconds to hold a wakelock while waiting for 
mobile data connectivity to be established after a disconnect from Wi-Fi. 


*java.lang.String_android.provider.Settings.Global.WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON*

Whether to notify the user of open networks. 

If not connected and the scan results have an open network, we will put this 
notification up. If we attempt to connect to a network or the open network(s) 
disappear, we remove the notification. When we show the notification, we will 
not show it again for (|android.provider.Settings.Secure|) time. 


*java.lang.String_android.provider.Settings.Global.WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY*

Delay (in seconds) before repeating the Wi-Fi networks available notification. 
Connecting to a network will reset the timer. 


*java.lang.String_android.provider.Settings.Global.WIFI_NUM_OPEN_NETWORKS_KEPT*

When the number of open networks exceeds this number, the least-recently-used 
excess networks will be removed. 


*java.lang.String_android.provider.Settings.Global.WIFI_ON*

Whether the Wi-Fi should be on. Only the Wi-Fi service should touch this. 


*java.lang.String_android.provider.Settings.Global.WIFI_P2P_DEVICE_NAME*

The Wi-Fi peer-to-peer device name 


*java.lang.String_android.provider.Settings.Global.WIFI_REENABLE_DELAY_MS*

The min time between wifi disable and wifi enable 


*java.lang.String_android.provider.Settings.Global.WIFI_SAVED_STATE*

Used to save the Wifi_ON state prior to tethering. This state will be checked 
to restore Wifi after the user turns off tethering. 


*java.lang.String_android.provider.Settings.Global.WIFI_SCAN_ALWAYS_AVAILABLE*

Setting to allow scans to be enabled even wifi is turned off for connectivity. 


*java.lang.String_android.provider.Settings.Global.WIFI_SCAN_INTERVAL_WHEN_P2P_CONNECTED_MS*

The interval in milliseconds to scan at supplicant when p2p is connected 


*java.lang.String_android.provider.Settings.Global.WIFI_SLEEP_POLICY*

The policy for deciding when Wi-Fi should go to sleep (which will in turn 
switch to using the mobile data as an Internet connection). 

Set to one of (|android.provider.Settings.Global|) , 
(|android.provider.Settings.Global|) , or (|android.provider.Settings.Global|) 
. 


*int_android.provider.Settings.Global.WIFI_SLEEP_POLICY_DEFAULT*

Value for (|android.provider.Settings.Global|) to use the default Wi-Fi sleep 
policy, which is to sleep shortly after the turning off according to the 
(|android.provider.Settings.Global|) setting. 


*int_android.provider.Settings.Global.WIFI_SLEEP_POLICY_NEVER*

Value for (|android.provider.Settings.Global|) to never go to sleep. 


*int_android.provider.Settings.Global.WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED*

Value for (|android.provider.Settings.Global|) to use the default policy when 
the device is on battery, and never go to sleep when the device is plugged in. 


*java.lang.String_android.provider.Settings.Global.WIFI_SUPPLICANT_SCAN_INTERVAL_MS*

The interval in milliseconds to scan as used by the wifi supplicant 


*java.lang.String_android.provider.Settings.Global.WIFI_SUSPEND_OPTIMIZATIONS_ENABLED*

Setting to turn on suspend optimizations at screen off on Wi-Fi. Enabled by 
default and needs to be set to 0 to disable it. 


*java.lang.String_android.provider.Settings.Global.WIFI_WATCHDOG_ON*

Whether the Wi-Fi watchdog is enabled. 


*java.lang.String_android.provider.Settings.Global.WIFI_WATCHDOG_POOR_NETWORK_TEST_ENABLED*

Setting to turn off poor network avoidance on Wi-Fi. Feature is enabled by 
default and the setting needs to be set to 0 to disable it. 


*java.lang.String_android.provider.Settings.Global.WIMAX_NETWORKS_AVAILABLE_NOTIFICATION_ON*




*java.lang.String_android.provider.Settings.Global.WINDOW_ANIMATION_SCALE*

Scaling factor for normal window animations. Setting to 0 will disable window 
animations. 


*java.lang.String_android.provider.Settings.Global.WIRELESS_CHARGING_STARTED_SOUND*

URI for the "wireless charging started" sound. 


*java.lang.String_android.provider.Settings.Global.WTF_IS_FATAL*

Nonzero causes Log.wtf() to crash. 



*android.provider.Settings.Global()*

public Settings.Global()




*android.provider.Settings.Global.getBluetoothA2dpSinkPriorityKey(String)*

public static final |java.lang.String| getBluetoothA2dpSinkPriorityKey(java.lang.String address)

Get the key that retrieves a bluetooth a2dp sink's priority. 



*android.provider.Settings.Global.getBluetoothHeadsetPriorityKey(String)*

public static final |java.lang.String| getBluetoothHeadsetPriorityKey(java.lang.String address)

Get the key that retrieves a bluetooth headset's priority. 



*android.provider.Settings.Global.getBluetoothInputDevicePriorityKey(String)*

public static final |java.lang.String| getBluetoothInputDevicePriorityKey(java.lang.String address)

Get the key that retrieves a bluetooth Input Device's priority. 



*android.provider.Settings.Global.getBluetoothMapPriorityKey(String)*

public static final |java.lang.String| getBluetoothMapPriorityKey(java.lang.String address)

Get the key that retrieves a bluetooth map priority. 



*android.provider.Settings.Global.getFloat(ContentResolver,String)*

public static float getFloat(
  android.content.ContentResolver cr,
  java.lang.String name)
  throws |android.provider.Settings.SettingNotFoundException|
         
Convenience function for retrieving a single secure settings value as a float. 
Note that internally setting values are always stored as strings; this function 
converts the string to a float for you. 

This version does not take a default value. If the setting has not been set, or 
the string value is not a number, it throws 
(|android.provider.Settings.SettingNotFoundException|) . 


    cr - The ContentResolver to access. 
    name - The name of the setting to retrieve. 

    Returns: The setting's current value. 

*android.provider.Settings.Global.getFloat(ContentResolver,String,float)*

public static float getFloat(
  android.content.ContentResolver cr,
  java.lang.String name,
  float def)

Convenience function for retrieving a single secure settings value as a 
floating point number. Note that internally setting values are always stored as 
strings; this function converts the string to an float for you. The default 
value will be returned if the setting is not defined or not a valid float. 


    cr - The ContentResolver to access. 
    name - The name of the setting to retrieve. 
    def - Value to return if the setting is not defined. 

    Returns: The setting's current value, or 'def' if it is not defined or not a valid 
             float. 

*android.provider.Settings.Global.getInt(ContentResolver,String)*

public static int getInt(
  android.content.ContentResolver cr,
  java.lang.String name)
  throws |android.provider.Settings.SettingNotFoundException|
         
Convenience function for retrieving a single secure settings value as an 
integer. Note that internally setting values are always stored as strings; this 
function converts the string to an integer for you. 

This version does not take a default value. If the setting has not been set, or 
the string value is not a number, it throws 
(|android.provider.Settings.SettingNotFoundException|) . 


    cr - The ContentResolver to access. 
    name - The name of the setting to retrieve. 

    Returns: The setting's current value. 

*android.provider.Settings.Global.getInt(ContentResolver,String,int)*

public static int getInt(
  android.content.ContentResolver cr,
  java.lang.String name,
  int def)

Convenience function for retrieving a single secure settings value as an 
integer. Note that internally setting values are always stored as strings; this 
function converts the string to an integer for you. The default value will be 
returned if the setting is not defined or not an integer. 


    cr - The ContentResolver to access. 
    name - The name of the setting to retrieve. 
    def - Value to return if the setting is not defined. 

    Returns: The setting's current value, or 'def' if it is not defined or not a valid 
             integer. 

*android.provider.Settings.Global.getLong(ContentResolver,String)*

public static long getLong(
  android.content.ContentResolver cr,
  java.lang.String name)
  throws |android.provider.Settings.SettingNotFoundException|
         
Convenience function for retrieving a single secure settings value as along. 
Note that internally setting values are always stored as strings; this function 
converts the string to alongfor you. 

This version does not take a default value. If the setting has not been set, or 
the string value is not a number, it throws 
(|android.provider.Settings.SettingNotFoundException|) . 


    cr - The ContentResolver to access. 
    name - The name of the setting to retrieve. 

    Returns: The setting's current value. 

*android.provider.Settings.Global.getLong(ContentResolver,String,long)*

public static long getLong(
  android.content.ContentResolver cr,
  java.lang.String name,
  long def)

Convenience function for retrieving a single secure settings value as along. 
Note that internally setting values are always stored as strings; this function 
converts the string to alongfor you. The default value will be returned if the 
setting is not defined or not along. 


    cr - The ContentResolver to access. 
    name - The name of the setting to retrieve. 
    def - Value to return if the setting is not defined. 

    Returns: The setting's current value, or 'def' if it is not defined or not a valid 
             {@code long}. 

*android.provider.Settings.Global.getString(ContentResolver,String)*

public static |java.lang.String| getString(
  android.content.ContentResolver resolver,
  java.lang.String name)

Look up a name in the database. 


    resolver - to access the database with 
    name - to look up in the table 

    Returns: the corresponding value, or null if not present 

*android.provider.Settings.Global.getStringForUser(ContentResolver,String,int)*

public static |java.lang.String| getStringForUser(
  android.content.ContentResolver resolver,
  java.lang.String name,
  int userHandle)





*android.provider.Settings.Global.getUriFor(String)*

public static |android.net.Uri| getUriFor(java.lang.String name)

Construct the content URI for a particular name/value pair, useful for 
monitoring changes with a ContentObserver. 


    name - to look up in the table 

    Returns: the corresponding content URI, or null if not present 

*android.provider.Settings.Global.putFloat(ContentResolver,String,float)*

public static boolean putFloat(
  android.content.ContentResolver cr,
  java.lang.String name,
  float value)

Convenience function for updating a single settings value as a floating point 
number. This will either create a new entry in the table if the given name does 
not exist, or modify the value of the existing row with that name. Note that 
internally setting values are always stored as strings, so this function 
converts the given value to a string before storing it. 


    cr - The ContentResolver to access. 
    name - The name of the setting to modify. 
    value - The new value for the setting. 

    Returns: true if the value was set, false on database errors 

*android.provider.Settings.Global.putInt(ContentResolver,String,int)*

public static boolean putInt(
  android.content.ContentResolver cr,
  java.lang.String name,
  int value)

Convenience function for updating a single settings value as an integer. This 
will either create a new entry in the table if the given name does not exist, 
or modify the value of the existing row with that name. Note that internally 
setting values are always stored as strings, so this function converts the 
given value to a string before storing it. 


    cr - The ContentResolver to access. 
    name - The name of the setting to modify. 
    value - The new value for the setting. 

    Returns: true if the value was set, false on database errors 

*android.provider.Settings.Global.putLong(ContentResolver,String,long)*

public static boolean putLong(
  android.content.ContentResolver cr,
  java.lang.String name,
  long value)

Convenience function for updating a secure settings value as a long integer. 
This will either create a new entry in the table if the given name does not 
exist, or modify the value of the existing row with that name. Note that 
internally setting values are always stored as strings, so this function 
converts the given value to a string before storing it. 


    cr - The ContentResolver to access. 
    name - The name of the setting to modify. 
    value - The new value for the setting. 

    Returns: true if the value was set, false on database errors 

*android.provider.Settings.Global.putString(ContentResolver,String,String)*

public static boolean putString(
  android.content.ContentResolver resolver,
  java.lang.String name,
  java.lang.String value)

Store a name/value pair into the database. 


    resolver - to access the database with 
    name - to store 
    value - to associate with the name 

    Returns: true if the value was set, false on database errors 

*android.provider.Settings.Global.putStringForUser(ContentResolver,String,String,int)*

public static boolean putStringForUser(
  android.content.ContentResolver resolver,
  java.lang.String name,
  java.lang.String value,
  int userHandle)






