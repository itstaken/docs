*android.animation.AnimatorSet* *AnimatorSet* This class plays a set ofAnimatoro

public final class AnimatorSet
  extends    |android.animation.Animator|

|android.animation.AnimatorSet_Description|
|android.animation.AnimatorSet_Fields|
|android.animation.AnimatorSet_Constructors|
|android.animation.AnimatorSet_Methods|

================================================================================

*android.animation.AnimatorSet_Constructors*
|android.animation.AnimatorSet()|

*android.animation.AnimatorSet_Methods*
|android.animation.AnimatorSet.cancel()|
|android.animation.AnimatorSet.clone()|
|android.animation.AnimatorSet.end()|
|android.animation.AnimatorSet.getChildAnimations()|Returns the current list of
|android.animation.AnimatorSet.getDuration()|Gets the length of each of the chi
|android.animation.AnimatorSet.getInterpolator()|
|android.animation.AnimatorSet.getStartDelay()|The amount of time, in milliseco
|android.animation.AnimatorSet.isRunning()|Returns true if any of the child ani
|android.animation.AnimatorSet.isStarted()|
|android.animation.AnimatorSet.pause()|
|android.animation.AnimatorSet.play(Animator)|This method creates a Builder obj
|android.animation.AnimatorSet.playSequentially(Animator...)|Sets up this Anima
|android.animation.AnimatorSet.playSequentially(List<Animator>)|Sets up this An
|android.animation.AnimatorSet.playTogether(Animator...)|Sets up this AnimatorS
|android.animation.AnimatorSet.playTogether(Collection<Animator>)|Sets up this 
|android.animation.AnimatorSet.resume()|
|android.animation.AnimatorSet.setDuration(long)|Sets the length of each of the
|android.animation.AnimatorSet.setInterpolator(TimeInterpolator)|Sets the TimeI
|android.animation.AnimatorSet.setStartDelay(long)|The amount of time, in milli
|android.animation.AnimatorSet.setTarget(Object)|Sets the target object for all
|android.animation.AnimatorSet.setupEndValues()|
|android.animation.AnimatorSet.setupStartValues()|
|android.animation.AnimatorSet.start()|

*android.animation.AnimatorSet_Description*

This class plays a set of (|android.animation.Animator|) objects in the 
specified order. Animations can be set up to play together, in sequence, or 
after a specified delay. 

There are two different approaches to adding animations to a AnimatorSet: 
either the playTogether()(|android.animation.AnimatorSet|) or 
playSequentially()(|android.animation.AnimatorSet|) methods can be called to 
add a set of animations all at once, or the (|android.animation.AnimatorSet|) 
can be used in conjunction with methods in the 
Builder(|android.animation.AnimatorSet.Builder|) class to add animations one by 
one. 

It is possible to set up a AnimatorSet with circular dependencies between its 
animations. For example, an animation a1 could be set up to start before 
animation a2, a2 before a3, and a3 before a1. The results of this configuration 
are undefined, but will typically result in none of the affected animations 
being played. Because of this (and because circular dependencies do not make 
logical sense anyway), circular dependencies should be avoided, and the 
dependency flow of animations should only be in one direction. 

Developer Guides For more information about animating withAnimatorSet, read the 
<a href="guide/topics/graphics/prop-animation.html#choreography">Property 
Animation developer guide. 



*android.animation.AnimatorSet()*

public AnimatorSet()




*android.animation.AnimatorSet.cancel()*

public void cancel()

Note that canceling a AnimatorSet also cancels all of the animations that it is 
responsible for. 



*android.animation.AnimatorSet.clone()*

public |android.animation.AnimatorSet| clone()





*android.animation.AnimatorSet.end()*

public void end()

Note that ending a AnimatorSet also ends all of the animations that it is 
responsible for. 



*android.animation.AnimatorSet.getChildAnimations()*

public |java.util.ArrayList|<Animator> getChildAnimations()

Returns the current list of child Animator objects controlled by this 
AnimatorSet. This is a copy of the internal list; modifications to the returned 
list will not affect the AnimatorSet, although changes to the underlying 
Animator objects will affect those objects being managed by the AnimatorSet. 



    Returns: ArrayList The list of child animations of this AnimatorSet. 

*android.animation.AnimatorSet.getDuration()*

public long getDuration()

Gets the length of each of the child animations of this AnimatorSet. This value 
may be less than 0, which indicates that no duration has been set on this 
AnimatorSet and each of the child animations will use their own duration. 



    Returns: The length of the animation, in milliseconds, of each of the child animations 
             of this AnimatorSet. 

*android.animation.AnimatorSet.getInterpolator()*

public |android.animation.TimeInterpolator| getInterpolator()





*android.animation.AnimatorSet.getStartDelay()*

public long getStartDelay()

The amount of time, in milliseconds, to delay starting the animation after 
(|android.animation.AnimatorSet|) is called. 



    Returns: the number of milliseconds to delay running the animation 

*android.animation.AnimatorSet.isRunning()*

public boolean isRunning()

Returns true if any of the child animations of this AnimatorSet have been 
started and have not yet ended. 



    Returns: Whether this AnimatorSet has been started and has not yet ended. 

*android.animation.AnimatorSet.isStarted()*

public boolean isStarted()





*android.animation.AnimatorSet.pause()*

public void pause()





*android.animation.AnimatorSet.play(Animator)*

public |android.animation.AnimatorSet.Builder| play(android.animation.Animator anim)

This method creates a Builder object, which is used to set up playing 
constraints. This initial play() method tells the Builder the animation that is 
the dependency for the succeeding commands to the Builder. For example, calling 
play(a1).with(a2) sets up the AnimatorSet to play a1 and a2 at the same time, 
play(a1).before(a2) sets up the AnimatorSet to play a1 first, followed by a2, 
and play(a1).after(a2) sets up the AnimatorSet to play a2 first, followed by 
a1. 

Note that play() is the only way to tell the Builder the animation upon which 
the dependency is created, so successive calls to the various functions in 
Builder will all refer to the initial parameter supplied in play() as the 
dependency of the other animations. For example, calling 
play(a1).before(a2).before(a3) will play both a2 and a3 when a1 ends; it does 
not set up a dependency between a2 and a3. 


    anim - The animation that is the dependency used in later calls to the methods in the 
       returned Builder object. A null parameter will result in a null Builder 
       return value. 

    Returns: Builder The object that constructs the AnimatorSet based on the dependencies 
             outlined in the calls to play and the other methods in the 
             Builder</code object. 

*android.animation.AnimatorSet.playSequentially(Animator...)*

public void playSequentially(android.animation.Animator[] items)

Sets up this AnimatorSet to play each of the supplied animations when the 
previous animation ends. 


    items - The animations that will be started one after another. 

*android.animation.AnimatorSet.playSequentially(List<Animator>)*

public void playSequentially(java.util.List<android.animation.Animator> items)

Sets up this AnimatorSet to play each of the supplied animations when the 
previous animation ends. 


    items - The animations that will be started one after another. 

*android.animation.AnimatorSet.playTogether(Animator...)*

public void playTogether(android.animation.Animator[] items)

Sets up this AnimatorSet to play all of the supplied animations at the same 
time. This is equivalent to calling (|android.animation.AnimatorSet|) with the 
first animator in the set and then (|android.animation.AnimatorSet.Builder|) 
with each of the other animators. Note that an Animator with a 
startDelay(|android.animation.Animator|) will not actually start until that 
delay elapses, which means that if the first animator in the list supplied to 
this constructor has a startDelay, none of the other animators will start until 
that first animator's startDelay has elapsed. 


    items - The animations that will be started simultaneously. 

*android.animation.AnimatorSet.playTogether(Collection<Animator>)*

public void playTogether(java.util.Collection<android.animation.Animator> items)

Sets up this AnimatorSet to play all of the supplied animations at the same 
time. 


    items - The animations that will be started simultaneously. 

*android.animation.AnimatorSet.resume()*

public void resume()





*android.animation.AnimatorSet.setDuration(long)*

public |android.animation.AnimatorSet| setDuration(long duration)

Sets the length of each of the current child animations of this AnimatorSet. By 
default, each child animation will use its own duration. If the duration is set 
on the AnimatorSet, then each child animation inherits this duration. 


    duration - The length of the animation, in milliseconds, of each of the child animations 
       of this AnimatorSet. 

*android.animation.AnimatorSet.setInterpolator(TimeInterpolator)*

public void setInterpolator(android.animation.TimeInterpolator interpolator)

Sets the TimeInterpolator for all current child 
animations(|android.animation.AnimatorSet|) of this AnimatorSet. The default 
value is null, which means that no interpolator is set on this AnimatorSet. 
Setting the interpolator to any non-null value will cause that interpolator to 
be set on the child animations when the set is started. 


    interpolator - the interpolator to be used by each child animation of this AnimatorSet 

*android.animation.AnimatorSet.setStartDelay(long)*

public void setStartDelay(long startDelay)

The amount of time, in milliseconds, to delay starting the animation after 
(|android.animation.AnimatorSet|) is called. 


    startDelay - The amount of the delay, in milliseconds 

*android.animation.AnimatorSet.setTarget(Object)*

public void setTarget(java.lang.Object target)

Sets the target object for all current child 
animations(|android.animation.AnimatorSet|) of this AnimatorSet that take 
targets ( (|android.animation.ObjectAnimator|) and AnimatorSet). 


    target - The object being animated 

*android.animation.AnimatorSet.setupEndValues()*

public void setupEndValues()





*android.animation.AnimatorSet.setupStartValues()*

public void setupStartValues()





*android.animation.AnimatorSet.start()*

public void start()

Starting this AnimatorSet will, in turn, start the animations for which it is 
responsible. The details of when exactly those animations are started depends 
on the dependency relationships that have been set up between the animations. 




