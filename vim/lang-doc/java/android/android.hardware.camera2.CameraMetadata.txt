*android.hardware.camera2.CameraMetadata* *CameraMetadata* The base class for ca

public abstract class CameraMetadata
  extends    |java.lang.Object|

|android.hardware.camera2.CameraMetadata_Description|
|android.hardware.camera2.CameraMetadata_Fields|
|android.hardware.camera2.CameraMetadata_Constructors|
|android.hardware.camera2.CameraMetadata_Methods|

================================================================================

*android.hardware.camera2.CameraMetadata_Fields*
|int_android.hardware.camera2.CameraMetadata.COLOR_CORRECTION_MODE_FAST|
|int_android.hardware.camera2.CameraMetadata.COLOR_CORRECTION_MODE_HIGH_QUALITY|
|int_android.hardware.camera2.CameraMetadata.COLOR_CORRECTION_MODE_TRANSFORM_MATRIX|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AE_ANTIBANDING_MODE_50HZ|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AE_ANTIBANDING_MODE_60HZ|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AE_ANTIBANDING_MODE_AUTO|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AE_ANTIBANDING_MODE_OFF|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AE_MODE_OFF|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AE_MODE_ON|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AE_MODE_ON_ALWAYS_FLASH|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AE_MODE_ON_AUTO_FLASH|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AE_MODE_ON_AUTO_FLASH_REDEYE|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AE_PRECAPTURE_TRIGGER_IDLE|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AE_PRECAPTURE_TRIGGER_START|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AE_STATE_CONVERGED|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AE_STATE_FLASH_REQUIRED|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AE_STATE_INACTIVE|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AE_STATE_LOCKED|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AE_STATE_PRECAPTURE|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AE_STATE_SEARCHING|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AF_MODE_AUTO|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AF_MODE_CONTINUOUS_PICTURE|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AF_MODE_CONTINUOUS_VIDEO|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AF_MODE_EDOF|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AF_MODE_MACRO|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AF_MODE_OFF|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AF_STATE_ACTIVE_SCAN|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AF_STATE_FOCUSED_LOCKED|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AF_STATE_INACTIVE|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AF_STATE_NOT_FOCUSED_LOCKED|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AF_STATE_PASSIVE_FOCUSED|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AF_STATE_PASSIVE_SCAN|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AF_STATE_PASSIVE_UNFOCUSED|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AF_TRIGGER_CANCEL|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AF_TRIGGER_IDLE|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AF_TRIGGER_START|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AWB_MODE_AUTO|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AWB_MODE_CLOUDY_DAYLIGHT|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AWB_MODE_DAYLIGHT|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AWB_MODE_FLUORESCENT|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AWB_MODE_INCANDESCENT|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AWB_MODE_OFF|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AWB_MODE_SHADE|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AWB_MODE_TWILIGHT|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AWB_MODE_WARM_FLUORESCENT|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AWB_STATE_CONVERGED|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AWB_STATE_INACTIVE|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AWB_STATE_LOCKED|
|int_android.hardware.camera2.CameraMetadata.CONTROL_AWB_STATE_SEARCHING|
|int_android.hardware.camera2.CameraMetadata.CONTROL_CAPTURE_INTENT_CUSTOM|
|int_android.hardware.camera2.CameraMetadata.CONTROL_CAPTURE_INTENT_PREVIEW|
|int_android.hardware.camera2.CameraMetadata.CONTROL_CAPTURE_INTENT_STILL_CAPTURE|
|int_android.hardware.camera2.CameraMetadata.CONTROL_CAPTURE_INTENT_VIDEO_RECORD|
|int_android.hardware.camera2.CameraMetadata.CONTROL_CAPTURE_INTENT_VIDEO_SNAPSHOT|
|int_android.hardware.camera2.CameraMetadata.CONTROL_CAPTURE_INTENT_ZERO_SHUTTER_LAG|
|int_android.hardware.camera2.CameraMetadata.CONTROL_EFFECT_MODE_AQUA|
|int_android.hardware.camera2.CameraMetadata.CONTROL_EFFECT_MODE_BLACKBOARD|
|int_android.hardware.camera2.CameraMetadata.CONTROL_EFFECT_MODE_MONO|
|int_android.hardware.camera2.CameraMetadata.CONTROL_EFFECT_MODE_NEGATIVE|
|int_android.hardware.camera2.CameraMetadata.CONTROL_EFFECT_MODE_OFF|
|int_android.hardware.camera2.CameraMetadata.CONTROL_EFFECT_MODE_POSTERIZE|
|int_android.hardware.camera2.CameraMetadata.CONTROL_EFFECT_MODE_SEPIA|
|int_android.hardware.camera2.CameraMetadata.CONTROL_EFFECT_MODE_SOLARIZE|
|int_android.hardware.camera2.CameraMetadata.CONTROL_EFFECT_MODE_WHITEBOARD|
|int_android.hardware.camera2.CameraMetadata.CONTROL_MODE_AUTO|
|int_android.hardware.camera2.CameraMetadata.CONTROL_MODE_OFF|
|int_android.hardware.camera2.CameraMetadata.CONTROL_MODE_USE_SCENE_MODE|
|int_android.hardware.camera2.CameraMetadata.CONTROL_SCENE_MODE_ACTION|
|int_android.hardware.camera2.CameraMetadata.CONTROL_SCENE_MODE_BARCODE|
|int_android.hardware.camera2.CameraMetadata.CONTROL_SCENE_MODE_BEACH|
|int_android.hardware.camera2.CameraMetadata.CONTROL_SCENE_MODE_CANDLELIGHT|
|int_android.hardware.camera2.CameraMetadata.CONTROL_SCENE_MODE_FACE_PRIORITY|
|int_android.hardware.camera2.CameraMetadata.CONTROL_SCENE_MODE_FIREWORKS|
|int_android.hardware.camera2.CameraMetadata.CONTROL_SCENE_MODE_LANDSCAPE|
|int_android.hardware.camera2.CameraMetadata.CONTROL_SCENE_MODE_NIGHT|
|int_android.hardware.camera2.CameraMetadata.CONTROL_SCENE_MODE_NIGHT_PORTRAIT|
|int_android.hardware.camera2.CameraMetadata.CONTROL_SCENE_MODE_PARTY|
|int_android.hardware.camera2.CameraMetadata.CONTROL_SCENE_MODE_PORTRAIT|
|int_android.hardware.camera2.CameraMetadata.CONTROL_SCENE_MODE_SNOW|
|int_android.hardware.camera2.CameraMetadata.CONTROL_SCENE_MODE_SPORTS|
|int_android.hardware.camera2.CameraMetadata.CONTROL_SCENE_MODE_STEADYPHOTO|
|int_android.hardware.camera2.CameraMetadata.CONTROL_SCENE_MODE_SUNSET|
|int_android.hardware.camera2.CameraMetadata.CONTROL_SCENE_MODE_THEATRE|
|int_android.hardware.camera2.CameraMetadata.CONTROL_SCENE_MODE_UNSUPPORTED|
|int_android.hardware.camera2.CameraMetadata.EDGE_MODE_FAST|
|int_android.hardware.camera2.CameraMetadata.EDGE_MODE_HIGH_QUALITY|
|int_android.hardware.camera2.CameraMetadata.EDGE_MODE_OFF|
|int_android.hardware.camera2.CameraMetadata.FLASH_MODE_OFF|
|int_android.hardware.camera2.CameraMetadata.FLASH_MODE_SINGLE|
|int_android.hardware.camera2.CameraMetadata.FLASH_MODE_TORCH|
|int_android.hardware.camera2.CameraMetadata.FLASH_STATE_CHARGING|
|int_android.hardware.camera2.CameraMetadata.FLASH_STATE_FIRED|
|int_android.hardware.camera2.CameraMetadata.FLASH_STATE_READY|
|int_android.hardware.camera2.CameraMetadata.FLASH_STATE_UNAVAILABLE|
|int_android.hardware.camera2.CameraMetadata.INFO_SUPPORTED_HARDWARE_LEVEL_FULL|
|int_android.hardware.camera2.CameraMetadata.INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED|
|int_android.hardware.camera2.CameraMetadata.LED_AVAILABLE_LEDS_TRANSMIT|
|int_android.hardware.camera2.CameraMetadata.LENS_FACING_BACK|
|int_android.hardware.camera2.CameraMetadata.LENS_FACING_FRONT|
|int_android.hardware.camera2.CameraMetadata.LENS_OPTICAL_STABILIZATION_MODE_OFF|
|int_android.hardware.camera2.CameraMetadata.LENS_OPTICAL_STABILIZATION_MODE_ON|
|int_android.hardware.camera2.CameraMetadata.LENS_STATE_MOVING|
|int_android.hardware.camera2.CameraMetadata.LENS_STATE_STATIONARY|
|int_android.hardware.camera2.CameraMetadata.NOISE_REDUCTION_MODE_FAST|
|int_android.hardware.camera2.CameraMetadata.NOISE_REDUCTION_MODE_HIGH_QUALITY|
|int_android.hardware.camera2.CameraMetadata.NOISE_REDUCTION_MODE_OFF|
|int_android.hardware.camera2.CameraMetadata.STATISTICS_FACE_DETECT_MODE_FULL|
|int_android.hardware.camera2.CameraMetadata.STATISTICS_FACE_DETECT_MODE_OFF|
|int_android.hardware.camera2.CameraMetadata.STATISTICS_FACE_DETECT_MODE_SIMPLE|
|int_android.hardware.camera2.CameraMetadata.STATISTICS_LENS_SHADING_MAP_MODE_OFF|
|int_android.hardware.camera2.CameraMetadata.STATISTICS_LENS_SHADING_MAP_MODE_ON|
|int_android.hardware.camera2.CameraMetadata.STATISTICS_SCENE_FLICKER_50HZ|
|int_android.hardware.camera2.CameraMetadata.STATISTICS_SCENE_FLICKER_60HZ|
|int_android.hardware.camera2.CameraMetadata.STATISTICS_SCENE_FLICKER_NONE|
|int_android.hardware.camera2.CameraMetadata.TONEMAP_MODE_CONTRAST_CURVE|
|int_android.hardware.camera2.CameraMetadata.TONEMAP_MODE_FAST|
|int_android.hardware.camera2.CameraMetadata.TONEMAP_MODE_HIGH_QUALITY|

*android.hardware.camera2.CameraMetadata_Constructors*
|android.hardware.camera2.CameraMetadata()|Set a camera metadata field to a val

*android.hardware.camera2.CameraMetadata_Methods*
|android.hardware.camera2.CameraMetadata.get(CameraMetadata.Key<T>)|Get a camer
|android.hardware.camera2.CameraMetadata.getKeys()|Returns a list of the keys c

*android.hardware.camera2.CameraMetadata_Description*

The base class for camera controls and information. 

This class defines the basic key/value map used for querying for camera 
characteristics or capture results, and for setting camera request parameters. 

All instances of CameraMetadata are immutable. The list of keys with 
(|android.hardware.camera2.CameraMetadata|) never changes, nor do the values 
returned by any key with (|android.hardware.camera2.CameraMetadata|) throughout 
the lifetime of the object. 



*int_android.hardware.camera2.CameraMetadata.COLOR_CORRECTION_MODE_FAST*

Must not slow down frame rate relative to raw bayer output 


*int_android.hardware.camera2.CameraMetadata.COLOR_CORRECTION_MODE_HIGH_QUALITY*

Frame rate may be reduced by high quality 


*int_android.hardware.camera2.CameraMetadata.COLOR_CORRECTION_MODE_TRANSFORM_MATRIX*

Use the android.colorCorrection.transform matrix and 
android.colorCorrection.gains to do color conversion 


*int_android.hardware.camera2.CameraMetadata.CONTROL_AE_ANTIBANDING_MODE_50HZ*




*int_android.hardware.camera2.CameraMetadata.CONTROL_AE_ANTIBANDING_MODE_60HZ*




*int_android.hardware.camera2.CameraMetadata.CONTROL_AE_ANTIBANDING_MODE_AUTO*




*int_android.hardware.camera2.CameraMetadata.CONTROL_AE_ANTIBANDING_MODE_OFF*




*int_android.hardware.camera2.CameraMetadata.CONTROL_AE_MODE_OFF*

Autoexposure is disabled; sensor.exposureTime, sensor.sensitivity and 
sensor.frameDuration are used 


*int_android.hardware.camera2.CameraMetadata.CONTROL_AE_MODE_ON*

Autoexposure is active, no flash control 


*int_android.hardware.camera2.CameraMetadata.CONTROL_AE_MODE_ON_ALWAYS_FLASH*

if flash exists Autoexposure is active, auto flash control for precapture 
trigger and always flash when captureIntent = STILL_CAPTURE 


*int_android.hardware.camera2.CameraMetadata.CONTROL_AE_MODE_ON_AUTO_FLASH*

if flash exists Autoexposure is active, auto flash control; flash may be fired 
when precapture trigger is activated, and for captures for which captureIntent 
= STILL_CAPTURE 


*int_android.hardware.camera2.CameraMetadata.CONTROL_AE_MODE_ON_AUTO_FLASH_REDEYE*

optional Automatic red eye reduction with flash. If deemed necessary, red eye 
reduction sequence should fire when precapture trigger is activated, and final 
flash should fire when captureIntent = STILL_CAPTURE 


*int_android.hardware.camera2.CameraMetadata.CONTROL_AE_PRECAPTURE_TRIGGER_IDLE*

The trigger is idle. 


*int_android.hardware.camera2.CameraMetadata.CONTROL_AE_PRECAPTURE_TRIGGER_START*

The precapture metering sequence must be started. The exact effect of the 
precapture trigger depends on the current AE mode and state. 


*int_android.hardware.camera2.CameraMetadata.CONTROL_AE_STATE_CONVERGED*

AE has a good set of control values for the current scene 


*int_android.hardware.camera2.CameraMetadata.CONTROL_AE_STATE_FLASH_REQUIRED*

AE has a good set of control values, but flash needs to be fired for good 
quality still capture 


*int_android.hardware.camera2.CameraMetadata.CONTROL_AE_STATE_INACTIVE*

AE is off. When a camera device is opened, it starts in this state. 


*int_android.hardware.camera2.CameraMetadata.CONTROL_AE_STATE_LOCKED*

AE has been locked (aeMode = LOCKED) 


*int_android.hardware.camera2.CameraMetadata.CONTROL_AE_STATE_PRECAPTURE*

AE has been asked to do a precapture sequence (through the 
trigger_action(CAMERA2_TRIGGER_PRECAPTURE_METERING) call), and is currently 
executing it. Once PRECAPTURE completes, AE will transition to CONVERGED or 
FLASH_REQUIRED as appropriate 


*int_android.hardware.camera2.CameraMetadata.CONTROL_AE_STATE_SEARCHING*

AE doesn't yet have a good set of control values for the current scene 


*int_android.hardware.camera2.CameraMetadata.CONTROL_AF_MODE_AUTO*

if lens is not fixed focus. 

Use android.lens.minimumFocusDistance to determine if lens is fixed focus In 
this mode, the lens does not move unless the autofocus trigger action is 
called. When that trigger is activated, AF must transition to ACTIVE_SCAN, then 
to the outcome of the scan (FOCUSED or NOT_FOCUSED). 

Triggering cancel AF resets the lens position to default, and sets the AF state 
to INACTIVE. 


*int_android.hardware.camera2.CameraMetadata.CONTROL_AF_MODE_CONTINUOUS_PICTURE*

In this mode, the AF algorithm modifies the lens position continually to 
attempt to provide a constantly-in-focus image stream. 

The focusing behavior should be suitable for still image capture; typically 
this means focusing as fast as possible. When the AF trigger is not involved, 
the AF algorithm should start in INACTIVE state, and then transition into 
PASSIVE_SCAN and PASSIVE_FOCUSED states as appropriate as it attempts to 
maintain focus. When the AF trigger is activated, the algorithm should finish 
its PASSIVE_SCAN if active, and then transition into AF_FOCUSED or 
AF_NOT_FOCUSED as appropriate, and lock the lens position until a cancel AF 
trigger is received. 

When the AF cancel trigger is activated, the algorithm should transition back 
to INACTIVE and then act as if it has just been started. 


*int_android.hardware.camera2.CameraMetadata.CONTROL_AF_MODE_CONTINUOUS_VIDEO*

In this mode, the AF algorithm modifies the lens position continually to 
attempt to provide a constantly-in-focus image stream. 

The focusing behavior should be suitable for good quality video recording; 
typically this means slower focus movement and no overshoots. When the AF 
trigger is not involved, the AF algorithm should start in INACTIVE state, and 
then transition into PASSIVE_SCAN and PASSIVE_FOCUSED states as appropriate. 
When the AF trigger is activated, the algorithm should immediately transition 
into AF_FOCUSED or AF_NOT_FOCUSED as appropriate, and lock the lens position 
until a cancel AF trigger is received. 

Once cancel is received, the algorithm should transition back to INACTIVE and 
resume passive scan. Note that this behavior is not identical to 
CONTINUOUS_PICTURE, since an ongoing PASSIVE_SCAN must immediately be canceled. 


*int_android.hardware.camera2.CameraMetadata.CONTROL_AF_MODE_EDOF*

Extended depth of field (digital focus). AF trigger is ignored, AF state should 
always be INACTIVE. 


*int_android.hardware.camera2.CameraMetadata.CONTROL_AF_MODE_MACRO*

In this mode, the lens does not move unless the autofocus trigger action is 
called. 

When that trigger is activated, AF must transition to ACTIVE_SCAN, then to the 
outcome of the scan (FOCUSED or NOT_FOCUSED). Triggering cancel AF resets the 
lens position to default, and sets the AF state to INACTIVE. 


*int_android.hardware.camera2.CameraMetadata.CONTROL_AF_MODE_OFF*

The 3A routines do not control the lens; android.lens.focusDistance is 
controlled by the application 


*int_android.hardware.camera2.CameraMetadata.CONTROL_AF_STATE_ACTIVE_SCAN*

if AUTO or MACRO modes are supported. AF is doing an AF scan because it was 
triggered by AF trigger 


*int_android.hardware.camera2.CameraMetadata.CONTROL_AF_STATE_FOCUSED_LOCKED*

if any AF mode besides OFF is supported. AF believes it is focused correctly 
and is locked 


*int_android.hardware.camera2.CameraMetadata.CONTROL_AF_STATE_INACTIVE*

AF off or has not yet tried to scan/been asked to scan. When a camera device is 
opened, it starts in this state. 


*int_android.hardware.camera2.CameraMetadata.CONTROL_AF_STATE_NOT_FOCUSED_LOCKED*

if any AF mode besides OFF is supported. AF has failed to focus successfully 
and is locked 


*int_android.hardware.camera2.CameraMetadata.CONTROL_AF_STATE_PASSIVE_FOCUSED*

if CONTINUOUS_* modes are supported. AF currently believes it is in focus, but 
may restart scanning at any time. 


*int_android.hardware.camera2.CameraMetadata.CONTROL_AF_STATE_PASSIVE_SCAN*

if CONTINUOUS_* modes are supported. AF is currently doing an AF scan initiated 
by a continuous autofocus mode 


*int_android.hardware.camera2.CameraMetadata.CONTROL_AF_STATE_PASSIVE_UNFOCUSED*

if CONTINUOUS_* modes are supported. AF finished a passive scan without finding 
focus, and may restart scanning at any time. 


*int_android.hardware.camera2.CameraMetadata.CONTROL_AF_TRIGGER_CANCEL*

Autofocus must return to initial state, and cancel any active trigger. 


*int_android.hardware.camera2.CameraMetadata.CONTROL_AF_TRIGGER_IDLE*

The trigger is idle. 


*int_android.hardware.camera2.CameraMetadata.CONTROL_AF_TRIGGER_START*

Autofocus must trigger now. 


*int_android.hardware.camera2.CameraMetadata.CONTROL_AWB_MODE_AUTO*




*int_android.hardware.camera2.CameraMetadata.CONTROL_AWB_MODE_CLOUDY_DAYLIGHT*




*int_android.hardware.camera2.CameraMetadata.CONTROL_AWB_MODE_DAYLIGHT*




*int_android.hardware.camera2.CameraMetadata.CONTROL_AWB_MODE_FLUORESCENT*




*int_android.hardware.camera2.CameraMetadata.CONTROL_AWB_MODE_INCANDESCENT*




*int_android.hardware.camera2.CameraMetadata.CONTROL_AWB_MODE_OFF*




*int_android.hardware.camera2.CameraMetadata.CONTROL_AWB_MODE_SHADE*




*int_android.hardware.camera2.CameraMetadata.CONTROL_AWB_MODE_TWILIGHT*




*int_android.hardware.camera2.CameraMetadata.CONTROL_AWB_MODE_WARM_FLUORESCENT*




*int_android.hardware.camera2.CameraMetadata.CONTROL_AWB_STATE_CONVERGED*

AWB has a good set of control values for the current scene 


*int_android.hardware.camera2.CameraMetadata.CONTROL_AWB_STATE_INACTIVE*

AWB is not in auto mode. When a camera device is opened, it starts in this 
state. 


*int_android.hardware.camera2.CameraMetadata.CONTROL_AWB_STATE_LOCKED*

AE has been locked (aeMode = LOCKED) 


*int_android.hardware.camera2.CameraMetadata.CONTROL_AWB_STATE_SEARCHING*

AWB doesn't yet have a good set of control values for the current scene 


*int_android.hardware.camera2.CameraMetadata.CONTROL_CAPTURE_INTENT_CUSTOM*

This request doesn't fall into the other categories. Default to preview-like 
behavior. 


*int_android.hardware.camera2.CameraMetadata.CONTROL_CAPTURE_INTENT_PREVIEW*

This request is for a preview-like usecase. The precapture trigger may be used 
to start off a metering w/flash sequence 


*int_android.hardware.camera2.CameraMetadata.CONTROL_CAPTURE_INTENT_STILL_CAPTURE*

This request is for a still capture-type usecase. 


*int_android.hardware.camera2.CameraMetadata.CONTROL_CAPTURE_INTENT_VIDEO_RECORD*

This request is for a video recording usecase. 


*int_android.hardware.camera2.CameraMetadata.CONTROL_CAPTURE_INTENT_VIDEO_SNAPSHOT*

This request is for a video snapshot (still image while recording video) 
usecase 


*int_android.hardware.camera2.CameraMetadata.CONTROL_CAPTURE_INTENT_ZERO_SHUTTER_LAG*

This request is for a ZSL usecase; the application will stream full-resolution 
images and reprocess one or several later for a final capture 


*int_android.hardware.camera2.CameraMetadata.CONTROL_EFFECT_MODE_AQUA*




*int_android.hardware.camera2.CameraMetadata.CONTROL_EFFECT_MODE_BLACKBOARD*




*int_android.hardware.camera2.CameraMetadata.CONTROL_EFFECT_MODE_MONO*




*int_android.hardware.camera2.CameraMetadata.CONTROL_EFFECT_MODE_NEGATIVE*




*int_android.hardware.camera2.CameraMetadata.CONTROL_EFFECT_MODE_OFF*




*int_android.hardware.camera2.CameraMetadata.CONTROL_EFFECT_MODE_POSTERIZE*




*int_android.hardware.camera2.CameraMetadata.CONTROL_EFFECT_MODE_SEPIA*




*int_android.hardware.camera2.CameraMetadata.CONTROL_EFFECT_MODE_SOLARIZE*




*int_android.hardware.camera2.CameraMetadata.CONTROL_EFFECT_MODE_WHITEBOARD*




*int_android.hardware.camera2.CameraMetadata.CONTROL_MODE_AUTO*

Use settings for each individual 3A routine. Manual control of capture 
parameters is disabled. All controls in android.control.* besides sceneMode 
take effect 


*int_android.hardware.camera2.CameraMetadata.CONTROL_MODE_OFF*

Full application control of pipeline. All 3A routines are disabled, no other 
settings in android.control.* have any effect 


*int_android.hardware.camera2.CameraMetadata.CONTROL_MODE_USE_SCENE_MODE*

Use specific scene mode. Enabling this disables control.aeMode, control.awbMode 
and control.afMode controls; the HAL must ignore those settings while 
USE_SCENE_MODE is active (except for FACE_PRIORITY scene mode). Other control 
entries are still active. This setting can only be used if availableSceneModes 
!= UNSUPPORTED 


*int_android.hardware.camera2.CameraMetadata.CONTROL_SCENE_MODE_ACTION*




*int_android.hardware.camera2.CameraMetadata.CONTROL_SCENE_MODE_BARCODE*




*int_android.hardware.camera2.CameraMetadata.CONTROL_SCENE_MODE_BEACH*




*int_android.hardware.camera2.CameraMetadata.CONTROL_SCENE_MODE_CANDLELIGHT*




*int_android.hardware.camera2.CameraMetadata.CONTROL_SCENE_MODE_FACE_PRIORITY*

if face detection support exists Use face detection data to drive 3A routines. 
If face detection statistics are disabled, should still operate correctly (but 
not return face detection statistics to the framework). 

Unlike the other scene modes, aeMode, awbMode, and afMode remain active when 
FACE_PRIORITY is set. This is due to compatibility concerns with the old camera 
API 


*int_android.hardware.camera2.CameraMetadata.CONTROL_SCENE_MODE_FIREWORKS*




*int_android.hardware.camera2.CameraMetadata.CONTROL_SCENE_MODE_LANDSCAPE*




*int_android.hardware.camera2.CameraMetadata.CONTROL_SCENE_MODE_NIGHT*




*int_android.hardware.camera2.CameraMetadata.CONTROL_SCENE_MODE_NIGHT_PORTRAIT*




*int_android.hardware.camera2.CameraMetadata.CONTROL_SCENE_MODE_PARTY*




*int_android.hardware.camera2.CameraMetadata.CONTROL_SCENE_MODE_PORTRAIT*




*int_android.hardware.camera2.CameraMetadata.CONTROL_SCENE_MODE_SNOW*




*int_android.hardware.camera2.CameraMetadata.CONTROL_SCENE_MODE_SPORTS*




*int_android.hardware.camera2.CameraMetadata.CONTROL_SCENE_MODE_STEADYPHOTO*




*int_android.hardware.camera2.CameraMetadata.CONTROL_SCENE_MODE_SUNSET*




*int_android.hardware.camera2.CameraMetadata.CONTROL_SCENE_MODE_THEATRE*




*int_android.hardware.camera2.CameraMetadata.CONTROL_SCENE_MODE_UNSUPPORTED*




*int_android.hardware.camera2.CameraMetadata.EDGE_MODE_FAST*

Must not slow down frame rate relative to raw bayer output 


*int_android.hardware.camera2.CameraMetadata.EDGE_MODE_HIGH_QUALITY*

Frame rate may be reduced by high quality 


*int_android.hardware.camera2.CameraMetadata.EDGE_MODE_OFF*

No edge enhancement is applied 


*int_android.hardware.camera2.CameraMetadata.FLASH_MODE_OFF*

Do not fire the flash for this capture 


*int_android.hardware.camera2.CameraMetadata.FLASH_MODE_SINGLE*

if android.flash.available is true Fire flash for this capture based on 
firingPower, firingTime. 


*int_android.hardware.camera2.CameraMetadata.FLASH_MODE_TORCH*

if android.flash.available is true Flash continuously on, power set by 
firingPower 


*int_android.hardware.camera2.CameraMetadata.FLASH_STATE_CHARGING*

if android.flash.available is true Flash is charging and cannot be fired 


*int_android.hardware.camera2.CameraMetadata.FLASH_STATE_FIRED*

if android.flash.available is true Flash fired for this capture 


*int_android.hardware.camera2.CameraMetadata.FLASH_STATE_READY*

if android.flash.available is true Flash is ready to fire 


*int_android.hardware.camera2.CameraMetadata.FLASH_STATE_UNAVAILABLE*

No flash on camera 


*int_android.hardware.camera2.CameraMetadata.INFO_SUPPORTED_HARDWARE_LEVEL_FULL*




*int_android.hardware.camera2.CameraMetadata.INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED*




*int_android.hardware.camera2.CameraMetadata.LED_AVAILABLE_LEDS_TRANSMIT*

android.led.transmit control is used 


*int_android.hardware.camera2.CameraMetadata.LENS_FACING_BACK*




*int_android.hardware.camera2.CameraMetadata.LENS_FACING_FRONT*




*int_android.hardware.camera2.CameraMetadata.LENS_OPTICAL_STABILIZATION_MODE_OFF*




*int_android.hardware.camera2.CameraMetadata.LENS_OPTICAL_STABILIZATION_MODE_ON*




*int_android.hardware.camera2.CameraMetadata.LENS_STATE_MOVING*




*int_android.hardware.camera2.CameraMetadata.LENS_STATE_STATIONARY*




*int_android.hardware.camera2.CameraMetadata.NOISE_REDUCTION_MODE_FAST*

Must not slow down frame rate relative to raw bayer output 


*int_android.hardware.camera2.CameraMetadata.NOISE_REDUCTION_MODE_HIGH_QUALITY*

May slow down frame rate to provide highest quality 


*int_android.hardware.camera2.CameraMetadata.NOISE_REDUCTION_MODE_OFF*

No noise reduction is applied 


*int_android.hardware.camera2.CameraMetadata.STATISTICS_FACE_DETECT_MODE_FULL*

Optional Return all face metadata 


*int_android.hardware.camera2.CameraMetadata.STATISTICS_FACE_DETECT_MODE_OFF*




*int_android.hardware.camera2.CameraMetadata.STATISTICS_FACE_DETECT_MODE_SIMPLE*

Optional Return rectangle and confidence only 


*int_android.hardware.camera2.CameraMetadata.STATISTICS_LENS_SHADING_MAP_MODE_OFF*




*int_android.hardware.camera2.CameraMetadata.STATISTICS_LENS_SHADING_MAP_MODE_ON*




*int_android.hardware.camera2.CameraMetadata.STATISTICS_SCENE_FLICKER_50HZ*




*int_android.hardware.camera2.CameraMetadata.STATISTICS_SCENE_FLICKER_60HZ*




*int_android.hardware.camera2.CameraMetadata.STATISTICS_SCENE_FLICKER_NONE*




*int_android.hardware.camera2.CameraMetadata.TONEMAP_MODE_CONTRAST_CURVE*

Use the tone mapping curve specified in android.tonemap.curve 


*int_android.hardware.camera2.CameraMetadata.TONEMAP_MODE_FAST*

Must not slow down frame rate relative to raw bayer output 


*int_android.hardware.camera2.CameraMetadata.TONEMAP_MODE_HIGH_QUALITY*

Frame rate may be reduced by high quality 



*android.hardware.camera2.CameraMetadata()*

protected CameraMetadata()

Set a camera metadata field to a value. The field definitions can be found in 
(|android.hardware.camera2.CameraCharacteristics|) , 
(|android.hardware.camera2.CaptureResult|) , and 
(|android.hardware.camera2.CaptureRequest|) . 

    key - The metadata field to write. 
    value - The value to set the field to, which must be of a matching type to the key. 

*android.hardware.camera2.CameraMetadata.get(CameraMetadata.Key<T>)*

public abstract |T| get(android.hardware.camera2.CameraMetadata.Key<T> key)

Get a camera metadata field value. 

The field definitions can be found in 
(|android.hardware.camera2.CameraCharacteristics|) , 
(|android.hardware.camera2.CaptureResult|) , and 
(|android.hardware.camera2.CaptureRequest|) . 

Querying the value for the same key more than once will return a value which is 
equal to the previous queried value. 


    key - The metadata field to read. 

    Returns: The value of that key, or {@code null} if the field is not set. 

*android.hardware.camera2.CameraMetadata.getKeys()*

public |java.util.List|<Key<?>> getKeys()

Returns a list of the keys contained in this map. 

The list returned is not modifiable, so any attempts to modify it will throw 
aUnsupportedOperationException. 

All values retrieved by a key from this list with 
(|android.hardware.camera2.CameraMetadata|) are guaranteed to be non-null. Each 
key is only listed once in the list. The order of the keys is undefined. 



    Returns: List of the keys contained in this map. 


