*android.view.inputmethod.EditorInfo* *EditorInfo* An EditorInfo describes sever

public class EditorInfo
  extends    |java.lang.Object|
  implements |android.text.InputType|
             |android.os.Parcelable|

|android.view.inputmethod.EditorInfo_Description|
|android.view.inputmethod.EditorInfo_Fields|
|android.view.inputmethod.EditorInfo_Constructors|
|android.view.inputmethod.EditorInfo_Methods|

================================================================================

*android.view.inputmethod.EditorInfo_Fields*
|int_android.view.inputmethod.EditorInfo.actionId|
|java.lang.CharSequence_android.view.inputmethod.EditorInfo.actionLabel|
|android.os.Parcelable.Creator<android.view.inputmethod.EditorInfo>_android.view.inputmethod.EditorInfo.CREATOR|
|android.os.Bundle_android.view.inputmethod.EditorInfo.extras|
|int_android.view.inputmethod.EditorInfo.fieldId|
|java.lang.String_android.view.inputmethod.EditorInfo.fieldName|
|java.lang.CharSequence_android.view.inputmethod.EditorInfo.hintText|
|int_android.view.inputmethod.EditorInfo.IME_ACTION_DONE|
|int_android.view.inputmethod.EditorInfo.IME_ACTION_GO|
|int_android.view.inputmethod.EditorInfo.IME_ACTION_NEXT|
|int_android.view.inputmethod.EditorInfo.IME_ACTION_NONE|
|int_android.view.inputmethod.EditorInfo.IME_ACTION_PREVIOUS|
|int_android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH|
|int_android.view.inputmethod.EditorInfo.IME_ACTION_SEND|
|int_android.view.inputmethod.EditorInfo.IME_ACTION_UNSPECIFIED|
|int_android.view.inputmethod.EditorInfo.IME_FLAG_FORCE_ASCII|
|int_android.view.inputmethod.EditorInfo.IME_FLAG_NAVIGATE_NEXT|
|int_android.view.inputmethod.EditorInfo.IME_FLAG_NAVIGATE_PREVIOUS|
|int_android.view.inputmethod.EditorInfo.IME_FLAG_NO_ACCESSORY_ACTION|
|int_android.view.inputmethod.EditorInfo.IME_FLAG_NO_ENTER_ACTION|
|int_android.view.inputmethod.EditorInfo.IME_FLAG_NO_EXTRACT_UI|
|int_android.view.inputmethod.EditorInfo.IME_FLAG_NO_FULLSCREEN|
|int_android.view.inputmethod.EditorInfo.IME_MASK_ACTION|
|int_android.view.inputmethod.EditorInfo.IME_NULL|
|int_android.view.inputmethod.EditorInfo.imeOptions|
|int_android.view.inputmethod.EditorInfo.initialCapsMode|
|int_android.view.inputmethod.EditorInfo.initialSelEnd|
|int_android.view.inputmethod.EditorInfo.initialSelStart|
|int_android.view.inputmethod.EditorInfo.inputType|
|java.lang.CharSequence_android.view.inputmethod.EditorInfo.label|
|java.lang.String_android.view.inputmethod.EditorInfo.packageName|
|java.lang.String_android.view.inputmethod.EditorInfo.privateImeOptions|

*android.view.inputmethod.EditorInfo_Constructors*
|android.view.inputmethod.EditorInfo()|

*android.view.inputmethod.EditorInfo_Methods*
|android.view.inputmethod.EditorInfo.describeContents()|
|android.view.inputmethod.EditorInfo.dump(Printer,String)|Write debug output of
|android.view.inputmethod.EditorInfo.makeCompatible(int)|Ensure that the data i
|android.view.inputmethod.EditorInfo.writeToParcel(Parcel,int)|Used to package 

*android.view.inputmethod.EditorInfo_Description*

An EditorInfo describes several attributes of a text editing object that an 
input method is communicating with (typically an EditText), most importantly 
the type of text content it contains. 



*int_android.view.inputmethod.EditorInfo.actionId*

If (|android.view.inputmethod.EditorInfo|) has been given, this is the id for 
that command when the user presses its button that is delivered back with 
InputConnection.performEditorAction()(|android.view.inputmethod.InputConnection|)
. 


*java.lang.CharSequence_android.view.inputmethod.EditorInfo.actionLabel*

In some cases an IME may be able to display an arbitrary label for a command 
the user can perform, which you can specify here. This is typically used as the 
label for the action to use in-line as a replacement for the "enter" key (see 
(|android.view.inputmethod.EditorInfo|) ). Remember the key where this will be 
displayed is typically very small, and there are significant localization 
challenges to make this fit in all supported languages. Also you can not count 
absolutely on this being used, as some IMEs may ignore this. 


*android.os.Parcelable.Creator<android.view.inputmethod.EditorInfo>_android.view.inputmethod.EditorInfo.CREATOR*

Used to make this class parcelable. 


*android.os.Bundle_android.view.inputmethod.EditorInfo.extras*

Any extra data to supply to the input method. This is for extended 
communication with specific input methods; the name fields in the bundle should 
be scoped (such as "com.mydomain.im.SOME_FIELD") so that they don't conflict 
with others. This field can be filled in from the (|android.R.attr|) attribute 
of a TextView. 


*int_android.view.inputmethod.EditorInfo.fieldId*

Identifier for the editor's field. This is optional, and may be 0. By default 
it is filled in with the result of View.getId()(|android.view.View|) on the 
View that is being edited. 


*java.lang.String_android.view.inputmethod.EditorInfo.fieldName*

Additional name for the editor's field. This can supply additional name 
information for the field. By default it is null. The actual contents have no 
meaning. 


*java.lang.CharSequence_android.view.inputmethod.EditorInfo.hintText*

The "hint" text of the text view, typically shown in-line when the text is 
empty to tell the user what to enter. 


*int_android.view.inputmethod.EditorInfo.IME_ACTION_DONE*

Bits of (|android.view.inputmethod.EditorInfo|) : the action key performs a 
"done" operation, typically meaning there is nothing more to input and the IME 
will be closed. 


*int_android.view.inputmethod.EditorInfo.IME_ACTION_GO*

Bits of (|android.view.inputmethod.EditorInfo|) : the action key performs a 
"go" operation to take the user to the target of the text they typed. Typically 
used, for example, when entering a URL. 


*int_android.view.inputmethod.EditorInfo.IME_ACTION_NEXT*

Bits of (|android.view.inputmethod.EditorInfo|) : the action key performs a 
"next" operation, taking the user to the next field that will accept text. 


*int_android.view.inputmethod.EditorInfo.IME_ACTION_NONE*

Bits of (|android.view.inputmethod.EditorInfo|) : there is no available action. 


*int_android.view.inputmethod.EditorInfo.IME_ACTION_PREVIOUS*

Bits of (|android.view.inputmethod.EditorInfo|) : Like 
(|android.view.inputmethod.EditorInfo|) , but for moving to the previous field. 
This will normally not be used to specify an action (since it precludes 
(|android.view.inputmethod.EditorInfo|) ), but can be returned to the app if it 
sets (|android.view.inputmethod.EditorInfo|) . 


*int_android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH*

Bits of (|android.view.inputmethod.EditorInfo|) : the action key performs a 
"search" operation, taking the user to the results of searching for the text 
they have typed (in whatever context is appropriate). 


*int_android.view.inputmethod.EditorInfo.IME_ACTION_SEND*

Bits of (|android.view.inputmethod.EditorInfo|) : the action key performs a 
"send" operation, delivering the text to its target. This is typically used 
when composing a message in IM or SMS where sending is immediate. 


*int_android.view.inputmethod.EditorInfo.IME_ACTION_UNSPECIFIED*

Bits of (|android.view.inputmethod.EditorInfo|) : no specific action has been 
associated with this editor, let the editor come up with its own if it can. 


*int_android.view.inputmethod.EditorInfo.IME_FLAG_FORCE_ASCII*

Flag of (|android.view.inputmethod.EditorInfo|) : used to request an IME that 
is capable of inputting ASCII characters. The intention of this flag is to 
ensure that the user can type Roman alphabet characters in a 
(|android.widget.TextView|) . It is typically used for an account ID or 
password input. A lot of the time, IMEs are already able to input ASCII even 
without being told so (such IMEs already respect this flag in a sense), but 
there are cases when this is not the default. For instance, users of languages 
using a different script like Arabic, Greek, Hebrew or Russian typically have a 
keyboard that can't input ASCII characters by default. Applications need to be 
aware that the flag is not a guarantee, and some IMEs may not respect it. 
However, it is strongly recommended for IME authors to respect this flag 
especially when their IME could end up with a state where only languages using 
non-ASCII are enabled. 


*int_android.view.inputmethod.EditorInfo.IME_FLAG_NAVIGATE_NEXT*

Flag of (|android.view.inputmethod.EditorInfo|) : used to specify that there is 
something interesting that a forward navigation can focus on. This is like 
using (|android.view.inputmethod.EditorInfo|) , except allows the IME to be 
multiline (with an enter key) as well as provide forward navigation. Note that 
some IMEs may not be able to do this, especially when running on a small screen 
where there is little space. In that case it does not need to present a UI for 
this option. Like (|android.view.inputmethod.EditorInfo|) , if the user selects 
the IME's facility to forward navigate, this will show up in the application at 
InputConnection.performEditorAction(int)(|android.view.inputmethod.InputConnection|)
. 


*int_android.view.inputmethod.EditorInfo.IME_FLAG_NAVIGATE_PREVIOUS*

Flag of (|android.view.inputmethod.EditorInfo|) : like 
(|android.view.inputmethod.EditorInfo|) , but specifies there is something 
interesting that a backward navigation can focus on. If the user selects the 
IME's facility to backward navigate, this will show up in the application as an 
(|android.view.inputmethod.EditorInfo|) at 
InputConnection.performEditorAction(int)(|android.view.inputmethod.InputConnection|)
. 


*int_android.view.inputmethod.EditorInfo.IME_FLAG_NO_ACCESSORY_ACTION*

Flag of (|android.view.inputmethod.EditorInfo|) : used in conjunction with one 
of the actions masked by (|android.view.inputmethod.EditorInfo|) , this 
indicates that the action should not be available as an accessory button on the 
right of the extracted text when the input method is full-screen. Note that by 
setting this flag, there can be cases where the action is simply never 
available to the user. Setting this generally means that you think that in 
fullscreen mode, where there is little space to show the text, it's not worth 
taking some screen real estate to display the action and it should be used 
instead to show more text. 


*int_android.view.inputmethod.EditorInfo.IME_FLAG_NO_ENTER_ACTION*

Flag of (|android.view.inputmethod.EditorInfo|) : used in conjunction with one 
of the actions masked by (|android.view.inputmethod.EditorInfo|) . If this flag 
is not set, IMEs will normally replace the "enter" key with the action 
supplied. This flag indicates that the action should not be available in-line 
as a replacement for the "enter" key. Typically this is because the action has 
such a significant impact or is not recoverable enough that accidentally 
hitting it should be avoided, such as sending a message. Note that 
(|android.widget.TextView|) will automatically set this flag for you on 
multi-line text views. 


*int_android.view.inputmethod.EditorInfo.IME_FLAG_NO_EXTRACT_UI*

Flag of (|android.view.inputmethod.EditorInfo|) : used to specify that the IME 
does not need to show its extracted text UI. For input methods that may be 
fullscreen, often when in landscape mode, this allows them to be smaller and 
let part of the application be shown behind, through transparent UI parts in 
the fullscreen IME. The part of the UI visible to the user may not be 
responsive to touch because the IME will receive touch events, which may 
confuse the user; use (|android.view.inputmethod.EditorInfo|) instead for a 
better experience. Using this flag is discouraged and it may become deprecated 
in the future. Its meaning is unclear in some situations and it may not work 
appropriately on older versions of the platform. 


*int_android.view.inputmethod.EditorInfo.IME_FLAG_NO_FULLSCREEN*

Flag of (|android.view.inputmethod.EditorInfo|) : used to request that the IME 
never go into fullscreen mode. By default, IMEs may go into full screen mode 
when they think it's appropriate, for example on small screens in landscape 
orientation where displaying a software keyboard may occlude such a large 
portion of the screen that the remaining part is too small to meaningfully 
display the application UI. If this flag is set, compliant IMEs will never go 
into full screen mode, and always leave some space to display the application 
UI. Applications need to be aware that the flag is not a guarantee, and some 
IMEs may ignore it. 


*int_android.view.inputmethod.EditorInfo.IME_MASK_ACTION*

Set of bits in (|android.view.inputmethod.EditorInfo|) that provide alternative 
actions associated with the "enter" key. This both helps the IME provide better 
feedback about what the enter key will do, and also allows it to provide 
alternative mechanisms for providing that command. 


*int_android.view.inputmethod.EditorInfo.IME_NULL*

Generic unspecified type for (|android.view.inputmethod.EditorInfo|) . 


*int_android.view.inputmethod.EditorInfo.imeOptions*

Extended type information for the editor, to help the IME better integrate with 
it. 


*int_android.view.inputmethod.EditorInfo.initialCapsMode*

The capitalization mode of the first character being edited in the text. Values 
may be any combination of 
TextUtils.CAP_MODE_CHARACTERS(|android.text.TextUtils|) , 
TextUtils.CAP_MODE_WORDS(|android.text.TextUtils|) , and 
TextUtils.CAP_MODE_SENTENCES(|android.text.TextUtils|) , though you should 
generally just take a non-zero value to mean start out in caps mode. 


*int_android.view.inputmethod.EditorInfo.initialSelEnd*

The text offset of the end of the selection at the time editing began; -1 if 
not known. Keep in mind some IMEs may not be able to give their full feature 
set without knowing the cursor position; avoid passing -1 here if you can. 


*int_android.view.inputmethod.EditorInfo.initialSelStart*

The text offset of the start of the selection at the time editing began; -1 if 
not known. Keep in mind some IMEs may not be able to give their full feature 
set without knowing the cursor position; avoid passing -1 here if you can. 


*int_android.view.inputmethod.EditorInfo.inputType*

The content type of the text box, whose bits are defined by 
(|android.text.InputType|) . 


*java.lang.CharSequence_android.view.inputmethod.EditorInfo.label*

A label to show to the user describing the text they are writing. 


*java.lang.String_android.view.inputmethod.EditorInfo.packageName*

Name of the package that owns this editor. 


*java.lang.String_android.view.inputmethod.EditorInfo.privateImeOptions*

A string supplying additional information options that are private to a 
particular IME implementation. The string must be scoped to a package owned by 
the implementation, to ensure there are no conflicts between implementations, 
but other than that you can put whatever you want in it to communicate with the 
IME. For example, you could have a string that supplies an argument like 
"com.example.myapp.SpecialMode=3". This field is can be filled in from the 
(|android.R.attr|) attribute of a TextView. 



*android.view.inputmethod.EditorInfo()*

public EditorInfo()




*android.view.inputmethod.EditorInfo.describeContents()*

public int describeContents()





*android.view.inputmethod.EditorInfo.dump(Printer,String)*

public void dump(
  android.util.Printer pw,
  java.lang.String prefix)

Write debug output of this object. 



*android.view.inputmethod.EditorInfo.makeCompatible(int)*

public final void makeCompatible(int targetSdkVersion)

Ensure that the data in this EditorInfo is compatible with an application that 
was developed against the given target API version. This can impact the 
following input types: (|android.text.InputType|) , (|android.text.InputType|) 
, (|android.text.InputType|) , (|android.text.InputType|) . 

This is called by the framework for input method implementations; you should 
not generally need to call it yourself. 


    targetSdkVersion - The API version number that the compatible application was developed against. 

*android.view.inputmethod.EditorInfo.writeToParcel(Parcel,int)*

public void writeToParcel(
  android.os.Parcel dest,
  int flags)

Used to package this object into a (|android.os.Parcel|) . 


    dest - The {@link Parcel} to be written. 
    flags - The flags used for parceling. 


