*android.ddm.DdmHandleHello* *DdmHandleHello* Handle "hello" messages and featur

public class DdmHandleHello
  extends    |ChunkHandler|

|android.ddm.DdmHandleHello_Description|
|android.ddm.DdmHandleHello_Fields|
|android.ddm.DdmHandleHello_Constructors|
|android.ddm.DdmHandleHello_Methods|

================================================================================

*android.ddm.DdmHandleHello_Fields*
|int_android.ddm.DdmHandleHello.CHUNK_FEAT|
|int_android.ddm.DdmHandleHello.CHUNK_HELO|
|int_android.ddm.DdmHandleHello.CHUNK_WAIT|

*android.ddm.DdmHandleHello_Methods*
|android.ddm.DdmHandleHello.connected()|Called when the DDM server connects.
|android.ddm.DdmHandleHello.disconnected()|Called when the DDM server disconnec
|android.ddm.DdmHandleHello.handleChunk(Chunk)|Handle a chunk of data.
|android.ddm.DdmHandleHello.register()|Register for the messages we're interest
|android.ddm.DdmHandleHello.sendWAIT(int)|Send up a WAIT chunk.

*android.ddm.DdmHandleHello_Description*

Handle "hello" messages and feature discovery. 



*int_android.ddm.DdmHandleHello.CHUNK_FEAT*




*int_android.ddm.DdmHandleHello.CHUNK_HELO*




*int_android.ddm.DdmHandleHello.CHUNK_WAIT*





*android.ddm.DdmHandleHello.connected()*

public void connected()

Called when the DDM server connects. The handler is allowed to send messages to 
the server. 



*android.ddm.DdmHandleHello.disconnected()*

public void disconnected()

Called when the DDM server disconnects. Can be used to disable periodic 
transmissions or clean up saved state. 



*android.ddm.DdmHandleHello.handleChunk(Chunk)*

public Chunk handleChunk(Chunk request)

Handle a chunk of data. 



*android.ddm.DdmHandleHello.register()*

public static void register()

Register for the messages we're interested in. 



*android.ddm.DdmHandleHello.sendWAIT(int)*

public static void sendWAIT(int reason)

Send up a WAIT chunk. The only currently defined value for "reason" is zero, 
which means "waiting for a debugger". 




