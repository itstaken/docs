*android.view.KeyEvent* *KeyEvent* Object used to report key and button events.

public class KeyEvent
  extends    |android.view.InputEvent|
  implements |android.os.Parcelable|

|android.view.KeyEvent_Description|
|android.view.KeyEvent_Fields|
|android.view.KeyEvent_Constructors|
|android.view.KeyEvent_Methods|

================================================================================

*android.view.KeyEvent_Fields*
|int_android.view.KeyEvent.ACTION_DOWN|
|int_android.view.KeyEvent.ACTION_MULTIPLE|
|int_android.view.KeyEvent.ACTION_UP|
|android.os.Parcelable.Creator<android.view.KeyEvent>_android.view.KeyEvent.CREATOR|
|int_android.view.KeyEvent.FLAG_CANCELED|
|int_android.view.KeyEvent.FLAG_CANCELED_LONG_PRESS|
|int_android.view.KeyEvent.FLAG_EDITOR_ACTION|
|int_android.view.KeyEvent.FLAG_FALLBACK|
|int_android.view.KeyEvent.FLAG_FROM_SYSTEM|
|int_android.view.KeyEvent.FLAG_KEEP_TOUCH_MODE|
|int_android.view.KeyEvent.FLAG_LONG_PRESS|
|int_android.view.KeyEvent.FLAG_PREDISPATCH|
|int_android.view.KeyEvent.FLAG_SOFT_KEYBOARD|
|int_android.view.KeyEvent.FLAG_START_TRACKING|
|int_android.view.KeyEvent.FLAG_TAINTED|
|int_android.view.KeyEvent.FLAG_TRACKING|
|int_android.view.KeyEvent.FLAG_VIRTUAL_HARD_KEY|
|int_android.view.KeyEvent.FLAG_WOKE_HERE|
|int_android.view.KeyEvent.KEYCODE_0|
|int_android.view.KeyEvent.KEYCODE_1|
|int_android.view.KeyEvent.KEYCODE_2|
|int_android.view.KeyEvent.KEYCODE_3|
|int_android.view.KeyEvent.KEYCODE_3D_MODE|
|int_android.view.KeyEvent.KEYCODE_4|
|int_android.view.KeyEvent.KEYCODE_5|
|int_android.view.KeyEvent.KEYCODE_6|
|int_android.view.KeyEvent.KEYCODE_7|
|int_android.view.KeyEvent.KEYCODE_8|
|int_android.view.KeyEvent.KEYCODE_9|
|int_android.view.KeyEvent.KEYCODE_A|
|int_android.view.KeyEvent.KEYCODE_ALT_LEFT|
|int_android.view.KeyEvent.KEYCODE_ALT_RIGHT|
|int_android.view.KeyEvent.KEYCODE_APOSTROPHE|
|int_android.view.KeyEvent.KEYCODE_APP_SWITCH|
|int_android.view.KeyEvent.KEYCODE_ASSIST|
|int_android.view.KeyEvent.KEYCODE_AT|
|int_android.view.KeyEvent.KEYCODE_AVR_INPUT|
|int_android.view.KeyEvent.KEYCODE_AVR_POWER|
|int_android.view.KeyEvent.KEYCODE_B|
|int_android.view.KeyEvent.KEYCODE_BACK|
|int_android.view.KeyEvent.KEYCODE_BACKSLASH|
|int_android.view.KeyEvent.KEYCODE_BOOKMARK|
|int_android.view.KeyEvent.KEYCODE_BREAK|
|int_android.view.KeyEvent.KEYCODE_BRIGHTNESS_DOWN|
|int_android.view.KeyEvent.KEYCODE_BRIGHTNESS_UP|
|int_android.view.KeyEvent.KEYCODE_BUTTON_1|
|int_android.view.KeyEvent.KEYCODE_BUTTON_10|
|int_android.view.KeyEvent.KEYCODE_BUTTON_11|
|int_android.view.KeyEvent.KEYCODE_BUTTON_12|
|int_android.view.KeyEvent.KEYCODE_BUTTON_13|
|int_android.view.KeyEvent.KEYCODE_BUTTON_14|
|int_android.view.KeyEvent.KEYCODE_BUTTON_15|
|int_android.view.KeyEvent.KEYCODE_BUTTON_16|
|int_android.view.KeyEvent.KEYCODE_BUTTON_2|
|int_android.view.KeyEvent.KEYCODE_BUTTON_3|
|int_android.view.KeyEvent.KEYCODE_BUTTON_4|
|int_android.view.KeyEvent.KEYCODE_BUTTON_5|
|int_android.view.KeyEvent.KEYCODE_BUTTON_6|
|int_android.view.KeyEvent.KEYCODE_BUTTON_7|
|int_android.view.KeyEvent.KEYCODE_BUTTON_8|
|int_android.view.KeyEvent.KEYCODE_BUTTON_9|
|int_android.view.KeyEvent.KEYCODE_BUTTON_A|
|int_android.view.KeyEvent.KEYCODE_BUTTON_B|
|int_android.view.KeyEvent.KEYCODE_BUTTON_C|
|int_android.view.KeyEvent.KEYCODE_BUTTON_L1|
|int_android.view.KeyEvent.KEYCODE_BUTTON_L2|
|int_android.view.KeyEvent.KEYCODE_BUTTON_MODE|
|int_android.view.KeyEvent.KEYCODE_BUTTON_R1|
|int_android.view.KeyEvent.KEYCODE_BUTTON_R2|
|int_android.view.KeyEvent.KEYCODE_BUTTON_SELECT|
|int_android.view.KeyEvent.KEYCODE_BUTTON_START|
|int_android.view.KeyEvent.KEYCODE_BUTTON_THUMBL|
|int_android.view.KeyEvent.KEYCODE_BUTTON_THUMBR|
|int_android.view.KeyEvent.KEYCODE_BUTTON_X|
|int_android.view.KeyEvent.KEYCODE_BUTTON_Y|
|int_android.view.KeyEvent.KEYCODE_BUTTON_Z|
|int_android.view.KeyEvent.KEYCODE_C|
|int_android.view.KeyEvent.KEYCODE_CALCULATOR|
|int_android.view.KeyEvent.KEYCODE_CALENDAR|
|int_android.view.KeyEvent.KEYCODE_CALL|
|int_android.view.KeyEvent.KEYCODE_CAMERA|
|int_android.view.KeyEvent.KEYCODE_CAPS_LOCK|
|int_android.view.KeyEvent.KEYCODE_CAPTIONS|
|int_android.view.KeyEvent.KEYCODE_CHANNEL_DOWN|
|int_android.view.KeyEvent.KEYCODE_CHANNEL_UP|
|int_android.view.KeyEvent.KEYCODE_CLEAR|
|int_android.view.KeyEvent.KEYCODE_COMMA|
|int_android.view.KeyEvent.KEYCODE_CONTACTS|
|int_android.view.KeyEvent.KEYCODE_CTRL_LEFT|
|int_android.view.KeyEvent.KEYCODE_CTRL_RIGHT|
|int_android.view.KeyEvent.KEYCODE_D|
|int_android.view.KeyEvent.KEYCODE_DEL|
|int_android.view.KeyEvent.KEYCODE_DPAD_CENTER|
|int_android.view.KeyEvent.KEYCODE_DPAD_DOWN|
|int_android.view.KeyEvent.KEYCODE_DPAD_LEFT|
|int_android.view.KeyEvent.KEYCODE_DPAD_RIGHT|
|int_android.view.KeyEvent.KEYCODE_DPAD_UP|
|int_android.view.KeyEvent.KEYCODE_DVR|
|int_android.view.KeyEvent.KEYCODE_E|
|int_android.view.KeyEvent.KEYCODE_EISU|
|int_android.view.KeyEvent.KEYCODE_ENDCALL|
|int_android.view.KeyEvent.KEYCODE_ENTER|
|int_android.view.KeyEvent.KEYCODE_ENVELOPE|
|int_android.view.KeyEvent.KEYCODE_EQUALS|
|int_android.view.KeyEvent.KEYCODE_ESCAPE|
|int_android.view.KeyEvent.KEYCODE_EXPLORER|
|int_android.view.KeyEvent.KEYCODE_F|
|int_android.view.KeyEvent.KEYCODE_F1|
|int_android.view.KeyEvent.KEYCODE_F10|
|int_android.view.KeyEvent.KEYCODE_F11|
|int_android.view.KeyEvent.KEYCODE_F12|
|int_android.view.KeyEvent.KEYCODE_F2|
|int_android.view.KeyEvent.KEYCODE_F3|
|int_android.view.KeyEvent.KEYCODE_F4|
|int_android.view.KeyEvent.KEYCODE_F5|
|int_android.view.KeyEvent.KEYCODE_F6|
|int_android.view.KeyEvent.KEYCODE_F7|
|int_android.view.KeyEvent.KEYCODE_F8|
|int_android.view.KeyEvent.KEYCODE_F9|
|int_android.view.KeyEvent.KEYCODE_FOCUS|
|int_android.view.KeyEvent.KEYCODE_FORWARD|
|int_android.view.KeyEvent.KEYCODE_FORWARD_DEL|
|int_android.view.KeyEvent.KEYCODE_FUNCTION|
|int_android.view.KeyEvent.KEYCODE_G|
|int_android.view.KeyEvent.KEYCODE_GRAVE|
|int_android.view.KeyEvent.KEYCODE_GUIDE|
|int_android.view.KeyEvent.KEYCODE_H|
|int_android.view.KeyEvent.KEYCODE_HEADSETHOOK|
|int_android.view.KeyEvent.KEYCODE_HENKAN|
|int_android.view.KeyEvent.KEYCODE_HOME|
|int_android.view.KeyEvent.KEYCODE_I|
|int_android.view.KeyEvent.KEYCODE_INFO|
|int_android.view.KeyEvent.KEYCODE_INSERT|
|int_android.view.KeyEvent.KEYCODE_J|
|int_android.view.KeyEvent.KEYCODE_K|
|int_android.view.KeyEvent.KEYCODE_KANA|
|int_android.view.KeyEvent.KEYCODE_KATAKANA_HIRAGANA|
|int_android.view.KeyEvent.KEYCODE_L|
|int_android.view.KeyEvent.KEYCODE_LANGUAGE_SWITCH|
|int_android.view.KeyEvent.KEYCODE_LEFT_BRACKET|
|int_android.view.KeyEvent.KEYCODE_M|
|int_android.view.KeyEvent.KEYCODE_MANNER_MODE|
|int_android.view.KeyEvent.KEYCODE_MEDIA_AUDIO_TRACK|
|int_android.view.KeyEvent.KEYCODE_MEDIA_CLOSE|
|int_android.view.KeyEvent.KEYCODE_MEDIA_EJECT|
|int_android.view.KeyEvent.KEYCODE_MEDIA_FAST_FORWARD|
|int_android.view.KeyEvent.KEYCODE_MEDIA_NEXT|
|int_android.view.KeyEvent.KEYCODE_MEDIA_PAUSE|
|int_android.view.KeyEvent.KEYCODE_MEDIA_PLAY|
|int_android.view.KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE|
|int_android.view.KeyEvent.KEYCODE_MEDIA_PREVIOUS|
|int_android.view.KeyEvent.KEYCODE_MEDIA_RECORD|
|int_android.view.KeyEvent.KEYCODE_MEDIA_REWIND|
|int_android.view.KeyEvent.KEYCODE_MEDIA_STOP|
|int_android.view.KeyEvent.KEYCODE_MENU|
|int_android.view.KeyEvent.KEYCODE_META_LEFT|
|int_android.view.KeyEvent.KEYCODE_META_RIGHT|
|int_android.view.KeyEvent.KEYCODE_MINUS|
|int_android.view.KeyEvent.KEYCODE_MOVE_END|
|int_android.view.KeyEvent.KEYCODE_MOVE_HOME|
|int_android.view.KeyEvent.KEYCODE_MUHENKAN|
|int_android.view.KeyEvent.KEYCODE_MUSIC|
|int_android.view.KeyEvent.KEYCODE_MUTE|
|int_android.view.KeyEvent.KEYCODE_N|
|int_android.view.KeyEvent.KEYCODE_NOTIFICATION|
|int_android.view.KeyEvent.KEYCODE_NUM|
|int_android.view.KeyEvent.KEYCODE_NUM_LOCK|
|int_android.view.KeyEvent.KEYCODE_NUMPAD_0|
|int_android.view.KeyEvent.KEYCODE_NUMPAD_1|
|int_android.view.KeyEvent.KEYCODE_NUMPAD_2|
|int_android.view.KeyEvent.KEYCODE_NUMPAD_3|
|int_android.view.KeyEvent.KEYCODE_NUMPAD_4|
|int_android.view.KeyEvent.KEYCODE_NUMPAD_5|
|int_android.view.KeyEvent.KEYCODE_NUMPAD_6|
|int_android.view.KeyEvent.KEYCODE_NUMPAD_7|
|int_android.view.KeyEvent.KEYCODE_NUMPAD_8|
|int_android.view.KeyEvent.KEYCODE_NUMPAD_9|
|int_android.view.KeyEvent.KEYCODE_NUMPAD_ADD|
|int_android.view.KeyEvent.KEYCODE_NUMPAD_COMMA|
|int_android.view.KeyEvent.KEYCODE_NUMPAD_DIVIDE|
|int_android.view.KeyEvent.KEYCODE_NUMPAD_DOT|
|int_android.view.KeyEvent.KEYCODE_NUMPAD_ENTER|
|int_android.view.KeyEvent.KEYCODE_NUMPAD_EQUALS|
|int_android.view.KeyEvent.KEYCODE_NUMPAD_LEFT_PAREN|
|int_android.view.KeyEvent.KEYCODE_NUMPAD_MULTIPLY|
|int_android.view.KeyEvent.KEYCODE_NUMPAD_RIGHT_PAREN|
|int_android.view.KeyEvent.KEYCODE_NUMPAD_SUBTRACT|
|int_android.view.KeyEvent.KEYCODE_O|
|int_android.view.KeyEvent.KEYCODE_P|
|int_android.view.KeyEvent.KEYCODE_PAGE_DOWN|
|int_android.view.KeyEvent.KEYCODE_PAGE_UP|
|int_android.view.KeyEvent.KEYCODE_PERIOD|
|int_android.view.KeyEvent.KEYCODE_PICTSYMBOLS|
|int_android.view.KeyEvent.KEYCODE_PLUS|
|int_android.view.KeyEvent.KEYCODE_POUND|
|int_android.view.KeyEvent.KEYCODE_POWER|
|int_android.view.KeyEvent.KEYCODE_PROG_BLUE|
|int_android.view.KeyEvent.KEYCODE_PROG_GREEN|
|int_android.view.KeyEvent.KEYCODE_PROG_RED|
|int_android.view.KeyEvent.KEYCODE_PROG_YELLOW|
|int_android.view.KeyEvent.KEYCODE_Q|
|int_android.view.KeyEvent.KEYCODE_R|
|int_android.view.KeyEvent.KEYCODE_RIGHT_BRACKET|
|int_android.view.KeyEvent.KEYCODE_RO|
|int_android.view.KeyEvent.KEYCODE_S|
|int_android.view.KeyEvent.KEYCODE_SCROLL_LOCK|
|int_android.view.KeyEvent.KEYCODE_SEARCH|
|int_android.view.KeyEvent.KEYCODE_SEMICOLON|
|int_android.view.KeyEvent.KEYCODE_SETTINGS|
|int_android.view.KeyEvent.KEYCODE_SHIFT_LEFT|
|int_android.view.KeyEvent.KEYCODE_SHIFT_RIGHT|
|int_android.view.KeyEvent.KEYCODE_SLASH|
|int_android.view.KeyEvent.KEYCODE_SOFT_LEFT|
|int_android.view.KeyEvent.KEYCODE_SOFT_RIGHT|
|int_android.view.KeyEvent.KEYCODE_SPACE|
|int_android.view.KeyEvent.KEYCODE_STAR|
|int_android.view.KeyEvent.KEYCODE_STB_INPUT|
|int_android.view.KeyEvent.KEYCODE_STB_POWER|
|int_android.view.KeyEvent.KEYCODE_SWITCH_CHARSET|
|int_android.view.KeyEvent.KEYCODE_SYM|
|int_android.view.KeyEvent.KEYCODE_SYSRQ|
|int_android.view.KeyEvent.KEYCODE_T|
|int_android.view.KeyEvent.KEYCODE_TAB|
|int_android.view.KeyEvent.KEYCODE_TV|
|int_android.view.KeyEvent.KEYCODE_TV_INPUT|
|int_android.view.KeyEvent.KEYCODE_TV_POWER|
|int_android.view.KeyEvent.KEYCODE_U|
|int_android.view.KeyEvent.KEYCODE_UNKNOWN|
|int_android.view.KeyEvent.KEYCODE_V|
|int_android.view.KeyEvent.KEYCODE_VOLUME_DOWN|
|int_android.view.KeyEvent.KEYCODE_VOLUME_MUTE|
|int_android.view.KeyEvent.KEYCODE_VOLUME_UP|
|int_android.view.KeyEvent.KEYCODE_W|
|int_android.view.KeyEvent.KEYCODE_WINDOW|
|int_android.view.KeyEvent.KEYCODE_X|
|int_android.view.KeyEvent.KEYCODE_Y|
|int_android.view.KeyEvent.KEYCODE_YEN|
|int_android.view.KeyEvent.KEYCODE_Z|
|int_android.view.KeyEvent.KEYCODE_ZENKAKU_HANKAKU|
|int_android.view.KeyEvent.KEYCODE_ZOOM_IN|
|int_android.view.KeyEvent.KEYCODE_ZOOM_OUT|
|int_android.view.KeyEvent.MAX_KEYCODE|
|int_android.view.KeyEvent.META_ALT_LEFT_ON|
|int_android.view.KeyEvent.META_ALT_LOCKED|
|int_android.view.KeyEvent.META_ALT_MASK|
|int_android.view.KeyEvent.META_ALT_ON|
|int_android.view.KeyEvent.META_ALT_RIGHT_ON|
|int_android.view.KeyEvent.META_CAP_LOCKED|
|int_android.view.KeyEvent.META_CAPS_LOCK_ON|
|int_android.view.KeyEvent.META_CTRL_LEFT_ON|
|int_android.view.KeyEvent.META_CTRL_MASK|
|int_android.view.KeyEvent.META_CTRL_ON|
|int_android.view.KeyEvent.META_CTRL_RIGHT_ON|
|int_android.view.KeyEvent.META_FUNCTION_ON|
|int_android.view.KeyEvent.META_META_LEFT_ON|
|int_android.view.KeyEvent.META_META_MASK|
|int_android.view.KeyEvent.META_META_ON|
|int_android.view.KeyEvent.META_META_RIGHT_ON|
|int_android.view.KeyEvent.META_NUM_LOCK_ON|
|int_android.view.KeyEvent.META_SCROLL_LOCK_ON|
|int_android.view.KeyEvent.META_SELECTING|
|int_android.view.KeyEvent.META_SHIFT_LEFT_ON|
|int_android.view.KeyEvent.META_SHIFT_MASK|
|int_android.view.KeyEvent.META_SHIFT_ON|
|int_android.view.KeyEvent.META_SHIFT_RIGHT_ON|
|int_android.view.KeyEvent.META_SYM_LOCKED|
|int_android.view.KeyEvent.META_SYM_ON|

*android.view.KeyEvent_Constructors*
|android.view.KeyEvent(int,int)|Create a new key event.
|android.view.KeyEvent(KeyEvent)|Make an exact copy of an existing key event.
|android.view.KeyEvent(KeyEvent,long,int)|Copy an existing key event, modifying
|android.view.KeyEvent(long,long,int,int,int)|Create a new key event.
|android.view.KeyEvent(long,long,int,int,int,int)|Create a new key event.
|android.view.KeyEvent(long,long,int,int,int,int,int,int)|Create a new key even
|android.view.KeyEvent(long,long,int,int,int,int,int,int,int)|Create a new key 
|android.view.KeyEvent(long,long,int,int,int,int,int,int,int,int)|Create a new 
|android.view.KeyEvent(long,String,int,int)|Create a new key event for a string

*android.view.KeyEvent_Methods*
|android.view.KeyEvent.actionToString(int)|Returns a string that represents the
|android.view.KeyEvent.changeAction(KeyEvent,int)|Create a new key event that i
|android.view.KeyEvent.changeFlags(KeyEvent,int)|Create a new key event that is
|android.view.KeyEvent.changeTimeRepeat(KeyEvent,long,int)|Create a new key eve
|android.view.KeyEvent.changeTimeRepeat(KeyEvent,long,int,int)|Create a new key
|android.view.KeyEvent.copy()|
|android.view.KeyEvent.createFromParcelBody(Parcel)|
|android.view.KeyEvent.dispatch(KeyEvent.Callback)|
|android.view.KeyEvent.dispatch(KeyEvent.Callback,KeyEvent.DispatcherState,Object)|
|android.view.KeyEvent.getAction()|Retrieve the action of this key event.
|android.view.KeyEvent.getCharacters()|For the special case of a#ACTION_MULTIPL
|android.view.KeyEvent.getDeadChar(int,int)|Get the character that is produced 
|android.view.KeyEvent.getDeviceId()|
|android.view.KeyEvent.getDisplayLabel()|Gets the primary character for this ke
|android.view.KeyEvent.getDownTime()|Retrieve the time of the most recent key d
|android.view.KeyEvent.getEventTime()|Retrieve the time this event occurred,  i
|android.view.KeyEvent.getEventTimeNano()|Retrieve the time this event occurred
|android.view.KeyEvent.getFlags()|Returns the flags for this key event.
|android.view.KeyEvent.getKeyboardDevice()|Renamed to#getDeviceId.
|android.view.KeyEvent.getKeyCharacterMap()|Gets theKeyCharacterMapassociated w
|android.view.KeyEvent.getKeyCode()|Retrieve the key code of the key event.
|android.view.KeyEvent.getKeyData(KeyCharacterMap.KeyData)|Get the character co
|android.view.KeyEvent.getMatch(char[])|Gets the first character in the charact
|android.view.KeyEvent.getMatch(char[],int)|Gets the first character in the cha
|android.view.KeyEvent.getMaxKeyCode()|Returns the maximum keycode.
|android.view.KeyEvent.getMetaState()|Returns the state of the meta keys.
|android.view.KeyEvent.getModifierMetaStateMask()|Gets a mask that includes all
|android.view.KeyEvent.getModifiers()|Returns the state of the modifier keys.
|android.view.KeyEvent.getNumber()|Gets the number or symbol associated with th
|android.view.KeyEvent.getRepeatCount()|Retrieve the repeat count of the event.
|android.view.KeyEvent.getScanCode()|Retrieve the hardware key id of this key e
|android.view.KeyEvent.getSource()|
|android.view.KeyEvent.getUnicodeChar()|Gets the Unicode character generated by
|android.view.KeyEvent.getUnicodeChar(int)|Gets the Unicode character generated
|android.view.KeyEvent.hasDefaultAction()|
|android.view.KeyEvent.hasModifiers(int)|Returns true if only the specified mod
|android.view.KeyEvent.hasNoModifiers()|Returns true if no modifier keys are pr
|android.view.KeyEvent.isAltPressed()|Returns the pressed state of the ALT meta
|android.view.KeyEvent.isCanceled()|For#ACTION_UPevents, indicates that the eve
|android.view.KeyEvent.isCapsLockOn()|Returns the locked state of the CAPS LOCK
|android.view.KeyEvent.isConfirmKey(int)|Whether key will, by default, trigger 
|android.view.KeyEvent.isCtrlPressed()|Returns the pressed state of the CTRL me
|android.view.KeyEvent.isDown()|Don't use in new code, instead explicitly check
|android.view.KeyEvent.isFunctionPressed()|Returns the pressed state of the FUN
|android.view.KeyEvent.isGamepadButton(int)|Returns true if the specified keyco
|android.view.KeyEvent.isLongPress()|For#ACTION_DOWNevents, indicates that the 
|android.view.KeyEvent.isMetaPressed()|Returns the pressed state of the META me
|android.view.KeyEvent.isModifierKey(int)|Returns true if this key code is a mo
|android.view.KeyEvent.isNumLockOn()|Returns the locked state of the NUM LOCK m
|android.view.KeyEvent.isPrintingKey()|Returns true if this key produces a glyp
|android.view.KeyEvent.isScrollLockOn()|Returns the locked state of the SCROLL 
|android.view.KeyEvent.isShiftPressed()|Returns the pressed state of the SHIFT 
|android.view.KeyEvent.isSymPressed()|Returns the pressed state of the SYM meta
|android.view.KeyEvent.isSystem()|Is this a system key?  System keys can not be
|android.view.KeyEvent.isTainted()|
|android.view.KeyEvent.isTracking()|For#ACTION_UPevents, indicates that the eve
|android.view.KeyEvent.keyCodeFromString(String)|Gets a keycode by its symbolic
|android.view.KeyEvent.keyCodeToString(int)|Returns a string that represents th
|android.view.KeyEvent.metaStateHasModifiers(int,int)|Returns true if only the 
|android.view.KeyEvent.metaStateHasNoModifiers(int)|Returns true if no modifier
|android.view.KeyEvent.metaStateToString(int)|Returns a string that represents 
|android.view.KeyEvent.normalizeMetaState(int)|Normalizes the specified meta st
|android.view.KeyEvent.obtain(KeyEvent)|Obtains a (potentially recycled) copy o
|android.view.KeyEvent.obtain(long,long,int,int,int,int,int,int,int,int,String)|
|android.view.KeyEvent.recycle()|Recycles a key event.
|android.view.KeyEvent.recycleIfNeededAfterDispatch()|
|android.view.KeyEvent.setSource(int)|
|android.view.KeyEvent.setTainted(boolean)|
|android.view.KeyEvent.startTracking()|Call this duringCallback#onKeyDownto hav
|android.view.KeyEvent.toString()|
|android.view.KeyEvent.writeToParcel(Parcel,int)|

*android.view.KeyEvent_Description*

Object used to report key and button events. 

Each key press is described by a sequence of key events. A key press starts 
with a key event with (|android.view.KeyEvent|) . If the key is held 
sufficiently long that it repeats, then the initial down is followed additional 
key events with (|android.view.KeyEvent|) and a non-zero value for 
(|android.view.KeyEvent|) . The last key event is a (|android.view.KeyEvent|) 
for the key up. If the key press is canceled, the key up event will have the 
(|android.view.KeyEvent|) flag set. 

Key events are generally accompanied by a key code ( (|android.view.KeyEvent|) 
), scan code ( (|android.view.KeyEvent|) ) and meta state ( 
(|android.view.KeyEvent|) ). Key code constants are defined in this class. Scan 
code constants are raw device-specific codes obtained from the OS and so are 
not generally meaningful to applications unless interpreted using the 
(|android.view.KeyCharacterMap|) . Meta states describe the pressed state of 
key modifiers such as (|android.view.KeyEvent|) or (|android.view.KeyEvent|) . 

Key codes typically correspond one-to-one with individual keys on an input 
device. Many keys and key combinations serve quite different functions on 
different input devices so care must be taken when interpreting them. Always 
use the (|android.view.KeyCharacterMap|) associated with the input device when 
mapping keys to characters. Be aware that there may be multiple key input 
devices active at the same time and each will have its own key character map. 

As soft input methods can use multiple and inventive ways of inputting text, 
there is no guarantee that any key press on a soft keyboard will generate a key 
event: this is left to the IME's discretion, and in fact sending such events is 
discouraged. You should never rely on receiving KeyEvents for any key on a soft 
input method. In particular, the default software keyboard will never send any 
key event to any application targetting Jelly Bean or later, and will only send 
events for some presses of the delete and return keys to applications 
targetting Ice Cream Sandwich or earlier. Be aware that other software input 
methods may never send key events regardless of the version. Consider using 
editor actions like (|android.view.inputmethod.EditorInfo|) if you need 
specific interaction with the software keyboard, as it gives more visibility to 
the user as to how your application will react to key presses. 

When interacting with an IME, the framework may deliver key events with the 
special action (|android.view.KeyEvent|) that either specifies that single 
repeated key code or a sequence of characters to insert. 

In general, the framework cannot guarantee that the key events it delivers to a 
view always constitute complete key sequences since some events may be dropped 
or modified by containing views before they are delivered. The view 
implementation should be prepared to handle (|android.view.KeyEvent|) and 
should tolerate anomalous situations such as receiving a new 
(|android.view.KeyEvent|) without first having received an 
(|android.view.KeyEvent|) for the prior key press. 

Refer to (|android.view.InputDevice|) for more information about how different 
kinds of input devices and sources represent keys and buttons. 



*int_android.view.KeyEvent.ACTION_DOWN*

(|android.view.KeyEvent|) value: the key has been pressed down. 


*int_android.view.KeyEvent.ACTION_MULTIPLE*

(|android.view.KeyEvent|) value: multiple duplicate key events have occurred in 
a row, or a complex string is being delivered. If the key code is not {#link 
(|android.view.KeyEvent|) then the {#link (|android.view.KeyEvent|) method 
returns the number of times the given key code should be executed. Otherwise, 
if the key code is (|android.view.KeyEvent|) , then this is a sequence of 
characters as returned by (|android.view.KeyEvent|) . 


*int_android.view.KeyEvent.ACTION_UP*

(|android.view.KeyEvent|) value: the key has been released. 


*android.os.Parcelable.Creator<android.view.KeyEvent>_android.view.KeyEvent.CREATOR*




*int_android.view.KeyEvent.FLAG_CANCELED*

When associated with up key events, this indicates that the key press has been 
canceled. Typically this is used with virtual touch screen keys, where the user 
can slide from the virtual key area on to the display: in that case, the 
application will receive a canceled up event and should not perform the action 
normally associated with the key. Note that for this to work, the application 
can not perform an action for a key until it receives an up or the long press 
timeout has expired. 


*int_android.view.KeyEvent.FLAG_CANCELED_LONG_PRESS*

Set when a key event has (|android.view.KeyEvent|) set because a long press 
action was executed while it was down. 


*int_android.view.KeyEvent.FLAG_EDITOR_ACTION*

This mask is used for compatibility, to identify enter keys that are coming 
from an IME whose enter key has been auto-labelled "next" or "done". This 
allows TextView to dispatch these as normal enter keys for old applications, 
but still do the appropriate action when receiving them. 


*int_android.view.KeyEvent.FLAG_FALLBACK*

Set when a key event has been synthesized to implement default behavior for an 
event that the application did not handle. Fallback key events are generated by 
unhandled trackball motions (to emulate a directional keypad) and by certain 
unhandled key presses that are declared in the key map (such as special 
function numeric keypad keys when numlock is off). 


*int_android.view.KeyEvent.FLAG_FROM_SYSTEM*

This mask is set if an event was known to come from a trusted part of the 
system. That is, the event is known to come from the user, and could not have 
been spoofed by a third party component. 


*int_android.view.KeyEvent.FLAG_KEEP_TOUCH_MODE*

This mask is set if we don't want the key event to cause us to leave touch 
mode. 


*int_android.view.KeyEvent.FLAG_LONG_PRESS*

This flag is set for the first key repeat that occurs after the long press 
timeout. 


*int_android.view.KeyEvent.FLAG_PREDISPATCH*

Signifies that the key is being predispatched. 


*int_android.view.KeyEvent.FLAG_SOFT_KEYBOARD*

This mask is set if the key event was generated by a software keyboard. 


*int_android.view.KeyEvent.FLAG_START_TRACKING*

Private control to determine when an app is tracking a key sequence. 


*int_android.view.KeyEvent.FLAG_TAINTED*

Private flag that indicates when the system has detected that this key event 
may be inconsistent with respect to the sequence of previously delivered key 
events, such as when a key up event is sent but the key was not down. 


*int_android.view.KeyEvent.FLAG_TRACKING*

Set for (|android.view.KeyEvent|) when this event's key code is still being 
tracked from its initial down. That is, somebody requested that tracking 
started on the key down and a long press has not caused the tracking to be 
canceled. 


*int_android.view.KeyEvent.FLAG_VIRTUAL_HARD_KEY*

This key event was generated by a virtual (on-screen) hard key area. Typically 
this is an area of the touchscreen, outside of the regular display, dedicated 
to "hardware" buttons. 


*int_android.view.KeyEvent.FLAG_WOKE_HERE*

This mask is set if the device woke because of this key event. 


*int_android.view.KeyEvent.KEYCODE_0*

Key code constant: '0' key. 


*int_android.view.KeyEvent.KEYCODE_1*

Key code constant: '1' key. 


*int_android.view.KeyEvent.KEYCODE_2*

Key code constant: '2' key. 


*int_android.view.KeyEvent.KEYCODE_3*

Key code constant: '3' key. 


*int_android.view.KeyEvent.KEYCODE_3D_MODE*

Key code constant: 3D Mode key. Toggles the display between 2D and 3D mode. 


*int_android.view.KeyEvent.KEYCODE_4*

Key code constant: '4' key. 


*int_android.view.KeyEvent.KEYCODE_5*

Key code constant: '5' key. 


*int_android.view.KeyEvent.KEYCODE_6*

Key code constant: '6' key. 


*int_android.view.KeyEvent.KEYCODE_7*

Key code constant: '7' key. 


*int_android.view.KeyEvent.KEYCODE_8*

Key code constant: '8' key. 


*int_android.view.KeyEvent.KEYCODE_9*

Key code constant: '9' key. 


*int_android.view.KeyEvent.KEYCODE_A*

Key code constant: 'A' key. 


*int_android.view.KeyEvent.KEYCODE_ALT_LEFT*

Key code constant: Left Alt modifier key. 


*int_android.view.KeyEvent.KEYCODE_ALT_RIGHT*

Key code constant: Right Alt modifier key. 


*int_android.view.KeyEvent.KEYCODE_APOSTROPHE*

Key code constant: ''' (apostrophe) key. 


*int_android.view.KeyEvent.KEYCODE_APP_SWITCH*

Key code constant: App switch key. Should bring up the application switcher 
dialog. 


*int_android.view.KeyEvent.KEYCODE_ASSIST*

Key code constant: Assist key. Launches the global assist activity. Not 
delivered to applications. 


*int_android.view.KeyEvent.KEYCODE_AT*

Key code constant: '@' key. 


*int_android.view.KeyEvent.KEYCODE_AVR_INPUT*

Key code constant: A/V Receiver input key. On TV remotes, switches the input 
mode on an external A/V Receiver. 


*int_android.view.KeyEvent.KEYCODE_AVR_POWER*

Key code constant: A/V Receiver power key. On TV remotes, toggles the power on 
an external A/V Receiver. 


*int_android.view.KeyEvent.KEYCODE_B*

Key code constant: 'B' key. 


*int_android.view.KeyEvent.KEYCODE_BACK*

Key code constant: Back key. 


*int_android.view.KeyEvent.KEYCODE_BACKSLASH*

Key code constant: '\' key. 


*int_android.view.KeyEvent.KEYCODE_BOOKMARK*

Key code constant: Bookmark key. On some TV remotes, bookmarks content or web 
pages. 


*int_android.view.KeyEvent.KEYCODE_BREAK*

Key code constant: Break / Pause key. 


*int_android.view.KeyEvent.KEYCODE_BRIGHTNESS_DOWN*

Key code constant: Brightness Down key. Adjusts the screen brightness down. 


*int_android.view.KeyEvent.KEYCODE_BRIGHTNESS_UP*

Key code constant: Brightness Up key. Adjusts the screen brightness up. 


*int_android.view.KeyEvent.KEYCODE_BUTTON_1*

Key code constant: Generic Game Pad Button #1. 


*int_android.view.KeyEvent.KEYCODE_BUTTON_10*

Key code constant: Generic Game Pad Button #10. 


*int_android.view.KeyEvent.KEYCODE_BUTTON_11*

Key code constant: Generic Game Pad Button #11. 


*int_android.view.KeyEvent.KEYCODE_BUTTON_12*

Key code constant: Generic Game Pad Button #12. 


*int_android.view.KeyEvent.KEYCODE_BUTTON_13*

Key code constant: Generic Game Pad Button #13. 


*int_android.view.KeyEvent.KEYCODE_BUTTON_14*

Key code constant: Generic Game Pad Button #14. 


*int_android.view.KeyEvent.KEYCODE_BUTTON_15*

Key code constant: Generic Game Pad Button #15. 


*int_android.view.KeyEvent.KEYCODE_BUTTON_16*

Key code constant: Generic Game Pad Button #16. 


*int_android.view.KeyEvent.KEYCODE_BUTTON_2*

Key code constant: Generic Game Pad Button #2. 


*int_android.view.KeyEvent.KEYCODE_BUTTON_3*

Key code constant: Generic Game Pad Button #3. 


*int_android.view.KeyEvent.KEYCODE_BUTTON_4*

Key code constant: Generic Game Pad Button #4. 


*int_android.view.KeyEvent.KEYCODE_BUTTON_5*

Key code constant: Generic Game Pad Button #5. 


*int_android.view.KeyEvent.KEYCODE_BUTTON_6*

Key code constant: Generic Game Pad Button #6. 


*int_android.view.KeyEvent.KEYCODE_BUTTON_7*

Key code constant: Generic Game Pad Button #7. 


*int_android.view.KeyEvent.KEYCODE_BUTTON_8*

Key code constant: Generic Game Pad Button #8. 


*int_android.view.KeyEvent.KEYCODE_BUTTON_9*

Key code constant: Generic Game Pad Button #9. 


*int_android.view.KeyEvent.KEYCODE_BUTTON_A*

Key code constant: A Button key. On a game controller, the A button should be 
either the button labeled A or the first button on the bottom row of controller 
buttons. 


*int_android.view.KeyEvent.KEYCODE_BUTTON_B*

Key code constant: B Button key. On a game controller, the B button should be 
either the button labeled B or the second button on the bottom row of 
controller buttons. 


*int_android.view.KeyEvent.KEYCODE_BUTTON_C*

Key code constant: C Button key. On a game controller, the C button should be 
either the button labeled C or the third button on the bottom row of controller 
buttons. 


*int_android.view.KeyEvent.KEYCODE_BUTTON_L1*

Key code constant: L1 Button key. On a game controller, the L1 button should be 
either the button labeled L1 (or L) or the top left trigger button. 


*int_android.view.KeyEvent.KEYCODE_BUTTON_L2*

Key code constant: L2 Button key. On a game controller, the L2 button should be 
either the button labeled L2 or the bottom left trigger button. 


*int_android.view.KeyEvent.KEYCODE_BUTTON_MODE*

Key code constant: Mode Button key. On a game controller, the button labeled 
Mode. 


*int_android.view.KeyEvent.KEYCODE_BUTTON_R1*

Key code constant: R1 Button key. On a game controller, the R1 button should be 
either the button labeled R1 (or R) or the top right trigger button. 


*int_android.view.KeyEvent.KEYCODE_BUTTON_R2*

Key code constant: R2 Button key. On a game controller, the R2 button should be 
either the button labeled R2 or the bottom right trigger button. 


*int_android.view.KeyEvent.KEYCODE_BUTTON_SELECT*

Key code constant: Select Button key. On a game controller, the button labeled 
Select. 


*int_android.view.KeyEvent.KEYCODE_BUTTON_START*

Key code constant: Start Button key. On a game controller, the button labeled 
Start. 


*int_android.view.KeyEvent.KEYCODE_BUTTON_THUMBL*

Key code constant: Left Thumb Button key. On a game controller, the left thumb 
button indicates that the left (or only) joystick is pressed. 


*int_android.view.KeyEvent.KEYCODE_BUTTON_THUMBR*

Key code constant: Right Thumb Button key. On a game controller, the right 
thumb button indicates that the right joystick is pressed. 


*int_android.view.KeyEvent.KEYCODE_BUTTON_X*

Key code constant: X Button key. On a game controller, the X button should be 
either the button labeled X or the first button on the upper row of controller 
buttons. 


*int_android.view.KeyEvent.KEYCODE_BUTTON_Y*

Key code constant: Y Button key. On a game controller, the Y button should be 
either the button labeled Y or the second button on the upper row of controller 
buttons. 


*int_android.view.KeyEvent.KEYCODE_BUTTON_Z*

Key code constant: Z Button key. On a game controller, the Z button should be 
either the button labeled Z or the third button on the upper row of controller 
buttons. 


*int_android.view.KeyEvent.KEYCODE_C*

Key code constant: 'C' key. 


*int_android.view.KeyEvent.KEYCODE_CALCULATOR*

Key code constant: Calculator special function key. Used to launch a calculator 
application. 


*int_android.view.KeyEvent.KEYCODE_CALENDAR*

Key code constant: Calendar special function key. Used to launch a calendar 
application. 


*int_android.view.KeyEvent.KEYCODE_CALL*

Key code constant: Call key. 


*int_android.view.KeyEvent.KEYCODE_CAMERA*

Key code constant: Camera key. Used to launch a camera application or take 
pictures. 


*int_android.view.KeyEvent.KEYCODE_CAPS_LOCK*

Key code constant: Caps Lock key. 


*int_android.view.KeyEvent.KEYCODE_CAPTIONS*

Key code constant: Toggle captions key. Switches the mode for closed-captioning 
text, for example during television shows. 


*int_android.view.KeyEvent.KEYCODE_CHANNEL_DOWN*

Key code constant: Channel down key. On TV remotes, decrements the television 
channel. 


*int_android.view.KeyEvent.KEYCODE_CHANNEL_UP*

Key code constant: Channel up key. On TV remotes, increments the television 
channel. 


*int_android.view.KeyEvent.KEYCODE_CLEAR*

Key code constant: Clear key. 


*int_android.view.KeyEvent.KEYCODE_COMMA*

Key code constant: ',' key. 


*int_android.view.KeyEvent.KEYCODE_CONTACTS*

Key code constant: Contacts special function key. Used to launch an address 
book application. 


*int_android.view.KeyEvent.KEYCODE_CTRL_LEFT*

Key code constant: Left Control modifier key. 


*int_android.view.KeyEvent.KEYCODE_CTRL_RIGHT*

Key code constant: Right Control modifier key. 


*int_android.view.KeyEvent.KEYCODE_D*

Key code constant: 'D' key. 


*int_android.view.KeyEvent.KEYCODE_DEL*

Key code constant: Backspace key. Deletes characters before the insertion 
point, unlike (|android.view.KeyEvent|) . 


*int_android.view.KeyEvent.KEYCODE_DPAD_CENTER*

Key code constant: Directional Pad Center key. May also be synthesized from 
trackball motions. 


*int_android.view.KeyEvent.KEYCODE_DPAD_DOWN*

Key code constant: Directional Pad Down key. May also be synthesized from 
trackball motions. 


*int_android.view.KeyEvent.KEYCODE_DPAD_LEFT*

Key code constant: Directional Pad Left key. May also be synthesized from 
trackball motions. 


*int_android.view.KeyEvent.KEYCODE_DPAD_RIGHT*

Key code constant: Directional Pad Right key. May also be synthesized from 
trackball motions. 


*int_android.view.KeyEvent.KEYCODE_DPAD_UP*

Key code constant: Directional Pad Up key. May also be synthesized from 
trackball motions. 


*int_android.view.KeyEvent.KEYCODE_DVR*

Key code constant: DVR key. On some TV remotes, switches to a DVR mode for 
recorded shows. 


*int_android.view.KeyEvent.KEYCODE_E*

Key code constant: 'E' key. 


*int_android.view.KeyEvent.KEYCODE_EISU*

Key code constant: Japanese alphanumeric key. 


*int_android.view.KeyEvent.KEYCODE_ENDCALL*

Key code constant: End Call key. 


*int_android.view.KeyEvent.KEYCODE_ENTER*

Key code constant: Enter key. 


*int_android.view.KeyEvent.KEYCODE_ENVELOPE*

Key code constant: Envelope special function key. Used to launch a mail 
application. 


*int_android.view.KeyEvent.KEYCODE_EQUALS*

Key code constant: '=' key. 


*int_android.view.KeyEvent.KEYCODE_ESCAPE*

Key code constant: Escape key. 


*int_android.view.KeyEvent.KEYCODE_EXPLORER*

Key code constant: Explorer special function key. Used to launch a browser 
application. 


*int_android.view.KeyEvent.KEYCODE_F*

Key code constant: 'F' key. 


*int_android.view.KeyEvent.KEYCODE_F1*

Key code constant: F1 key. 


*int_android.view.KeyEvent.KEYCODE_F10*

Key code constant: F10 key. 


*int_android.view.KeyEvent.KEYCODE_F11*

Key code constant: F11 key. 


*int_android.view.KeyEvent.KEYCODE_F12*

Key code constant: F12 key. 


*int_android.view.KeyEvent.KEYCODE_F2*

Key code constant: F2 key. 


*int_android.view.KeyEvent.KEYCODE_F3*

Key code constant: F3 key. 


*int_android.view.KeyEvent.KEYCODE_F4*

Key code constant: F4 key. 


*int_android.view.KeyEvent.KEYCODE_F5*

Key code constant: F5 key. 


*int_android.view.KeyEvent.KEYCODE_F6*

Key code constant: F6 key. 


*int_android.view.KeyEvent.KEYCODE_F7*

Key code constant: F7 key. 


*int_android.view.KeyEvent.KEYCODE_F8*

Key code constant: F8 key. 


*int_android.view.KeyEvent.KEYCODE_F9*

Key code constant: F9 key. 


*int_android.view.KeyEvent.KEYCODE_FOCUS*

Key code constant: Camera Focus key. Used to focus the camera. 


*int_android.view.KeyEvent.KEYCODE_FORWARD*

Key code constant: Forward key. Navigates forward in the history stack. 
Complement of (|android.view.KeyEvent|) . 


*int_android.view.KeyEvent.KEYCODE_FORWARD_DEL*

Key code constant: Forward Delete key. Deletes characters ahead of the 
insertion point, unlike (|android.view.KeyEvent|) . 


*int_android.view.KeyEvent.KEYCODE_FUNCTION*

Key code constant: Function modifier key. 


*int_android.view.KeyEvent.KEYCODE_G*

Key code constant: 'G' key. 


*int_android.view.KeyEvent.KEYCODE_GRAVE*

Key code constant: '`' (backtick) key. 


*int_android.view.KeyEvent.KEYCODE_GUIDE*

Key code constant: Guide key. On TV remotes, shows a programming guide. 


*int_android.view.KeyEvent.KEYCODE_H*

Key code constant: 'H' key. 


*int_android.view.KeyEvent.KEYCODE_HEADSETHOOK*

Key code constant: Headset Hook key. Used to hang up calls and stop media. 


*int_android.view.KeyEvent.KEYCODE_HENKAN*

Key code constant: Japanese conversion key. 


*int_android.view.KeyEvent.KEYCODE_HOME*

Key code constant: Home key. This key is handled by the framework and is never 
delivered to applications. 


*int_android.view.KeyEvent.KEYCODE_I*

Key code constant: 'I' key. 


*int_android.view.KeyEvent.KEYCODE_INFO*

Key code constant: Info key. Common on TV remotes to show additional 
information related to what is currently being viewed. 


*int_android.view.KeyEvent.KEYCODE_INSERT*

Key code constant: Insert key. Toggles insert / overwrite edit mode. 


*int_android.view.KeyEvent.KEYCODE_J*

Key code constant: 'J' key. 


*int_android.view.KeyEvent.KEYCODE_K*

Key code constant: 'K' key. 


*int_android.view.KeyEvent.KEYCODE_KANA*

Key code constant: Japanese kana key. 


*int_android.view.KeyEvent.KEYCODE_KATAKANA_HIRAGANA*

Key code constant: Japanese katakana / hiragana key. 


*int_android.view.KeyEvent.KEYCODE_L*

Key code constant: 'L' key. 


*int_android.view.KeyEvent.KEYCODE_LANGUAGE_SWITCH*

Key code constant: Language Switch key. Toggles the current input language such 
as switching between English and Japanese on a QWERTY keyboard. On some 
devices, the same function may be performed by pressing Shift+Spacebar. 


*int_android.view.KeyEvent.KEYCODE_LEFT_BRACKET*

Key code constant: '[' key. 


*int_android.view.KeyEvent.KEYCODE_M*

Key code constant: 'M' key. 


*int_android.view.KeyEvent.KEYCODE_MANNER_MODE*

Key code constant: Manner Mode key. Toggles silent or vibrate mode on and off 
to make the device behave more politely in certain settings such as on a 
crowded train. On some devices, the key may only operate when long-pressed. 


*int_android.view.KeyEvent.KEYCODE_MEDIA_AUDIO_TRACK*

Key code constant: Audio Track key Switches the audio tracks. 


*int_android.view.KeyEvent.KEYCODE_MEDIA_CLOSE*

Key code constant: Close media key. May be used to close a CD tray, for 
example. 


*int_android.view.KeyEvent.KEYCODE_MEDIA_EJECT*

Key code constant: Eject media key. May be used to eject a CD tray, for 
example. 


*int_android.view.KeyEvent.KEYCODE_MEDIA_FAST_FORWARD*

Key code constant: Fast Forward media key. 


*int_android.view.KeyEvent.KEYCODE_MEDIA_NEXT*

Key code constant: Play Next media key. 


*int_android.view.KeyEvent.KEYCODE_MEDIA_PAUSE*

Key code constant: Pause media key. 


*int_android.view.KeyEvent.KEYCODE_MEDIA_PLAY*

Key code constant: Play media key. 


*int_android.view.KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE*

Key code constant: Play/Pause media key. 


*int_android.view.KeyEvent.KEYCODE_MEDIA_PREVIOUS*

Key code constant: Play Previous media key. 


*int_android.view.KeyEvent.KEYCODE_MEDIA_RECORD*

Key code constant: Record media key. 


*int_android.view.KeyEvent.KEYCODE_MEDIA_REWIND*

Key code constant: Rewind media key. 


*int_android.view.KeyEvent.KEYCODE_MEDIA_STOP*

Key code constant: Stop media key. 


*int_android.view.KeyEvent.KEYCODE_MENU*

Key code constant: Menu key. 


*int_android.view.KeyEvent.KEYCODE_META_LEFT*

Key code constant: Left Meta modifier key. 


*int_android.view.KeyEvent.KEYCODE_META_RIGHT*

Key code constant: Right Meta modifier key. 


*int_android.view.KeyEvent.KEYCODE_MINUS*

Key code constant: '-'. 


*int_android.view.KeyEvent.KEYCODE_MOVE_END*

Key code constant: End Movement key. Used for scrolling or moving the cursor 
around to the end of a line or to the bottom of a list. 


*int_android.view.KeyEvent.KEYCODE_MOVE_HOME*

Key code constant: Home Movement key. Used for scrolling or moving the cursor 
around to the start of a line or to the top of a list. 


*int_android.view.KeyEvent.KEYCODE_MUHENKAN*

Key code constant: Japanese non-conversion key. 


*int_android.view.KeyEvent.KEYCODE_MUSIC*

Key code constant: Music special function key. Used to launch a music player 
application. 


*int_android.view.KeyEvent.KEYCODE_MUTE*

Key code constant: Mute key. Mutes the microphone, unlike 
(|android.view.KeyEvent|) . 


*int_android.view.KeyEvent.KEYCODE_N*

Key code constant: 'N' key. 


*int_android.view.KeyEvent.KEYCODE_NOTIFICATION*

Key code constant: Notification key. 


*int_android.view.KeyEvent.KEYCODE_NUM*

Key code constant: Number modifier key. Used to enter numeric symbols. This key 
is not Num Lock; it is more like (|android.view.KeyEvent|) and is interpreted 
as an ALT key by (|android.text.method.MetaKeyKeyListener|) . 


*int_android.view.KeyEvent.KEYCODE_NUM_LOCK*

Key code constant: Num Lock key. This is the Num Lock key; it is different from 
(|android.view.KeyEvent|) . This key alters the behavior of other keys on the 
numeric keypad. 


*int_android.view.KeyEvent.KEYCODE_NUMPAD_0*

Key code constant: Numeric keypad '0' key. 


*int_android.view.KeyEvent.KEYCODE_NUMPAD_1*

Key code constant: Numeric keypad '1' key. 


*int_android.view.KeyEvent.KEYCODE_NUMPAD_2*

Key code constant: Numeric keypad '2' key. 


*int_android.view.KeyEvent.KEYCODE_NUMPAD_3*

Key code constant: Numeric keypad '3' key. 


*int_android.view.KeyEvent.KEYCODE_NUMPAD_4*

Key code constant: Numeric keypad '4' key. 


*int_android.view.KeyEvent.KEYCODE_NUMPAD_5*

Key code constant: Numeric keypad '5' key. 


*int_android.view.KeyEvent.KEYCODE_NUMPAD_6*

Key code constant: Numeric keypad '6' key. 


*int_android.view.KeyEvent.KEYCODE_NUMPAD_7*

Key code constant: Numeric keypad '7' key. 


*int_android.view.KeyEvent.KEYCODE_NUMPAD_8*

Key code constant: Numeric keypad '8' key. 


*int_android.view.KeyEvent.KEYCODE_NUMPAD_9*

Key code constant: Numeric keypad '9' key. 


*int_android.view.KeyEvent.KEYCODE_NUMPAD_ADD*

Key code constant: Numeric keypad '+' key (for addition). 


*int_android.view.KeyEvent.KEYCODE_NUMPAD_COMMA*

Key code constant: Numeric keypad ',' key (for decimals or digit grouping). 


*int_android.view.KeyEvent.KEYCODE_NUMPAD_DIVIDE*

Key code constant: Numeric keypad '/' key (for division). 


*int_android.view.KeyEvent.KEYCODE_NUMPAD_DOT*

Key code constant: Numeric keypad '.' key (for decimals or digit grouping). 


*int_android.view.KeyEvent.KEYCODE_NUMPAD_ENTER*

Key code constant: Numeric keypad Enter key. 


*int_android.view.KeyEvent.KEYCODE_NUMPAD_EQUALS*

Key code constant: Numeric keypad '=' key. 


*int_android.view.KeyEvent.KEYCODE_NUMPAD_LEFT_PAREN*

Key code constant: Numeric keypad '(' key. 


*int_android.view.KeyEvent.KEYCODE_NUMPAD_MULTIPLY*

Key code constant: Numeric keypad '*' key (for multiplication). 


*int_android.view.KeyEvent.KEYCODE_NUMPAD_RIGHT_PAREN*

Key code constant: Numeric keypad ')' key. 


*int_android.view.KeyEvent.KEYCODE_NUMPAD_SUBTRACT*

Key code constant: Numeric keypad '-' key (for subtraction). 


*int_android.view.KeyEvent.KEYCODE_O*

Key code constant: 'O' key. 


*int_android.view.KeyEvent.KEYCODE_P*

Key code constant: 'P' key. 


*int_android.view.KeyEvent.KEYCODE_PAGE_DOWN*

Key code constant: Page Down key. 


*int_android.view.KeyEvent.KEYCODE_PAGE_UP*

Key code constant: Page Up key. 


*int_android.view.KeyEvent.KEYCODE_PERIOD*

Key code constant: '.' key. 


*int_android.view.KeyEvent.KEYCODE_PICTSYMBOLS*

Key code constant: Picture Symbols modifier key. Used to switch symbol sets 
(Emoji, Kao-moji). 


*int_android.view.KeyEvent.KEYCODE_PLUS*

Key code constant: '+' key. 


*int_android.view.KeyEvent.KEYCODE_POUND*

Key code constant: '#' key. 


*int_android.view.KeyEvent.KEYCODE_POWER*

Key code constant: Power key. 


*int_android.view.KeyEvent.KEYCODE_PROG_BLUE*

Key code constant: Blue "programmable" key. On TV remotes, acts as a 
contextual/programmable key. 


*int_android.view.KeyEvent.KEYCODE_PROG_GREEN*

Key code constant: Green "programmable" key. On TV remotes, actsas a 
contextual/programmable key. 


*int_android.view.KeyEvent.KEYCODE_PROG_RED*

Key code constant: Red "programmable" key. On TV remotes, acts as a 
contextual/programmable key. 


*int_android.view.KeyEvent.KEYCODE_PROG_YELLOW*

Key code constant: Yellow "programmable" key. On TV remotes, acts as a 
contextual/programmable key. 


*int_android.view.KeyEvent.KEYCODE_Q*

Key code constant: 'Q' key. 


*int_android.view.KeyEvent.KEYCODE_R*

Key code constant: 'R' key. 


*int_android.view.KeyEvent.KEYCODE_RIGHT_BRACKET*

Key code constant: ']' key. 


*int_android.view.KeyEvent.KEYCODE_RO*

Key code constant: Japanese Ro key. 


*int_android.view.KeyEvent.KEYCODE_S*

Key code constant: 'S' key. 


*int_android.view.KeyEvent.KEYCODE_SCROLL_LOCK*

Key code constant: Scroll Lock key. 


*int_android.view.KeyEvent.KEYCODE_SEARCH*

Key code constant: Search key. 


*int_android.view.KeyEvent.KEYCODE_SEMICOLON*

Key code constant: ';' key. 


*int_android.view.KeyEvent.KEYCODE_SETTINGS*

Key code constant: Settings key. Starts the system settings activity. 


*int_android.view.KeyEvent.KEYCODE_SHIFT_LEFT*

Key code constant: Left Shift modifier key. 


*int_android.view.KeyEvent.KEYCODE_SHIFT_RIGHT*

Key code constant: Right Shift modifier key. 


*int_android.view.KeyEvent.KEYCODE_SLASH*

Key code constant: '/' key. 


*int_android.view.KeyEvent.KEYCODE_SOFT_LEFT*

Key code constant: Soft Left key. Usually situated below the display on phones 
and used as a multi-function feature key for selecting a software defined 
function shown on the bottom left of the display. 


*int_android.view.KeyEvent.KEYCODE_SOFT_RIGHT*

Key code constant: Soft Right key. Usually situated below the display on phones 
and used as a multi-function feature key for selecting a software defined 
function shown on the bottom right of the display. 


*int_android.view.KeyEvent.KEYCODE_SPACE*

Key code constant: Space key. 


*int_android.view.KeyEvent.KEYCODE_STAR*

Key code constant: '*' key. 


*int_android.view.KeyEvent.KEYCODE_STB_INPUT*

Key code constant: Set-top-box input key. On TV remotes, switches the input 
mode on an external Set-top-box. 


*int_android.view.KeyEvent.KEYCODE_STB_POWER*

Key code constant: Set-top-box power key. On TV remotes, toggles the power on 
an external Set-top-box. 


*int_android.view.KeyEvent.KEYCODE_SWITCH_CHARSET*

Key code constant: Switch Charset modifier key. Used to switch character sets 
(Kanji, Katakana). 


*int_android.view.KeyEvent.KEYCODE_SYM*

Key code constant: Symbol modifier key. Used to enter alternate symbols. 


*int_android.view.KeyEvent.KEYCODE_SYSRQ*

Key code constant: System Request / Print Screen key. 


*int_android.view.KeyEvent.KEYCODE_T*

Key code constant: 'T' key. 


*int_android.view.KeyEvent.KEYCODE_TAB*

Key code constant: Tab key. 


*int_android.view.KeyEvent.KEYCODE_TV*

Key code constant: TV key. On TV remotes, switches to viewing live TV. 


*int_android.view.KeyEvent.KEYCODE_TV_INPUT*

Key code constant: TV input key. On TV remotes, switches the input on a 
television screen. 


*int_android.view.KeyEvent.KEYCODE_TV_POWER*

Key code constant: TV power key. On TV remotes, toggles the power on a 
television screen. 


*int_android.view.KeyEvent.KEYCODE_U*

Key code constant: 'U' key. 


*int_android.view.KeyEvent.KEYCODE_UNKNOWN*

Key code constant: Unknown key code. 


*int_android.view.KeyEvent.KEYCODE_V*

Key code constant: 'V' key. 


*int_android.view.KeyEvent.KEYCODE_VOLUME_DOWN*

Key code constant: Volume Down key. Adjusts the speaker volume down. 


*int_android.view.KeyEvent.KEYCODE_VOLUME_MUTE*

Key code constant: Volume Mute key. Mutes the speaker, unlike 
(|android.view.KeyEvent|) . This key should normally be implemented as a toggle 
such that the first press mutes the speaker and the second press restores the 
original volume. 


*int_android.view.KeyEvent.KEYCODE_VOLUME_UP*

Key code constant: Volume Up key. Adjusts the speaker volume up. 


*int_android.view.KeyEvent.KEYCODE_W*

Key code constant: 'W' key. 


*int_android.view.KeyEvent.KEYCODE_WINDOW*

Key code constant: Window key. On TV remotes, toggles picture-in-picture mode 
or other windowing functions. 


*int_android.view.KeyEvent.KEYCODE_X*

Key code constant: 'X' key. 


*int_android.view.KeyEvent.KEYCODE_Y*

Key code constant: 'Y' key. 


*int_android.view.KeyEvent.KEYCODE_YEN*

Key code constant: Japanese Yen key. 


*int_android.view.KeyEvent.KEYCODE_Z*

Key code constant: 'Z' key. 


*int_android.view.KeyEvent.KEYCODE_ZENKAKU_HANKAKU*

Key code constant: Japanese full-width / half-width key. 


*int_android.view.KeyEvent.KEYCODE_ZOOM_IN*

Key code constant: Zoom in key. 


*int_android.view.KeyEvent.KEYCODE_ZOOM_OUT*

Key code constant: Zoom out key. 


*int_android.view.KeyEvent.MAX_KEYCODE*




*int_android.view.KeyEvent.META_ALT_LEFT_ON*

This mask is used to check whether the left ALT meta key is pressed. 


*int_android.view.KeyEvent.META_ALT_LOCKED*

ALT key locked. Reserved for use by (|android.text.method.MetaKeyKeyListener|) 
for a published constant in its API. 


*int_android.view.KeyEvent.META_ALT_MASK*

This mask is a combination of (|android.view.KeyEvent|) , 
(|android.view.KeyEvent|) and (|android.view.KeyEvent|) . 


*int_android.view.KeyEvent.META_ALT_ON*

This mask is used to check whether one of the ALT meta keys is pressed. 


*int_android.view.KeyEvent.META_ALT_RIGHT_ON*

This mask is used to check whether the right the ALT meta key is pressed. 


*int_android.view.KeyEvent.META_CAP_LOCKED*

SHIFT key locked in CAPS mode. Reserved for use by 
(|android.text.method.MetaKeyKeyListener|) for a published constant in its API. 


*int_android.view.KeyEvent.META_CAPS_LOCK_ON*

This mask is used to check whether the CAPS LOCK meta key is on. 


*int_android.view.KeyEvent.META_CTRL_LEFT_ON*

This mask is used to check whether the left CTRL meta key is pressed. 


*int_android.view.KeyEvent.META_CTRL_MASK*

This mask is a combination of (|android.view.KeyEvent|) , 
(|android.view.KeyEvent|) and (|android.view.KeyEvent|) . 


*int_android.view.KeyEvent.META_CTRL_ON*

This mask is used to check whether one of the CTRL meta keys is pressed. 


*int_android.view.KeyEvent.META_CTRL_RIGHT_ON*

This mask is used to check whether the right CTRL meta key is pressed. 


*int_android.view.KeyEvent.META_FUNCTION_ON*

This mask is used to check whether the FUNCTION meta key is pressed. 


*int_android.view.KeyEvent.META_META_LEFT_ON*

This mask is used to check whether the left META meta key is pressed. 


*int_android.view.KeyEvent.META_META_MASK*

This mask is a combination of (|android.view.KeyEvent|) , 
(|android.view.KeyEvent|) and (|android.view.KeyEvent|) . 


*int_android.view.KeyEvent.META_META_ON*

This mask is used to check whether one of the META meta keys is pressed. 


*int_android.view.KeyEvent.META_META_RIGHT_ON*

This mask is used to check whether the right META meta key is pressed. 


*int_android.view.KeyEvent.META_NUM_LOCK_ON*

This mask is used to check whether the NUM LOCK meta key is on. 


*int_android.view.KeyEvent.META_SCROLL_LOCK_ON*

This mask is used to check whether the SCROLL LOCK meta key is on. 


*int_android.view.KeyEvent.META_SELECTING*

Text is in selection mode. Reserved for use by 
(|android.text.method.MetaKeyKeyListener|) for a private unpublished constant 
in its API that is currently being retained for legacy reasons. 


*int_android.view.KeyEvent.META_SHIFT_LEFT_ON*

This mask is used to check whether the left SHIFT meta key is pressed. 


*int_android.view.KeyEvent.META_SHIFT_MASK*

This mask is a combination of (|android.view.KeyEvent|) , 
(|android.view.KeyEvent|) and (|android.view.KeyEvent|) . 


*int_android.view.KeyEvent.META_SHIFT_ON*

This mask is used to check whether one of the SHIFT meta keys is pressed. 


*int_android.view.KeyEvent.META_SHIFT_RIGHT_ON*

This mask is used to check whether the right SHIFT meta key is pressed. 


*int_android.view.KeyEvent.META_SYM_LOCKED*

SYM key locked. Reserved for use by (|android.text.method.MetaKeyKeyListener|) 
for a published constant in its API. 


*int_android.view.KeyEvent.META_SYM_ON*

This mask is used to check whether the SYM meta key is pressed. 



*android.view.KeyEvent(int,int)*

public KeyEvent(
  int action,
  int code)

Create a new key event. 

    action - Action code: either {@link #ACTION_DOWN}, {@link #ACTION_UP}, or {@link 
       #ACTION_MULTIPLE}. 
    code - The key code. 

*android.view.KeyEvent(KeyEvent)*

public KeyEvent(android.view.KeyEvent origEvent)

Make an exact copy of an existing key event. 


*android.view.KeyEvent(KeyEvent,long,int)*

public KeyEvent(
  android.view.KeyEvent origEvent,
  long eventTime,
  int newRepeat)

Copy an existing key event, modifying its time and repeat count. 

    origEvent - The existing event to be copied. 
    eventTime - The new event time (in {@link android.os.SystemClock#uptimeMillis}) of the 
       event. 
    newRepeat - The new repeat count of the event. 

*android.view.KeyEvent(long,long,int,int,int)*

public KeyEvent(
  long downTime,
  long eventTime,
  int action,
  int code,
  int repeat)

Create a new key event. 

    downTime - The time (in {@link android.os.SystemClock#uptimeMillis}) at which this key 
       code originally went down. 
    eventTime - The time (in {@link android.os.SystemClock#uptimeMillis}) at which this event 
       happened. 
    action - Action code: either {@link #ACTION_DOWN}, {@link #ACTION_UP}, or {@link 
       #ACTION_MULTIPLE}. 
    code - The key code. 
    repeat - A repeat count for down events (> 0 if this is after the initial down) or event 
       count for multiple events. 

*android.view.KeyEvent(long,long,int,int,int,int)*

public KeyEvent(
  long downTime,
  long eventTime,
  int action,
  int code,
  int repeat,
  int metaState)

Create a new key event. 

    downTime - The time (in {@link android.os.SystemClock#uptimeMillis}) at which this key 
       code originally went down. 
    eventTime - The time (in {@link android.os.SystemClock#uptimeMillis}) at which this event 
       happened. 
    action - Action code: either {@link #ACTION_DOWN}, {@link #ACTION_UP}, or {@link 
       #ACTION_MULTIPLE}. 
    code - The key code. 
    repeat - A repeat count for down events (> 0 if this is after the initial down) or event 
       count for multiple events. 
    metaState - Flags indicating which meta keys are currently pressed. 

*android.view.KeyEvent(long,long,int,int,int,int,int,int)*

public KeyEvent(
  long downTime,
  long eventTime,
  int action,
  int code,
  int repeat,
  int metaState,
  int deviceId,
  int scancode)

Create a new key event. 

    downTime - The time (in {@link android.os.SystemClock#uptimeMillis}) at which this key 
       code originally went down. 
    eventTime - The time (in {@link android.os.SystemClock#uptimeMillis}) at which this event 
       happened. 
    action - Action code: either {@link #ACTION_DOWN}, {@link #ACTION_UP}, or {@link 
       #ACTION_MULTIPLE}. 
    code - The key code. 
    repeat - A repeat count for down events (> 0 if this is after the initial down) or event 
       count for multiple events. 
    metaState - Flags indicating which meta keys are currently pressed. 
    deviceId - The device ID that generated the key event. 
    scancode - Raw device scan code of the event. 

*android.view.KeyEvent(long,long,int,int,int,int,int,int,int)*

public KeyEvent(
  long downTime,
  long eventTime,
  int action,
  int code,
  int repeat,
  int metaState,
  int deviceId,
  int scancode,
  int flags)

Create a new key event. 

    downTime - The time (in {@link android.os.SystemClock#uptimeMillis}) at which this key 
       code originally went down. 
    eventTime - The time (in {@link android.os.SystemClock#uptimeMillis}) at which this event 
       happened. 
    action - Action code: either {@link #ACTION_DOWN}, {@link #ACTION_UP}, or {@link 
       #ACTION_MULTIPLE}. 
    code - The key code. 
    repeat - A repeat count for down events (> 0 if this is after the initial down) or event 
       count for multiple events. 
    metaState - Flags indicating which meta keys are currently pressed. 
    deviceId - The device ID that generated the key event. 
    scancode - Raw device scan code of the event. 
    flags - The flags for this key event 

*android.view.KeyEvent(long,long,int,int,int,int,int,int,int,int)*

public KeyEvent(
  long downTime,
  long eventTime,
  int action,
  int code,
  int repeat,
  int metaState,
  int deviceId,
  int scancode,
  int flags,
  int source)

Create a new key event. 

    downTime - The time (in {@link android.os.SystemClock#uptimeMillis}) at which this key 
       code originally went down. 
    eventTime - The time (in {@link android.os.SystemClock#uptimeMillis}) at which this event 
       happened. 
    action - Action code: either {@link #ACTION_DOWN}, {@link #ACTION_UP}, or {@link 
       #ACTION_MULTIPLE}. 
    code - The key code. 
    repeat - A repeat count for down events (> 0 if this is after the initial down) or event 
       count for multiple events. 
    metaState - Flags indicating which meta keys are currently pressed. 
    deviceId - The device ID that generated the key event. 
    scancode - Raw device scan code of the event. 
    flags - The flags for this key event 
    source - The input source such as {@link InputDevice#SOURCE_KEYBOARD}. 

*android.view.KeyEvent(long,String,int,int)*

public KeyEvent(
  long time,
  java.lang.String characters,
  int deviceId,
  int flags)

Create a new key event for a string of characters. The key code, action, repeat 
count and source will automatically be set to (|android.view.KeyEvent|) , 
(|android.view.KeyEvent|) , 0, and (|android.view.InputDevice|) for you. 

    time - The time (in {@link android.os.SystemClock#uptimeMillis}) at which this event 
       occured. 
    characters - The string of characters. 
    deviceId - The device ID that generated the key event. 
    flags - The flags for this key event 

*android.view.KeyEvent.actionToString(int)*

public static |java.lang.String| actionToString(int action)

Returns a string that represents the symbolic name of the specified action such 
as "ACTION_DOWN", or an equivalent numeric constant such as "35" if unknown. 


    action - The action. 

    Returns: The symbolic name of the specified action. 

*android.view.KeyEvent.changeAction(KeyEvent,int)*

public static |android.view.KeyEvent| changeAction(
  android.view.KeyEvent event,
  int action)

Create a new key event that is the same as the given one, but whose action is 
replaced with the given value. 


    event - The existing event to be copied. This is not modified. 
    action - The new action code of the event. 

*android.view.KeyEvent.changeFlags(KeyEvent,int)*

public static |android.view.KeyEvent| changeFlags(
  android.view.KeyEvent event,
  int flags)

Create a new key event that is the same as the given one, but whose flags are 
replaced with the given value. 


    event - The existing event to be copied. This is not modified. 
    flags - The new flags constant. 

*android.view.KeyEvent.changeTimeRepeat(KeyEvent,long,int)*

public static |android.view.KeyEvent| changeTimeRepeat(
  android.view.KeyEvent event,
  long eventTime,
  int newRepeat)

Create a new key event that is the same as the given one, but whose event time 
and repeat count are replaced with the given value. 


    event - The existing event to be copied. This is not modified. 
    eventTime - The new event time (in {@link android.os.SystemClock#uptimeMillis}) of the 
       event. 
    newRepeat - The new repeat count of the event. 

*android.view.KeyEvent.changeTimeRepeat(KeyEvent,long,int,int)*

public static |android.view.KeyEvent| changeTimeRepeat(
  android.view.KeyEvent event,
  long eventTime,
  int newRepeat,
  int newFlags)

Create a new key event that is the same as the given one, but whose event time 
and repeat count are replaced with the given value. 


    event - The existing event to be copied. This is not modified. 
    eventTime - The new event time (in {@link android.os.SystemClock#uptimeMillis}) of the 
       event. 
    newRepeat - The new repeat count of the event. 
    newFlags - New flags for the event, replacing the entire value in the original event. 

*android.view.KeyEvent.copy()*

public |android.view.KeyEvent| copy()





*android.view.KeyEvent.createFromParcelBody(Parcel)*

public static |android.view.KeyEvent| createFromParcelBody(android.os.Parcel in)





*android.view.KeyEvent.dispatch(KeyEvent.Callback)*

public final boolean dispatch(android.view.KeyEvent.Callback receiver)



    Deprecated: Use {@link #dispatch(Callback, DispatcherState, Object)} instead.


*android.view.KeyEvent.dispatch(KeyEvent.Callback,KeyEvent.DispatcherState,Object)*

public final boolean dispatch(
  android.view.KeyEvent.Callback receiver,
  android.view.KeyEvent.DispatcherState state,
  java.lang.Object target)

Deliver this key event to a (|android.view.KeyEvent.Callback|) interface. If 
this is an ACTION_MULTIPLE event and it is not handled, then an attempt will be 
made to deliver a single normal event. 


    receiver - The Callback that will be given the event. 
    state - State information retained across events. 
    target - The target of the dispatch, for use in tracking. 

    Returns: The return value from the Callback method that was called. 

*android.view.KeyEvent.getAction()*

public final int getAction()

Retrieve the action of this key event. May be either (|android.view.KeyEvent|) 
, (|android.view.KeyEvent|) , or (|android.view.KeyEvent|) . 



    Returns: The event action: ACTION_DOWN, ACTION_UP, or ACTION_MULTIPLE. 

*android.view.KeyEvent.getCharacters()*

public final |java.lang.String| getCharacters()

For the special case of a (|android.view.KeyEvent|) event with key code of 
(|android.view.KeyEvent|) , this is a raw string of characters associated with 
the event. In all other cases it is null. 



    Returns: Returns a String of 1 or more characters associated with the event. 

*android.view.KeyEvent.getDeadChar(int,int)*

public static int getDeadChar(
  int accent,
  int c)

Get the character that is produced by putting accent on the character c. For 
example, getDeadChar('`', 'e') returns . 



*android.view.KeyEvent.getDeviceId()*

public final int getDeviceId()





*android.view.KeyEvent.getDisplayLabel()*

public char getDisplayLabel()

Gets the primary character for this key. In other words, the label that is 
physically printed on it. 



    Returns: The display label character, or 0 if none (eg. for non-printing keys). 

*android.view.KeyEvent.getDownTime()*

public final long getDownTime()

Retrieve the time of the most recent key down event, in the 
(|android.os.SystemClock|) time base. If this is a down event, this will be the 
same as (|android.view.KeyEvent|) . Note that when chording keys, this value is 
the down time of the most recently pressed key, which may not be the same 
physical key of this event. 



    Returns: Returns the most recent key down time, in the {@link 
             android.os.SystemClock#uptimeMillis} time base 

*android.view.KeyEvent.getEventTime()*

public final long getEventTime()

Retrieve the time this event occurred, in the (|android.os.SystemClock|) time 
base. 



    Returns: Returns the time this event occurred, in the {@link 
             android.os.SystemClock#uptimeMillis} time base. 

*android.view.KeyEvent.getEventTimeNano()*

public final long getEventTimeNano()

Retrieve the time this event occurred, in the (|android.os.SystemClock|) time 
base but with nanosecond (instead of millisecond) precision. 

The value is in nanosecond precision but it may not have nanosecond accuracy. 



    Returns: Returns the time this event occurred, in the {@link 
             android.os.SystemClock#uptimeMillis} time base but with nanosecond 
             (instead of millisecond) precision. 

*android.view.KeyEvent.getFlags()*

public final int getFlags()

Returns the flags for this key event. 



*android.view.KeyEvent.getKeyboardDevice()*

public final int getKeyboardDevice()

Renamed to (|android.view.KeyEvent|) . 

    Deprecated: use {@link #getDeviceId()} instead.


*android.view.KeyEvent.getKeyCharacterMap()*

public final |android.view.KeyCharacterMap| getKeyCharacterMap()

Gets the (|android.view.KeyCharacterMap|) associated with the keyboard device. 



    Returns: The associated key character map. 

*android.view.KeyEvent.getKeyCode()*

public final int getKeyCode()

Retrieve the key code of the key event. This is the physical key that was 
pressed, not the Unicode character. 



    Returns: The key code of the event. 

*android.view.KeyEvent.getKeyData(KeyCharacterMap.KeyData)*

public boolean getKeyData(android.view.KeyCharacterMap.KeyData results)

Get the character conversion data for a given key code. 

    Deprecated: instead use {@link #getDisplayLabel()},
 {@link #getNumber()} or {@link #getUnicodeChar(int)}.

    results - A {@link KeyCharacterMap.KeyData} instance that will be filled with the 
       results. 

    Returns: True if the key was mapped. If the key was not mapped, results is not modified. 

*android.view.KeyEvent.getMatch(char[])*

public char getMatch(char[] chars)

Gets the first character in the character array that can be generated by the 
specified key code. 

This is a convenience function that returns the same value as getMatch(chars, 
0)(|android.view.KeyEvent|) . 


    chars - The array of matching characters to consider. 

    Returns: The matching associated character, or 0 if none. 

*android.view.KeyEvent.getMatch(char[],int)*

public char getMatch(
  char[] chars,
  int metaState)

Gets the first character in the character array that can be generated by the 
specified key code. If there are multiple choices, prefers the one that would 
be generated with the specified meta key modifier state. 


    chars - The array of matching characters to consider. 
    metaState - The preferred meta key modifier state. 

    Returns: The matching associated character, or 0 if none. 

*android.view.KeyEvent.getMaxKeyCode()*

public static int getMaxKeyCode()

Returns the maximum keycode. 



*android.view.KeyEvent.getMetaState()*

public final int getMetaState()

Returns the state of the meta keys. 



    Returns: an integer in which each bit set to 1 represents a pressed meta key 

*android.view.KeyEvent.getModifierMetaStateMask()*

public static int getModifierMetaStateMask()

Gets a mask that includes all valid modifier key meta state bits. 

For the purposes of this function, (|android.view.KeyEvent|) , 
(|android.view.KeyEvent|) , and (|android.view.KeyEvent|) are not considered 
modifier keys. Consequently, the mask specifically excludes 
(|android.view.KeyEvent|) , (|android.view.KeyEvent|) and 
(|android.view.KeyEvent|) . 



    Returns: The modifier meta state mask which is a combination of {@link #META_SHIFT_ON}, 
             {@link #META_SHIFT_LEFT_ON}, {@link #META_SHIFT_RIGHT_ON}, {@link 
             #META_ALT_ON}, {@link #META_ALT_LEFT_ON}, {@link 
             #META_ALT_RIGHT_ON}, {@link #META_CTRL_ON}, {@link 
             #META_CTRL_LEFT_ON}, {@link #META_CTRL_RIGHT_ON}, {@link 
             #META_META_ON}, {@link #META_META_LEFT_ON}, {@link 
             #META_META_RIGHT_ON}, {@link #META_SYM_ON}, {@link 
             #META_FUNCTION_ON}. 

*android.view.KeyEvent.getModifiers()*

public final int getModifiers()

Returns the state of the modifier keys. 

For the purposes of this function, (|android.view.KeyEvent|) , 
(|android.view.KeyEvent|) , and (|android.view.KeyEvent|) are not considered 
modifier keys. Consequently, this function specifically masks out 
(|android.view.KeyEvent|) , (|android.view.KeyEvent|) and 
(|android.view.KeyEvent|) . 

The value returned consists of the meta state (from (|android.view.KeyEvent|) ) 
normalized using (|android.view.KeyEvent|) and then masked with 
(|android.view.KeyEvent|) so that only valid modifier bits are retained. 



    Returns: An integer in which each bit set to 1 represents a pressed modifier key. 

*android.view.KeyEvent.getNumber()*

public char getNumber()

Gets the number or symbol associated with the key. 

The character value is returned, not the numeric value. If the key is not a 
number, but is a symbol, the symbol is retuned. 

This method is intended to to support dial pads and other numeric or symbolic 
entry on keyboards where certain keys serve dual function as alphabetic and 
symbolic keys. This method returns the number or symbol associated with the key 
independent of whether the user has pressed the required modifier. 

For example, on one particular keyboard the keys on the top QWERTY row generate 
numbers when ALT is pressed such that ALT-Q maps to '1'. So for that keyboard 
when (|android.view.KeyEvent|) is called with (|android.view.KeyEvent|) it 
returns '1' so that the user can type numbers without pressing ALT when it 
makes sense. 



    Returns: The associated numeric or symbolic character, or 0 if none. 

*android.view.KeyEvent.getRepeatCount()*

public final int getRepeatCount()

Retrieve the repeat count of the event. For both key up and key down events, 
this is the number of times the key has repeated with the first down starting 
at 0 and counting up from there. For multiple key events, this is the number of 
down/up pairs that have occurred. 



    Returns: The number of times the key has repeated. 

*android.view.KeyEvent.getScanCode()*

public final int getScanCode()

Retrieve the hardware key id of this key event. These values are not reliable 
and vary from device to device.Mostly this is here for debugging purposes. 



*android.view.KeyEvent.getSource()*

public final int getSource()





*android.view.KeyEvent.getUnicodeChar()*

public int getUnicodeChar()

Gets the Unicode character generated by the specified key and meta key state 
combination. 

Returns the Unicode character that the specified key would produce when the 
specified meta bits (see (|android.text.method.MetaKeyKeyListener|) ) were 
active. 

Returns 0 if the key is not one that is used to type Unicode characters. 

If the return value has bit (|android.view.KeyCharacterMap|) set, the key is a 
"dead key" that should be combined with another to actually produce a character 
-- see (|android.view.KeyCharacterMap|) -- after masking with 
(|android.view.KeyCharacterMap|) . 



    Returns: The associated character or combining accent, or 0 if none. 

*android.view.KeyEvent.getUnicodeChar(int)*

public int getUnicodeChar(int metaState)

Gets the Unicode character generated by the specified key and meta key state 
combination. 

Returns the Unicode character that the specified key would produce when the 
specified meta bits (see (|android.text.method.MetaKeyKeyListener|) ) were 
active. 

Returns 0 if the key is not one that is used to type Unicode characters. 

If the return value has bit (|android.view.KeyCharacterMap|) set, the key is a 
"dead key" that should be combined with another to actually produce a character 
-- see (|android.view.KeyCharacterMap|) -- after masking with 
(|android.view.KeyCharacterMap|) . 


    metaState - The meta key modifier state. 

    Returns: The associated character or combining accent, or 0 if none. 

*android.view.KeyEvent.hasDefaultAction()*

public final boolean hasDefaultAction()





*android.view.KeyEvent.hasModifiers(int)*

public final boolean hasModifiers(int modifiers)

Returns true if only the specified modifiers keys are pressed. Returns false if 
a different combination of modifier keys are pressed. 

For the purposes of this function, (|android.view.KeyEvent|) , 
(|android.view.KeyEvent|) , and (|android.view.KeyEvent|) are not considered 
modifier keys. Consequently, this function ignores (|android.view.KeyEvent|) , 
(|android.view.KeyEvent|) and (|android.view.KeyEvent|) . 

If the specified modifier mask includes directional modifiers, such as 
(|android.view.KeyEvent|) , then this method ensures that the modifier is 
pressed on that side. If the specified modifier mask includes non-directional 
modifiers, such as (|android.view.KeyEvent|) , then this method ensures that 
the modifier is pressed on either side. If the specified modifier mask includes 
both directional and non-directional modifiers for the same type of key, such 
as (|android.view.KeyEvent|) and (|android.view.KeyEvent|) , then this method 
throws an illegal argument exception. 


    modifiers - The meta state of the modifier keys to check. May be a combination of modifier 
       meta states as defined by {@link #getModifierMetaStateMask()}. May be 0 
       to ensure that no modifier keys are pressed. 

    Returns: True if only the specified modifier keys are pressed. 

*android.view.KeyEvent.hasNoModifiers()*

public final boolean hasNoModifiers()

Returns true if no modifier keys are pressed. 

For the purposes of this function, (|android.view.KeyEvent|) , 
(|android.view.KeyEvent|) , and (|android.view.KeyEvent|) are not considered 
modifier keys. Consequently, this function ignores (|android.view.KeyEvent|) , 
(|android.view.KeyEvent|) and (|android.view.KeyEvent|) . 

The meta state is normalized prior to comparison using 
(|android.view.KeyEvent|) . 



    Returns: True if no modifier keys are pressed. 

*android.view.KeyEvent.isAltPressed()*

public final boolean isAltPressed()

Returns the pressed state of the ALT meta key. 



    Returns: true if the ALT key is pressed, false otherwise 

*android.view.KeyEvent.isCanceled()*

public final boolean isCanceled()

For (|android.view.KeyEvent|) events, indicates that the event has been 
canceled as per (|android.view.KeyEvent|) . 



*android.view.KeyEvent.isCapsLockOn()*

public final boolean isCapsLockOn()

Returns the locked state of the CAPS LOCK meta key. 



    Returns: true if the CAPS LOCK key is on, false otherwise 

*android.view.KeyEvent.isConfirmKey(int)*

public static final boolean isConfirmKey(int keyCode)

Whether key will, by default, trigger a click on the focused view. 



*android.view.KeyEvent.isCtrlPressed()*

public final boolean isCtrlPressed()

Returns the pressed state of the CTRL meta key. 



    Returns: true if the CTRL key is pressed, false otherwise 

*android.view.KeyEvent.isDown()*

public final boolean isDown()

Don't use in new code, instead explicitly check (|android.view.KeyEvent|) . 

    Deprecated


    Returns: If the action is ACTION_DOWN, returns true; else false. 

*android.view.KeyEvent.isFunctionPressed()*

public final boolean isFunctionPressed()

Returns the pressed state of the FUNCTION meta key. 



    Returns: true if the FUNCTION key is pressed, false otherwise 

*android.view.KeyEvent.isGamepadButton(int)*

public static final boolean isGamepadButton(int keyCode)

Returns true if the specified keycode is a gamepad button. 



    Returns: True if the keycode is a gamepad button, such as {@link #KEYCODE_BUTTON_A}. 

*android.view.KeyEvent.isLongPress()*

public final boolean isLongPress()

For (|android.view.KeyEvent|) events, indicates that the event has been 
canceled as per (|android.view.KeyEvent|) . 



*android.view.KeyEvent.isMetaPressed()*

public final boolean isMetaPressed()

Returns the pressed state of the META meta key. 



    Returns: true if the META key is pressed, false otherwise 

*android.view.KeyEvent.isModifierKey(int)*

public static boolean isModifierKey(int keyCode)

Returns true if this key code is a modifier key. 

For the purposes of this function, (|android.view.KeyEvent|) , 
(|android.view.KeyEvent|) , and (|android.view.KeyEvent|) are not considered 
modifier keys. Consequently, this function return false for those keys. 



    Returns: True if the key code is one of {@link #KEYCODE_SHIFT_LEFT} {@link 
             #KEYCODE_SHIFT_RIGHT}, {@link #KEYCODE_ALT_LEFT}, {@link 
             #KEYCODE_ALT_RIGHT}, {@link #KEYCODE_CTRL_LEFT}, {@link 
             #KEYCODE_CTRL_RIGHT}, {@link #KEYCODE_META_LEFT}, or {@link 
             #KEYCODE_META_RIGHT}, {@link #KEYCODE_SYM}, {@link #KEYCODE_NUM}, 
             {@link #KEYCODE_FUNCTION}. 

*android.view.KeyEvent.isNumLockOn()*

public final boolean isNumLockOn()

Returns the locked state of the NUM LOCK meta key. 



    Returns: true if the NUM LOCK key is on, false otherwise 

*android.view.KeyEvent.isPrintingKey()*

public boolean isPrintingKey()

Returns true if this key produces a glyph. 



    Returns: True if the key is a printing key. 

*android.view.KeyEvent.isScrollLockOn()*

public final boolean isScrollLockOn()

Returns the locked state of the SCROLL LOCK meta key. 



    Returns: true if the SCROLL LOCK key is on, false otherwise 

*android.view.KeyEvent.isShiftPressed()*

public final boolean isShiftPressed()

Returns the pressed state of the SHIFT meta key. 



    Returns: true if the SHIFT key is pressed, false otherwise 

*android.view.KeyEvent.isSymPressed()*

public final boolean isSymPressed()

Returns the pressed state of the SYM meta key. 



    Returns: true if the SYM key is pressed, false otherwise 

*android.view.KeyEvent.isSystem()*

public final boolean isSystem()

Is this a system key? System keys can not be used for menu shortcuts. 

TODO: this information should come from a table somewhere. TODO: should the 
dpad keys be here? arguably, because they also shouldn't be menu shortcuts 



*android.view.KeyEvent.isTainted()*

public final boolean isTainted()





*android.view.KeyEvent.isTracking()*

public final boolean isTracking()

For (|android.view.KeyEvent|) events, indicates that the event is still being 
tracked from its initial down event as per (|android.view.KeyEvent|) . 



*android.view.KeyEvent.keyCodeFromString(String)*

public static int keyCodeFromString(java.lang.String symbolicName)

Gets a keycode by its symbolic name such as "KEYCODE_A" or an equivalent 
numeric constant such as "1001". 


    symbolicName - The symbolic name of the keycode. 

    Returns: The keycode or {@link #KEYCODE_UNKNOWN} if not found. 

*android.view.KeyEvent.keyCodeToString(int)*

public static |java.lang.String| keyCodeToString(int keyCode)

Returns a string that represents the symbolic name of the specified keycode 
such as "KEYCODE_A", "KEYCODE_DPAD_UP", or an equivalent numeric constant such 
as "1001" if unknown. 


    keyCode - The key code. 

    Returns: The symbolic name of the specified keycode. 

*android.view.KeyEvent.metaStateHasModifiers(int,int)*

public static boolean metaStateHasModifiers(
  int metaState,
  int modifiers)

Returns true if only the specified modifier keys are pressed according to the 
specified meta state. Returns false if a different combination of modifier keys 
are pressed. 

For the purposes of this function, (|android.view.KeyEvent|) , 
(|android.view.KeyEvent|) , and (|android.view.KeyEvent|) are not considered 
modifier keys. Consequently, this function ignores (|android.view.KeyEvent|) , 
(|android.view.KeyEvent|) and (|android.view.KeyEvent|) . 

If the specified modifier mask includes directional modifiers, such as 
(|android.view.KeyEvent|) , then this method ensures that the modifier is 
pressed on that side. If the specified modifier mask includes non-directional 
modifiers, such as (|android.view.KeyEvent|) , then this method ensures that 
the modifier is pressed on either side. If the specified modifier mask includes 
both directional and non-directional modifiers for the same type of key, such 
as (|android.view.KeyEvent|) and (|android.view.KeyEvent|) , then this method 
throws an illegal argument exception. 


    metaState - The meta state to consider. 
    modifiers - The meta state of the modifier keys to check. May be a combination of modifier 
       meta states as defined by {@link #getModifierMetaStateMask()}. May be 0 
       to ensure that no modifier keys are pressed. 

    Returns: True if only the specified modifier keys are pressed. 

*android.view.KeyEvent.metaStateHasNoModifiers(int)*

public static boolean metaStateHasNoModifiers(int metaState)

Returns true if no modifiers keys are pressed according to the specified meta 
state. 

For the purposes of this function, (|android.view.KeyEvent|) , 
(|android.view.KeyEvent|) , and (|android.view.KeyEvent|) are not considered 
modifier keys. Consequently, this function ignores (|android.view.KeyEvent|) , 
(|android.view.KeyEvent|) and (|android.view.KeyEvent|) . 

The meta state is normalized prior to comparison using 
(|android.view.KeyEvent|) . 


    metaState - The meta state to consider. 

    Returns: True if no modifier keys are pressed. 

*android.view.KeyEvent.metaStateToString(int)*

public static |java.lang.String| metaStateToString(int metaState)

Returns a string that represents the symbolic name of the specified combined 
meta key modifier state flags such as "0", "META_SHIFT_ON", 
"META_ALT_ON|META_SHIFT_ON" or an equivalent numeric constant such as 
"0x10000000" if unknown. 


    metaState - The meta state. 

    Returns: The symbolic name of the specified combined meta state flags. 

*android.view.KeyEvent.normalizeMetaState(int)*

public static int normalizeMetaState(int metaState)

Normalizes the specified meta state. 

The meta state is normalized such that if either the left or right modifier 
meta state bits are set then the result will also include the universal bit for 
that modifier. 

If the specified meta state contains (|android.view.KeyEvent|) then the result 
will also contain (|android.view.KeyEvent|) in addition to 
(|android.view.KeyEvent|) and the other bits that were specified in the input. 
The same is process is performed for shift, control and meta. 

If the specified meta state contains synthetic meta states defined by 
(|android.text.method.MetaKeyKeyListener|) , then those states are translated 
here and the original synthetic meta states are removed from the result. 
(|android.text.method.MetaKeyKeyListener|) is translated to 
(|android.view.KeyEvent|) . (|android.text.method.MetaKeyKeyListener|) is 
translated to (|android.view.KeyEvent|) . 
(|android.text.method.MetaKeyKeyListener|) is translated to 
(|android.view.KeyEvent|) . 

Undefined meta state bits are removed. 


    metaState - The meta state. 

    Returns: The normalized meta state. 

*android.view.KeyEvent.obtain(KeyEvent)*

public static |android.view.KeyEvent| obtain(android.view.KeyEvent other)

Obtains a (potentially recycled) copy of another key event. 



*android.view.KeyEvent.obtain(long,long,int,int,int,int,int,int,int,int,String)*

public static |android.view.KeyEvent| obtain(
  long downTime,
  long eventTime,
  int action,
  int code,
  int repeat,
  int metaState,
  int deviceId,
  int scancode,
  int flags,
  int source,
  java.lang.String characters)

Obtains a (potentially recycled) key event. 



*android.view.KeyEvent.recycle()*

public final void recycle()

Recycles a key event. Key events should only be recycled if they are owned by 
the system since user code expects them to be essentially immutable, "tracking" 
notwithstanding. 



*android.view.KeyEvent.recycleIfNeededAfterDispatch()*

public final void recycleIfNeededAfterDispatch()





*android.view.KeyEvent.setSource(int)*

public final void setSource(int source)





*android.view.KeyEvent.setTainted(boolean)*

public final void setTainted(boolean tainted)





*android.view.KeyEvent.startTracking()*

public final void startTracking()

Call this during (|android.view.KeyEvent.Callback|) to have the system track 
the key through its final up (possibly including a long press). Note that only 
one key can be tracked at a time -- if another key down event is received while 
a previous one is being tracked, tracking is stopped on the previous event. 



*android.view.KeyEvent.toString()*

public |java.lang.String| toString()





*android.view.KeyEvent.writeToParcel(Parcel,int)*

public void writeToParcel(
  android.os.Parcel out,
  int flags)






