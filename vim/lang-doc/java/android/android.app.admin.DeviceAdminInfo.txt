*android.app.admin.DeviceAdminInfo* *DeviceAdminInfo* This class is used to spec

public final class DeviceAdminInfo
  extends    |java.lang.Object|
  implements |android.os.Parcelable|

|android.app.admin.DeviceAdminInfo_Description|
|android.app.admin.DeviceAdminInfo_Fields|
|android.app.admin.DeviceAdminInfo_Constructors|
|android.app.admin.DeviceAdminInfo_Methods|

================================================================================

*android.app.admin.DeviceAdminInfo_Fields*
|android.os.Parcelable.Creator<android.app.admin.DeviceAdminInfo>_android.app.admin.DeviceAdminInfo.CREATOR|
|int_android.app.admin.DeviceAdminInfo.USES_ENCRYPTED_STORAGE|
|int_android.app.admin.DeviceAdminInfo.USES_POLICY_DISABLE_CAMERA|
|int_android.app.admin.DeviceAdminInfo.USES_POLICY_DISABLE_KEYGUARD_FEATURES|
|int_android.app.admin.DeviceAdminInfo.USES_POLICY_EXPIRE_PASSWORD|
|int_android.app.admin.DeviceAdminInfo.USES_POLICY_FORCE_LOCK|
|int_android.app.admin.DeviceAdminInfo.USES_POLICY_LIMIT_PASSWORD|
|int_android.app.admin.DeviceAdminInfo.USES_POLICY_RESET_PASSWORD|
|int_android.app.admin.DeviceAdminInfo.USES_POLICY_SETS_GLOBAL_PROXY|
|int_android.app.admin.DeviceAdminInfo.USES_POLICY_WATCH_LOGIN|
|int_android.app.admin.DeviceAdminInfo.USES_POLICY_WIPE_DATA|

*android.app.admin.DeviceAdminInfo_Constructors*
|android.app.admin.DeviceAdminInfo(Context,ResolveInfo)|Constructor.

*android.app.admin.DeviceAdminInfo_Methods*
|android.app.admin.DeviceAdminInfo.describeContents()|
|android.app.admin.DeviceAdminInfo.dump(Printer,String)|
|android.app.admin.DeviceAdminInfo.getActivityInfo()|Return the raw information
|android.app.admin.DeviceAdminInfo.getComponent()|Return the component of the r
|android.app.admin.DeviceAdminInfo.getPackageName()|Return the .apk package tha
|android.app.admin.DeviceAdminInfo.getReceiverName()|Return the class name of t
|android.app.admin.DeviceAdminInfo.getTagForPolicy(int)|Return the XML tag name
|android.app.admin.DeviceAdminInfo.getUsedPolicies()|
|android.app.admin.DeviceAdminInfo.isVisible()|Returns whether this device admi
|android.app.admin.DeviceAdminInfo.loadDescription(PackageManager)|Load user-vi
|android.app.admin.DeviceAdminInfo.loadIcon(PackageManager)|Load the user-displ
|android.app.admin.DeviceAdminInfo.loadLabel(PackageManager)|Load the user-disp
|android.app.admin.DeviceAdminInfo.readPoliciesFromXml(XmlPullParser)|
|android.app.admin.DeviceAdminInfo.toString()|
|android.app.admin.DeviceAdminInfo.usesPolicy(int)|Return true if the device ad
|android.app.admin.DeviceAdminInfo.writePoliciesToXml(XmlSerializer)|
|android.app.admin.DeviceAdminInfo.writeToParcel(Parcel,int)|Used to package th

*android.app.admin.DeviceAdminInfo_Description*

This class is used to specify meta information of a device administrator 
component. 



*android.os.Parcelable.Creator<android.app.admin.DeviceAdminInfo>_android.app.admin.DeviceAdminInfo.CREATOR*

Used to make this class parcelable. 


*int_android.app.admin.DeviceAdminInfo.USES_ENCRYPTED_STORAGE*

A type of policy that this device admin can use: require encryption of stored 
data. 

To control this policy, the device admin must have a "encrypted-storage" tag in 
the "uses-policies" section of its meta-data. 


*int_android.app.admin.DeviceAdminInfo.USES_POLICY_DISABLE_CAMERA*

A type of policy that this device admin can use: disables use of all device 
cameras. 

To control this policy, the device admin must have a "disable-camera" tag in 
the "uses-policies" section of its meta-data. 


*int_android.app.admin.DeviceAdminInfo.USES_POLICY_DISABLE_KEYGUARD_FEATURES*

A type of policy that this device admin can use: disables use of keyguard 
features. 

To control this policy, the device admin must have a 
"disable-keyguard-features" tag in the "uses-policies" section of its 
meta-data. 


*int_android.app.admin.DeviceAdminInfo.USES_POLICY_EXPIRE_PASSWORD*

A type of policy that this device admin can use: force the user to change their 
password after an administrator-defined time limit. 

To control this policy, the device admin must have an "expire-password" tag in 
the "uses-policies" section of its meta-data. 


*int_android.app.admin.DeviceAdminInfo.USES_POLICY_FORCE_LOCK*

A type of policy that this device admin can use: able to force the device to 
lock via (|android.app.admin.DevicePolicyManager|) or limit the maximum lock 
timeout for the device via (|android.app.admin.DevicePolicyManager|) . 

To control this policy, the device admin must have a "force-lock" tag in the 
"uses-policies" section of its meta-data. 


*int_android.app.admin.DeviceAdminInfo.USES_POLICY_LIMIT_PASSWORD*

A type of policy that this device admin can use: limit the passwords that the 
user can select, via (|android.app.admin.DevicePolicyManager|) and 
(|android.app.admin.DevicePolicyManager|) . 

To control this policy, the device admin must have a "limit-password" tag in 
the "uses-policies" section of its meta-data. 


*int_android.app.admin.DeviceAdminInfo.USES_POLICY_RESET_PASSWORD*

A type of policy that this device admin can use: able to reset the user's 
password via (|android.app.admin.DevicePolicyManager|) . 

To control this policy, the device admin must have a "reset-password" tag in 
the "uses-policies" section of its meta-data. 


*int_android.app.admin.DeviceAdminInfo.USES_POLICY_SETS_GLOBAL_PROXY*

A type of policy that this device admin can use: able to specify the device 
Global Proxy, via (|android.app.admin.DevicePolicyManager|) . 

To control this policy, the device admin must have a "set-global-proxy" tag in 
the "uses-policies" section of its meta-data. 


*int_android.app.admin.DeviceAdminInfo.USES_POLICY_WATCH_LOGIN*

A type of policy that this device admin can use: able to watch login attempts 
from the user, via (|android.app.admin.DeviceAdminReceiver|) , 
(|android.app.admin.DeviceAdminReceiver|) , and 
(|android.app.admin.DevicePolicyManager|) . 

To control this policy, the device admin must have a "watch-login" tag in the 
"uses-policies" section of its meta-data. 


*int_android.app.admin.DeviceAdminInfo.USES_POLICY_WIPE_DATA*

A type of policy that this device admin can use: able to factory reset the 
device, erasing all of the user's data, via 
(|android.app.admin.DevicePolicyManager|) . 

To control this policy, the device admin must have a "wipe-data" tag in the 
"uses-policies" section of its meta-data. 



*android.app.admin.DeviceAdminInfo(Context,ResolveInfo)*

public DeviceAdminInfo(
  android.content.Context context,
  android.content.pm.ResolveInfo receiver)
  throws |java.io.IOException|
         |XmlPullParserException|
         
Constructor. 

    context - The Context in which we are parsing the device admin. 
    receiver - The ResolveInfo returned from the package manager about this device admin's 
       component. 

*android.app.admin.DeviceAdminInfo.describeContents()*

public int describeContents()





*android.app.admin.DeviceAdminInfo.dump(Printer,String)*

public void dump(
  android.util.Printer pw,
  java.lang.String prefix)





*android.app.admin.DeviceAdminInfo.getActivityInfo()*

public |android.content.pm.ActivityInfo| getActivityInfo()

Return the raw information about the receiver implementing this device admin. 
Do not modify the returned object. 



*android.app.admin.DeviceAdminInfo.getComponent()*

public |android.content.ComponentName| getComponent()

Return the component of the receiver that implements this device admin. 



*android.app.admin.DeviceAdminInfo.getPackageName()*

public |java.lang.String| getPackageName()

Return the .apk package that implements this device admin. 



*android.app.admin.DeviceAdminInfo.getReceiverName()*

public |java.lang.String| getReceiverName()

Return the class name of the receiver component that implements this device 
admin. 



*android.app.admin.DeviceAdminInfo.getTagForPolicy(int)*

public |java.lang.String| getTagForPolicy(int policyIdent)

Return the XML tag name for the given policy identifier. Valid identifiers are 
as per (|android.app.admin.DeviceAdminInfo|) . If the given identifier is not 
known, null is returned. 



*android.app.admin.DeviceAdminInfo.getUsedPolicies()*

public |java.util.ArrayList|<PolicyInfo> getUsedPolicies()





*android.app.admin.DeviceAdminInfo.isVisible()*

public boolean isVisible()

Returns whether this device admin would like to be visible to the user, even 
when it is not enabled. 



*android.app.admin.DeviceAdminInfo.loadDescription(PackageManager)*

public |java.lang.CharSequence| loadDescription(android.content.pm.PackageManager pm)
  throws |android.content.res.Resources.NotFoundException|
         
Load user-visible description associated with this device admin. 


    pm - Supply a PackageManager used to load the device admin's resources. 

*android.app.admin.DeviceAdminInfo.loadIcon(PackageManager)*

public Drawable loadIcon(android.content.pm.PackageManager pm)

Load the user-displayed icon for this device admin. 


    pm - Supply a PackageManager used to load the device admin's resources. 

*android.app.admin.DeviceAdminInfo.loadLabel(PackageManager)*

public |java.lang.CharSequence| loadLabel(android.content.pm.PackageManager pm)

Load the user-displayed label for this device admin. 


    pm - Supply a PackageManager used to load the device admin's resources. 

*android.app.admin.DeviceAdminInfo.readPoliciesFromXml(XmlPullParser)*

public void readPoliciesFromXml(XmlPullParser parser)
  throws |java.io.IOException|
         |XmlPullParserException|
         




*android.app.admin.DeviceAdminInfo.toString()*

public |java.lang.String| toString()





*android.app.admin.DeviceAdminInfo.usesPolicy(int)*

public boolean usesPolicy(int policyIdent)

Return true if the device admin has requested that it be able to use the given 
policy control. The possible policy identifier inputs are: 
(|android.app.admin.DeviceAdminInfo|) , (|android.app.admin.DeviceAdminInfo|) , 
(|android.app.admin.DeviceAdminInfo|) , (|android.app.admin.DeviceAdminInfo|) , 
(|android.app.admin.DeviceAdminInfo|) , (|android.app.admin.DeviceAdminInfo|) , 
(|android.app.admin.DeviceAdminInfo|) , (|android.app.admin.DeviceAdminInfo|) . 



*android.app.admin.DeviceAdminInfo.writePoliciesToXml(XmlSerializer)*

public void writePoliciesToXml(XmlSerializer out)
  throws |java.lang.IllegalArgumentException|
         |java.lang.IllegalStateException|
         |java.io.IOException|
         




*android.app.admin.DeviceAdminInfo.writeToParcel(Parcel,int)*

public void writeToParcel(
  android.os.Parcel dest,
  int flags)

Used to package this object into a (|android.os.Parcel|) . 


    dest - The {@link Parcel} to be written. 
    flags - The flags used for parceling. 


