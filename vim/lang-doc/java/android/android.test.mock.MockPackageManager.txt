*android.test.mock.MockPackageManager* *MockPackageManager* 

public class MockPackageManager
  extends    |android.content.pm.PackageManager|

|android.test.mock.MockPackageManager_Description|
|android.test.mock.MockPackageManager_Fields|
|android.test.mock.MockPackageManager_Constructors|
|android.test.mock.MockPackageManager_Methods|

================================================================================

*android.test.mock.MockPackageManager_Constructors*
|android.test.mock.MockPackageManager()|

*android.test.mock.MockPackageManager_Methods*
|android.test.mock.MockPackageManager.addPackageToPreferred(String)|
|android.test.mock.MockPackageManager.addPermission(PermissionInfo)|
|android.test.mock.MockPackageManager.addPermissionAsync(PermissionInfo)|
|android.test.mock.MockPackageManager.addPreferredActivity(IntentFilter,int,ComponentName[],ComponentName)|
|android.test.mock.MockPackageManager.canonicalToCurrentPackageNames(String[])|
|android.test.mock.MockPackageManager.checkPermission(String,String)|
|android.test.mock.MockPackageManager.checkSignatures(int,int)|
|android.test.mock.MockPackageManager.checkSignatures(String,String)|
|android.test.mock.MockPackageManager.clearPackagePreferredActivities(String)|
|android.test.mock.MockPackageManager.currentToCanonicalPackageNames(String[])|
|android.test.mock.MockPackageManager.extendVerificationTimeout(int,int,long)|
|android.test.mock.MockPackageManager.getActivityIcon(ComponentName)|
|android.test.mock.MockPackageManager.getActivityIcon(Intent)|
|android.test.mock.MockPackageManager.getActivityInfo(ComponentName,int)|
|android.test.mock.MockPackageManager.getActivityLogo(ComponentName)|
|android.test.mock.MockPackageManager.getActivityLogo(Intent)|
|android.test.mock.MockPackageManager.getAllPermissionGroups(int)|
|android.test.mock.MockPackageManager.getApplicationEnabledSetting(String)|
|android.test.mock.MockPackageManager.getApplicationIcon(ApplicationInfo)|
|android.test.mock.MockPackageManager.getApplicationIcon(String)|
|android.test.mock.MockPackageManager.getApplicationInfo(String,int)|
|android.test.mock.MockPackageManager.getApplicationLabel(ApplicationInfo)|
|android.test.mock.MockPackageManager.getApplicationLogo(ApplicationInfo)|
|android.test.mock.MockPackageManager.getApplicationLogo(String)|
|android.test.mock.MockPackageManager.getComponentEnabledSetting(ComponentName)|
|android.test.mock.MockPackageManager.getDefaultActivityIcon()|
|android.test.mock.MockPackageManager.getDrawable(String,int,ApplicationInfo)|
|android.test.mock.MockPackageManager.getInstalledApplications(int)|
|android.test.mock.MockPackageManager.getInstalledPackages(int)|
|android.test.mock.MockPackageManager.getInstallerPackageName(String)|
|android.test.mock.MockPackageManager.getInstrumentationInfo(ComponentName,int)|
|android.test.mock.MockPackageManager.getLaunchIntentForPackage(String)|
|android.test.mock.MockPackageManager.getNameForUid(int)|
|android.test.mock.MockPackageManager.getPackageArchiveInfo(String,int)|
|android.test.mock.MockPackageManager.getPackageGids(String)|
|android.test.mock.MockPackageManager.getPackageInfo(String,int)|
|android.test.mock.MockPackageManager.getPackagesForUid(int)|
|android.test.mock.MockPackageManager.getPackagesHoldingPermissions(String[],int)|
|android.test.mock.MockPackageManager.getPermissionGroupInfo(String,int)|
|android.test.mock.MockPackageManager.getPermissionInfo(String,int)|
|android.test.mock.MockPackageManager.getPreferredActivities(List<IntentFilter>,List<ComponentName>,String)|
|android.test.mock.MockPackageManager.getPreferredPackages(int)|
|android.test.mock.MockPackageManager.getProviderInfo(ComponentName,int)|
|android.test.mock.MockPackageManager.getReceiverInfo(ComponentName,int)|
|android.test.mock.MockPackageManager.getResourcesForActivity(ComponentName)|
|android.test.mock.MockPackageManager.getResourcesForApplication(ApplicationInfo)|
|android.test.mock.MockPackageManager.getResourcesForApplication(String)|
|android.test.mock.MockPackageManager.getServiceInfo(ComponentName,int)|
|android.test.mock.MockPackageManager.getSystemAvailableFeatures()|
|android.test.mock.MockPackageManager.getSystemSharedLibraryNames()|
|android.test.mock.MockPackageManager.getText(String,int,ApplicationInfo)|
|android.test.mock.MockPackageManager.getXml(String,int,ApplicationInfo)|
|android.test.mock.MockPackageManager.hasSystemFeature(String)|
|android.test.mock.MockPackageManager.isSafeMode()|
|android.test.mock.MockPackageManager.queryBroadcastReceivers(Intent,int)|
|android.test.mock.MockPackageManager.queryContentProviders(String,int,int)|
|android.test.mock.MockPackageManager.queryInstrumentation(String,int)|
|android.test.mock.MockPackageManager.queryIntentActivities(Intent,int)|
|android.test.mock.MockPackageManager.queryIntentActivityOptions(ComponentName,Intent[],Intent,int)|
|android.test.mock.MockPackageManager.queryIntentContentProviders(Intent,int)|
|android.test.mock.MockPackageManager.queryIntentServices(Intent,int)|
|android.test.mock.MockPackageManager.queryPermissionsByGroup(String,int)|
|android.test.mock.MockPackageManager.removePackageFromPreferred(String)|
|android.test.mock.MockPackageManager.removePermission(String)|
|android.test.mock.MockPackageManager.resolveActivity(Intent,int)|
|android.test.mock.MockPackageManager.resolveContentProvider(String,int)|
|android.test.mock.MockPackageManager.resolveService(Intent,int)|
|android.test.mock.MockPackageManager.setApplicationEnabledSetting(String,int,int)|
|android.test.mock.MockPackageManager.setComponentEnabledSetting(ComponentName,int,int)|
|android.test.mock.MockPackageManager.setInstallerPackageName(String,String)|
|android.test.mock.MockPackageManager.verifyPendingInstall(int,int)|

*android.test.mock.MockPackageManager_Description*





*android.test.mock.MockPackageManager()*

public MockPackageManager()




*android.test.mock.MockPackageManager.addPackageToPreferred(String)*

public void addPackageToPreferred(java.lang.String packageName)





*android.test.mock.MockPackageManager.addPermission(PermissionInfo)*

public boolean addPermission(android.content.pm.PermissionInfo info)





*android.test.mock.MockPackageManager.addPermissionAsync(PermissionInfo)*

public boolean addPermissionAsync(android.content.pm.PermissionInfo info)





*android.test.mock.MockPackageManager.addPreferredActivity(IntentFilter,int,ComponentName[],ComponentName)*

public void addPreferredActivity(
  android.content.IntentFilter filter,
  int match,
  android.content.ComponentName[] set,
  android.content.ComponentName activity)





*android.test.mock.MockPackageManager.canonicalToCurrentPackageNames(String[])*

public |java.lang.String|[] canonicalToCurrentPackageNames(java.lang.String[] names)





*android.test.mock.MockPackageManager.checkPermission(String,String)*

public int checkPermission(
  java.lang.String permName,
  java.lang.String pkgName)





*android.test.mock.MockPackageManager.checkSignatures(int,int)*

public int checkSignatures(
  int uid1,
  int uid2)





*android.test.mock.MockPackageManager.checkSignatures(String,String)*

public int checkSignatures(
  java.lang.String pkg1,
  java.lang.String pkg2)





*android.test.mock.MockPackageManager.clearPackagePreferredActivities(String)*

public void clearPackagePreferredActivities(java.lang.String packageName)





*android.test.mock.MockPackageManager.currentToCanonicalPackageNames(String[])*

public |java.lang.String|[] currentToCanonicalPackageNames(java.lang.String[] names)





*android.test.mock.MockPackageManager.extendVerificationTimeout(int,int,long)*

public void extendVerificationTimeout(
  int id,
  int verificationCodeAtTimeout,
  long millisecondsToDelay)





*android.test.mock.MockPackageManager.getActivityIcon(ComponentName)*

public |android.graphics.drawable.Drawable| getActivityIcon(android.content.ComponentName activityName)
  throws |android.content.pm.PackageManager.NameNotFoundException|
         




*android.test.mock.MockPackageManager.getActivityIcon(Intent)*

public |android.graphics.drawable.Drawable| getActivityIcon(android.content.Intent intent)
  throws |android.content.pm.PackageManager.NameNotFoundException|
         




*android.test.mock.MockPackageManager.getActivityInfo(ComponentName,int)*

public |android.content.pm.ActivityInfo| getActivityInfo(
  android.content.ComponentName className,
  int flags)
  throws |android.content.pm.PackageManager.NameNotFoundException|
         




*android.test.mock.MockPackageManager.getActivityLogo(ComponentName)*

public |android.graphics.drawable.Drawable| getActivityLogo(android.content.ComponentName activityName)
  throws |android.content.pm.PackageManager.NameNotFoundException|
         




*android.test.mock.MockPackageManager.getActivityLogo(Intent)*

public |android.graphics.drawable.Drawable| getActivityLogo(android.content.Intent intent)
  throws |android.content.pm.PackageManager.NameNotFoundException|
         




*android.test.mock.MockPackageManager.getAllPermissionGroups(int)*

public |java.util.List|<PermissionGroupInfo> getAllPermissionGroups(int flags)





*android.test.mock.MockPackageManager.getApplicationEnabledSetting(String)*

public int getApplicationEnabledSetting(java.lang.String packageName)





*android.test.mock.MockPackageManager.getApplicationIcon(ApplicationInfo)*

public |android.graphics.drawable.Drawable| getApplicationIcon(android.content.pm.ApplicationInfo info)





*android.test.mock.MockPackageManager.getApplicationIcon(String)*

public |android.graphics.drawable.Drawable| getApplicationIcon(java.lang.String packageName)
  throws |android.content.pm.PackageManager.NameNotFoundException|
         




*android.test.mock.MockPackageManager.getApplicationInfo(String,int)*

public |android.content.pm.ApplicationInfo| getApplicationInfo(
  java.lang.String packageName,
  int flags)
  throws |android.content.pm.PackageManager.NameNotFoundException|
         




*android.test.mock.MockPackageManager.getApplicationLabel(ApplicationInfo)*

public |java.lang.CharSequence| getApplicationLabel(android.content.pm.ApplicationInfo info)





*android.test.mock.MockPackageManager.getApplicationLogo(ApplicationInfo)*

public |android.graphics.drawable.Drawable| getApplicationLogo(android.content.pm.ApplicationInfo info)





*android.test.mock.MockPackageManager.getApplicationLogo(String)*

public |android.graphics.drawable.Drawable| getApplicationLogo(java.lang.String packageName)
  throws |android.content.pm.PackageManager.NameNotFoundException|
         




*android.test.mock.MockPackageManager.getComponentEnabledSetting(ComponentName)*

public int getComponentEnabledSetting(android.content.ComponentName componentName)





*android.test.mock.MockPackageManager.getDefaultActivityIcon()*

public |android.graphics.drawable.Drawable| getDefaultActivityIcon()





*android.test.mock.MockPackageManager.getDrawable(String,int,ApplicationInfo)*

public |android.graphics.drawable.Drawable| getDrawable(
  java.lang.String packageName,
  int resid,
  android.content.pm.ApplicationInfo appInfo)





*android.test.mock.MockPackageManager.getInstalledApplications(int)*

public |java.util.List|<ApplicationInfo> getInstalledApplications(int flags)





*android.test.mock.MockPackageManager.getInstalledPackages(int)*

public |java.util.List|<PackageInfo> getInstalledPackages(int flags)





*android.test.mock.MockPackageManager.getInstallerPackageName(String)*

public |java.lang.String| getInstallerPackageName(java.lang.String packageName)





*android.test.mock.MockPackageManager.getInstrumentationInfo(ComponentName,int)*

public |android.content.pm.InstrumentationInfo| getInstrumentationInfo(
  android.content.ComponentName className,
  int flags)
  throws |android.content.pm.PackageManager.NameNotFoundException|
         




*android.test.mock.MockPackageManager.getLaunchIntentForPackage(String)*

public |android.content.Intent| getLaunchIntentForPackage(java.lang.String packageName)





*android.test.mock.MockPackageManager.getNameForUid(int)*

public |java.lang.String| getNameForUid(int uid)





*android.test.mock.MockPackageManager.getPackageArchiveInfo(String,int)*

public |android.content.pm.PackageInfo| getPackageArchiveInfo(
  java.lang.String archiveFilePath,
  int flags)





*android.test.mock.MockPackageManager.getPackageGids(String)*

public int[] getPackageGids(java.lang.String packageName)
  throws |android.content.pm.PackageManager.NameNotFoundException|
         




*android.test.mock.MockPackageManager.getPackageInfo(String,int)*

public |android.content.pm.PackageInfo| getPackageInfo(
  java.lang.String packageName,
  int flags)
  throws |android.content.pm.PackageManager.NameNotFoundException|
         




*android.test.mock.MockPackageManager.getPackagesForUid(int)*

public |java.lang.String|[] getPackagesForUid(int uid)





*android.test.mock.MockPackageManager.getPackagesHoldingPermissions(String[],int)*

public |java.util.List|<PackageInfo> getPackagesHoldingPermissions(
  java.lang.String[] permissions,
  int flags)





*android.test.mock.MockPackageManager.getPermissionGroupInfo(String,int)*

public |android.content.pm.PermissionGroupInfo| getPermissionGroupInfo(
  java.lang.String name,
  int flags)
  throws |android.content.pm.PackageManager.NameNotFoundException|
         




*android.test.mock.MockPackageManager.getPermissionInfo(String,int)*

public |android.content.pm.PermissionInfo| getPermissionInfo(
  java.lang.String name,
  int flags)
  throws |android.content.pm.PackageManager.NameNotFoundException|
         




*android.test.mock.MockPackageManager.getPreferredActivities(List<IntentFilter>,List<ComponentName>,String)*

public int getPreferredActivities(
  java.util.List<android.content.IntentFilter> outFilters,
  java.util.List<android.content.ComponentName> outActivities,
  java.lang.String packageName)





*android.test.mock.MockPackageManager.getPreferredPackages(int)*

public |java.util.List|<PackageInfo> getPreferredPackages(int flags)





*android.test.mock.MockPackageManager.getProviderInfo(ComponentName,int)*

public |android.content.pm.ProviderInfo| getProviderInfo(
  android.content.ComponentName className,
  int flags)
  throws |android.content.pm.PackageManager.NameNotFoundException|
         




*android.test.mock.MockPackageManager.getReceiverInfo(ComponentName,int)*

public |android.content.pm.ActivityInfo| getReceiverInfo(
  android.content.ComponentName className,
  int flags)
  throws |android.content.pm.PackageManager.NameNotFoundException|
         




*android.test.mock.MockPackageManager.getResourcesForActivity(ComponentName)*

public |android.content.res.Resources| getResourcesForActivity(android.content.ComponentName activityName)
  throws |android.content.pm.PackageManager.NameNotFoundException|
         




*android.test.mock.MockPackageManager.getResourcesForApplication(ApplicationInfo)*

public |android.content.res.Resources| getResourcesForApplication(android.content.pm.ApplicationInfo app)





*android.test.mock.MockPackageManager.getResourcesForApplication(String)*

public |android.content.res.Resources| getResourcesForApplication(java.lang.String appPackageName)
  throws |android.content.pm.PackageManager.NameNotFoundException|
         




*android.test.mock.MockPackageManager.getServiceInfo(ComponentName,int)*

public |android.content.pm.ServiceInfo| getServiceInfo(
  android.content.ComponentName className,
  int flags)
  throws |android.content.pm.PackageManager.NameNotFoundException|
         




*android.test.mock.MockPackageManager.getSystemAvailableFeatures()*

public |android.content.pm.FeatureInfo|[] getSystemAvailableFeatures()





*android.test.mock.MockPackageManager.getSystemSharedLibraryNames()*

public |java.lang.String|[] getSystemSharedLibraryNames()





*android.test.mock.MockPackageManager.getText(String,int,ApplicationInfo)*

public |java.lang.CharSequence| getText(
  java.lang.String packageName,
  int resid,
  android.content.pm.ApplicationInfo appInfo)





*android.test.mock.MockPackageManager.getXml(String,int,ApplicationInfo)*

public |android.content.res.XmlResourceParser| getXml(
  java.lang.String packageName,
  int resid,
  android.content.pm.ApplicationInfo appInfo)





*android.test.mock.MockPackageManager.hasSystemFeature(String)*

public boolean hasSystemFeature(java.lang.String name)





*android.test.mock.MockPackageManager.isSafeMode()*

public boolean isSafeMode()





*android.test.mock.MockPackageManager.queryBroadcastReceivers(Intent,int)*

public |java.util.List|<ResolveInfo> queryBroadcastReceivers(
  android.content.Intent intent,
  int flags)





*android.test.mock.MockPackageManager.queryContentProviders(String,int,int)*

public |java.util.List|<ProviderInfo> queryContentProviders(
  java.lang.String processName,
  int uid,
  int flags)





*android.test.mock.MockPackageManager.queryInstrumentation(String,int)*

public |java.util.List|<InstrumentationInfo> queryInstrumentation(
  java.lang.String targetPackage,
  int flags)





*android.test.mock.MockPackageManager.queryIntentActivities(Intent,int)*

public |java.util.List|<ResolveInfo> queryIntentActivities(
  android.content.Intent intent,
  int flags)





*android.test.mock.MockPackageManager.queryIntentActivityOptions(ComponentName,Intent[],Intent,int)*

public |java.util.List|<ResolveInfo> queryIntentActivityOptions(
  android.content.ComponentName caller,
  android.content.Intent[] specifics,
  android.content.Intent intent,
  int flags)





*android.test.mock.MockPackageManager.queryIntentContentProviders(Intent,int)*

public |java.util.List|<ResolveInfo> queryIntentContentProviders(
  android.content.Intent intent,
  int flags)





*android.test.mock.MockPackageManager.queryIntentServices(Intent,int)*

public |java.util.List|<ResolveInfo> queryIntentServices(
  android.content.Intent intent,
  int flags)





*android.test.mock.MockPackageManager.queryPermissionsByGroup(String,int)*

public |java.util.List|<PermissionInfo> queryPermissionsByGroup(
  java.lang.String group,
  int flags)
  throws |android.content.pm.PackageManager.NameNotFoundException|
         




*android.test.mock.MockPackageManager.removePackageFromPreferred(String)*

public void removePackageFromPreferred(java.lang.String packageName)





*android.test.mock.MockPackageManager.removePermission(String)*

public void removePermission(java.lang.String name)





*android.test.mock.MockPackageManager.resolveActivity(Intent,int)*

public |android.content.pm.ResolveInfo| resolveActivity(
  android.content.Intent intent,
  int flags)





*android.test.mock.MockPackageManager.resolveContentProvider(String,int)*

public |android.content.pm.ProviderInfo| resolveContentProvider(
  java.lang.String name,
  int flags)





*android.test.mock.MockPackageManager.resolveService(Intent,int)*

public |android.content.pm.ResolveInfo| resolveService(
  android.content.Intent intent,
  int flags)





*android.test.mock.MockPackageManager.setApplicationEnabledSetting(String,int,int)*

public void setApplicationEnabledSetting(
  java.lang.String packageName,
  int newState,
  int flags)





*android.test.mock.MockPackageManager.setComponentEnabledSetting(ComponentName,int,int)*

public void setComponentEnabledSetting(
  android.content.ComponentName componentName,
  int newState,
  int flags)





*android.test.mock.MockPackageManager.setInstallerPackageName(String,String)*

public void setInstallerPackageName(
  java.lang.String targetPackage,
  java.lang.String installerPackageName)





*android.test.mock.MockPackageManager.verifyPendingInstall(int,int)*

public void verifyPendingInstall(
  int id,
  int verificationCode)






