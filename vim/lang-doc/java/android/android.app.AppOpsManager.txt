*android.app.AppOpsManager* *AppOpsManager* API for interacting with "applicatio

public class AppOpsManager
  extends    |java.lang.Object|

|android.app.AppOpsManager_Description|
|android.app.AppOpsManager_Fields|
|android.app.AppOpsManager_Constructors|
|android.app.AppOpsManager_Methods|

================================================================================

*android.app.AppOpsManager_Fields*
|int_android.app.AppOpsManager._NUM_OP|
|int_android.app.AppOpsManager.MODE_ALLOWED|
|int_android.app.AppOpsManager.MODE_ERRORED|
|int_android.app.AppOpsManager.MODE_IGNORED|
|int_android.app.AppOpsManager.OP_ACCESS_NOTIFICATIONS|
|int_android.app.AppOpsManager.OP_AUDIO_ALARM_VOLUME|
|int_android.app.AppOpsManager.OP_AUDIO_BLUETOOTH_VOLUME|
|int_android.app.AppOpsManager.OP_AUDIO_MASTER_VOLUME|
|int_android.app.AppOpsManager.OP_AUDIO_MEDIA_VOLUME|
|int_android.app.AppOpsManager.OP_AUDIO_NOTIFICATION_VOLUME|
|int_android.app.AppOpsManager.OP_AUDIO_RING_VOLUME|
|int_android.app.AppOpsManager.OP_AUDIO_VOICE_VOLUME|
|int_android.app.AppOpsManager.OP_CALL_PHONE|
|int_android.app.AppOpsManager.OP_CAMERA|
|int_android.app.AppOpsManager.OP_COARSE_LOCATION|
|int_android.app.AppOpsManager.OP_FINE_LOCATION|
|int_android.app.AppOpsManager.OP_GPS|
|int_android.app.AppOpsManager.OP_MONITOR_HIGH_POWER_LOCATION|
|int_android.app.AppOpsManager.OP_MONITOR_LOCATION|
|int_android.app.AppOpsManager.OP_NEIGHBORING_CELLS|
|int_android.app.AppOpsManager.OP_NONE|
|int_android.app.AppOpsManager.OP_PLAY_AUDIO|
|int_android.app.AppOpsManager.OP_POST_NOTIFICATION|
|int_android.app.AppOpsManager.OP_READ_CALENDAR|
|int_android.app.AppOpsManager.OP_READ_CALL_LOG|
|int_android.app.AppOpsManager.OP_READ_CLIPBOARD|
|int_android.app.AppOpsManager.OP_READ_CONTACTS|
|int_android.app.AppOpsManager.OP_READ_ICC_SMS|
|int_android.app.AppOpsManager.OP_READ_SMS|
|int_android.app.AppOpsManager.OP_RECEIVE_EMERGECY_SMS|
|int_android.app.AppOpsManager.OP_RECEIVE_MMS|
|int_android.app.AppOpsManager.OP_RECEIVE_SMS|
|int_android.app.AppOpsManager.OP_RECEIVE_WAP_PUSH|
|int_android.app.AppOpsManager.OP_RECORD_AUDIO|
|int_android.app.AppOpsManager.OP_SEND_SMS|
|int_android.app.AppOpsManager.OP_SYSTEM_ALERT_WINDOW|
|int_android.app.AppOpsManager.OP_TAKE_AUDIO_FOCUS|
|int_android.app.AppOpsManager.OP_TAKE_MEDIA_BUTTONS|
|int_android.app.AppOpsManager.OP_VIBRATE|
|int_android.app.AppOpsManager.OP_WAKE_LOCK|
|int_android.app.AppOpsManager.OP_WIFI_SCAN|
|int_android.app.AppOpsManager.OP_WRITE_CALENDAR|
|int_android.app.AppOpsManager.OP_WRITE_CALL_LOG|
|int_android.app.AppOpsManager.OP_WRITE_CLIPBOARD|
|int_android.app.AppOpsManager.OP_WRITE_CONTACTS|
|int_android.app.AppOpsManager.OP_WRITE_ICC_SMS|
|int_android.app.AppOpsManager.OP_WRITE_SETTINGS|
|int_android.app.AppOpsManager.OP_WRITE_SMS|
|java.lang.String_android.app.AppOpsManager.OPSTR_COARSE_LOCATION|
|java.lang.String_android.app.AppOpsManager.OPSTR_FINE_LOCATION|
|java.lang.String_android.app.AppOpsManager.OPSTR_MONITOR_HIGH_POWER_LOCATION|
|java.lang.String_android.app.AppOpsManager.OPSTR_MONITOR_LOCATION|

*android.app.AppOpsManager_Methods*
|android.app.AppOpsManager.checkOp(int,int,String)|Do a quick check for whether
|android.app.AppOpsManager.checkOp(String,int,String)|Do a quick check for whet
|android.app.AppOpsManager.checkOpNoThrow(int,int,String)|Like#checkOpbut inste
|android.app.AppOpsManager.checkOpNoThrow(String,int,String)|Like#checkOp but i
|android.app.AppOpsManager.checkPackage(int,String)|Do a quick check to validat
|android.app.AppOpsManager.finishOp(int)|
|android.app.AppOpsManager.finishOp(int,int,String)|Report that an application 
|android.app.AppOpsManager.finishOp(String,int,String)|Report that an applicati
|android.app.AppOpsManager.getOpsForPackage(int,String,int[])|Retrieve current 
|android.app.AppOpsManager.getPackagesForOps(int[])|Retrieve current operation 
|android.app.AppOpsManager.getToken(IAppOpsService)|
|android.app.AppOpsManager.noteOp(int)|
|android.app.AppOpsManager.noteOp(int,int,String)|Make note of an application p
|android.app.AppOpsManager.noteOp(String,int,String)|Make note of an applicatio
|android.app.AppOpsManager.noteOpNoThrow(int,int,String)|Like#noteOpbut instead
|android.app.AppOpsManager.noteOpNoThrow(String,int,String)|Like#noteOpbut inst
|android.app.AppOpsManager.opAllowsReset(int)|Retrieve whether the op allows it
|android.app.AppOpsManager.opToDefaultMode(int)|Retrieve the default mode for t
|android.app.AppOpsManager.opToName(int)|Retrieve a non-localized name for the 
|android.app.AppOpsManager.opToPermission(int)|Retrieve the permission associat
|android.app.AppOpsManager.opToSwitch(int)|Retrieve the op switch that controls
|android.app.AppOpsManager.resetAllModes()|
|android.app.AppOpsManager.setMode(int,int,String,int)|
|android.app.AppOpsManager.startOp(int)|
|android.app.AppOpsManager.startOp(int,int,String)|Report that an application h
|android.app.AppOpsManager.startOp(String,int,String)|Report that an applicatio
|android.app.AppOpsManager.startOpNoThrow(int,int,String)|Like#startOpbut inste
|android.app.AppOpsManager.startOpNoThrow(String,int,String)|Like#startOpbut in
|android.app.AppOpsManager.startWatchingMode(int,String,AppOpsManager.OnOpChangedListener)|
|android.app.AppOpsManager.startWatchingMode(String,String,AppOpsManager.OnOpChangedListener)|
|android.app.AppOpsManager.stopWatchingMode(AppOpsManager.OnOpChangedListener)|

*android.app.AppOpsManager_Description*

API for interacting with "application operation" tracking. 

This API is not generally intended for third party application developers; most 
features are only available to system applicatins. Obtain an instance of it 
through Context.getSystemService(|android.content.Context|) with 
Context.APP_OPS_SERVICE(|android.content.Context|) . 



*int_android.app.AppOpsManager._NUM_OP*




*int_android.app.AppOpsManager.MODE_ALLOWED*

Result from (|android.app.AppOpsManager|) , (|android.app.AppOpsManager|) , 
(|android.app.AppOpsManager|) : the given caller is allowed to perform the 
given operation. 


*int_android.app.AppOpsManager.MODE_ERRORED*

Result from (|android.app.AppOpsManager|) , (|android.app.AppOpsManager|) , 
(|android.app.AppOpsManager|) : the given caller is not allowed to perform the 
given operation, and this attempt should cause it to have a fatal error, 
typically a (|java.lang.SecurityException|) . 


*int_android.app.AppOpsManager.MODE_IGNORED*

Result from (|android.app.AppOpsManager|) , (|android.app.AppOpsManager|) , 
(|android.app.AppOpsManager|) : the given caller is not allowed to perform the 
given operation, and this attempt should silently fail (it should not cause the 
app to crash). 


*int_android.app.AppOpsManager.OP_ACCESS_NOTIFICATIONS*




*int_android.app.AppOpsManager.OP_AUDIO_ALARM_VOLUME*




*int_android.app.AppOpsManager.OP_AUDIO_BLUETOOTH_VOLUME*




*int_android.app.AppOpsManager.OP_AUDIO_MASTER_VOLUME*




*int_android.app.AppOpsManager.OP_AUDIO_MEDIA_VOLUME*




*int_android.app.AppOpsManager.OP_AUDIO_NOTIFICATION_VOLUME*




*int_android.app.AppOpsManager.OP_AUDIO_RING_VOLUME*




*int_android.app.AppOpsManager.OP_AUDIO_VOICE_VOLUME*




*int_android.app.AppOpsManager.OP_CALL_PHONE*




*int_android.app.AppOpsManager.OP_CAMERA*




*int_android.app.AppOpsManager.OP_COARSE_LOCATION*




*int_android.app.AppOpsManager.OP_FINE_LOCATION*




*int_android.app.AppOpsManager.OP_GPS*




*int_android.app.AppOpsManager.OP_MONITOR_HIGH_POWER_LOCATION*




*int_android.app.AppOpsManager.OP_MONITOR_LOCATION*




*int_android.app.AppOpsManager.OP_NEIGHBORING_CELLS*




*int_android.app.AppOpsManager.OP_NONE*




*int_android.app.AppOpsManager.OP_PLAY_AUDIO*




*int_android.app.AppOpsManager.OP_POST_NOTIFICATION*




*int_android.app.AppOpsManager.OP_READ_CALENDAR*




*int_android.app.AppOpsManager.OP_READ_CALL_LOG*




*int_android.app.AppOpsManager.OP_READ_CLIPBOARD*




*int_android.app.AppOpsManager.OP_READ_CONTACTS*




*int_android.app.AppOpsManager.OP_READ_ICC_SMS*




*int_android.app.AppOpsManager.OP_READ_SMS*




*int_android.app.AppOpsManager.OP_RECEIVE_EMERGECY_SMS*




*int_android.app.AppOpsManager.OP_RECEIVE_MMS*




*int_android.app.AppOpsManager.OP_RECEIVE_SMS*




*int_android.app.AppOpsManager.OP_RECEIVE_WAP_PUSH*




*int_android.app.AppOpsManager.OP_RECORD_AUDIO*




*int_android.app.AppOpsManager.OP_SEND_SMS*




*int_android.app.AppOpsManager.OP_SYSTEM_ALERT_WINDOW*




*int_android.app.AppOpsManager.OP_TAKE_AUDIO_FOCUS*




*int_android.app.AppOpsManager.OP_TAKE_MEDIA_BUTTONS*




*int_android.app.AppOpsManager.OP_VIBRATE*




*int_android.app.AppOpsManager.OP_WAKE_LOCK*




*int_android.app.AppOpsManager.OP_WIFI_SCAN*




*int_android.app.AppOpsManager.OP_WRITE_CALENDAR*




*int_android.app.AppOpsManager.OP_WRITE_CALL_LOG*




*int_android.app.AppOpsManager.OP_WRITE_CLIPBOARD*




*int_android.app.AppOpsManager.OP_WRITE_CONTACTS*




*int_android.app.AppOpsManager.OP_WRITE_ICC_SMS*




*int_android.app.AppOpsManager.OP_WRITE_SETTINGS*




*int_android.app.AppOpsManager.OP_WRITE_SMS*




*java.lang.String_android.app.AppOpsManager.OPSTR_COARSE_LOCATION*

Access to coarse location information. 


*java.lang.String_android.app.AppOpsManager.OPSTR_FINE_LOCATION*

Access to fine location information. 


*java.lang.String_android.app.AppOpsManager.OPSTR_MONITOR_HIGH_POWER_LOCATION*

Continually monitoring location data with a relatively high power request. 


*java.lang.String_android.app.AppOpsManager.OPSTR_MONITOR_LOCATION*

Continually monitoring location data. 



*android.app.AppOpsManager.checkOp(int,int,String)*

public int checkOp(
  int op,
  int uid,
  java.lang.String packageName)

Do a quick check for whether an application might be able to perform an 
operation. This is not a security check; you must use 
(|android.app.AppOpsManager|) or (|android.app.AppOpsManager|) for your actual 
security checks, which also ensure that the given uid and package name are 
consistent. This function can just be used for a quick check to see if an 
operation has been disabled for the application, as an early reject of some 
work. This does not modify the time stamp or other data about the operation. 


    op - The operation to check. One of the OP_* constants. 
    uid - The user id of the application attempting to perform the operation. 
    packageName - The name of the application attempting to perform the operation. 

    Returns: Returns {@link #MODE_ALLOWED} if the operation is allowed, or {@link 
             #MODE_IGNORED} if it is not allowed and should be silently ignored 
             (without causing the app to crash). 

*android.app.AppOpsManager.checkOp(String,int,String)*

public int checkOp(
  java.lang.String op,
  int uid,
  java.lang.String packageName)

Do a quick check for whether an application might be able to perform an 
operation. This is not a security check; you must use 
(|android.app.AppOpsManager|) or (|android.app.AppOpsManager|) for your actual 
security checks, which also ensure that the given uid and package name are 
consistent. This function can just be used for a quick check to see if an 
operation has been disabled for the application, as an early reject of some 
work. This does not modify the time stamp or other data about the operation. 


    op - The operation to check. One of the OPSTR_* constants. 
    uid - The user id of the application attempting to perform the operation. 
    packageName - The name of the application attempting to perform the operation. 

    Returns: Returns {@link #MODE_ALLOWED} if the operation is allowed, or {@link 
             #MODE_IGNORED} if it is not allowed and should be silently ignored 
             (without causing the app to crash). 

*android.app.AppOpsManager.checkOpNoThrow(int,int,String)*

public int checkOpNoThrow(
  int op,
  int uid,
  java.lang.String packageName)

Like (|android.app.AppOpsManager|) but instead of throwing a 
(|java.lang.SecurityException|) it returns (|android.app.AppOpsManager|) . 



*android.app.AppOpsManager.checkOpNoThrow(String,int,String)*

public int checkOpNoThrow(
  java.lang.String op,
  int uid,
  java.lang.String packageName)

Like#checkOp but instead of throwing a {@link SecurityException} it returns 
{@link #MODE_ERRORED}. 



*android.app.AppOpsManager.checkPackage(int,String)*

public void checkPackage(
  int uid,
  java.lang.String packageName)

Do a quick check to validate if a package name belongs to a UID. 



*android.app.AppOpsManager.finishOp(int)*

public void finishOp(int op)





*android.app.AppOpsManager.finishOp(int,int,String)*

public void finishOp(
  int op,
  int uid,
  java.lang.String packageName)

Report that an application is no longer performing an operation that had 
previously been started with (|android.app.AppOpsManager|) . There is no 
validation of input or result; the parameters supplied here must be the exact 
same ones previously passed in when starting the operation. 



*android.app.AppOpsManager.finishOp(String,int,String)*

public void finishOp(
  java.lang.String op,
  int uid,
  java.lang.String packageName)

Report that an application is no longer performing an operation that had 
previously been started with (|android.app.AppOpsManager|) . There is no 
validation of input or result; the parameters supplied here must be the exact 
same ones previously passed in when starting the operation. 



*android.app.AppOpsManager.getOpsForPackage(int,String,int[])*

public |java.util.List|<PackageOps> getOpsForPackage(
  int uid,
  java.lang.String packageName,
  int[] ops)

Retrieve current operation state for one application. 


    uid - The uid of the application of interest. 
    packageName - The name of the application of interest. 
    ops - The set of operations you are interested in, or null if you want all of them. 

*android.app.AppOpsManager.getPackagesForOps(int[])*

public |java.util.List|<PackageOps> getPackagesForOps(int[] ops)

Retrieve current operation state for all applications. 


    ops - The set of operations you are interested in, or null if you want all of them. 

*android.app.AppOpsManager.getToken(IAppOpsService)*

public static |android.os.IBinder| getToken(IAppOpsService service)





*android.app.AppOpsManager.noteOp(int)*

public int noteOp(int op)





*android.app.AppOpsManager.noteOp(int,int,String)*

public int noteOp(
  int op,
  int uid,
  java.lang.String packageName)

Make note of an application performing an operation. Note that you must pass in 
both the uid and name of the application to be checked; this function will 
verify that these two match, and if not, return (|android.app.AppOpsManager|) . 
If this call succeeds, the last execution time of the operation for this app 
will be updated to the current time. 


    op - The operation to note. One of the OP_* constants. 
    uid - The user id of the application attempting to perform the operation. 
    packageName - The name of the application attempting to perform the operation. 

    Returns: Returns {@link #MODE_ALLOWED} if the operation is allowed, or {@link 
             #MODE_IGNORED} if it is not allowed and should be silently ignored 
             (without causing the app to crash). 

*android.app.AppOpsManager.noteOp(String,int,String)*

public int noteOp(
  java.lang.String op,
  int uid,
  java.lang.String packageName)

Make note of an application performing an operation. Note that you must pass in 
both the uid and name of the application to be checked; this function will 
verify that these two match, and if not, return (|android.app.AppOpsManager|) . 
If this call succeeds, the last execution time of the operation for this app 
will be updated to the current time. 


    op - The operation to note. One of the OPSTR_* constants. 
    uid - The user id of the application attempting to perform the operation. 
    packageName - The name of the application attempting to perform the operation. 

    Returns: Returns {@link #MODE_ALLOWED} if the operation is allowed, or {@link 
             #MODE_IGNORED} if it is not allowed and should be silently ignored 
             (without causing the app to crash). 

*android.app.AppOpsManager.noteOpNoThrow(int,int,String)*

public int noteOpNoThrow(
  int op,
  int uid,
  java.lang.String packageName)

Like (|android.app.AppOpsManager|) but instead of throwing a 
(|java.lang.SecurityException|) it returns (|android.app.AppOpsManager|) . 



*android.app.AppOpsManager.noteOpNoThrow(String,int,String)*

public int noteOpNoThrow(
  java.lang.String op,
  int uid,
  java.lang.String packageName)

Like (|android.app.AppOpsManager|) but instead of throwing a 
(|java.lang.SecurityException|) it returns (|android.app.AppOpsManager|) . 



*android.app.AppOpsManager.opAllowsReset(int)*

public static boolean opAllowsReset(int op)

Retrieve whether the op allows itself to be reset. 



*android.app.AppOpsManager.opToDefaultMode(int)*

public static int opToDefaultMode(int op)

Retrieve the default mode for the operation. 



*android.app.AppOpsManager.opToName(int)*

public static |java.lang.String| opToName(int op)

Retrieve a non-localized name for the operation, for debugging output. 



*android.app.AppOpsManager.opToPermission(int)*

public static |java.lang.String| opToPermission(int op)

Retrieve the permission associated with an operation, or null if there is not 
one. 



*android.app.AppOpsManager.opToSwitch(int)*

public static int opToSwitch(int op)

Retrieve the op switch that controls the given operation. 



*android.app.AppOpsManager.resetAllModes()*

public void resetAllModes()





*android.app.AppOpsManager.setMode(int,int,String,int)*

public void setMode(
  int code,
  int uid,
  java.lang.String packageName,
  int mode)





*android.app.AppOpsManager.startOp(int)*

public int startOp(int op)





*android.app.AppOpsManager.startOp(int,int,String)*

public int startOp(
  int op,
  int uid,
  java.lang.String packageName)

Report that an application has started executing a long-running operation. Note 
that you must pass in both the uid and name of the application to be checked; 
this function will verify that these two match, and if not, return 
(|android.app.AppOpsManager|) . If this call succeeds, the last execution time 
of the operation for this app will be updated to the current time and the 
operation will be marked as "running". In this case you must later call 
(|android.app.AppOpsManager|) to report when the application is no longer 
performing the operation. 


    op - The operation to start. One of the OP_* constants. 
    uid - The user id of the application attempting to perform the operation. 
    packageName - The name of the application attempting to perform the operation. 

    Returns: Returns {@link #MODE_ALLOWED} if the operation is allowed, or {@link 
             #MODE_IGNORED} if it is not allowed and should be silently ignored 
             (without causing the app to crash). 

*android.app.AppOpsManager.startOp(String,int,String)*

public int startOp(
  java.lang.String op,
  int uid,
  java.lang.String packageName)

Report that an application has started executing a long-running operation. Note 
that you must pass in both the uid and name of the application to be checked; 
this function will verify that these two match, and if not, return 
(|android.app.AppOpsManager|) . If this call succeeds, the last execution time 
of the operation for this app will be updated to the current time and the 
operation will be marked as "running". In this case you must later call 
(|android.app.AppOpsManager|) to report when the application is no longer 
performing the operation. 


    op - The operation to start. One of the OPSTR_* constants. 
    uid - The user id of the application attempting to perform the operation. 
    packageName - The name of the application attempting to perform the operation. 

    Returns: Returns {@link #MODE_ALLOWED} if the operation is allowed, or {@link 
             #MODE_IGNORED} if it is not allowed and should be silently ignored 
             (without causing the app to crash). 

*android.app.AppOpsManager.startOpNoThrow(int,int,String)*

public int startOpNoThrow(
  int op,
  int uid,
  java.lang.String packageName)

Like (|android.app.AppOpsManager|) but instead of throwing a 
(|java.lang.SecurityException|) it returns (|android.app.AppOpsManager|) . 



*android.app.AppOpsManager.startOpNoThrow(String,int,String)*

public int startOpNoThrow(
  java.lang.String op,
  int uid,
  java.lang.String packageName)

Like (|android.app.AppOpsManager|) but instead of throwing a 
(|java.lang.SecurityException|) it returns (|android.app.AppOpsManager|) . 



*android.app.AppOpsManager.startWatchingMode(int,String,AppOpsManager.OnOpChangedListener)*

public void startWatchingMode(
  int op,
  java.lang.String packageName,
  android.app.AppOpsManager.OnOpChangedListener callback)

Monitor for changes to the operating mode for the given op in the given app 
package. 


    op - The operation to monitor, one of OP_*. 
    packageName - The name of the application to monitor. 
    callback - Where to report changes. 

*android.app.AppOpsManager.startWatchingMode(String,String,AppOpsManager.OnOpChangedListener)*

public void startWatchingMode(
  java.lang.String op,
  java.lang.String packageName,
  android.app.AppOpsManager.OnOpChangedListener callback)

Monitor for changes to the operating mode for the given op in the given app 
package. 


    op - The operation to monitor, one of OPSTR_*. 
    packageName - The name of the application to monitor. 
    callback - Where to report changes. 

*android.app.AppOpsManager.stopWatchingMode(AppOpsManager.OnOpChangedListener)*

public void stopWatchingMode(android.app.AppOpsManager.OnOpChangedListener callback)

Stop monitoring that was previously started with (|android.app.AppOpsManager|) 
. All monitoring associated with this callback will be removed. 




