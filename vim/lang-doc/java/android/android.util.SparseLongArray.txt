*android.util.SparseLongArray* *SparseLongArray* SparseLongArrays map integers t

public class SparseLongArray
  extends    |java.lang.Object|
  implements |java.lang.Cloneable|

|android.util.SparseLongArray_Description|
|android.util.SparseLongArray_Fields|
|android.util.SparseLongArray_Constructors|
|android.util.SparseLongArray_Methods|

================================================================================

*android.util.SparseLongArray_Constructors*
|android.util.SparseLongArray()|Creates a new SparseLongArray containing no map
|android.util.SparseLongArray(int)|Creates a new SparseLongArray containing no 

*android.util.SparseLongArray_Methods*
|android.util.SparseLongArray.append(int,long)|Puts a key/value pair into the a
|android.util.SparseLongArray.clear()|Removes all key-value mappings from this 
|android.util.SparseLongArray.clone()|
|android.util.SparseLongArray.delete(int)|Removes the mapping from the specifie
|android.util.SparseLongArray.get(int)|Gets the long mapped from the specified 
|android.util.SparseLongArray.get(int,long)|Gets the long mapped from the speci
|android.util.SparseLongArray.indexOfKey(int)|Returns the index for which#keyAt
|android.util.SparseLongArray.indexOfValue(long)|Returns an index for which#val
|android.util.SparseLongArray.keyAt(int)|Given an index in the range 0...size()
|android.util.SparseLongArray.put(int,long)|Adds a mapping from the specified k
|android.util.SparseLongArray.removeAt(int)|Removes the mapping at the given in
|android.util.SparseLongArray.size()|Returns the number of key-value mappings t
|android.util.SparseLongArray.toString()|
|android.util.SparseLongArray.valueAt(int)|Given an index in the range 0...size

*android.util.SparseLongArray_Description*

SparseLongArrays map integers to longs. Unlike a normal array of longs, there 
can be gaps in the indices. It is intended to be more memory efficient than 
using a HashMap to map Integers to Longs, both because it avoids auto-boxing 
keys and values and its data structure doesn't rely on an extra entry object 
for each mapping. 

Note that this container keeps its mappings in an array data structure, using a 
binary search to find keys. The implementation is not intended to be 
appropriate for data structures that may contain large numbers of items. It is 
generally slower than a traditional HashMap, since lookups require a binary 
search and adds and removes require inserting and deleting entries in the 
array. For containers holding up to hundreds of items, the performance 
difference is not significant, less than 50%. 

It is possible to iterate over the items in this container using 
(|android.util.SparseLongArray|) and (|android.util.SparseLongArray|) . 
Iterating over the keys using keyAt(int) with ascending values of the index 
will return the keys in ascending order, or the values corresponding to the 
keys in ascending order in the case of valueAt(int). 



*android.util.SparseLongArray()*

public SparseLongArray()

Creates a new SparseLongArray containing no mappings. 


*android.util.SparseLongArray(int)*

public SparseLongArray(int initialCapacity)

Creates a new SparseLongArray containing no mappings that will not require any 
additional memory allocation to store the specified number of mappings. If you 
supply an initial capacity of 0, the sparse array will be initialized with a 
light-weight representation not requiring any additional array allocations. 


*android.util.SparseLongArray.append(int,long)*

public void append(
  int key,
  long value)

Puts a key/value pair into the array, optimizing for the case where the key is 
greater than all existing keys in the array. 



*android.util.SparseLongArray.clear()*

public void clear()

Removes all key-value mappings from this SparseIntArray. 



*android.util.SparseLongArray.clone()*

public |android.util.SparseLongArray| clone()





*android.util.SparseLongArray.delete(int)*

public void delete(int key)

Removes the mapping from the specified key, if there was any. 



*android.util.SparseLongArray.get(int)*

public long get(int key)

Gets the long mapped from the specified key, or 0 if no such mapping has been 
made. 



*android.util.SparseLongArray.get(int,long)*

public long get(
  int key,
  long valueIfKeyNotFound)

Gets the long mapped from the specified key, or the specified value if no such 
mapping has been made. 



*android.util.SparseLongArray.indexOfKey(int)*

public int indexOfKey(int key)

Returns the index for which (|android.util.SparseLongArray|) would return the 
specified key, or a negative number if the specified key is not mapped. 



*android.util.SparseLongArray.indexOfValue(long)*

public int indexOfValue(long value)

Returns an index for which (|android.util.SparseLongArray|) would return the 
specified key, or a negative number if no keys map to the specified value. 
Beware that this is a linear search, unlike lookups by key, and that multiple 
keys can map to the same value and this will find only one of them. 



*android.util.SparseLongArray.keyAt(int)*

public int keyAt(int index)

Given an index in the range 0...size()-1, returns the key from the indexth 
key-value mapping that this SparseLongArray stores. 

The keys corresponding to indices in ascending order are guaranteed to be in 
ascending order, e.g., keyAt(0) will return the smallest key and 
keyAt(size()-1) will return the largest key. 



*android.util.SparseLongArray.put(int,long)*

public void put(
  int key,
  long value)

Adds a mapping from the specified key to the specified value, replacing the 
previous mapping from the specified key if there was one. 



*android.util.SparseLongArray.removeAt(int)*

public void removeAt(int index)

Removes the mapping at the given index. 



*android.util.SparseLongArray.size()*

public int size()

Returns the number of key-value mappings that this SparseIntArray currently 
stores. 



*android.util.SparseLongArray.toString()*

public |java.lang.String| toString()

This implementation composes a string by iterating over its mappings. 



*android.util.SparseLongArray.valueAt(int)*

public long valueAt(int index)

Given an index in the range 0...size()-1, returns the value from the indexth 
key-value mapping that this SparseLongArray stores. 

The values corresponding to indices in ascending order are guaranteed to be 
associated with keys in ascending order, e.g., valueAt(0) will return the value 
associated with the smallest key and valueAt(size()-1) will return the value 
associated with the largest key. 




