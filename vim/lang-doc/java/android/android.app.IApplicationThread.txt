*android.app.IApplicationThread* *IApplicationThread* System private API for com

public interface interface IApplicationThread

  implements |android.os.IInterface|

|android.app.IApplicationThread_Description|
|android.app.IApplicationThread_Fields|
|android.app.IApplicationThread_Constructors|
|android.app.IApplicationThread_Methods|

================================================================================

*android.app.IApplicationThread_Fields*
|int_android.app.IApplicationThread.BACKUP_MODE_FULL|
|int_android.app.IApplicationThread.BACKUP_MODE_INCREMENTAL|
|int_android.app.IApplicationThread.BACKUP_MODE_RESTORE|
|int_android.app.IApplicationThread.BACKUP_MODE_RESTORE_FULL|
|int_android.app.IApplicationThread.BIND_APPLICATION_TRANSACTION|
|int_android.app.IApplicationThread.CLEAR_DNS_CACHE_TRANSACTION|
|int_android.app.IApplicationThread.DEBUG_OFF|
|int_android.app.IApplicationThread.DEBUG_ON|
|int_android.app.IApplicationThread.DEBUG_WAIT|
|java.lang.String_android.app.IApplicationThread.descriptor|
|int_android.app.IApplicationThread.DISPATCH_PACKAGE_BROADCAST_TRANSACTION|
|int_android.app.IApplicationThread.DUMP_ACTIVITY_TRANSACTION|
|int_android.app.IApplicationThread.DUMP_DB_INFO_TRANSACTION|
|int_android.app.IApplicationThread.DUMP_GFX_INFO_TRANSACTION|
|int_android.app.IApplicationThread.DUMP_HEAP_TRANSACTION|
|int_android.app.IApplicationThread.DUMP_MEM_INFO_TRANSACTION|
|int_android.app.IApplicationThread.DUMP_PROVIDER_TRANSACTION|
|int_android.app.IApplicationThread.DUMP_SERVICE_TRANSACTION|
|int_android.app.IApplicationThread.EXTERNAL_STORAGE_UNAVAILABLE|
|int_android.app.IApplicationThread.PACKAGE_REMOVED|
|int_android.app.IApplicationThread.PROCESS_IN_BACKGROUND_TRANSACTION|
|int_android.app.IApplicationThread.PROFILER_CONTROL_TRANSACTION|
|int_android.app.IApplicationThread.REQUEST_ASSIST_CONTEXT_EXTRAS_TRANSACTION|
|int_android.app.IApplicationThread.REQUEST_THUMBNAIL_TRANSACTION|
|int_android.app.IApplicationThread.SCHEDULE_ACTIVITY_CONFIGURATION_CHANGED_TRANSACTION|
|int_android.app.IApplicationThread.SCHEDULE_BIND_SERVICE_TRANSACTION|
|int_android.app.IApplicationThread.SCHEDULE_CONFIGURATION_CHANGED_TRANSACTION|
|int_android.app.IApplicationThread.SCHEDULE_CRASH_TRANSACTION|
|int_android.app.IApplicationThread.SCHEDULE_CREATE_BACKUP_AGENT_TRANSACTION|
|int_android.app.IApplicationThread.SCHEDULE_CREATE_SERVICE_TRANSACTION|
|int_android.app.IApplicationThread.SCHEDULE_DESTROY_BACKUP_AGENT_TRANSACTION|
|int_android.app.IApplicationThread.SCHEDULE_EXIT_TRANSACTION|
|int_android.app.IApplicationThread.SCHEDULE_FINISH_ACTIVITY_TRANSACTION|
|int_android.app.IApplicationThread.SCHEDULE_INSTALL_PROVIDER_TRANSACTION|
|int_android.app.IApplicationThread.SCHEDULE_LAUNCH_ACTIVITY_TRANSACTION|
|int_android.app.IApplicationThread.SCHEDULE_LOW_MEMORY_TRANSACTION|
|int_android.app.IApplicationThread.SCHEDULE_NEW_INTENT_TRANSACTION|
|int_android.app.IApplicationThread.SCHEDULE_PAUSE_ACTIVITY_TRANSACTION|
|int_android.app.IApplicationThread.SCHEDULE_RECEIVER_TRANSACTION|
|int_android.app.IApplicationThread.SCHEDULE_REGISTERED_RECEIVER_TRANSACTION|
|int_android.app.IApplicationThread.SCHEDULE_RELAUNCH_ACTIVITY_TRANSACTION|
|int_android.app.IApplicationThread.SCHEDULE_RESUME_ACTIVITY_TRANSACTION|
|int_android.app.IApplicationThread.SCHEDULE_SEND_RESULT_TRANSACTION|
|int_android.app.IApplicationThread.SCHEDULE_SERVICE_ARGS_TRANSACTION|
|int_android.app.IApplicationThread.SCHEDULE_SLEEPING_TRANSACTION|
|int_android.app.IApplicationThread.SCHEDULE_STOP_ACTIVITY_TRANSACTION|
|int_android.app.IApplicationThread.SCHEDULE_STOP_SERVICE_TRANSACTION|
|int_android.app.IApplicationThread.SCHEDULE_SUICIDE_TRANSACTION|
|int_android.app.IApplicationThread.SCHEDULE_TRANSLUCENT_CONVERSION_COMPLETE_TRANSACTION|
|int_android.app.IApplicationThread.SCHEDULE_TRIM_MEMORY_TRANSACTION|
|int_android.app.IApplicationThread.SCHEDULE_UNBIND_SERVICE_TRANSACTION|
|int_android.app.IApplicationThread.SCHEDULE_WINDOW_VISIBILITY_TRANSACTION|
|int_android.app.IApplicationThread.SET_CORE_SETTINGS_TRANSACTION|
|int_android.app.IApplicationThread.SET_HTTP_PROXY_TRANSACTION|
|int_android.app.IApplicationThread.SET_PROCESS_STATE_TRANSACTION|
|int_android.app.IApplicationThread.SET_SCHEDULING_GROUP_TRANSACTION|
|int_android.app.IApplicationThread.UNSTABLE_PROVIDER_DIED_TRANSACTION|
|int_android.app.IApplicationThread.UPDATE_PACKAGE_COMPATIBILITY_INFO_TRANSACTION|
|int_android.app.IApplicationThread.UPDATE_TIME_ZONE_TRANSACTION|

*android.app.IApplicationThread_Methods*
|android.app.IApplicationThread.bindApplication(String,ApplicationInfo,List<ProviderInfo>,ComponentName,String,ParcelFileDescriptor,boolean,Bundle,IInstrumentationWatcher,IUiAutomationConnection,int,boolean,boolean,boolean,Configuration,CompatibilityInfo,Map<String,IBinder>,Bundle)|
|android.app.IApplicationThread.clearDnsCache()|
|android.app.IApplicationThread.dispatchPackageBroadcast(int,String[])|
|android.app.IApplicationThread.dumpActivity(FileDescriptor,IBinder,String,String[])|
|android.app.IApplicationThread.dumpDbInfo(FileDescriptor,String[])|
|android.app.IApplicationThread.dumpGfxInfo(FileDescriptor,String[])|
|android.app.IApplicationThread.dumpHeap(boolean,String,ParcelFileDescriptor)|
|android.app.IApplicationThread.dumpMemInfo(FileDescriptor,Debug.MemoryInfo,boolean,boolean,boolean,String[])|
|android.app.IApplicationThread.dumpProvider(FileDescriptor,IBinder,String[])|
|android.app.IApplicationThread.dumpService(FileDescriptor,IBinder,String[])|
|android.app.IApplicationThread.processInBackground()|
|android.app.IApplicationThread.profilerControl(boolean,String,ParcelFileDescriptor,int)|
|android.app.IApplicationThread.requestAssistContextExtras(IBinder,IBinder,int)|
|android.app.IApplicationThread.requestThumbnail(IBinder)|
|android.app.IApplicationThread.scheduleActivityConfigurationChanged(IBinder)|
|android.app.IApplicationThread.scheduleBindService(IBinder,Intent,boolean,int)|
|android.app.IApplicationThread.scheduleConfigurationChanged(Configuration)|
|android.app.IApplicationThread.scheduleCrash(String)|
|android.app.IApplicationThread.scheduleCreateBackupAgent(ApplicationInfo,CompatibilityInfo,int)|
|android.app.IApplicationThread.scheduleCreateService(IBinder,ServiceInfo,CompatibilityInfo,int)|
|android.app.IApplicationThread.scheduleDestroyActivity(IBinder,boolean,int)|
|android.app.IApplicationThread.scheduleDestroyBackupAgent(ApplicationInfo,CompatibilityInfo)|
|android.app.IApplicationThread.scheduleExit()|
|android.app.IApplicationThread.scheduleInstallProvider(ProviderInfo)|
|android.app.IApplicationThread.scheduleLaunchActivity(Intent,IBinder,int,ActivityInfo,Configuration,CompatibilityInfo,int,Bundle,List<ResultInfo>,List<Intent>,boolean,boolean,String,ParcelFileDescriptor,boolean)|
|android.app.IApplicationThread.scheduleLowMemory()|
|android.app.IApplicationThread.scheduleNewIntent(List<Intent>,IBinder)|
|android.app.IApplicationThread.schedulePauseActivity(IBinder,boolean,boolean,int)|
|android.app.IApplicationThread.scheduleReceiver(Intent,ActivityInfo,CompatibilityInfo,int,String,Bundle,boolean,int,int)|
|android.app.IApplicationThread.scheduleRegisteredReceiver(IIntentReceiver,Intent,int,String,Bundle,boolean,boolean,int,int)|
|android.app.IApplicationThread.scheduleRelaunchActivity(IBinder,List<ResultInfo>,List<Intent>,int,boolean,Configuration)|
|android.app.IApplicationThread.scheduleResumeActivity(IBinder,int,boolean)|
|android.app.IApplicationThread.scheduleSendResult(IBinder,List<ResultInfo>)|
|android.app.IApplicationThread.scheduleServiceArgs(IBinder,boolean,int,int,Intent)|
|android.app.IApplicationThread.scheduleSleeping(IBinder,boolean)|
|android.app.IApplicationThread.scheduleStopActivity(IBinder,boolean,int)|
|android.app.IApplicationThread.scheduleStopService(IBinder)|
|android.app.IApplicationThread.scheduleSuicide()|
|android.app.IApplicationThread.scheduleTranslucentConversionComplete(IBinder,boolean)|
|android.app.IApplicationThread.scheduleTrimMemory(int)|
|android.app.IApplicationThread.scheduleUnbindService(IBinder,Intent)|
|android.app.IApplicationThread.scheduleWindowVisibility(IBinder,boolean)|
|android.app.IApplicationThread.setCoreSettings(Bundle)|
|android.app.IApplicationThread.setHttpProxy(String,String,String,String)|
|android.app.IApplicationThread.setProcessState(int)|
|android.app.IApplicationThread.setSchedulingGroup(int)|
|android.app.IApplicationThread.unstableProviderDied(IBinder)|
|android.app.IApplicationThread.updatePackageCompatibilityInfo(String,CompatibilityInfo)|
|android.app.IApplicationThread.updateTimeZone()|

*android.app.IApplicationThread_Description*

System private API for communicating with the application. This is given to the 
activity manager by an application when it starts up, for the activity manager 
to tell the application about things it needs to do. 



*int_android.app.IApplicationThread.BACKUP_MODE_FULL*




*int_android.app.IApplicationThread.BACKUP_MODE_INCREMENTAL*




*int_android.app.IApplicationThread.BACKUP_MODE_RESTORE*




*int_android.app.IApplicationThread.BACKUP_MODE_RESTORE_FULL*




*int_android.app.IApplicationThread.BIND_APPLICATION_TRANSACTION*




*int_android.app.IApplicationThread.CLEAR_DNS_CACHE_TRANSACTION*




*int_android.app.IApplicationThread.DEBUG_OFF*




*int_android.app.IApplicationThread.DEBUG_ON*




*int_android.app.IApplicationThread.DEBUG_WAIT*




*java.lang.String_android.app.IApplicationThread.descriptor*




*int_android.app.IApplicationThread.DISPATCH_PACKAGE_BROADCAST_TRANSACTION*




*int_android.app.IApplicationThread.DUMP_ACTIVITY_TRANSACTION*




*int_android.app.IApplicationThread.DUMP_DB_INFO_TRANSACTION*




*int_android.app.IApplicationThread.DUMP_GFX_INFO_TRANSACTION*




*int_android.app.IApplicationThread.DUMP_HEAP_TRANSACTION*




*int_android.app.IApplicationThread.DUMP_MEM_INFO_TRANSACTION*




*int_android.app.IApplicationThread.DUMP_PROVIDER_TRANSACTION*




*int_android.app.IApplicationThread.DUMP_SERVICE_TRANSACTION*




*int_android.app.IApplicationThread.EXTERNAL_STORAGE_UNAVAILABLE*




*int_android.app.IApplicationThread.PACKAGE_REMOVED*




*int_android.app.IApplicationThread.PROCESS_IN_BACKGROUND_TRANSACTION*




*int_android.app.IApplicationThread.PROFILER_CONTROL_TRANSACTION*




*int_android.app.IApplicationThread.REQUEST_ASSIST_CONTEXT_EXTRAS_TRANSACTION*




*int_android.app.IApplicationThread.REQUEST_THUMBNAIL_TRANSACTION*




*int_android.app.IApplicationThread.SCHEDULE_ACTIVITY_CONFIGURATION_CHANGED_TRANSACTION*




*int_android.app.IApplicationThread.SCHEDULE_BIND_SERVICE_TRANSACTION*




*int_android.app.IApplicationThread.SCHEDULE_CONFIGURATION_CHANGED_TRANSACTION*




*int_android.app.IApplicationThread.SCHEDULE_CRASH_TRANSACTION*




*int_android.app.IApplicationThread.SCHEDULE_CREATE_BACKUP_AGENT_TRANSACTION*




*int_android.app.IApplicationThread.SCHEDULE_CREATE_SERVICE_TRANSACTION*




*int_android.app.IApplicationThread.SCHEDULE_DESTROY_BACKUP_AGENT_TRANSACTION*




*int_android.app.IApplicationThread.SCHEDULE_EXIT_TRANSACTION*




*int_android.app.IApplicationThread.SCHEDULE_FINISH_ACTIVITY_TRANSACTION*




*int_android.app.IApplicationThread.SCHEDULE_INSTALL_PROVIDER_TRANSACTION*




*int_android.app.IApplicationThread.SCHEDULE_LAUNCH_ACTIVITY_TRANSACTION*




*int_android.app.IApplicationThread.SCHEDULE_LOW_MEMORY_TRANSACTION*




*int_android.app.IApplicationThread.SCHEDULE_NEW_INTENT_TRANSACTION*




*int_android.app.IApplicationThread.SCHEDULE_PAUSE_ACTIVITY_TRANSACTION*




*int_android.app.IApplicationThread.SCHEDULE_RECEIVER_TRANSACTION*




*int_android.app.IApplicationThread.SCHEDULE_REGISTERED_RECEIVER_TRANSACTION*




*int_android.app.IApplicationThread.SCHEDULE_RELAUNCH_ACTIVITY_TRANSACTION*




*int_android.app.IApplicationThread.SCHEDULE_RESUME_ACTIVITY_TRANSACTION*




*int_android.app.IApplicationThread.SCHEDULE_SEND_RESULT_TRANSACTION*




*int_android.app.IApplicationThread.SCHEDULE_SERVICE_ARGS_TRANSACTION*




*int_android.app.IApplicationThread.SCHEDULE_SLEEPING_TRANSACTION*




*int_android.app.IApplicationThread.SCHEDULE_STOP_ACTIVITY_TRANSACTION*




*int_android.app.IApplicationThread.SCHEDULE_STOP_SERVICE_TRANSACTION*




*int_android.app.IApplicationThread.SCHEDULE_SUICIDE_TRANSACTION*




*int_android.app.IApplicationThread.SCHEDULE_TRANSLUCENT_CONVERSION_COMPLETE_TRANSACTION*




*int_android.app.IApplicationThread.SCHEDULE_TRIM_MEMORY_TRANSACTION*




*int_android.app.IApplicationThread.SCHEDULE_UNBIND_SERVICE_TRANSACTION*




*int_android.app.IApplicationThread.SCHEDULE_WINDOW_VISIBILITY_TRANSACTION*




*int_android.app.IApplicationThread.SET_CORE_SETTINGS_TRANSACTION*




*int_android.app.IApplicationThread.SET_HTTP_PROXY_TRANSACTION*




*int_android.app.IApplicationThread.SET_PROCESS_STATE_TRANSACTION*




*int_android.app.IApplicationThread.SET_SCHEDULING_GROUP_TRANSACTION*




*int_android.app.IApplicationThread.UNSTABLE_PROVIDER_DIED_TRANSACTION*




*int_android.app.IApplicationThread.UPDATE_PACKAGE_COMPATIBILITY_INFO_TRANSACTION*




*int_android.app.IApplicationThread.UPDATE_TIME_ZONE_TRANSACTION*





*android.app.IApplicationThread.bindApplication(String,ApplicationInfo,List<ProviderInfo>,ComponentName,String,ParcelFileDescriptor,boolean,Bundle,IInstrumentationWatcher,IUiAutomationConnection,int,boolean,boolean,boolean,Configuration,CompatibilityInfo,Map<String,IBinder>,Bundle)*

public void bindApplication(
  java.lang.String packageName,
  android.content.pm.ApplicationInfo info,
  java.util.List<android.content.pm.ProviderInfo> providers,
  android.content.ComponentName testName,
  java.lang.String profileName,
  android.os.ParcelFileDescriptor profileFd,
  boolean autoStopProfiler,
  android.os.Bundle testArguments,
  IInstrumentationWatcher testWatcher,
  IUiAutomationConnection uiAutomationConnection,
  int debugMode,
  boolean openGlTrace,
  boolean restrictedBackupMode,
  boolean persistent,
  android.content.res.Configuration config,
  android.content.res.CompatibilityInfo compatInfo,
  java.util.Map<java.lang.String, android.os.IBinder> services,
  android.os.Bundle coreSettings)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.clearDnsCache()*

public void clearDnsCache()
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.dispatchPackageBroadcast(int,String[])*

public void dispatchPackageBroadcast(
  int cmd,
  java.lang.String[] packages)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.dumpActivity(FileDescriptor,IBinder,String,String[])*

public void dumpActivity(
  java.io.FileDescriptor fd,
  android.os.IBinder servicetoken,
  java.lang.String prefix,
  java.lang.String[] args)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.dumpDbInfo(FileDescriptor,String[])*

public void dumpDbInfo(
  java.io.FileDescriptor fd,
  java.lang.String[] args)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.dumpGfxInfo(FileDescriptor,String[])*

public void dumpGfxInfo(
  java.io.FileDescriptor fd,
  java.lang.String[] args)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.dumpHeap(boolean,String,ParcelFileDescriptor)*

public void dumpHeap(
  boolean managed,
  java.lang.String path,
  android.os.ParcelFileDescriptor fd)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.dumpMemInfo(FileDescriptor,Debug.MemoryInfo,boolean,boolean,boolean,String[])*

public void dumpMemInfo(
  java.io.FileDescriptor fd,
  android.os.Debug.MemoryInfo mem,
  boolean checkin,
  boolean dumpInfo,
  boolean dumpDalvik,
  java.lang.String[] args)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.dumpProvider(FileDescriptor,IBinder,String[])*

public void dumpProvider(
  java.io.FileDescriptor fd,
  android.os.IBinder servicetoken,
  java.lang.String[] args)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.dumpService(FileDescriptor,IBinder,String[])*

public void dumpService(
  java.io.FileDescriptor fd,
  android.os.IBinder servicetoken,
  java.lang.String[] args)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.processInBackground()*

public void processInBackground()
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.profilerControl(boolean,String,ParcelFileDescriptor,int)*

public void profilerControl(
  boolean start,
  java.lang.String path,
  android.os.ParcelFileDescriptor fd,
  int profileType)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.requestAssistContextExtras(IBinder,IBinder,int)*

public void requestAssistContextExtras(
  android.os.IBinder activityToken,
  android.os.IBinder requestToken,
  int requestType)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.requestThumbnail(IBinder)*

public void requestThumbnail(android.os.IBinder token)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.scheduleActivityConfigurationChanged(IBinder)*

public void scheduleActivityConfigurationChanged(android.os.IBinder token)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.scheduleBindService(IBinder,Intent,boolean,int)*

public void scheduleBindService(
  android.os.IBinder token,
  android.content.Intent intent,
  boolean rebind,
  int processState)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.scheduleConfigurationChanged(Configuration)*

public void scheduleConfigurationChanged(android.content.res.Configuration config)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.scheduleCrash(String)*

public void scheduleCrash(java.lang.String msg)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.scheduleCreateBackupAgent(ApplicationInfo,CompatibilityInfo,int)*

public void scheduleCreateBackupAgent(
  android.content.pm.ApplicationInfo app,
  android.content.res.CompatibilityInfo compatInfo,
  int backupMode)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.scheduleCreateService(IBinder,ServiceInfo,CompatibilityInfo,int)*

public void scheduleCreateService(
  android.os.IBinder token,
  android.content.pm.ServiceInfo info,
  android.content.res.CompatibilityInfo compatInfo,
  int processState)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.scheduleDestroyActivity(IBinder,boolean,int)*

public void scheduleDestroyActivity(
  android.os.IBinder token,
  boolean finished,
  int configChanges)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.scheduleDestroyBackupAgent(ApplicationInfo,CompatibilityInfo)*

public void scheduleDestroyBackupAgent(
  android.content.pm.ApplicationInfo app,
  android.content.res.CompatibilityInfo compatInfo)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.scheduleExit()*

public void scheduleExit()
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.scheduleInstallProvider(ProviderInfo)*

public void scheduleInstallProvider(android.content.pm.ProviderInfo provider)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.scheduleLaunchActivity(Intent,IBinder,int,ActivityInfo,Configuration,CompatibilityInfo,int,Bundle,List<ResultInfo>,List<Intent>,boolean,boolean,String,ParcelFileDescriptor,boolean)*

public void scheduleLaunchActivity(
  android.content.Intent intent,
  android.os.IBinder token,
  int ident,
  android.content.pm.ActivityInfo info,
  android.content.res.Configuration curConfig,
  android.content.res.CompatibilityInfo compatInfo,
  int procState,
  android.os.Bundle state,
  java.util.List<android.app.ResultInfo> pendingResults,
  java.util.List<android.content.Intent> pendingNewIntents,
  boolean notResumed,
  boolean isForward,
  java.lang.String profileName,
  android.os.ParcelFileDescriptor profileFd,
  boolean autoStopProfiler)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.scheduleLowMemory()*

public void scheduleLowMemory()
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.scheduleNewIntent(List<Intent>,IBinder)*

public void scheduleNewIntent(
  java.util.List<android.content.Intent> intent,
  android.os.IBinder token)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.schedulePauseActivity(IBinder,boolean,boolean,int)*

public void schedulePauseActivity(
  android.os.IBinder token,
  boolean finished,
  boolean userLeaving,
  int configChanges)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.scheduleReceiver(Intent,ActivityInfo,CompatibilityInfo,int,String,Bundle,boolean,int,int)*

public void scheduleReceiver(
  android.content.Intent intent,
  android.content.pm.ActivityInfo info,
  android.content.res.CompatibilityInfo compatInfo,
  int resultCode,
  java.lang.String data,
  android.os.Bundle extras,
  boolean sync,
  int sendingUser,
  int processState)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.scheduleRegisteredReceiver(IIntentReceiver,Intent,int,String,Bundle,boolean,boolean,int,int)*

public void scheduleRegisteredReceiver(
  IIntentReceiver receiver,
  android.content.Intent intent,
  int resultCode,
  java.lang.String data,
  android.os.Bundle extras,
  boolean ordered,
  boolean sticky,
  int sendingUser,
  int processState)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.scheduleRelaunchActivity(IBinder,List<ResultInfo>,List<Intent>,int,boolean,Configuration)*

public void scheduleRelaunchActivity(
  android.os.IBinder token,
  java.util.List<android.app.ResultInfo> pendingResults,
  java.util.List<android.content.Intent> pendingNewIntents,
  int configChanges,
  boolean notResumed,
  android.content.res.Configuration config)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.scheduleResumeActivity(IBinder,int,boolean)*

public void scheduleResumeActivity(
  android.os.IBinder token,
  int procState,
  boolean isForward)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.scheduleSendResult(IBinder,List<ResultInfo>)*

public void scheduleSendResult(
  android.os.IBinder token,
  java.util.List<android.app.ResultInfo> results)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.scheduleServiceArgs(IBinder,boolean,int,int,Intent)*

public void scheduleServiceArgs(
  android.os.IBinder token,
  boolean taskRemoved,
  int startId,
  int flags,
  android.content.Intent args)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.scheduleSleeping(IBinder,boolean)*

public void scheduleSleeping(
  android.os.IBinder token,
  boolean sleeping)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.scheduleStopActivity(IBinder,boolean,int)*

public void scheduleStopActivity(
  android.os.IBinder token,
  boolean showWindow,
  int configChanges)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.scheduleStopService(IBinder)*

public void scheduleStopService(android.os.IBinder token)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.scheduleSuicide()*

public void scheduleSuicide()
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.scheduleTranslucentConversionComplete(IBinder,boolean)*

public void scheduleTranslucentConversionComplete(
  android.os.IBinder token,
  boolean timeout)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.scheduleTrimMemory(int)*

public void scheduleTrimMemory(int level)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.scheduleUnbindService(IBinder,Intent)*

public void scheduleUnbindService(
  android.os.IBinder token,
  android.content.Intent intent)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.scheduleWindowVisibility(IBinder,boolean)*

public void scheduleWindowVisibility(
  android.os.IBinder token,
  boolean showWindow)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.setCoreSettings(Bundle)*

public void setCoreSettings(android.os.Bundle coreSettings)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.setHttpProxy(String,String,String,String)*

public void setHttpProxy(
  java.lang.String proxy,
  java.lang.String port,
  java.lang.String exclList,
  java.lang.String pacFileUrl)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.setProcessState(int)*

public void setProcessState(int state)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.setSchedulingGroup(int)*

public void setSchedulingGroup(int group)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.unstableProviderDied(IBinder)*

public void unstableProviderDied(android.os.IBinder provider)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.updatePackageCompatibilityInfo(String,CompatibilityInfo)*

public void updatePackageCompatibilityInfo(
  java.lang.String pkg,
  android.content.res.CompatibilityInfo info)
  throws |android.os.RemoteException|
         




*android.app.IApplicationThread.updateTimeZone()*

public void updateTimeZone()
  throws |android.os.RemoteException|
         





