*android.widget.LinearLayout* *LinearLayout* A Layout that arranges its children

public class LinearLayout
  extends    |android.view.ViewGroup|

|android.widget.LinearLayout_Description|
|android.widget.LinearLayout_Fields|
|android.widget.LinearLayout_Constructors|
|android.widget.LinearLayout_Methods|

================================================================================

*android.widget.LinearLayout_Fields*
|int_android.widget.LinearLayout.HORIZONTAL|
|int_android.widget.LinearLayout.SHOW_DIVIDER_BEGINNING|
|int_android.widget.LinearLayout.SHOW_DIVIDER_END|
|int_android.widget.LinearLayout.SHOW_DIVIDER_MIDDLE|
|int_android.widget.LinearLayout.SHOW_DIVIDER_NONE|
|int_android.widget.LinearLayout.VERTICAL|

*android.widget.LinearLayout_Constructors*
|android.widget.LinearLayout(Context)|
|android.widget.LinearLayout(Context,AttributeSet)|
|android.widget.LinearLayout(Context,AttributeSet,int)|

*android.widget.LinearLayout_Methods*
|android.widget.LinearLayout.checkLayoutParams(ViewGroup.LayoutParams)|
|android.widget.LinearLayout.generateDefaultLayoutParams()|Returns a set of lay
|android.widget.LinearLayout.generateLayoutParams(AttributeSet)|
|android.widget.LinearLayout.generateLayoutParams(ViewGroup.LayoutParams)|
|android.widget.LinearLayout.getBaseline()|
|android.widget.LinearLayout.getBaselineAlignedChildIndex()|
|android.widget.LinearLayout.getDividerDrawable()|
|android.widget.LinearLayout.getDividerPadding()|Get the padding size used to i
|android.widget.LinearLayout.getDividerWidth()|Get the width of the current div
|android.widget.LinearLayout.getOrientation()|Returns the current orientation.
|android.widget.LinearLayout.getShowDividers()|
|android.widget.LinearLayout.getWeightSum()|Returns the desired weights sum.
|android.widget.LinearLayout.hasDividerBeforeChildAt(int)|Determines where to p
|android.widget.LinearLayout.isBaselineAligned()|Indicates whether widgets cont
|android.widget.LinearLayout.isMeasureWithLargestChildEnabled()|When true, all 
|android.widget.LinearLayout.onDraw(Canvas)|
|android.widget.LinearLayout.onInitializeAccessibilityEvent(AccessibilityEvent)|
|android.widget.LinearLayout.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)|
|android.widget.LinearLayout.onLayout(boolean,int,int,int,int)|
|android.widget.LinearLayout.onMeasure(int,int)|
|android.widget.LinearLayout.setBaselineAligned(boolean)|Defines whether widget
|android.widget.LinearLayout.setBaselineAlignedChildIndex(int)|
|android.widget.LinearLayout.setDividerDrawable(Drawable)|Set a drawable to be 
|android.widget.LinearLayout.setDividerPadding(int)|Set padding displayed on bo
|android.widget.LinearLayout.setGravity(int)|Describes how the child views are 
|android.widget.LinearLayout.setHorizontalGravity(int)|
|android.widget.LinearLayout.setMeasureWithLargestChildEnabled(boolean)|When se
|android.widget.LinearLayout.setOrientation(int)|Should the layout be a column 
|android.widget.LinearLayout.setShowDividers(int)|Set how dividers should be sh
|android.widget.LinearLayout.setVerticalGravity(int)|
|android.widget.LinearLayout.setWeightSum(float)|Defines the desired weights su
|android.widget.LinearLayout.shouldDelayChildPressedState()|

*android.widget.LinearLayout_Description*

A Layout that arranges its children in a single column or a single row. The 
direction of the row can be set by calling 
setOrientation()(|android.widget.LinearLayout|) . You can also specify gravity, 
which specifies the alignment of all the child elements by calling 
setGravity()(|android.widget.LinearLayout|) or specify that specific children 
grow to fill up any remaining space in the layout by setting the weight member 
of LinearLayout.LayoutParams(|android.widget.LinearLayout.LayoutParams|) . The 
default orientation is horizontal. 

See the <a href="guide/topics/ui/layout/linear.html">Linear Layout guide. 

Also see 
android.widget.LinearLayout.LayoutParams(|android.widget.LinearLayout.LayoutParams|)
for layout attributes 



*int_android.widget.LinearLayout.HORIZONTAL*




*int_android.widget.LinearLayout.SHOW_DIVIDER_BEGINNING*

Show a divider at the beginning of the group. 


*int_android.widget.LinearLayout.SHOW_DIVIDER_END*

Show a divider at the end of the group. 


*int_android.widget.LinearLayout.SHOW_DIVIDER_MIDDLE*

Show dividers between each item in the group. 


*int_android.widget.LinearLayout.SHOW_DIVIDER_NONE*

Don't show any dividers. 


*int_android.widget.LinearLayout.VERTICAL*





*android.widget.LinearLayout(Context)*

public LinearLayout(android.content.Context context)




*android.widget.LinearLayout(Context,AttributeSet)*

public LinearLayout(
  android.content.Context context,
  android.util.AttributeSet attrs)




*android.widget.LinearLayout(Context,AttributeSet,int)*

public LinearLayout(
  android.content.Context context,
  android.util.AttributeSet attrs,
  int defStyle)




*android.widget.LinearLayout.checkLayoutParams(ViewGroup.LayoutParams)*

protected boolean checkLayoutParams(android.view.ViewGroup.LayoutParams p)





*android.widget.LinearLayout.generateDefaultLayoutParams()*

protected |android.widget.LinearLayout.LayoutParams| generateDefaultLayoutParams()

Returns a set of layout parameters with a width of 
(|android.view.ViewGroup.LayoutParams|) and a height of 
(|android.view.ViewGroup.LayoutParams|) when the layout's orientation is 
(|android.widget.LinearLayout|) . When the orientation is 
(|android.widget.LinearLayout|) , the width is set to 
(|android.widget.LinearLayout.LayoutParams|) and the height to 
(|android.widget.LinearLayout.LayoutParams|) . 



*android.widget.LinearLayout.generateLayoutParams(AttributeSet)*

public |android.widget.LinearLayout.LayoutParams| generateLayoutParams(android.util.AttributeSet attrs)





*android.widget.LinearLayout.generateLayoutParams(ViewGroup.LayoutParams)*

protected |android.widget.LinearLayout.LayoutParams| generateLayoutParams(android.view.ViewGroup.LayoutParams p)





*android.widget.LinearLayout.getBaseline()*

public int getBaseline()





*android.widget.LinearLayout.getBaselineAlignedChildIndex()*

public int getBaselineAlignedChildIndex()





    Returns: The index of the child that will be used if this layout is part of a larger 
             layout that is baseline aligned, or -1 if none has been set. 

*android.widget.LinearLayout.getDividerDrawable()*

public Drawable getDividerDrawable()





    Returns: the divider Drawable that will divide each item. 

*android.widget.LinearLayout.getDividerPadding()*

public int getDividerPadding()

Get the padding size used to inset dividers in pixels 



*android.widget.LinearLayout.getDividerWidth()*

public int getDividerWidth()

Get the width of the current divider drawable. 



*android.widget.LinearLayout.getOrientation()*

public int getOrientation()

Returns the current orientation. 



    Returns: either {@link #HORIZONTAL} or {@link #VERTICAL} 

*android.widget.LinearLayout.getShowDividers()*

public int getShowDividers()





    Returns: A flag set indicating how dividers should be shown around items. 

*android.widget.LinearLayout.getWeightSum()*

public float getWeightSum()

Returns the desired weights sum. 



    Returns: A number greater than 0.0f if the weight sum is defined, or a number lower than 
             or equals to 0.0f if not weight sum is to be used. 

*android.widget.LinearLayout.hasDividerBeforeChildAt(int)*

protected boolean hasDividerBeforeChildAt(int childIndex)

Determines where to position dividers between children. 


    childIndex - Index of child to check for preceding divider 

    Returns: true if there should be a divider before the child at childIndex 

*android.widget.LinearLayout.isBaselineAligned()*

public boolean isBaselineAligned()

Indicates whether widgets contained within this layout are aligned on their 
baseline or not. 



    Returns: true when widgets are baseline-aligned, false otherwise 

*android.widget.LinearLayout.isMeasureWithLargestChildEnabled()*

public boolean isMeasureWithLargestChildEnabled()

When true, all children with a weight will be considered having the minimum 
size of the largest child. If false, all children are measured normally. 



    Returns: True to measure children with a weight using the minimum size of the largest 
             child, false otherwise. 

*android.widget.LinearLayout.onDraw(Canvas)*

protected void onDraw(Canvas canvas)





*android.widget.LinearLayout.onInitializeAccessibilityEvent(AccessibilityEvent)*

public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent event)





*android.widget.LinearLayout.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)*

public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo info)





*android.widget.LinearLayout.onLayout(boolean,int,int,int,int)*

protected void onLayout(
  boolean changed,
  int l,
  int t,
  int r,
  int b)





*android.widget.LinearLayout.onMeasure(int,int)*

protected void onMeasure(
  int widthMeasureSpec,
  int heightMeasureSpec)





*android.widget.LinearLayout.setBaselineAligned(boolean)*

public void setBaselineAligned(boolean baselineAligned)

Defines whether widgets contained in this layout are baseline-aligned or not. 


    baselineAligned - true to align widgets on their baseline, false otherwise 

*android.widget.LinearLayout.setBaselineAlignedChildIndex(int)*

public void setBaselineAlignedChildIndex(int i)




    i - The index of the child that will be used if this layout is part of a larger 
       layout that is baseline aligned. 

*android.widget.LinearLayout.setDividerDrawable(Drawable)*

public void setDividerDrawable(Drawable divider)

Set a drawable to be used as a divider between items. 


    divider - Drawable that will divide each item. 

*android.widget.LinearLayout.setDividerPadding(int)*

public void setDividerPadding(int padding)

Set padding displayed on both ends of dividers. 


    padding - Padding value in pixels that will be applied to each end 

*android.widget.LinearLayout.setGravity(int)*

public void setGravity(int gravity)

Describes how the child views are positioned. Defaults to GRAVITY_TOP. If this 
layout has a VERTICAL orientation, this controls where all the child views are 
placed if there is extra vertical space. If this layout has a HORIZONTAL 
orientation, this controls the alignment of the children. 


    gravity - See {@link android.view.Gravity} 

*android.widget.LinearLayout.setHorizontalGravity(int)*

public void setHorizontalGravity(int horizontalGravity)





*android.widget.LinearLayout.setMeasureWithLargestChildEnabled(boolean)*

public void setMeasureWithLargestChildEnabled(boolean enabled)

When set to true, all children with a weight will be considered having the 
minimum size of the largest child. If false, all children are measured 
normally. 

Disabled by default. 


    enabled - True to measure children with a weight using the minimum size of the largest 
       child, false otherwise. 

*android.widget.LinearLayout.setOrientation(int)*

public void setOrientation(int orientation)

Should the layout be a column or a row. 


    orientation - Pass HORIZONTAL or VERTICAL. Default value is HORIZONTAL. 

*android.widget.LinearLayout.setShowDividers(int)*

public void setShowDividers(int showDividers)

Set how dividers should be shown between items in this layout 


    showDividers - One or more of {@link #SHOW_DIVIDER_BEGINNING}, {@link #SHOW_DIVIDER_MIDDLE}, 
       or {@link #SHOW_DIVIDER_END}, or {@link #SHOW_DIVIDER_NONE} to show no 
       dividers. 

*android.widget.LinearLayout.setVerticalGravity(int)*

public void setVerticalGravity(int verticalGravity)





*android.widget.LinearLayout.setWeightSum(float)*

public void setWeightSum(float weightSum)

Defines the desired weights sum. If unspecified the weights sum is computed at 
layout time by adding the layout_weight of each child. 

This can be used for instance to give a single child 50% of the total available 
space by giving it a layout_weight of 0.5 and setting the weightSum to 1.0. 


    weightSum - a number greater than 0.0f, or a number lower than or equals to 0.0f if the 
       weight sum should be computed from the children's layout_weight 

*android.widget.LinearLayout.shouldDelayChildPressedState()*

public boolean shouldDelayChildPressedState()






