*android.database.sqlite.SQLiteDebug.PagerStats* *SQLiteDebug.PagerStats* Contai

public static class SQLiteDebug.PagerStats
  extends    |java.lang.Object|

|android.database.sqlite.SQLiteDebug.PagerStats_Description|
|android.database.sqlite.SQLiteDebug.PagerStats_Fields|
|android.database.sqlite.SQLiteDebug.PagerStats_Constructors|
|android.database.sqlite.SQLiteDebug.PagerStats_Methods|

================================================================================

*android.database.sqlite.SQLiteDebug.PagerStats_Fields*
|java.util.ArrayList<android.database.sqlite.SQLiteDebug.DbStats>_android.database.sqlite.SQLiteDebug.PagerStats.dbStats|
|int_android.database.sqlite.SQLiteDebug.PagerStats.largestMemAlloc|
|int_android.database.sqlite.SQLiteDebug.PagerStats.memoryUsed|
|int_android.database.sqlite.SQLiteDebug.PagerStats.pageCacheOverflow|

*android.database.sqlite.SQLiteDebug.PagerStats_Constructors*
|android.database.sqlite.SQLiteDebug.PagerStats()|

*android.database.sqlite.SQLiteDebug.PagerStats_Description*

Contains statistics about the active pagers in the current process. 



*java.util.ArrayList<android.database.sqlite.SQLiteDebug.DbStats>_android.database.sqlite.SQLiteDebug.PagerStats.dbStats*

a list of (|android.database.sqlite.SQLiteDebug.DbStats|) - one for each main 
database opened by the applications running on the android device 


*int_android.database.sqlite.SQLiteDebug.PagerStats.largestMemAlloc*

records the largest memory allocation request handed to sqlite3. documented at 
http://www.sqlite.org/c3ref/c_status_malloc_size.html 


*int_android.database.sqlite.SQLiteDebug.PagerStats.memoryUsed*

the current amount of memory checked out by sqlite using sqlite3_malloc(). 
documented at http://www.sqlite.org/c3ref/c_status_malloc_size.html 


*int_android.database.sqlite.SQLiteDebug.PagerStats.pageCacheOverflow*

the number of bytes of page cache allocation which could not be sattisfied by 
the SQLITE_CONFIG_PAGECACHE buffer and where forced to overflow to 
sqlite3_malloc(). The returned value includes allocations that overflowed 
because they where too large (they were larger than the "sz" parameter to 
SQLITE_CONFIG_PAGECACHE) and allocations that overflowed because no space was 
left in the page cache. documented at 
http://www.sqlite.org/c3ref/c_status_malloc_size.html 



*android.database.sqlite.SQLiteDebug.PagerStats()*

public SQLiteDebug.PagerStats()




