*android.app.Dialog* *Dialog* Base class for Dialogs.

public class Dialog
  extends    |java.lang.Object|
  implements |android.content.DialogInterface|
             |android.view.Window.Callback|
             |android.view.KeyEvent.Callback|
             |android.view.View.OnCreateContextMenuListener|

|android.app.Dialog_Description|
|android.app.Dialog_Fields|
|android.app.Dialog_Constructors|
|android.app.Dialog_Methods|

================================================================================

*android.app.Dialog_Fields*
|boolean_android.app.Dialog.mCancelable|

*android.app.Dialog_Constructors*
|android.app.Dialog(Context)|Create a Dialog window that uses the default dialo
|android.app.Dialog(Context,boolean,DialogInterface.OnCancelListener)|
|android.app.Dialog(Context,boolean,Message)|
|android.app.Dialog(Context,int)|Create a Dialog window that uses a custom dial

*android.app.Dialog_Methods*
|android.app.Dialog.addContentView(View,ViewGroup.LayoutParams)|Add an addition
|android.app.Dialog.cancel()|Cancel the dialog.
|android.app.Dialog.closeOptionsMenu()|
|android.app.Dialog.dismiss()|Dismiss this dialog, removing it from the screen.
|android.app.Dialog.dispatchGenericMotionEvent(MotionEvent)|Called to process g
|android.app.Dialog.dispatchKeyEvent(KeyEvent)|Called to process key events.
|android.app.Dialog.dispatchKeyShortcutEvent(KeyEvent)|Called to process a key 
|android.app.Dialog.dispatchPopulateAccessibilityEvent(AccessibilityEvent)|
|android.app.Dialog.dispatchTouchEvent(MotionEvent)|Called to process touch scr
|android.app.Dialog.dispatchTrackballEvent(MotionEvent)|Called to process track
|android.app.Dialog.findViewById(int)|Finds a view that was identified by the i
|android.app.Dialog.getActionBar()|Retrieve theActionBarattached to this dialog
|android.app.Dialog.getContext()|Retrieve the Context this Dialog is running in
|android.app.Dialog.getCurrentFocus()|Callandroid.view.Window#getCurrentFocuson
|android.app.Dialog.getLayoutInflater()|
|android.app.Dialog.getOwnerActivity()|Returns the Activity that owns this Dial
|android.app.Dialog.getVolumeControlStream()|
|android.app.Dialog.getWindow()|Retrieve the current Window for the activity.
|android.app.Dialog.hide()|Hide the dialog, but do not dismiss it.
|android.app.Dialog.invalidateOptionsMenu()|
|android.app.Dialog.isShowing()|
|android.app.Dialog.onActionModeFinished(ActionMode)|Note that if you override 
|android.app.Dialog.onActionModeStarted(ActionMode)|Note that if you override t
|android.app.Dialog.onAttachedToWindow()|
|android.app.Dialog.onBackPressed()|Called when the dialog has detected the use
|android.app.Dialog.onContentChanged()|
|android.app.Dialog.onContextItemSelected(MenuItem)|
|android.app.Dialog.onContextMenuClosed(Menu)|
|android.app.Dialog.onCreate(Bundle)|Similar toActivity#onCreate, you should in
|android.app.Dialog.onCreateContextMenu(ContextMenu,View,ContextMenu.ContextMenuInfo)|
|android.app.Dialog.onCreateOptionsMenu(Menu)|It is usually safe to proxy this 
|android.app.Dialog.onCreatePanelMenu(int,Menu)|
|android.app.Dialog.onCreatePanelView(int)|
|android.app.Dialog.onDetachedFromWindow()|
|android.app.Dialog.onGenericMotionEvent(MotionEvent)|Called when a generic mot
|android.app.Dialog.onKeyDown(int,KeyEvent)|A key was pressed down.
|android.app.Dialog.onKeyLongPress(int,KeyEvent)|Default implementation ofKeyEv
|android.app.Dialog.onKeyMultiple(int,int,KeyEvent)|Default implementation ofKe
|android.app.Dialog.onKeyShortcut(int,KeyEvent)|Called when a key shortcut even
|android.app.Dialog.onKeyUp(int,KeyEvent)|A key was released.
|android.app.Dialog.onMenuItemSelected(int,MenuItem)|
|android.app.Dialog.onMenuOpened(int,Menu)|
|android.app.Dialog.onOptionsItemSelected(MenuItem)|
|android.app.Dialog.onOptionsMenuClosed(Menu)|
|android.app.Dialog.onPanelClosed(int,Menu)|
|android.app.Dialog.onPrepareOptionsMenu(Menu)|It is usually safe to proxy this
|android.app.Dialog.onPreparePanel(int,View,Menu)|
|android.app.Dialog.onRestoreInstanceState(Bundle)|Restore the state of the dia
|android.app.Dialog.onSaveInstanceState()|Saves the state of the dialog into a 
|android.app.Dialog.onSearchRequested()|This hook is called when the user signa
|android.app.Dialog.onStart()|Called when the dialog is starting.
|android.app.Dialog.onStop()|Called to tell you that you're stopping.
|android.app.Dialog.onTouchEvent(MotionEvent)|Called when a touch screen event 
|android.app.Dialog.onTrackballEvent(MotionEvent)|Called when the trackball was
|android.app.Dialog.onWindowAttributesChanged(WindowManager.LayoutParams)|
|android.app.Dialog.onWindowFocusChanged(boolean)|
|android.app.Dialog.onWindowStartingActionMode(ActionMode.Callback)|
|android.app.Dialog.openContextMenu(View)|
|android.app.Dialog.openOptionsMenu()|
|android.app.Dialog.registerForContextMenu(View)|
|android.app.Dialog.requestWindowFeature(int)|Enable extended window features.
|android.app.Dialog.setCancelable(boolean)|Sets whether this dialog is cancelab
|android.app.Dialog.setCanceledOnTouchOutside(boolean)|Sets whether this dialog
|android.app.Dialog.setCancelMessage(Message)|Set a message to be sent when the
|android.app.Dialog.setContentView(int)|Set the screen content from a layout re
|android.app.Dialog.setContentView(View)|Set the screen content to an explicit 
|android.app.Dialog.setContentView(View,ViewGroup.LayoutParams)|Set the screen 
|android.app.Dialog.setDismissMessage(Message)|Set a message to be sent when th
|android.app.Dialog.setFeatureDrawable(int,Drawable)|Convenience for callingand
|android.app.Dialog.setFeatureDrawableAlpha(int,int)|Convenience for callingand
|android.app.Dialog.setFeatureDrawableResource(int,int)|Convenience for calling
|android.app.Dialog.setFeatureDrawableUri(int,Uri)|Convenience for callingandro
|android.app.Dialog.setOnCancelListener(DialogInterface.OnCancelListener)|Set a
|android.app.Dialog.setOnDismissListener(DialogInterface.OnDismissListener)|Set
|android.app.Dialog.setOnKeyListener(DialogInterface.OnKeyListener)|Sets the ca
|android.app.Dialog.setOnShowListener(DialogInterface.OnShowListener)|Sets a li
|android.app.Dialog.setOwnerActivity(Activity)|Sets the Activity that owns this
|android.app.Dialog.setTitle(CharSequence)|Set the title text for this dialog's
|android.app.Dialog.setTitle(int)|Set the title text for this dialog's window.
|android.app.Dialog.setVolumeControlStream(int)|By default, this will use the o
|android.app.Dialog.show()|Start the dialog and display it on screen.
|android.app.Dialog.takeCancelAndDismissListeners(String,DialogInterface.OnCancelListener,DialogInterface.OnDismissListener)|
|android.app.Dialog.takeKeyEvents(boolean)|Request that key events come to this
|android.app.Dialog.unregisterForContextMenu(View)|

*android.app.Dialog_Description*

Base class for Dialogs. 

Note: Activities provide a facility to manage the creation, saving and 
restoring of dialogs. See (|android.app.Activity|) , (|android.app.Activity|) , 
(|android.app.Activity|) , and (|android.app.Activity|) . If these methods are 
used, (|android.app.Dialog|) will return the Activity that managed this dialog. 

Often you will want to have a Dialog display on top of the current input 
method, because there is no reason for it to accept text. You can do this by 
setting the 
WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM(|WindowManager.LayoutParams|) 
window flag (assuming your Dialog takes input focus, as it the default) with 
the following code: 



getWindow().setFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM, 
WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM); 

Developer Guides For more information about creating dialogs, read the <a 
href="guide/topics/ui/dialogs.html">Dialogs developer guide. 



*boolean_android.app.Dialog.mCancelable*

This field should be made private, so it is hidden from the SDK. 



*android.app.Dialog(Context)*

public Dialog(android.content.Context context)

Create a Dialog window that uses the default dialog frame style. 

    context - The Context the Dialog is to run it. In particular, it uses the window manager 
       and theme in this context to present its UI. 

*android.app.Dialog(Context,boolean,DialogInterface.OnCancelListener)*

protected Dialog(
  android.content.Context context,
  boolean cancelable,
  android.content.DialogInterface.OnCancelListener cancelListener)




*android.app.Dialog(Context,boolean,Message)*

protected Dialog(
  android.content.Context context,
  boolean cancelable,
  android.os.Message cancelCallback)




*android.app.Dialog(Context,int)*

public Dialog(
  android.content.Context context,
  int theme)

Create a Dialog window that uses a custom dialog style. 

    context - The Context in which the Dialog should run. In particular, it uses the window 
       manager and theme from this context to present its UI. 
    theme - A style resource describing the theme to use for the window. See Style and 
       Theme Resources for more information about defining and using styles. 
       This theme is applied on top of the current theme in context. If 0, the 
       default dialog theme will be used. 

*android.app.Dialog.addContentView(View,ViewGroup.LayoutParams)*

public void addContentView(
  android.view.View view,
  android.view.ViewGroup.LayoutParams params)

Add an additional content view to the screen. Added after any existing ones in 
the screen -- existing views are NOT removed. 


    view - The desired content to display. 
    params - Layout parameters for the view. 

*android.app.Dialog.cancel()*

public void cancel()

Cancel the dialog. This is essentially the same as calling 
(|android.app.Dialog|) , but it will also call your 
(|DialogInterface.OnCancelListener|) (if registered). 



*android.app.Dialog.closeOptionsMenu()*

public void closeOptionsMenu()





*android.app.Dialog.dismiss()*

public void dismiss()

Dismiss this dialog, removing it from the screen. This method can be invoked 
safely from any thread. Note that you should not override this method to do 
cleanup when the dialog is dismissed, instead implement that in 
(|android.app.Dialog|) . 



*android.app.Dialog.dispatchGenericMotionEvent(MotionEvent)*

public boolean dispatchGenericMotionEvent(android.view.MotionEvent ev)

Called to process generic motion events. You can override this to intercept all 
generic motion events before they are dispatched to the window. Be sure to call 
this implementation for generic motion events that should be handled normally. 


    ev - The generic motion event. 

    Returns: boolean Return true if this event was consumed. 

*android.app.Dialog.dispatchKeyEvent(KeyEvent)*

public boolean dispatchKeyEvent(android.view.KeyEvent event)

Called to process key events. You can override this to intercept all key events 
before they are dispatched to the window. Be sure to call this implementation 
for key events that should be handled normally. 


    event - The key event. 

    Returns: boolean Return true if this event was consumed. 

*android.app.Dialog.dispatchKeyShortcutEvent(KeyEvent)*

public boolean dispatchKeyShortcutEvent(android.view.KeyEvent event)

Called to process a key shortcut event. You can override this to intercept all 
key shortcut events before they are dispatched to the window. Be sure to call 
this implementation for key shortcut events that should be handled normally. 


    event - The key shortcut event. 

    Returns: True if this event was consumed. 

*android.app.Dialog.dispatchPopulateAccessibilityEvent(AccessibilityEvent)*

public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent event)





*android.app.Dialog.dispatchTouchEvent(MotionEvent)*

public boolean dispatchTouchEvent(android.view.MotionEvent ev)

Called to process touch screen events. You can override this to intercept all 
touch screen events before they are dispatched to the window. Be sure to call 
this implementation for touch screen events that should be handled normally. 


    ev - The touch screen event. 

    Returns: boolean Return true if this event was consumed. 

*android.app.Dialog.dispatchTrackballEvent(MotionEvent)*

public boolean dispatchTrackballEvent(android.view.MotionEvent ev)

Called to process trackball events. You can override this to intercept all 
trackball events before they are dispatched to the window. Be sure to call this 
implementation for trackball events that should be handled normally. 


    ev - The trackball event. 

    Returns: boolean Return true if this event was consumed. 

*android.app.Dialog.findViewById(int)*

public |android.view.View| findViewById(int id)

Finds a view that was identified by the id attribute from the XML that was 
processed in (|android.app.Dialog|) . 


    id - the identifier of the view to find 

    Returns: The view if found or null otherwise. 

*android.app.Dialog.getActionBar()*

public |android.app.ActionBar| getActionBar()

Retrieve the (|android.app.ActionBar|) attached to this dialog, if present. 



    Returns: The ActionBar attached to the dialog or null if no ActionBar is present. 

*android.app.Dialog.getContext()*

public final |android.content.Context| getContext()

Retrieve the Context this Dialog is running in. 



    Returns: Context The Context used by the Dialog. 

*android.app.Dialog.getCurrentFocus()*

public |android.view.View| getCurrentFocus()

Call (|android.view.Window|) on the Window if this Activity to return the 
currently focused view. 



    Returns: View The current View with focus or null. 

*android.app.Dialog.getLayoutInflater()*

public |android.view.LayoutInflater| getLayoutInflater()





*android.app.Dialog.getOwnerActivity()*

public final |android.app.Activity| getOwnerActivity()

Returns the Activity that owns this Dialog. For example, if 
(|android.app.Activity|) is used to show this Dialog, that Activity will be the 
owner (by default). Depending on how this dialog was created, this may return 
null. 



    Returns: The Activity that owns this Dialog. 

*android.app.Dialog.getVolumeControlStream()*

public final int getVolumeControlStream()





*android.app.Dialog.getWindow()*

public |android.view.Window| getWindow()

Retrieve the current Window for the activity. This can be used to directly 
access parts of the Window API that are not available through Activity/Screen. 



    Returns: Window The current window, or null if the activity is not visual. 

*android.app.Dialog.hide()*

public void hide()

Hide the dialog, but do not dismiss it. 



*android.app.Dialog.invalidateOptionsMenu()*

public void invalidateOptionsMenu()





*android.app.Dialog.isShowing()*

public boolean isShowing()





    Returns: Whether the dialog is currently showing. 

*android.app.Dialog.onActionModeFinished(ActionMode)*

public void onActionModeFinished(android.view.ActionMode mode)

Note that if you override this method you should always call through to the 
superclass implementation by calling super.onActionModeFinished(mode). 



*android.app.Dialog.onActionModeStarted(ActionMode)*

public void onActionModeStarted(android.view.ActionMode mode)

Note that if you override this method you should always call through to the 
superclass implementation by calling super.onActionModeStarted(mode). 



*android.app.Dialog.onAttachedToWindow()*

public void onAttachedToWindow()





*android.app.Dialog.onBackPressed()*

public void onBackPressed()

Called when the dialog has detected the user's press of the back key. The 
default implementation simply cancels the dialog (only if it is cancelable), 
but you can override this to do whatever you want. 



*android.app.Dialog.onContentChanged()*

public void onContentChanged()





*android.app.Dialog.onContextItemSelected(MenuItem)*

public boolean onContextItemSelected(android.view.MenuItem item)





*android.app.Dialog.onContextMenuClosed(Menu)*

public void onContextMenuClosed(android.view.Menu menu)





*android.app.Dialog.onCreate(Bundle)*

protected void onCreate(android.os.Bundle savedInstanceState)

Similar to (|android.app.Activity|) , you should initialize your dialog in this 
method, including calling (|android.app.Dialog|) . 


    savedInstanceState - If this dialog is being reinitalized after a the hosting activity was 
       previously shut down, holds the result from the most recent call to 
       {@link #onSaveInstanceState}, or null if this is the first time. 

*android.app.Dialog.onCreateContextMenu(ContextMenu,View,ContextMenu.ContextMenuInfo)*

public void onCreateContextMenu(
  android.view.ContextMenu menu,
  android.view.View v,
  android.view.ContextMenu.ContextMenuInfo menuInfo)





*android.app.Dialog.onCreateOptionsMenu(Menu)*

public boolean onCreateOptionsMenu(android.view.Menu menu)

It is usually safe to proxy this call to the owner activity's 
(|android.app.Activity|) if the client desires the same menu for this Dialog. 



*android.app.Dialog.onCreatePanelMenu(int,Menu)*

public boolean onCreatePanelMenu(
  int featureId,
  android.view.Menu menu)





*android.app.Dialog.onCreatePanelView(int)*

public |android.view.View| onCreatePanelView(int featureId)





*android.app.Dialog.onDetachedFromWindow()*

public void onDetachedFromWindow()





*android.app.Dialog.onGenericMotionEvent(MotionEvent)*

public boolean onGenericMotionEvent(android.view.MotionEvent event)

Called when a generic motion event was not handled by any of the views inside 
of the dialog. 

Generic motion events describe joystick movements, mouse hovers, track pad 
touches, scroll wheel movements and other input events. The 
source(|android.view.MotionEvent|) of the motion event specifies the class of 
input that was received. Implementations of this method must examine the bits 
in the source before processing the event. The following code example shows how 
this is done. 

Generic motion events with source class (|android.view.InputDevice|) are 
delivered to the view under the pointer. All other generic motion events are 
delivered to the focused view. 

See (|android.view.View|) for an example of how to handle this event. 


    event - The generic motion event being processed. 

    Returns: Return true if you have consumed the event, false if you haven't. The default 
             implementation always returns false. 

*android.app.Dialog.onKeyDown(int,KeyEvent)*

public boolean onKeyDown(
  int keyCode,
  android.view.KeyEvent event)

A key was pressed down. 

If the focused view didn't want this event, this method is called. 

The default implementation consumed the KEYCODE_BACK to later handle it in 
(|android.app.Dialog|) . 



*android.app.Dialog.onKeyLongPress(int,KeyEvent)*

public boolean onKeyLongPress(
  int keyCode,
  android.view.KeyEvent event)

Default implementation of 
KeyEvent.Callback.onKeyLongPress()(|KeyEvent.Callback|) : always returns false 
(doesn't handle the event). 



*android.app.Dialog.onKeyMultiple(int,int,KeyEvent)*

public boolean onKeyMultiple(
  int keyCode,
  int repeatCount,
  android.view.KeyEvent event)

Default implementation of 
KeyEvent.Callback.onKeyMultiple()(|KeyEvent.Callback|) : always returns false 
(doesn't handle the event). 



*android.app.Dialog.onKeyShortcut(int,KeyEvent)*

public boolean onKeyShortcut(
  int keyCode,
  android.view.KeyEvent event)

Called when a key shortcut event is not handled by any of the views in the 
Dialog. Override this method to implement global key shortcuts for the Dialog. 
Key shortcuts can also be implemented by setting the 
shortcut(|android.view.MenuItem|) property of menu items. 


    keyCode - The value in event.getKeyCode(). 
    event - Description of the key event. 

    Returns: True if the key shortcut was handled. 

*android.app.Dialog.onKeyUp(int,KeyEvent)*

public boolean onKeyUp(
  int keyCode,
  android.view.KeyEvent event)

A key was released. 

The default implementation handles KEYCODE_BACK to close the dialog. 



*android.app.Dialog.onMenuItemSelected(int,MenuItem)*

public boolean onMenuItemSelected(
  int featureId,
  android.view.MenuItem item)





*android.app.Dialog.onMenuOpened(int,Menu)*

public boolean onMenuOpened(
  int featureId,
  android.view.Menu menu)





*android.app.Dialog.onOptionsItemSelected(MenuItem)*

public boolean onOptionsItemSelected(android.view.MenuItem item)





*android.app.Dialog.onOptionsMenuClosed(Menu)*

public void onOptionsMenuClosed(android.view.Menu menu)





*android.app.Dialog.onPanelClosed(int,Menu)*

public void onPanelClosed(
  int featureId,
  android.view.Menu menu)





*android.app.Dialog.onPrepareOptionsMenu(Menu)*

public boolean onPrepareOptionsMenu(android.view.Menu menu)

It is usually safe to proxy this call to the owner activity's 
(|android.app.Activity|) if the client desires the same menu for this Dialog. 



*android.app.Dialog.onPreparePanel(int,View,Menu)*

public boolean onPreparePanel(
  int featureId,
  android.view.View view,
  android.view.Menu menu)





*android.app.Dialog.onRestoreInstanceState(Bundle)*

public void onRestoreInstanceState(android.os.Bundle savedInstanceState)

Restore the state of the dialog from a previously saved bundle. 

The default implementation restores the state of the dialog's view hierarchy 
that was saved in the default implementation of (|android.app.Dialog|) , so be 
sure to call through to super when overriding unless you want to do all 
restoring of state yourself. 


    savedInstanceState - The state of the dialog previously saved by {@link #onSaveInstanceState()}. 

*android.app.Dialog.onSaveInstanceState()*

public |android.os.Bundle| onSaveInstanceState()

Saves the state of the dialog into a bundle. 

The default implementation saves the state of its view hierarchy, so you'll 
likely want to call through to super if you override this to save additional 
state. 



    Returns: A bundle with the state of the dialog. 

*android.app.Dialog.onSearchRequested()*

public boolean onSearchRequested()

This hook is called when the user signals the desire to start a search. 



*android.app.Dialog.onStart()*

protected void onStart()

Called when the dialog is starting. 



*android.app.Dialog.onStop()*

protected void onStop()

Called to tell you that you're stopping. 



*android.app.Dialog.onTouchEvent(MotionEvent)*

public boolean onTouchEvent(android.view.MotionEvent event)

Called when a touch screen event was not handled by any of the views under it. 
This is most useful to process touch events that happen outside of your window 
bounds, where there is no view to receive it. 


    event - The touch screen event being processed. 

    Returns: Return true if you have consumed the event, false if you haven't. The default 
             implementation will cancel the dialog when a touch happens outside 
             of the window bounds. 

*android.app.Dialog.onTrackballEvent(MotionEvent)*

public boolean onTrackballEvent(android.view.MotionEvent event)

Called when the trackball was moved and not handled by any of the views inside 
of the activity. So, for example, if the trackball moves while focus is on a 
button, you will receive a call here because buttons do not normally do 
anything with trackball events. The call here happens before trackball 
movements are converted to DPAD key events, which then get sent back to the 
view hierarchy, and will be processed at the point for things like focus 
navigation. 


    event - The trackball event being processed. 

    Returns: Return true if you have consumed the event, false if you haven't. The default 
             implementation always returns false. 

*android.app.Dialog.onWindowAttributesChanged(WindowManager.LayoutParams)*

public void onWindowAttributesChanged(android.view.WindowManager.LayoutParams params)





*android.app.Dialog.onWindowFocusChanged(boolean)*

public void onWindowFocusChanged(boolean hasFocus)





*android.app.Dialog.onWindowStartingActionMode(ActionMode.Callback)*

public |android.view.ActionMode| onWindowStartingActionMode(android.view.ActionMode.Callback callback)





*android.app.Dialog.openContextMenu(View)*

public void openContextMenu(android.view.View view)





*android.app.Dialog.openOptionsMenu()*

public void openOptionsMenu()





*android.app.Dialog.registerForContextMenu(View)*

public void registerForContextMenu(android.view.View view)





*android.app.Dialog.requestWindowFeature(int)*

public final boolean requestWindowFeature(int featureId)

Enable extended window features. This is a convenience for calling 
getWindow().requestFeature()(|android.view.Window|) . 


    featureId - The desired feature as defined in {@link android.view.Window}. 

    Returns: Returns true if the requested feature is supported and now enabled. 

*android.app.Dialog.setCancelable(boolean)*

public void setCancelable(boolean flag)

Sets whether this dialog is cancelable with the BACK(|android.view.KeyEvent|) 
key. 



*android.app.Dialog.setCanceledOnTouchOutside(boolean)*

public void setCanceledOnTouchOutside(boolean cancel)

Sets whether this dialog is canceled when touched outside the window's bounds. 
If setting to true, the dialog is set to be cancelable if not already set. 


    cancel - Whether the dialog should be canceled when touched outside the window. 

*android.app.Dialog.setCancelMessage(Message)*

public void setCancelMessage(android.os.Message msg)

Set a message to be sent when the dialog is canceled. 


    msg - The msg to send when the dialog is canceled. 

*android.app.Dialog.setContentView(int)*

public void setContentView(int layoutResID)

Set the screen content from a layout resource. The resource will be inflated, 
adding all top-level views to the screen. 


    layoutResID - Resource ID to be inflated. 

*android.app.Dialog.setContentView(View)*

public void setContentView(android.view.View view)

Set the screen content to an explicit view. This view is placed directly into 
the screen's view hierarchy. It can itself be a complex view hierarhcy. 


    view - The desired content to display. 

*android.app.Dialog.setContentView(View,ViewGroup.LayoutParams)*

public void setContentView(
  android.view.View view,
  android.view.ViewGroup.LayoutParams params)

Set the screen content to an explicit view. This view is placed directly into 
the screen's view hierarchy. It can itself be a complex view hierarhcy. 


    view - The desired content to display. 
    params - Layout parameters for the view. 

*android.app.Dialog.setDismissMessage(Message)*

public void setDismissMessage(android.os.Message msg)

Set a message to be sent when the dialog is dismissed. 


    msg - The msg to send when the dialog is dismissed. 

*android.app.Dialog.setFeatureDrawable(int,Drawable)*

public final void setFeatureDrawable(
  int featureId,
  Drawable drawable)

Convenience for calling (|android.view.Window|) . 



*android.app.Dialog.setFeatureDrawableAlpha(int,int)*

public final void setFeatureDrawableAlpha(
  int featureId,
  int alpha)

Convenience for calling (|android.view.Window|) . 



*android.app.Dialog.setFeatureDrawableResource(int,int)*

public final void setFeatureDrawableResource(
  int featureId,
  int resId)

Convenience for calling (|android.view.Window|) . 



*android.app.Dialog.setFeatureDrawableUri(int,Uri)*

public final void setFeatureDrawableUri(
  int featureId,
  android.net.Uri uri)

Convenience for calling (|android.view.Window|) . 



*android.app.Dialog.setOnCancelListener(DialogInterface.OnCancelListener)*

public void setOnCancelListener(android.content.DialogInterface.OnCancelListener listener)

Set a listener to be invoked when the dialog is canceled. 

This will only be invoked when the dialog is canceled. Cancel events alone will 
not capture all ways that the dialog might be dismissed. If the creator needs 
to know when a dialog is dismissed in general, use (|android.app.Dialog|) . 


    listener - The {@link DialogInterface.OnCancelListener} to use. 

*android.app.Dialog.setOnDismissListener(DialogInterface.OnDismissListener)*

public void setOnDismissListener(android.content.DialogInterface.OnDismissListener listener)

Set a listener to be invoked when the dialog is dismissed. 


    listener - The {@link DialogInterface.OnDismissListener} to use. 

*android.app.Dialog.setOnKeyListener(DialogInterface.OnKeyListener)*

public void setOnKeyListener(android.content.DialogInterface.OnKeyListener onKeyListener)

Sets the callback that will be called if a key is dispatched to the dialog. 



*android.app.Dialog.setOnShowListener(DialogInterface.OnShowListener)*

public void setOnShowListener(android.content.DialogInterface.OnShowListener listener)

Sets a listener to be invoked when the dialog is shown. 


    listener - The {@link DialogInterface.OnShowListener} to use. 

*android.app.Dialog.setOwnerActivity(Activity)*

public final void setOwnerActivity(android.app.Activity activity)

Sets the Activity that owns this dialog. An example use: This Dialog will use 
the suggested volume control stream of the Activity. 


    activity - The Activity that owns this dialog. 

*android.app.Dialog.setTitle(CharSequence)*

public void setTitle(java.lang.CharSequence title)

Set the title text for this dialog's window. 


    title - The new text to display in the title. 

*android.app.Dialog.setTitle(int)*

public void setTitle(int titleId)

Set the title text for this dialog's window. The text is retrieved from the 
resources with the supplied identifier. 


    titleId - the title's text resource identifier 

*android.app.Dialog.setVolumeControlStream(int)*

public final void setVolumeControlStream(int streamType)

By default, this will use the owner Activity's suggested stream type. 



*android.app.Dialog.show()*

public void show()

Start the dialog and display it on screen. The window is placed in the 
application layer and opaque. Note that you should not override this method to 
do initialization when the dialog is shown, instead implement that in 
(|android.app.Dialog|) . 



*android.app.Dialog.takeCancelAndDismissListeners(String,DialogInterface.OnCancelListener,DialogInterface.OnDismissListener)*

public boolean takeCancelAndDismissListeners(
  java.lang.String msg,
  android.content.DialogInterface.OnCancelListener cancel,
  android.content.DialogInterface.OnDismissListener dismiss)





*android.app.Dialog.takeKeyEvents(boolean)*

public void takeKeyEvents(boolean get)

Request that key events come to this dialog. Use this if your dialog has no 
views with focus, but the dialog still wants a chance to process key events. 


    get - true if the dialog should receive key events, false otherwise 

*android.app.Dialog.unregisterForContextMenu(View)*

public void unregisterForContextMenu(android.view.View view)






