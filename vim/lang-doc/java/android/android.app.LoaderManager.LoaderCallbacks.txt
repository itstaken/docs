*android.app.LoaderManager.LoaderCallbacks* *LoaderManager.LoaderCallbacks* Call

public static interface interface LoaderManager.LoaderCallbacks<D>


|android.app.LoaderManager.LoaderCallbacks_Description|
|android.app.LoaderManager.LoaderCallbacks_Fields|
|android.app.LoaderManager.LoaderCallbacks_Constructors|
|android.app.LoaderManager.LoaderCallbacks_Methods|

================================================================================

*android.app.LoaderManager.LoaderCallbacks_Methods*
|android.app.LoaderManager.LoaderCallbacks.onCreateLoader(int,Bundle)|Instantia
|android.app.LoaderManager.LoaderCallbacks.onLoaderReset(Loader<D>)|Called when
|android.app.LoaderManager.LoaderCallbacks.onLoadFinished(Loader<D>,D)|Called w

*android.app.LoaderManager.LoaderCallbacks_Description*

Callback interface for a client to interact with the manager. 



*android.app.LoaderManager.LoaderCallbacks.onCreateLoader(int,Bundle)*

public |android.content.Loader|<D> onCreateLoader(
  int id,
  android.os.Bundle args)

Instantiate and return a new Loader for the given ID. 


    id - The ID whose loader is to be created. 
    args - Any arguments supplied by the caller. 

    Returns: Return a new Loader instance that is ready to start loading. 

*android.app.LoaderManager.LoaderCallbacks.onLoaderReset(Loader<D>)*

public void onLoaderReset(android.content.Loader<D> loader)

Called when a previously created loader is being reset, and thus making its 
data unavailable. The application should at this point remove any references it 
has to the Loader's data. 


    loader - The Loader that is being reset. 

*android.app.LoaderManager.LoaderCallbacks.onLoadFinished(Loader<D>,D)*

public void onLoadFinished(
  android.content.Loader<D> loader,
  D data)

Called when a previously created loader has finished its load. Note that 
normally an application is not allowed to commit fragment transactions while in 
this call, since it can happen after an activity's state is saved. See 
FragmentManager.openTransaction()(|android.app.FragmentManager|) for further 
discussion on this. 

This function is guaranteed to be called prior to the release of the last data 
that was supplied for this Loader. At this point you should remove all use of 
the old data (since it will be released soon), but should not do your own 
release of the data since its Loader owns it and will take care of that. The 
Loader will take care of management of its data so you don't have to. In 
particular: 

The Loader will monitor for changes to the data, and report them to you through 
new calls here. You should not monitor the data yourself. For example, if the 
data is a (|android.database.Cursor|) and you place it in a 
(|android.widget.CursorAdapter|) , use the (|android.widget.CursorAdapter|) 
constructor without passing in either (|android.widget.CursorAdapter|) or 
(|android.widget.CursorAdapter|) (that is, use 0 for the flags argument). This 
prevents the CursorAdapter from doing its own observing of the Cursor, which is 
not needed since when a change happens you will get a new Cursor throw another 
call here. The Loader will release the data once it knows the application is no 
longer using it. For example, if the data is a (|android.database.Cursor|) from 
a (|android.content.CursorLoader|) , you should not call close() on it 
yourself. If the Cursor is being placed in a (|android.widget.CursorAdapter|) , 
you should use the (|android.widget.CursorAdapter|) method so that the old 
Cursor is not closed. 


    loader - The Loader that has finished. 
    data - The data generated by the Loader. 


