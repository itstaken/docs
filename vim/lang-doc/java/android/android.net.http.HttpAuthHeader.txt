*android.net.http.HttpAuthHeader* *HttpAuthHeader* HttpAuthHeader: a class to st

public class HttpAuthHeader
  extends    |java.lang.Object|

|android.net.http.HttpAuthHeader_Description|
|android.net.http.HttpAuthHeader_Fields|
|android.net.http.HttpAuthHeader_Constructors|
|android.net.http.HttpAuthHeader_Methods|

================================================================================

*android.net.http.HttpAuthHeader_Fields*
|int_android.net.http.HttpAuthHeader.BASIC|
|java.lang.String_android.net.http.HttpAuthHeader.BASIC_TOKEN|
|int_android.net.http.HttpAuthHeader.DIGEST|
|java.lang.String_android.net.http.HttpAuthHeader.DIGEST_TOKEN|
|int_android.net.http.HttpAuthHeader.UNKNOWN|

*android.net.http.HttpAuthHeader_Constructors*
|android.net.http.HttpAuthHeader(String)|Creates a new HTTP-authentication head

*android.net.http.HttpAuthHeader_Methods*
|android.net.http.HttpAuthHeader.getAlgorithm()|
|android.net.http.HttpAuthHeader.getNonce()|
|android.net.http.HttpAuthHeader.getOpaque()|
|android.net.http.HttpAuthHeader.getPassword()|
|android.net.http.HttpAuthHeader.getQop()|
|android.net.http.HttpAuthHeader.getRealm()|
|android.net.http.HttpAuthHeader.getScheme()|
|android.net.http.HttpAuthHeader.getStale()|
|android.net.http.HttpAuthHeader.getUsername()|
|android.net.http.HttpAuthHeader.isBasic()|
|android.net.http.HttpAuthHeader.isDigest()|
|android.net.http.HttpAuthHeader.isProxy()|
|android.net.http.HttpAuthHeader.isSupportedScheme()|
|android.net.http.HttpAuthHeader.setPassword(String)|Sets the password string.
|android.net.http.HttpAuthHeader.setProxy()|Marks this header as a proxy authen
|android.net.http.HttpAuthHeader.setUsername(String)|Sets the username string.

*android.net.http.HttpAuthHeader_Description*

HttpAuthHeader: a class to store HTTP authentication-header parameters. For 
more information, see: RFC 2617: HTTP Authentication. 



*int_android.net.http.HttpAuthHeader.BASIC*




*java.lang.String_android.net.http.HttpAuthHeader.BASIC_TOKEN*

Possible HTTP-authentication header tokens to search for: 


*int_android.net.http.HttpAuthHeader.DIGEST*




*java.lang.String_android.net.http.HttpAuthHeader.DIGEST_TOKEN*




*int_android.net.http.HttpAuthHeader.UNKNOWN*





*android.net.http.HttpAuthHeader(String)*

public HttpAuthHeader(java.lang.String header)

Creates a new HTTP-authentication header object from the input header string. 
The header string is assumed to contain parameters of at most one 
authentication-scheme (ensured by the caller). 


*android.net.http.HttpAuthHeader.getAlgorithm()*

public |java.lang.String| getAlgorithm()





    Returns: The name of the algorithm used or null if there is none. By default, MD5 is 
             used. 

*android.net.http.HttpAuthHeader.getNonce()*

public |java.lang.String| getNonce()





    Returns: The nonce value or null if there is none. 

*android.net.http.HttpAuthHeader.getOpaque()*

public |java.lang.String| getOpaque()





    Returns: The opaque value or null if there is none. 

*android.net.http.HttpAuthHeader.getPassword()*

public |java.lang.String| getPassword()





    Returns: The password string. 

*android.net.http.HttpAuthHeader.getQop()*

public |java.lang.String| getQop()





    Returns: The QOP ("quality-of_protection") value or null if there is none. The QOP value 
             is always lower-case. 

*android.net.http.HttpAuthHeader.getRealm()*

public |java.lang.String| getRealm()





    Returns: The realm value or null if there is none. 

*android.net.http.HttpAuthHeader.getScheme()*

public int getScheme()





    Returns: The authentication scheme requested. We currently support two schemes: 
             HttpAuthHeader.BASIC - basic, and HttpAuthHeader.DIGEST - digest 
             (algorithm=MD5, QOP="auth"). 

*android.net.http.HttpAuthHeader.getStale()*

public boolean getStale()





    Returns: True if indicating that the previous request from the client was rejected 
             because the nonce value was stale. 

*android.net.http.HttpAuthHeader.getUsername()*

public |java.lang.String| getUsername()





    Returns: The username string. 

*android.net.http.HttpAuthHeader.isBasic()*

public boolean isBasic()





    Returns: True iff this is the BASIC-authentication request. 

*android.net.http.HttpAuthHeader.isDigest()*

public boolean isDigest()





    Returns: True iff this is the DIGEST-authentication request. 

*android.net.http.HttpAuthHeader.isProxy()*

public boolean isProxy()





    Returns: True iff this is a proxy authentication header. 

*android.net.http.HttpAuthHeader.isSupportedScheme()*

public boolean isSupportedScheme()





    Returns: True iff the authentication scheme requested by the server is supported; 
             currently supported schemes: BASIC, DIGEST (only algorithm="md5", 
             no qop or qop="auth). 

*android.net.http.HttpAuthHeader.setPassword(String)*

public void setPassword(java.lang.String password)

Sets the password string. 



*android.net.http.HttpAuthHeader.setProxy()*

public void setProxy()

Marks this header as a proxy authentication header. 



*android.net.http.HttpAuthHeader.setUsername(String)*

public void setUsername(java.lang.String username)

Sets the username string. 




