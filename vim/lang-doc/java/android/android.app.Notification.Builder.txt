*android.app.Notification.Builder* *Notification.Builder* Builder class forNotif

public static class Notification.Builder
  extends    |java.lang.Object|

|android.app.Notification.Builder_Description|
|android.app.Notification.Builder_Fields|
|android.app.Notification.Builder_Constructors|
|android.app.Notification.Builder_Methods|

================================================================================

*android.app.Notification.Builder_Constructors*
|android.app.Notification.Builder(Context)|Constructs a new Builder with the de

*android.app.Notification.Builder_Methods*
|android.app.Notification.Builder.addAction(int,CharSequence,PendingIntent)|Add
|android.app.Notification.Builder.addExtras(Bundle)|Capture, in the provided bu
|android.app.Notification.Builder.addKind(String)|
|android.app.Notification.Builder.build()|Combine all of the options that have 
|android.app.Notification.Builder.buildInto(Notification)|Apply this Builder to
|android.app.Notification.Builder.buildUnstyled()|Apply the unstyled operations
|android.app.Notification.Builder.getNotification()|
|android.app.Notification.Builder.setAutoCancel(boolean)|Make this notification
|android.app.Notification.Builder.setContent(RemoteViews)|Supply a custom Remot
|android.app.Notification.Builder.setContentInfo(CharSequence)|A small piece of
|android.app.Notification.Builder.setContentIntent(PendingIntent)|Supply aPendi
|android.app.Notification.Builder.setContentText(CharSequence)|Set the second l
|android.app.Notification.Builder.setContentTitle(CharSequence)|Set the first l
|android.app.Notification.Builder.setDefaults(int)|Set which notification prope
|android.app.Notification.Builder.setDeleteIntent(PendingIntent)|Supply aPendin
|android.app.Notification.Builder.setExtras(Bundle)|Add metadata to this notifi
|android.app.Notification.Builder.setFullScreenIntent(PendingIntent,boolean)|An
|android.app.Notification.Builder.setLargeIcon(Bitmap)|Add a large icon to the 
|android.app.Notification.Builder.setLights(int,int,int)|Set the desired color 
|android.app.Notification.Builder.setNumber(int)|Set the large number at the ri
|android.app.Notification.Builder.setOngoing(boolean)|Set whether this is an "o
|android.app.Notification.Builder.setOnlyAlertOnce(boolean)|Set this flag if yo
|android.app.Notification.Builder.setPriority(int)|Set the priority of this not
|android.app.Notification.Builder.setProgress(int,int,boolean)|Set the progress
|android.app.Notification.Builder.setShowWhen(boolean)|Control whether the time
|android.app.Notification.Builder.setSmallIcon(int)|Set the small icon resource
|android.app.Notification.Builder.setSmallIcon(int,int)|A variant of#setSmallIc
|android.app.Notification.Builder.setSound(Uri)|Set the sound to play.
|android.app.Notification.Builder.setSound(Uri,int)|Set the sound to play, alon
|android.app.Notification.Builder.setStyle(Notification.Style)|Add a rich notif
|android.app.Notification.Builder.setSubText(CharSequence)|Set the third line o
|android.app.Notification.Builder.setTicker(CharSequence)|Set the "ticker" text
|android.app.Notification.Builder.setTicker(CharSequence,RemoteViews)|Set the t
|android.app.Notification.Builder.setUsesChronometer(boolean)|Show theNotificat
|android.app.Notification.Builder.setVibrate(long[])|Set the vibration pattern 
|android.app.Notification.Builder.setWhen(long)|Add a timestamp pertaining to t

*android.app.Notification.Builder_Description*

Builder class for (|android.app.Notification|) objects. 

Provides a convenient way to set the various fields of a 
(|android.app.Notification|) and generate content views using the platform's 
notification layout template. If your app supports versions of Android as old 
as API level 4, you can instead use 
NotificationCompat.Builder(|android.support.v4.app.NotificationCompat.Builder|) 
, available in the <a href="tools/extras/support-library.html">Android Support 
library. 

Example: 

Notification noti = new Notification.Builder(mContext) .setContentTitle(New 
mail from + sender.toString()) .setContentText(subject) 
.setSmallIcon(R.drawable.new_mail) .setLargeIcon(aBitmap) .build(); 



*android.app.Notification.Builder(Context)*

public Notification.Builder(android.content.Context context)

Constructs a new Builder with the defaults: 

priority (|android.app.Notification.Builder|) when now ( (|java.lang.System|) ) 
audio stream (|android.app.Notification.Builder|) 

    context - A {@link Context} that will be used by the Builder to construct the 
       RemoteViews. The Context will not be held past the lifetime of this 
       Builder object. 

*android.app.Notification.Builder.addAction(int,CharSequence,PendingIntent)*

public |android.app.Notification.Builder| addAction(
  int icon,
  java.lang.CharSequence title,
  android.app.PendingIntent intent)

Add an action to this notification. Actions are typically displayed by the 
system as a button adjacent to the notification content. 

Every action must have an icon (32dp square and matching the <a 
href="design/style/iconography.html#action-bar">Holo Dark action bar visual 
style), a textual label, and a (|android.app.PendingIntent|) . 

A notification in its expanded form can display up to 3 actions, from left to 
right in the order they were added. Actions will not be displayed when the 
notification is collapsed, however, so be sure that any essential functions may 
be accessed by the user in some other way (for example, in the Activity pointed 
to by (|android.app.Notification.Builder|) ). 


    icon - Resource ID of a drawable that represents the action. 
    title - Text describing the action. 
    intent - PendingIntent to be fired when the action is invoked. 

*android.app.Notification.Builder.addExtras(Bundle)*

public void addExtras(android.os.Bundle extras)

Capture, in the provided bundle, semantic information used in the construction 
of this Notification object. 



*android.app.Notification.Builder.addKind(String)*

public |android.app.Notification.Builder| addKind(java.lang.String k)





*android.app.Notification.Builder.build()*

public |android.app.Notification| build()

Combine all of the options that have been set and return a new 
(|android.app.Notification|) object. 



*android.app.Notification.Builder.buildInto(Notification)*

public |android.app.Notification| buildInto(android.app.Notification n)

Apply this Builder to an existing (|android.app.Notification|) object. 



*android.app.Notification.Builder.buildUnstyled()*

public |android.app.Notification| buildUnstyled()

Apply the unstyled operations and return a new (|android.app.Notification|) 
object. 



*android.app.Notification.Builder.getNotification()*

public |android.app.Notification| getNotification()



    Deprecated: Use {@link #build()} instead.


*android.app.Notification.Builder.setAutoCancel(boolean)*

public |android.app.Notification.Builder| setAutoCancel(boolean autoCancel)

Make this notification automatically dismissed when the user touches it. The 
PendingIntent set with (|android.app.Notification.Builder|) will be sent when 
this happens. 



*android.app.Notification.Builder.setContent(RemoteViews)*

public |android.app.Notification.Builder| setContent(android.widget.RemoteViews views)

Supply a custom RemoteViews to use instead of the platform template. 



*android.app.Notification.Builder.setContentInfo(CharSequence)*

public |android.app.Notification.Builder| setContentInfo(java.lang.CharSequence info)

A small piece of additional information pertaining to this notification. 

The platform template will draw this on the last line of the notification, at 
the far right (to the right of a smallIcon if it has been placed there). 



*android.app.Notification.Builder.setContentIntent(PendingIntent)*

public |android.app.Notification.Builder| setContentIntent(android.app.PendingIntent intent)

Supply a (|android.app.PendingIntent|) to be sent when the notification is 
clicked. 

As of (|android.os.Build.VERSION_CODES|) , if this field is unset and you have 
specified a custom RemoteViews with (|android.app.Notification.Builder|) , you 
can use 
RemoteViews.setOnClickPendingIntent(int,PendingIntent)(|android.widget.RemoteViews|)
to assign PendingIntents to individual views in that custom layout (i.e., to 
create clickable buttons inside the notification view). 



*android.app.Notification.Builder.setContentText(CharSequence)*

public |android.app.Notification.Builder| setContentText(java.lang.CharSequence text)

Set the second line of text in the platform notification template. 



*android.app.Notification.Builder.setContentTitle(CharSequence)*

public |android.app.Notification.Builder| setContentTitle(java.lang.CharSequence title)

Set the first line of text in the platform notification template. 



*android.app.Notification.Builder.setDefaults(int)*

public |android.app.Notification.Builder| setDefaults(int defaults)

Set which notification properties will be inherited from system defaults. 

The value should be one or more of the following fields combined with 
bitwise-or: (|android.app.Notification.Builder|) , 
(|android.app.Notification.Builder|) , (|android.app.Notification.Builder|) . 

For all default values, use (|android.app.Notification.Builder|) . 



*android.app.Notification.Builder.setDeleteIntent(PendingIntent)*

public |android.app.Notification.Builder| setDeleteIntent(android.app.PendingIntent intent)

Supply a (|android.app.PendingIntent|) to send when the notification is cleared 
explicitly by the user. 



*android.app.Notification.Builder.setExtras(Bundle)*

public |android.app.Notification.Builder| setExtras(android.os.Bundle bag)

Add metadata to this notification. 

A reference to the Bundle is held for the lifetime of this Builder, and the 
Bundle's current contents are copied into the Notification each time 
(|android.app.Notification.Builder|) is called. 



*android.app.Notification.Builder.setFullScreenIntent(PendingIntent,boolean)*

public |android.app.Notification.Builder| setFullScreenIntent(
  android.app.PendingIntent intent,
  boolean highPriority)

An intent to launch instead of posting the notification to the status bar. Only 
for use with extremely high-priority notifications demanding the user's 
immediate attention, such as an incoming phone call or alarm clock that the 
user has explicitly set to a particular time. If this facility is used for 
something else, please give the user an option to turn it off and use a normal 
notification, as this can be extremely disruptive. 


    intent - The pending intent to launch. 
    highPriority - Passing true will cause this notification to be sent even if other 
       notifications are suppressed. 

*android.app.Notification.Builder.setLargeIcon(Bitmap)*

public |android.app.Notification.Builder| setLargeIcon(Bitmap icon)

Add a large icon to the notification (and the ticker on some devices). 

In the platform template, this image will be shown on the left of the 
notification view in place of the small 
icon(|android.app.Notification.Builder|) (which will move to the right side). 



*android.app.Notification.Builder.setLights(int,int,int)*

public |android.app.Notification.Builder| setLights(
  int argb,
  int onMs,
  int offMs)

Set the desired color for the indicator LED on the device, as well as the blink 
duty cycle (specified in milliseconds). 

Not all devices will honor all (or even any) of these values. 



*android.app.Notification.Builder.setNumber(int)*

public |android.app.Notification.Builder| setNumber(int number)

Set the large number at the right-hand side of the notification. This is 
equivalent to setContentInfo, although it might show the number in a different 
font size for readability. 



*android.app.Notification.Builder.setOngoing(boolean)*

public |android.app.Notification.Builder| setOngoing(boolean ongoing)

Set whether this is an "ongoing" notification. 

Ongoing notifications cannot be dismissed by the user, so your application or 
service must take care of canceling them. 

They are typically used to indicate a background task that the user is actively 
engaged with (e.g., playing music) or is pending in some way and therefore 
occupying the device (e.g., a file download, sync operation, active network 
connection). 



*android.app.Notification.Builder.setOnlyAlertOnce(boolean)*

public |android.app.Notification.Builder| setOnlyAlertOnce(boolean onlyAlertOnce)

Set this flag if you would only like the sound, vibrate and ticker to be played 
if the notification is not already showing. 



*android.app.Notification.Builder.setPriority(int)*

public |android.app.Notification.Builder| setPriority(int pri)

Set the priority of this notification. 



*android.app.Notification.Builder.setProgress(int,int,boolean)*

public |android.app.Notification.Builder| setProgress(
  int max,
  int progress,
  boolean indeterminate)

Set the progress this notification represents. 

The platform template will represent this using a 
(|android.widget.ProgressBar|) . 



*android.app.Notification.Builder.setShowWhen(boolean)*

public |android.app.Notification.Builder| setShowWhen(boolean show)

Control whether the timestamp set with 
setWhen(|android.app.Notification.Builder|) is shown in the content view. 



*android.app.Notification.Builder.setSmallIcon(int)*

public |android.app.Notification.Builder| setSmallIcon(int icon)

Set the small icon resource, which will be used to represent the notification 
in the status bar. 

The platform template for the expanded view will draw this icon in the left, 
unless a large icon(|android.app.Notification.Builder|) has also been 
specified, in which case the small icon will be moved to the right-hand side. 


    icon - A resource ID in the application's package of the drawable to use. 

*android.app.Notification.Builder.setSmallIcon(int,int)*

public |android.app.Notification.Builder| setSmallIcon(
  int icon,
  int level)

A variant of setSmallIcon(int)(|android.app.Notification.Builder|) that takes 
an additional level parameter for when the icon is a 
LevelListDrawable(|android.graphics.drawable.LevelListDrawable|) . 


    icon - A resource ID in the application's package of the drawable to use. 
    level - The level to use for the icon. 

*android.app.Notification.Builder.setSound(Uri)*

public |android.app.Notification.Builder| setSound(android.net.Uri sound)

Set the sound to play. 

It will be played on the default stream(|android.app.Notification.Builder|) for 
notifications. 



*android.app.Notification.Builder.setSound(Uri,int)*

public |android.app.Notification.Builder| setSound(
  android.net.Uri sound,
  int streamType)

Set the sound to play, along with a specific stream on which to play it. 

See (|android.media.AudioManager|) for the STREAM_ constants. 



*android.app.Notification.Builder.setStyle(Notification.Style)*

public |android.app.Notification.Builder| setStyle(android.app.Notification.Style style)

Add a rich notification style to be applied at build time. 


    style - Object responsible for modifying the notification style. 

*android.app.Notification.Builder.setSubText(CharSequence)*

public |android.app.Notification.Builder| setSubText(java.lang.CharSequence text)

Set the third line of text in the platform notification template. Don't use if 
you're also using (|android.app.Notification.Builder|) ; they occupy the same 
location in the standard template. 



*android.app.Notification.Builder.setTicker(CharSequence)*

public |android.app.Notification.Builder| setTicker(java.lang.CharSequence tickerText)

Set the "ticker" text which is displayed in the status bar when the 
notification first arrives. 



*android.app.Notification.Builder.setTicker(CharSequence,RemoteViews)*

public |android.app.Notification.Builder| setTicker(
  java.lang.CharSequence tickerText,
  android.widget.RemoteViews views)

Set the text that is displayed in the status bar when the notification first 
arrives, and also a RemoteViews object that may be displayed instead on some 
devices. 



*android.app.Notification.Builder.setUsesChronometer(boolean)*

public |android.app.Notification.Builder| setUsesChronometer(boolean b)

Show the (|android.app.Notification|) field as a stopwatch. 

Instead of presenting when as a timestamp, the notification will show an 
automatically updating display of the minutes and seconds since when. 

Useful when showing an elapsed time (like an ongoing phone call). 



*android.app.Notification.Builder.setVibrate(long[])*

public |android.app.Notification.Builder| setVibrate(long[] pattern)

Set the vibration pattern to use. 

See (|android.os.Vibrator|) for a discussion of the pattern parameter. 



*android.app.Notification.Builder.setWhen(long)*

public |android.app.Notification.Builder| setWhen(long when)

Add a timestamp pertaining to the notification (usually the time the event 
occurred). It will be shown in the notification content view by default; use 
setShowWhen(|android.app.Notification.Builder|) to control this. 




