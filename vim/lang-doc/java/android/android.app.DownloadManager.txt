*android.app.DownloadManager* *DownloadManager* The download manager is a system

public class DownloadManager
  extends    |java.lang.Object|

|android.app.DownloadManager_Description|
|android.app.DownloadManager_Fields|
|android.app.DownloadManager_Constructors|
|android.app.DownloadManager_Methods|

================================================================================

*android.app.DownloadManager_Fields*
|java.lang.String_android.app.DownloadManager.ACTION_DOWNLOAD_COMPLETE|
|java.lang.String_android.app.DownloadManager.ACTION_NOTIFICATION_CLICKED|
|java.lang.String_android.app.DownloadManager.ACTION_VIEW_DOWNLOADS|
|java.lang.String_android.app.DownloadManager.COLUMN_ALLOW_WRITE|
|java.lang.String_android.app.DownloadManager.COLUMN_BYTES_DOWNLOADED_SO_FAR|
|java.lang.String_android.app.DownloadManager.COLUMN_DESCRIPTION|
|java.lang.String_android.app.DownloadManager.COLUMN_ID|
|java.lang.String_android.app.DownloadManager.COLUMN_LAST_MODIFIED_TIMESTAMP|
|java.lang.String_android.app.DownloadManager.COLUMN_LOCAL_FILENAME|
|java.lang.String_android.app.DownloadManager.COLUMN_LOCAL_URI|
|java.lang.String_android.app.DownloadManager.COLUMN_MEDIA_TYPE|
|java.lang.String_android.app.DownloadManager.COLUMN_MEDIAPROVIDER_URI|
|java.lang.String_android.app.DownloadManager.COLUMN_REASON|
|java.lang.String_android.app.DownloadManager.COLUMN_STATUS|
|java.lang.String_android.app.DownloadManager.COLUMN_TITLE|
|java.lang.String_android.app.DownloadManager.COLUMN_TOTAL_SIZE_BYTES|
|java.lang.String_android.app.DownloadManager.COLUMN_URI|
|int_android.app.DownloadManager.ERROR_BLOCKED|
|int_android.app.DownloadManager.ERROR_CANNOT_RESUME|
|int_android.app.DownloadManager.ERROR_DEVICE_NOT_FOUND|
|int_android.app.DownloadManager.ERROR_FILE_ALREADY_EXISTS|
|int_android.app.DownloadManager.ERROR_FILE_ERROR|
|int_android.app.DownloadManager.ERROR_HTTP_DATA_ERROR|
|int_android.app.DownloadManager.ERROR_INSUFFICIENT_SPACE|
|int_android.app.DownloadManager.ERROR_TOO_MANY_REDIRECTS|
|int_android.app.DownloadManager.ERROR_UNHANDLED_HTTP_CODE|
|int_android.app.DownloadManager.ERROR_UNKNOWN|
|java.lang.String_android.app.DownloadManager.EXTRA_DOWNLOAD_ID|
|java.lang.String_android.app.DownloadManager.EXTRA_NOTIFICATION_CLICK_DOWNLOAD_IDS|
|java.lang.String_android.app.DownloadManager.INTENT_EXTRAS_SORT_BY_SIZE|
|int_android.app.DownloadManager.PAUSED_QUEUED_FOR_WIFI|
|int_android.app.DownloadManager.PAUSED_UNKNOWN|
|int_android.app.DownloadManager.PAUSED_WAITING_FOR_NETWORK|
|int_android.app.DownloadManager.PAUSED_WAITING_TO_RETRY|
|int_android.app.DownloadManager.STATUS_FAILED|
|int_android.app.DownloadManager.STATUS_PAUSED|
|int_android.app.DownloadManager.STATUS_PENDING|
|int_android.app.DownloadManager.STATUS_RUNNING|
|int_android.app.DownloadManager.STATUS_SUCCESSFUL|
|java.lang.String[]_android.app.DownloadManager.UNDERLYING_COLUMNS|

*android.app.DownloadManager_Constructors*
|android.app.DownloadManager(ContentResolver,String)|

*android.app.DownloadManager_Methods*
|android.app.DownloadManager.addCompletedDownload(String,String,boolean,String,String,long,boolean)|
|android.app.DownloadManager.addCompletedDownload(String,String,boolean,String,String,long,boolean,boolean)|
|android.app.DownloadManager.enqueue(DownloadManager.Request)|Enqueue a new dow
|android.app.DownloadManager.getActiveNetworkWarningBytes(Context)|
|android.app.DownloadManager.getDownloadUri(long)|Get the DownloadProvider URI 
|android.app.DownloadManager.getMaxBytesOverMobile(Context)|Returns maximum siz
|android.app.DownloadManager.getMimeTypeForDownloadedFile(long)|ReturnsUrifor t
|android.app.DownloadManager.getRecommendedMaxBytesOverMobile(Context)|Returns 
|android.app.DownloadManager.getUriForDownloadedFile(long)|ReturnsUrifor the gi
|android.app.DownloadManager.isActiveNetworkExpensive(Context)|
|android.app.DownloadManager.markRowDeleted(long...)|Marks the specified downlo
|android.app.DownloadManager.openDownloadedFile(long)|Open a downloaded file fo
|android.app.DownloadManager.query(DownloadManager.Query)|Query the download ma
|android.app.DownloadManager.remove(long...)|Cancel downloads and remove them f
|android.app.DownloadManager.restartDownload(long...)|Restart the given downloa
|android.app.DownloadManager.setAccessAllDownloads(boolean)|Makes this object a

*android.app.DownloadManager_Description*

The download manager is a system service that handles long-running HTTP 
downloads. Clients may request that a URI be downloaded to a particular 
destination file. The download manager will conduct the download in the 
background, taking care of HTTP interactions and retrying downloads after 
failures or across connectivity changes and system reboots. 

Instances of this class should be obtained through (|android.content.Context|) 
by passing (|android.content.Context|) . 

Apps that request downloads through this API should register a broadcast 
receiver for (|android.app.DownloadManager|) to appropriately handle when the 
user clicks on a running download in a notification or from the downloads UI. 

Note that the application must have the (|android.Manifest.permission|) 
permission to use this class. 



*java.lang.String_android.app.DownloadManager.ACTION_DOWNLOAD_COMPLETE*

Broadcast intent action sent by the download manager when a download completes. 


*java.lang.String_android.app.DownloadManager.ACTION_NOTIFICATION_CLICKED*

Broadcast intent action sent by the download manager when the user clicks on a 
running download, either from a system notification or from the downloads UI. 


*java.lang.String_android.app.DownloadManager.ACTION_VIEW_DOWNLOADS*

Intent action to launch an activity to display all downloads. 


*java.lang.String_android.app.DownloadManager.COLUMN_ALLOW_WRITE*




*java.lang.String_android.app.DownloadManager.COLUMN_BYTES_DOWNLOADED_SO_FAR*

Number of bytes download so far. 


*java.lang.String_android.app.DownloadManager.COLUMN_DESCRIPTION*

The client-supplied description of this download. This will be displayed in 
system notifications. Defaults to the empty string. 


*java.lang.String_android.app.DownloadManager.COLUMN_ID*

An identifier for a particular download, unique across the system. Clients use 
this ID to make subsequent calls related to the download. 


*java.lang.String_android.app.DownloadManager.COLUMN_LAST_MODIFIED_TIMESTAMP*

Timestamp when the download was last modified, in 
System.currentTimeMillis()(|java.lang.System|) (wall clock time in UTC). 


*java.lang.String_android.app.DownloadManager.COLUMN_LOCAL_FILENAME*

The pathname of the file where the download is stored. 


*java.lang.String_android.app.DownloadManager.COLUMN_LOCAL_URI*

Uri where downloaded file will be stored. If a destination is supplied by 
client, that URI will be used here. Otherwise, the value will initially be null 
and will be filled in with a generated URI once the download has started. 


*java.lang.String_android.app.DownloadManager.COLUMN_MEDIA_TYPE*

Internet Media Type of the downloaded file. If no value is provided upon 
creation, this will initially be null and will be filled in based on the 
server's response once the download has started. 


*java.lang.String_android.app.DownloadManager.COLUMN_MEDIAPROVIDER_URI*

The URI to the corresponding entry in MediaProvider for this downloaded entry. 
It is used to delete the entries from MediaProvider database when it is deleted 
from the downloaded list. 


*java.lang.String_android.app.DownloadManager.COLUMN_REASON*

Provides more detail on the status of the download. Its meaning depends on the 
value of (|android.app.DownloadManager|) . 

When (|android.app.DownloadManager|) is (|android.app.DownloadManager|) , this 
indicates the type of error that occurred. If an HTTP error occurred, this will 
hold the HTTP status code as defined in RFC 2616. Otherwise, it will hold one 
of the ERROR_* constants. 

When (|android.app.DownloadManager|) is (|android.app.DownloadManager|) , this 
indicates why the download is paused. It will hold one of the PAUSED_* 
constants. 

If (|android.app.DownloadManager|) is neither (|android.app.DownloadManager|) 
nor (|android.app.DownloadManager|) , this column's value is undefined. 


*java.lang.String_android.app.DownloadManager.COLUMN_STATUS*

Current status of the download, as one of the STATUS_* constants. 


*java.lang.String_android.app.DownloadManager.COLUMN_TITLE*

The client-supplied title for this download. This will be displayed in system 
notifications. Defaults to the empty string. 


*java.lang.String_android.app.DownloadManager.COLUMN_TOTAL_SIZE_BYTES*

Total size of the download in bytes. This will initially be -1 and will be 
filled in once the download starts. 


*java.lang.String_android.app.DownloadManager.COLUMN_URI*

URI to be downloaded. 


*int_android.app.DownloadManager.ERROR_BLOCKED*

Value of (|android.app.DownloadManager|) when the download has failed because 
of (|android.net.NetworkPolicyManager|) controls on the requesting application. 


*int_android.app.DownloadManager.ERROR_CANNOT_RESUME*

Value of (|android.app.DownloadManager|) when some possibly transient error 
occurred but we can't resume the download. 


*int_android.app.DownloadManager.ERROR_DEVICE_NOT_FOUND*

Value of (|android.app.DownloadManager|) when no external storage device was 
found. Typically, this is because the SD card is not mounted. 


*int_android.app.DownloadManager.ERROR_FILE_ALREADY_EXISTS*

Value of (|android.app.DownloadManager|) when the requested destination file 
already exists (the download manager will not overwrite an existing file). 


*int_android.app.DownloadManager.ERROR_FILE_ERROR*

Value of (|android.app.DownloadManager|) when a storage issue arises which 
doesn't fit under any other error code. Use the more specific 
(|android.app.DownloadManager|) and (|android.app.DownloadManager|) when 
appropriate. 


*int_android.app.DownloadManager.ERROR_HTTP_DATA_ERROR*

Value of (|android.app.DownloadManager|) when an error receiving or processing 
data occurred at the HTTP level. 


*int_android.app.DownloadManager.ERROR_INSUFFICIENT_SPACE*

Value of (|android.app.DownloadManager|) when there was insufficient storage 
space. Typically, this is because the SD card is full. 


*int_android.app.DownloadManager.ERROR_TOO_MANY_REDIRECTS*

Value of (|android.app.DownloadManager|) when there were too many redirects. 


*int_android.app.DownloadManager.ERROR_UNHANDLED_HTTP_CODE*

Value of (|android.app.DownloadManager|) when an HTTP code was received that 
download manager can't handle. 


*int_android.app.DownloadManager.ERROR_UNKNOWN*

Value of COLUMN_ERROR_CODE when the download has completed with an error that 
doesn't fit under any other error code. 


*java.lang.String_android.app.DownloadManager.EXTRA_DOWNLOAD_ID*

Intent extra included with (|android.app.DownloadManager|) intents, indicating 
the ID (as a long) of the download that just completed. 


*java.lang.String_android.app.DownloadManager.EXTRA_NOTIFICATION_CLICK_DOWNLOAD_IDS*

When clicks on multiple notifications are received, the following provides an 
array of download ids corresponding to the download notification that was 
clicked. It can be retrieved by the receiver of this Intent using 
(|android.content.Intent|) . 


*java.lang.String_android.app.DownloadManager.INTENT_EXTRAS_SORT_BY_SIZE*

Intent extra included with (|android.app.DownloadManager|) to start DownloadApp 
in sort-by-size mode. 


*int_android.app.DownloadManager.PAUSED_QUEUED_FOR_WIFI*

Value of (|android.app.DownloadManager|) when the download exceeds a size limit 
for downloads over the mobile network and the download manager is waiting for a 
Wi-Fi connection to proceed. 


*int_android.app.DownloadManager.PAUSED_UNKNOWN*

Value of (|android.app.DownloadManager|) when the download is paused for some 
other reason. 


*int_android.app.DownloadManager.PAUSED_WAITING_FOR_NETWORK*

Value of (|android.app.DownloadManager|) when the download is waiting for 
network connectivity to proceed. 


*int_android.app.DownloadManager.PAUSED_WAITING_TO_RETRY*

Value of (|android.app.DownloadManager|) when the download is paused because 
some network error occurred and the download manager is waiting before retrying 
the request. 


*int_android.app.DownloadManager.STATUS_FAILED*

Value of (|android.app.DownloadManager|) when the download has failed (and will 
not be retried). 


*int_android.app.DownloadManager.STATUS_PAUSED*

Value of (|android.app.DownloadManager|) when the download is waiting to retry 
or resume. 


*int_android.app.DownloadManager.STATUS_PENDING*

Value of (|android.app.DownloadManager|) when the download is waiting to start. 


*int_android.app.DownloadManager.STATUS_RUNNING*

Value of (|android.app.DownloadManager|) when the download is currently 
running. 


*int_android.app.DownloadManager.STATUS_SUCCESSFUL*

Value of (|android.app.DownloadManager|) when the download has successfully 
completed. 


*java.lang.String[]_android.app.DownloadManager.UNDERLYING_COLUMNS*

columns to request from DownloadProvider. 



*android.app.DownloadManager(ContentResolver,String)*

public DownloadManager(
  android.content.ContentResolver resolver,
  java.lang.String packageName)




*android.app.DownloadManager.addCompletedDownload(String,String,boolean,String,String,long,boolean)*

public long addCompletedDownload(
  java.lang.String title,
  java.lang.String description,
  boolean isMediaScannerScannable,
  java.lang.String mimeType,
  java.lang.String path,
  long length,
  boolean showNotification)

Adds a file to the downloads database system, so it could appear in Downloads 
App (and thus become eligible for management by the Downloads App). 

It is helpful to make the file scannable by MediaScanner by setting the param 
isMediaScannerScannable to true. It makes the file visible in media managing 
applications such as Gallery App, which could be a useful purpose of using this 
API. 


    title - the title that would appear for this file in Downloads App. 
    description - the description that would appear for this file in Downloads App. 
    isMediaScannerScannable - true if the file is to be scanned by MediaScanner. Files scanned by 
       MediaScanner appear in the applications used to view media (for example, 
       Gallery app). 
    mimeType - mimetype of the file. 
    path - absolute pathname to the file. The file should be world-readable, so that it 
       can be managed by the Downloads App and any other app that is used to 
       read it (for example, Gallery app to display the file, if the file 
       contents represent a video/image). 
    length - length of the downloaded file 
    showNotification - true if a notification is to be sent, false otherwise 

    Returns: an ID for the download entry added to the downloads app, unique across the 
             system This ID is used to make future calls related to this 
             download. 

*android.app.DownloadManager.addCompletedDownload(String,String,boolean,String,String,long,boolean,boolean)*

public long addCompletedDownload(
  java.lang.String title,
  java.lang.String description,
  boolean isMediaScannerScannable,
  java.lang.String mimeType,
  java.lang.String path,
  long length,
  boolean showNotification,
  boolean allowWrite)





*android.app.DownloadManager.enqueue(DownloadManager.Request)*

public long enqueue(android.app.DownloadManager.Request request)

Enqueue a new download. The download will start automatically once the download 
manager is ready to execute it and connectivity is available. 


    request - the parameters specifying this download 

    Returns: an ID for the download, unique across the system. This ID is used to make 
             future calls related to this download. 

*android.app.DownloadManager.getActiveNetworkWarningBytes(Context)*

public static long getActiveNetworkWarningBytes(android.content.Context context)





*android.app.DownloadManager.getDownloadUri(long)*

public |android.net.Uri| getDownloadUri(long id)

Get the DownloadProvider URI for the download with the given ID. 



*android.app.DownloadManager.getMaxBytesOverMobile(Context)*

public static |java.lang.Long| getMaxBytesOverMobile(android.content.Context context)

Returns maximum size, in bytes, of downloads that may go over a mobile 
connection; or null if there's no limit 


    context - the {@link Context} to use for accessing the {@link ContentResolver} 

    Returns: maximum size, in bytes, of downloads that may go over a mobile connection; or 
             null if there's no limit 

*android.app.DownloadManager.getMimeTypeForDownloadedFile(long)*

public |java.lang.String| getMimeTypeForDownloadedFile(long id)

Returns (|android.net.Uri|) for the given downloaded file id, if the file is 
downloaded successfully. otherwise, null is returned. 

If the specified downloaded file is in external storage (for example, /sdcard 
dir), then it is assumed to be safe for anyone to read and the returned 
(|android.net.Uri|) corresponds to the filepath on sdcard. 


    id - the id of the downloaded file. 

    Returns: the {@link Uri} for the given downloaded file id, if download was successful. 
             null otherwise. 

*android.app.DownloadManager.getRecommendedMaxBytesOverMobile(Context)*

public static |java.lang.Long| getRecommendedMaxBytesOverMobile(android.content.Context context)

Returns recommended maximum size, in bytes, of downloads that may go over a 
mobile connection; or null if there's no recommended limit. The user will have 
the option to bypass this limit. 


    context - the {@link Context} to use for accessing the {@link ContentResolver} 

    Returns: recommended maximum size, in bytes, of downloads that may go over a mobile 
             connection; or null if there's no recommended limit. 

*android.app.DownloadManager.getUriForDownloadedFile(long)*

public |android.net.Uri| getUriForDownloadedFile(long id)

Returns (|android.net.Uri|) for the given downloaded file id, if the file is 
downloaded successfully. otherwise, null is returned. 

If the specified downloaded file is in external storage (for example, /sdcard 
dir), then it is assumed to be safe for anyone to read and the returned 
(|android.net.Uri|) corresponds to the filepath on sdcard. 


    id - the id of the downloaded file. 

    Returns: the {@link Uri} for the given downloaded file id, if download was successful. 
             null otherwise. 

*android.app.DownloadManager.isActiveNetworkExpensive(Context)*

public static boolean isActiveNetworkExpensive(android.content.Context context)





*android.app.DownloadManager.markRowDeleted(long...)*

public int markRowDeleted(long[] ids)

Marks the specified download as 'to be deleted'. This is done when a completed 
download is to be removed but the row was stored without enough info to delete 
the corresponding metadata from Mediaprovider database. Actual cleanup of this 
row is done in DownloadService. 


    ids - the IDs of the downloads to be marked 'deleted' 

    Returns: the number of downloads actually updated 

*android.app.DownloadManager.openDownloadedFile(long)*

public |android.os.ParcelFileDescriptor| openDownloadedFile(long id)
  throws |java.io.FileNotFoundException|
         
Open a downloaded file for reading. The download must have completed. 


    id - the ID of the download 

    Returns: a read-only {@link ParcelFileDescriptor} 

*android.app.DownloadManager.query(DownloadManager.Query)*

public |android.database.Cursor| query(android.app.DownloadManager.Query query)

Query the download manager about downloads that have been requested. 


    query - parameters specifying filters for this query 

    Returns: a Cursor over the result set of downloads, with columns consisting of all the 
             COLUMN_* constants. 

*android.app.DownloadManager.remove(long...)*

public int remove(long[] ids)

Cancel downloads and remove them from the download manager. Each download will 
be stopped if it was running, and it will no longer be accessible through the 
download manager. If there is a downloaded file, partial or complete, it is 
deleted. 


    ids - the IDs of the downloads to remove 

    Returns: the number of downloads actually removed 

*android.app.DownloadManager.restartDownload(long...)*

public void restartDownload(long[] ids)

Restart the given downloads, which must have already completed (successfully or 
not). This method will only work when called from within the download manager's 
process. 


    ids - the IDs of the downloads 

*android.app.DownloadManager.setAccessAllDownloads(boolean)*

public void setAccessAllDownloads(boolean accessAllDownloads)

Makes this object access the download provider through /all_downloads URIs 
rather than /my_downloads URIs, for clients that have permission to do so. 




