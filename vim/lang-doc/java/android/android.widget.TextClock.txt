*android.widget.TextClock* *TextClock* TextClock can display the current date an

public class TextClock
  extends    |android.widget.TextView|

|android.widget.TextClock_Description|
|android.widget.TextClock_Fields|
|android.widget.TextClock_Constructors|
|android.widget.TextClock_Methods|

================================================================================

*android.widget.TextClock_Fields*
|java.lang.CharSequence_android.widget.TextClock.DEFAULT_FORMAT_12_HOUR|
|java.lang.CharSequence_android.widget.TextClock.DEFAULT_FORMAT_24_HOUR|

*android.widget.TextClock_Constructors*
|android.widget.TextClock(Context)|Creates a new clock using the default patter
|android.widget.TextClock(Context,AttributeSet)|Creates a new clock inflated fr
|android.widget.TextClock(Context,AttributeSet,int)|Creates a new clock inflate

*android.widget.TextClock_Methods*
|android.widget.TextClock.getFormat()|Returns the current format string.
|android.widget.TextClock.getFormat12Hour()|Returns the formatting pattern used
|android.widget.TextClock.getFormat24Hour()|Returns the formatting pattern used
|android.widget.TextClock.getTimeZone()|Indicates which time zone is currently 
|android.widget.TextClock.is24HourModeEnabled()|Indicates whether the system is
|android.widget.TextClock.onAttachedToWindow()|
|android.widget.TextClock.onDetachedFromWindow()|
|android.widget.TextClock.setFormat12Hour(CharSequence)|Specifies the formattin
|android.widget.TextClock.setFormat24Hour(CharSequence)|Specifies the formattin
|android.widget.TextClock.setTimeZone(String)|Sets the specified time zone to u

*android.widget.TextClock_Description*

TextClock can display the current date and/or time as a formatted string. 

This view honors the 24-hour format system setting. As such, it is possible and 
recommended to provide two different formatting patterns: one to display the 
date/time in 24-hour mode and one to display the date/time in 12-hour mode. 
Most callers will want to use the defaults, though, which will be appropriate 
for the user's locale. 

It is possible to determine whether the system is currently in 24-hour mode by 
calling (|android.widget.TextClock|) . 

The rules used by this widget to decide how to format the date and time are the 
following: 

In 24-hour mode: 

Use the value returned by (|android.widget.TextClock|) when non-null Otherwise, 
use the value returned by (|android.widget.TextClock|) when non-null Otherwise, 
use a default value appropriate for the user's locale, such ash:mm a 

In 12-hour mode: 

Use the value returned by (|android.widget.TextClock|) when non-null Otherwise, 
use the value returned by (|android.widget.TextClock|) when non-null Otherwise, 
use a default value appropriate for the user's locale, such asHH:mm 



The (|java.lang.CharSequence|) instances used as formatting patterns when 
calling either (|android.widget.TextClock|) or (|android.widget.TextClock|) can 
contain styling information. To do so, use a (|android.text.Spanned|) object. 
Note that if you customize these strings, it is your responsibility to supply 
strings appropriate for formatting dates and/or times in the user's locale. 



*java.lang.CharSequence_android.widget.TextClock.DEFAULT_FORMAT_12_HOUR*

The default formatting pattern in 12-hour mode. This pattern is used if 
(|android.widget.TextClock|) is called with a null pattern or if no pattern was 
specified when creating an instance of this class. 

This default pattern shows only the time, hours and minutes, and an am/pm 
indicator. 


*java.lang.CharSequence_android.widget.TextClock.DEFAULT_FORMAT_24_HOUR*

The default formatting pattern in 24-hour mode. This pattern is used if 
(|android.widget.TextClock|) is called with a null pattern or if no pattern was 
specified when creating an instance of this class. 

This default pattern shows only the time, hours and minutes. 



*android.widget.TextClock(Context)*

public TextClock(android.content.Context context)

Creates a new clock using the default patterns for the current locale. 

    context - The Context the view is running in, through which it can access the current 
       theme, resources, etc. 

*android.widget.TextClock(Context,AttributeSet)*

public TextClock(
  android.content.Context context,
  android.util.AttributeSet attrs)

Creates a new clock inflated from XML. This object's properties are intialized 
from the attributes specified in XML. 

This constructor uses a default style of 0, so the only attribute values 
applied are those in the Context's Theme and the given AttributeSet. 

    context - The Context the view is running in, through which it can access the current 
       theme, resources, etc. 
    attrs - The attributes of the XML tag that is inflating the view 

*android.widget.TextClock(Context,AttributeSet,int)*

public TextClock(
  android.content.Context context,
  android.util.AttributeSet attrs,
  int defStyle)

Creates a new clock inflated from XML. This object's properties are intialized 
from the attributes specified in XML. 

    context - The Context the view is running in, through which it can access the current 
       theme, resources, etc. 
    attrs - The attributes of the XML tag that is inflating the view 
    defStyle - The default style to apply to this view. If 0, no style will be applied (beyond 
       what is included in the theme). This may either be an attribute 
       resource, whose value will be retrieved from the current theme, or an 
       explicit style resource 

*android.widget.TextClock.getFormat()*

public |java.lang.CharSequence| getFormat()

Returns the current format string. Always valid after constructor has finished, 
and will never benull. 



*android.widget.TextClock.getFormat12Hour()*

public |java.lang.CharSequence| getFormat12Hour()

Returns the formatting pattern used to display the date and/or time in 12-hour 
mode. The formatting pattern syntax is described in 
(|android.text.format.DateFormat|) . 



    Returns: A {@link CharSequence} or null. 

*android.widget.TextClock.getFormat24Hour()*

public |java.lang.CharSequence| getFormat24Hour()

Returns the formatting pattern used to display the date and/or time in 24-hour 
mode. The formatting pattern syntax is described in 
(|android.text.format.DateFormat|) . 



    Returns: A {@link CharSequence} or null. 

*android.widget.TextClock.getTimeZone()*

public |java.lang.String| getTimeZone()

Indicates which time zone is currently used by this view. 



    Returns: The ID of the current time zone or null if the default time zone, as set by the 
             user, must be used 

*android.widget.TextClock.is24HourModeEnabled()*

public boolean is24HourModeEnabled()

Indicates whether the system is currently using the 24-hour mode. 

When the system is in 24-hour mode, this view will use the pattern returned by 
(|android.widget.TextClock|) . In 12-hour mode, the pattern returned by 
(|android.widget.TextClock|) is used instead. 

If either one of the formats is null, the other format is used. If both formats 
are null, the default formats for the current locale are used. 



    Returns: true if time should be displayed in 24-hour format, false if it should be 
             displayed in 12-hour format. 

*android.widget.TextClock.onAttachedToWindow()*

protected void onAttachedToWindow()





*android.widget.TextClock.onDetachedFromWindow()*

protected void onDetachedFromWindow()





*android.widget.TextClock.setFormat12Hour(CharSequence)*

public void setFormat12Hour(java.lang.CharSequence format)

Specifies the formatting pattern used to display the date and/or time in 
12-hour mode. The formatting pattern syntax is described in 
(|android.text.format.DateFormat|) . 

If this pattern is set to null, (|android.widget.TextClock|) will be used even 
in 12-hour mode. If both 24-hour and 12-hour formatting patterns are set to 
null, the default pattern for the current locale will be used instead. 

Note: if styling is not needed, it is highly recommended you supply a format 
string generated by (|android.text.format.DateFormat|) . This method takes care 
of generating a format string adapted to the desired locale. 


    format - A date/time formatting pattern as described in {@link DateFormat} 

*android.widget.TextClock.setFormat24Hour(CharSequence)*

public void setFormat24Hour(java.lang.CharSequence format)

Specifies the formatting pattern used to display the date and/or time in 
24-hour mode. The formatting pattern syntax is described in 
(|android.text.format.DateFormat|) . 

If this pattern is set to null, (|android.widget.TextClock|) will be used even 
in 12-hour mode. If both 24-hour and 12-hour formatting patterns are set to 
null, the default pattern for the current locale will be used instead. 

Note: if styling is not needed, it is highly recommended you supply a format 
string generated by (|android.text.format.DateFormat|) . This method takes care 
of generating a format string adapted to the desired locale. 


    format - A date/time formatting pattern as described in {@link DateFormat} 

*android.widget.TextClock.setTimeZone(String)*

public void setTimeZone(java.lang.String timeZone)

Sets the specified time zone to use in this clock. When the time zone is set 
through this method, system time zone changes (when the user sets the time zone 
in settings for instance) will be ignored. 


    timeZone - The desired time zone's ID as specified in {@link TimeZone} or null to user the 
       time zone specified by the user (system time zone) 


