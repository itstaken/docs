*android.widget.TextView* *TextView* Displays text to the user and optionally al

public class TextView
  extends    |android.view.View|
  implements |android.view.ViewTreeObserver.OnPreDrawListener|

|android.widget.TextView_Description|
|android.widget.TextView_Fields|
|android.widget.TextView_Constructors|
|android.widget.TextView_Methods|

================================================================================

*android.widget.TextView_Constructors*
|android.widget.TextView(Context)|
|android.widget.TextView(Context,AttributeSet)|
|android.widget.TextView(Context,AttributeSet,int)|

*android.widget.TextView_Methods*
|android.widget.TextView.addTextChangedListener(TextWatcher)|Adds a TextWatcher
|android.widget.TextView.append(CharSequence)|Convenience method: Append the sp
|android.widget.TextView.append(CharSequence,int,int)|Convenience method: Appen
|android.widget.TextView.beginBatchEdit()|
|android.widget.TextView.bringPointIntoView(int)|Move the point, specified by t
|android.widget.TextView.cancelLongPress()|
|android.widget.TextView.clearComposingText()|UseBaseInputConnection#removeComp
|android.widget.TextView.computeHorizontalScrollRange()|
|android.widget.TextView.computeScroll()|
|android.widget.TextView.computeVerticalScrollExtent()|
|android.widget.TextView.computeVerticalScrollRange()|
|android.widget.TextView.debug(int)|
|android.widget.TextView.deleteText_internal(int,int)|Deletes the range of text
|android.widget.TextView.didTouchFocusSelect()|Returns true, only while process
|android.widget.TextView.dispatchFinishTemporaryDetach()|
|android.widget.TextView.drawableStateChanged()|
|android.widget.TextView.endBatchEdit()|
|android.widget.TextView.extractText(ExtractedTextRequest,ExtractedText)|If thi
|android.widget.TextView.findViewsWithText(ArrayList<View>,CharSequence,int)|
|android.widget.TextView.getAccessibilitySelectionEnd()|
|android.widget.TextView.getAccessibilitySelectionStart()|
|android.widget.TextView.getAutoLinkMask()|Gets the autolink mask of the text.
|android.widget.TextView.getBaseline()|
|android.widget.TextView.getBottomPaddingOffset()|
|android.widget.TextView.getCompoundDrawablePadding()|Returns the padding betwe
|android.widget.TextView.getCompoundDrawables()|Returns drawables for the left,
|android.widget.TextView.getCompoundDrawablesRelative()|Returns drawables for t
|android.widget.TextView.getCompoundPaddingBottom()|Returns the bottom padding 
|android.widget.TextView.getCompoundPaddingEnd()|Returns the end padding of the
|android.widget.TextView.getCompoundPaddingLeft()|Returns the left padding of t
|android.widget.TextView.getCompoundPaddingRight()|Returns the right padding of
|android.widget.TextView.getCompoundPaddingStart()|Returns the start padding of
|android.widget.TextView.getCompoundPaddingTop()|Returns the top padding of the
|android.widget.TextView.getCurrentHintTextColor()|Return the current color sel
|android.widget.TextView.getCurrentTextColor()|Return the current color selecte
|android.widget.TextView.getCustomSelectionActionModeCallback()|Retrieves the v
|android.widget.TextView.getDefaultEditable()|Subclasses override this to speci
|android.widget.TextView.getDefaultMovementMethod()|Subclasses override this to
|android.widget.TextView.getEditableText()|Return the text the TextView is disp
|android.widget.TextView.getEllipsize()|Returns where, if anywhere, words that 
|android.widget.TextView.getError()|Returns the error message that was set to b
|android.widget.TextView.getExtendedPaddingBottom()|Returns the extended bottom
|android.widget.TextView.getExtendedPaddingTop()|Returns the extended top paddi
|android.widget.TextView.getFadeHeight(boolean)|
|android.widget.TextView.getFadeTop(boolean)|
|android.widget.TextView.getFilters()|Returns the current list of input filters
|android.widget.TextView.getFocusedRect(Rect)|
|android.widget.TextView.getFreezesText()|Return whether this text view is incl
|android.widget.TextView.getGravity()|Returns the horizontal and vertical align
|android.widget.TextView.getHighlightColor()|
|android.widget.TextView.getHint()|Returns the hint that is displayed when the 
|android.widget.TextView.getHintTextColors()|
|android.widget.TextView.getHorizontallyScrolling()|Returns whether the text is
|android.widget.TextView.getHorizontalOffsetForDrawables()|
|android.widget.TextView.getImeActionId()|Get the IME action ID previous set wi
|android.widget.TextView.getImeActionLabel()|Get the IME action label previous 
|android.widget.TextView.getImeOptions()|Get the type of the IME editor.
|android.widget.TextView.getIncludeFontPadding()|Gets whether the TextView incl
|android.widget.TextView.getInputExtras(boolean)|Retrieve the input extras curr
|android.widget.TextView.getInputType()|Get the type of the editable content.
|android.widget.TextView.getIterableTextForAccessibility()|
|android.widget.TextView.getIteratorForGranularity(int)|
|android.widget.TextView.getKeyListener()|
|android.widget.TextView.getLayout()|
|android.widget.TextView.getLeftFadingEdgeStrength()|
|android.widget.TextView.getLeftPaddingOffset()|
|android.widget.TextView.getLineBounds(int,Rect)|Return the baseline for the sp
|android.widget.TextView.getLineCount()|Return the number of lines of text, or 
|android.widget.TextView.getLineHeight()|
|android.widget.TextView.getLineSpacingExtra()|Gets the line spacing extra spac
|android.widget.TextView.getLineSpacingMultiplier()|Gets the line spacing multi
|android.widget.TextView.getLinksClickable()|Returns whether the movement metho
|android.widget.TextView.getLinkTextColors()|
|android.widget.TextView.getMarqueeRepeatLimit()|Gets the number of times the m
|android.widget.TextView.getMaxEms()|
|android.widget.TextView.getMaxHeight()|
|android.widget.TextView.getMaxLines()|
|android.widget.TextView.getMaxWidth()|
|android.widget.TextView.getMinEms()|
|android.widget.TextView.getMinHeight()|
|android.widget.TextView.getMinLines()|
|android.widget.TextView.getMinWidth()|
|android.widget.TextView.getMovementMethod()|
|android.widget.TextView.getOffsetForPosition(float,float)|Get the character of
|android.widget.TextView.getPaint()|
|android.widget.TextView.getPaintFlags()|
|android.widget.TextView.getPrivateImeOptions()|Get the private type of the con
|android.widget.TextView.getRightFadingEdgeStrength()|
|android.widget.TextView.getRightPaddingOffset()|
|android.widget.TextView.getSelectionEnd()|Convenience forSelection#getSelectio
|android.widget.TextView.getSelectionStart()|Convenience forSelection#getSelect
|android.widget.TextView.getShadowColor()|
|android.widget.TextView.getShadowDx()|
|android.widget.TextView.getShadowDy()|
|android.widget.TextView.getShadowRadius()|Gets the radius of the shadow layer.
|android.widget.TextView.getShowSoftInputOnFocus()|Returns whether the soft inp
|android.widget.TextView.getSpellCheckerLocale()|This is a temporary method.
|android.widget.TextView.getText()|Return the text the TextView is displaying.
|android.widget.TextView.getTextColor(Context,TypedArray,int)|Returns the defau
|android.widget.TextView.getTextColors()|Gets the text colors for the different
|android.widget.TextView.getTextColors(Context,TypedArray)|Returns the TextView
|android.widget.TextView.getTextForAccessibility()|Gets the text reported for a
|android.widget.TextView.getTextLocale()|Get the defaultLocaleof the text in th
|android.widget.TextView.getTextScaleX()|
|android.widget.TextView.getTextServicesLocale()|This is a temporary method.
|android.widget.TextView.getTextSize()|
|android.widget.TextView.getTopPaddingOffset()|
|android.widget.TextView.getTotalPaddingBottom()|Returns the total bottom paddi
|android.widget.TextView.getTotalPaddingEnd()|Returns the total end padding of 
|android.widget.TextView.getTotalPaddingLeft()|Returns the total left padding o
|android.widget.TextView.getTotalPaddingRight()|Returns the total right padding
|android.widget.TextView.getTotalPaddingStart()|Returns the total start padding
|android.widget.TextView.getTotalPaddingTop()|Returns the total top padding of 
|android.widget.TextView.getTransformationMethod()|
|android.widget.TextView.getTypeface()|
|android.widget.TextView.getUndoManager()|Retrieve theandroid.content.UndoManag
|android.widget.TextView.getUrls()|Returns the list of URLSpans attached to the
|android.widget.TextView.getWordIterator()|This method is used by the ArrowKeyM
|android.widget.TextView.hasOverlappingRendering()|
|android.widget.TextView.hasSelection()|Return true iff there is a selection in
|android.widget.TextView.hideErrorIfUnchanged()|
|android.widget.TextView.invalidateDrawable(Drawable)|
|android.widget.TextView.isAccessibilitySelectionExtendable()|
|android.widget.TextView.isCursorVisible()|
|android.widget.TextView.isInputMethodTarget()|Returns whether this text view i
|android.widget.TextView.isPaddingOffsetRequired()|
|android.widget.TextView.isSuggestionsEnabled()|Return whether or not suggestio
|android.widget.TextView.isTextSelectable()|Returns the state of thetextIsSelec
|android.widget.TextView.jumpDrawablesToCurrentState()|
|android.widget.TextView.length()|Returns the length, in characters, of the tex
|android.widget.TextView.makeNewLayout(int,int,BoringLayout.Metrics,BoringLayout.Metrics,int,boolean)|
|android.widget.TextView.moveCursorToVisibleOffset()|Move the cursor, if needed
|android.widget.TextView.onAttachedToWindow()|
|android.widget.TextView.onBeginBatchEdit()|Called by the framework in response
|android.widget.TextView.onCheckIsTextEditor()|
|android.widget.TextView.onCommitCompletion(CompletionInfo)|Called by the frame
|android.widget.TextView.onCommitCorrection(CorrectionInfo)|Called by the frame
|android.widget.TextView.onCreateDrawableState(int)|
|android.widget.TextView.onCreateInputConnection(EditorInfo)|
|android.widget.TextView.onDetachedFromWindow()|
|android.widget.TextView.onDragEvent(DragEvent)|
|android.widget.TextView.onDraw(Canvas)|
|android.widget.TextView.onEditorAction(int)|Called when an attached input meth
|android.widget.TextView.onEndBatchEdit()|Called by the framework in response t
|android.widget.TextView.onFinishTemporaryDetach()|
|android.widget.TextView.onFocusChanged(boolean,int,Rect)|
|android.widget.TextView.onGenericMotionEvent(MotionEvent)|
|android.widget.TextView.onInitializeAccessibilityEvent(AccessibilityEvent)|
|android.widget.TextView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)|
|android.widget.TextView.onKeyDown(int,KeyEvent)|
|android.widget.TextView.onKeyMultiple(int,int,KeyEvent)|
|android.widget.TextView.onKeyPreIme(int,KeyEvent)|
|android.widget.TextView.onKeyShortcut(int,KeyEvent)|
|android.widget.TextView.onKeyUp(int,KeyEvent)|
|android.widget.TextView.onLayout(boolean,int,int,int,int)|
|android.widget.TextView.onMeasure(int,int)|
|android.widget.TextView.onPopulateAccessibilityEvent(AccessibilityEvent)|
|android.widget.TextView.onPreDraw()|
|android.widget.TextView.onPrivateIMECommand(String,Bundle)|Called by the frame
|android.widget.TextView.onResolveDrawables(int)|
|android.widget.TextView.onRestoreInstanceState(Parcelable)|
|android.widget.TextView.onRtlPropertiesChanged(int)|
|android.widget.TextView.onSaveInstanceState()|
|android.widget.TextView.onScreenStateChanged(int)|
|android.widget.TextView.onScrollChanged(int,int,int,int)|
|android.widget.TextView.onSelectionChanged(int,int)|This method is called when
|android.widget.TextView.onStartTemporaryDetach()|
|android.widget.TextView.onTextChanged(CharSequence,int,int,int)|This method is
|android.widget.TextView.onTextContextMenuItem(int)|Called when a context menu 
|android.widget.TextView.onTouchEvent(MotionEvent)|
|android.widget.TextView.onTrackballEvent(MotionEvent)|
|android.widget.TextView.onVisibilityChanged(View,int)|
|android.widget.TextView.onWindowFocusChanged(boolean)|
|android.widget.TextView.performAccessibilityAction(int,Bundle)|
|android.widget.TextView.performLongClick()|
|android.widget.TextView.removeTextChangedListener(TextWatcher)|Removes the spe
|android.widget.TextView.replaceText_internal(int,int,CharSequence)|Replaces th
|android.widget.TextView.resetErrorChangedFlag()|Resets the mErrorWasChanged fl
|android.widget.TextView.resetResolvedDrawables()|
|android.widget.TextView.sendAccessibilityEvent(int)|
|android.widget.TextView.setAccessibilitySelection(int,int)|
|android.widget.TextView.setAllCaps(boolean)|Sets the properties of this field 
|android.widget.TextView.setAutoLinkMask(int)|Sets the autolink mask of the tex
|android.widget.TextView.setCompoundDrawablePadding(int)|Sets the size of the p
|android.widget.TextView.setCompoundDrawables(Drawable,Drawable,Drawable,Drawable)|
|android.widget.TextView.setCompoundDrawablesRelative(Drawable,Drawable,Drawable,Drawable)|
|android.widget.TextView.setCompoundDrawablesRelativeWithIntrinsicBounds(Drawable,Drawable,Drawable,Drawable)|
|android.widget.TextView.setCompoundDrawablesRelativeWithIntrinsicBounds(int,int,int,int)|
|android.widget.TextView.setCompoundDrawablesWithIntrinsicBounds(Drawable,Drawable,Drawable,Drawable)|
|android.widget.TextView.setCompoundDrawablesWithIntrinsicBounds(int,int,int,int)|
|android.widget.TextView.setCursorPosition_internal(int,int)|Moves the cursor t
|android.widget.TextView.setCursorVisible(boolean)|Set whether the cursor is vi
|android.widget.TextView.setCustomSelectionActionModeCallback(ActionMode.Callback)|
|android.widget.TextView.setEditableFactory(Editable.Factory)|Sets the Factory 
|android.widget.TextView.setEllipsize(TextUtils.TruncateAt)|Causes words in the
|android.widget.TextView.setEms(int)|Makes the TextView exactly this many ems w
|android.widget.TextView.setEnabled(boolean)|
|android.widget.TextView.setError(CharSequence)|Sets the right-hand compound dr
|android.widget.TextView.setError(CharSequence,Drawable)|Sets the right-hand co
|android.widget.TextView.setExtractedText(ExtractedText)|Apply to this text vie
|android.widget.TextView.setExtracting(ExtractedTextRequest)|
|android.widget.TextView.setFilters(InputFilter[])|Sets the list of input filte
|android.widget.TextView.setFrame(int,int,int,int)|
|android.widget.TextView.setFreezesText(boolean)|Control whether this text view
|android.widget.TextView.setGravity(int)|Sets the horizontal alignment of the t
|android.widget.TextView.setHeight(int)|Makes the TextView exactly this many pi
|android.widget.TextView.setHighlightColor(int)|Sets the color used to display 
|android.widget.TextView.setHint(CharSequence)|Sets the text to be displayed wh
|android.widget.TextView.setHint(int)|Sets the text to be displayed when the te
|android.widget.TextView.setHintTextColor(ColorStateList)|Sets the color of the
|android.widget.TextView.setHintTextColor(int)|Sets the color of the hint text 
|android.widget.TextView.setHorizontallyScrolling(boolean)|Sets whether the tex
|android.widget.TextView.setImeActionLabel(CharSequence,int)|Change the custom 
|android.widget.TextView.setImeOptions(int)|Change the editor type integer asso
|android.widget.TextView.setIncludeFontPadding(boolean)|Set whether the TextVie
|android.widget.TextView.setInputExtras(int)|Set the extra input data of the te
|android.widget.TextView.setInputType(int)|Set the type of the content with a c
|android.widget.TextView.setKeyListener(KeyListener)|Sets the key listener to b
|android.widget.TextView.setLines(int)|Makes the TextView exactly this many lin
|android.widget.TextView.setLineSpacing(float,float)|Sets line spacing for this
|android.widget.TextView.setLinksClickable(boolean)|Sets whether the movement m
|android.widget.TextView.setLinkTextColor(ColorStateList)|Sets the color of lin
|android.widget.TextView.setLinkTextColor(int)|Sets the color of links in the t
|android.widget.TextView.setMarqueeRepeatLimit(int)|Sets how many times to repe
|android.widget.TextView.setMaxEms(int)|Makes the TextView at most this many em
|android.widget.TextView.setMaxHeight(int)|Makes the TextView at most this many
|android.widget.TextView.setMaxLines(int)|Makes the TextView at most this many 
|android.widget.TextView.setMaxWidth(int)|Makes the TextView at most this many 
|android.widget.TextView.setMinEms(int)|Makes the TextView at least this many e
|android.widget.TextView.setMinHeight(int)|Makes the TextView at least this man
|android.widget.TextView.setMinLines(int)|Makes the TextView at least this many
|android.widget.TextView.setMinWidth(int)|Makes the TextView at least this many
|android.widget.TextView.setMovementMethod(MovementMethod)|Sets the movement me
|android.widget.TextView.setOnEditorActionListener(TextView.OnEditorActionListener)|
|android.widget.TextView.setPadding(int,int,int,int)|
|android.widget.TextView.setPaddingRelative(int,int,int,int)|
|android.widget.TextView.setPaintFlags(int)|Sets flags on the Paint being used 
|android.widget.TextView.setPrivateImeOptions(String)|Set the private content t
|android.widget.TextView.setRawInputType(int)|Directly change the content type 
|android.widget.TextView.setScroller(Scroller)|
|android.widget.TextView.setSelectAllOnFocus(boolean)|Set the TextView so that 
|android.widget.TextView.setSelected(boolean)|
|android.widget.TextView.setShadowLayer(float,float,float,int)|Gives the text a
|android.widget.TextView.setShowSoftInputOnFocus(boolean)|Sets whether the soft
|android.widget.TextView.setSingleLine()|Sets the properties of this field (lin
|android.widget.TextView.setSingleLine(boolean)|If true, sets the properties of
|android.widget.TextView.setSpan_internal(Object,int,int,int)|Sets a span on th
|android.widget.TextView.setSpannableFactory(Spannable.Factory)|Sets the Factor
|android.widget.TextView.setText(char[],int,int)|Sets the TextView to display t
|android.widget.TextView.setText(CharSequence)|Sets the string value of the Tex
|android.widget.TextView.setText(CharSequence,TextView.BufferType)|Sets the tex
|android.widget.TextView.setText(int)|
|android.widget.TextView.setText(int,TextView.BufferType)|
|android.widget.TextView.setTextAppearance(Context,int)|Sets the text color, si
|android.widget.TextView.setTextColor(ColorStateList)|Sets the text color.
|android.widget.TextView.setTextColor(int)|Sets the text color for all the stat
|android.widget.TextView.setTextIsSelectable(boolean)|Sets whether the content 
|android.widget.TextView.setTextKeepState(CharSequence)|Like#setText(CharSequen
|android.widget.TextView.setTextKeepState(CharSequence,TextView.BufferType)|Lik
|android.widget.TextView.setTextLocale(Locale)|Set the defaultLocaleof the text
|android.widget.TextView.setTextScaleX(float)|Sets the extent by which text sho
|android.widget.TextView.setTextSize(float)|Set the default text size to the gi
|android.widget.TextView.setTextSize(int,float)|Set the default text size to a 
|android.widget.TextView.setTransformationMethod(TransformationMethod)|Sets the
|android.widget.TextView.setTypeface(Typeface)|Sets the typeface and style in w
|android.widget.TextView.setTypeface(Typeface,int)|Sets the typeface and style 
|android.widget.TextView.setUndoManager(UndoManager,String)|Associate anandroid
|android.widget.TextView.setWidth(int)|Makes the TextView exactly this many pix
|android.widget.TextView.stopSelectionActionMode()|
|android.widget.TextView.verifyDrawable(Drawable)|
|android.widget.TextView.viewClicked(InputMethodManager)|

*android.widget.TextView_Description*

Displays text to the user and optionally allows them to edit it. A TextView is 
a complete text editor, however the basic class is configured to not allow 
editing; see (|android.widget.EditText|) for a subclass that configures the 
text view for editing. 

To allow users to copy some or all of the TextView's value and paste it 
somewhere else, set the XML attribute 
android:textIsSelectable(|android.R.styleable|) to "true" or call 
setTextIsSelectable(true)(|android.widget.TextView|) . ThetextIsSelectableflag 
allows users to make selection gestures in the TextView, which in turn triggers 
the system's built-in copy/paste controls. 

XML attributes 

See TextView Attributes(|android.R.styleable|) , View 
Attributes(|android.R.styleable|) 



*android.widget.TextView(Context)*

public TextView(android.content.Context context)




*android.widget.TextView(Context,AttributeSet)*

public TextView(
  android.content.Context context,
  android.util.AttributeSet attrs)




*android.widget.TextView(Context,AttributeSet,int)*

public TextView(
  android.content.Context context,
  android.util.AttributeSet attrs,
  int defStyle)




*android.widget.TextView.addTextChangedListener(TextWatcher)*

public void addTextChangedListener(android.text.TextWatcher watcher)

Adds a TextWatcher to the list of those whose methods are called whenever this 
TextView's text changes. 

In 1.0, the (|android.text.TextWatcher|) method was erroneously not called 
after (|android.widget.TextView|) calls. Now, doing (|android.widget.TextView|) 
if there are any text changed listeners forces the buffer type to Editable if 
it would not otherwise be and does call this method. 



*android.widget.TextView.append(CharSequence)*

public final void append(java.lang.CharSequence text)

Convenience method: Append the specified text to the TextView's display buffer, 
upgrading it to BufferType.EDITABLE if it was not already editable. 



*android.widget.TextView.append(CharSequence,int,int)*

public void append(
  java.lang.CharSequence text,
  int start,
  int end)

Convenience method: Append the specified text slice to the TextView's display 
buffer, upgrading it to BufferType.EDITABLE if it was not already editable. 



*android.widget.TextView.beginBatchEdit()*

public void beginBatchEdit()





*android.widget.TextView.bringPointIntoView(int)*

public boolean bringPointIntoView(int offset)

Move the point, specified by the offset, into the view if it is needed. This 
has to be called after layout. Returns true if anything changed. 



*android.widget.TextView.cancelLongPress()*

public void cancelLongPress()





*android.widget.TextView.clearComposingText()*

public void clearComposingText()

Use 
BaseInputConnection.removeComposingSpans()(|android.view.inputmethod.BaseInputConnection|)
to remove any IME composing state from this text view. 



*android.widget.TextView.computeHorizontalScrollRange()*

protected int computeHorizontalScrollRange()





*android.widget.TextView.computeScroll()*

public void computeScroll()





*android.widget.TextView.computeVerticalScrollExtent()*

protected int computeVerticalScrollExtent()





*android.widget.TextView.computeVerticalScrollRange()*

protected int computeVerticalScrollRange()





*android.widget.TextView.debug(int)*

public void debug(int depth)





*android.widget.TextView.deleteText_internal(int,int)*

protected void deleteText_internal(
  int start,
  int end)

Deletes the range of text [start, end[. 



*android.widget.TextView.didTouchFocusSelect()*

public boolean didTouchFocusSelect()

Returns true, only while processing a touch gesture, if the initial touch down 
event caused focus to move to the text view and as a result its selection 
changed. Only valid while processing the touch gesture of interest, in an 
editable text view. 



*android.widget.TextView.dispatchFinishTemporaryDetach()*

public void dispatchFinishTemporaryDetach()





*android.widget.TextView.drawableStateChanged()*

protected void drawableStateChanged()





*android.widget.TextView.endBatchEdit()*

public void endBatchEdit()





*android.widget.TextView.extractText(ExtractedTextRequest,ExtractedText)*

public boolean extractText(
  android.view.inputmethod.ExtractedTextRequest request,
  android.view.inputmethod.ExtractedText outText)

If this TextView contains editable content, extract a portion of it based on 
the information in request in to outText. 



    Returns: Returns true if the text was successfully extracted, else false. 

*android.widget.TextView.findViewsWithText(ArrayList<View>,CharSequence,int)*

public void findViewsWithText(
  java.util.ArrayList<android.view.View> outViews,
  java.lang.CharSequence searched,
  int flags)





*android.widget.TextView.getAccessibilitySelectionEnd()*

public int getAccessibilitySelectionEnd()





*android.widget.TextView.getAccessibilitySelectionStart()*

public int getAccessibilitySelectionStart()





*android.widget.TextView.getAutoLinkMask()*

public final int getAutoLinkMask()

Gets the autolink mask of the text. See 
Linkify.ALL(|android.text.util.Linkify|) and peers for possible values. 



*android.widget.TextView.getBaseline()*

public int getBaseline()





*android.widget.TextView.getBottomPaddingOffset()*

protected int getBottomPaddingOffset()





*android.widget.TextView.getCompoundDrawablePadding()*

public int getCompoundDrawablePadding()

Returns the padding between the compound drawables and the text. 



*android.widget.TextView.getCompoundDrawables()*

public |Drawable|[] getCompoundDrawables()

Returns drawables for the left, top, right, and bottom borders. 



*android.widget.TextView.getCompoundDrawablesRelative()*

public |Drawable|[] getCompoundDrawablesRelative()

Returns drawables for the start, top, end, and bottom borders. 



*android.widget.TextView.getCompoundPaddingBottom()*

public int getCompoundPaddingBottom()

Returns the bottom padding of the view, plus space for the bottom Drawable if 
any. 



*android.widget.TextView.getCompoundPaddingEnd()*

public int getCompoundPaddingEnd()

Returns the end padding of the view, plus space for the end Drawable if any. 



*android.widget.TextView.getCompoundPaddingLeft()*

public int getCompoundPaddingLeft()

Returns the left padding of the view, plus space for the left Drawable if any. 



*android.widget.TextView.getCompoundPaddingRight()*

public int getCompoundPaddingRight()

Returns the right padding of the view, plus space for the right Drawable if 
any. 



*android.widget.TextView.getCompoundPaddingStart()*

public int getCompoundPaddingStart()

Returns the start padding of the view, plus space for the start Drawable if 
any. 



*android.widget.TextView.getCompoundPaddingTop()*

public int getCompoundPaddingTop()

Returns the top padding of the view, plus space for the top Drawable if any. 



*android.widget.TextView.getCurrentHintTextColor()*

public final int getCurrentHintTextColor()

Return the current color selected to paint the hint text. 



    Returns: Returns the current hint text color. 

*android.widget.TextView.getCurrentTextColor()*

public final int getCurrentTextColor()

Return the current color selected for normal text. 



    Returns: Returns the current text color. 

*android.widget.TextView.getCustomSelectionActionModeCallback()*

public |android.view.ActionMode.Callback| getCustomSelectionActionModeCallback()

Retrieves the value set in (|android.widget.TextView|) . Default is null. 



    Returns: The current custom selection callback. 

*android.widget.TextView.getDefaultEditable()*

protected boolean getDefaultEditable()

Subclasses override this to specify that they have a KeyListener by default 
even if not specifically called for in the XML options. 



*android.widget.TextView.getDefaultMovementMethod()*

protected |android.text.method.MovementMethod| getDefaultMovementMethod()

Subclasses override this to specify a default movement method. 



*android.widget.TextView.getEditableText()*

public |android.text.Editable| getEditableText()

Return the text the TextView is displaying as an Editable object. If the text 
is not editable, null is returned. 



*android.widget.TextView.getEllipsize()*

public |android.text.TextUtils.TruncateAt| getEllipsize()

Returns where, if anywhere, words that are longer than the view is wide should 
be ellipsized. 



*android.widget.TextView.getError()*

public |java.lang.CharSequence| getError()

Returns the error message that was set to be displayed with 
(|android.widget.TextView|) , or null if no error was set or if it the error 
was cleared by the widget after user input. 



*android.widget.TextView.getExtendedPaddingBottom()*

public int getExtendedPaddingBottom()

Returns the extended bottom padding of the view, including both the bottom 
Drawable if any and any extra space to keep more than maxLines of text from 
showing. It is only valid to call this after measuring. 



*android.widget.TextView.getExtendedPaddingTop()*

public int getExtendedPaddingTop()

Returns the extended top padding of the view, including both the top Drawable 
if any and any extra space to keep more than maxLines of text from showing. It 
is only valid to call this after measuring. 



*android.widget.TextView.getFadeHeight(boolean)*

protected int getFadeHeight(boolean offsetRequired)





*android.widget.TextView.getFadeTop(boolean)*

protected int getFadeTop(boolean offsetRequired)





*android.widget.TextView.getFilters()*

public |android.text.InputFilter|[] getFilters()

Returns the current list of input filters. 



*android.widget.TextView.getFocusedRect(Rect)*

public void getFocusedRect(Rect r)





*android.widget.TextView.getFreezesText()*

public boolean getFreezesText()

Return whether this text view is including its entire text contents in frozen 
icicles. 



    Returns: Returns true if text is included, false if it isn't. 

*android.widget.TextView.getGravity()*

public int getGravity()

Returns the horizontal and vertical alignment of this TextView. 



*android.widget.TextView.getHighlightColor()*

public int getHighlightColor()





    Returns: the color used to display the selection highlight 

*android.widget.TextView.getHint()*

public |java.lang.CharSequence| getHint()

Returns the hint that is displayed when the text of the TextView is empty. 



*android.widget.TextView.getHintTextColors()*

public final |android.content.res.ColorStateList| getHintTextColors()





    Returns: the color of the hint text, for the different states of this TextView. 

*android.widget.TextView.getHorizontallyScrolling()*

public boolean getHorizontallyScrolling()

Returns whether the text is allowed to be wider than the View is. If false, the 
text will be wrapped to the width of the View. 



*android.widget.TextView.getHorizontalOffsetForDrawables()*

public int getHorizontalOffsetForDrawables()





*android.widget.TextView.getImeActionId()*

public int getImeActionId()

Get the IME action ID previous set with (|android.widget.TextView|) . 



*android.widget.TextView.getImeActionLabel()*

public |java.lang.CharSequence| getImeActionLabel()

Get the IME action label previous set with (|android.widget.TextView|) . 



*android.widget.TextView.getImeOptions()*

public int getImeOptions()

Get the type of the IME editor. 



*android.widget.TextView.getIncludeFontPadding()*

public boolean getIncludeFontPadding()

Gets whether the TextView includes extra top and bottom padding to make room 
for accents that go above the normal ascent and descent. 



*android.widget.TextView.getInputExtras(boolean)*

public |android.os.Bundle| getInputExtras(boolean create)

Retrieve the input extras currently associated with the text view, which can be 
viewed as well as modified. 


    create - If true, the extras will be created if they don't already exist. Otherwise, 
       null will be returned if none have been created. 

*android.widget.TextView.getInputType()*

public int getInputType()

Get the type of the editable content. 



*android.widget.TextView.getIterableTextForAccessibility()*

public |java.lang.CharSequence| getIterableTextForAccessibility()





*android.widget.TextView.getIteratorForGranularity(int)*

public |android.view.AccessibilityIterators.TextSegmentIterator| getIteratorForGranularity(int granularity)





*android.widget.TextView.getKeyListener()*

public final |android.text.method.KeyListener| getKeyListener()





    Returns: the current key listener for this TextView. This will frequently be null for 
             non-EditText TextViews. 

*android.widget.TextView.getLayout()*

public final |android.text.Layout| getLayout()





    Returns: the Layout that is currently being used to display the text. This can be null 
             if the text or width has recently changes. 

*android.widget.TextView.getLeftFadingEdgeStrength()*

protected float getLeftFadingEdgeStrength()





*android.widget.TextView.getLeftPaddingOffset()*

protected int getLeftPaddingOffset()





*android.widget.TextView.getLineBounds(int,Rect)*

public int getLineBounds(
  int line,
  Rect bounds)

Return the baseline for the specified line (0...getLineCount() - 1) If bounds 
is not null, return the top, left, right, bottom extents of the specified line 
in it. If the internal Layout has not been built, return 0 and set bounds to 
(0, 0, 0, 0) 


    line - which line to examine (0..getLineCount() - 1) 
    bounds - Optional. If not null, it returns the extent of the line 

    Returns: the Y-coordinate of the baseline 

*android.widget.TextView.getLineCount()*

public int getLineCount()

Return the number of lines of text, or 0 if the internal Layout has not been 
built. 



*android.widget.TextView.getLineHeight()*

public int getLineHeight()





    Returns: the height of one standard line in pixels. Note that markup within the text can 
             cause individual lines to be taller or shorter than this height, 
             and the layout may contain additional first- or last-line padding. 

*android.widget.TextView.getLineSpacingExtra()*

public float getLineSpacingExtra()

Gets the line spacing extra space 



    Returns: the extra space that is added to the height of each lines of this TextView. 

*android.widget.TextView.getLineSpacingMultiplier()*

public float getLineSpacingMultiplier()

Gets the line spacing multiplier 



    Returns: the value by which each line's height is multiplied to get its actual height. 

*android.widget.TextView.getLinksClickable()*

public final boolean getLinksClickable()

Returns whether the movement method will automatically be set to 
(|android.text.method.LinkMovementMethod|) if (|android.widget.TextView|) has 
been set to nonzero and links are detected in (|android.widget.TextView|) . The 
default is true. 



*android.widget.TextView.getLinkTextColors()*

public final |android.content.res.ColorStateList| getLinkTextColors()





    Returns: the list of colors used to paint the links in the text, for the different 
             states of this TextView 

*android.widget.TextView.getMarqueeRepeatLimit()*

public int getMarqueeRepeatLimit()

Gets the number of times the marquee animation is repeated. Only meaningful if 
the TextView has marquee enabled. 



    Returns: the number of times the marquee animation is repeated. -1 if the animation 
             repeats indefinitely 

*android.widget.TextView.getMaxEms()*

public int getMaxEms()





    Returns: the maximum width of the TextView, expressed in ems or -1 if the maximum width 
             was set in pixels instead (using {@link #setMaxWidth(int)} or 
             {@link #setWidth(int)}). 

*android.widget.TextView.getMaxHeight()*

public int getMaxHeight()





    Returns: the maximum height of this TextView expressed in pixels, or -1 if the maximum 
             height was set in number of lines instead using {@link 
             #setMaxLines(int) or #setLines(int)}. 

*android.widget.TextView.getMaxLines()*

public int getMaxLines()





    Returns: the maximum number of lines displayed in this TextView, or -1 if the maximum 
             height was set in pixels instead using {@link #setMaxHeight(int) 
             or #setHeight(int)}. 

*android.widget.TextView.getMaxWidth()*

public int getMaxWidth()





    Returns: the maximum width of the TextView, in pixels or -1 if the maximum width was set 
             in ems instead (using {@link #setMaxEms(int)} or {@link 
             #setEms(int)}). 

*android.widget.TextView.getMinEms()*

public int getMinEms()





    Returns: the minimum width of the TextView, expressed in ems or -1 if the minimum width 
             was set in pixels instead (using {@link #setMinWidth(int)} or 
             {@link #setWidth(int)}). 

*android.widget.TextView.getMinHeight()*

public int getMinHeight()





    Returns: the minimum height of this TextView expressed in pixels, or -1 if the minimum 
             height was set in number of lines instead using {@link 
             #setMinLines(int) or #setLines(int)}. 

*android.widget.TextView.getMinLines()*

public int getMinLines()





    Returns: the minimum number of lines displayed in this TextView, or -1 if the minimum 
             height was set in pixels instead using {@link #setMinHeight(int) 
             or #setHeight(int)}. 

*android.widget.TextView.getMinWidth()*

public int getMinWidth()





    Returns: the minimum width of the TextView, in pixels or -1 if the minimum width was set 
             in ems instead (using {@link #setMinEms(int)} or {@link 
             #setEms(int)}). 

*android.widget.TextView.getMovementMethod()*

public final |android.text.method.MovementMethod| getMovementMethod()





    Returns: the movement method being used for this TextView. This will frequently be null 
             for non-EditText TextViews. 

*android.widget.TextView.getOffsetForPosition(float,float)*

public int getOffsetForPosition(
  float x,
  float y)

Get the character offset closest to the specified absolute position. A typical 
use case is to pass the result of (|android.view.MotionEvent|) and 
(|android.view.MotionEvent|) to this method. 


    x - The horizontal absolute position of a point on screen 
    y - The vertical absolute position of a point on screen 

    Returns: the character offset for the character whose position is closest to the 
             specified position. Returns -1 if there is no layout. 

*android.widget.TextView.getPaint()*

public |android.text.TextPaint| getPaint()





    Returns: the base paint used for the text. Please use this only to consult the Paint's 
             properties and not to change them. 

*android.widget.TextView.getPaintFlags()*

public int getPaintFlags()





    Returns: the flags on the Paint being used to display the text. 

*android.widget.TextView.getPrivateImeOptions()*

public |java.lang.String| getPrivateImeOptions()

Get the private type of the content. 



*android.widget.TextView.getRightFadingEdgeStrength()*

protected float getRightFadingEdgeStrength()





*android.widget.TextView.getRightPaddingOffset()*

protected int getRightPaddingOffset()





*android.widget.TextView.getSelectionEnd()*

public int getSelectionEnd()

Convenience for (|android.text.Selection|) . 



*android.widget.TextView.getSelectionStart()*

public int getSelectionStart()

Convenience for (|android.text.Selection|) . 



*android.widget.TextView.getShadowColor()*

public int getShadowColor()





    Returns: the color of the shadow layer 

*android.widget.TextView.getShadowDx()*

public float getShadowDx()





    Returns: the horizontal offset of the shadow layer 

*android.widget.TextView.getShadowDy()*

public float getShadowDy()





    Returns: the vertical offset of the shadow layer 

*android.widget.TextView.getShadowRadius()*

public float getShadowRadius()

Gets the radius of the shadow layer. 



    Returns: the radius of the shadow layer. If 0, the shadow layer is not visible 

*android.widget.TextView.getShowSoftInputOnFocus()*

public final boolean getShowSoftInputOnFocus()

Returns whether the soft input method will be made visible when this TextView 
gets focused. The default is true. 



*android.widget.TextView.getSpellCheckerLocale()*

public |java.util.Locale| getSpellCheckerLocale()

This is a temporary method. Future versions may support multi-locale text. 
Caveat: This method may not return the latest spell checker locale, but this 
should be acceptable and it's more important to make this method asynchronous. 



    Returns: The locale that should be used for a spell checker in this TextView, based on 
             the current spell checker settings, the current IME's locale, or 
             the system default locale. 

*android.widget.TextView.getText()*

public |java.lang.CharSequence| getText()

Return the text the TextView is displaying. If setText() was called with an 
argument of BufferType.SPANNABLE or BufferType.EDITABLE, you can cast the 
return value from this method to Spannable or Editable, respectively. 

Note: The content of the return value should not be modified. If you want a 
modifiable one, you should make your own copy first. 



*android.widget.TextView.getTextColor(Context,TypedArray,int)*

public static int getTextColor(
  android.content.Context context,
  android.content.res.TypedArray attrs,
  int def)

Returns the default color from the TextView_textColor attribute from the 
AttributeSet, if set, or the default color from the TextAppearance_textColor 
from the TextView_textAppearance attribute, if TextView_textColor was not set 
directly. 



*android.widget.TextView.getTextColors()*

public final |android.content.res.ColorStateList| getTextColors()

Gets the text colors for the different states (normal, selected, focused) of 
the TextView. 



*android.widget.TextView.getTextColors(Context,TypedArray)*

public static |android.content.res.ColorStateList| getTextColors(
  android.content.Context context,
  android.content.res.TypedArray attrs)

Returns the TextView_textColor attribute from the TypedArray, if set, or the 
TextAppearance_textColor from the TextView_textAppearance attribute, if 
TextView_textColor was not set directly. 



*android.widget.TextView.getTextForAccessibility()*

public |java.lang.CharSequence| getTextForAccessibility()

Gets the text reported for accessibility purposes. 



    Returns: The accessibility text. 

*android.widget.TextView.getTextLocale()*

public |java.util.Locale| getTextLocale()

Get the default (|java.util.Locale|) of the text in this TextView. 



    Returns: the default {@link Locale} of the text in this TextView. 

*android.widget.TextView.getTextScaleX()*

public float getTextScaleX()





    Returns: the extent by which text is currently being stretched horizontally. This will 
             usually be 1. 

*android.widget.TextView.getTextServicesLocale()*

public |java.util.Locale| getTextServicesLocale()

This is a temporary method. Future versions may support multi-locale text. 
Caveat: This method may not return the latest text services locale, but this 
should be acceptable and it's more important to make this method asynchronous. 



    Returns: The locale that should be used for a word iterator in this TextView, based on 
             the current spell checker settings, the current IME's locale, or 
             the system default locale. Please note that a word iterator in 
             this TextView is different from another word iterator used by 
             SpellChecker.java of TextView. This method should be used for the 
             former. 

*android.widget.TextView.getTextSize()*

public float getTextSize()





    Returns: the size (in pixels) of the default text size in this TextView. 

*android.widget.TextView.getTopPaddingOffset()*

protected int getTopPaddingOffset()





*android.widget.TextView.getTotalPaddingBottom()*

public int getTotalPaddingBottom()

Returns the total bottom padding of the view, including the bottom Drawable if 
any, the extra space to keep more than maxLines from showing, and the vertical 
offset for gravity, if any. 



*android.widget.TextView.getTotalPaddingEnd()*

public int getTotalPaddingEnd()

Returns the total end padding of the view, including the end Drawable if any. 



*android.widget.TextView.getTotalPaddingLeft()*

public int getTotalPaddingLeft()

Returns the total left padding of the view, including the left Drawable if any. 



*android.widget.TextView.getTotalPaddingRight()*

public int getTotalPaddingRight()

Returns the total right padding of the view, including the right Drawable if 
any. 



*android.widget.TextView.getTotalPaddingStart()*

public int getTotalPaddingStart()

Returns the total start padding of the view, including the start Drawable if 
any. 



*android.widget.TextView.getTotalPaddingTop()*

public int getTotalPaddingTop()

Returns the total top padding of the view, including the top Drawable if any, 
the extra space to keep more than maxLines from showing, and the vertical 
offset for gravity, if any. 



*android.widget.TextView.getTransformationMethod()*

public final |android.text.method.TransformationMethod| getTransformationMethod()





    Returns: the current transformation method for this TextView. This will frequently be 
             null except for single-line and password fields. 

*android.widget.TextView.getTypeface()*

public Typeface getTypeface()





    Returns: the current typeface and style in which the text is being displayed. 

*android.widget.TextView.getUndoManager()*

public final |android.content.UndoManager| getUndoManager()

Retrieve the (|android.content.UndoManager|) that is currently associated with 
this TextView. By default there is no associated UndoManager, so null is 
returned. One can be associated with the TextView through 
(|android.widget.TextView|) 



*android.widget.TextView.getUrls()*

public |android.text.style.URLSpan|[] getUrls()

Returns the list of URLSpans attached to the text (by 
(|android.text.util.Linkify|) or otherwise) if any. You can call 
(|android.text.style.URLSpan|) on them to find where they link to or use 
(|android.text.Spanned|) and (|android.text.Spanned|) to find the region of the 
text they are attached to. 



*android.widget.TextView.getWordIterator()*

public |android.text.method.WordIterator| getWordIterator()

This method is used by the ArrowKeyMovementMethod to jump from one word to the 
other. Made available to achieve a consistent behavior. 



*android.widget.TextView.hasOverlappingRendering()*

public boolean hasOverlappingRendering()





*android.widget.TextView.hasSelection()*

public boolean hasSelection()

Return true iff there is a selection inside this text view. 



*android.widget.TextView.hideErrorIfUnchanged()*

public void hideErrorIfUnchanged()





*android.widget.TextView.invalidateDrawable(Drawable)*

public void invalidateDrawable(Drawable drawable)





*android.widget.TextView.isAccessibilitySelectionExtendable()*

public boolean isAccessibilitySelectionExtendable()





*android.widget.TextView.isCursorVisible()*

public boolean isCursorVisible()





    Returns: whether or not the cursor is visible (assuming this TextView is editable) 

*android.widget.TextView.isInputMethodTarget()*

public boolean isInputMethodTarget()

Returns whether this text view is a current input method target. The default 
implementation just checks with (|android.view.inputmethod.InputMethodManager|) 
. 



*android.widget.TextView.isPaddingOffsetRequired()*

protected boolean isPaddingOffsetRequired()





*android.widget.TextView.isSuggestionsEnabled()*

public boolean isSuggestionsEnabled()

Return whether or not suggestions are enabled on this TextView. The suggestions 
are generated by the IME or by the spell checker as the user types. This is 
done by adding (|android.text.style.SuggestionSpan|) s to the text. 

When suggestions are enabled (default), this list of suggestions will be 
displayed when the user asks for them on these parts of the text. This value 
depends on the inputType of this TextView. 

The class of the input type must be (|android.text.InputType|) . 

In addition, the type variation must be one of (|android.text.InputType|) , 
(|android.text.InputType|) , (|android.text.InputType|) , 
(|android.text.InputType|) or (|android.text.InputType|) . 

And finally, the (|android.text.InputType|) flag must not be set. 



    Returns: true if the suggestions popup window is enabled, based on the inputType. 

*android.widget.TextView.isTextSelectable()*

public boolean isTextSelectable()

Returns the state of thetextIsSelectableflag (See 
setTextIsSelectable()(|android.widget.TextView|) ). Although you have to set 
this flag to allow users to select and copy text in a non-editable TextView, 
the content of an (|android.widget.EditText|) can always be selected, 
independently of the value of this flag. 



    Returns: True if the text displayed in this TextView can be selected by the user. 

*android.widget.TextView.jumpDrawablesToCurrentState()*

public void jumpDrawablesToCurrentState()





*android.widget.TextView.length()*

public int length()

Returns the length, in characters, of the text managed by this TextView 



*android.widget.TextView.makeNewLayout(int,int,BoringLayout.Metrics,BoringLayout.Metrics,int,boolean)*

protected void makeNewLayout(
  int wantWidth,
  int hintWidth,
  android.text.BoringLayout.Metrics boring,
  android.text.BoringLayout.Metrics hintBoring,
  int ellipsisWidth,
  boolean bringIntoView)

The width passed in is now the desired layout width, not the full view width 
with padding. 



*android.widget.TextView.moveCursorToVisibleOffset()*

public boolean moveCursorToVisibleOffset()

Move the cursor, if needed, so that it is at an offset that is visible to the 
user. This will not move the cursor if it represents more than one character (a 
selection range). This will only work if the TextView contains spannable text; 
otherwise it will do nothing. 



    Returns: True if the cursor was actually moved, false otherwise. 

*android.widget.TextView.onAttachedToWindow()*

protected void onAttachedToWindow()





*android.widget.TextView.onBeginBatchEdit()*

public void onBeginBatchEdit()

Called by the framework in response to a request to begin a batch of edit 
operations through a call to link (|android.widget.TextView|) . 



*android.widget.TextView.onCheckIsTextEditor()*

public boolean onCheckIsTextEditor()





*android.widget.TextView.onCommitCompletion(CompletionInfo)*

public void onCommitCompletion(android.view.inputmethod.CompletionInfo text)

Called by the framework in response to a text completion from the current input 
method, provided by it calling 
InputConnection.commitCompletion()(|android.view.inputmethod.InputConnection|) 
. The default implementation does nothing; text views that are supporting 
auto-completion should override this to do their desired behavior. 


    text - The auto complete text the user has selected. 

*android.widget.TextView.onCommitCorrection(CorrectionInfo)*

public void onCommitCorrection(android.view.inputmethod.CorrectionInfo info)

Called by the framework in response to a text auto-correction (such as fixing a 
typo using a a dictionnary) from the current input method, provided by it 
calling (|android.view.inputmethod.InputConnection|) 
InputConnection.commitCorrection()}. The default implementation flashes the 
background of the corrected word to provide feedback to the user. 


    info - The auto correct info about the text that was corrected. 

*android.widget.TextView.onCreateDrawableState(int)*

protected int[] onCreateDrawableState(int extraSpace)





*android.widget.TextView.onCreateInputConnection(EditorInfo)*

public |android.view.inputmethod.InputConnection| onCreateInputConnection(android.view.inputmethod.EditorInfo outAttrs)





*android.widget.TextView.onDetachedFromWindow()*

protected void onDetachedFromWindow()





*android.widget.TextView.onDragEvent(DragEvent)*

public boolean onDragEvent(android.view.DragEvent event)





*android.widget.TextView.onDraw(Canvas)*

protected void onDraw(Canvas canvas)





*android.widget.TextView.onEditorAction(int)*

public void onEditorAction(int actionCode)

Called when an attached input method calls 
InputConnection.performEditorAction()(|android.view.inputmethod.InputConnection|)
for this text view. The default implementation will call your action listener 
supplied to (|android.widget.TextView|) , or perform a standard operation for 
EditorInfo.IME_ACTION_NEXT(|android.view.inputmethod.EditorInfo|) , 
EditorInfo.IME_ACTION_PREVIOUS(|android.view.inputmethod.EditorInfo|) , or 
EditorInfo.IME_ACTION_DONE(|android.view.inputmethod.EditorInfo|) . 

For backwards compatibility, if no IME options have been set and the text view 
would not normally advance focus on enter, then the NEXT and DONE actions 
received here will be turned into an enter key down/up pair to go through the 
normal key handling. 


    actionCode - The code of the action being performed. 

*android.widget.TextView.onEndBatchEdit()*

public void onEndBatchEdit()

Called by the framework in response to a request to end a batch of edit 
operations through a call to link (|android.widget.TextView|) . 



*android.widget.TextView.onFinishTemporaryDetach()*

public void onFinishTemporaryDetach()





*android.widget.TextView.onFocusChanged(boolean,int,Rect)*

protected void onFocusChanged(
  boolean focused,
  int direction,
  Rect previouslyFocusedRect)





*android.widget.TextView.onGenericMotionEvent(MotionEvent)*

public boolean onGenericMotionEvent(android.view.MotionEvent event)





*android.widget.TextView.onInitializeAccessibilityEvent(AccessibilityEvent)*

public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent event)





*android.widget.TextView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)*

public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo info)





*android.widget.TextView.onKeyDown(int,KeyEvent)*

public boolean onKeyDown(
  int keyCode,
  android.view.KeyEvent event)





*android.widget.TextView.onKeyMultiple(int,int,KeyEvent)*

public boolean onKeyMultiple(
  int keyCode,
  int repeatCount,
  android.view.KeyEvent event)





*android.widget.TextView.onKeyPreIme(int,KeyEvent)*

public boolean onKeyPreIme(
  int keyCode,
  android.view.KeyEvent event)





*android.widget.TextView.onKeyShortcut(int,KeyEvent)*

public boolean onKeyShortcut(
  int keyCode,
  android.view.KeyEvent event)





*android.widget.TextView.onKeyUp(int,KeyEvent)*

public boolean onKeyUp(
  int keyCode,
  android.view.KeyEvent event)





*android.widget.TextView.onLayout(boolean,int,int,int,int)*

protected void onLayout(
  boolean changed,
  int left,
  int top,
  int right,
  int bottom)





*android.widget.TextView.onMeasure(int,int)*

protected void onMeasure(
  int widthMeasureSpec,
  int heightMeasureSpec)





*android.widget.TextView.onPopulateAccessibilityEvent(AccessibilityEvent)*

public void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent event)





*android.widget.TextView.onPreDraw()*

public boolean onPreDraw()





*android.widget.TextView.onPrivateIMECommand(String,Bundle)*

public boolean onPrivateIMECommand(
  java.lang.String action,
  android.os.Bundle data)

Called by the framework in response to a private command from the current 
method, provided by it calling 
InputConnection.performPrivateCommand()(|android.view.inputmethod.InputConnection|)
. 


    action - The action name of the command. 
    data - Any additional data for the command. This may be null. 

    Returns: Return true if you handled the command, else false. 

*android.widget.TextView.onResolveDrawables(int)*

public void onResolveDrawables(int layoutDirection)





*android.widget.TextView.onRestoreInstanceState(Parcelable)*

public void onRestoreInstanceState(android.os.Parcelable state)





*android.widget.TextView.onRtlPropertiesChanged(int)*

public void onRtlPropertiesChanged(int layoutDirection)





*android.widget.TextView.onSaveInstanceState()*

public |android.os.Parcelable| onSaveInstanceState()





*android.widget.TextView.onScreenStateChanged(int)*

public void onScreenStateChanged(int screenState)





*android.widget.TextView.onScrollChanged(int,int,int,int)*

protected void onScrollChanged(
  int horiz,
  int vert,
  int oldHoriz,
  int oldVert)





*android.widget.TextView.onSelectionChanged(int,int)*

protected void onSelectionChanged(
  int selStart,
  int selEnd)

This method is called when the selection has changed, in case any subclasses 
would like to know. 


    selStart - The new selection start location. 
    selEnd - The new selection end location. 

*android.widget.TextView.onStartTemporaryDetach()*

public void onStartTemporaryDetach()





*android.widget.TextView.onTextChanged(CharSequence,int,int,int)*

protected void onTextChanged(
  java.lang.CharSequence text,
  int start,
  int lengthBefore,
  int lengthAfter)

This method is called when the text is changed, in case any subclasses would 
like to know. 

Within text, the lengthAfter characters beginning at start have just replaced 
old text that had length lengthBefore. It is an error to attempt to make 
changes to text from this callback. 


    text - The text the TextView is displaying 
    start - The offset of the start of the range of the text that was modified 
    lengthBefore - The length of the former text that has been replaced 
    lengthAfter - The length of the replacement modified text 

*android.widget.TextView.onTextContextMenuItem(int)*

public boolean onTextContextMenuItem(int id)

Called when a context menu option for the text view is selected. Currently this 
will be one of (|android.R.id|) , (|android.R.id|) , (|android.R.id|) or 
(|android.R.id|) . 



    Returns: true if the context menu item action was performed. 

*android.widget.TextView.onTouchEvent(MotionEvent)*

public boolean onTouchEvent(android.view.MotionEvent event)





*android.widget.TextView.onTrackballEvent(MotionEvent)*

public boolean onTrackballEvent(android.view.MotionEvent event)





*android.widget.TextView.onVisibilityChanged(View,int)*

protected void onVisibilityChanged(
  android.view.View changedView,
  int visibility)





*android.widget.TextView.onWindowFocusChanged(boolean)*

public void onWindowFocusChanged(boolean hasWindowFocus)





*android.widget.TextView.performAccessibilityAction(int,Bundle)*

public boolean performAccessibilityAction(
  int action,
  android.os.Bundle arguments)





*android.widget.TextView.performLongClick()*

public boolean performLongClick()





*android.widget.TextView.removeTextChangedListener(TextWatcher)*

public void removeTextChangedListener(android.text.TextWatcher watcher)

Removes the specified TextWatcher from the list of those whose methods are 
called whenever this TextView's text changes. 



*android.widget.TextView.replaceText_internal(int,int,CharSequence)*

protected void replaceText_internal(
  int start,
  int end,
  java.lang.CharSequence text)

Replaces the range of text [start, end[ by replacement text 



*android.widget.TextView.resetErrorChangedFlag()*

public void resetErrorChangedFlag()

Resets the mErrorWasChanged flag, so that future calls to 
(|android.widget.TextView|) can be recorded. 



*android.widget.TextView.resetResolvedDrawables()*

protected void resetResolvedDrawables()





*android.widget.TextView.sendAccessibilityEvent(int)*

public void sendAccessibilityEvent(int eventType)





*android.widget.TextView.setAccessibilitySelection(int,int)*

public void setAccessibilitySelection(
  int start,
  int end)





*android.widget.TextView.setAllCaps(boolean)*

public void setAllCaps(boolean allCaps)

Sets the properties of this field to transform input to ALL CAPS display. This 
may use a "small caps" formatting if available. This setting will be ignored if 
this field is editable or selectable. 

This call replaces the current transformation method. Disabling this will not 
necessarily restore the previous behavior from before this was enabled. 



*android.widget.TextView.setAutoLinkMask(int)*

public final void setAutoLinkMask(int mask)

Sets the autolink mask of the text. See 
Linkify.ALL(|android.text.util.Linkify|) and peers for possible values. 



*android.widget.TextView.setCompoundDrawablePadding(int)*

public void setCompoundDrawablePadding(int pad)

Sets the size of the padding between the compound drawables and the text. 



*android.widget.TextView.setCompoundDrawables(Drawable,Drawable,Drawable,Drawable)*

public void setCompoundDrawables(
  Drawable left,
  Drawable top,
  Drawable right,
  Drawable bottom)

Sets the Drawables (if any) to appear to the left of, above, to the right of, 
and below the text. Use null if you do not want a Drawable there. The Drawables 
must already have had (|Drawable|) called. 



*android.widget.TextView.setCompoundDrawablesRelative(Drawable,Drawable,Drawable,Drawable)*

public void setCompoundDrawablesRelative(
  Drawable start,
  Drawable top,
  Drawable end,
  Drawable bottom)

Sets the Drawables (if any) to appear to the start of, above, to the end of, 
and below the text. Use null if you do not want a Drawable there. The Drawables 
must already have had (|Drawable|) called. 



*android.widget.TextView.setCompoundDrawablesRelativeWithIntrinsicBounds(Drawable,Drawable,Drawable,Drawable)*

public void setCompoundDrawablesRelativeWithIntrinsicBounds(
  Drawable start,
  Drawable top,
  Drawable end,
  Drawable bottom)

Sets the Drawables (if any) to appear to the start of, above, to the end of, 
and below the text. Use null if you do not want a Drawable there. The 
Drawables' bounds will be set to their intrinsic bounds. 



*android.widget.TextView.setCompoundDrawablesRelativeWithIntrinsicBounds(int,int,int,int)*

public void setCompoundDrawablesRelativeWithIntrinsicBounds(
  int start,
  int top,
  int end,
  int bottom)

Sets the Drawables (if any) to appear to the start of, above, to the end of, 
and below the text. Use 0 if you do not want a Drawable there. The Drawables' 
bounds will be set to their intrinsic bounds. 


    start - Resource identifier of the start Drawable. 
    top - Resource identifier of the top Drawable. 
    end - Resource identifier of the end Drawable. 
    bottom - Resource identifier of the bottom Drawable. 

*android.widget.TextView.setCompoundDrawablesWithIntrinsicBounds(Drawable,Drawable,Drawable,Drawable)*

public void setCompoundDrawablesWithIntrinsicBounds(
  Drawable left,
  Drawable top,
  Drawable right,
  Drawable bottom)

Sets the Drawables (if any) to appear to the left of, above, to the right of, 
and below the text. Use null if you do not want a Drawable there. The 
Drawables' bounds will be set to their intrinsic bounds. 



*android.widget.TextView.setCompoundDrawablesWithIntrinsicBounds(int,int,int,int)*

public void setCompoundDrawablesWithIntrinsicBounds(
  int left,
  int top,
  int right,
  int bottom)

Sets the Drawables (if any) to appear to the left of, above, to the right of, 
and below the text. Use 0 if you do not want a Drawable there. The Drawables' 
bounds will be set to their intrinsic bounds. 


    left - Resource identifier of the left Drawable. 
    top - Resource identifier of the top Drawable. 
    right - Resource identifier of the right Drawable. 
    bottom - Resource identifier of the bottom Drawable. 

*android.widget.TextView.setCursorPosition_internal(int,int)*

protected void setCursorPosition_internal(
  int start,
  int end)

Moves the cursor to the specified offset position in text 



*android.widget.TextView.setCursorVisible(boolean)*

public void setCursorVisible(boolean visible)

Set whether the cursor is visible. The default is true. Note that this property 
only makes sense for editable TextView. 



*android.widget.TextView.setCustomSelectionActionModeCallback(ActionMode.Callback)*

public void setCustomSelectionActionModeCallback(android.view.ActionMode.Callback actionModeCallback)

If provided, this ActionMode.Callback will be used to create the ActionMode 
when text selection is initiated in this View. 

The standard implementation populates the menu with a subset of Select All, 
Cut, Copy and Paste actions, depending on what this View supports. 

A custom implementation can add new entries in the default menu in its 
(|android.view.ActionMode.Callback|) method. The default actions can also be 
removed from the menu using (|android.view.Menu|) and passing (|android.R.id|) 
, (|android.R.id|) , (|android.R.id|) or (|android.R.id|) ids as parameters. 

Returning false from (|android.view.ActionMode.Callback|) will prevent the 
action mode from being started. 

Action click events should be handled by the custom implementation of 
(|android.view.ActionMode.Callback|) . 

Note that text selection mode is not started when a TextView receives focus and 
the (|android.R.attr|) flag has been set. The content is highlighted in that 
case, to allow for quick replacement. 



*android.widget.TextView.setEditableFactory(Editable.Factory)*

public final void setEditableFactory(android.text.Editable.Factory factory)

Sets the Factory used to create new Editables. 



*android.widget.TextView.setEllipsize(TextUtils.TruncateAt)*

public void setEllipsize(android.text.TextUtils.TruncateAt where)

Causes words in the text that are longer than the view is wide to be ellipsized 
instead of broken in the middle. You may also want to 
(|android.widget.TextView|) or (|android.widget.TextView|) to constrain the 
text to a single line. Use null to turn off ellipsizing. 

If (|android.widget.TextView|) has been used to set two or more lines, 
(|android.text.TextUtils.TruncateAt|) and (|android.text.TextUtils.TruncateAt|) 
* are only supported (other ellipsizing types will not do anything). 



*android.widget.TextView.setEms(int)*

public void setEms(int ems)

Makes the TextView exactly this many ems wide 



*android.widget.TextView.setEnabled(boolean)*

public void setEnabled(boolean enabled)





*android.widget.TextView.setError(CharSequence)*

public void setError(java.lang.CharSequence error)

Sets the right-hand compound drawable of the TextView to the "error" icon and 
sets an error message that will be displayed in a popup when the TextView has 
focus. The icon and error message will be reset to null when any key events 
cause changes to the TextView's text. If the error is null, the error message 
and icon will be cleared. 



*android.widget.TextView.setError(CharSequence,Drawable)*

public void setError(
  java.lang.CharSequence error,
  Drawable icon)

Sets the right-hand compound drawable of the TextView to the specified icon and 
sets an error message that will be displayed in a popup when the TextView has 
focus. The icon and error message will be reset to null when any key events 
cause changes to the TextView's text. The drawable must already have had 
(|Drawable|) set on it. If the error is null, the error message will be cleared 
(and you should provide a null icon as well). 



*android.widget.TextView.setExtractedText(ExtractedText)*

public void setExtractedText(android.view.inputmethod.ExtractedText text)

Apply to this text view the given extracted text, as previously returned by 
(|android.widget.TextView|) . 



*android.widget.TextView.setExtracting(ExtractedTextRequest)*

public void setExtracting(android.view.inputmethod.ExtractedTextRequest req)





*android.widget.TextView.setFilters(InputFilter[])*

public void setFilters(android.text.InputFilter[] filters)

Sets the list of input filters that will be used if the buffer is Editable. Has 
no effect otherwise. 



*android.widget.TextView.setFrame(int,int,int,int)*

protected boolean setFrame(
  int l,
  int t,
  int r,
  int b)





*android.widget.TextView.setFreezesText(boolean)*

public void setFreezesText(boolean freezesText)

Control whether this text view saves its entire text contents when freezing to 
an icicle, in addition to dynamic state such as cursor position. By default 
this is false, not saving the text. Set to true if the text in the text view is 
not being saved somewhere else in persistent storage (such as in a content 
provider) so that if the view is later thawed the user will not lose their 
data. 


    freezesText - Controls whether a frozen icicle should include the entire text data: true to 
       include it, false to not. 

*android.widget.TextView.setGravity(int)*

public void setGravity(int gravity)

Sets the horizontal alignment of the text and the vertical gravity that will be 
used when there is extra space in the TextView beyond what is required for the 
text itself. 



*android.widget.TextView.setHeight(int)*

public void setHeight(int pixels)

Makes the TextView exactly this many pixels tall. You could do the same thing 
by specifying this number in the LayoutParams. 

Note that setting this value overrides any other (minimum / maximum) number of 
lines or height setting. 



*android.widget.TextView.setHighlightColor(int)*

public void setHighlightColor(int color)

Sets the color used to display the selection highlight. 



*android.widget.TextView.setHint(CharSequence)*

public final void setHint(java.lang.CharSequence hint)

Sets the text to be displayed when the text of the TextView is empty. Null 
means to use the normal empty text. The hint does not currently participate in 
determining the size of the view. 



*android.widget.TextView.setHint(int)*

public final void setHint(int resid)

Sets the text to be displayed when the text of the TextView is empty, from a 
resource. 



*android.widget.TextView.setHintTextColor(ColorStateList)*

public final void setHintTextColor(android.content.res.ColorStateList colors)

Sets the color of the hint text. 



*android.widget.TextView.setHintTextColor(int)*

public final void setHintTextColor(int color)

Sets the color of the hint text for all the states (disabled, focussed, 
selected...) of this TextView. 



*android.widget.TextView.setHorizontallyScrolling(boolean)*

public void setHorizontallyScrolling(boolean whether)

Sets whether the text should be allowed to be wider than the View is. If false, 
it will be wrapped to the width of the View. 



*android.widget.TextView.setImeActionLabel(CharSequence,int)*

public void setImeActionLabel(
  java.lang.CharSequence label,
  int actionId)

Change the custom IME action associated with the text view, which will be 
reported to an IME with (|android.view.inputmethod.EditorInfo|) and 
(|android.view.inputmethod.EditorInfo|) when it has focus. 



*android.widget.TextView.setImeOptions(int)*

public void setImeOptions(int imeOptions)

Change the editor type integer associated with the text view, which will be 
reported to an IME with (|android.view.inputmethod.EditorInfo|) when it has 
focus. 



*android.widget.TextView.setIncludeFontPadding(boolean)*

public void setIncludeFontPadding(boolean includepad)

Set whether the TextView includes extra top and bottom padding to make room for 
accents that go above the normal ascent and descent. The default is true. 



*android.widget.TextView.setInputExtras(int)*

public void setInputExtras(int xmlResId)
  throws |java.io.IOException|
         |XmlPullParserException|
         
Set the extra input data of the text, which is the 
TextBoxAttribute.extras(|android.view.inputmethod.EditorInfo|) Bundle that will 
be filled in when creating an input connection. The given integer is the 
resource ID of an XML resource holding an 
&lt;input-extras&gt;(|android.R.styleable|) XML tree. 



*android.widget.TextView.setInputType(int)*

public void setInputType(int type)

Set the type of the content with a constant as defined for 
(|android.view.inputmethod.EditorInfo|) . This will take care of changing the 
key listener, by calling (|android.widget.TextView|) , to match the given 
content type. If the given content type is 
(|android.view.inputmethod.EditorInfo|) then a soft keyboard will not be 
displayed for this text view. 

Note that the maximum number of displayed lines (see 
(|android.widget.TextView|) ) will be modified if you change the 
(|android.view.inputmethod.EditorInfo|) flag of the input type. 



*android.widget.TextView.setKeyListener(KeyListener)*

public void setKeyListener(android.text.method.KeyListener input)

Sets the key listener to be used with this TextView. This can be null to 
disallow user input. Note that this method has significant and subtle 
interactions with soft keyboards and other input method: see 
KeyListener.getContentType()(|android.text.method.KeyListener|) for important 
details. Calling this method will replace the current content type of the text 
view with the content type returned by the key listener. 

Be warned that if you want a TextView with a key listener or movement method 
not to be focusable, or if you want a TextView without a key listener or 
movement method to be focusable, you must call (|android.widget.TextView|) 
again after calling this to get the focusability back the way you want it. 



*android.widget.TextView.setLines(int)*

public void setLines(int lines)

Makes the TextView exactly this many lines tall. 

Note that setting this value overrides any other (minimum / maximum) number of 
lines or height setting. A single line TextView will set this value to 1. 



*android.widget.TextView.setLineSpacing(float,float)*

public void setLineSpacing(
  float add,
  float mult)

Sets line spacing for this TextView. Each line will have its height multiplied 
by mult and have add added to it. 



*android.widget.TextView.setLinksClickable(boolean)*

public final void setLinksClickable(boolean whether)

Sets whether the movement method will automatically be set to 
(|android.text.method.LinkMovementMethod|) if (|android.widget.TextView|) has 
been set to nonzero and links are detected in (|android.widget.TextView|) . The 
default is true. 



*android.widget.TextView.setLinkTextColor(ColorStateList)*

public final void setLinkTextColor(android.content.res.ColorStateList colors)

Sets the color of links in the text. 



*android.widget.TextView.setLinkTextColor(int)*

public final void setLinkTextColor(int color)

Sets the color of links in the text. 



*android.widget.TextView.setMarqueeRepeatLimit(int)*

public void setMarqueeRepeatLimit(int marqueeLimit)

Sets how many times to repeat the marquee animation. Only applied if the 
TextView has marquee enabled. Set to -1 to repeat indefinitely. 



*android.widget.TextView.setMaxEms(int)*

public void setMaxEms(int maxems)

Makes the TextView at most this many ems wide 



*android.widget.TextView.setMaxHeight(int)*

public void setMaxHeight(int maxHeight)

Makes the TextView at most this many pixels tall. This option is mutually 
exclusive with the (|android.widget.TextView|) method. 

Setting this value overrides any other (maximum) number of lines setting. 



*android.widget.TextView.setMaxLines(int)*

public void setMaxLines(int maxlines)

Makes the TextView at most this many lines tall. 

Setting this value overrides any other (maximum) height setting. 



*android.widget.TextView.setMaxWidth(int)*

public void setMaxWidth(int maxpixels)

Makes the TextView at most this many pixels wide 



*android.widget.TextView.setMinEms(int)*

public void setMinEms(int minems)

Makes the TextView at least this many ems wide 



*android.widget.TextView.setMinHeight(int)*

public void setMinHeight(int minHeight)

Makes the TextView at least this many pixels tall. 

Setting this value overrides any other (minimum) number of lines setting. 



*android.widget.TextView.setMinLines(int)*

public void setMinLines(int minlines)

Makes the TextView at least this many lines tall. 

Setting this value overrides any other (minimum) height setting. A single line 
TextView will set this value to 1. 



*android.widget.TextView.setMinWidth(int)*

public void setMinWidth(int minpixels)

Makes the TextView at least this many pixels wide 



*android.widget.TextView.setMovementMethod(MovementMethod)*

public final void setMovementMethod(android.text.method.MovementMethod movement)

Sets the movement method (arrow key handler) to be used for this TextView. This 
can be null to disallow using the arrow keys to move the cursor or scroll the 
view. 

Be warned that if you want a TextView with a key listener or movement method 
not to be focusable, or if you want a TextView without a key listener or 
movement method to be focusable, you must call (|android.widget.TextView|) 
again after calling this to get the focusability back the way you want it. 



*android.widget.TextView.setOnEditorActionListener(TextView.OnEditorActionListener)*

public void setOnEditorActionListener(android.widget.TextView.OnEditorActionListener l)

Set a special listener to be called when an action is performed on the text 
view. This will be called when the enter key is pressed, or when an action 
supplied to the IME is selected by the user. Setting this means that the normal 
hard key event will not insert a newline into the text view, even if it is 
multi-line; holding down the ALT modifier will, however, allow the user to 
insert a newline character. 



*android.widget.TextView.setPadding(int,int,int,int)*

public void setPadding(
  int left,
  int top,
  int right,
  int bottom)





*android.widget.TextView.setPaddingRelative(int,int,int,int)*

public void setPaddingRelative(
  int start,
  int top,
  int end,
  int bottom)





*android.widget.TextView.setPaintFlags(int)*

public void setPaintFlags(int flags)

Sets flags on the Paint being used to display the text and reflows the text if 
they are different from the old flags. 



*android.widget.TextView.setPrivateImeOptions(String)*

public void setPrivateImeOptions(java.lang.String type)

Set the private content type of the text, which is the 
EditorInfo.privateImeOptions(|android.view.inputmethod.EditorInfo|) field that 
will be filled in when creating an input connection. 



*android.widget.TextView.setRawInputType(int)*

public void setRawInputType(int type)

Directly change the content type integer of the text view, without modifying 
any other state. 



*android.widget.TextView.setScroller(Scroller)*

public void setScroller(android.widget.Scroller s)





*android.widget.TextView.setSelectAllOnFocus(boolean)*

public void setSelectAllOnFocus(boolean selectAllOnFocus)

Set the TextView so that when it takes focus, all the text is selected. 



*android.widget.TextView.setSelected(boolean)*

public void setSelected(boolean selected)





*android.widget.TextView.setShadowLayer(float,float,float,int)*

public void setShadowLayer(
  float radius,
  float dx,
  float dy,
  int color)

Gives the text a shadow of the specified radius and color, the specified 
distance from its normal position. 



*android.widget.TextView.setShowSoftInputOnFocus(boolean)*

public final void setShowSoftInputOnFocus(boolean show)

Sets whether the soft input method will be made visible when this TextView gets 
focused. The default is true. 



*android.widget.TextView.setSingleLine()*

public void setSingleLine()

Sets the properties of this field (lines, horizontally scrolling, 
transformation method) to be for a single-line input. 



*android.widget.TextView.setSingleLine(boolean)*

public void setSingleLine(boolean singleLine)

If true, sets the properties of this field (number of lines, horizontally 
scrolling, transformation method) to be for a single-line input; if false, 
restores these to the default conditions. 

Note that the default conditions are not necessarily those that were in effect 
prior this method, and you may want to reset these properties to your custom 
values. 



*android.widget.TextView.setSpan_internal(Object,int,int,int)*

protected void setSpan_internal(
  java.lang.Object span,
  int start,
  int end,
  int flags)

Sets a span on the specified range of text 



*android.widget.TextView.setSpannableFactory(Spannable.Factory)*

public final void setSpannableFactory(android.text.Spannable.Factory factory)

Sets the Factory used to create new Spannables. 



*android.widget.TextView.setText(char[],int,int)*

public final void setText(
  char[] text,
  int start,
  int len)

Sets the TextView to display the specified slice of the specified char array. 
You must promise that you will not change the contents of the array except for 
right before another call to setText(), since the TextView has no way to know 
that the text has changed and that it needs to invalidate and re-layout. 



*android.widget.TextView.setText(CharSequence)*

public final void setText(java.lang.CharSequence text)

Sets the string value of the TextView. TextView does not accept HTML-like 
formatting, which you can do with text strings in XML resource files. To style 
your strings, attach android.text.style.* objects to a 
SpannableString(|android.text.SpannableString|) , or see the <a 
href="guide/topics/resources/available-resources.html#stringresources"> 
Available Resource Types documentation for an example of setting formatted text 
in the XML resource file. 



*android.widget.TextView.setText(CharSequence,TextView.BufferType)*

public void setText(
  java.lang.CharSequence text,
  android.widget.TextView.BufferType type)

Sets the text that this TextView is to display (see (|android.widget.TextView|) 
) and also sets whether it is stored in a styleable/spannable buffer and 
whether it is editable. 



*android.widget.TextView.setText(int)*

public final void setText(int resid)





*android.widget.TextView.setText(int,TextView.BufferType)*

public final void setText(
  int resid,
  android.widget.TextView.BufferType type)





*android.widget.TextView.setTextAppearance(Context,int)*

public void setTextAppearance(
  android.content.Context context,
  int resid)

Sets the text color, size, style, hint color, and highlight color from the 
specified TextAppearance resource. 



*android.widget.TextView.setTextColor(ColorStateList)*

public void setTextColor(android.content.res.ColorStateList colors)

Sets the text color. 



*android.widget.TextView.setTextColor(int)*

public void setTextColor(int color)

Sets the text color for all the states (normal, selected, focused) to be this 
color. 



*android.widget.TextView.setTextIsSelectable(boolean)*

public void setTextIsSelectable(boolean selectable)

Sets whether the content of this view is selectable by the user. The default 
isfalse, meaning that the content is not selectable. 

When you use a TextView to display a useful piece of information to the user 
(such as a contact's address), make it selectable, so that the user can select 
and copy its content. You can also use set the XML attribute 
(|android.R.styleable|) to "true". 

When you call this method to set the value oftextIsSelectable, it sets the 
flagsfocusable,focusableInTouchMode,clickable, andlongClickableto the same 
value. These flags correspond to the attributes 
android:focusable(|android.R.styleable|) , 
android:focusableInTouchMode(|android.R.styleable|) , 
android:clickable(|android.R.styleable|) , and 
android:longClickable(|android.R.styleable|) . To restore any of these flags to 
a state you had set previously, call one or more of the following methods: 
setFocusable()(|android.widget.TextView|) , 
setFocusableInTouchMode()(|android.widget.TextView|) , 
setClickable()(|android.widget.TextView|) or 
setLongClickable()(|android.widget.TextView|) . 


    selectable - Whether the content of this TextView should be selectable. 

*android.widget.TextView.setTextKeepState(CharSequence)*

public final void setTextKeepState(java.lang.CharSequence text)

Like (|android.widget.TextView|) , except that the cursor position (if any) is 
retained in the new text. 


    text - The new text to place in the text view. 

*android.widget.TextView.setTextKeepState(CharSequence,TextView.BufferType)*

public final void setTextKeepState(
  java.lang.CharSequence text,
  android.widget.TextView.BufferType type)

Like (|android.widget.TextView|) , except that the cursor position (if any) is 
retained in the new text. 



*android.widget.TextView.setTextLocale(Locale)*

public void setTextLocale(java.util.Locale locale)

Set the default (|java.util.Locale|) of the text in this TextView to the given 
value. This value is used to choose appropriate typefaces for ambiguous 
characters. Typically used for CJK locales to disambiguate Hanzi/Kanji/Hanja 
characters. 


    locale - the {@link Locale} for drawing text, must not be null. 

*android.widget.TextView.setTextScaleX(float)*

public void setTextScaleX(float size)

Sets the extent by which text should be stretched horizontally. 



*android.widget.TextView.setTextSize(float)*

public void setTextSize(float size)

Set the default text size to the given value, interpreted as "scaled pixel" 
units. This size is adjusted based on the current density and user font size 
preference. 


    size - The scaled pixel size. 

*android.widget.TextView.setTextSize(int,float)*

public void setTextSize(
  int unit,
  float size)

Set the default text size to a given unit and value. See 
(|android.util.TypedValue|) for the possible dimension units. 


    unit - The desired dimension unit. 
    size - The desired size in the given units. 

*android.widget.TextView.setTransformationMethod(TransformationMethod)*

public final void setTransformationMethod(android.text.method.TransformationMethod method)

Sets the transformation that is applied to the text that this TextView is 
displaying. 



*android.widget.TextView.setTypeface(Typeface)*

public void setTypeface(Typeface tf)

Sets the typeface and style in which the text should be displayed. Note that 
not all Typeface families actually have bold and italic variants, so you may 
need to use (|android.widget.TextView|) to get the appearance that you actually 
want. 



*android.widget.TextView.setTypeface(Typeface,int)*

public void setTypeface(
  Typeface tf,
  int style)

Sets the typeface and style in which the text should be displayed, and turns on 
the fake bold and italic bits in the Paint if the Typeface that you provided 
does not have all the bits in the style that you specified. 



*android.widget.TextView.setUndoManager(UndoManager,String)*

public final void setUndoManager(
  android.content.UndoManager undoManager,
  java.lang.String tag)

Associate an (|android.content.UndoManager|) with this TextView. Once done, all 
edit operations on the TextView will result in appropriate 
(|android.content.UndoOperation|) objects pushed on the given UndoManager's 
stack. 


    undoManager - The {@link android.content.UndoManager} to associate with this TextView, or 
       null to clear any existing association. 
    tag - String tag identifying this particular TextView owner in the UndoManager. This 
       is used to keep the correct association with the {@link 
       android.content.UndoOwner} of any operations inside of the UndoManager. 

*android.widget.TextView.setWidth(int)*

public void setWidth(int pixels)

Makes the TextView exactly this many pixels wide. You could do the same thing 
by specifying this number in the LayoutParams. 



*android.widget.TextView.stopSelectionActionMode()*

protected void stopSelectionActionMode()





*android.widget.TextView.verifyDrawable(Drawable)*

protected boolean verifyDrawable(Drawable who)





*android.widget.TextView.viewClicked(InputMethodManager)*

protected void viewClicked(android.view.inputmethod.InputMethodManager imm)






