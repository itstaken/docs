*android.nfc.Tag* *Tag* Represents an NFC tag that has been discovered.

public final class Tag
  extends    |java.lang.Object|
  implements |android.os.Parcelable|

|android.nfc.Tag_Description|
|android.nfc.Tag_Fields|
|android.nfc.Tag_Constructors|
|android.nfc.Tag_Methods|

================================================================================

*android.nfc.Tag_Fields*
|android.os.Parcelable.Creator<android.nfc.Tag>_android.nfc.Tag.CREATOR|

*android.nfc.Tag_Constructors*
|android.nfc.Tag(byte[],int[],Bundle[],int,INfcTag)|Hidden constructor to be us

*android.nfc.Tag_Methods*
|android.nfc.Tag.createMockTag(byte[],int[],Bundle[])|Construct a mock Tag.
|android.nfc.Tag.describeContents()|
|android.nfc.Tag.getConnectedTechnology()|For internal use only.
|android.nfc.Tag.getId()|Get the Tag Identifier (if it has one).
|android.nfc.Tag.getServiceHandle()|For use by NfcService only.
|android.nfc.Tag.getTagService()|
|android.nfc.Tag.getTechExtras(int)|
|android.nfc.Tag.getTechList()|Get the technologies available in this tag, as f
|android.nfc.Tag.hasTech(int)|
|android.nfc.Tag.rediscover()|Rediscover the technologies available on this tag
|android.nfc.Tag.setConnectedTechnology(int)|For internal use only.
|android.nfc.Tag.setTechnologyDisconnected()|For internal use only.
|android.nfc.Tag.toString()|Human-readable description of the tag, for debuggin
|android.nfc.Tag.writeToParcel(Parcel,int)|

*android.nfc.Tag_Description*

Represents an NFC tag that has been discovered. (|android.nfc.Tag|) is an 
immutable object that represents the state of a NFC tag at the time of 
discovery. It can be used as a handle to (|android.nfc.tech.TagTechnology|) 
classes to perform advanced operations, or directly queried for its ID via 
(|android.nfc.Tag|) and the set of technologies it contains via 
(|android.nfc.Tag|) . Arrays passed to and returned by this class are not 
cloned, so be careful not to modify them. 

A new tag object is created every time a tag is discovered (comes into range), 
even if it is the same physical tag. If a tag is removed and then returned into 
range, then only the most recent tag object can be successfully used to create 
a (|android.nfc.tech.TagTechnology|) . 

Tag Dispatch When a tag is discovered, a (|android.nfc.Tag|) object is created 
and passed to a single activity via the (|android.nfc.NfcAdapter|) extra in an 
(|android.content.Intent|) via (|android.content.Context|) . A four stage 
dispatch is used to select the most appropriate activity to handle the tag. The 
Android OS executes each stage in order, and completes dispatch as soon as a 
single matching activity is found. If there are multiple matching activities 
found at any one stage then the Android activity chooser dialog is shown to 
allow the user to select the activity to receive the tag. 

The Tag dispatch mechanism was designed to give a high probability of 
dispatching a tag to the correct activity without showing the user an activity 
chooser dialog. This is important for NFC interactions because they are very 
transient -- if a user has to move the Android device to choose an application 
then the connection will likely be broken. 

1. Foreground activity dispatch A foreground activity that has called 
NfcAdapter.enableForegroundDispatch()(|android.nfc.NfcAdapter|) is given 
priority. See the documentation on 
NfcAdapter.enableForegroundDispatch()(|android.nfc.NfcAdapter|) for its usage. 
2. NDEF data dispatch If the tag contains NDEF data the system inspects the 
first (|android.nfc.NdefRecord|) in the first (|android.nfc.NdefMessage|) . If 
the record is a URI, SmartPoster, or MIME data (|android.content.Context|) is 
called with (|android.nfc.NfcAdapter|) . For URI and SmartPoster records the 
URI is put into the intent's data field. For MIME records the MIME type is put 
in the intent's type field. This allows activities to register to be launched 
only when data they know how to handle is present on a tag. This is the 
preferred method of handling data on a tag since NDEF data can be stored on 
many types of tags and doesn't depend on a specific tag technology. See 
(|android.nfc.NfcAdapter|) for more detail. If the tag does not contain NDEF 
data, or if no activity is registered for (|android.nfc.NfcAdapter|) with a 
matching data URI or MIME type then dispatch moves to stage 3. 3. Tag 
Technology dispatch (|android.content.Context|) is called with 
(|android.nfc.NfcAdapter|) to dispatch the tag to an activity that can handle 
the technologies present on the tag. Technologies are defined as sub-classes of 
(|android.nfc.tech.TagTechnology|) , see the package (|android.nfc.tech|) . The 
Android OS looks for an activity that can handle one or more technologies in 
the tag. See (|android.nfc.NfcAdapter|) for more detail. 4. Fall-back dispatch 
If no activity has been matched then (|android.content.Context|) is called with 
(|android.nfc.NfcAdapter|) . This is intended as a fall-back mechanism. See 
(|android.nfc.NfcAdapter|) . 

NFC Tag Background An NFC tag is a passive NFC device, powered by the NFC field 
of this Android device while it is in range. Tag's can come in many forms, such 
as stickers, cards, key fobs, or even embedded in a more sophisticated device. 

Tags can have a wide range of capabilities. Simple tags just offer read/write 
semantics, and contain some one time programmable areas to make read-only. More 
complex tags offer math operations and per-sector access control and 
authentication. The most sophisticated tags contain operating environments 
allowing complex interactions with the code executing on the tag. Use 
(|android.nfc.tech.TagTechnology|) classes to access a broad range of 
capabilities available in NFC tags. 



*android.os.Parcelable.Creator<android.nfc.Tag>_android.nfc.Tag.CREATOR*





*android.nfc.Tag(byte[],int[],Bundle[],int,INfcTag)*

public Tag(
  byte[] id,
  int[] techList,
  android.os.Bundle[] techListExtras,
  int serviceHandle,
  INfcTag tagService)

Hidden constructor to be used by NFC service and internal classes. 


*android.nfc.Tag.createMockTag(byte[],int[],Bundle[])*

public static |android.nfc.Tag| createMockTag(
  byte[] id,
  int[] techList,
  android.os.Bundle[] techListExtras)

Construct a mock Tag. This is an application constructed tag, so NfcAdapter 
methods on this Tag may fail with (|java.lang.IllegalArgumentException|) since 
it does not represent a physical Tag. This constructor might be useful for mock 
testing. 


    id - The tag identifier, can be null 
    techList - must not be null 

    Returns: freshly constructed tag 

*android.nfc.Tag.describeContents()*

public int describeContents()





*android.nfc.Tag.getConnectedTechnology()*

public int getConnectedTechnology()

For internal use only. 



*android.nfc.Tag.getId()*

public byte[] getId()

Get the Tag Identifier (if it has one). The tag identifier is a low level 
serial number, used for anti-collision and identification. Most tags have a 
stable unique identifier (UID), but some tags will generate a random ID every 
time they are discovered (RID), and there are some tags with no ID at all (the 
byte array will be zero-sized). The size and format of an ID is specific to the 
RF technology used by the tag. This function retrieves the ID as determined at 
discovery time, and does not perform any further RF communication or block. 



    Returns: ID as byte array, never null 

*android.nfc.Tag.getServiceHandle()*

public int getServiceHandle()

For use by NfcService only. 



*android.nfc.Tag.getTagService()*

public INfcTag getTagService()





*android.nfc.Tag.getTechExtras(int)*

public |android.os.Bundle| getTechExtras(int tech)





*android.nfc.Tag.getTechList()*

public |java.lang.String|[] getTechList()

Get the technologies available in this tag, as fully qualified class names. 

A technology is an implementation of the (|android.nfc.tech.TagTechnology|) 
interface, and can be instantiated by calling the static get(Tag) method on the 
implementation with this Tag. The (|android.nfc.tech.TagTechnology|) object can 
then be used to perform advanced, technology-specific operations on a tag. 

Android defines a mandatory set of technologies that must be correctly 
enumerated by all Android NFC devices, and an optional set of proprietary 
technologies. See (|android.nfc.tech.TagTechnology|) for more details. 

The ordering of the returned array is undefined and should not be relied upon. 



    Returns: an array of fully-qualified {@link TagTechnology} class-names. 

*android.nfc.Tag.hasTech(int)*

public boolean hasTech(int techType)





*android.nfc.Tag.rediscover()*

public |android.nfc.Tag| rediscover()
  throws |java.io.IOException|
         
Rediscover the technologies available on this tag. 

The technologies that are available on a tag may change due to operations being 
performed on a tag. For example, formatting a tag as NDEF adds the 
(|android.nfc.tech.Ndef|) technology. The (|rediscover|) method reenumerates 
the available technologies on the tag and returns a new (|android.nfc.Tag|) 
object containing these technologies. 

You may not be connected to any of this (|android.nfc.Tag|) 's technologies 
when calling this method. This method guarantees that you will be returned the 
same Tag if it is still in the field. May cause RF activity and may block. Must 
not be called from the main application thread. A blocked call will be canceled 
with (|java.io.IOException|) by calling (|android.nfc.Tag|) from another 
thread. Does not remove power from the RF field, so a tag having a random ID 
should not change its ID. 



    Returns: the rediscovered tag object. 

*android.nfc.Tag.setConnectedTechnology(int)*

public synchronized void setConnectedTechnology(int technology)

For internal use only. 



*android.nfc.Tag.setTechnologyDisconnected()*

public void setTechnologyDisconnected()

For internal use only. 



*android.nfc.Tag.toString()*

public |java.lang.String| toString()

Human-readable description of the tag, for debugging. 



*android.nfc.Tag.writeToParcel(Parcel,int)*

public void writeToParcel(
  android.os.Parcel dest,
  int flags)






