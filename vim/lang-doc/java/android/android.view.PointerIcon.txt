*android.view.PointerIcon* *PointerIcon* Represents an icon that can be used as 

public final class PointerIcon
  extends    |java.lang.Object|
  implements |android.os.Parcelable|

|android.view.PointerIcon_Description|
|android.view.PointerIcon_Fields|
|android.view.PointerIcon_Constructors|
|android.view.PointerIcon_Methods|

================================================================================

*android.view.PointerIcon_Fields*
|android.os.Parcelable.Creator<android.view.PointerIcon>_android.view.PointerIcon.CREATOR|
|int_android.view.PointerIcon.STYLE_ARROW|
|int_android.view.PointerIcon.STYLE_CUSTOM|
|int_android.view.PointerIcon.STYLE_NULL|
|int_android.view.PointerIcon.STYLE_SPOT_ANCHOR|
|int_android.view.PointerIcon.STYLE_SPOT_HOVER|
|int_android.view.PointerIcon.STYLE_SPOT_TOUCH|

*android.view.PointerIcon_Methods*
|android.view.PointerIcon.createCustomIcon(Bitmap,float,float)|Creates a custom
|android.view.PointerIcon.describeContents()|
|android.view.PointerIcon.equals(Object)|
|android.view.PointerIcon.getBitmap()|Gets the bitmap of the pointer icon.
|android.view.PointerIcon.getDefaultIcon(Context)|Gets the default pointer icon
|android.view.PointerIcon.getHotSpotX()|Gets the X offset of the pointer icon h
|android.view.PointerIcon.getHotSpotY()|Gets the Y offset of the pointer icon h
|android.view.PointerIcon.getNullIcon()|Gets a special pointer icon that has no
|android.view.PointerIcon.getStyle()|Gets the style of the pointer icon.
|android.view.PointerIcon.getSystemIcon(Context,int)|Gets a system pointer icon
|android.view.PointerIcon.isLoaded()|Returns true if the pointer icon has been 
|android.view.PointerIcon.isNullIcon()|Returns true if the pointer icon style i
|android.view.PointerIcon.load(Context)|Loads the bitmap and hotspot informatio
|android.view.PointerIcon.loadCustomIcon(Resources,int)|Loads a custom pointer 
|android.view.PointerIcon.writeToParcel(Parcel,int)|

*android.view.PointerIcon_Description*

Represents an icon that can be used as a mouse pointer. 

Pointer icons can be provided either by the system using system styles, or by 
applications using bitmaps or application resources. 



*android.os.Parcelable.Creator<android.view.PointerIcon>_android.view.PointerIcon.CREATOR*




*int_android.view.PointerIcon.STYLE_ARROW*

Style constant: Arrow icon. (Default mouse pointer) 


*int_android.view.PointerIcon.STYLE_CUSTOM*

Style constant: Custom icon with a user-supplied bitmap. 


*int_android.view.PointerIcon.STYLE_NULL*

Style constant: Null icon. It has no bitmap. 


*int_android.view.PointerIcon.STYLE_SPOT_ANCHOR*

Style constant: Spot anchor icon for touchpads. 


*int_android.view.PointerIcon.STYLE_SPOT_HOVER*

Style constant: Spot hover icon for touchpads. 


*int_android.view.PointerIcon.STYLE_SPOT_TOUCH*

Style constant: Spot touch icon for touchpads. 



*android.view.PointerIcon.createCustomIcon(Bitmap,float,float)*

public static |android.view.PointerIcon| createCustomIcon(
  Bitmap bitmap,
  float hotSpotX,
  float hotSpotY)

Creates a custom pointer from the given bitmap and hotspot information. 


    bitmap - The bitmap for the icon. 
    hotspotX - The X offset of the pointer icon hotspot in the bitmap. Must be within the [0, 
       bitmap.getWidth()) range. 
    hotspotY - The Y offset of the pointer icon hotspot in the bitmap. Must be within the [0, 
       bitmap.getHeight()) range. 

    Returns: A pointer icon for this bitmap. 

*android.view.PointerIcon.describeContents()*

public int describeContents()





*android.view.PointerIcon.equals(Object)*

public boolean equals(java.lang.Object other)





*android.view.PointerIcon.getBitmap()*

public Bitmap getBitmap()

Gets the bitmap of the pointer icon. 



    Returns: The pointer icon bitmap, or null if the style is {@link #STYLE_NULL}. 

*android.view.PointerIcon.getDefaultIcon(Context)*

public static |android.view.PointerIcon| getDefaultIcon(android.content.Context context)

Gets the default pointer icon. 


    context - The context. 

    Returns: The default pointer icon. 

*android.view.PointerIcon.getHotSpotX()*

public float getHotSpotX()

Gets the X offset of the pointer icon hotspot. 



    Returns: The hotspot X offset. 

*android.view.PointerIcon.getHotSpotY()*

public float getHotSpotY()

Gets the Y offset of the pointer icon hotspot. 



    Returns: The hotspot Y offset. 

*android.view.PointerIcon.getNullIcon()*

public static |android.view.PointerIcon| getNullIcon()

Gets a special pointer icon that has no bitmap. 



    Returns: The null pointer icon. 

*android.view.PointerIcon.getStyle()*

public int getStyle()

Gets the style of the pointer icon. 



    Returns: The pointer icon style. 

*android.view.PointerIcon.getSystemIcon(Context,int)*

public static |android.view.PointerIcon| getSystemIcon(
  android.content.Context context,
  int style)

Gets a system pointer icon for the given style. If style is not recognized, 
returns the default pointer icon. 


    context - The context. 
    style - The pointer icon style. 

    Returns: The pointer icon. 

*android.view.PointerIcon.isLoaded()*

public boolean isLoaded()

Returns true if the pointer icon has been loaded and its bitmap and hotspot 
information are available. 



    Returns: True if the pointer icon is loaded. 

*android.view.PointerIcon.isNullIcon()*

public boolean isNullIcon()

Returns true if the pointer icon style is (|android.view.PointerIcon|) . 



    Returns: True if the pointer icon style is {@link #STYLE_NULL}. 

*android.view.PointerIcon.load(Context)*

public |android.view.PointerIcon| load(android.content.Context context)

Loads the bitmap and hotspot information for a pointer icon, if it is not 
already loaded. Returns a pointer icon (not necessarily the same instance) with 
the information filled in. 


    context - The context. 

    Returns: The loaded pointer icon. 

*android.view.PointerIcon.loadCustomIcon(Resources,int)*

public static |android.view.PointerIcon| loadCustomIcon(
  android.content.res.Resources resources,
  int resourceId)

Loads a custom pointer icon from an XML resource. 

The XML resource should have the following form: 

<?xml version="1.0" encoding="utf-8"?> <pointer-icon 
xmlns:android="http://schemas.android.com/apk/res/android" 
android:bitmap="@drawable/my_pointer_bitmap" android:hotSpotX="24" 
android:hotSpotY="24" /> 




    resources - The resources object. 
    resourceId - The resource id. 

    Returns: The pointer icon. 

*android.view.PointerIcon.writeToParcel(Parcel,int)*

public void writeToParcel(
  android.os.Parcel out,
  int flags)






