*android.content.pm.PackageItemInfo* *PackageItemInfo* Base class containing inf

public class PackageItemInfo
  extends    |java.lang.Object|

|android.content.pm.PackageItemInfo_Description|
|android.content.pm.PackageItemInfo_Fields|
|android.content.pm.PackageItemInfo_Constructors|
|android.content.pm.PackageItemInfo_Methods|

================================================================================

*android.content.pm.PackageItemInfo_Fields*
|int_android.content.pm.PackageItemInfo.icon|
|int_android.content.pm.PackageItemInfo.labelRes|
|int_android.content.pm.PackageItemInfo.logo|
|android.os.Bundle_android.content.pm.PackageItemInfo.metaData|
|java.lang.String_android.content.pm.PackageItemInfo.name|
|java.lang.CharSequence_android.content.pm.PackageItemInfo.nonLocalizedLabel|
|java.lang.String_android.content.pm.PackageItemInfo.packageName|

*android.content.pm.PackageItemInfo_Constructors*
|android.content.pm.PackageItemInfo()|
|android.content.pm.PackageItemInfo(PackageItemInfo)|
|android.content.pm.PackageItemInfo(Parcel)|

*android.content.pm.PackageItemInfo_Methods*
|android.content.pm.PackageItemInfo.dumpBack(Printer,String)|
|android.content.pm.PackageItemInfo.dumpFront(Printer,String)|
|android.content.pm.PackageItemInfo.getApplicationInfo()|Get the ApplicationInf
|android.content.pm.PackageItemInfo.loadDefaultIcon(PackageManager)|Retrieve th
|android.content.pm.PackageItemInfo.loadDefaultLogo(PackageManager)|Retrieve th
|android.content.pm.PackageItemInfo.loadIcon(PackageManager)|Retrieve the curre
|android.content.pm.PackageItemInfo.loadLabel(PackageManager)|Retrieve the curr
|android.content.pm.PackageItemInfo.loadLogo(PackageManager)|Retrieve the curre
|android.content.pm.PackageItemInfo.loadXmlMetaData(PackageManager,String)|Load
|android.content.pm.PackageItemInfo.writeToParcel(Parcel,int)|

*android.content.pm.PackageItemInfo_Description*

Base class containing information common to all package items held by the 
package manager. This provides a very common basic set of attributes: a label, 
icon, and meta-data. This class is not intended to be used by itself; it is 
simply here to share common definitions between all items returned by the 
package manager. As such, it does not itself implement Parcelable, but does 
provide convenience methods to assist in the implementation of Parcelable in 
subclasses. 



*int_android.content.pm.PackageItemInfo.icon*

A drawable resource identifier (in the package's resources) of this component's 
icon. From the "icon" attribute or, if not set, 0. 


*int_android.content.pm.PackageItemInfo.labelRes*

A string resource identifier (in the package's resources) of this component's 
label. From the "label" attribute or, if not set, 0. 


*int_android.content.pm.PackageItemInfo.logo*

A drawable resource identifier (in the package's resources) of this component's 
logo. Logos may be larger/wider than icons and are displayed by certain UI 
elements in place of a name or name/icon combination. From the "logo" attribute 
or, if not set, 0. 


*android.os.Bundle_android.content.pm.PackageItemInfo.metaData*

Additional meta-data associated with this component. This field will only be 
filled in if you set the (|android.content.pm.PackageManager|) flag when 
requesting the info. 


*java.lang.String_android.content.pm.PackageItemInfo.name*

Public name of this item. From the "android:name" attribute. 


*java.lang.CharSequence_android.content.pm.PackageItemInfo.nonLocalizedLabel*

The string provided in the AndroidManifest file, if any. You probably don't 
want to use this. You probably want (|android.content.pm.PackageManager|) 


*java.lang.String_android.content.pm.PackageItemInfo.packageName*

Name of the package that this item is in. 



*android.content.pm.PackageItemInfo()*

public PackageItemInfo()




*android.content.pm.PackageItemInfo(PackageItemInfo)*

public PackageItemInfo(android.content.pm.PackageItemInfo orig)




*android.content.pm.PackageItemInfo(Parcel)*

protected PackageItemInfo(android.os.Parcel source)




*android.content.pm.PackageItemInfo.dumpBack(Printer,String)*

protected void dumpBack(
  android.util.Printer pw,
  java.lang.String prefix)





*android.content.pm.PackageItemInfo.dumpFront(Printer,String)*

protected void dumpFront(
  android.util.Printer pw,
  java.lang.String prefix)





*android.content.pm.PackageItemInfo.getApplicationInfo()*

protected |android.content.pm.ApplicationInfo| getApplicationInfo()

Get the ApplicationInfo for the application to which this item belongs, if 
available, otherwise returns null. 



    Returns: Returns the ApplicationInfo of this item, or null if not known. 

*android.content.pm.PackageItemInfo.loadDefaultIcon(PackageManager)*

protected Drawable loadDefaultIcon(android.content.pm.PackageManager pm)

Retrieve the default graphical icon associated with this item. 


    pm - A PackageManager from which the icon can be loaded; usually the PackageManager 
       from which you originally retrieved this item. 

    Returns: Returns a Drawable containing the item's default icon such as the default 
             activity icon. 

*android.content.pm.PackageItemInfo.loadDefaultLogo(PackageManager)*

protected Drawable loadDefaultLogo(android.content.pm.PackageManager pm)

Retrieve the default graphical logo associated with this item. 


    pm - A PackageManager from which the logo can be loaded; usually the PackageManager 
       from which you originally retrieved this item. 

    Returns: Returns a Drawable containing the item's default logo or null if no default 
             logo is available. 

*android.content.pm.PackageItemInfo.loadIcon(PackageManager)*

public Drawable loadIcon(android.content.pm.PackageManager pm)

Retrieve the current graphical icon associated with this item. This will call 
back on the given PackageManager to load the icon from the application. 


    pm - A PackageManager from which the icon can be loaded; usually the PackageManager 
       from which you originally retrieved this item. 

    Returns: Returns a Drawable containing the item's icon. If the item does not have an 
             icon, the item's default icon is returned such as the default 
             activity icon. 

*android.content.pm.PackageItemInfo.loadLabel(PackageManager)*

public |java.lang.CharSequence| loadLabel(android.content.pm.PackageManager pm)

Retrieve the current textual label associated with this item. This will call 
back on the given PackageManager to load the label from the application. 


    pm - A PackageManager from which the label can be loaded; usually the PackageManager 
       from which you originally retrieved this item. 

    Returns: Returns a CharSequence containing the item's label. If the item does not have a 
             label, its name is returned. 

*android.content.pm.PackageItemInfo.loadLogo(PackageManager)*

public Drawable loadLogo(android.content.pm.PackageManager pm)

Retrieve the current graphical logo associated with this item. This will call 
back on the given PackageManager to load the logo from the application. 


    pm - A PackageManager from which the logo can be loaded; usually the PackageManager 
       from which you originally retrieved this item. 

    Returns: Returns a Drawable containing the item's logo. If the item does not have a 
             logo, this method will return null. 

*android.content.pm.PackageItemInfo.loadXmlMetaData(PackageManager,String)*

public |android.content.res.XmlResourceParser| loadXmlMetaData(
  android.content.pm.PackageManager pm,
  java.lang.String name)

Load an XML resource attached to the meta-data of this item. This will 
retrieved the name meta-data entry, and if defined call back on the given 
PackageManager to load its XML file from the application. 


    pm - A PackageManager from which the XML can be loaded; usually the PackageManager 
       from which you originally retrieved this item. 
    name - Name of the meta-date you would like to load. 

    Returns: Returns an XmlPullParser you can use to parse the XML file assigned as the 
             given meta-data. If the meta-data name is not defined or the XML 
             resource could not be found, null is returned. 

*android.content.pm.PackageItemInfo.writeToParcel(Parcel,int)*

public void writeToParcel(
  android.os.Parcel dest,
  int parcelableFlags)






