*android.view.animation.Animation* *Animation* Abstraction for an Animation that

public abstract class Animation
  extends    |java.lang.Object|
  implements |java.lang.Cloneable|

|android.view.animation.Animation_Description|
|android.view.animation.Animation_Fields|
|android.view.animation.Animation_Constructors|
|android.view.animation.Animation_Methods|

================================================================================

*android.view.animation.Animation_Fields*
|int_android.view.animation.Animation.ABSOLUTE|
|int_android.view.animation.Animation.INFINITE|
|int_android.view.animation.Animation.RELATIVE_TO_PARENT|
|int_android.view.animation.Animation.RELATIVE_TO_SELF|
|int_android.view.animation.Animation.RESTART|
|int_android.view.animation.Animation.REVERSE|
|int_android.view.animation.Animation.START_ON_FIRST_FRAME|
|int_android.view.animation.Animation.ZORDER_BOTTOM|
|int_android.view.animation.Animation.ZORDER_NORMAL|
|int_android.view.animation.Animation.ZORDER_TOP|

*android.view.animation.Animation_Constructors*
|android.view.animation.Animation()|Creates a new animation with a duration of 
|android.view.animation.Animation(Context,AttributeSet)|Creates a new animation

*android.view.animation.Animation_Methods*
|android.view.animation.Animation.applyTransformation(float,Transformation)|Hel
|android.view.animation.Animation.cancel()|Cancel the animation.
|android.view.animation.Animation.clone()|
|android.view.animation.Animation.computeDurationHint()|Compute a hint at how l
|android.view.animation.Animation.detach()|
|android.view.animation.Animation.ensureInterpolator()|Gurantees that this anim
|android.view.animation.Animation.finalize()|
|android.view.animation.Animation.getBackgroundColor()|Returns the background c
|android.view.animation.Animation.getDetachWallpaper()|Return value of#setDetac
|android.view.animation.Animation.getDuration()|How long this animation should 
|android.view.animation.Animation.getFillAfter()|If fillAfter is true, this ani
|android.view.animation.Animation.getFillBefore()|If fillBefore is true, this a
|android.view.animation.Animation.getInterpolator()|Gets the acceleration curve
|android.view.animation.Animation.getInvalidateRegion(int,int,int,int,RectF,Transformation)|
|android.view.animation.Animation.getRepeatCount()|Defines how many times the a
|android.view.animation.Animation.getRepeatMode()|Defines what this animation s
|android.view.animation.Animation.getScaleFactor()|The scale factor is set by t
|android.view.animation.Animation.getStartOffset()|When this animation should s
|android.view.animation.Animation.getStartTime()|When this animation should sta
|android.view.animation.Animation.getTransformation(long,Transformation)|Gets t
|android.view.animation.Animation.getTransformation(long,Transformation,float)|
|android.view.animation.Animation.getZAdjustment()|Returns the Z ordering mode 
|android.view.animation.Animation.hasAlpha()|Return true if this animation chan
|android.view.animation.Animation.hasEnded()|Indicates whether this animation h
|android.view.animation.Animation.hasStarted()|Indicates whether this animation
|android.view.animation.Animation.initialize(int,int,int,int)|Initialize this a
|android.view.animation.Animation.initializeInvalidateRegion(int,int,int,int)|
|android.view.animation.Animation.isFillEnabled()|If fillEnabled is true, this 
|android.view.animation.Animation.isInitialized()|Whether or not the animation 
|android.view.animation.Animation.reset()|Reset the initialization state of thi
|android.view.animation.Animation.resolveSize(int,float,int,int)|Convert the in
|android.view.animation.Animation.restrictDuration(long)|Ensure that the durati
|android.view.animation.Animation.scaleCurrentDuration(float)|How much to scale
|android.view.animation.Animation.setAnimationListener(Animation.AnimationListener)|
|android.view.animation.Animation.setBackgroundColor(int)|Set background behind
|android.view.animation.Animation.setDetachWallpaper(boolean)|If detachWallpape
|android.view.animation.Animation.setDuration(long)|How long this animation sho
|android.view.animation.Animation.setFillAfter(boolean)|If fillAfter is true, t
|android.view.animation.Animation.setFillBefore(boolean)|If fillBefore is true,
|android.view.animation.Animation.setFillEnabled(boolean)|If fillEnabled is tru
|android.view.animation.Animation.setInterpolator(Context,int)|Sets the acceler
|android.view.animation.Animation.setInterpolator(Interpolator)|Sets the accele
|android.view.animation.Animation.setListenerHandler(Handler)|Sets the handler 
|android.view.animation.Animation.setRepeatCount(int)|Sets how many times the a
|android.view.animation.Animation.setRepeatMode(int)|Defines what this animatio
|android.view.animation.Animation.setStartOffset(long)|When this animation shou
|android.view.animation.Animation.setStartTime(long)|When this animation should
|android.view.animation.Animation.setZAdjustment(int)|Set the Z ordering mode t
|android.view.animation.Animation.start()|Convenience method to start the anima
|android.view.animation.Animation.startNow()|Convenience method to start the an
|android.view.animation.Animation.willChangeBounds()|Indicates whether or not t
|android.view.animation.Animation.willChangeTransformationMatrix()|Indicates wh

*android.view.animation.Animation_Description*

Abstraction for an Animation that can be applied to Views, Surfaces, or other 
objects. See the animation package description file(|android.view.animation|) . 



*int_android.view.animation.Animation.ABSOLUTE*

The specified dimension is an absolute number of pixels. 


*int_android.view.animation.Animation.INFINITE*

Repeat the animation indefinitely. 


*int_android.view.animation.Animation.RELATIVE_TO_PARENT*

The specified dimension holds a float and should be multiplied by the height or 
width of the parent of the object being animated. 


*int_android.view.animation.Animation.RELATIVE_TO_SELF*

The specified dimension holds a float and should be multiplied by the height or 
width of the object being animated. 


*int_android.view.animation.Animation.RESTART*

When the animation reaches the end and the repeat count is INFINTE_REPEAT or a 
positive value, the animation restarts from the beginning. 


*int_android.view.animation.Animation.REVERSE*

When the animation reaches the end and the repeat count is INFINTE_REPEAT or a 
positive value, the animation plays backward (and then forward again). 


*int_android.view.animation.Animation.START_ON_FIRST_FRAME*

Can be used as the start time to indicate the start time should be the current 
time when (|android.view.animation.Animation|) is invoked for the first 
animation frame. This can is useful for short animations. 


*int_android.view.animation.Animation.ZORDER_BOTTOM*

Requests that the content being animated be forced under all other content for 
the duration of the animation. 


*int_android.view.animation.Animation.ZORDER_NORMAL*

Requests that the content being animated be kept in its current Z order. 


*int_android.view.animation.Animation.ZORDER_TOP*

Requests that the content being animated be forced on top of all other content 
for the duration of the animation. 



*android.view.animation.Animation()*

public Animation()

Creates a new animation with a duration of 0ms, the default interpolator, with 
fillBefore set to true and fillAfter set to false 


*android.view.animation.Animation(Context,AttributeSet)*

public Animation(
  android.content.Context context,
  android.util.AttributeSet attrs)

Creates a new animation whose parameters come from the specified context and 
attributes set. 

    context - the application environment 
    attrs - the set of attributes holding the animation parameters 

*android.view.animation.Animation.applyTransformation(float,Transformation)*

protected void applyTransformation(
  float interpolatedTime,
  android.view.animation.Transformation t)

Helper for getTransformation. Subclasses should implement this to apply their 
transforms given an interpolation value. Implementations of this method should 
always replace the specified Transformation or document they are doing 
otherwise. 


    interpolatedTime - The value of the normalized time (0.0 to 1.0) after it has been run through the 
       interpolation function. 
    t - The Transformation object to fill in with the current transforms. 

*android.view.animation.Animation.cancel()*

public void cancel()

Cancel the animation. Cancelling an animation invokes the animation listener, 
if set, to notify the end of the animation. 

If you cancel an animation manually, you must call 
(|android.view.animation.Animation|) before starting the animation again. 



*android.view.animation.Animation.clone()*

protected |android.view.animation.Animation| clone()
  throws |java.lang.CloneNotSupportedException|
         




*android.view.animation.Animation.computeDurationHint()*

public long computeDurationHint()

Compute a hint at how long the entire animation may last, in milliseconds. 
Animations can be written to cause themselves to run for a different duration 
than what is computed here, but generally this should be accurate. 



*android.view.animation.Animation.detach()*

public void detach()





*android.view.animation.Animation.ensureInterpolator()*

protected void ensureInterpolator()

Gurantees that this animation has an interpolator. Will use a 
AccelerateDecelerateInterpolator is nothing else was specified. 



*android.view.animation.Animation.finalize()*

protected void finalize()
  throws |java.lang.Throwable|
         




*android.view.animation.Animation.getBackgroundColor()*

public int getBackgroundColor()

Returns the background color behind the animation. 



*android.view.animation.Animation.getDetachWallpaper()*

public boolean getDetachWallpaper()

Return value of (|android.view.animation.Animation|) . 



*android.view.animation.Animation.getDuration()*

public long getDuration()

How long this animation should last 



    Returns: the duration in milliseconds of the animation 

*android.view.animation.Animation.getFillAfter()*

public boolean getFillAfter()

If fillAfter is true, this animation will apply its transformation after the 
end time of the animation. 



    Returns: true if the animation applies its transformation after it ends 

*android.view.animation.Animation.getFillBefore()*

public boolean getFillBefore()

If fillBefore is true, this animation will apply its transformation before the 
start time of the animation. If fillBefore is false and 
fillEnabled(|android.view.animation.Animation|) is true, the transformation 
will not be applied until the start time of the animation. 



    Returns: true if the animation applies its transformation before it starts 

*android.view.animation.Animation.getInterpolator()*

public |android.view.animation.Interpolator| getInterpolator()

Gets the acceleration curve type for this animation. 



    Returns: the {@link Interpolator} associated to this animation 

*android.view.animation.Animation.getInvalidateRegion(int,int,int,int,RectF,Transformation)*

public void getInvalidateRegion(
  int left,
  int top,
  int right,
  int bottom,
  RectF invalidate,
  android.view.animation.Transformation transformation)




    left - 
    top - 
    right - 
    bottom - 
    invalidate - 
    transformation - 

*android.view.animation.Animation.getRepeatCount()*

public int getRepeatCount()

Defines how many times the animation should repeat. The default value is 0. 



    Returns: the number of times the animation should repeat, or {@link #INFINITE} 

*android.view.animation.Animation.getRepeatMode()*

public int getRepeatMode()

Defines what this animation should do when it reaches the end. 



    Returns: either one of {@link #REVERSE} or {@link #RESTART} 

*android.view.animation.Animation.getScaleFactor()*

protected float getScaleFactor()

The scale factor is set by the call to getTransformation. Overrides of 
(|android.view.animation.Animation|) will get this value directly. Overrides of 
(|android.view.animation.Animation|) can call this method to get the value. 



    Returns: float The scale factor that should be applied to pre-scaled values in an 
             Animation such as the pivot points in {@link ScaleAnimation} and 
             {@link RotateAnimation}. 

*android.view.animation.Animation.getStartOffset()*

public long getStartOffset()

When this animation should start, relative to StartTime 



    Returns: the start offset in milliseconds 

*android.view.animation.Animation.getStartTime()*

public long getStartTime()

When this animation should start. If the animation has not startet yet, this 
method might return (|android.view.animation.Animation|) . 



    Returns: the time in milliseconds when the animation should start or {@link 
             #START_ON_FIRST_FRAME} 

*android.view.animation.Animation.getTransformation(long,Transformation)*

public boolean getTransformation(
  long currentTime,
  android.view.animation.Transformation outTransformation)

Gets the transformation to apply at a specified point in time. Implementations 
of this method should always replace the specified Transformation or document 
they are doing otherwise. 


    currentTime - Where we are in the animation. This is wall clock time. 
    outTransformation - A transformation object that is provided by the caller and will be filled in by 
       the animation. 

    Returns: True if the animation is still running 

*android.view.animation.Animation.getTransformation(long,Transformation,float)*

public boolean getTransformation(
  long currentTime,
  android.view.animation.Transformation outTransformation,
  float scale)

Gets the transformation to apply at a specified point in time. Implementations 
of this method should always replace the specified Transformation or document 
they are doing otherwise. 


    currentTime - Where we are in the animation. This is wall clock time. 
    outTransformation - A transformation object that is provided by the caller and will be filled in by 
       the animation. 
    scale - Scaling factor to apply to any inputs to the transform operation, such pivot 
       points being rotated or scaled around. 

    Returns: True if the animation is still running 

*android.view.animation.Animation.getZAdjustment()*

public int getZAdjustment()

Returns the Z ordering mode to use while running the animation as previously 
set by (|android.view.animation.Animation|) . 



    Returns: Returns one of {@link #ZORDER_NORMAL}, {@link #ZORDER_TOP}, or {@link 
             #ZORDER_BOTTOM}. 

*android.view.animation.Animation.hasAlpha()*

public boolean hasAlpha()

Return true if this animation changes the view's alpha property. 



*android.view.animation.Animation.hasEnded()*

public boolean hasEnded()

Indicates whether this animation has ended or not. 



    Returns: true if the animation has ended, false otherwise 

*android.view.animation.Animation.hasStarted()*

public boolean hasStarted()

Indicates whether this animation has started or not. 



    Returns: true if the animation has started, false otherwise 

*android.view.animation.Animation.initialize(int,int,int,int)*

public void initialize(
  int width,
  int height,
  int parentWidth,
  int parentHeight)

Initialize this animation with the dimensions of the object being animated as 
well as the objects parents. (This is to support animation sizes being 
specified relative to these dimensions.) 

Objects that interpret Animations should call this method when the sizes of the 
object being animated and its parent are known, and before calling 
(|android.view.animation.Animation|) . 


    width - Width of the object being animated 
    height - Height of the object being animated 
    parentWidth - Width of the animated object's parent 
    parentHeight - Height of the animated object's parent 

*android.view.animation.Animation.initializeInvalidateRegion(int,int,int,int)*

public void initializeInvalidateRegion(
  int left,
  int top,
  int right,
  int bottom)




    left - 
    top - 
    right - 
    bottom - 

*android.view.animation.Animation.isFillEnabled()*

public boolean isFillEnabled()

If fillEnabled is true, this animation will apply the value of fillBefore. 



    Returns: true if the animation will take fillBefore into account 

*android.view.animation.Animation.isInitialized()*

public boolean isInitialized()

Whether or not the animation has been initialized. 



    Returns: Has this animation been initialized. 

*android.view.animation.Animation.reset()*

public void reset()

Reset the initialization state of this animation. 



*android.view.animation.Animation.resolveSize(int,float,int,int)*

protected float resolveSize(
  int type,
  float value,
  int size,
  int parentSize)

Convert the information in the description of a size to an actual dimension 


    type - One of Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or 
       Animation.RELATIVE_TO_PARENT. 
    value - The dimension associated with the type parameter 
    size - The size of the object being animated 
    parentSize - The size of the parent of the object being animated 

    Returns: The dimension to use for the animation 

*android.view.animation.Animation.restrictDuration(long)*

public void restrictDuration(long durationMillis)

Ensure that the duration that this animation will run is not longer than 
durationMillis. In addition to adjusting the duration itself, this ensures that 
the repeat count also will not make it run longer than the given time. 


    durationMillis - The maximum duration the animation is allowed to run. 

*android.view.animation.Animation.scaleCurrentDuration(float)*

public void scaleCurrentDuration(float scale)

How much to scale the duration by. 


    scale - The amount to scale the duration. 

*android.view.animation.Animation.setAnimationListener(Animation.AnimationListener)*

public void setAnimationListener(android.view.animation.Animation.AnimationListener listener)

Binds an animation listener to this animation. The animation listener is 
notified of animation events such as the end of the animation or the repetition 
of the animation. 


    listener - the animation listener to be notified 

*android.view.animation.Animation.setBackgroundColor(int)*

public void setBackgroundColor(int bg)

Set background behind animation. 


    bg - The background color. If 0, no background. Currently must be black, with any 
       desired alpha level. 

*android.view.animation.Animation.setDetachWallpaper(boolean)*

public void setDetachWallpaper(boolean detachWallpaper)

If detachWallpaper is true, and this is a window animation of a window that has 
a wallpaper background, then the window will be detached from the wallpaper 
while it runs. That is, the animation will only be applied to the window, and 
the wallpaper behind it will remain static. 


    detachWallpaper - true if the wallpaper should be detached from the animation 

*android.view.animation.Animation.setDuration(long)*

public void setDuration(long durationMillis)

How long this animation should last. The duration cannot be negative. 


    durationMillis - Duration in milliseconds 

*android.view.animation.Animation.setFillAfter(boolean)*

public void setFillAfter(boolean fillAfter)

If fillAfter is true, the transformation that this animation performed will 
persist when it is finished. Defaults to false if not set. Note that this 
applies to individual animations and when using an 
AnimationSet(|android.view.animation.AnimationSet|) to chain animations. 


    fillAfter - true if the animation should apply its transformation after it ends 

*android.view.animation.Animation.setFillBefore(boolean)*

public void setFillBefore(boolean fillBefore)

If fillBefore is true, this animation will apply its transformation before the 
start time of the animation. Defaults to true if 
(|android.view.animation.Animation|) is not set to true. Note that this applies 
when using an AnimationSet(|android.view.animation.AnimationSet|) to chain 
animations. The transformation is not applied before the AnimationSet itself 
starts. 


    fillBefore - true if the animation should apply its transformation before it starts 

*android.view.animation.Animation.setFillEnabled(boolean)*

public void setFillEnabled(boolean fillEnabled)

If fillEnabled is true, the animation will apply the value of fillBefore. 
Otherwise, fillBefore is ignored and the animation transformation is always 
applied until the animation ends. 


    fillEnabled - true if the animation should take the value of fillBefore into account 

*android.view.animation.Animation.setInterpolator(Context,int)*

public void setInterpolator(
  android.content.Context context,
  int resID)

Sets the acceleration curve for this animation. The interpolator is loaded as a 
resource from the specified context. 


    context - The application environment 
    resID - The resource identifier of the interpolator to load 

*android.view.animation.Animation.setInterpolator(Interpolator)*

public void setInterpolator(android.view.animation.Interpolator i)

Sets the acceleration curve for this animation. Defaults to a linear 
interpolation. 


    i - The interpolator which defines the acceleration curve 

*android.view.animation.Animation.setListenerHandler(Handler)*

public void setListenerHandler(android.os.Handler handler)

Sets the handler used to invoke listeners. 



*android.view.animation.Animation.setRepeatCount(int)*

public void setRepeatCount(int repeatCount)

Sets how many times the animation should be repeated. If the repeat count is 0, 
the animation is never repeated. If the repeat count is greater than 0 or 
(|android.view.animation.Animation|) , the repeat mode will be taken into 
account. The repeat count is 0 by default. 


    repeatCount - the number of times the animation should be repeated 

*android.view.animation.Animation.setRepeatMode(int)*

public void setRepeatMode(int repeatMode)

Defines what this animation should do when it reaches the end. This setting is 
applied only when the repeat count is either greater than 0 or 
(|android.view.animation.Animation|) . Defaults to 
(|android.view.animation.Animation|) . 


    repeatMode - {@link #RESTART} or {@link #REVERSE} 

*android.view.animation.Animation.setStartOffset(long)*

public void setStartOffset(long startOffset)

When this animation should start relative to the start time. This is most 
useful when composing complex animations using an 
(|android.view.animation.AnimationSet|) where some of the animations components 
start at different times. 


    startOffset - When this Animation should start, in milliseconds from the start time of the 
       root AnimationSet. 

*android.view.animation.Animation.setStartTime(long)*

public void setStartTime(long startTimeMillis)

When this animation should start. When the start time is set to 
(|android.view.animation.Animation|) , the animation will start the first time 
(|android.view.animation.Animation|) is invoked. The time passed to this method 
should be obtained by calling (|android.view.animation.AnimationUtils|) instead 
of (|java.lang.System|) . 


    startTimeMillis - the start time in milliseconds 

*android.view.animation.Animation.setZAdjustment(int)*

public void setZAdjustment(int zAdjustment)

Set the Z ordering mode to use while running the animation. 


    zAdjustment - The desired mode, one of {@link #ZORDER_NORMAL}, {@link #ZORDER_TOP}, or {@link 
       #ZORDER_BOTTOM}. 

*android.view.animation.Animation.start()*

public void start()

Convenience method to start the animation the first time 
(|android.view.animation.Animation|) is invoked. 



*android.view.animation.Animation.startNow()*

public void startNow()

Convenience method to start the animation at the current time in milliseconds. 



*android.view.animation.Animation.willChangeBounds()*

public boolean willChangeBounds()

Indicates whether or not this animation will affect the bounds of the animated 
view. For instance, a fade animation will not affect the bounds whereas a 200% 
scale animation will. 



    Returns: true if this animation will change the view's bounds 

*android.view.animation.Animation.willChangeTransformationMatrix()*

public boolean willChangeTransformationMatrix()

Indicates whether or not this animation will affect the transformation matrix. 
For instance, a fade animation will not affect the matrix whereas a scale 
animation will. 



    Returns: true if this animation will change the transformation matrix 


