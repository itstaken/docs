*android.net.http.AndroidHttpClientConnection* *AndroidHttpClientConnection* A a

public class AndroidHttpClientConnection
  extends    |java.lang.Object|

|android.net.http.AndroidHttpClientConnection_Description|
|android.net.http.AndroidHttpClientConnection_Fields|
|android.net.http.AndroidHttpClientConnection_Constructors|
|android.net.http.AndroidHttpClientConnection_Methods|

================================================================================

*android.net.http.AndroidHttpClientConnection_Constructors*
|android.net.http.AndroidHttpClientConnection()|

*android.net.http.AndroidHttpClientConnection_Methods*
|android.net.http.AndroidHttpClientConnection.bind(Socket,HttpParams)|Bind sock
|android.net.http.AndroidHttpClientConnection.close()|
|android.net.http.AndroidHttpClientConnection.doFlush()|
|android.net.http.AndroidHttpClientConnection.flush()|
|android.net.http.AndroidHttpClientConnection.getLocalAddress()|
|android.net.http.AndroidHttpClientConnection.getLocalPort()|
|android.net.http.AndroidHttpClientConnection.getMetrics()|Returns a collection
|android.net.http.AndroidHttpClientConnection.getRemoteAddress()|
|android.net.http.AndroidHttpClientConnection.getRemotePort()|
|android.net.http.AndroidHttpClientConnection.getSocketTimeout()|
|android.net.http.AndroidHttpClientConnection.isOpen()|
|android.net.http.AndroidHttpClientConnection.isStale()|Checks whether this con
|android.net.http.AndroidHttpClientConnection.parseResponseHeader(Headers)|Pars
|android.net.http.AndroidHttpClientConnection.receiveResponseEntity(Headers)|Re
|android.net.http.AndroidHttpClientConnection.sendRequestEntity(HttpEntityEnclosingRequest)|
|android.net.http.AndroidHttpClientConnection.sendRequestHeader(HttpRequest)|Se
|android.net.http.AndroidHttpClientConnection.setSocketTimeout(int)|
|android.net.http.AndroidHttpClientConnection.shutdown()|
|android.net.http.AndroidHttpClientConnection.toString()|

*android.net.http.AndroidHttpClientConnection_Description*

A alternate class for (@link DefaultHttpClientConnection). It has better 
performance than DefaultHttpClientConnection 



*android.net.http.AndroidHttpClientConnection()*

public AndroidHttpClientConnection()




*android.net.http.AndroidHttpClientConnection.bind(Socket,HttpParams)*

public void bind(
  java.net.Socket socket,
  HttpParams params)
  throws |java.io.IOException|
         
Bind socket and set HttpParams to AndroidHttpClientConnection 


    socket - outgoing socket 
    params - HttpParams 

*android.net.http.AndroidHttpClientConnection.close()*

public void close()
  throws |java.io.IOException|
         




*android.net.http.AndroidHttpClientConnection.doFlush()*

protected void doFlush()
  throws |java.io.IOException|
         




*android.net.http.AndroidHttpClientConnection.flush()*

public void flush()
  throws |java.io.IOException|
         




*android.net.http.AndroidHttpClientConnection.getLocalAddress()*

public |java.net.InetAddress| getLocalAddress()





*android.net.http.AndroidHttpClientConnection.getLocalPort()*

public int getLocalPort()





*android.net.http.AndroidHttpClientConnection.getMetrics()*

public HttpConnectionMetrics getMetrics()

Returns a collection of connection metrcis 



    Returns: HttpConnectionMetrics 

*android.net.http.AndroidHttpClientConnection.getRemoteAddress()*

public |java.net.InetAddress| getRemoteAddress()





*android.net.http.AndroidHttpClientConnection.getRemotePort()*

public int getRemotePort()





*android.net.http.AndroidHttpClientConnection.getSocketTimeout()*

public int getSocketTimeout()





*android.net.http.AndroidHttpClientConnection.isOpen()*

public boolean isOpen()





*android.net.http.AndroidHttpClientConnection.isStale()*

public boolean isStale()

Checks whether this connection has gone down. Network connections may get 
closed during some time of inactivity for several reasons. The next time a read 
is attempted on such a connection it will throw an IOException. This method 
tries to alleviate this inconvenience by trying to find out if a connection is 
still usable. Implementations may do that by attempting a read with a very 
small timeout. Thus this method may block for a small amount of time before 
returning a result. It is therefore an expensive operation. 



    Returns: true if attempts to use this connection are likely to succeed, or false if they 
             are likely to fail and this connection should be closed 

*android.net.http.AndroidHttpClientConnection.parseResponseHeader(Headers)*

public StatusLine parseResponseHeader(android.net.http.Headers headers)
  throws |java.io.IOException|
         |ParseException|
         
Parses the response headers and adds them to the givenheadersobject, and 
returns the response StatusLine 


    headers - store parsed header to headers. 

    Returns: 

*android.net.http.AndroidHttpClientConnection.receiveResponseEntity(Headers)*

public HttpEntity receiveResponseEntity(android.net.http.Headers headers)

Return the next response entity. 


    headers - contains values for parsing entity 

*android.net.http.AndroidHttpClientConnection.sendRequestEntity(HttpEntityEnclosingRequest)*

public void sendRequestEntity(HttpEntityEnclosingRequest request)
  throws |HttpException|
         |java.io.IOException|
         
Sends the request entity over the connection. 


    request - the request whose entity to send. 

*android.net.http.AndroidHttpClientConnection.sendRequestHeader(HttpRequest)*

public void sendRequestHeader(HttpRequest request)
  throws |HttpException|
         |java.io.IOException|
         
Sends the request line and all headers over the connection. 


    request - the request whose headers to send. 

*android.net.http.AndroidHttpClientConnection.setSocketTimeout(int)*

public void setSocketTimeout(int timeout)





*android.net.http.AndroidHttpClientConnection.shutdown()*

public void shutdown()
  throws |java.io.IOException|
         




*android.net.http.AndroidHttpClientConnection.toString()*

public |java.lang.String| toString()






