*android.net.VpnService.Builder* *VpnService.Builder* Helper class to create a V

public class VpnService.Builder
  extends    |java.lang.Object|

|android.net.VpnService.Builder_Description|
|android.net.VpnService.Builder_Fields|
|android.net.VpnService.Builder_Constructors|
|android.net.VpnService.Builder_Methods|

================================================================================

*android.net.VpnService.Builder_Constructors*
|android.net.VpnService.Builder()|

*android.net.VpnService.Builder_Methods*
|android.net.VpnService.Builder.addAddress(InetAddress,int)|Add a network addre
|android.net.VpnService.Builder.addAddress(String,int)|Convenience method to ad
|android.net.VpnService.Builder.addDnsServer(InetAddress)|Add a DNS server to t
|android.net.VpnService.Builder.addDnsServer(String)|Convenience method to add 
|android.net.VpnService.Builder.addRoute(InetAddress,int)|Add a network route t
|android.net.VpnService.Builder.addRoute(String,int)|Convenience method to add 
|android.net.VpnService.Builder.addSearchDomain(String)|Add a search domain to 
|android.net.VpnService.Builder.establish()|Create a VPN interface using the pa
|android.net.VpnService.Builder.setConfigureIntent(PendingIntent)|Set thePendin
|android.net.VpnService.Builder.setMtu(int)|Set the maximum transmission unit (
|android.net.VpnService.Builder.setSession(String)|Set the name of this session

*android.net.VpnService.Builder_Description*

Helper class to create a VPN interface. This class should be always used within 
the scope of the outer (|android.net.VpnService|) . 



*android.net.VpnService.Builder()*

public VpnService.Builder()




*android.net.VpnService.Builder.addAddress(InetAddress,int)*

public |android.net.VpnService.Builder| addAddress(
  java.net.InetAddress address,
  int prefixLength)

Add a network address to the VPN interface. Both IPv4 and IPv6 addresses are 
supported. At least one address must be set before calling 
(|android.net.VpnService.Builder|) . 



*android.net.VpnService.Builder.addAddress(String,int)*

public |android.net.VpnService.Builder| addAddress(
  java.lang.String address,
  int prefixLength)

Convenience method to add a network address to the VPN interface using a 
numeric address string. See (|java.net.InetAddress|) for the definitions of 
numeric address formats. 



*android.net.VpnService.Builder.addDnsServer(InetAddress)*

public |android.net.VpnService.Builder| addDnsServer(java.net.InetAddress address)

Add a DNS server to the VPN connection. Both IPv4 and IPv6 addresses are 
supported. If none is set, the DNS servers of the default network will be used. 



*android.net.VpnService.Builder.addDnsServer(String)*

public |android.net.VpnService.Builder| addDnsServer(java.lang.String address)

Convenience method to add a DNS server to the VPN connection using a numeric 
address string. See (|java.net.InetAddress|) for the definitions of numeric 
address formats. 



*android.net.VpnService.Builder.addRoute(InetAddress,int)*

public |android.net.VpnService.Builder| addRoute(
  java.net.InetAddress address,
  int prefixLength)

Add a network route to the VPN interface. Both IPv4 and IPv6 routes are 
supported. 



*android.net.VpnService.Builder.addRoute(String,int)*

public |android.net.VpnService.Builder| addRoute(
  java.lang.String address,
  int prefixLength)

Convenience method to add a network route to the VPN interface using a numeric 
address string. See (|java.net.InetAddress|) for the definitions of numeric 
address formats. 



*android.net.VpnService.Builder.addSearchDomain(String)*

public |android.net.VpnService.Builder| addSearchDomain(java.lang.String domain)

Add a search domain to the DNS resolver. 



*android.net.VpnService.Builder.establish()*

public |android.os.ParcelFileDescriptor| establish()

Create a VPN interface using the parameters supplied to this builder. The 
interface works on IP packets, and a file descriptor is returned for the 
application to access them. Each read retrieves an outgoing packet which was 
routed to the interface. Each write injects an incoming packet just like it was 
received from the interface. The file descriptor is put into non-blocking mode 
by default to avoid blocking Java threads. To use the file descriptor 
completely in native space, see (|android.os.ParcelFileDescriptor|) . The 
application MUST close the file descriptor when the VPN connection is 
terminated. The VPN interface will be removed and the network will be restored 
by the system automatically. 

To avoid conflicts, there can be only one active VPN interface at the same 
time. Usually network parameters are never changed during the lifetime of a VPN 
connection. It is also common for an application to create a new file 
descriptor after closing the previous one. However, it is rare but not 
impossible to have two interfaces while performing a seamless handover. In this 
case, the old interface will be deactivated when the new one is created 
successfully. Both file descriptors are valid but now outgoing packets will be 
routed to the new interface. Therefore, after draining the old file descriptor, 
the application MUST close it and start using the new file descriptor. If the 
new interface cannot be created, the existing interface and its file descriptor 
remain untouched. 

An exception will be thrown if the interface cannot be created for any reason. 
However, this method returnsnullif the application is not prepared or is 
revoked. This helps solve possible race conditions between other VPN 
applications. 



    Returns: {@link ParcelFileDescriptor} of the VPN interface, or {@code null} if the 
             application is not prepared. 

*android.net.VpnService.Builder.setConfigureIntent(PendingIntent)*

public |android.net.VpnService.Builder| setConfigureIntent(android.app.PendingIntent intent)

Set the (|android.app.PendingIntent|) to an activity for users to configure the 
VPN connection. If it is not set, the button to configure will not be shown in 
system-managed dialogs. 



*android.net.VpnService.Builder.setMtu(int)*

public |android.net.VpnService.Builder| setMtu(int mtu)

Set the maximum transmission unit (MTU) of the VPN interface. If it is not set, 
the default value in the operating system will be used. 



*android.net.VpnService.Builder.setSession(String)*

public |android.net.VpnService.Builder| setSession(java.lang.String session)

Set the name of this session. It will be displayed in system-managed dialogs 
and notifications. This is recommended not required. 




