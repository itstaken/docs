*android.net.DummyDataStateTracker* *DummyDataStateTracker* A dummy data state t

public class DummyDataStateTracker
  extends    |android.net.BaseNetworkStateTracker|

|android.net.DummyDataStateTracker_Description|
|android.net.DummyDataStateTracker_Fields|
|android.net.DummyDataStateTracker_Constructors|
|android.net.DummyDataStateTracker_Methods|

================================================================================

*android.net.DummyDataStateTracker_Constructors*
|android.net.DummyDataStateTracker(int,String)|Create a new DummyDataStateTrack

*android.net.DummyDataStateTracker_Methods*
|android.net.DummyDataStateTracker.addStackedLink(LinkProperties)|
|android.net.DummyDataStateTracker.captivePortalCheckComplete()|
|android.net.DummyDataStateTracker.captivePortalCheckCompleted(boolean)|
|android.net.DummyDataStateTracker.defaultRouteSet(boolean)|
|android.net.DummyDataStateTracker.getLinkCapabilities()|
|android.net.DummyDataStateTracker.getLinkProperties()|
|android.net.DummyDataStateTracker.getNetworkInfo()|
|android.net.DummyDataStateTracker.getTcpBufferSizesPropName()|Return the syste
|android.net.DummyDataStateTracker.isAvailable()|Report whether data connectivi
|android.net.DummyDataStateTracker.isDefaultRouteSet()|
|android.net.DummyDataStateTracker.isPrivateDnsRouteSet()|
|android.net.DummyDataStateTracker.isTeardownRequested()|
|android.net.DummyDataStateTracker.privateDnsRouteSet(boolean)|
|android.net.DummyDataStateTracker.reconnect()|Re-enable mobile data connectivi
|android.net.DummyDataStateTracker.releaseWakeLock()|This is not implemented.
|android.net.DummyDataStateTracker.removeStackedLink(LinkProperties)|
|android.net.DummyDataStateTracker.setDependencyMet(boolean)|
|android.net.DummyDataStateTracker.setPolicyDataEnable(boolean)|
|android.net.DummyDataStateTracker.setRadio(boolean)|Turn on or off the mobile 
|android.net.DummyDataStateTracker.setTeardownRequested(boolean)|
|android.net.DummyDataStateTracker.setUserDataEnable(boolean)|
|android.net.DummyDataStateTracker.startMonitoring(Context,Handler)|Begin monit
|android.net.DummyDataStateTracker.supplyMessenger(Messenger)|
|android.net.DummyDataStateTracker.teardown()|Tear down mobile data connectivit
|android.net.DummyDataStateTracker.toString()|

*android.net.DummyDataStateTracker_Description*

A dummy data state tracker for use when we don't have a real radio connection. 
useful when bringing up a board or when you have network access through other 
means. 



*android.net.DummyDataStateTracker(int,String)*

public DummyDataStateTracker(
  int netType,
  java.lang.String tag)

Create a new DummyDataStateTracker 

    netType - the ConnectivityManager network type 
    tag - the name of this network 

*android.net.DummyDataStateTracker.addStackedLink(LinkProperties)*

public void addStackedLink(android.net.LinkProperties link)





*android.net.DummyDataStateTracker.captivePortalCheckComplete()*

public void captivePortalCheckComplete()





*android.net.DummyDataStateTracker.captivePortalCheckCompleted(boolean)*

public void captivePortalCheckCompleted(boolean isCaptivePortal)





*android.net.DummyDataStateTracker.defaultRouteSet(boolean)*

public void defaultRouteSet(boolean enabled)





*android.net.DummyDataStateTracker.getLinkCapabilities()*

public |android.net.LinkCapabilities| getLinkCapabilities()





*android.net.DummyDataStateTracker.getLinkProperties()*

public |android.net.LinkProperties| getLinkProperties()





*android.net.DummyDataStateTracker.getNetworkInfo()*

public |android.net.NetworkInfo| getNetworkInfo()





*android.net.DummyDataStateTracker.getTcpBufferSizesPropName()*

public |java.lang.String| getTcpBufferSizesPropName()

Return the system properties name associated with the tcp buffer sizes for this 
network. 



*android.net.DummyDataStateTracker.isAvailable()*

public boolean isAvailable()

Report whether data connectivity is possible. 



*android.net.DummyDataStateTracker.isDefaultRouteSet()*

public boolean isDefaultRouteSet()





*android.net.DummyDataStateTracker.isPrivateDnsRouteSet()*

public boolean isPrivateDnsRouteSet()





*android.net.DummyDataStateTracker.isTeardownRequested()*

public boolean isTeardownRequested()





*android.net.DummyDataStateTracker.privateDnsRouteSet(boolean)*

public void privateDnsRouteSet(boolean enabled)





*android.net.DummyDataStateTracker.reconnect()*

public boolean reconnect()

Re-enable mobile data connectivity after a 
(|android.net.DummyDataStateTracker|) . TODO - make async and always get a 
notification? 



*android.net.DummyDataStateTracker.releaseWakeLock()*

public void releaseWakeLock()

This is not implemented. 



*android.net.DummyDataStateTracker.removeStackedLink(LinkProperties)*

public void removeStackedLink(android.net.LinkProperties link)





*android.net.DummyDataStateTracker.setDependencyMet(boolean)*

public void setDependencyMet(boolean met)





*android.net.DummyDataStateTracker.setPolicyDataEnable(boolean)*

public void setPolicyDataEnable(boolean enabled)





*android.net.DummyDataStateTracker.setRadio(boolean)*

public boolean setRadio(boolean turnOn)

Turn on or off the mobile radio. No connectivity will be possible while the 
radio is off. The operation is a no-op if the radio is already in the desired 
state. 


    turnOn - {@code true} if the radio should be turned on, {@code false} if 

*android.net.DummyDataStateTracker.setTeardownRequested(boolean)*

public void setTeardownRequested(boolean isRequested)





*android.net.DummyDataStateTracker.setUserDataEnable(boolean)*

public void setUserDataEnable(boolean enabled)





*android.net.DummyDataStateTracker.startMonitoring(Context,Handler)*

public void startMonitoring(
  android.content.Context context,
  android.os.Handler target)

Begin monitoring data connectivity. 


    context - is the current Android context 
    target - is the Handler to which to return the events. 

*android.net.DummyDataStateTracker.supplyMessenger(Messenger)*

public void supplyMessenger(android.os.Messenger messenger)





*android.net.DummyDataStateTracker.teardown()*

public boolean teardown()

Tear down mobile data connectivity, i.e., disable the ability to create mobile 
data connections. TODO - make async and return nothing? 



*android.net.DummyDataStateTracker.toString()*

public |java.lang.String| toString()






