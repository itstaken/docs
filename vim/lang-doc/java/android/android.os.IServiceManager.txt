*android.os.IServiceManager* *IServiceManager* Basic interface for finding and p

public interface interface IServiceManager

  implements |android.os.IInterface|

|android.os.IServiceManager_Description|
|android.os.IServiceManager_Fields|
|android.os.IServiceManager_Constructors|
|android.os.IServiceManager_Methods|

================================================================================

*android.os.IServiceManager_Fields*
|int_android.os.IServiceManager.ADD_SERVICE_TRANSACTION|
|int_android.os.IServiceManager.CHECK_SERVICE_TRANSACTION|
|int_android.os.IServiceManager.CHECK_SERVICES_TRANSACTION|
|java.lang.String_android.os.IServiceManager.descriptor|
|int_android.os.IServiceManager.GET_SERVICE_TRANSACTION|
|int_android.os.IServiceManager.LIST_SERVICES_TRANSACTION|
|int_android.os.IServiceManager.SET_PERMISSION_CONTROLLER_TRANSACTION|

*android.os.IServiceManager_Methods*
|android.os.IServiceManager.addService(String,IBinder,boolean)|Place a new @a s
|android.os.IServiceManager.checkService(String)|Retrieve an existing service c
|android.os.IServiceManager.getService(String)|Retrieve an existing service cal
|android.os.IServiceManager.listServices()|Return a list of all currently runni
|android.os.IServiceManager.setPermissionController(IPermissionController)|Assi

*android.os.IServiceManager_Description*

Basic interface for finding and publishing system services. 

An implementation of this interface is usually published as the global context 
object, which can be retrieved via BinderNative.getContextObject(). An easy way 
to retrieve this is with the static method BnServiceManager.getDefault(). 



*int_android.os.IServiceManager.ADD_SERVICE_TRANSACTION*




*int_android.os.IServiceManager.CHECK_SERVICE_TRANSACTION*




*int_android.os.IServiceManager.CHECK_SERVICES_TRANSACTION*




*java.lang.String_android.os.IServiceManager.descriptor*




*int_android.os.IServiceManager.GET_SERVICE_TRANSACTION*




*int_android.os.IServiceManager.LIST_SERVICES_TRANSACTION*




*int_android.os.IServiceManager.SET_PERMISSION_CONTROLLER_TRANSACTION*





*android.os.IServiceManager.addService(String,IBinder,boolean)*

public void addService(
  java.lang.String name,
  android.os.IBinder service,
  boolean allowIsolated)
  throws |android.os.RemoteException|
         
Place a new @a service called @a name into the service manager. 



*android.os.IServiceManager.checkService(String)*

public |android.os.IBinder| checkService(java.lang.String name)
  throws |android.os.RemoteException|
         
Retrieve an existing service called @a name from the service manager. 
Non-blocking. 



*android.os.IServiceManager.getService(String)*

public |android.os.IBinder| getService(java.lang.String name)
  throws |android.os.RemoteException|
         
Retrieve an existing service called @a name from the service manager. Blocks 
for a few seconds waiting for it to be published if it does not already exist. 



*android.os.IServiceManager.listServices()*

public |java.lang.String|[] listServices()
  throws |android.os.RemoteException|
         
Return a list of all currently running services. 



*android.os.IServiceManager.setPermissionController(IPermissionController)*

public void setPermissionController(IPermissionController controller)
  throws |android.os.RemoteException|
         
Assign a permission controller to the service manager. After set, this 
interface is checked before any services are added. 




