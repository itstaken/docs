*android.widget.SlidingDrawer* *SlidingDrawer* SlidingDrawer hides content out o

public class SlidingDrawer
  extends    |android.view.ViewGroup|

|android.widget.SlidingDrawer_Description|
|android.widget.SlidingDrawer_Fields|
|android.widget.SlidingDrawer_Constructors|
|android.widget.SlidingDrawer_Methods|

================================================================================

*android.widget.SlidingDrawer_Fields*
|int_android.widget.SlidingDrawer.ORIENTATION_HORIZONTAL|
|int_android.widget.SlidingDrawer.ORIENTATION_VERTICAL|

*android.widget.SlidingDrawer_Constructors*
|android.widget.SlidingDrawer(Context,AttributeSet)|Creates a new SlidingDrawer
|android.widget.SlidingDrawer(Context,AttributeSet,int)|Creates a new SlidingDr

*android.widget.SlidingDrawer_Methods*
|android.widget.SlidingDrawer.animateClose()|Closes the drawer with an animatio
|android.widget.SlidingDrawer.animateOpen()|Opens the drawer with an animation.
|android.widget.SlidingDrawer.animateToggle()|Toggles the drawer open and close
|android.widget.SlidingDrawer.close()|Closes the drawer immediately.
|android.widget.SlidingDrawer.dispatchDraw(Canvas)|
|android.widget.SlidingDrawer.getContent()|Returns the content of the drawer.
|android.widget.SlidingDrawer.getHandle()|Returns the handle of the drawer.
|android.widget.SlidingDrawer.isMoving()|Indicates whether the drawer is scroll
|android.widget.SlidingDrawer.isOpened()|Indicates whether the drawer is curren
|android.widget.SlidingDrawer.lock()|Locks the SlidingDrawer so that touch even
|android.widget.SlidingDrawer.onFinishInflate()|
|android.widget.SlidingDrawer.onInitializeAccessibilityEvent(AccessibilityEvent)|
|android.widget.SlidingDrawer.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)|
|android.widget.SlidingDrawer.onInterceptTouchEvent(MotionEvent)|
|android.widget.SlidingDrawer.onLayout(boolean,int,int,int,int)|
|android.widget.SlidingDrawer.onMeasure(int,int)|
|android.widget.SlidingDrawer.onTouchEvent(MotionEvent)|
|android.widget.SlidingDrawer.open()|Opens the drawer immediately.
|android.widget.SlidingDrawer.setOnDrawerCloseListener(SlidingDrawer.OnDrawerCloseListener)|
|android.widget.SlidingDrawer.setOnDrawerOpenListener(SlidingDrawer.OnDrawerOpenListener)|
|android.widget.SlidingDrawer.setOnDrawerScrollListener(SlidingDrawer.OnDrawerScrollListener)|
|android.widget.SlidingDrawer.toggle()|Toggles the drawer open and close.
|android.widget.SlidingDrawer.unlock()|Unlocks the SlidingDrawer so that touch 

*android.widget.SlidingDrawer_Description*

SlidingDrawer hides content out of the screen and allows the user to drag a 
handle to bring the content on screen. SlidingDrawer can be used vertically or 
horizontally. 

A special widget composed of two children views: the handle, that the users 
drags, and the content, attached to the handle and dragged with it. 

SlidingDrawer should be used as an overlay inside layouts. This means 
SlidingDrawer should only be used inside of a FrameLayout or a RelativeLayout 
for instance. The size of the SlidingDrawer defines how much space the content 
will occupy once slid out so SlidingDrawer should usually use match_parent for 
both its dimensions. 

Inside an XML layout, SlidingDrawer must define the id of the handle and of the 
content: 

<SlidingDrawer android:id="@+id/drawer" android:layout_width="match_parent" 
android:layout_height="match_parent" 

android:handle="@+id/handle" android:content="@+id/content"> 

<ImageView android:id="@id/handle" android:layout_width="88dip" 
android:layout_height="44dip" /> 

<GridView android:id="@id/content" android:layout_width="match_parent" 
android:layout_height="match_parent" /> 

</SlidingDrawer> 


  Deprecated: This class is not supported anymore. It is recommended you
 base your own implementation on the source code for the Android Open
 Source Project if you must use it in your application.

*int_android.widget.SlidingDrawer.ORIENTATION_HORIZONTAL*




*int_android.widget.SlidingDrawer.ORIENTATION_VERTICAL*





*android.widget.SlidingDrawer(Context,AttributeSet)*

public SlidingDrawer(
  android.content.Context context,
  android.util.AttributeSet attrs)

Creates a new SlidingDrawer from a specified set of attributes defined in XML. 

    context - The application's environment. 
    attrs - The attributes defined in XML. 

*android.widget.SlidingDrawer(Context,AttributeSet,int)*

public SlidingDrawer(
  android.content.Context context,
  android.util.AttributeSet attrs,
  int defStyle)

Creates a new SlidingDrawer from a specified set of attributes defined in XML. 

    context - The application's environment. 
    attrs - The attributes defined in XML. 
    defStyle - The style to apply to this widget. 

*android.widget.SlidingDrawer.animateClose()*

public void animateClose()

Closes the drawer with an animation. 



*android.widget.SlidingDrawer.animateOpen()*

public void animateOpen()

Opens the drawer with an animation. 



*android.widget.SlidingDrawer.animateToggle()*

public void animateToggle()

Toggles the drawer open and close with an animation. 



*android.widget.SlidingDrawer.close()*

public void close()

Closes the drawer immediately. 



*android.widget.SlidingDrawer.dispatchDraw(Canvas)*

protected void dispatchDraw(Canvas canvas)





*android.widget.SlidingDrawer.getContent()*

public |android.view.View| getContent()

Returns the content of the drawer. 



    Returns: The View reprenseting the content of the drawer, identified by the "content" id 
             in XML. 

*android.widget.SlidingDrawer.getHandle()*

public |android.view.View| getHandle()

Returns the handle of the drawer. 



    Returns: The View reprenseting the handle of the drawer, identified by the "handle" id 
             in XML. 

*android.widget.SlidingDrawer.isMoving()*

public boolean isMoving()

Indicates whether the drawer is scrolling or flinging. 



    Returns: True if the drawer is scroller or flinging, false otherwise. 

*android.widget.SlidingDrawer.isOpened()*

public boolean isOpened()

Indicates whether the drawer is currently fully opened. 



    Returns: True if the drawer is opened, false otherwise. 

*android.widget.SlidingDrawer.lock()*

public void lock()

Locks the SlidingDrawer so that touch events are ignores. 



*android.widget.SlidingDrawer.onFinishInflate()*

protected void onFinishInflate()





*android.widget.SlidingDrawer.onInitializeAccessibilityEvent(AccessibilityEvent)*

public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent event)





*android.widget.SlidingDrawer.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)*

public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo info)





*android.widget.SlidingDrawer.onInterceptTouchEvent(MotionEvent)*

public boolean onInterceptTouchEvent(android.view.MotionEvent event)





*android.widget.SlidingDrawer.onLayout(boolean,int,int,int,int)*

protected void onLayout(
  boolean changed,
  int l,
  int t,
  int r,
  int b)





*android.widget.SlidingDrawer.onMeasure(int,int)*

protected void onMeasure(
  int widthMeasureSpec,
  int heightMeasureSpec)





*android.widget.SlidingDrawer.onTouchEvent(MotionEvent)*

public boolean onTouchEvent(android.view.MotionEvent event)





*android.widget.SlidingDrawer.open()*

public void open()

Opens the drawer immediately. 



*android.widget.SlidingDrawer.setOnDrawerCloseListener(SlidingDrawer.OnDrawerCloseListener)*

public void setOnDrawerCloseListener(android.widget.SlidingDrawer.OnDrawerCloseListener onDrawerCloseListener)

Sets the listener that receives a notification when the drawer becomes close. 


    onDrawerCloseListener - The listener to be notified when the drawer is closed. 

*android.widget.SlidingDrawer.setOnDrawerOpenListener(SlidingDrawer.OnDrawerOpenListener)*

public void setOnDrawerOpenListener(android.widget.SlidingDrawer.OnDrawerOpenListener onDrawerOpenListener)

Sets the listener that receives a notification when the drawer becomes open. 


    onDrawerOpenListener - The listener to be notified when the drawer is opened. 

*android.widget.SlidingDrawer.setOnDrawerScrollListener(SlidingDrawer.OnDrawerScrollListener)*

public void setOnDrawerScrollListener(android.widget.SlidingDrawer.OnDrawerScrollListener onDrawerScrollListener)

Sets the listener that receives a notification when the drawer starts or ends a 
scroll. A fling is considered as a scroll. A fling will also trigger a drawer 
opened or drawer closed event. 


    onDrawerScrollListener - The listener to be notified when scrolling starts or stops. 

*android.widget.SlidingDrawer.toggle()*

public void toggle()

Toggles the drawer open and close. Takes effect immediately. 



*android.widget.SlidingDrawer.unlock()*

public void unlock()

Unlocks the SlidingDrawer so that touch events are processed. 




