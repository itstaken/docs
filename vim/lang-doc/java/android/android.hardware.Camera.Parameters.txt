*android.hardware.Camera.Parameters* *Camera.Parameters* Camera service settings

public class Camera.Parameters
  extends    |java.lang.Object|

|android.hardware.Camera.Parameters_Description|
|android.hardware.Camera.Parameters_Fields|
|android.hardware.Camera.Parameters_Constructors|
|android.hardware.Camera.Parameters_Methods|

================================================================================

*android.hardware.Camera.Parameters_Fields*
|java.lang.String_android.hardware.Camera.Parameters.ANTIBANDING_50HZ|
|java.lang.String_android.hardware.Camera.Parameters.ANTIBANDING_60HZ|
|java.lang.String_android.hardware.Camera.Parameters.ANTIBANDING_AUTO|
|java.lang.String_android.hardware.Camera.Parameters.ANTIBANDING_OFF|
|java.lang.String_android.hardware.Camera.Parameters.EFFECT_AQUA|
|java.lang.String_android.hardware.Camera.Parameters.EFFECT_BLACKBOARD|
|java.lang.String_android.hardware.Camera.Parameters.EFFECT_MONO|
|java.lang.String_android.hardware.Camera.Parameters.EFFECT_NEGATIVE|
|java.lang.String_android.hardware.Camera.Parameters.EFFECT_NONE|
|java.lang.String_android.hardware.Camera.Parameters.EFFECT_POSTERIZE|
|java.lang.String_android.hardware.Camera.Parameters.EFFECT_SEPIA|
|java.lang.String_android.hardware.Camera.Parameters.EFFECT_SOLARIZE|
|java.lang.String_android.hardware.Camera.Parameters.EFFECT_WHITEBOARD|
|java.lang.String_android.hardware.Camera.Parameters.FLASH_MODE_AUTO|
|java.lang.String_android.hardware.Camera.Parameters.FLASH_MODE_OFF|
|java.lang.String_android.hardware.Camera.Parameters.FLASH_MODE_ON|
|java.lang.String_android.hardware.Camera.Parameters.FLASH_MODE_RED_EYE|
|java.lang.String_android.hardware.Camera.Parameters.FLASH_MODE_TORCH|
|int_android.hardware.Camera.Parameters.FOCUS_DISTANCE_FAR_INDEX|
|int_android.hardware.Camera.Parameters.FOCUS_DISTANCE_NEAR_INDEX|
|int_android.hardware.Camera.Parameters.FOCUS_DISTANCE_OPTIMAL_INDEX|
|java.lang.String_android.hardware.Camera.Parameters.FOCUS_MODE_AUTO|
|java.lang.String_android.hardware.Camera.Parameters.FOCUS_MODE_CONTINUOUS_PICTURE|
|java.lang.String_android.hardware.Camera.Parameters.FOCUS_MODE_CONTINUOUS_VIDEO|
|java.lang.String_android.hardware.Camera.Parameters.FOCUS_MODE_EDOF|
|java.lang.String_android.hardware.Camera.Parameters.FOCUS_MODE_FIXED|
|java.lang.String_android.hardware.Camera.Parameters.FOCUS_MODE_INFINITY|
|java.lang.String_android.hardware.Camera.Parameters.FOCUS_MODE_MACRO|
|int_android.hardware.Camera.Parameters.PREVIEW_FPS_MAX_INDEX|
|int_android.hardware.Camera.Parameters.PREVIEW_FPS_MIN_INDEX|
|java.lang.String_android.hardware.Camera.Parameters.SCENE_MODE_ACTION|
|java.lang.String_android.hardware.Camera.Parameters.SCENE_MODE_AUTO|
|java.lang.String_android.hardware.Camera.Parameters.SCENE_MODE_BARCODE|
|java.lang.String_android.hardware.Camera.Parameters.SCENE_MODE_BEACH|
|java.lang.String_android.hardware.Camera.Parameters.SCENE_MODE_CANDLELIGHT|
|java.lang.String_android.hardware.Camera.Parameters.SCENE_MODE_FIREWORKS|
|java.lang.String_android.hardware.Camera.Parameters.SCENE_MODE_HDR|
|java.lang.String_android.hardware.Camera.Parameters.SCENE_MODE_LANDSCAPE|
|java.lang.String_android.hardware.Camera.Parameters.SCENE_MODE_NIGHT|
|java.lang.String_android.hardware.Camera.Parameters.SCENE_MODE_NIGHT_PORTRAIT|
|java.lang.String_android.hardware.Camera.Parameters.SCENE_MODE_PARTY|
|java.lang.String_android.hardware.Camera.Parameters.SCENE_MODE_PORTRAIT|
|java.lang.String_android.hardware.Camera.Parameters.SCENE_MODE_SNOW|
|java.lang.String_android.hardware.Camera.Parameters.SCENE_MODE_SPORTS|
|java.lang.String_android.hardware.Camera.Parameters.SCENE_MODE_STEADYPHOTO|
|java.lang.String_android.hardware.Camera.Parameters.SCENE_MODE_SUNSET|
|java.lang.String_android.hardware.Camera.Parameters.SCENE_MODE_THEATRE|
|java.lang.String_android.hardware.Camera.Parameters.WHITE_BALANCE_AUTO|
|java.lang.String_android.hardware.Camera.Parameters.WHITE_BALANCE_CLOUDY_DAYLIGHT|
|java.lang.String_android.hardware.Camera.Parameters.WHITE_BALANCE_DAYLIGHT|
|java.lang.String_android.hardware.Camera.Parameters.WHITE_BALANCE_FLUORESCENT|
|java.lang.String_android.hardware.Camera.Parameters.WHITE_BALANCE_INCANDESCENT|
|java.lang.String_android.hardware.Camera.Parameters.WHITE_BALANCE_SHADE|
|java.lang.String_android.hardware.Camera.Parameters.WHITE_BALANCE_TWILIGHT|
|java.lang.String_android.hardware.Camera.Parameters.WHITE_BALANCE_WARM_FLUORESCENT|

*android.hardware.Camera.Parameters_Methods*
|android.hardware.Camera.Parameters.dump()|Writes the current Parameters to the
|android.hardware.Camera.Parameters.flatten()|Creates a single string with all 
|android.hardware.Camera.Parameters.get(String)|Returns the value of a String p
|android.hardware.Camera.Parameters.getAntibanding()|Gets the current antibandi
|android.hardware.Camera.Parameters.getAutoExposureLock()|Gets the state of the
|android.hardware.Camera.Parameters.getAutoWhiteBalanceLock()|Gets the state of
|android.hardware.Camera.Parameters.getColorEffect()|Gets the current color eff
|android.hardware.Camera.Parameters.getExposureCompensation()|Gets the current 
|android.hardware.Camera.Parameters.getExposureCompensationStep()|Gets the expo
|android.hardware.Camera.Parameters.getFlashMode()|Gets the current flash mode 
|android.hardware.Camera.Parameters.getFocalLength()|Gets the focal length (in 
|android.hardware.Camera.Parameters.getFocusAreas()|Gets the current focus area
|android.hardware.Camera.Parameters.getFocusDistances(float[])|Gets the distanc
|android.hardware.Camera.Parameters.getFocusMode()|Gets the current focus mode 
|android.hardware.Camera.Parameters.getHorizontalViewAngle()|Gets the horizonta
|android.hardware.Camera.Parameters.getInt(String)|Returns the value of an inte
|android.hardware.Camera.Parameters.getJpegQuality()|Returns the quality settin
|android.hardware.Camera.Parameters.getJpegThumbnailQuality()|Returns the quali
|android.hardware.Camera.Parameters.getJpegThumbnailSize()|Returns the dimensio
|android.hardware.Camera.Parameters.getMaxExposureCompensation()|Gets the maxim
|android.hardware.Camera.Parameters.getMaxNumDetectedFaces()|Gets the maximum n
|android.hardware.Camera.Parameters.getMaxNumFocusAreas()|Gets the maximum numb
|android.hardware.Camera.Parameters.getMaxNumMeteringAreas()|Gets the maximum n
|android.hardware.Camera.Parameters.getMaxZoom()|Gets the maximum zoom value al
|android.hardware.Camera.Parameters.getMeteringAreas()|Gets the current meterin
|android.hardware.Camera.Parameters.getMinExposureCompensation()|Gets the minim
|android.hardware.Camera.Parameters.getPictureFormat()|Returns the image format
|android.hardware.Camera.Parameters.getPictureSize()|Returns the dimension sett
|android.hardware.Camera.Parameters.getPreferredPreviewSizeForVideo()|Returns t
|android.hardware.Camera.Parameters.getPreviewFormat()|Returns the image format
|android.hardware.Camera.Parameters.getPreviewFpsRange(int[])|Returns the curre
|android.hardware.Camera.Parameters.getPreviewFrameRate()|Returns the setting f
|android.hardware.Camera.Parameters.getPreviewSize()|Returns the dimensions set
|android.hardware.Camera.Parameters.getSceneMode()|Gets the current scene mode 
|android.hardware.Camera.Parameters.getSupportedAntibanding()|Gets the supporte
|android.hardware.Camera.Parameters.getSupportedColorEffects()|Gets the support
|android.hardware.Camera.Parameters.getSupportedFlashModes()|Gets the supported
|android.hardware.Camera.Parameters.getSupportedFocusModes()|Gets the supported
|android.hardware.Camera.Parameters.getSupportedJpegThumbnailSizes()|Gets the s
|android.hardware.Camera.Parameters.getSupportedPictureFormats()|Gets the suppo
|android.hardware.Camera.Parameters.getSupportedPictureSizes()|Gets the support
|android.hardware.Camera.Parameters.getSupportedPreviewFormats()|Gets the suppo
|android.hardware.Camera.Parameters.getSupportedPreviewFpsRange()|Gets the supp
|android.hardware.Camera.Parameters.getSupportedPreviewFrameRates()|Gets the su
|android.hardware.Camera.Parameters.getSupportedPreviewSizes()|Gets the support
|android.hardware.Camera.Parameters.getSupportedSceneModes()|Gets the supported
|android.hardware.Camera.Parameters.getSupportedVideoSizes()|Gets the supported
|android.hardware.Camera.Parameters.getSupportedWhiteBalance()|Gets the support
|android.hardware.Camera.Parameters.getVerticalViewAngle()|Gets the vertical an
|android.hardware.Camera.Parameters.getVideoStabilization()|Get the current sta
|android.hardware.Camera.Parameters.getWhiteBalance()|Gets the current white ba
|android.hardware.Camera.Parameters.getZoom()|Gets current zoom value.
|android.hardware.Camera.Parameters.getZoomRatios()|Gets the zoom ratios of all
|android.hardware.Camera.Parameters.isAutoExposureLockSupported()|Returns true 
|android.hardware.Camera.Parameters.isAutoWhiteBalanceLockSupported()|Returns t
|android.hardware.Camera.Parameters.isSmoothZoomSupported()|Returns true if smo
|android.hardware.Camera.Parameters.isVideoSnapshotSupported()|Returns true if 
|android.hardware.Camera.Parameters.isVideoStabilizationSupported()|Returns tru
|android.hardware.Camera.Parameters.isZoomSupported()|Returns true if zoom is s
|android.hardware.Camera.Parameters.remove(String)|
|android.hardware.Camera.Parameters.removeGpsData()|Removes GPS latitude, longi
|android.hardware.Camera.Parameters.set(String,int)|Sets an integer parameter.
|android.hardware.Camera.Parameters.set(String,String)|Sets a String parameter.
|android.hardware.Camera.Parameters.setAntibanding(String)|Sets the antibanding
|android.hardware.Camera.Parameters.setAutoExposureLock(boolean)|Sets the auto-
|android.hardware.Camera.Parameters.setAutoWhiteBalanceLock(boolean)|Sets the a
|android.hardware.Camera.Parameters.setColorEffect(String)|Sets the current col
|android.hardware.Camera.Parameters.setExposureCompensation(int)|Sets the expos
|android.hardware.Camera.Parameters.setFlashMode(String)|Sets the flash mode.
|android.hardware.Camera.Parameters.setFocusAreas(List<Camera.Area>)|Sets focus
|android.hardware.Camera.Parameters.setFocusMode(String)|Sets the focus mode.
|android.hardware.Camera.Parameters.setGpsAltitude(double)|Sets GPS altitude.
|android.hardware.Camera.Parameters.setGpsLatitude(double)|Sets GPS latitude co
|android.hardware.Camera.Parameters.setGpsLongitude(double)|Sets GPS longitude 
|android.hardware.Camera.Parameters.setGpsProcessingMethod(String)|Sets GPS pro
|android.hardware.Camera.Parameters.setGpsTimestamp(long)|Sets GPS timestamp.
|android.hardware.Camera.Parameters.setJpegQuality(int)|Sets Jpeg quality of ca
|android.hardware.Camera.Parameters.setJpegThumbnailQuality(int)|Sets the quali
|android.hardware.Camera.Parameters.setJpegThumbnailSize(int,int)|Sets the dime
|android.hardware.Camera.Parameters.setMeteringAreas(List<Camera.Area>)|Sets me
|android.hardware.Camera.Parameters.setPictureFormat(int)|Sets the image format
|android.hardware.Camera.Parameters.setPictureSize(int,int)|Sets the dimensions
|android.hardware.Camera.Parameters.setPreviewFormat(int)|Sets the image format
|android.hardware.Camera.Parameters.setPreviewFpsRange(int,int)|Sets the minimu
|android.hardware.Camera.Parameters.setPreviewFrameRate(int)|Sets the rate at w
|android.hardware.Camera.Parameters.setPreviewSize(int,int)|Sets the dimensions
|android.hardware.Camera.Parameters.setRecordingHint(boolean)|Sets recording mo
|android.hardware.Camera.Parameters.setRotation(int)|Sets the clockwise rotatio
|android.hardware.Camera.Parameters.setSceneMode(String)|Sets the scene mode.
|android.hardware.Camera.Parameters.setVideoStabilization(boolean)|Enables and 
|android.hardware.Camera.Parameters.setWhiteBalance(String)|Sets the white bala
|android.hardware.Camera.Parameters.setZoom(int)|Sets current zoom value.
|android.hardware.Camera.Parameters.unflatten(String)|Takes a flattened string 

*android.hardware.Camera.Parameters_Description*

Camera service settings. 

To make camera parameters take effect, applications have to call 
(|android.hardware.Camera|) . For example, after 
(|android.hardware.Camera.Parameters|) is called, white balance is not actually 
changed until (|android.hardware.Camera|) is called with the changed parameters 
object. 

Different devices may have different camera capabilities, such as picture size 
or flash modes. The application should query the camera capabilities before 
setting parameters. For example, the application should call 
(|android.hardware.Camera.Parameters|) before calling 
(|android.hardware.Camera.Parameters|) . If the camera does not support color 
effects, (|android.hardware.Camera.Parameters|) will return null. 



*java.lang.String_android.hardware.Camera.Parameters.ANTIBANDING_50HZ*




*java.lang.String_android.hardware.Camera.Parameters.ANTIBANDING_60HZ*




*java.lang.String_android.hardware.Camera.Parameters.ANTIBANDING_AUTO*




*java.lang.String_android.hardware.Camera.Parameters.ANTIBANDING_OFF*




*java.lang.String_android.hardware.Camera.Parameters.EFFECT_AQUA*




*java.lang.String_android.hardware.Camera.Parameters.EFFECT_BLACKBOARD*




*java.lang.String_android.hardware.Camera.Parameters.EFFECT_MONO*




*java.lang.String_android.hardware.Camera.Parameters.EFFECT_NEGATIVE*




*java.lang.String_android.hardware.Camera.Parameters.EFFECT_NONE*




*java.lang.String_android.hardware.Camera.Parameters.EFFECT_POSTERIZE*




*java.lang.String_android.hardware.Camera.Parameters.EFFECT_SEPIA*




*java.lang.String_android.hardware.Camera.Parameters.EFFECT_SOLARIZE*




*java.lang.String_android.hardware.Camera.Parameters.EFFECT_WHITEBOARD*




*java.lang.String_android.hardware.Camera.Parameters.FLASH_MODE_AUTO*

Flash will be fired automatically when required. The flash may be fired during 
preview, auto-focus, or snapshot depending on the driver. 


*java.lang.String_android.hardware.Camera.Parameters.FLASH_MODE_OFF*

Flash will not be fired. 


*java.lang.String_android.hardware.Camera.Parameters.FLASH_MODE_ON*

Flash will always be fired during snapshot. The flash may also be fired during 
preview or auto-focus depending on the driver. 


*java.lang.String_android.hardware.Camera.Parameters.FLASH_MODE_RED_EYE*

Flash will be fired in red-eye reduction mode. 


*java.lang.String_android.hardware.Camera.Parameters.FLASH_MODE_TORCH*

Constant emission of light during preview, auto-focus and snapshot. This can 
also be used for video recording. 


*int_android.hardware.Camera.Parameters.FOCUS_DISTANCE_FAR_INDEX*

The array index of far focus distance for use with 
(|android.hardware.Camera.Parameters|) . 


*int_android.hardware.Camera.Parameters.FOCUS_DISTANCE_NEAR_INDEX*

The array index of near focus distance for use with 
(|android.hardware.Camera.Parameters|) . 


*int_android.hardware.Camera.Parameters.FOCUS_DISTANCE_OPTIMAL_INDEX*

The array index of optimal focus distance for use with 
(|android.hardware.Camera.Parameters|) . 


*java.lang.String_android.hardware.Camera.Parameters.FOCUS_MODE_AUTO*

Auto-focus mode. Applications should call 
(|android.hardware.Camera.Parameters|) to start the focus in this mode. 


*java.lang.String_android.hardware.Camera.Parameters.FOCUS_MODE_CONTINUOUS_PICTURE*

Continuous auto focus mode intended for taking pictures. The camera 
continuously tries to focus. The speed of focus change is more aggressive than 
(|android.hardware.Camera.Parameters|) . Auto focus starts when the parameter 
is set. 

Applications can call (|android.hardware.Camera.Parameters|) in this mode. If 
the autofocus is in the middle of scanning, the focus callback will return when 
it completes. If the autofocus is not scanning, the focus callback will 
immediately return with a boolean that indicates whether the focus is sharp or 
not. The apps can then decide if they want to take a picture immediately or to 
change the focus mode to auto, and run a full autofocus cycle. The focus 
position is locked after autoFocus call. If applications want to resume the 
continuous focus, cancelAutoFocus must be called. Restarting the preview will 
not resume the continuous autofocus. To stop continuous focus, applications 
should change the focus mode to other modes. 


*java.lang.String_android.hardware.Camera.Parameters.FOCUS_MODE_CONTINUOUS_VIDEO*

Continuous auto focus mode intended for video recording. The camera 
continuously tries to focus. This is the best choice for video recording 
because the focus changes smoothly . Applications still can call 
(|android.hardware.Camera.Parameters|) in this mode but the subject may not be 
in focus. Auto focus starts when the parameter is set. 

Since API level 14, applications can call 
(|android.hardware.Camera.Parameters|) in this mode. The focus callback will 
immediately return with a boolean that indicates whether the focus is sharp or 
not. The focus position is locked after autoFocus call. If applications want to 
resume the continuous focus, cancelAutoFocus must be called. Restarting the 
preview will not resume the continuous autofocus. To stop continuous focus, 
applications should change the focus mode to other modes. 


*java.lang.String_android.hardware.Camera.Parameters.FOCUS_MODE_EDOF*

Extended depth of field (EDOF). Focusing is done digitally and continuously. 
Applications should not call (|android.hardware.Camera.Parameters|) in this 
mode. 


*java.lang.String_android.hardware.Camera.Parameters.FOCUS_MODE_FIXED*

Focus is fixed. The camera is always in this mode if the focus is not 
adjustable. If the camera has auto-focus, this mode can fix the focus, which is 
usually at hyperfocal distance. Applications should not call 
(|android.hardware.Camera.Parameters|) in this mode. 


*java.lang.String_android.hardware.Camera.Parameters.FOCUS_MODE_INFINITY*

Focus is set at infinity. Applications should not call 
(|android.hardware.Camera.Parameters|) in this mode. 


*java.lang.String_android.hardware.Camera.Parameters.FOCUS_MODE_MACRO*

Macro (close-up) focus mode. Applications should call 
(|android.hardware.Camera.Parameters|) to start the focus in this mode. 


*int_android.hardware.Camera.Parameters.PREVIEW_FPS_MAX_INDEX*

The array index of maximum preview fps for use with 
(|android.hardware.Camera.Parameters|) or 
(|android.hardware.Camera.Parameters|) . 


*int_android.hardware.Camera.Parameters.PREVIEW_FPS_MIN_INDEX*

The array index of minimum preview fps for use with 
(|android.hardware.Camera.Parameters|) or 
(|android.hardware.Camera.Parameters|) . 


*java.lang.String_android.hardware.Camera.Parameters.SCENE_MODE_ACTION*

Take photos of fast moving objects. Same as 
(|android.hardware.Camera.Parameters|) . 


*java.lang.String_android.hardware.Camera.Parameters.SCENE_MODE_AUTO*

Scene mode is off. 


*java.lang.String_android.hardware.Camera.Parameters.SCENE_MODE_BARCODE*

Applications are looking for a barcode. Camera driver will be optimized for 
barcode reading. 


*java.lang.String_android.hardware.Camera.Parameters.SCENE_MODE_BEACH*

Take pictures on the beach. 


*java.lang.String_android.hardware.Camera.Parameters.SCENE_MODE_CANDLELIGHT*

Capture the naturally warm color of scenes lit by candles. 


*java.lang.String_android.hardware.Camera.Parameters.SCENE_MODE_FIREWORKS*

For shooting firework displays. 


*java.lang.String_android.hardware.Camera.Parameters.SCENE_MODE_HDR*

Capture a scene using high dynamic range imaging techniques. The camera will 
return an image that has an extended dynamic range compared to a regular 
capture. Capturing such an image may take longer than a regular capture. 


*java.lang.String_android.hardware.Camera.Parameters.SCENE_MODE_LANDSCAPE*

Take pictures on distant objects. 


*java.lang.String_android.hardware.Camera.Parameters.SCENE_MODE_NIGHT*

Take photos at night. 


*java.lang.String_android.hardware.Camera.Parameters.SCENE_MODE_NIGHT_PORTRAIT*

Take people pictures at night. 


*java.lang.String_android.hardware.Camera.Parameters.SCENE_MODE_PARTY*

Take indoor low-light shot. 


*java.lang.String_android.hardware.Camera.Parameters.SCENE_MODE_PORTRAIT*

Take people pictures. 


*java.lang.String_android.hardware.Camera.Parameters.SCENE_MODE_SNOW*

Take pictures on the snow. 


*java.lang.String_android.hardware.Camera.Parameters.SCENE_MODE_SPORTS*

Take photos of fast moving objects. Same as 
(|android.hardware.Camera.Parameters|) . 


*java.lang.String_android.hardware.Camera.Parameters.SCENE_MODE_STEADYPHOTO*

Avoid blurry pictures (for example, due to hand shake). 


*java.lang.String_android.hardware.Camera.Parameters.SCENE_MODE_SUNSET*

Take sunset photos. 


*java.lang.String_android.hardware.Camera.Parameters.SCENE_MODE_THEATRE*

Take photos in a theater. Flash light is off. 


*java.lang.String_android.hardware.Camera.Parameters.WHITE_BALANCE_AUTO*




*java.lang.String_android.hardware.Camera.Parameters.WHITE_BALANCE_CLOUDY_DAYLIGHT*




*java.lang.String_android.hardware.Camera.Parameters.WHITE_BALANCE_DAYLIGHT*




*java.lang.String_android.hardware.Camera.Parameters.WHITE_BALANCE_FLUORESCENT*




*java.lang.String_android.hardware.Camera.Parameters.WHITE_BALANCE_INCANDESCENT*




*java.lang.String_android.hardware.Camera.Parameters.WHITE_BALANCE_SHADE*




*java.lang.String_android.hardware.Camera.Parameters.WHITE_BALANCE_TWILIGHT*




*java.lang.String_android.hardware.Camera.Parameters.WHITE_BALANCE_WARM_FLUORESCENT*





*android.hardware.Camera.Parameters.dump()*

public void dump()

Writes the current Parameters to the log. 

    Deprecated


*android.hardware.Camera.Parameters.flatten()*

public |java.lang.String| flatten()

Creates a single string with all the parameters set in this Parameters object. 
The (|android.hardware.Camera.Parameters|) method does the reverse. 



    Returns: a String with all values from this Parameters object, in semi-colon delimited 
             key-value pairs 

*android.hardware.Camera.Parameters.get(String)*

public |java.lang.String| get(java.lang.String key)

Returns the value of a String parameter. 


    key - the key name for the parameter 

    Returns: the String value of the parameter 

*android.hardware.Camera.Parameters.getAntibanding()*

public |java.lang.String| getAntibanding()

Gets the current antibanding setting. 



    Returns: current antibanding. null if antibanding setting is not supported. 

*android.hardware.Camera.Parameters.getAutoExposureLock()*

public boolean getAutoExposureLock()

Gets the state of the auto-exposure lock. Applications should check 
(|android.hardware.Camera.Parameters|) before using this method. See 
(|android.hardware.Camera.Parameters|) for details about the lock. 



    Returns: State of the auto-exposure lock. Returns true if auto-exposure is currently 
             locked, and false otherwise. 

*android.hardware.Camera.Parameters.getAutoWhiteBalanceLock()*

public boolean getAutoWhiteBalanceLock()

Gets the state of the auto-white balance lock. Applications should check 
(|android.hardware.Camera.Parameters|) before using this method. See 
(|android.hardware.Camera.Parameters|) for details about the lock. 



    Returns: State of the auto-white balance lock. Returns true if auto-white balance is 
             currently locked, and false otherwise. 

*android.hardware.Camera.Parameters.getColorEffect()*

public |java.lang.String| getColorEffect()

Gets the current color effect setting. 



    Returns: current color effect. null if color effect setting is not supported. 

*android.hardware.Camera.Parameters.getExposureCompensation()*

public int getExposureCompensation()

Gets the current exposure compensation index. 



    Returns: current exposure compensation index. The range is {@link 
             #getMinExposureCompensation} to {@link 
             #getMaxExposureCompensation}. 0 means exposure is not adjusted. 

*android.hardware.Camera.Parameters.getExposureCompensationStep()*

public float getExposureCompensationStep()

Gets the exposure compensation step. 



    Returns: exposure compensation step. Applications can get EV by multiplying the exposure 
             compensation index and step. Ex: if exposure compensation index is 
             -6 and step is 0.333333333, EV is -2. 

*android.hardware.Camera.Parameters.getFlashMode()*

public |java.lang.String| getFlashMode()

Gets the current flash mode setting. 



    Returns: current flash mode. null if flash mode setting is not supported. 

*android.hardware.Camera.Parameters.getFocalLength()*

public float getFocalLength()

Gets the focal length (in millimeter) of the camera. 



    Returns: the focal length. This method will always return a valid value. 

*android.hardware.Camera.Parameters.getFocusAreas()*

public |java.util.List|<Area> getFocusAreas()

Gets the current focus areas. Camera driver uses the areas to decide focus. 

Before using this API or (|android.hardware.Camera.Parameters|) , apps should 
call (|android.hardware.Camera.Parameters|) to know the maximum number of focus 
areas first. If the value is 0, focus area is not supported. 

Each focus area is a rectangle with specified weight. The direction is relative 
to the sensor orientation, that is, what the sensor sees. The direction is not 
affected by the rotation or mirroring of (|android.hardware.Camera.Parameters|) 
. Coordinates of the rectangle range from -1000 to 1000. (-1000, -1000) is the 
upper left point. (1000, 1000) is the lower right point. The width and height 
of focus areas cannot be 0 or negative. 

The weight must range from 1 to 1000. The weight should be interpreted as a 
per-pixel weight - all pixels in the area have the specified weight. This means 
a small area with the same weight as a larger area will have less influence on 
the focusing than the larger area. Focus areas can partially overlap and the 
driver will add the weights in the overlap region. 

A special case of anullfocus area list means the driver is free to select focus 
targets as it wants. For example, the driver may use more signals to select 
focus areas and change them dynamically. Apps can set the focus area list 
tonullif they want the driver to completely control focusing. 

Focus areas are relative to the current field of view ( 
(|android.hardware.Camera.Parameters|) ). No matter what the zoom level is, 
(-1000,-1000) represents the top of the currently visible camera frame. The 
focus area cannot be set to be outside the current field of view, even when 
using zoom. 

Focus area only has effect if the current focus mode is 
(|android.hardware.Camera.Parameters|) , (|android.hardware.Camera.Parameters|) 
, (|android.hardware.Camera.Parameters|) , or 
(|android.hardware.Camera.Parameters|) . 



    Returns: a list of current focus areas 

*android.hardware.Camera.Parameters.getFocusDistances(float[])*

public void getFocusDistances(float[] output)

Gets the distances from the camera to where an object appears to be in focus. 
The object is sharpest at the optimal focus distance. The depth of field is the 
far focus distance minus near focus distance. 

Focus distances may change after calling (|android.hardware.Camera.Parameters|) 
, (|android.hardware.Camera.Parameters|) , or 
(|android.hardware.Camera.Parameters|) . Applications can call 
(|android.hardware.Camera.Parameters|) and this method anytime to get the 
latest focus distances. If the focus mode is FOCUS_MODE_CONTINUOUS_VIDEO, focus 
distances may change from time to time. 

This method is intended to estimate the distance between the camera and the 
subject. After autofocus, the subject distance may be within near and far focus 
distance. However, the precision depends on the camera hardware, autofocus 
algorithm, the focus area, and the scene. The error can be large and it should 
be only used as a reference. 

Far focus distance >= optimal focus distance >= near focus distance. If the 
focus distance is infinity, the value will beFloat.POSITIVE_INFINITY. 


    output - focus distances in meters. output must be a float array with three elements. 
       Near focus distance, optimal focus distance, and far focus distance will 
       be filled in the array. 

*android.hardware.Camera.Parameters.getFocusMode()*

public |java.lang.String| getFocusMode()

Gets the current focus mode setting. 



    Returns: current focus mode. This method will always return a non-null value. 
             Applications should call {@link #autoFocus(AutoFocusCallback)} to 
             start the focus if focus mode is FOCUS_MODE_AUTO or 
             FOCUS_MODE_MACRO. 

*android.hardware.Camera.Parameters.getHorizontalViewAngle()*

public float getHorizontalViewAngle()

Gets the horizontal angle of view in degrees. 



    Returns: horizontal angle of view. This method will always return a valid value. 

*android.hardware.Camera.Parameters.getInt(String)*

public int getInt(java.lang.String key)

Returns the value of an integer parameter. 


    key - the key name for the parameter 

    Returns: the int value of the parameter 

*android.hardware.Camera.Parameters.getJpegQuality()*

public int getJpegQuality()

Returns the quality setting for the JPEG picture. 



    Returns: the JPEG picture quality setting. 

*android.hardware.Camera.Parameters.getJpegThumbnailQuality()*

public int getJpegThumbnailQuality()

Returns the quality setting for the EXIF thumbnail in Jpeg picture. 



    Returns: the JPEG quality setting of the EXIF thumbnail. 

*android.hardware.Camera.Parameters.getJpegThumbnailSize()*

public |android.hardware.Camera.Size| getJpegThumbnailSize()

Returns the dimensions for EXIF thumbnail in Jpeg picture. 



    Returns: a Size object with the height and width setting for the EXIF thumbnails 

*android.hardware.Camera.Parameters.getMaxExposureCompensation()*

public int getMaxExposureCompensation()

Gets the maximum exposure compensation index. 



    Returns: maximum exposure compensation index (>=0). If both this method and {@link 
             #getMinExposureCompensation} return 0, exposure compensation is 
             not supported. 

*android.hardware.Camera.Parameters.getMaxNumDetectedFaces()*

public int getMaxNumDetectedFaces()

Gets the maximum number of detected faces supported. This is the maximum length 
of the list returned from (|android.hardware.Camera.FaceDetectionListener|) . 
If the return value is 0, face detection of the specified type is not 
supported. 



    Returns: the maximum number of detected face supported by the camera. 

*android.hardware.Camera.Parameters.getMaxNumFocusAreas()*

public int getMaxNumFocusAreas()

Gets the maximum number of focus areas supported. This is the maximum length of 
the list in (|android.hardware.Camera.Parameters|) and 
(|android.hardware.Camera.Parameters|) . 



    Returns: the maximum number of focus areas supported by the camera. 

*android.hardware.Camera.Parameters.getMaxNumMeteringAreas()*

public int getMaxNumMeteringAreas()

Gets the maximum number of metering areas supported. This is the maximum length 
of the list in (|android.hardware.Camera.Parameters|) and 
(|android.hardware.Camera.Parameters|) . 



    Returns: the maximum number of metering areas supported by the camera. 

*android.hardware.Camera.Parameters.getMaxZoom()*

public int getMaxZoom()

Gets the maximum zoom value allowed for snapshot. This is the maximum value 
that applications can set to (|android.hardware.Camera.Parameters|) . 
Applications should call (|android.hardware.Camera.Parameters|) before using 
this method. This value may change in different preview size. Applications 
should call this again after setting preview size. 



    Returns: the maximum zoom value supported by the camera. 

*android.hardware.Camera.Parameters.getMeteringAreas()*

public |java.util.List|<Area> getMeteringAreas()

Gets the current metering areas. Camera driver uses these areas to decide 
exposure. 

Before using this API or (|android.hardware.Camera.Parameters|) , apps should 
call (|android.hardware.Camera.Parameters|) to know the maximum number of 
metering areas first. If the value is 0, metering area is not supported. 

Each metering area is a rectangle with specified weight. The direction is 
relative to the sensor orientation, that is, what the sensor sees. The 
direction is not affected by the rotation or mirroring of 
(|android.hardware.Camera.Parameters|) . Coordinates of the rectangle range 
from -1000 to 1000. (-1000, -1000) is the upper left point. (1000, 1000) is the 
lower right point. The width and height of metering areas cannot be 0 or 
negative. 

The weight must range from 1 to 1000, and represents a weight for every pixel 
in the area. This means that a large metering area with the same weight as a 
smaller area will have more effect in the metering result. Metering areas can 
partially overlap and the driver will add the weights in the overlap region. 

A special case of anullmetering area list means the driver is free to meter as 
it chooses. For example, the driver may use more signals to select metering 
areas and change them dynamically. Apps can set the metering area list tonullif 
they want the driver to completely control metering. 

Metering areas are relative to the current field of view ( 
(|android.hardware.Camera.Parameters|) ). No matter what the zoom level is, 
(-1000,-1000) represents the top of the currently visible camera frame. The 
metering area cannot be set to be outside the current field of view, even when 
using zoom. 

No matter what metering areas are, the final exposure are compensated by 
(|android.hardware.Camera.Parameters|) . 



    Returns: a list of current metering areas 

*android.hardware.Camera.Parameters.getMinExposureCompensation()*

public int getMinExposureCompensation()

Gets the minimum exposure compensation index. 



    Returns: minimum exposure compensation index (<=0). If both this method and {@link 
             #getMaxExposureCompensation} return 0, exposure compensation is 
             not supported. 

*android.hardware.Camera.Parameters.getPictureFormat()*

public int getPictureFormat()

Returns the image format for pictures. 



    Returns: the picture format 

*android.hardware.Camera.Parameters.getPictureSize()*

public |android.hardware.Camera.Size| getPictureSize()

Returns the dimension setting for pictures. 



    Returns: a Size object with the height and width setting for pictures 

*android.hardware.Camera.Parameters.getPreferredPreviewSizeForVideo()*

public |android.hardware.Camera.Size| getPreferredPreviewSizeForVideo()

Returns the preferred or recommended preview size (width and height) in pixels 
for video recording. Camcorder applications should set the preview size to a 
value that is not larger than the preferred preview size. In other words, the 
product of the width and height of the preview size should not be larger than 
that of the preferred preview size. In addition, we recommend to choose a 
preview size that has the same aspect ratio as the resolution of video to be 
recorded. 



    Returns: the preferred preview size (width and height) in pixels for video recording if 
             getSupportedVideoSizes() does not return null; otherwise, null is 
             returned. 

*android.hardware.Camera.Parameters.getPreviewFormat()*

public int getPreviewFormat()

Returns the image format for preview frames got from 
(|android.hardware.Camera.PreviewCallback|) . 



    Returns: the preview format. 

*android.hardware.Camera.Parameters.getPreviewFpsRange(int[])*

public void getPreviewFpsRange(int[] range)

Returns the current minimum and maximum preview fps. The values are one of the 
elements returned by (|android.hardware.Camera.Parameters|) . 



    Returns: range the minimum and maximum preview fps (scaled by 1000). 

*android.hardware.Camera.Parameters.getPreviewFrameRate()*

public int getPreviewFrameRate()

Returns the setting for the rate at which preview frames are received. This is 
the target frame rate. The actual frame rate depends on the driver. 

    Deprecated: replaced by {@link #getPreviewFpsRange(int[])}


    Returns: the frame rate setting (frames per second) 

*android.hardware.Camera.Parameters.getPreviewSize()*

public |android.hardware.Camera.Size| getPreviewSize()

Returns the dimensions setting for preview pictures. 



    Returns: a Size object with the width and height setting for the preview picture 

*android.hardware.Camera.Parameters.getSceneMode()*

public |java.lang.String| getSceneMode()

Gets the current scene mode setting. 



    Returns: one of SCENE_MODE_XXX string constant. null if scene mode setting is not 
             supported. 

*android.hardware.Camera.Parameters.getSupportedAntibanding()*

public |java.util.List|<String> getSupportedAntibanding()

Gets the supported antibanding values. 



    Returns: a list of supported antibanding values. null if antibanding setting is not 
             supported. 

*android.hardware.Camera.Parameters.getSupportedColorEffects()*

public |java.util.List|<String> getSupportedColorEffects()

Gets the supported color effects. 



    Returns: a list of supported color effects. null if color effect setting is not 
             supported. 

*android.hardware.Camera.Parameters.getSupportedFlashModes()*

public |java.util.List|<String> getSupportedFlashModes()

Gets the supported flash modes. 



    Returns: a list of supported flash modes. null if flash mode setting is not supported. 

*android.hardware.Camera.Parameters.getSupportedFocusModes()*

public |java.util.List|<String> getSupportedFocusModes()

Gets the supported focus modes. 



    Returns: a list of supported focus modes. This method will always return a list with at 
             least one element. 

*android.hardware.Camera.Parameters.getSupportedJpegThumbnailSizes()*

public |java.util.List|<Size> getSupportedJpegThumbnailSizes()

Gets the supported jpeg thumbnail sizes. 



    Returns: a list of Size object. This method will always return a list with at least two 
             elements. Size 0,0 (no thumbnail) is always supported. 

*android.hardware.Camera.Parameters.getSupportedPictureFormats()*

public |java.util.List|<Integer> getSupportedPictureFormats()

Gets the supported picture formats. 



    Returns: supported picture formats. This method will always return a list with at least 
             one element. 

*android.hardware.Camera.Parameters.getSupportedPictureSizes()*

public |java.util.List|<Size> getSupportedPictureSizes()

Gets the supported picture sizes. 



    Returns: a list of supported picture sizes. This method will always return a list with 
             at least one element. 

*android.hardware.Camera.Parameters.getSupportedPreviewFormats()*

public |java.util.List|<Integer> getSupportedPreviewFormats()

Gets the supported preview formats. (|android.graphics.ImageFormat|) is always 
supported. (|android.graphics.ImageFormat|) is always supported since API level 
12. 



    Returns: a list of supported preview formats. This method will always return a list with 
             at least one element. 

*android.hardware.Camera.Parameters.getSupportedPreviewFpsRange()*

public |java.util.List|<int[]> getSupportedPreviewFpsRange()

Gets the supported preview fps (frame-per-second) ranges. Each range contains a 
minimum fps and maximum fps. If minimum fps equals to maximum fps, the camera 
outputs frames in fixed frame rate. If not, the camera outputs frames in auto 
frame rate. The actual frame rate fluctuates between the minimum and the 
maximum. The values are multiplied by 1000 and represented in integers. For 
example, if frame rate is 26.623 frames per second, the value is 26623. 



    Returns: a list of supported preview fps ranges. This method returns a list with at 
             least one element. Every element is an int array of two values - 
             minimum fps and maximum fps. The list is sorted from small to 
             large (first by maximum fps and then minimum fps). 

*android.hardware.Camera.Parameters.getSupportedPreviewFrameRates()*

public |java.util.List|<Integer> getSupportedPreviewFrameRates()

Gets the supported preview frame rates. 

    Deprecated: replaced by {@link #getSupportedPreviewFpsRange()}


    Returns: a list of supported preview frame rates. null if preview frame rate setting is 
             not supported. 

*android.hardware.Camera.Parameters.getSupportedPreviewSizes()*

public |java.util.List|<Size> getSupportedPreviewSizes()

Gets the supported preview sizes. 



    Returns: a list of Size object. This method will always return a list with at least one 
             element. 

*android.hardware.Camera.Parameters.getSupportedSceneModes()*

public |java.util.List|<String> getSupportedSceneModes()

Gets the supported scene modes. 



    Returns: a list of supported scene modes. null if scene mode setting is not supported. 

*android.hardware.Camera.Parameters.getSupportedVideoSizes()*

public |java.util.List|<Size> getSupportedVideoSizes()

Gets the supported video frame sizes that can be used by MediaRecorder. 

If the returned list is not null, the returned list will contain at least one 
Size and one of the sizes in the returned list must be passed to 
MediaRecorder.setVideoSize() for camcorder application if camera is used as the 
video source. In this case, the size of the preview can be different from the 
resolution of the recorded video during video recording. 



    Returns: a list of Size object if camera has separate preview and video output; 
             otherwise, null is returned. 

*android.hardware.Camera.Parameters.getSupportedWhiteBalance()*

public |java.util.List|<String> getSupportedWhiteBalance()

Gets the supported white balance. 



    Returns: a list of supported white balance. null if white balance setting is not 
             supported. 

*android.hardware.Camera.Parameters.getVerticalViewAngle()*

public float getVerticalViewAngle()

Gets the vertical angle of view in degrees. 



    Returns: vertical angle of view. This method will always return a valid value. 

*android.hardware.Camera.Parameters.getVideoStabilization()*

public boolean getVideoStabilization()

Get the current state of video stabilization. See 
(|android.hardware.Camera.Parameters|) for details of video stabilization. 



    Returns: true if video stabilization is enabled 

*android.hardware.Camera.Parameters.getWhiteBalance()*

public |java.lang.String| getWhiteBalance()

Gets the current white balance setting. 



    Returns: current white balance. null if white balance setting is not supported. 

*android.hardware.Camera.Parameters.getZoom()*

public int getZoom()

Gets current zoom value. This also works when smooth zoom is in progress. 
Applications should check (|android.hardware.Camera.Parameters|) before using 
this method. 



    Returns: the current zoom value. The range is 0 to {@link #getMaxZoom}. 0 means the 
             camera is not zoomed. 

*android.hardware.Camera.Parameters.getZoomRatios()*

public |java.util.List|<Integer> getZoomRatios()

Gets the zoom ratios of all zoom values. Applications should check 
(|android.hardware.Camera.Parameters|) before using this method. 



    Returns: the zoom ratios in 1/100 increments. Ex: a zoom of 3.2x is returned as 320. The 
             number of elements is {@link #getMaxZoom} + 1. The list is sorted 
             from small to large. The first element is always 100. The last 
             element is the zoom ratio of the maximum zoom value. 

*android.hardware.Camera.Parameters.isAutoExposureLockSupported()*

public boolean isAutoExposureLockSupported()

Returns true if auto-exposure locking is supported. Applications should call 
this before trying to lock auto-exposure. See 
(|android.hardware.Camera.Parameters|) for details about the lock. 



    Returns: true if auto-exposure lock is supported. 

*android.hardware.Camera.Parameters.isAutoWhiteBalanceLockSupported()*

public boolean isAutoWhiteBalanceLockSupported()

Returns true if auto-white balance locking is supported. Applications should 
call this before trying to lock auto-white balance. See 
(|android.hardware.Camera.Parameters|) for details about the lock. 



    Returns: true if auto-white balance lock is supported. 

*android.hardware.Camera.Parameters.isSmoothZoomSupported()*

public boolean isSmoothZoomSupported()

Returns true if smooth zoom is supported. Applications should call this before 
using other smooth zoom methods. 



    Returns: true if smooth zoom is supported. 

*android.hardware.Camera.Parameters.isVideoSnapshotSupported()*

public boolean isVideoSnapshotSupported()

Returns true if video snapshot is supported. That is, applications can call 
(|android.hardware.Camera.Parameters|) during recording. Applications do not 
need to call (|android.hardware.Camera.Parameters|) after taking a picture. The 
preview will be still active. Other than that, taking a picture during 
recording is identical to taking a picture normally. All settings and methods 
related to takePicture work identically. Ex: 
(|android.hardware.Camera.Parameters|) , (|android.hardware.Camera.Parameters|) 
, (|android.hardware.Camera.Parameters|) , 
(|android.hardware.Camera.Parameters|) , and etc. The picture will have an EXIF 
header. (|android.hardware.Camera.Parameters|) and 
(|android.hardware.Camera.Parameters|) also still work, but the video will 
record the flash. 

Applications can set shutter callback as null to avoid the shutter sound. It is 
also recommended to set raw picture and post view callbacks to null to avoid 
the interrupt of preview display. 

Field-of-view of the recorded video may be different from that of the captured 
pictures. The maximum size of a video snapshot may be smaller than that for 
regular still captures. If the current picture size is set higher than can be 
supported by video snapshot, the picture will be captured at the maximum 
supported size instead. 



    Returns: true if video snapshot is supported. 

*android.hardware.Camera.Parameters.isVideoStabilizationSupported()*

public boolean isVideoStabilizationSupported()

Returns true if video stabilization is supported. See 
(|android.hardware.Camera.Parameters|) for details of video stabilization. 



    Returns: true if video stabilization is supported 

*android.hardware.Camera.Parameters.isZoomSupported()*

public boolean isZoomSupported()

Returns true if zoom is supported. Applications should call this before using 
other zoom methods. 



    Returns: true if zoom is supported. 

*android.hardware.Camera.Parameters.remove(String)*

public void remove(java.lang.String key)





*android.hardware.Camera.Parameters.removeGpsData()*

public void removeGpsData()

Removes GPS latitude, longitude, altitude, and timestamp from the parameters. 



*android.hardware.Camera.Parameters.set(String,int)*

public void set(
  java.lang.String key,
  int value)

Sets an integer parameter. 


    key - the key name for the parameter 
    value - the int value of the parameter 

*android.hardware.Camera.Parameters.set(String,String)*

public void set(
  java.lang.String key,
  java.lang.String value)

Sets a String parameter. 


    key - the key name for the parameter 
    value - the String value of the parameter 

*android.hardware.Camera.Parameters.setAntibanding(String)*

public void setAntibanding(java.lang.String antibanding)

Sets the antibanding. 


    antibanding - new antibanding value. 

*android.hardware.Camera.Parameters.setAutoExposureLock(boolean)*

public void setAutoExposureLock(boolean toggle)

Sets the auto-exposure lock state. Applications should check 
(|android.hardware.Camera.Parameters|) before using this method. 

If set to true, the camera auto-exposure routine will immediately pause until 
the lock is set to false. Exposure compensation settings changes will still 
take effect while auto-exposure is locked. 

If auto-exposure is already locked, setting this to true again has no effect 
(the driver will not recalculate exposure values). 

Stopping preview with (|android.hardware.Camera.Parameters|) , or triggering 
still image capture with (|android.hardware.Camera.Parameters|) , will not 
change the lock. 

Exposure compensation, auto-exposure lock, and auto-white balance lock can be 
used to capture an exposure-bracketed burst of images, for example. 

Auto-exposure state, including the lock state, will not be maintained after 
camera (|android.hardware.Camera.Parameters|) is called. Locking auto-exposure 
after (|android.hardware.Camera.Parameters|) but before the first call to 
(|android.hardware.Camera.Parameters|) will not allow the auto-exposure routine 
to run at all, and may result in severely over- or under-exposed images. 


    toggle - new state of the auto-exposure lock. True means that auto-exposure is locked, 
       false means that the auto-exposure routine is free to run normally. 

*android.hardware.Camera.Parameters.setAutoWhiteBalanceLock(boolean)*

public void setAutoWhiteBalanceLock(boolean toggle)

Sets the auto-white balance lock state. Applications should check 
(|android.hardware.Camera.Parameters|) before using this method. 

If set to true, the camera auto-white balance routine will immediately pause 
until the lock is set to false. 

If auto-white balance is already locked, setting this to true again has no 
effect (the driver will not recalculate white balance values). 

Stopping preview with (|android.hardware.Camera.Parameters|) , or triggering 
still image capture with (|android.hardware.Camera.Parameters|) , will not 
change the the lock. 

Changing the white balance mode with (|android.hardware.Camera.Parameters|) 
will release the auto-white balance lock if it is set. 

Exposure compensation, AE lock, and AWB lock can be used to capture an 
exposure-bracketed burst of images, for example. Auto-white balance state, 
including the lock state, will not be maintained after camera 
(|android.hardware.Camera.Parameters|) is called. Locking auto-white balance 
after (|android.hardware.Camera.Parameters|) but before the first call to 
(|android.hardware.Camera.Parameters|) will not allow the auto-white balance 
routine to run at all, and may result in severely incorrect color in captured 
images. 


    toggle - new state of the auto-white balance lock. True means that auto-white balance is 
       locked, false means that the auto-white balance routine is free to run 
       normally. 

*android.hardware.Camera.Parameters.setColorEffect(String)*

public void setColorEffect(java.lang.String value)

Sets the current color effect setting. 


    value - new color effect. 

*android.hardware.Camera.Parameters.setExposureCompensation(int)*

public void setExposureCompensation(int value)

Sets the exposure compensation index. 


    value - exposure compensation index. The valid value range is from {@link 
       #getMinExposureCompensation} (inclusive) to {@link 
       #getMaxExposureCompensation} (inclusive). 0 means exposure is not 
       adjusted. Application should call getMinExposureCompensation and 
       getMaxExposureCompensation to know if exposure compensation is 
       supported. 

*android.hardware.Camera.Parameters.setFlashMode(String)*

public void setFlashMode(java.lang.String value)

Sets the flash mode. 


    value - flash mode. 

*android.hardware.Camera.Parameters.setFocusAreas(List<Camera.Area>)*

public void setFocusAreas(java.util.List<android.hardware.Camera.Area> focusAreas)

Sets focus areas. See (|android.hardware.Camera.Parameters|) for documentation. 


    focusAreas - the focus areas 

*android.hardware.Camera.Parameters.setFocusMode(String)*

public void setFocusMode(java.lang.String value)

Sets the focus mode. 


    value - focus mode. 

*android.hardware.Camera.Parameters.setGpsAltitude(double)*

public void setGpsAltitude(double altitude)

Sets GPS altitude. This will be stored in JPEG EXIF header. 


    altitude - GPS altitude in meters. 

*android.hardware.Camera.Parameters.setGpsLatitude(double)*

public void setGpsLatitude(double latitude)

Sets GPS latitude coordinate. This will be stored in JPEG EXIF header. 


    latitude - GPS latitude coordinate. 

*android.hardware.Camera.Parameters.setGpsLongitude(double)*

public void setGpsLongitude(double longitude)

Sets GPS longitude coordinate. This will be stored in JPEG EXIF header. 


    longitude - GPS longitude coordinate. 

*android.hardware.Camera.Parameters.setGpsProcessingMethod(String)*

public void setGpsProcessingMethod(java.lang.String processing_method)

Sets GPS processing method. It will store up to 32 characters in JPEG EXIF 
header. 


    processing_method - The processing method to get this location. 

*android.hardware.Camera.Parameters.setGpsTimestamp(long)*

public void setGpsTimestamp(long timestamp)

Sets GPS timestamp. This will be stored in JPEG EXIF header. 


    timestamp - GPS timestamp (UTC in seconds since January 1, 1970). 

*android.hardware.Camera.Parameters.setJpegQuality(int)*

public void setJpegQuality(int quality)

Sets Jpeg quality of captured picture. 


    quality - the JPEG quality of captured picture. The range is 1 to 100, with 100 being the 
       best. 

*android.hardware.Camera.Parameters.setJpegThumbnailQuality(int)*

public void setJpegThumbnailQuality(int quality)

Sets the quality of the EXIF thumbnail in Jpeg picture. 


    quality - the JPEG quality of the EXIF thumbnail. The range is 1 to 100, with 100 being 
       the best. 

*android.hardware.Camera.Parameters.setJpegThumbnailSize(int,int)*

public void setJpegThumbnailSize(
  int width,
  int height)

Sets the dimensions for EXIF thumbnail in Jpeg picture. If applications set 
both width and height to 0, EXIF will not contain thumbnail. 

Applications need to consider the display orientation. See 
(|android.hardware.Camera.Parameters|) for reference. 


    width - the width of the thumbnail, in pixels 
    height - the height of the thumbnail, in pixels 

*android.hardware.Camera.Parameters.setMeteringAreas(List<Camera.Area>)*

public void setMeteringAreas(java.util.List<android.hardware.Camera.Area> meteringAreas)

Sets metering areas. See (|android.hardware.Camera.Parameters|) for 
documentation. 


    meteringAreas - the metering areas 

*android.hardware.Camera.Parameters.setPictureFormat(int)*

public void setPictureFormat(int pixel_format)

Sets the image format for pictures. 


    pixel_format - the desired picture format (ImageFormat.NV21, ImageFormat.RGB_565, or 
       ImageFormat.JPEG) 

*android.hardware.Camera.Parameters.setPictureSize(int,int)*

public void setPictureSize(
  int width,
  int height)

Sets the dimensions for pictures. 

Applications need to consider the display orientation. See 
(|android.hardware.Camera.Parameters|) for reference. 


    width - the width for pictures, in pixels 
    height - the height for pictures, in pixels 

*android.hardware.Camera.Parameters.setPreviewFormat(int)*

public void setPreviewFormat(int pixel_format)

Sets the image format for preview pictures. If this is never called, the 
default format will be (|android.graphics.ImageFormat|) , which uses the NV21 
encoding format. 

Use (|android.hardware.Camera.Parameters|) to get a list of the available 
preview formats. 

It is strongly recommended that either (|android.graphics.ImageFormat|) or 
(|android.graphics.ImageFormat|) is used, since they are supported by all 
camera devices. 

For YV12, the image buffer that is received is not necessarily tightly packed, 
as there may be padding at the end of each row of pixel data, as described in 
(|android.graphics.ImageFormat|) . For camera callback data, it can be assumed 
that the stride of the Y and UV data is the smallest possible that meets the 
alignment requirements. That is, if the preview size is width x height, then 
the following equations describe the buffer index for the beginning of row y 
for the Y plane and row c for the U and V planes: 

yStride = (int) ceil(width / 16.0) * 16; uvStride = (int) ceil( (yStride / 2) / 
16.0) * 16; ySize = yStride * height; uvSize = uvStride * height / 2; yRowIndex 
= yStride * y; uRowIndex = ySize + uvSize + uvStride * c; vRowIndex = ySize + 
uvStride * c; size = ySize + uvSize * 2; 


    pixel_format - the desired preview picture format, defined by one of the {@link 
       android.graphics.ImageFormat} constants. (E.g., ImageFormat.NV21 
       (default), or ImageFormat.YV12) 

*android.hardware.Camera.Parameters.setPreviewFpsRange(int,int)*

public void setPreviewFpsRange(
  int min,
  int max)

Sets the minimum and maximum preview fps. This controls the rate of preview 
frames received in (|android.hardware.Camera.PreviewCallback|) . The minimum 
and maximum preview fps must be one of the elements from 
(|android.hardware.Camera.Parameters|) . 


    min - the minimum preview fps (scaled by 1000). 
    max - the maximum preview fps (scaled by 1000). 

*android.hardware.Camera.Parameters.setPreviewFrameRate(int)*

public void setPreviewFrameRate(int fps)

Sets the rate at which preview frames are received. This is the target frame 
rate. The actual frame rate depends on the driver. 

    Deprecated: replaced by {@link #setPreviewFpsRange(int,int)}

    fps - the frame rate (frames per second) 

*android.hardware.Camera.Parameters.setPreviewSize(int,int)*

public void setPreviewSize(
  int width,
  int height)

Sets the dimensions for preview pictures. If the preview has already started, 
applications should stop the preview first before changing preview size. 

The sides of width and height are based on camera orientation. That is, the 
preview size is the size before it is rotated by display orientation. So 
applications need to consider the display orientation while setting preview 
size. For example, suppose the camera supports both 480x320 and 320x480 preview 
sizes. The application wants a 3:2 preview ratio. If the display orientation is 
set to 0 or 180, preview size should be set to 480x320. If the display 
orientation is set to 90 or 270, preview size should be set to 320x480. The 
display orientation should also be considered while setting picture size and 
thumbnail size. 


    width - the width of the pictures, in pixels 
    height - the height of the pictures, in pixels 

*android.hardware.Camera.Parameters.setRecordingHint(boolean)*

public void setRecordingHint(boolean hint)

Sets recording mode hint. This tells the camera that the intent of the 
application is to record videos (|android.media.MediaRecorder|) , not to take 
still pictures (|android.hardware.Camera.Parameters|) . Using this hint can 
allow MediaRecorder.start() to start faster or with fewer glitches on output. 
This should be called before starting preview for the best result, but can be 
changed while the preview is active. The default value is false. 

The app can still call takePicture() when the hint is true or call 
MediaRecorder.start() when the hint is false. But the performance may be worse. 


    hint - true if the apps intend to record videos using {@link 
       android.media.MediaRecorder}. 

*android.hardware.Camera.Parameters.setRotation(int)*

public void setRotation(int rotation)

Sets the clockwise rotation angle in degrees relative to the orientation of the 
camera. This affects the pictures returned from JPEG 
(|android.hardware.Camera.PictureCallback|) . The camera driver may set 
orientation in the EXIF header without rotating the picture. Or the driver may 
rotate the picture and the EXIF thumbnail. If the Jpeg picture is rotated, the 
orientation in the EXIF header will be missing or 1 (row #0 is top and column 
#0 is left side). 

If applications want to rotate the picture to match the orientation of what 
users see, apps should use (|android.view.OrientationEventListener|) and 
(|android.hardware.Camera.CameraInfo|) . The value from 
OrientationEventListener is relative to the natural orientation of the device. 
CameraInfo.orientation is the angle between camera orientation and natural 
device orientation. The sum of the two is the rotation angle for back-facing 
camera. The difference of the two is the rotation angle for front-facing 
camera. Note that the JPEG pictures of front-facing cameras are not mirrored as 
in preview display. 

For example, suppose the natural orientation of the device is portrait. The 
device is rotated 270 degrees clockwise, so the device orientation is 270. 
Suppose a back-facing camera sensor is mounted in landscape and the top side of 
the camera sensor is aligned with the right edge of the display in natural 
orientation. So the camera orientation is 90. The rotation should be set to 0 
(270 + 90). 

The reference code is as follows. 



public void onOrientationChanged(int orientation) { if (orientation == 
ORIENTATION_UNKNOWN) return; android.hardware.Camera.CameraInfo info = new 
android.hardware.Camera.CameraInfo(); 
android.hardware.Camera.getCameraInfo(cameraId, info); orientation = 
(orientation + 45) / 90 * 90; int rotation = 0; if (info.facing == 
CameraInfo.CAMERA_FACING_FRONT) { rotation = (info.orientation - orientation + 
360) % 360; } else { // back-facing camera rotation = (info.orientation + 
orientation) % 360; } mParameters.setRotation(rotation); } 


    rotation - The rotation angle in degrees relative to the orientation of the camera. 
       Rotation can only be 0, 90, 180 or 270. 

*android.hardware.Camera.Parameters.setSceneMode(String)*

public void setSceneMode(java.lang.String value)

Sets the scene mode. Changing scene mode may override other parameters (such as 
flash mode, focus mode, white balance). For example, suppose originally flash 
mode is on and supported flash modes are on/off. In night scene mode, both 
flash mode and supported flash mode may be changed to off. After setting scene 
mode, applications should call getParameters to know if some parameters are 
changed. 


    value - scene mode. 

*android.hardware.Camera.Parameters.setVideoStabilization(boolean)*

public void setVideoStabilization(boolean toggle)

Enables and disables video stabilization. Use 
(|android.hardware.Camera.Parameters|) to determine if calling this method is 
valid. 

Video stabilization reduces the shaking due to the motion of the camera in both 
the preview stream and in recorded videos, including data received from the 
preview callback. It does not reduce motion blur in images captured with 
takePicture(|android.hardware.Camera|) . 

Video stabilization can be enabled and disabled while preview or recording is 
active, but toggling it may cause a jump in the video stream that may be 
undesirable in a recorded video. 


    toggle - Set to true to enable video stabilization, and false to disable video 
       stabilization. 

*android.hardware.Camera.Parameters.setWhiteBalance(String)*

public void setWhiteBalance(java.lang.String value)

Sets the white balance. Changing the setting will release the auto-white 
balance lock. It is recommended not to change white balance and AWB lock at the 
same time. 


    value - new white balance. 

*android.hardware.Camera.Parameters.setZoom(int)*

public void setZoom(int value)

Sets current zoom value. If the camera is zoomed (value > 0), the actual 
picture size may be smaller than picture size setting. Applications can check 
the actual picture size after picture is returned from 
(|android.hardware.Camera.PictureCallback|) . The preview size remains the same 
in zoom. Applications should check (|android.hardware.Camera.Parameters|) 
before using this method. 


    value - zoom value. The valid range is 0 to {@link #getMaxZoom}. 

*android.hardware.Camera.Parameters.unflatten(String)*

public void unflatten(java.lang.String flattened)

Takes a flattened string of parameters and adds each one to this Parameters 
object. The (|android.hardware.Camera.Parameters|) method does the reverse. 


    flattened - a String of parameters (key-value paired) that are semi-colon delimited 


