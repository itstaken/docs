*android.provider.MediaStore.Audio.ArtistColumns* *MediaStore.Audio.ArtistColumns* 

public static interface interface MediaStore.Audio.ArtistColumns


|android.provider.MediaStore.Audio.ArtistColumns_Description|
|android.provider.MediaStore.Audio.ArtistColumns_Fields|
|android.provider.MediaStore.Audio.ArtistColumns_Constructors|
|android.provider.MediaStore.Audio.ArtistColumns_Methods|

================================================================================

*android.provider.MediaStore.Audio.ArtistColumns_Fields*
|java.lang.String_android.provider.MediaStore.Audio.ArtistColumns.ARTIST|
|java.lang.String_android.provider.MediaStore.Audio.ArtistColumns.ARTIST_KEY|
|java.lang.String_android.provider.MediaStore.Audio.ArtistColumns.NUMBER_OF_ALBUMS|
|java.lang.String_android.provider.MediaStore.Audio.ArtistColumns.NUMBER_OF_TRACKS|

*android.provider.MediaStore.Audio.ArtistColumns_Description*

Columns representing an artist 



*java.lang.String_android.provider.MediaStore.Audio.ArtistColumns.ARTIST*

The artist who created the audio file, if any Type: TEXT 


*java.lang.String_android.provider.MediaStore.Audio.ArtistColumns.ARTIST_KEY*

A non human readable key calculated from the ARTIST, used for searching, 
sorting and grouping Type: TEXT 


*java.lang.String_android.provider.MediaStore.Audio.ArtistColumns.NUMBER_OF_ALBUMS*

The number of albums in the database for this artist 


*java.lang.String_android.provider.MediaStore.Audio.ArtistColumns.NUMBER_OF_TRACKS*

The number of albums in the database for this artist 



