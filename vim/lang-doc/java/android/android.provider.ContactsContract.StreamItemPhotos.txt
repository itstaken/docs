*android.provider.ContactsContract.StreamItemPhotos* *ContactsContract.StreamItemPhotos* 

public static final class ContactsContract.StreamItemPhotos
  extends    |java.lang.Object|
  implements |android.provider.BaseColumns|
             |android.provider.ContactsContract.StreamItemPhotosColumns|

|android.provider.ContactsContract.StreamItemPhotos_Description|
|android.provider.ContactsContract.StreamItemPhotos_Fields|
|android.provider.ContactsContract.StreamItemPhotos_Constructors|
|android.provider.ContactsContract.StreamItemPhotos_Methods|

================================================================================

*android.provider.ContactsContract.StreamItemPhotos_Fields*
|java.lang.String_android.provider.ContactsContract.StreamItemPhotos.PHOTO|

*android.provider.ContactsContract.StreamItemPhotos_Description*

Constants for the stream_item_photos table, which contains photos associated 
with social stream updates. 

Access to social stream photos requires additional permissions beyond the 
read/write contact permissions required by the provider. Querying for social 
stream photos requires android.permission.READ_SOCIAL_STREAM permission, and 
inserting or updating social stream photos requires 
android.permission.WRITE_SOCIAL_STREAM permission. 

Account check 

The content URIs to the insert, update and delete operations are required to 
have the account information matching that of the owning raw contact as query 
parameters, namely (|android.provider.ContactsContract.RawContacts|) and 
(|android.provider.ContactsContract.RawContacts|) . 
(|android.provider.ContactsContract.RawContacts|) isn't required. 

Operations 

Insert 

Social stream photo entries are associated with a social stream item. Photos 
can be inserted into a social stream item in a couple of ways: 

Via the (|android.provider.ContactsContract.StreamItems.StreamItemPhotos|) 
sub-path of a stream item: 



ContentValues values = new ContentValues(); 
values.put(StreamItemPhotos.SORT_INDEX, 1); values.put(StreamItemPhotos.PHOTO, 
photoData); Uri.Builder builder = StreamItems.CONTENT_URI.buildUpon(); 
ContentUris.appendId(builder, streamItemId); 
builder.appendEncodedPath(StreamItems.StreamItemPhotos.CONTENT_DIRECTORY); 
builder.appendQueryParameter(RawContacts.ACCOUNT_NAME, accountName); 
builder.appendQueryParameter(RawContacts.ACCOUNT_TYPE, accountType); Uri 
photoUri = getContentResolver().insert(builder.build(), values); long photoId = 
ContentUris.parseId(photoUri); 

Via the (|android.provider.ContactsContract.StreamItems|) URI: 



ContentValues values = new ContentValues(); 
values.put(StreamItemPhotos.STREAM_ITEM_ID, streamItemId); 
values.put(StreamItemPhotos.SORT_INDEX, 1); values.put(StreamItemPhotos.PHOTO, 
photoData); Uri.Builder builder = StreamItems.CONTENT_PHOTO_URI.buildUpon(); 
builder.appendQueryParameter(RawContacts.ACCOUNT_NAME, accountName); 
builder.appendQueryParameter(RawContacts.ACCOUNT_TYPE, accountType); Uri 
photoUri = getContentResolver().insert(builder.build(), values); long photoId = 
ContentUris.parseId(photoUri); 





Update 

Updates can only be made against a specific 
(|android.provider.ContactsContract.StreamItems.StreamItemPhotos|) entry, 
identified by both the stream item ID it belongs to and the stream item photo 
ID. This can be specified in two ways. 

Via the (|android.provider.ContactsContract.StreamItems.StreamItemPhotos|) 
sub-path of a stream item: 



ContentValues values = new ContentValues(); values.put(StreamItemPhotos.PHOTO, 
newPhotoData); Uri.Builder builder = StreamItems.CONTENT_URI.buildUpon(); 
ContentUris.appendId(builder, streamItemId); 
builder.appendEncodedPath(StreamItems.StreamItemPhotos.CONTENT_DIRECTORY); 
ContentUris.appendId(builder, streamItemPhotoId); 
builder.appendQueryParameter(RawContacts.ACCOUNT_NAME, accountName); 
builder.appendQueryParameter(RawContacts.ACCOUNT_TYPE, accountType); 
getContentResolver().update(builder.build(), values, null, null); 

Via the (|android.provider.ContactsContract.StreamItems|) URI: 



ContentValues values = new ContentValues(); 
values.put(StreamItemPhotos.STREAM_ITEM_ID, streamItemId); 
values.put(StreamItemPhotos.PHOTO, newPhotoData); Uri.Builder builder = 
StreamItems.CONTENT_PHOTO_URI.buildUpon(); 
builder.appendQueryParameter(RawContacts.ACCOUNT_NAME, accountName); 
builder.appendQueryParameter(RawContacts.ACCOUNT_TYPE, accountType); 
getContentResolver().update(builder.build(), values); 





Delete Deletes can be made against either a specific photo item in a stream 
item, or against all or a selected subset of photo items under a stream item. 
For example: 

Deleting a single photo via the 
(|android.provider.ContactsContract.StreamItems.StreamItemPhotos|) sub-path of 
a stream item: 



Uri.Builder builder = StreamItems.CONTENT_URI.buildUpon(); 
ContentUris.appendId(builder, streamItemId); 
builder.appendEncodedPath(StreamItems.StreamItemPhotos.CONTENT_DIRECTORY); 
ContentUris.appendId(builder, streamItemPhotoId); 
builder.appendQueryParameter(RawContacts.ACCOUNT_NAME, accountName); 
builder.appendQueryParameter(RawContacts.ACCOUNT_TYPE, accountType); 
getContentResolver().delete(builder.build(), null, null); 

Deleting all photos under a stream item 



Uri.Builder builder = StreamItems.CONTENT_URI.buildUpon(); 
ContentUris.appendId(builder, streamItemId); 
builder.appendEncodedPath(StreamItems.StreamItemPhotos.CONTENT_DIRECTORY); 
builder.appendQueryParameter(RawContacts.ACCOUNT_NAME, accountName); 
builder.appendQueryParameter(RawContacts.ACCOUNT_TYPE, accountType); 
getContentResolver().delete(builder.build(), null, null); 



Query 

Querying for a specific photo in a stream item 



Cursor c = getContentResolver().query( ContentUris.withAppendedId( 
Uri.withAppendedPath( ContentUris.withAppendedId(StreamItems.CONTENT_URI, 
streamItemId) StreamItems.StreamItemPhotos#CONTENT_DIRECTORY), 
streamItemPhotoId), null, null, null, null); 

Querying for all photos in a stream item 



Cursor c = getContentResolver().query( Uri.withAppendedPath( 
ContentUris.withAppendedId(StreamItems.CONTENT_URI, streamItemId) 
StreamItems.StreamItemPhotos#CONTENT_DIRECTORY), null, null, null, 
StreamItemPhotos.SORT_INDEX); 

The record will contain both a 
(|android.provider.ContactsContract.StreamItems.StreamItemPhotos|) and a 
(|android.provider.ContactsContract.StreamItems.StreamItemPhotos|) . The 
(|android.provider.ContactsContract.StreamItems.StreamItemPhotos|) can be used 
in conjunction with the (|android.provider.ContactsContract.DisplayPhoto|) API 
to retrieve photo content, or you can open the 
(|android.provider.ContactsContract.StreamItems.StreamItemPhotos|) as an asset 
file, as follows: 

public InputStream openDisplayPhoto(String photoUri) { try { 
AssetFileDescriptor fd = getContentResolver().openAssetFileDescriptor(photoUri, 
"r"); return fd.createInputStream(); } catch (IOException e) { return null; } } 





*java.lang.String_android.provider.ContactsContract.StreamItemPhotos.PHOTO*

The binary representation of the photo. Any size photo can be inserted; the 
provider will resize it appropriately for storage and display. 

This is only intended for use when inserting or updating a stream item photo. 
To retrieve the photo that was stored, open 
(|android.provider.ContactsContract.StreamItems.StreamItemPhotos|) as an asset 
file. 

Type: BLOB 



