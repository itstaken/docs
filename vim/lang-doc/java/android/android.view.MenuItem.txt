*android.view.MenuItem* *MenuItem* Interface for direct access to a previously c

public interface interface MenuItem


|android.view.MenuItem_Description|
|android.view.MenuItem_Fields|
|android.view.MenuItem_Constructors|
|android.view.MenuItem_Methods|

================================================================================

*android.view.MenuItem_Fields*
|int_android.view.MenuItem.SHOW_AS_ACTION_ALWAYS|
|int_android.view.MenuItem.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW|
|int_android.view.MenuItem.SHOW_AS_ACTION_IF_ROOM|
|int_android.view.MenuItem.SHOW_AS_ACTION_NEVER|
|int_android.view.MenuItem.SHOW_AS_ACTION_WITH_TEXT|

*android.view.MenuItem_Methods*
|android.view.MenuItem.collapseActionView()|Collapse the action view associated
|android.view.MenuItem.expandActionView()|Expand the action view associated wit
|android.view.MenuItem.getActionProvider()|Gets theActionProvider.
|android.view.MenuItem.getActionView()|Returns the currently set action view fo
|android.view.MenuItem.getAlphabeticShortcut()|Return the char for this menu it
|android.view.MenuItem.getGroupId()|Return the group identifier that this menu 
|android.view.MenuItem.getIcon()|Returns the icon for this item as a Drawable (
|android.view.MenuItem.getIntent()|Return the Intent associated with this item.
|android.view.MenuItem.getItemId()|Return the identifier for this menu item.
|android.view.MenuItem.getMenuInfo()|Gets the extra information linked to this 
|android.view.MenuItem.getNumericShortcut()|Return the char for this menu item'
|android.view.MenuItem.getOrder()|Return the category and order within the cate
|android.view.MenuItem.getSubMenu()|Get the sub-menu to be invoked when this it
|android.view.MenuItem.getTitle()|Retrieve the current title of the item.
|android.view.MenuItem.getTitleCondensed()|Retrieve the current condensed title
|android.view.MenuItem.hasSubMenu()|Check whether this item has an associated s
|android.view.MenuItem.isActionViewExpanded()|Returns true if this menu item's 
|android.view.MenuItem.isCheckable()|Return whether the item can currently disp
|android.view.MenuItem.isChecked()|Return whether the item is currently display
|android.view.MenuItem.isEnabled()|Return the enabled state of the menu item.
|android.view.MenuItem.isVisible()|Return the visibility of the menu item.
|android.view.MenuItem.setActionProvider(ActionProvider)|Sets theActionProvider
|android.view.MenuItem.setActionView(int)|Set an action view for this menu item
|android.view.MenuItem.setActionView(View)|Set an action view for this menu ite
|android.view.MenuItem.setAlphabeticShortcut(char)|Change the alphabetic shortc
|android.view.MenuItem.setCheckable(boolean)|Control whether this item can disp
|android.view.MenuItem.setChecked(boolean)|Control whether this item is shown w
|android.view.MenuItem.setEnabled(boolean)|Sets whether the menu item is enable
|android.view.MenuItem.setIcon(Drawable)|Change the icon associated with this i
|android.view.MenuItem.setIntent(Intent)|Change the Intent associated with this
|android.view.MenuItem.setNumericShortcut(char)|Change the numeric shortcut ass
|android.view.MenuItem.setOnActionExpandListener(MenuItem.OnActionExpandListener)|
|android.view.MenuItem.setOnMenuItemClickListener(MenuItem.OnMenuItemClickListener)|
|android.view.MenuItem.setShortcut(char,char)|Change both the numeric and alpha
|android.view.MenuItem.setShowAsAction(int)|Sets how this item should display i
|android.view.MenuItem.setShowAsActionFlags(int)|Sets how this item should disp
|android.view.MenuItem.setTitle(CharSequence)|Change the title associated with 
|android.view.MenuItem.setTitle(int)|Change the title associated with this item
|android.view.MenuItem.setTitleCondensed(CharSequence)|Change the condensed tit
|android.view.MenuItem.setVisible(boolean)|Sets the visibility of the menu item

*android.view.MenuItem_Description*

Interface for direct access to a previously created menu item. 

An Item is returned by calling one of the (|android.view.Menu|) methods. 

For a feature set of specific menu types, see (|android.view.Menu|) . 

Developer Guides For information about creating menus, read the <a 
href="guide/topics/ui/menus.html">Menus developer guide. 



*int_android.view.MenuItem.SHOW_AS_ACTION_ALWAYS*

Always show this item as a button in an Action Bar. Use sparingly! If too many 
items are set to always show in the Action Bar it can crowd the Action Bar and 
degrade the user experience on devices with smaller screens. A good rule of 
thumb is to have no more than 2 items set to always show at a time. 


*int_android.view.MenuItem.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW*

This item's action view collapses to a normal menu item. When expanded, the 
action view temporarily takes over a larger segment of its container. 


*int_android.view.MenuItem.SHOW_AS_ACTION_IF_ROOM*

Show this item as a button in an Action Bar if the system decides there is room 
for it. 


*int_android.view.MenuItem.SHOW_AS_ACTION_NEVER*

Never show this item as a button in an Action Bar. 


*int_android.view.MenuItem.SHOW_AS_ACTION_WITH_TEXT*

When this item is in the action bar, always show it with a text label even if 
it also has an icon specified. 



*android.view.MenuItem.collapseActionView()*

public boolean collapseActionView()

Collapse the action view associated with this menu item. The menu item must 
have an action view set, as well as the showAsAction flag 
(|android.view.MenuItem|) . If a listener has been set using 
(|android.view.MenuItem|) it will have its 
(|android.view.MenuItem.OnActionExpandListener|) method invoked. The listener 
may return false from this method to prevent collapsing the action view. 



    Returns: true if the action view was collapsed, false otherwise. 

*android.view.MenuItem.expandActionView()*

public boolean expandActionView()

Expand the action view associated with this menu item. The menu item must have 
an action view set, as well as the showAsAction flag (|android.view.MenuItem|) 
. If a listener has been set using (|android.view.MenuItem|) it will have its 
(|android.view.MenuItem.OnActionExpandListener|) method invoked. The listener 
may return false from this method to prevent expanding the action view. 



    Returns: true if the action view was expanded, false otherwise. 

*android.view.MenuItem.getActionProvider()*

public |android.view.ActionProvider| getActionProvider()

Gets the (|android.view.ActionProvider|) . 



    Returns: The action provider. 

*android.view.MenuItem.getActionView()*

public |android.view.View| getActionView()

Returns the currently set action view for this menu item. 



    Returns: This item's action view 

*android.view.MenuItem.getAlphabeticShortcut()*

public char getAlphabeticShortcut()

Return the char for this menu item's alphabetic shortcut. 



    Returns: Alphabetic character to use as a shortcut. 

*android.view.MenuItem.getGroupId()*

public int getGroupId()

Return the group identifier that this menu item is part of. The group 
identifier can not be changed after the menu is created. 



    Returns: The menu item's group identifier. 

*android.view.MenuItem.getIcon()*

public Drawable getIcon()

Returns the icon for this item as a Drawable (getting it from resources if it 
hasn't been loaded before). 



    Returns: The icon as a Drawable. 

*android.view.MenuItem.getIntent()*

public |android.content.Intent| getIntent()

Return the Intent associated with this item. This returns a reference to the 
Intent which you can change as desired to modify what the Item is holding. 



    Returns: Returns the last value supplied to {@link #setIntent}, or null. 

*android.view.MenuItem.getItemId()*

public int getItemId()

Return the identifier for this menu item. The identifier can not be changed 
after the menu is created. 



    Returns: The menu item's identifier. 

*android.view.MenuItem.getMenuInfo()*

public |android.view.ContextMenu.ContextMenuInfo| getMenuInfo()

Gets the extra information linked to this menu item. This extra information is 
set by the View that added this menu item to the menu. 



    Returns: The extra information linked to the View that added this menu item to the menu. 
             This can be null. 

*android.view.MenuItem.getNumericShortcut()*

public char getNumericShortcut()

Return the char for this menu item's numeric (12-key) shortcut. 



    Returns: Numeric character to use as a shortcut. 

*android.view.MenuItem.getOrder()*

public int getOrder()

Return the category and order within the category of this item. This item will 
be shown before all items (within its category) that have order greater than 
this value. 

An order integer contains the item's category (the upper bits of the integer; 
set by or/add the category with the order within the category) and the ordering 
of the item within that category (the lower bits). Example categories are 
(|android.view.Menu|) , (|android.view.Menu|) , (|android.view.Menu|) , 
(|android.view.Menu|) . See (|android.view.Menu|) for a full list. 



    Returns: The order of this item. 

*android.view.MenuItem.getSubMenu()*

public |android.view.SubMenu| getSubMenu()

Get the sub-menu to be invoked when this item is selected, if it has one. See 
(|android.view.MenuItem|) . 



    Returns: The associated menu if there is one, else null 

*android.view.MenuItem.getTitle()*

public |java.lang.CharSequence| getTitle()

Retrieve the current title of the item. 



    Returns: 

*android.view.MenuItem.getTitleCondensed()*

public |java.lang.CharSequence| getTitleCondensed()

Retrieve the current condensed title of the item. If a condensed title was 
never set, it will return the normal title. 



    Returns: The condensed title, if it exists. Otherwise the normal title. 

*android.view.MenuItem.hasSubMenu()*

public boolean hasSubMenu()

Check whether this item has an associated sub-menu. I.e. it is a sub-menu of 
another menu. 



    Returns: If true this item has a menu; else it is a normal item. 

*android.view.MenuItem.isActionViewExpanded()*

public boolean isActionViewExpanded()

Returns true if this menu item's action view has been expanded. 



    Returns: true if the item's action view is expanded, false otherwise. 

*android.view.MenuItem.isCheckable()*

public boolean isCheckable()

Return whether the item can currently display a check mark. 



    Returns: If a check mark can be displayed, returns true. 

*android.view.MenuItem.isChecked()*

public boolean isChecked()

Return whether the item is currently displaying a check mark. 



    Returns: If a check mark is displayed, returns true. 

*android.view.MenuItem.isEnabled()*

public boolean isEnabled()

Return the enabled state of the menu item. 



    Returns: If true the item is enabled and hence invokable; else it is not. 

*android.view.MenuItem.isVisible()*

public boolean isVisible()

Return the visibility of the menu item. 



    Returns: If true the item is visible; else it is hidden. 

*android.view.MenuItem.setActionProvider(ActionProvider)*

public |android.view.MenuItem| setActionProvider(android.view.ActionProvider actionProvider)

Sets the (|android.view.ActionProvider|) responsible for creating an action 
view if the item is placed on the action bar. The provider also provides a 
default action invoked if the item is placed in the overflow menu. 

Note: Setting an action provider overrides the action view set via 
(|android.view.MenuItem|) or (|android.view.MenuItem|) . 


    actionProvider - The action provider. 

    Returns: This Item so additional setters can be called. 

*android.view.MenuItem.setActionView(int)*

public |android.view.MenuItem| setActionView(int resId)

Set an action view for this menu item. An action view will be displayed in 
place of an automatically generated menu item element in the UI when this item 
is shown as an action within a parent. 

Note: Setting an action view overrides the action provider set via 
(|android.view.MenuItem|) . 


    resId - Layout resource to use for presenting this item to the user. 

    Returns: This Item so additional setters can be called. 

*android.view.MenuItem.setActionView(View)*

public |android.view.MenuItem| setActionView(android.view.View view)

Set an action view for this menu item. An action view will be displayed in 
place of an automatically generated menu item element in the UI when this item 
is shown as an action within a parent. 

Note: Setting an action view overrides the action provider set via 
(|android.view.MenuItem|) . 


    view - View to use for presenting this item to the user. 

    Returns: This Item so additional setters can be called. 

*android.view.MenuItem.setAlphabeticShortcut(char)*

public |android.view.MenuItem| setAlphabeticShortcut(char alphaChar)

Change the alphabetic shortcut associated with this item. The shortcut will be 
triggered when the key that generates the given character is pressed alone or 
along with with the alt key. Case is not significant and shortcut characters 
will be displayed in lower case. Note that menu items with the characters '\b' 
or '\n' as shortcuts will get triggered by the Delete key or Carriage Return 
key, respectively. 

See (|android.view.Menu|) for the menu types that support shortcuts. 


    alphaChar - The alphabetic shortcut key. This is the shortcut when using a keyboard with 
       alphabetic keys. 

    Returns: This Item so additional setters can be called. 

*android.view.MenuItem.setCheckable(boolean)*

public |android.view.MenuItem| setCheckable(boolean checkable)

Control whether this item can display a check mark. Setting this does not 
actually display a check mark (see (|android.view.MenuItem|) for that); rather, 
it ensures there is room in the item in which to display a check mark. 

See (|android.view.Menu|) for the menu types that support check marks. 


    checkable - Set to true to allow a check mark, false to disallow. The default is false. 

    Returns: This Item so additional setters can be called. 

*android.view.MenuItem.setChecked(boolean)*

public |android.view.MenuItem| setChecked(boolean checked)

Control whether this item is shown with a check mark. Note that you must first 
have enabled checking with (|android.view.MenuItem|) or else the check mark 
will not appear. If this item is a member of a group that contains 
mutually-exclusive items (set via (|android.view.Menu|) , the other items in 
the group will be unchecked. 

See (|android.view.Menu|) for the menu types that support check marks. 


    checked - Set to true to display a check mark, false to hide it. The default value is 
       false. 

    Returns: This Item so additional setters can be called. 

*android.view.MenuItem.setEnabled(boolean)*

public |android.view.MenuItem| setEnabled(boolean enabled)

Sets whether the menu item is enabled. Disabling a menu item will not allow it 
to be invoked via its shortcut. The menu item will still be visible. 


    enabled - If true then the item will be invokable; if false it is won't be invokable. 

    Returns: This Item so additional setters can be called. 

*android.view.MenuItem.setIcon(Drawable)*

public |android.view.MenuItem| setIcon(Drawable icon)

Change the icon associated with this item. This icon will not always be shown, 
so the title should be sufficient in describing this item. See 
(|android.view.Menu|) for the menu types that support icons. 


    icon - The new icon (as a Drawable) to be displayed. 

    Returns: This Item so additional setters can be called. 

*android.view.MenuItem.setIntent(Intent)*

public |android.view.MenuItem| setIntent(android.content.Intent intent)

Change the Intent associated with this item. By default there is no Intent 
associated with a menu item. If you set one, and nothing else handles the item, 
then the default behavior will be to call (|android.content.Context|) with the 
given Intent. 

Note that setIntent() can not be used with the versions of 
(|android.view.Menu|) that take a Runnable, because (|java.lang.Runnable|) does 
not return a value so there is no way to tell if it handled the item. In this 
case it is assumed that the Runnable always handles the item, and the intent 
will never be started. 


    intent - The Intent to associated with the item. This Intent object is not copied, so be 
       careful not to modify it later. 

    Returns: This Item so additional setters can be called. 

*android.view.MenuItem.setNumericShortcut(char)*

public |android.view.MenuItem| setNumericShortcut(char numericChar)

Change the numeric shortcut associated with this item. 

See (|android.view.Menu|) for the menu types that support shortcuts. 


    numericChar - The numeric shortcut key. This is the shortcut when using a 12-key (numeric) 
       keyboard. 

    Returns: This Item so additional setters can be called. 

*android.view.MenuItem.setOnActionExpandListener(MenuItem.OnActionExpandListener)*

public |android.view.MenuItem| setOnActionExpandListener(android.view.MenuItem.OnActionExpandListener listener)

Set an (|android.view.MenuItem.OnActionExpandListener|) on this menu item to be 
notified when the associated action view is expanded or collapsed. The menu 
item must be configured to expand or collapse its action view using the flag 
(|android.view.MenuItem|) . 


    listener - Listener that will respond to expand/collapse events 

    Returns: This menu item instance for call chaining 

*android.view.MenuItem.setOnMenuItemClickListener(MenuItem.OnMenuItemClickListener)*

public |android.view.MenuItem| setOnMenuItemClickListener(android.view.MenuItem.OnMenuItemClickListener menuItemClickListener)

Set a custom listener for invocation of this menu item. In most situations, it 
is more efficient and easier to use (|android.app.Activity|) or 
(|android.app.Activity|) . 


    menuItemClickListener - The object to receive invokations. 

    Returns: This Item so additional setters can be called. 

*android.view.MenuItem.setShortcut(char,char)*

public |android.view.MenuItem| setShortcut(
  char numericChar,
  char alphaChar)

Change both the numeric and alphabetic shortcut associated with this item. Note 
that the shortcut will be triggered when the key that generates the given 
character is pressed alone or along with with the alt key. Also note that case 
is not significant and that alphabetic shortcut characters will be displayed in 
lower case. 

See (|android.view.Menu|) for the menu types that support shortcuts. 


    numericChar - The numeric shortcut key. This is the shortcut when using a numeric (e.g., 
       12-key) keyboard. 
    alphaChar - The alphabetic shortcut key. This is the shortcut when using a keyboard with 
       alphabetic keys. 

    Returns: This Item so additional setters can be called. 

*android.view.MenuItem.setShowAsAction(int)*

public void setShowAsAction(int actionEnum)

Sets how this item should display in the presence of an Action Bar. The 
parameter actionEnum is a flag set. One of (|android.view.MenuItem|) , 
(|android.view.MenuItem|) , or (|android.view.MenuItem|) should be used, and 
you may optionally OR the value with (|android.view.MenuItem|) . 
SHOW_AS_ACTION_WITH_TEXT requests that when the item is shown as an action, it 
should be shown with a text label. 


    actionEnum - How the item should display. One of {@link #SHOW_AS_ACTION_ALWAYS}, {@link 
       #SHOW_AS_ACTION_IF_ROOM}, or {@link #SHOW_AS_ACTION_NEVER}. 
       SHOW_AS_ACTION_NEVER is the default. 

*android.view.MenuItem.setShowAsActionFlags(int)*

public |android.view.MenuItem| setShowAsActionFlags(int actionEnum)

Sets how this item should display in the presence of an Action Bar. The 
parameter actionEnum is a flag set. One of (|android.view.MenuItem|) , 
(|android.view.MenuItem|) , or (|android.view.MenuItem|) should be used, and 
you may optionally OR the value with (|android.view.MenuItem|) . 
SHOW_AS_ACTION_WITH_TEXT requests that when the item is shown as an action, it 
should be shown with a text label. 

Note: This method differs from (|android.view.MenuItem|) only in that it 
returns the current MenuItem instance for call chaining. 


    actionEnum - How the item should display. One of {@link #SHOW_AS_ACTION_ALWAYS}, {@link 
       #SHOW_AS_ACTION_IF_ROOM}, or {@link #SHOW_AS_ACTION_NEVER}. 
       SHOW_AS_ACTION_NEVER is the default. 

    Returns: This MenuItem instance for call chaining. 

*android.view.MenuItem.setTitle(CharSequence)*

public |android.view.MenuItem| setTitle(java.lang.CharSequence title)

Change the title associated with this item. 


    title - The new text to be displayed. 

    Returns: This Item so additional setters can be called. 

*android.view.MenuItem.setTitle(int)*

public |android.view.MenuItem| setTitle(int title)

Change the title associated with this item. 

Some menu types do not sufficient space to show the full title, and instead a 
condensed title is preferred. See (|android.view.Menu|) for more information. 


    title - The resource id of the new text to be displayed. 

    Returns: This Item so additional setters can be called. 

*android.view.MenuItem.setTitleCondensed(CharSequence)*

public |android.view.MenuItem| setTitleCondensed(java.lang.CharSequence title)

Change the condensed title associated with this item. The condensed title is 
used in situations where the normal title may be too long to be displayed. 


    title - The new text to be displayed as the condensed title. 

    Returns: This Item so additional setters can be called. 

*android.view.MenuItem.setVisible(boolean)*

public |android.view.MenuItem| setVisible(boolean visible)

Sets the visibility of the menu item. Even if a menu item is not visible, it 
may still be invoked via its shortcut (to completely disable an item, set it to 
invisible and disabled(|android.view.MenuItem|) ). 


    visible - If true then the item will be visible; if false it is hidden. 

    Returns: This Item so additional setters can be called. 


