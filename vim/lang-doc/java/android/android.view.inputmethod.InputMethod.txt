*android.view.inputmethod.InputMethod* *InputMethod* The InputMethod interface r

public interface interface InputMethod


|android.view.inputmethod.InputMethod_Description|
|android.view.inputmethod.InputMethod_Fields|
|android.view.inputmethod.InputMethod_Constructors|
|android.view.inputmethod.InputMethod_Methods|

================================================================================

*android.view.inputmethod.InputMethod_Fields*
|java.lang.String_android.view.inputmethod.InputMethod.SERVICE_INTERFACE|
|java.lang.String_android.view.inputmethod.InputMethod.SERVICE_META_DATA|
|int_android.view.inputmethod.InputMethod.SHOW_EXPLICIT|
|int_android.view.inputmethod.InputMethod.SHOW_FORCED|

*android.view.inputmethod.InputMethod_Methods*
|android.view.inputmethod.InputMethod.attachToken(IBinder)|Called first thing a
|android.view.inputmethod.InputMethod.bindInput(InputBinding)|Bind a new applic
|android.view.inputmethod.InputMethod.changeInputMethodSubtype(InputMethodSubtype)|
|android.view.inputmethod.InputMethod.createSession(InputMethod.SessionCallback)|
|android.view.inputmethod.InputMethod.hideSoftInput(int,ResultReceiver)|Request
|android.view.inputmethod.InputMethod.restartInput(InputConnection,EditorInfo)|
|android.view.inputmethod.InputMethod.revokeSession(InputMethodSession)|Disable
|android.view.inputmethod.InputMethod.setSessionEnabled(InputMethodSession,boolean)|
|android.view.inputmethod.InputMethod.showSoftInput(int,ResultReceiver)|Request
|android.view.inputmethod.InputMethod.startInput(InputConnection,EditorInfo)|Th
|android.view.inputmethod.InputMethod.unbindInput()|Unbind an application envir

*android.view.inputmethod.InputMethod_Description*

The InputMethod interface represents an input method which can generate key 
events and text, such as digital, email addresses, CJK characters, other 
language characters, and etc., while handling various input events, and send 
the text back to the application that requests text input. See 
(|android.view.inputmethod.InputMethodManager|) for more general information 
about the architecture. 

Applications will not normally use this interface themselves, instead relying 
on the standard interaction provided by (|android.widget.TextView|) and 
(|android.widget.EditText|) . 

Those implementing input methods should normally do so by deriving from 
(|android.inputmethodservice.InputMethodService|) or one of its subclasses. 
When implementing an input method, the service component containing it must 
also supply a (|android.view.inputmethod.InputMethod|) meta-data field, 
referencing an XML resource providing details about the input method. All input 
methods also must require that clients hold the (|android.Manifest.permission|) 
in order to interact with the service; if this is not required, the system will 
not use that input method, because it can not trust that it is not compromised. 

The InputMethod interface is actually split into two parts: the interface here 
is the top-level interface to the input method, providing all access to it, 
which only the system can access (due to the BIND_INPUT_METHOD permission 
requirement). In addition its method (|android.view.inputmethod.InputMethod|) 
can be called to instantate a secondary 
(|android.view.inputmethod.InputMethodSession|) interface which is what clients 
use to communicate with the input method. 



*java.lang.String_android.view.inputmethod.InputMethod.SERVICE_INTERFACE*

This is the interface name that a service implementing an input method should 
say that it supports -- that is, this is the action it uses for its intent 
filter. To be supported, the service must also require the 
(|android.Manifest.permission|) permission so that other applications can not 
abuse it. 


*java.lang.String_android.view.inputmethod.InputMethod.SERVICE_META_DATA*

Name under which an InputMethod service component publishes information about 
itself. This meta-data must reference an XML resource containing an < 
input-method(|android.R.styleable|) > tag. 


*int_android.view.inputmethod.InputMethod.SHOW_EXPLICIT*

Flag for (|android.view.inputmethod.InputMethod|) : this show has been 
explicitly requested by the user. If not set, the system has decided it may be 
a good idea to show the input method based on a navigation operation in the UI. 


*int_android.view.inputmethod.InputMethod.SHOW_FORCED*

Flag for (|android.view.inputmethod.InputMethod|) : this show has been forced 
to happen by the user. If set, the input method should remain visible until 
deliberated dismissed by the user in its UI. 



*android.view.inputmethod.InputMethod.attachToken(IBinder)*

public void attachToken(android.os.IBinder token)

Called first thing after an input method is created, this supplies a unique 
token for the session it has with the system service. It is needed to identify 
itself with the service to validate its operations. This token must not be 
passed to applications, since it grants special priviledges that should not be 
given to applications. 

Note: to protect yourself from malicious clients, you should only accept the 
first token given to you. Any after that may come from the client. 



*android.view.inputmethod.InputMethod.bindInput(InputBinding)*

public void bindInput(android.view.inputmethod.InputBinding binding)

Bind a new application environment in to the input method, so that it can later 
start and stop input processing. Typically this method is called when this 
input method is enabled in an application for the first time. 


    binding - Information about the application window that is binding to the input method. 

*android.view.inputmethod.InputMethod.changeInputMethodSubtype(InputMethodSubtype)*

public void changeInputMethodSubtype(android.view.inputmethod.InputMethodSubtype subtype)

Notify that the input method subtype is being changed in the same input method. 


    subtype - New subtype of the notified input method 

*android.view.inputmethod.InputMethod.createSession(InputMethod.SessionCallback)*

public void createSession(android.view.inputmethod.InputMethod.SessionCallback callback)

Create a new (|android.view.inputmethod.InputMethodSession|) that can be handed 
to client applications for interacting with the input method. You can later use 
(|android.view.inputmethod.InputMethod|) to destroy the session so that it can 
no longer be used by any clients. 


    callback - Interface that is called with the newly created session. 

*android.view.inputmethod.InputMethod.hideSoftInput(int,ResultReceiver)*

public void hideSoftInput(
  int flags,
  android.os.ResultReceiver resultReceiver)

Request that any soft input part of the input method be hidden from the user. 


    flags - Provides additional information about the show request. Currently always 0. 
    resultReceiver - The client requesting the show may wish to be told the impact of their request, 
       which should be supplied here. The result code should be {@link 
       InputMethodManager#RESULT_UNCHANGED_SHOWN 
       InputMethodManager.RESULT_UNCHANGED_SHOWN}, {@link 
       InputMethodManager#RESULT_UNCHANGED_HIDDEN 
       InputMethodManager.RESULT_UNCHANGED_HIDDEN}, {@link 
       InputMethodManager#RESULT_SHOWN InputMethodManager.RESULT_SHOWN}, or 
       {@link InputMethodManager#RESULT_HIDDEN 
       InputMethodManager.RESULT_HIDDEN}. 

*android.view.inputmethod.InputMethod.restartInput(InputConnection,EditorInfo)*

public void restartInput(
  android.view.inputmethod.InputConnection inputConnection,
  android.view.inputmethod.EditorInfo attribute)

This method is called when the state of this input method needs to be reset. 

Typically, this method is called when the input focus is moved from one text 
box to another. 


    inputConnection - Optional specific input connection for communicating with the text box; if 
       null, you should use the generic bound input connection. 
    attribute - The attribute of the text box (typically, a EditText) that requests input. 

*android.view.inputmethod.InputMethod.revokeSession(InputMethodSession)*

public void revokeSession(android.view.inputmethod.InputMethodSession session)

Disable and destroy a session that was previously created with 
(|android.view.inputmethod.InputMethod|) . After this call, the given session 
interface is no longer active and calls on it will fail. 


    session - The {@link InputMethodSession} previously provided through 
       SessionCallback.sessionCreated() that is to be revoked. 

*android.view.inputmethod.InputMethod.setSessionEnabled(InputMethodSession,boolean)*

public void setSessionEnabled(
  android.view.inputmethod.InputMethodSession session,
  boolean enabled)

Control whether a particular input method session is active. 


    session - The {@link InputMethodSession} previously provided through 
       SessionCallback.sessionCreated() that is to be changed. 

*android.view.inputmethod.InputMethod.showSoftInput(int,ResultReceiver)*

public void showSoftInput(
  int flags,
  android.os.ResultReceiver resultReceiver)

Request that any soft input part of the input method be shown to the user. 


    flags - Provides additional information about the show request. Currently may be 0 or 
       have the bit {@link #SHOW_EXPLICIT} set. 
    resultReceiver - The client requesting the show may wish to be told the impact of their request, 
       which should be supplied here. The result code should be {@link 
       InputMethodManager#RESULT_UNCHANGED_SHOWN 
       InputMethodManager.RESULT_UNCHANGED_SHOWN}, {@link 
       InputMethodManager#RESULT_UNCHANGED_HIDDEN 
       InputMethodManager.RESULT_UNCHANGED_HIDDEN}, {@link 
       InputMethodManager#RESULT_SHOWN InputMethodManager.RESULT_SHOWN}, or 
       {@link InputMethodManager#RESULT_HIDDEN 
       InputMethodManager.RESULT_HIDDEN}. 

*android.view.inputmethod.InputMethod.startInput(InputConnection,EditorInfo)*

public void startInput(
  android.view.inputmethod.InputConnection inputConnection,
  android.view.inputmethod.EditorInfo info)

This method is called when the application starts to receive text and it is 
ready for this input method to process received events and send result text 
back to the application. 


    inputConnection - Optional specific input connection for communicating with the text box; if 
       null, you should use the generic bound input connection. 
    info - Information about the text box (typically, an EditText) that requests input. 

*android.view.inputmethod.InputMethod.unbindInput()*

public void unbindInput()

Unbind an application environment, called when the information previously set 
by (|android.view.inputmethod.InputMethod|) is no longer valid for this input 
method. 

Typically this method is called when the application changes to be 
non-foreground. 




