*android.net.LinkQualityInfo* *LinkQualityInfo* Class that represents useful att

public class LinkQualityInfo
  extends    |java.lang.Object|
  implements |android.os.Parcelable|

|android.net.LinkQualityInfo_Description|
|android.net.LinkQualityInfo_Fields|
|android.net.LinkQualityInfo_Constructors|
|android.net.LinkQualityInfo_Methods|

================================================================================

*android.net.LinkQualityInfo_Fields*
|android.os.Parcelable.Creator<android.net.LinkQualityInfo>_android.net.LinkQualityInfo.CREATOR|
|int_android.net.LinkQualityInfo.NORMALIZED_MAX_SIGNAL_STRENGTH|
|int_android.net.LinkQualityInfo.NORMALIZED_MIN_SIGNAL_STRENGTH|
|int_android.net.LinkQualityInfo.NORMALIZED_SIGNAL_STRENGTH_RANGE|
|int_android.net.LinkQualityInfo.OBJECT_TYPE_LINK_QUALITY_INFO|
|int_android.net.LinkQualityInfo.OBJECT_TYPE_MOBILE_LINK_QUALITY_INFO|
|int_android.net.LinkQualityInfo.OBJECT_TYPE_WIFI_LINK_QUALITY_INFO|
|int_android.net.LinkQualityInfo.UNKNOWN_INT|
|long_android.net.LinkQualityInfo.UNKNOWN_LONG|

*android.net.LinkQualityInfo_Constructors*
|android.net.LinkQualityInfo()|

*android.net.LinkQualityInfo_Methods*
|android.net.LinkQualityInfo.describeContents()|Implement the Parcelable interf
|android.net.LinkQualityInfo.getDataSampleDuration()|returns the sample duratio
|android.net.LinkQualityInfo.getLastDataSampleTime()|returns the time stamp of 
|android.net.LinkQualityInfo.getNetworkType()|returns the type of network this 
|android.net.LinkQualityInfo.getNormalizedSignalStrength()|returns the signal s
|android.net.LinkQualityInfo.getPacketCount()|returns the total number of packe
|android.net.LinkQualityInfo.getPacketErrorCount()|returns the total number of 
|android.net.LinkQualityInfo.getTheoreticalLatency()|returns the theoretical la
|android.net.LinkQualityInfo.getTheoreticalRxBandwidth()|returns the theoretica
|android.net.LinkQualityInfo.getTheoreticalTxBandwidth()|returns the theoretica
|android.net.LinkQualityInfo.initializeFromParcel(Parcel)|
|android.net.LinkQualityInfo.setDataSampleDuration(int)|
|android.net.LinkQualityInfo.setLastDataSampleTime(long)|
|android.net.LinkQualityInfo.setNetworkType(int)|
|android.net.LinkQualityInfo.setNormalizedSignalStrength(int)|
|android.net.LinkQualityInfo.setPacketCount(long)|
|android.net.LinkQualityInfo.setPacketErrorCount(long)|
|android.net.LinkQualityInfo.setTheoreticalLatency(int)|
|android.net.LinkQualityInfo.setTheoreticalRxBandwidth(int)|
|android.net.LinkQualityInfo.setTheoreticalTxBandwidth(int)|
|android.net.LinkQualityInfo.writeToParcel(Parcel,int)|
|android.net.LinkQualityInfo.writeToParcel(Parcel,int,int)|

*android.net.LinkQualityInfo_Description*

Class that represents useful attributes of generic network links such as the 
upload/download throughput or packet error rate. Generally speaking, you should 
be dealing with instances of LinkQualityInfo subclasses, such as 
(|android.net.|) or (|android.net.|) which provide additional information. 



*android.os.Parcelable.Creator<android.net.LinkQualityInfo>_android.net.LinkQualityInfo.CREATOR*




*int_android.net.LinkQualityInfo.NORMALIZED_MAX_SIGNAL_STRENGTH*




*int_android.net.LinkQualityInfo.NORMALIZED_MIN_SIGNAL_STRENGTH*




*int_android.net.LinkQualityInfo.NORMALIZED_SIGNAL_STRENGTH_RANGE*




*int_android.net.LinkQualityInfo.OBJECT_TYPE_LINK_QUALITY_INFO*

Implement the Parcelable interface. 


*int_android.net.LinkQualityInfo.OBJECT_TYPE_MOBILE_LINK_QUALITY_INFO*




*int_android.net.LinkQualityInfo.OBJECT_TYPE_WIFI_LINK_QUALITY_INFO*




*int_android.net.LinkQualityInfo.UNKNOWN_INT*

Represents a value that you can use to test if an integer field is set to a 
good value 


*long_android.net.LinkQualityInfo.UNKNOWN_LONG*

Represents a value that you can use to test if a long field is set to a good 
value 



*android.net.LinkQualityInfo()*

public LinkQualityInfo()




*android.net.LinkQualityInfo.describeContents()*

public int describeContents()

Implement the Parcelable interface 



*android.net.LinkQualityInfo.getDataSampleDuration()*

public int getDataSampleDuration()

returns the sample duration used 



    Returns: duration in milliseconds or {@link android.net.LinkQualityInfo#UNKNOWN_INT} 

*android.net.LinkQualityInfo.getLastDataSampleTime()*

public long getLastDataSampleTime()

returns the time stamp of the last sample 



    Returns: milliseconds elapsed since start and sample time or {@link 
             android.net.LinkQualityInfo#UNKNOWN_LONG} 

*android.net.LinkQualityInfo.getNetworkType()*

public int getNetworkType()

returns the type of network this link is connected to 



    Returns: network type as defined by {@link android.net.ConnectivityManager} or {@link 
             android.net.LinkQualityInfo#UNKNOWN_INT} 

*android.net.LinkQualityInfo.getNormalizedSignalStrength()*

public int getNormalizedSignalStrength()

returns the signal strength normalized across multiple types of networks 



    Returns: an integer value from 0 - 99 or {@link android.net.LinkQualityInfo#UNKNOWN_INT} 

*android.net.LinkQualityInfo.getPacketCount()*

public long getPacketCount()

returns the total number of packets sent or received in sample duration 



    Returns: number of packets or {@link android.net.LinkQualityInfo#UNKNOWN_LONG} 

*android.net.LinkQualityInfo.getPacketErrorCount()*

public long getPacketErrorCount()

returns the total number of packets errors encountered in sample duration 



    Returns: number of errors or {@link android.net.LinkQualityInfo#UNKNOWN_LONG} 

*android.net.LinkQualityInfo.getTheoreticalLatency()*

public int getTheoreticalLatency()

returns the theoretical latency of this network 



    Returns: latency in milliseconds or {@link android.net.LinkQualityInfo#UNKNOWN_INT} 

*android.net.LinkQualityInfo.getTheoreticalRxBandwidth()*

public int getTheoreticalRxBandwidth()

returns the theoretical download bandwidth of this network 



    Returns: bandwidth in Kbps or {@link android.net.LinkQualityInfo#UNKNOWN_INT} 

*android.net.LinkQualityInfo.getTheoreticalTxBandwidth()*

public int getTheoreticalTxBandwidth()

returns the theoretical upload bandwidth of this network 



    Returns: bandwidth in Kbps or {@link android.net.LinkQualityInfo#UNKNOWN_INT} 

*android.net.LinkQualityInfo.initializeFromParcel(Parcel)*

protected void initializeFromParcel(android.os.Parcel in)





*android.net.LinkQualityInfo.setDataSampleDuration(int)*

public void setDataSampleDuration(int dataSampleDuration)





*android.net.LinkQualityInfo.setLastDataSampleTime(long)*

public void setLastDataSampleTime(long lastDataSampleTime)





*android.net.LinkQualityInfo.setNetworkType(int)*

public void setNetworkType(int networkType)





*android.net.LinkQualityInfo.setNormalizedSignalStrength(int)*

public void setNormalizedSignalStrength(int normalizedSignalStrength)





*android.net.LinkQualityInfo.setPacketCount(long)*

public void setPacketCount(long packetCount)





*android.net.LinkQualityInfo.setPacketErrorCount(long)*

public void setPacketErrorCount(long packetErrorCount)





*android.net.LinkQualityInfo.setTheoreticalLatency(int)*

public void setTheoreticalLatency(int theoreticalLatency)





*android.net.LinkQualityInfo.setTheoreticalRxBandwidth(int)*

public void setTheoreticalRxBandwidth(int theoreticalRxBandwidth)





*android.net.LinkQualityInfo.setTheoreticalTxBandwidth(int)*

public void setTheoreticalTxBandwidth(int theoreticalTxBandwidth)





*android.net.LinkQualityInfo.writeToParcel(Parcel,int)*

public void writeToParcel(
  android.os.Parcel dest,
  int flags)





*android.net.LinkQualityInfo.writeToParcel(Parcel,int,int)*

public void writeToParcel(
  android.os.Parcel dest,
  int flags,
  int objectType)






