*android.appwidget.AppWidgetProviderInfo* *AppWidgetProviderInfo* Describes the 

public class AppWidgetProviderInfo
  extends    |java.lang.Object|
  implements |android.os.Parcelable|

|android.appwidget.AppWidgetProviderInfo_Description|
|android.appwidget.AppWidgetProviderInfo_Fields|
|android.appwidget.AppWidgetProviderInfo_Constructors|
|android.appwidget.AppWidgetProviderInfo_Methods|

================================================================================

*android.appwidget.AppWidgetProviderInfo_Fields*
|int_android.appwidget.AppWidgetProviderInfo.autoAdvanceViewId|
|android.content.ComponentName_android.appwidget.AppWidgetProviderInfo.configure|
|android.os.Parcelable.Creator<android.appwidget.AppWidgetProviderInfo>_android.appwidget.AppWidgetProviderInfo.CREATOR|
|int_android.appwidget.AppWidgetProviderInfo.icon|
|int_android.appwidget.AppWidgetProviderInfo.initialKeyguardLayout|
|int_android.appwidget.AppWidgetProviderInfo.initialLayout|
|java.lang.String_android.appwidget.AppWidgetProviderInfo.label|
|int_android.appwidget.AppWidgetProviderInfo.minHeight|
|int_android.appwidget.AppWidgetProviderInfo.minResizeHeight|
|int_android.appwidget.AppWidgetProviderInfo.minResizeWidth|
|int_android.appwidget.AppWidgetProviderInfo.minWidth|
|int_android.appwidget.AppWidgetProviderInfo.previewImage|
|android.content.ComponentName_android.appwidget.AppWidgetProviderInfo.provider|
|int_android.appwidget.AppWidgetProviderInfo.RESIZE_BOTH|
|int_android.appwidget.AppWidgetProviderInfo.RESIZE_HORIZONTAL|
|int_android.appwidget.AppWidgetProviderInfo.RESIZE_NONE|
|int_android.appwidget.AppWidgetProviderInfo.RESIZE_VERTICAL|
|int_android.appwidget.AppWidgetProviderInfo.resizeMode|
|int_android.appwidget.AppWidgetProviderInfo.updatePeriodMillis|
|int_android.appwidget.AppWidgetProviderInfo.WIDGET_CATEGORY_HOME_SCREEN|
|int_android.appwidget.AppWidgetProviderInfo.WIDGET_CATEGORY_KEYGUARD|
|int_android.appwidget.AppWidgetProviderInfo.widgetCategory|

*android.appwidget.AppWidgetProviderInfo_Constructors*
|android.appwidget.AppWidgetProviderInfo()|
|android.appwidget.AppWidgetProviderInfo(Parcel)|Unflatten the AppWidgetProvide

*android.appwidget.AppWidgetProviderInfo_Methods*
|android.appwidget.AppWidgetProviderInfo.clone()|
|android.appwidget.AppWidgetProviderInfo.describeContents()|
|android.appwidget.AppWidgetProviderInfo.toString()|
|android.appwidget.AppWidgetProviderInfo.writeToParcel(Parcel,int)|

*android.appwidget.AppWidgetProviderInfo_Description*

Describes the meta data for an installed AppWidget provider. The fields in this 
class correspond to the fields in the <appwidget-provider> xml tag. 



*int_android.appwidget.AppWidgetProviderInfo.autoAdvanceViewId*

The view id of the AppWidget subview which should be auto-advanced by the 
widget's host. 

This field corresponds to the android:autoAdvanceViewId attribute in the 
AppWidget meta-data file. 


*android.content.ComponentName_android.appwidget.AppWidgetProviderInfo.configure*

The activity to launch that will configure the AppWidget. 

This class name of field corresponds to the android:configure attribute in the 
AppWidget meta-data file. The package name always corresponds to the package 
containing the AppWidget provider. 


*android.os.Parcelable.Creator<android.appwidget.AppWidgetProviderInfo>_android.appwidget.AppWidgetProviderInfo.CREATOR*

Parcelable.Creator that instantiates AppWidgetProviderInfo objects 


*int_android.appwidget.AppWidgetProviderInfo.icon*

The icon to display for this AppWidget in the AppWidget picker. If not supplied 
in the xml, the application icon will be used. 

This field corresponds to the android:icon attribute in the <receiver> element 
in the AndroidManifest.xml file. 


*int_android.appwidget.AppWidgetProviderInfo.initialKeyguardLayout*

The resource id of the initial layout for this AppWidget when it is displayed 
on keyguard. This parameter only needs to be provided if the widget can be 
displayed on the keyguard, see (|android.appwidget.AppWidgetProviderInfo|) . 

This field corresponds to the android:initialKeyguardLayout attribute in the 
AppWidget meta-data file. 


*int_android.appwidget.AppWidgetProviderInfo.initialLayout*

The resource id of the initial layout for this AppWidget. This should be 
displayed until the RemoteViews for the AppWidget is available. 

This field corresponds to the android:initialLayout attribute in the AppWidget 
meta-data file. 


*java.lang.String_android.appwidget.AppWidgetProviderInfo.label*

The label to display to the user in the AppWidget picker. If not supplied in 
the xml, the application label will be used. 

This field corresponds to the android:label attribute in the <receiver> element 
in the AndroidManifest.xml file. 


*int_android.appwidget.AppWidgetProviderInfo.minHeight*

The default height of the widget when added to a host, in dp. The widget will 
get at least this height, and will often be given more, depending on the host. 

This field corresponds to the android:minHeight attribute in the AppWidget 
meta-data file. 


*int_android.appwidget.AppWidgetProviderInfo.minResizeHeight*

Minimum height (in dp) which the widget can be resized to. This field has no 
effect if it is greater than minHeight or if vertical resizing isn't enabled 
(see (|android.appwidget.AppWidgetProviderInfo|) ). 

This field corresponds to the android:minResizeHeight attribute in the 
AppWidget meta-data file. 


*int_android.appwidget.AppWidgetProviderInfo.minResizeWidth*

Minimum width (in dp) which the widget can be resized to. This field has no 
effect if it is greater than minWidth or if horizontal resizing isn't enabled 
(see (|android.appwidget.AppWidgetProviderInfo|) ). 

This field corresponds to the android:minResizeWidth attribute in the AppWidget 
meta-data file. 


*int_android.appwidget.AppWidgetProviderInfo.minWidth*

The default height of the widget when added to a host, in dp. The widget will 
get at least this width, and will often be given more, depending on the host. 

This field corresponds to the android:minWidth attribute in the AppWidget 
meta-data file. 


*int_android.appwidget.AppWidgetProviderInfo.previewImage*

A preview of what the AppWidget will look like after it's configured. If not 
supplied, the AppWidget's icon will be used. 

This field corresponds to the android:previewImage attribute in the <receiver> 
element in the AndroidManifest.xml file. 


*android.content.ComponentName_android.appwidget.AppWidgetProviderInfo.provider*

Identity of this AppWidget component. This component should be a 
(|android.content.BroadcastReceiver|) , and it will be sent the AppWidget 
intents as described in the AppWidget package 
documentation(|android.appwidget|) . 

This field corresponds to the android:name attribute in the <receiver> element 
in the AndroidManifest.xml file. 


*int_android.appwidget.AppWidgetProviderInfo.RESIZE_BOTH*

Widget is resizable in both the horizontal and vertical axes. 


*int_android.appwidget.AppWidgetProviderInfo.RESIZE_HORIZONTAL*

Widget is resizable in the horizontal axis only. 


*int_android.appwidget.AppWidgetProviderInfo.RESIZE_NONE*

Widget is not resizable. 


*int_android.appwidget.AppWidgetProviderInfo.RESIZE_VERTICAL*

Widget is resizable in the vertical axis only. 


*int_android.appwidget.AppWidgetProviderInfo.resizeMode*

The rules by which a widget can be resized. See 
(|android.appwidget.AppWidgetProviderInfo|) , 
(|android.appwidget.AppWidgetProviderInfo|) , 
(|android.appwidget.AppWidgetProviderInfo|) , 
(|android.appwidget.AppWidgetProviderInfo|) , 
(|android.appwidget.AppWidgetProviderInfo|) . 

This field corresponds to the android:resizeMode attribute in the AppWidget 
meta-data file. 


*int_android.appwidget.AppWidgetProviderInfo.updatePeriodMillis*

How often, in milliseconds, that this AppWidget wants to be updated. The 
AppWidget manager may place a limit on how often a AppWidget is updated. 

This field corresponds to the android:updatePeriodMillis attribute in the 
AppWidget meta-data file. 

Note: Updates requested with updatePeriodMillis will not be delivered more than 
once every 30 minutes. 


*int_android.appwidget.AppWidgetProviderInfo.WIDGET_CATEGORY_HOME_SCREEN*

Indicates that the widget can be displayed on the home screen. This is the 
default value. 


*int_android.appwidget.AppWidgetProviderInfo.WIDGET_CATEGORY_KEYGUARD*

Indicates that the widget can be displayed on the keyguard. 


*int_android.appwidget.AppWidgetProviderInfo.widgetCategory*

Determines whether this widget can be displayed on the home screen, the 
keyguard, or both. A widget which is displayed on both needs to ensure that it 
follows the design guidelines for both widget classes. This can be achieved by 
querying the AppWidget options in its widget provider's update method. 

This field corresponds to the widgetCategory attribute in the AppWidget 
meta-data file. 



*android.appwidget.AppWidgetProviderInfo()*

public AppWidgetProviderInfo()




*android.appwidget.AppWidgetProviderInfo(Parcel)*

public AppWidgetProviderInfo(android.os.Parcel in)

Unflatten the AppWidgetProviderInfo from a parcel. 


*android.appwidget.AppWidgetProviderInfo.clone()*

public |android.appwidget.AppWidgetProviderInfo| clone()





*android.appwidget.AppWidgetProviderInfo.describeContents()*

public int describeContents()





*android.appwidget.AppWidgetProviderInfo.toString()*

public |java.lang.String| toString()





*android.appwidget.AppWidgetProviderInfo.writeToParcel(Parcel,int)*

public void writeToParcel(
  android.os.Parcel out,
  int flags)






