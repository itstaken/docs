*android.preference.Preference* *Preference* Represents the basic Preference UI 

public class Preference
  extends    |java.lang.Object|
  implements |java.lang.Comparable|

|android.preference.Preference_Description|
|android.preference.Preference_Fields|
|android.preference.Preference_Constructors|
|android.preference.Preference_Methods|

================================================================================

*android.preference.Preference_Fields*
|int_android.preference.Preference.DEFAULT_ORDER|

*android.preference.Preference_Constructors*
|android.preference.Preference(Context)|Constructor to create a Preference.
|android.preference.Preference(Context,AttributeSet)|Constructor that is called
|android.preference.Preference(Context,AttributeSet,int)|Perform inflation from

*android.preference.Preference_Methods*
|android.preference.Preference.callChangeListener(Object)|Call this method afte
|android.preference.Preference.compareTo(Preference)|Compares Preference object
|android.preference.Preference.findPreferenceInHierarchy(String)|Finds a Prefer
|android.preference.Preference.getContext()|Returns theandroid.content.Contexto
|android.preference.Preference.getDependency()|Returns the key of the dependenc
|android.preference.Preference.getEditor()|Returns anSharedPreferences.Editorwh
|android.preference.Preference.getExtras()|Return the extras Bundle object asso
|android.preference.Preference.getFragment()|Return the fragment class name ass
|android.preference.Preference.getIcon()|Returns the icon of this Preference.
|android.preference.Preference.getIntent()|Return theIntentassociated with this
|android.preference.Preference.getKey()|Gets the key for this Preference, which
|android.preference.Preference.getLayoutResource()|Gets the layout resource tha
|android.preference.Preference.getOnPreferenceChangeListener()|Returns the call
|android.preference.Preference.getOnPreferenceClickListener()|Returns the callb
|android.preference.Preference.getOrder()|Gets the order of this Preference wit
|android.preference.Preference.getPersistedBoolean(boolean)|Attempts to get a p
|android.preference.Preference.getPersistedFloat(float)|Attempts to get a persi
|android.preference.Preference.getPersistedInt(int)|Attempts to get a persisted
|android.preference.Preference.getPersistedLong(long)|Attempts to get a persist
|android.preference.Preference.getPersistedString(String)|Attempts to get a per
|android.preference.Preference.getPersistedStringSet(Set<String>)|Attempts to g
|android.preference.Preference.getPreferenceManager()|Gets thePreferenceManager
|android.preference.Preference.getSharedPreferences()|Returns theSharedPreferen
|android.preference.Preference.getShouldDisableView()|Checks whether this Prefe
|android.preference.Preference.getSummary()|Returns the summary of this Prefere
|android.preference.Preference.getTitle()|Returns the title of this Preference.
|android.preference.Preference.getTitleRes()|Returns the title resource ID of t
|android.preference.Preference.getView(View,ViewGroup)|Gets the View that will 
|android.preference.Preference.getWidgetLayoutResource()|Gets the layout resour
|android.preference.Preference.hasKey()|Checks whether this Preference has a va
|android.preference.Preference.isEnabled()|Checks whether this Preference shoul
|android.preference.Preference.isPersistent()|Checks whether this Preference is
|android.preference.Preference.isSelectable()|Checks whether this Preference sh
|android.preference.Preference.notifyChanged()|Should be called when the data o
|android.preference.Preference.notifyDependencyChange(boolean)|Notifies any lis
|android.preference.Preference.notifyHierarchyChanged()|Should be called when a
|android.preference.Preference.onAttachedToActivity()|Called when the Preferenc
|android.preference.Preference.onAttachedToHierarchy(PreferenceManager)|Called 
|android.preference.Preference.onBindView(View)|Binds the created View to the d
|android.preference.Preference.onClick()|Processes a click on the preference.
|android.preference.Preference.onCreateView(ViewGroup)|Creates the View to be s
|android.preference.Preference.onDependencyChanged(Preference,boolean)|Called w
|android.preference.Preference.onGetDefaultValue(TypedArray,int)|Called when a 
|android.preference.Preference.onKey(View,int,KeyEvent)|Allows a Preference to 
|android.preference.Preference.onParentChanged(Preference,boolean)|Called when 
|android.preference.Preference.onPrepareForRemoval()|Called when this Preferenc
|android.preference.Preference.onRestoreInstanceState(Parcelable)|Hook allowing
|android.preference.Preference.onSaveInstanceState()|Hook allowing a Preference
|android.preference.Preference.onSetInitialValue(boolean,Object)|Implement this
|android.preference.Preference.peekExtras()|Return the extras Bundle object ass
|android.preference.Preference.performClick(PreferenceScreen)|Called when a cli
|android.preference.Preference.persistBoolean(boolean)|Attempts to persist a bo
|android.preference.Preference.persistFloat(float)|Attempts to persist a float 
|android.preference.Preference.persistInt(int)|Attempts to persist an int to th
|android.preference.Preference.persistLong(long)|Attempts to persist a long to 
|android.preference.Preference.persistString(String)|Attempts to persist a Stri
|android.preference.Preference.persistStringSet(Set<String>)|Attempts to persis
|android.preference.Preference.restoreHierarchyState(Bundle)|Restore this Prefe
|android.preference.Preference.saveHierarchyState(Bundle)|Store this Preference
|android.preference.Preference.setDefaultValue(Object)|Sets the default value f
|android.preference.Preference.setDependency(String)|Sets the key of a Preferen
|android.preference.Preference.setEnabled(boolean)|Sets whether this Preference
|android.preference.Preference.setFragment(String)|Sets the class name of a fra
|android.preference.Preference.setIcon(Drawable)|Sets the icon for this Prefere
|android.preference.Preference.setIntent(Intent)|Sets anIntentto be used forCon
|android.preference.Preference.setKey(String)|Sets the key for this Preference,
|android.preference.Preference.setLayoutResource(int)|Sets the layout resource 
|android.preference.Preference.setOnPreferenceChangeListener(Preference.OnPreferenceChangeListener)|
|android.preference.Preference.setOnPreferenceClickListener(Preference.OnPreferenceClickListener)|
|android.preference.Preference.setOrder(int)|Sets the order of this Preference 
|android.preference.Preference.setPersistent(boolean)|Sets whether this Prefere
|android.preference.Preference.setSelectable(boolean)|Sets whether this Prefere
|android.preference.Preference.setShouldDisableView(boolean)|Sets whether this 
|android.preference.Preference.setSummary(CharSequence)|Sets the summary for th
|android.preference.Preference.setSummary(int)|Sets the summary for this Prefer
|android.preference.Preference.setTitle(CharSequence)|Sets the title for this P
|android.preference.Preference.setTitle(int)|Sets the title for this Preference
|android.preference.Preference.setWidgetLayoutResource(int)|Sets the layout for
|android.preference.Preference.shouldCommit()|Returns whether thePreferenceshou
|android.preference.Preference.shouldDisableDependents()|Checks whether this pr
|android.preference.Preference.shouldPersist()|Checks whether, at the given tim
|android.preference.Preference.toString()|

*android.preference.Preference_Description*

Represents the basic Preference UI building block displayed by a 
(|android.preference.PreferenceActivity|) in the form of a 
(|android.widget.ListView|) . This class provides the (|android.view.View|) to 
be displayed in the activity and associates with a 
(|android.content.SharedPreferences|) to store/retrieve the preference data. 

When specifying a preference hierarchy in XML, each element can point to a 
subclass of (|android.preference.Preference|) , similar to the view hierarchy 
and layouts. 

This class contains akeythat will be used as the key into the 
(|android.content.SharedPreferences|) . It is up to the subclass to decide how 
to store the value. 

Developer Guides For information about building a settings UI with Preferences, 
read the <a href="guide/topics/ui/settings.html">Settings guide. 



*int_android.preference.Preference.DEFAULT_ORDER*

Specify for (|android.preference.Preference|) if a specific order is not 
required. 



*android.preference.Preference(Context)*

public Preference(android.content.Context context)

Constructor to create a Preference. 

    context - The Context in which to store Preference values. 

*android.preference.Preference(Context,AttributeSet)*

public Preference(
  android.content.Context context,
  android.util.AttributeSet attrs)

Constructor that is called when inflating a Preference from XML. This is called 
when a Preference is being constructed from an XML file, supplying attributes 
that were specified in the XML file. This version uses a default style of 0, so 
the only attribute values applied are those in the Context's Theme and the 
given AttributeSet. 

    context - The Context this is associated with, through which it can access the current 
       theme, resources, {@link SharedPreferences}, etc. 
    attrs - The attributes of the XML tag that is inflating the preference. 

*android.preference.Preference(Context,AttributeSet,int)*

public Preference(
  android.content.Context context,
  android.util.AttributeSet attrs,
  int defStyle)

Perform inflation from XML and apply a class-specific base style. This 
constructor of Preference allows subclasses to use their own base style when 
they are inflating. For example, a (|android.preference.CheckBoxPreference|) 
constructor calls this version of the super class constructor and 
suppliesandroid.R.attr.checkBoxPreferenceStylefor defStyle. This allows the 
theme's checkbox preference style to modify all of the base preference 
attributes as well as the (|android.preference.CheckBoxPreference|) class's 
attributes. 

    context - The Context this is associated with, through which it can access the current 
       theme, resources, {@link SharedPreferences}, etc. 
    attrs - The attributes of the XML tag that is inflating the preference. 
    defStyle - The default style to apply to this preference. If 0, no style will be applied 
       (beyond what is included in the theme). This may either be an attribute 
       resource, whose value will be retrieved from the current theme, or an 
       explicit style resource. 

*android.preference.Preference.callChangeListener(Object)*

protected boolean callChangeListener(java.lang.Object newValue)

Call this method after the user changes the preference, but before the internal 
state is set. This allows the client to ignore the user value. 


    newValue - The new value of this Preference. 

    Returns: True if the user value should be set as the preference value (and persisted). 

*android.preference.Preference.compareTo(Preference)*

public int compareTo(android.preference.Preference another)

Compares Preference objects based on order (if set), otherwise alphabetically 
on the titles. 


    another - The Preference to compare to this one. 

    Returns: 0 if the same; less than 0 if this Preference sorts ahead of another; greater 
             than 0 if this Preference sorts after another. 

*android.preference.Preference.findPreferenceInHierarchy(String)*

protected |android.preference.Preference| findPreferenceInHierarchy(java.lang.String key)

Finds a Preference in this hierarchy (the whole thing, even above/below your 
(|android.preference.PreferenceScreen|) screen break) with the given key. 

This only functions after we have been attached to a hierarchy. 


    key - The key of the Preference to find. 

    Returns: The Preference that uses the given key. 

*android.preference.Preference.getContext()*

public |android.content.Context| getContext()

Returns the (|android.content.Context|) of this Preference. Each Preference in 
a Preference hierarchy can be from different Context (for example, if multiple 
activities provide preferences into a single 
(|android.preference.PreferenceActivity|) ). This Context will be used to save 
the Preference values. 



    Returns: The Context of this Preference. 

*android.preference.Preference.getDependency()*

public |java.lang.String| getDependency()

Returns the key of the dependency on this Preference. 



    Returns: The key of the dependency. 

*android.preference.Preference.getEditor()*

public |android.content.SharedPreferences.Editor| getEditor()

Returns an (|SharedPreferences.Editor|) where this Preference can save its 
value(s). Usually it's easier to use one of the helper save methods: 
(|android.preference.Preference|) , (|android.preference.Preference|) , 
(|android.preference.Preference|) , (|android.preference.Preference|) , 
(|android.preference.Preference|) . To read values, see 
(|android.preference.Preference|) . If (|android.preference.Preference|) 
returns true, it is this Preference's responsibility to commit. 

In some cases, writes to this will not be committed right away and hence not 
show up in the SharedPreferences, this is intended behavior to improve 
performance. 



    Returns: A {@link SharedPreferences.Editor} where this preference saves its value(s), or 
             null if it isn't attached to a Preference hierarchy. 

*android.preference.Preference.getExtras()*

public |android.os.Bundle| getExtras()

Return the extras Bundle object associated with this preference, creating a new 
Bundle if there currently isn't one. You can use this to get and set individual 
extra key/value pairs. 



*android.preference.Preference.getFragment()*

public |java.lang.String| getFragment()

Return the fragment class name associated with this Preference. 



    Returns: The fragment class name last set via {@link #setFragment} or XML. 

*android.preference.Preference.getIcon()*

public Drawable getIcon()

Returns the icon of this Preference. 



    Returns: 

*android.preference.Preference.getIntent()*

public |android.content.Intent| getIntent()

Return the (|android.content.Intent|) associated with this Preference. 



    Returns: The {@link Intent} last set via {@link #setIntent(Intent)} or XML. 

*android.preference.Preference.getKey()*

public |java.lang.String| getKey()

Gets the key for this Preference, which is also the key used for storing values 
into SharedPreferences. 



    Returns: 

*android.preference.Preference.getLayoutResource()*

public int getLayoutResource()

Gets the layout resource that will be shown as the (|android.view.View|) for 
this Preference. 



    Returns: The layout resource ID. 

*android.preference.Preference.getOnPreferenceChangeListener()*

public |android.preference.Preference.OnPreferenceChangeListener| getOnPreferenceChangeListener()

Returns the callback to be invoked when this Preference is changed by the user 
(but before the internal state has been updated). 



    Returns: The callback to be invoked. 

*android.preference.Preference.getOnPreferenceClickListener()*

public |android.preference.Preference.OnPreferenceClickListener| getOnPreferenceClickListener()

Returns the callback to be invoked when this Preference is clicked. 



    Returns: The callback to be invoked. 

*android.preference.Preference.getOrder()*

public int getOrder()

Gets the order of this Preference with respect to other Preference objects on 
the same level. 



    Returns: The order of this Preference. 

*android.preference.Preference.getPersistedBoolean(boolean)*

protected boolean getPersistedBoolean(boolean defaultReturnValue)

Attempts to get a persisted boolean from the 
(|android.content.SharedPreferences|) . 


    defaultReturnValue - The default value to return if either this Preference is not persistent or this 
       Preference is not in the SharedPreferences. 

    Returns: The value from the SharedPreferences or the default return value. 

*android.preference.Preference.getPersistedFloat(float)*

protected float getPersistedFloat(float defaultReturnValue)

Attempts to get a persisted float from the 
(|android.content.SharedPreferences|) . 


    defaultReturnValue - The default value to return if either this Preference is not persistent or this 
       Preference is not in the SharedPreferences. 

    Returns: The value from the SharedPreferences or the default return value. 

*android.preference.Preference.getPersistedInt(int)*

protected int getPersistedInt(int defaultReturnValue)

Attempts to get a persisted int from the (|android.content.SharedPreferences|) 
. 


    defaultReturnValue - The default value to return if either this Preference is not persistent or this 
       Preference is not in the SharedPreferences. 

    Returns: The value from the SharedPreferences or the default return value. 

*android.preference.Preference.getPersistedLong(long)*

protected long getPersistedLong(long defaultReturnValue)

Attempts to get a persisted long from the (|android.content.SharedPreferences|) 
. 


    defaultReturnValue - The default value to return if either this Preference is not persistent or this 
       Preference is not in the SharedPreferences. 

    Returns: The value from the SharedPreferences or the default return value. 

*android.preference.Preference.getPersistedString(String)*

protected |java.lang.String| getPersistedString(java.lang.String defaultReturnValue)

Attempts to get a persisted String from the 
(|android.content.SharedPreferences|) . 

This will check if this Preference is persistent, get the SharedPreferences 
from the (|android.preference.PreferenceManager|) , and get the value. 


    defaultReturnValue - The default value to return if either the Preference is not persistent or the 
       Preference is not in the shared preferences. 

    Returns: The value from the SharedPreferences or the default return value. 

*android.preference.Preference.getPersistedStringSet(Set<String>)*

protected |java.util.Set|<String> getPersistedStringSet(java.util.Set<java.lang.String> defaultReturnValue)

Attempts to get a persisted set of Strings from the 
(|android.content.SharedPreferences|) . 

This will check if this Preference is persistent, get the SharedPreferences 
from the (|android.preference.PreferenceManager|) , and get the value. 


    defaultReturnValue - The default value to return if either the Preference is not persistent or the 
       Preference is not in the shared preferences. 

    Returns: The value from the SharedPreferences or the default return value. 

*android.preference.Preference.getPreferenceManager()*

public |android.preference.PreferenceManager| getPreferenceManager()

Gets the (|android.preference.PreferenceManager|) that manages this Preference 
object's tree. 



    Returns: The {@link PreferenceManager}. 

*android.preference.Preference.getSharedPreferences()*

public |android.content.SharedPreferences| getSharedPreferences()

Returns the (|android.content.SharedPreferences|) where this Preference can 
read its value(s). Usually, it's easier to use one of the helper read methods: 
(|android.preference.Preference|) , (|android.preference.Preference|) , 
(|android.preference.Preference|) , (|android.preference.Preference|) , 
(|android.preference.Preference|) . To save values, see 
(|android.preference.Preference|) . 

In some cases, writes to the (|android.preference.Preference|) will not be 
committed right away and hence not show up in the returned 
(|android.content.SharedPreferences|) , this is intended behavior to improve 
performance. 



    Returns: The {@link SharedPreferences} where this Preference reads its value(s), or null 
             if it isn't attached to a Preference hierarchy. 

*android.preference.Preference.getShouldDisableView()*

public boolean getShouldDisableView()

Checks whether this Preference should disable its view when it's action is 
disabled. 



    Returns: True if it should disable the view. 

*android.preference.Preference.getSummary()*

public |java.lang.CharSequence| getSummary()

Returns the summary of this Preference. 



    Returns: 

*android.preference.Preference.getTitle()*

public |java.lang.CharSequence| getTitle()

Returns the title of this Preference. 



    Returns: 

*android.preference.Preference.getTitleRes()*

public int getTitleRes()

Returns the title resource ID of this Preference. If the title did not come 
from a resource, 0 is returned. 



    Returns: The title resource. 

*android.preference.Preference.getView(View,ViewGroup)*

public |android.view.View| getView(
  android.view.View convertView,
  android.view.ViewGroup parent)

Gets the View that will be shown in the 
(|android.preference.PreferenceActivity|) . 


    convertView - The old View to reuse, if possible. Note: You should check that this View is 
       non-null and of an appropriate type before using. If it is not possible 
       to convert this View to display the correct data, this method can create 
       a new View. 
    parent - The parent that this View will eventually be attached to. 

    Returns: Returns the same Preference object, for chaining multiple calls into a single 
             statement. 

*android.preference.Preference.getWidgetLayoutResource()*

public int getWidgetLayoutResource()

Gets the layout resource for the controllable widget portion of this 
Preference. 



    Returns: The layout resource ID. 

*android.preference.Preference.hasKey()*

public boolean hasKey()

Checks whether this Preference has a valid key. 



    Returns: True if the key exists and is not a blank string, false otherwise. 

*android.preference.Preference.isEnabled()*

public boolean isEnabled()

Checks whether this Preference should be enabled in the list. 



    Returns: True if this Preference is enabled, false otherwise. 

*android.preference.Preference.isPersistent()*

public boolean isPersistent()

Checks whether this Preference is persistent. If it is, it stores its value(s) 
into the persistent (|android.content.SharedPreferences|) storage. 



    Returns: True if it is persistent. 

*android.preference.Preference.isSelectable()*

public boolean isSelectable()

Checks whether this Preference should be selectable in the list. 



    Returns: True if it is selectable, false otherwise. 

*android.preference.Preference.notifyChanged()*

protected void notifyChanged()

Should be called when the data of this (|android.preference.Preference|) has 
changed. 



*android.preference.Preference.notifyDependencyChange(boolean)*

public void notifyDependencyChange(boolean disableDependents)

Notifies any listening dependents of a change that affects the dependency. 


    disableDependents - Whether this Preference should disable its dependents. 

*android.preference.Preference.notifyHierarchyChanged()*

protected void notifyHierarchyChanged()

Should be called when a Preference has been added/removed from this group, or 
the ordering should be re-evaluated. 



*android.preference.Preference.onAttachedToActivity()*

protected void onAttachedToActivity()

Called when the Preference hierarchy has been attached to the 
(|android.preference.PreferenceActivity|) . This can also be called when this 
Preference has been attached to a group that was already attached to the 
(|android.preference.PreferenceActivity|) . 



*android.preference.Preference.onAttachedToHierarchy(PreferenceManager)*

protected void onAttachedToHierarchy(android.preference.PreferenceManager preferenceManager)

Called when this Preference has been attached to a Preference hierarchy. Make 
sure to call the super implementation. 


    preferenceManager - The PreferenceManager of the hierarchy. 

*android.preference.Preference.onBindView(View)*

protected void onBindView(android.view.View view)

Binds the created View to the data for this Preference. 

This is a good place to grab references to custom Views in the layout and set 
properties on them. 

Make sure to call through to the superclass's implementation. 


    view - The View that shows this Preference. 

*android.preference.Preference.onClick()*

protected void onClick()

Processes a click on the preference. This includes saving the value to the 
(|android.content.SharedPreferences|) . However, the overridden method should 
call (|android.preference.Preference|) to make sure the client wants to update 
the preference's state with the new value. 



*android.preference.Preference.onCreateView(ViewGroup)*

protected |android.view.View| onCreateView(android.view.ViewGroup parent)

Creates the View to be shown for this Preference in the 
(|android.preference.PreferenceActivity|) . The default behavior is to inflate 
the main layout of this Preference (see (|android.preference.Preference|) . If 
changing this behavior, please specify a (|android.view.ViewGroup|) with ID 
(|android.R.id|) . 

Make sure to call through to the superclass's implementation. 


    parent - The parent that this View will eventually be attached to. 

    Returns: The View that displays this Preference. 

*android.preference.Preference.onDependencyChanged(Preference,boolean)*

public void onDependencyChanged(
  android.preference.Preference dependency,
  boolean disableDependent)

Called when the dependency changes. 


    dependency - The Preference that this Preference depends on. 
    disableDependent - Set true to disable this Preference. 

*android.preference.Preference.onGetDefaultValue(TypedArray,int)*

protected |java.lang.Object| onGetDefaultValue(
  android.content.res.TypedArray a,
  int index)

Called when a Preference is being inflated and the default value attribute 
needs to be read. Since different Preference types have different value types, 
the subclass should get and return the default value which will be its value 
type. 

For example, if the value type is String, the body of the method would proxy to 
(|android.content.res.TypedArray|) . 


    a - The set of attributes. 
    index - The index of the default value attribute. 

    Returns: The default value of this preference type. 

*android.preference.Preference.onKey(View,int,KeyEvent)*

public boolean onKey(
  android.view.View v,
  int keyCode,
  android.view.KeyEvent event)

Allows a Preference to intercept key events without having focus. For example, 
SeekBarPreference uses this to intercept +/- to adjust the progress. 



    Returns: True if the Preference handled the key. Returns false by default. 

*android.preference.Preference.onParentChanged(Preference,boolean)*

public void onParentChanged(
  android.preference.Preference parent,
  boolean disableChild)

Called when the implicit parent dependency changes. 


    parent - The Preference that this Preference depends on. 
    disableChild - Set true to disable this Preference. 

*android.preference.Preference.onPrepareForRemoval()*

protected void onPrepareForRemoval()

Called when this Preference is being removed from the hierarchy. You should 
remove any references to this Preference that you know about. Make sure to call 
through to the superclass implementation. 



*android.preference.Preference.onRestoreInstanceState(Parcelable)*

protected void onRestoreInstanceState(android.os.Parcelable state)

Hook allowing a Preference to re-apply a representation of its internal state 
that had previously been generated by (|android.preference.Preference|) . This 
function will never be called with a null state. 


    state - The saved state that had previously been returned by {@link 
       #onSaveInstanceState}. 

*android.preference.Preference.onSaveInstanceState()*

protected |android.os.Parcelable| onSaveInstanceState()

Hook allowing a Preference to generate a representation of its internal state 
that can later be used to create a new instance with that same state. This 
state should only contain information that is not persistent or can be 
reconstructed later. 



    Returns: A Parcelable object containing the current dynamic state of this Preference, or 
             null if there is nothing interesting to save. The default 
             implementation returns null. 

*android.preference.Preference.onSetInitialValue(boolean,Object)*

protected void onSetInitialValue(
  boolean restorePersistedValue,
  java.lang.Object defaultValue)

Implement this to set the initial value of the Preference. 

If restorePersistedValue is true, you should restore the Preference value from 
the (|android.content.SharedPreferences|) . If restorePersistedValue is false, 
you should set the Preference value to defaultValue that is given (and possibly 
store to SharedPreferences if (|android.preference.Preference|) is true). 

This may not always be called. One example is if it should not persist but 
there is no default value given. 


    restorePersistedValue - True to restore the persisted value; false to use the given defaultValue. 
    defaultValue - The default value for this Preference. Only use this if restorePersistedValue 
       is false. 

*android.preference.Preference.peekExtras()*

public |android.os.Bundle| peekExtras()

Return the extras Bundle object associated with this preference, returning null 
if there is not currently one. 



*android.preference.Preference.performClick(PreferenceScreen)*

public void performClick(android.preference.PreferenceScreen preferenceScreen)

Called when a click should be performed. 


    preferenceScreen - A {@link PreferenceScreen} whose hierarchy click listener should be called in 
       the proper order (between other processing). May be null. 

*android.preference.Preference.persistBoolean(boolean)*

protected boolean persistBoolean(boolean value)

Attempts to persist a boolean to the (|android.content.SharedPreferences|) . 


    value - The value to persist. 

    Returns: True if this Preference is persistent. (This is not whether the value was 
             persisted, since we may not necessarily commit if there will be a 
             batch commit later.) 

*android.preference.Preference.persistFloat(float)*

protected boolean persistFloat(float value)

Attempts to persist a float to the (|android.content.SharedPreferences|) . 


    value - The value to persist. 

    Returns: True if this Preference is persistent. (This is not whether the value was 
             persisted, since we may not necessarily commit if there will be a 
             batch commit later.) 

*android.preference.Preference.persistInt(int)*

protected boolean persistInt(int value)

Attempts to persist an int to the (|android.content.SharedPreferences|) . 


    value - The value to persist. 

    Returns: True if the Preference is persistent. (This is not whether the value was 
             persisted, since we may not necessarily commit if there will be a 
             batch commit later.) 

*android.preference.Preference.persistLong(long)*

protected boolean persistLong(long value)

Attempts to persist a long to the (|android.content.SharedPreferences|) . 


    value - The value to persist. 

    Returns: True if this Preference is persistent. (This is not whether the value was 
             persisted, since we may not necessarily commit if there will be a 
             batch commit later.) 

*android.preference.Preference.persistString(String)*

protected boolean persistString(java.lang.String value)

Attempts to persist a String to the (|android.content.SharedPreferences|) . 

This will check if this Preference is persistent, get an editor from the 
(|android.preference.PreferenceManager|) , put in the string, and check if we 
should commit (and commit if so). 


    value - The value to persist. 

    Returns: True if the Preference is persistent. (This is not whether the value was 
             persisted, since we may not necessarily commit if there will be a 
             batch commit later.) 

*android.preference.Preference.persistStringSet(Set<String>)*

protected boolean persistStringSet(java.util.Set<java.lang.String> values)

Attempts to persist a set of Strings to the 
(|android.content.SharedPreferences|) . 

This will check if this Preference is persistent, get an editor from the 
(|android.preference.PreferenceManager|) , put in the strings, and check if we 
should commit (and commit if so). 


    values - The values to persist. 

    Returns: True if the Preference is persistent. (This is not whether the value was 
             persisted, since we may not necessarily commit if there will be a 
             batch commit later.) 

*android.preference.Preference.restoreHierarchyState(Bundle)*

public void restoreHierarchyState(android.os.Bundle container)

Restore this Preference hierarchy's previously saved state from the given 
container. 


    container - The Bundle that holds the previously saved state. 

*android.preference.Preference.saveHierarchyState(Bundle)*

public void saveHierarchyState(android.os.Bundle container)

Store this Preference hierarchy's frozen state into the given container. 


    container - The Bundle in which to save the instance of this Preference. 

*android.preference.Preference.setDefaultValue(Object)*

public void setDefaultValue(java.lang.Object defaultValue)

Sets the default value for this Preference, which will be set either if 
persistence is off or persistence is on and the preference is not found in the 
persistent storage. 


    defaultValue - The default value. 

*android.preference.Preference.setDependency(String)*

public void setDependency(java.lang.String dependencyKey)

Sets the key of a Preference that this Preference will depend on. If that 
Preference is not set or is off, this Preference will be disabled. 


    dependencyKey - The key of the Preference that this depends on. 

*android.preference.Preference.setEnabled(boolean)*

public void setEnabled(boolean enabled)

Sets whether this Preference is enabled. If disabled, it will not handle 
clicks. 


    enabled - Set true to enable it. 

*android.preference.Preference.setFragment(String)*

public void setFragment(java.lang.String fragment)

Sets the class name of a fragment to be shown when this Preference is clicked. 


    fragment - The class name of the fragment associated with this Preference. 

*android.preference.Preference.setIcon(Drawable)*

public void setIcon(Drawable icon)

Sets the icon for this Preference with a Drawable. This icon will be placed 
into the ID (|android.R.id|) within the View created by 
(|android.preference.Preference|) . 


    icon - The optional icon for this Preference. 

*android.preference.Preference.setIntent(Intent)*

public void setIntent(android.content.Intent intent)

Sets an (|android.content.Intent|) to be used for (|android.content.Context|) 
when this Preference is clicked. 


    intent - The intent associated with this Preference. 

*android.preference.Preference.setKey(String)*

public void setKey(java.lang.String key)

Sets the key for this Preference, which is used as a key to the 
(|android.content.SharedPreferences|) . This should be unique for the package. 


    key - The key for the preference. 

*android.preference.Preference.setLayoutResource(int)*

public void setLayoutResource(int layoutResId)

Sets the layout resource that is inflated as the (|android.view.View|) to be 
shown for this Preference. In most cases, the default layout is sufficient for 
custom Preference objects and only the widget layout needs to be changed. 

This layout should contain a (|android.view.ViewGroup|) with ID 
(|android.R.id|) to be the parent of the specific widget for this Preference. 
It should similarly contain (|android.R.id|) and (|android.R.id|) . 


    layoutResId - The layout resource ID to be inflated and returned as a {@link View}. 

*android.preference.Preference.setOnPreferenceChangeListener(Preference.OnPreferenceChangeListener)*

public void setOnPreferenceChangeListener(android.preference.Preference.OnPreferenceChangeListener onPreferenceChangeListener)

Sets the callback to be invoked when this Preference is changed by the user 
(but before the internal state has been updated). 


    onPreferenceChangeListener - The callback to be invoked. 

*android.preference.Preference.setOnPreferenceClickListener(Preference.OnPreferenceClickListener)*

public void setOnPreferenceClickListener(android.preference.Preference.OnPreferenceClickListener onPreferenceClickListener)

Sets the callback to be invoked when this Preference is clicked. 


    onPreferenceClickListener - The callback to be invoked. 

*android.preference.Preference.setOrder(int)*

public void setOrder(int order)

Sets the order of this Preference with respect to other Preference objects on 
the same level. If this is not specified, the default behavior is to sort 
alphabetically. The (|android.preference.PreferenceGroup|) can be used to order 
Preference objects based on the order they appear in the XML. 


    order - The order for this Preference. A lower value will be shown first. Use {@link 
       #DEFAULT_ORDER} to sort alphabetically or allow ordering from XML. 

*android.preference.Preference.setPersistent(boolean)*

public void setPersistent(boolean persistent)

Sets whether this Preference is persistent. When persistent, it stores its 
value(s) into the persistent (|android.content.SharedPreferences|) storage. 


    persistent - Set true if it should store its value(s) into the {@link SharedPreferences}. 

*android.preference.Preference.setSelectable(boolean)*

public void setSelectable(boolean selectable)

Sets whether this Preference is selectable. 


    selectable - Set true to make it selectable. 

*android.preference.Preference.setShouldDisableView(boolean)*

public void setShouldDisableView(boolean shouldDisableView)

Sets whether this Preference should disable its view when it gets disabled. 

For example, set this and (|android.preference.Preference|) to false for 
preferences that are only displaying information and 1) should not be clickable 
2) should not have the view set to the disabled state. 


    shouldDisableView - Set true if this preference should disable its view when the preference is 
       disabled. 

*android.preference.Preference.setSummary(CharSequence)*

public void setSummary(java.lang.CharSequence summary)

Sets the summary for this Preference with a CharSequence. 


    summary - The summary for the preference. 

*android.preference.Preference.setSummary(int)*

public void setSummary(int summaryResId)

Sets the summary for this Preference with a resource ID. 


    summaryResId - The summary as a resource. 

*android.preference.Preference.setTitle(CharSequence)*

public void setTitle(java.lang.CharSequence title)

Sets the title for this Preference with a CharSequence. This title will be 
placed into the ID (|android.R.id|) within the View created by 
(|android.preference.Preference|) . 


    title - The title for this Preference. 

*android.preference.Preference.setTitle(int)*

public void setTitle(int titleResId)

Sets the title for this Preference with a resource ID. 


    titleResId - The title as a resource ID. 

*android.preference.Preference.setWidgetLayoutResource(int)*

public void setWidgetLayoutResource(int widgetLayoutResId)

Sets the layout for the controllable widget portion of this Preference. This is 
inflated into the main layout. For example, a 
(|android.preference.CheckBoxPreference|) would specify a custom layout 
(consisting of just the CheckBox) here, instead of creating its own main 
layout. 


    widgetLayoutResId - The layout resource ID to be inflated into the main layout. 

*android.preference.Preference.shouldCommit()*

public boolean shouldCommit()

Returns whether the (|android.preference.Preference|) should commit its saved 
value(s) in (|android.preference.Preference|) . This may return false in 
situations where batch committing is being done (by the manager) to improve 
performance. 



    Returns: Whether the Preference should commit its saved value(s). 

*android.preference.Preference.shouldDisableDependents()*

public boolean shouldDisableDependents()

Checks whether this preference's dependents should currently be disabled. 



    Returns: True if the dependents should be disabled, otherwise false. 

*android.preference.Preference.shouldPersist()*

protected boolean shouldPersist()

Checks whether, at the given time this method is called, this Preference should 
store/restore its value(s) into the (|android.content.SharedPreferences|) . 
This, at minimum, checks whether this Preference is persistent and it currently 
has a key. Before you save/restore from the 
(|android.content.SharedPreferences|) , check this first. 



    Returns: True if it should persist the value. 

*android.preference.Preference.toString()*

public |java.lang.String| toString()






