*android.os.Broadcaster* *Broadcaster* 

public class Broadcaster
  extends    |java.lang.Object|

|android.os.Broadcaster_Description|
|android.os.Broadcaster_Fields|
|android.os.Broadcaster_Constructors|
|android.os.Broadcaster_Methods|

================================================================================

*android.os.Broadcaster_Constructors*
|android.os.Broadcaster()|

*android.os.Broadcaster_Methods*
|android.os.Broadcaster.broadcast(Message)|Send out msg.
|android.os.Broadcaster.cancelRequest(int,Handler,int)|Unregister for notificat
|android.os.Broadcaster.dumpRegistrations()|For debugging purposes, print the r
|android.os.Broadcaster.request(int,Handler,int)|Sign up for notifications abou

*android.os.Broadcaster_Description*





*android.os.Broadcaster()*

public Broadcaster()




*android.os.Broadcaster.broadcast(Message)*

public void broadcast(android.os.Message msg)

Send out msg. Anyone who has registered via the request() method will be sent 
the message. 



*android.os.Broadcaster.cancelRequest(int,Handler,int)*

public void cancelRequest(
  int senderWhat,
  android.os.Handler target,
  int targetWhat)

Unregister for notifications for this senderWhat/target/targetWhat tuple. 



*android.os.Broadcaster.dumpRegistrations()*

public void dumpRegistrations()

For debugging purposes, print the registrations to System.out 



*android.os.Broadcaster.request(int,Handler,int)*

public void request(
  int senderWhat,
  android.os.Handler target,
  int targetWhat)

Sign up for notifications about something. 

When this broadcaster pushes a message with senderWhat in the what field, 
target will be sent a copy of that message with targetWhat in the what field. 




