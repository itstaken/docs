*android.text.SpannableStringBuilder* *SpannableStringBuilder* This is the class

public class SpannableStringBuilder
  extends    |java.lang.Object|
  implements |java.lang.CharSequence|
             |android.text.GetChars|
             |android.text.Spannable|
             |android.text.Editable|
             |java.lang.Appendable|
             |android.text.GraphicsOperations|

|android.text.SpannableStringBuilder_Description|
|android.text.SpannableStringBuilder_Fields|
|android.text.SpannableStringBuilder_Constructors|
|android.text.SpannableStringBuilder_Methods|

================================================================================

*android.text.SpannableStringBuilder_Constructors*
|android.text.SpannableStringBuilder()|Create a new SpannableStringBuilder with
|android.text.SpannableStringBuilder(CharSequence)|Create a new SpannableString
|android.text.SpannableStringBuilder(CharSequence,int,int)|Create a new Spannab

*android.text.SpannableStringBuilder_Methods*
|android.text.SpannableStringBuilder.append(char)|
|android.text.SpannableStringBuilder.append(CharSequence)|
|android.text.SpannableStringBuilder.append(CharSequence,int,int)|
|android.text.SpannableStringBuilder.charAt(int)|Return the char at the specifi
|android.text.SpannableStringBuilder.clear()|
|android.text.SpannableStringBuilder.clearSpans()|
|android.text.SpannableStringBuilder.delete(int,int)|
|android.text.SpannableStringBuilder.drawText(Canvas,int,int,float,float,Paint)|
|android.text.SpannableStringBuilder.drawTextRun(Canvas,int,int,int,int,float,float,int,Paint)|
|android.text.SpannableStringBuilder.equals(Object)|
|android.text.SpannableStringBuilder.getChars(int,int,char[],int)|Copy the spec
|android.text.SpannableStringBuilder.getFilters()|
|android.text.SpannableStringBuilder.getSpanEnd(Object)|Return the buffer offse
|android.text.SpannableStringBuilder.getSpanFlags(Object)|Return the flags of t
|android.text.SpannableStringBuilder.getSpans(int,int,Class<T>)|Return an array
|android.text.SpannableStringBuilder.getSpanStart(Object)|Return the buffer off
|android.text.SpannableStringBuilder.getTextRunAdvances(int,int,int,int,int,float[],int,Paint)|
|android.text.SpannableStringBuilder.getTextRunCursor(int,int,int,int,int,Paint)|
|android.text.SpannableStringBuilder.getTextWidths(int,int,float[],Paint)|Don't
|android.text.SpannableStringBuilder.hashCode()|
|android.text.SpannableStringBuilder.insert(int,CharSequence)|
|android.text.SpannableStringBuilder.insert(int,CharSequence,int,int)|
|android.text.SpannableStringBuilder.length()|Return the number of chars in the
|android.text.SpannableStringBuilder.measureText(int,int,Paint)|Don't call this
|android.text.SpannableStringBuilder.nextSpanTransition(int,int,Class)|Return t
|android.text.SpannableStringBuilder.removeSpan(Object)|Remove the specified ma
|android.text.SpannableStringBuilder.replace(int,int,CharSequence)|
|android.text.SpannableStringBuilder.replace(int,int,CharSequence,int,int)|
|android.text.SpannableStringBuilder.setFilters(InputFilter[])|
|android.text.SpannableStringBuilder.setSpan(Object,int,int,int)|Mark the speci
|android.text.SpannableStringBuilder.subSequence(int,int)|Return a new CharSequ
|android.text.SpannableStringBuilder.substring(int,int)|Return a String contain
|android.text.SpannableStringBuilder.toString()|Return a String containing a co
|android.text.SpannableStringBuilder.valueOf(CharSequence)|

*android.text.SpannableStringBuilder_Description*

This is the class for text whose content and markup can both be changed. 



*android.text.SpannableStringBuilder()*

public SpannableStringBuilder()

Create a new SpannableStringBuilder with empty contents 


*android.text.SpannableStringBuilder(CharSequence)*

public SpannableStringBuilder(java.lang.CharSequence text)

Create a new SpannableStringBuilder containing a copy of the specified text, 
including its spans if any. 


*android.text.SpannableStringBuilder(CharSequence,int,int)*

public SpannableStringBuilder(
  java.lang.CharSequence text,
  int start,
  int end)

Create a new SpannableStringBuilder containing a copy of the specified slice of 
the specified text, including its spans if any. 


*android.text.SpannableStringBuilder.append(char)*

public |android.text.SpannableStringBuilder| append(char text)





*android.text.SpannableStringBuilder.append(CharSequence)*

public |android.text.SpannableStringBuilder| append(java.lang.CharSequence text)





*android.text.SpannableStringBuilder.append(CharSequence,int,int)*

public |android.text.SpannableStringBuilder| append(
  java.lang.CharSequence text,
  int start,
  int end)





*android.text.SpannableStringBuilder.charAt(int)*

public char charAt(int where)

Return the char at the specified offset within the buffer. 



*android.text.SpannableStringBuilder.clear()*

public void clear()





*android.text.SpannableStringBuilder.clearSpans()*

public void clearSpans()





*android.text.SpannableStringBuilder.delete(int,int)*

public |android.text.SpannableStringBuilder| delete(
  int start,
  int end)





*android.text.SpannableStringBuilder.drawText(Canvas,int,int,float,float,Paint)*

public void drawText(
  Canvas c,
  int start,
  int end,
  float x,
  float y,
  Paint p)

Don't call this yourself -- exists for Canvas to use internally. 



*android.text.SpannableStringBuilder.drawTextRun(Canvas,int,int,int,int,float,float,int,Paint)*

public void drawTextRun(
  Canvas c,
  int start,
  int end,
  int contextStart,
  int contextEnd,
  float x,
  float y,
  int flags,
  Paint p)

Don't call this yourself -- exists for Canvas to use internally. 



*android.text.SpannableStringBuilder.equals(Object)*

public boolean equals(java.lang.Object o)





*android.text.SpannableStringBuilder.getChars(int,int,char[],int)*

public void getChars(
  int start,
  int end,
  char[] dest,
  int destoff)

Copy the specified range of chars from this buffer into the specified array, 
beginning at the specified offset. 



*android.text.SpannableStringBuilder.getFilters()*

public |android.text.InputFilter|[] getFilters()





*android.text.SpannableStringBuilder.getSpanEnd(Object)*

public int getSpanEnd(java.lang.Object what)

Return the buffer offset of the end of the specified markup object, or -1 if it 
is not attached to this buffer. 



*android.text.SpannableStringBuilder.getSpanFlags(Object)*

public int getSpanFlags(java.lang.Object what)

Return the flags of the end of the specified markup object, or 0 if it is not 
attached to this buffer. 



*android.text.SpannableStringBuilder.getSpans(int,int,Class<T>)*

public |T|[] getSpans(
  int queryStart,
  int queryEnd,
  java.lang.Class<T> kind)

Return an array of the spans of the specified type that overlap the specified 
range of the buffer. The kind may be Object.class to get a list of all the 
spans regardless of type. 



*android.text.SpannableStringBuilder.getSpanStart(Object)*

public int getSpanStart(java.lang.Object what)

Return the buffer offset of the beginning of the specified markup object, or -1 
if it is not attached to this buffer. 



*android.text.SpannableStringBuilder.getTextRunAdvances(int,int,int,int,int,float[],int,Paint)*

public float getTextRunAdvances(
  int start,
  int end,
  int contextStart,
  int contextEnd,
  int flags,
  float[] advances,
  int advancesPos,
  Paint p)

Don't call this yourself -- exists for Paint to use internally. 



*android.text.SpannableStringBuilder.getTextRunCursor(int,int,int,int,int,Paint)*

public int getTextRunCursor(
  int contextStart,
  int contextEnd,
  int flags,
  int offset,
  int cursorOpt,
  Paint p)

Returns the next cursor position in the run. This avoids placing the cursor 
between surrogates, between characters that form conjuncts, between base 
characters and combining marks, or within a reordering cluster. 

The context is the shaping context for cursor movement, generally the bounds of 
the metric span enclosing the cursor in the direction of movement. 
contextStart, contextEnd and offset are relative to the start of the string. 

If cursorOpt is CURSOR_AT and the offset is not a valid cursor position, this 
returns -1. Otherwise this will never return a value before contextStart or 
after contextEnd. 

    Deprecated: This is an internal method, refrain from using it in your code

    contextStart - the start index of the context 
    contextEnd - the (non-inclusive) end index of the context 
    flags - either DIRECTION_RTL or DIRECTION_LTR 
    offset - the cursor position to move from 
    cursorOpt - how to move the cursor, one of CURSOR_AFTER, CURSOR_AT_OR_AFTER, CURSOR_BEFORE, 
       CURSOR_AT_OR_BEFORE, or CURSOR_AT 
    p - the Paint object that is requesting this information 

    Returns: the offset of the next position, or -1 

*android.text.SpannableStringBuilder.getTextWidths(int,int,float[],Paint)*

public int getTextWidths(
  int start,
  int end,
  float[] widths,
  Paint p)

Don't call this yourself -- exists for Paint to use internally. 



*android.text.SpannableStringBuilder.hashCode()*

public int hashCode()





*android.text.SpannableStringBuilder.insert(int,CharSequence)*

public |android.text.SpannableStringBuilder| insert(
  int where,
  java.lang.CharSequence tb)





*android.text.SpannableStringBuilder.insert(int,CharSequence,int,int)*

public |android.text.SpannableStringBuilder| insert(
  int where,
  java.lang.CharSequence tb,
  int start,
  int end)





*android.text.SpannableStringBuilder.length()*

public int length()

Return the number of chars in the buffer. 



*android.text.SpannableStringBuilder.measureText(int,int,Paint)*

public float measureText(
  int start,
  int end,
  Paint p)

Don't call this yourself -- exists for Paint to use internally. 



*android.text.SpannableStringBuilder.nextSpanTransition(int,int,Class)*

public int nextSpanTransition(
  int start,
  int limit,
  java.lang.Class kind)

Return the next offset after start but less than or equal to limit where a span 
of the specified type begins or ends. 



*android.text.SpannableStringBuilder.removeSpan(Object)*

public void removeSpan(java.lang.Object what)

Remove the specified markup object from the buffer. 



*android.text.SpannableStringBuilder.replace(int,int,CharSequence)*

public |android.text.SpannableStringBuilder| replace(
  int start,
  int end,
  java.lang.CharSequence tb)





*android.text.SpannableStringBuilder.replace(int,int,CharSequence,int,int)*

public |android.text.SpannableStringBuilder| replace(
  int start,
  int end,
  java.lang.CharSequence tb,
  int tbstart,
  int tbend)





*android.text.SpannableStringBuilder.setFilters(InputFilter[])*

public void setFilters(android.text.InputFilter[] filters)





*android.text.SpannableStringBuilder.setSpan(Object,int,int,int)*

public void setSpan(
  java.lang.Object what,
  int start,
  int end,
  int flags)

Mark the specified range of text with the specified object. The flags determine 
how the span will behave when text is inserted at the start or end of the 
span's range. 



*android.text.SpannableStringBuilder.subSequence(int,int)*

public |java.lang.CharSequence| subSequence(
  int start,
  int end)

Return a new CharSequence containing a copy of the specified range of this 
buffer, including the overlapping spans. 



*android.text.SpannableStringBuilder.substring(int,int)*

public |java.lang.String| substring(
  int start,
  int end)

Return a String containing a copy of the chars in this buffer, limited to the 
[start, end[ range. 



*android.text.SpannableStringBuilder.toString()*

public |java.lang.String| toString()

Return a String containing a copy of the chars in this buffer. 



*android.text.SpannableStringBuilder.valueOf(CharSequence)*

public static |android.text.SpannableStringBuilder| valueOf(java.lang.CharSequence source)






