*android.app.WallpaperInfo* *WallpaperInfo* This class is used to specify meta i

public final class WallpaperInfo
  extends    |java.lang.Object|
  implements |android.os.Parcelable|

|android.app.WallpaperInfo_Description|
|android.app.WallpaperInfo_Fields|
|android.app.WallpaperInfo_Constructors|
|android.app.WallpaperInfo_Methods|

================================================================================

*android.app.WallpaperInfo_Fields*
|android.os.Parcelable.Creator<android.app.WallpaperInfo>_android.app.WallpaperInfo.CREATOR|

*android.app.WallpaperInfo_Constructors*
|android.app.WallpaperInfo(Context,ResolveInfo)|Constructor.

*android.app.WallpaperInfo_Methods*
|android.app.WallpaperInfo.describeContents()|
|android.app.WallpaperInfo.dump(Printer,String)|
|android.app.WallpaperInfo.getComponent()|Return the component of the service t
|android.app.WallpaperInfo.getPackageName()|Return the .apk package that implem
|android.app.WallpaperInfo.getServiceInfo()|Return the raw information about th
|android.app.WallpaperInfo.getServiceName()|Return the class name of the servic
|android.app.WallpaperInfo.getSettingsActivity()|Return the class name of an ac
|android.app.WallpaperInfo.loadAuthor(PackageManager)|Return a string indicatin
|android.app.WallpaperInfo.loadDescription(PackageManager)|Return a brief summa
|android.app.WallpaperInfo.loadIcon(PackageManager)|Load the user-displayed ico
|android.app.WallpaperInfo.loadLabel(PackageManager)|Load the user-displayed la
|android.app.WallpaperInfo.loadThumbnail(PackageManager)|Load the thumbnail ima
|android.app.WallpaperInfo.toString()|
|android.app.WallpaperInfo.writeToParcel(Parcel,int)|Used to package this objec

*android.app.WallpaperInfo_Description*

This class is used to specify meta information of a wallpaper service. 



*android.os.Parcelable.Creator<android.app.WallpaperInfo>_android.app.WallpaperInfo.CREATOR*

Used to make this class parcelable. 



*android.app.WallpaperInfo(Context,ResolveInfo)*

public WallpaperInfo(
  android.content.Context context,
  android.content.pm.ResolveInfo service)
  throws |java.io.IOException|
         |XmlPullParserException|
         
Constructor. 

    context - The Context in which we are parsing the wallpaper. 
    service - The ResolveInfo returned from the package manager about this wallpaper's 
       component. 

*android.app.WallpaperInfo.describeContents()*

public int describeContents()





*android.app.WallpaperInfo.dump(Printer,String)*

public void dump(
  android.util.Printer pw,
  java.lang.String prefix)





*android.app.WallpaperInfo.getComponent()*

public |android.content.ComponentName| getComponent()

Return the component of the service that implements this wallpaper. 



*android.app.WallpaperInfo.getPackageName()*

public |java.lang.String| getPackageName()

Return the .apk package that implements this wallpaper. 



*android.app.WallpaperInfo.getServiceInfo()*

public |android.content.pm.ServiceInfo| getServiceInfo()

Return the raw information about the Service implementing this wallpaper. Do 
not modify the returned object. 



*android.app.WallpaperInfo.getServiceName()*

public |java.lang.String| getServiceName()

Return the class name of the service component that implements this wallpaper. 



*android.app.WallpaperInfo.getSettingsActivity()*

public |java.lang.String| getSettingsActivity()

Return the class name of an activity that provides a settings UI for the 
wallpaper. You can launch this activity be starting it with an 
(|android.content.Intent|) whose action is MAIN and with an explicit 
(|android.content.ComponentName|) composed of (|android.app.WallpaperInfo|) and 
the class name returned here. 

A null will be returned if there is no settings activity associated with the 
wallpaper. 



*android.app.WallpaperInfo.loadAuthor(PackageManager)*

public |java.lang.CharSequence| loadAuthor(android.content.pm.PackageManager pm)
  throws |android.content.res.Resources.NotFoundException|
         
Return a string indicating the author(s) of this wallpaper. 



*android.app.WallpaperInfo.loadDescription(PackageManager)*

public |java.lang.CharSequence| loadDescription(android.content.pm.PackageManager pm)
  throws |android.content.res.Resources.NotFoundException|
         
Return a brief summary of this wallpaper's behavior. 



*android.app.WallpaperInfo.loadIcon(PackageManager)*

public Drawable loadIcon(android.content.pm.PackageManager pm)

Load the user-displayed icon for this wallpaper. 


    pm - Supply a PackageManager used to load the wallpaper's resources. 

*android.app.WallpaperInfo.loadLabel(PackageManager)*

public |java.lang.CharSequence| loadLabel(android.content.pm.PackageManager pm)

Load the user-displayed label for this wallpaper. 


    pm - Supply a PackageManager used to load the wallpaper's resources. 

*android.app.WallpaperInfo.loadThumbnail(PackageManager)*

public Drawable loadThumbnail(android.content.pm.PackageManager pm)

Load the thumbnail image for this wallpaper. 


    pm - Supply a PackageManager used to load the wallpaper's resources. 

*android.app.WallpaperInfo.toString()*

public |java.lang.String| toString()





*android.app.WallpaperInfo.writeToParcel(Parcel,int)*

public void writeToParcel(
  android.os.Parcel dest,
  int flags)

Used to package this object into a (|android.os.Parcel|) . 


    dest - The {@link Parcel} to be written. 
    flags - The flags used for parceling. 


