*android.database.sqlite.SQLiteOpenHelper* *SQLiteOpenHelper* A helper class to 

public abstract class SQLiteOpenHelper
  extends    |java.lang.Object|

|android.database.sqlite.SQLiteOpenHelper_Description|
|android.database.sqlite.SQLiteOpenHelper_Fields|
|android.database.sqlite.SQLiteOpenHelper_Constructors|
|android.database.sqlite.SQLiteOpenHelper_Methods|

================================================================================

*android.database.sqlite.SQLiteOpenHelper_Constructors*
|android.database.sqlite.SQLiteOpenHelper(Context,String,SQLiteDatabase.CursorFactory,int)|
|android.database.sqlite.SQLiteOpenHelper(Context,String,SQLiteDatabase.CursorFactory,int,DatabaseErrorHandler)|

*android.database.sqlite.SQLiteOpenHelper_Methods*
|android.database.sqlite.SQLiteOpenHelper.close()|Close any open database objec
|android.database.sqlite.SQLiteOpenHelper.getDatabaseName()|Return the name of 
|android.database.sqlite.SQLiteOpenHelper.getReadableDatabase()|Create and/or o
|android.database.sqlite.SQLiteOpenHelper.getWritableDatabase()|Create and/or o
|android.database.sqlite.SQLiteOpenHelper.onConfigure(SQLiteDatabase)|Called wh
|android.database.sqlite.SQLiteOpenHelper.onCreate(SQLiteDatabase)|Called when 
|android.database.sqlite.SQLiteOpenHelper.onDowngrade(SQLiteDatabase,int,int)|C
|android.database.sqlite.SQLiteOpenHelper.onOpen(SQLiteDatabase)|Called when th
|android.database.sqlite.SQLiteOpenHelper.onUpgrade(SQLiteDatabase,int,int)|Cal
|android.database.sqlite.SQLiteOpenHelper.setWriteAheadLoggingEnabled(boolean)|

*android.database.sqlite.SQLiteOpenHelper_Description*

A helper class to manage database creation and version management. 

You create a subclass implementing (|android.database.sqlite.SQLiteOpenHelper|) 
, (|android.database.sqlite.SQLiteOpenHelper|) and optionally 
(|android.database.sqlite.SQLiteOpenHelper|) , and this class takes care of 
opening the database if it exists, creating it if it does not, and upgrading it 
as necessary. Transactions are used to make sure the database is always in a 
sensible state. 

This class makes it easy for (|android.content.ContentProvider|) 
implementations to defer opening and upgrading the database until first use, to 
avoid blocking application startup with long-running database upgrades. 

For an example, see the NotePadProvider class in the NotePad sample 
application, in the samples/ directory of the SDK. 

Note: this class assumes monotonically increasing version numbers for upgrades. 



*android.database.sqlite.SQLiteOpenHelper(Context,String,SQLiteDatabase.CursorFactory,int)*

public SQLiteOpenHelper(
  android.content.Context context,
  java.lang.String name,
  android.database.sqlite.SQLiteDatabase.CursorFactory factory,
  int version)

Create a helper object to create, open, and/or manage a database. This method 
always returns very quickly. The database is not actually created or opened 
until one of (|android.database.sqlite.SQLiteOpenHelper|) or 
(|android.database.sqlite.SQLiteOpenHelper|) is called. 

    context - to use to open or create the database 
    name - of the database file, or null for an in-memory database 
    factory - to use for creating cursor objects, or null for the default 
    version - number of the database (starting at 1); if the database is older, {@link 
       #onUpgrade} will be used to upgrade the database; if the database is 
       newer, {@link #onDowngrade} will be used to downgrade the database 

*android.database.sqlite.SQLiteOpenHelper(Context,String,SQLiteDatabase.CursorFactory,int,DatabaseErrorHandler)*

public SQLiteOpenHelper(
  android.content.Context context,
  java.lang.String name,
  android.database.sqlite.SQLiteDatabase.CursorFactory factory,
  int version,
  android.database.DatabaseErrorHandler errorHandler)

Create a helper object to create, open, and/or manage a database. The database 
is not actually created or opened until one of 
(|android.database.sqlite.SQLiteOpenHelper|) or 
(|android.database.sqlite.SQLiteOpenHelper|) is called. 

Accepts input param: a concrete instance of 
(|android.database.DatabaseErrorHandler|) to be used to handle corruption when 
sqlite reports database corruption. 

    context - to use to open or create the database 
    name - of the database file, or null for an in-memory database 
    factory - to use for creating cursor objects, or null for the default 
    version - number of the database (starting at 1); if the database is older, {@link 
       #onUpgrade} will be used to upgrade the database; if the database is 
       newer, {@link #onDowngrade} will be used to downgrade the database 
    errorHandler - the {@link DatabaseErrorHandler} to be used when sqlite reports database 
       corruption, or null to use the default error handler. 

*android.database.sqlite.SQLiteOpenHelper.close()*

public synchronized void close()

Close any open database object. 



*android.database.sqlite.SQLiteOpenHelper.getDatabaseName()*

public |java.lang.String| getDatabaseName()

Return the name of the SQLite database being opened, as given to the 
constructor. 



*android.database.sqlite.SQLiteOpenHelper.getReadableDatabase()*

public |android.database.sqlite.SQLiteDatabase| getReadableDatabase()

Create and/or open a database. This will be the same object returned by 
(|android.database.sqlite.SQLiteOpenHelper|) unless some problem, such as a 
full disk, requires the database to be opened read-only. In that case, a 
read-only database object will be returned. If the problem is fixed, a future 
call to (|android.database.sqlite.SQLiteOpenHelper|) may succeed, in which case 
the read-only database object will be closed and the read/write object will be 
returned in the future. 

Like (|android.database.sqlite.SQLiteOpenHelper|) , this method may take a long 
time to return, so you should not call it from the application main thread, 
including from ContentProvider.onCreate()(|android.content.ContentProvider|) . 



    Returns: a database object valid until {@link #getWritableDatabase} or {@link #close} is 
             called. 

*android.database.sqlite.SQLiteOpenHelper.getWritableDatabase()*

public |android.database.sqlite.SQLiteDatabase| getWritableDatabase()

Create and/or open a database that will be used for reading and writing. The 
first time this is called, the database will be opened and 
(|android.database.sqlite.SQLiteOpenHelper|) , 
(|android.database.sqlite.SQLiteOpenHelper|) and/or 
(|android.database.sqlite.SQLiteOpenHelper|) will be called. 

Once opened successfully, the database is cached, so you can call this method 
every time you need to write to the database. (Make sure to call 
(|android.database.sqlite.SQLiteOpenHelper|) when you no longer need the 
database.) Errors such as bad permissions or a full disk may cause this method 
to fail, but future attempts may succeed if the problem is fixed. 

Database upgrade may take a long time, you should not call this method from the 
application main thread, including from 
ContentProvider.onCreate()(|android.content.ContentProvider|) . 



    Returns: a read/write database object valid until {@link #close} is called 

*android.database.sqlite.SQLiteOpenHelper.onConfigure(SQLiteDatabase)*

public void onConfigure(android.database.sqlite.SQLiteDatabase db)

Called when the database connection is being configured, to enable features 
such as write-ahead logging or foreign key support. 

This method is called before (|android.database.sqlite.SQLiteOpenHelper|) , 
(|android.database.sqlite.SQLiteOpenHelper|) , 
(|android.database.sqlite.SQLiteOpenHelper|) , or 
(|android.database.sqlite.SQLiteOpenHelper|) are called. It should not modify 
the database except to configure the database connection as required. 

This method should only call methods that configure the parameters of the 
database connection, such as (|android.database.sqlite.SQLiteDatabase|) 
(|android.database.sqlite.SQLiteDatabase|) , 
(|android.database.sqlite.SQLiteDatabase|) , 
(|android.database.sqlite.SQLiteDatabase|) , or executing PRAGMA statements. 


    db - The database. 

*android.database.sqlite.SQLiteOpenHelper.onCreate(SQLiteDatabase)*

public abstract void onCreate(android.database.sqlite.SQLiteDatabase db)

Called when the database is created for the first time. This is where the 
creation of tables and the initial population of the tables should happen. 


    db - The database. 

*android.database.sqlite.SQLiteOpenHelper.onDowngrade(SQLiteDatabase,int,int)*

public void onDowngrade(
  android.database.sqlite.SQLiteDatabase db,
  int oldVersion,
  int newVersion)

Called when the database needs to be downgraded. This is strictly similar to 
(|android.database.sqlite.SQLiteOpenHelper|) method, but is called whenever 
current version is newer than requested one. However, this method is not 
abstract, so it is not mandatory for a customer to implement it. If not 
overridden, default implementation will reject downgrade and throws 
SQLiteException 

This method executes within a transaction. If an exception is thrown, all 
changes will automatically be rolled back. 


    db - The database. 
    oldVersion - The old database version. 
    newVersion - The new database version. 

*android.database.sqlite.SQLiteOpenHelper.onOpen(SQLiteDatabase)*

public void onOpen(android.database.sqlite.SQLiteDatabase db)

Called when the database has been opened. The implementation should check 
(|android.database.sqlite.SQLiteDatabase|) before updating the database. 

This method is called after the database connection has been configured and 
after the database schema has been created, upgraded or downgraded as 
necessary. If the database connection must be configured in some way before the 
schema is created, upgraded, or downgraded, do it in 
(|android.database.sqlite.SQLiteOpenHelper|) instead. 


    db - The database. 

*android.database.sqlite.SQLiteOpenHelper.onUpgrade(SQLiteDatabase,int,int)*

public abstract void onUpgrade(
  android.database.sqlite.SQLiteDatabase db,
  int oldVersion,
  int newVersion)

Called when the database needs to be upgraded. The implementation should use 
this method to drop tables, add tables, or do anything else it needs to upgrade 
to the new schema version. 

The SQLite ALTER TABLE documentation can be found here. If you add new columns 
you can use ALTER TABLE to insert them into a live table. If you rename or 
remove columns you can use ALTER TABLE to rename the old table, then create the 
new table and then populate the new table with the contents of the old table. 

This method executes within a transaction. If an exception is thrown, all 
changes will automatically be rolled back. 


    db - The database. 
    oldVersion - The old database version. 
    newVersion - The new database version. 

*android.database.sqlite.SQLiteOpenHelper.setWriteAheadLoggingEnabled(boolean)*

public void setWriteAheadLoggingEnabled(boolean enabled)

Enables or disables the use of write-ahead logging for the database. 

Write-ahead logging cannot be used with read-only databases so the value of 
this flag is ignored if the database is opened read-only. 


    enabled - True if write-ahead logging should be enabled, false if it should be disabled. 


