*android.text.method.KeyListener* *KeyListener* Interface for converting text ke

public interface interface KeyListener


|android.text.method.KeyListener_Description|
|android.text.method.KeyListener_Fields|
|android.text.method.KeyListener_Constructors|
|android.text.method.KeyListener_Methods|

================================================================================

*android.text.method.KeyListener_Methods*
|android.text.method.KeyListener.clearMetaKeyState(View,Editable,int)|Remove th
|android.text.method.KeyListener.getInputType()|Return the type of text that th
|android.text.method.KeyListener.onKeyDown(View,Editable,int,KeyEvent)|If the k
|android.text.method.KeyListener.onKeyOther(View,Editable,KeyEvent)|If the key 
|android.text.method.KeyListener.onKeyUp(View,Editable,int,KeyEvent)|If the key

*android.text.method.KeyListener_Description*

Interface for converting text key events into edit operations on an Editable 
class. Note that for most cases this interface has been superceded by general 
soft input methods as defined by (|android.view.inputmethod.InputMethod|) ; it 
should only be used for cases where an application has its own on-screen keypad 
and also wants to process hard keyboard events to match it. 

Key presses on soft input methods are not required to trigger the methods in 
this listener, and are in fact discouraged to do so. The default android 
keyboard will not trigger these for any key to any application targetting Jelly 
Bean or later, and will only deliver it for some key presses to applications 
targetting Ice Cream Sandwich or earlier. 



*android.text.method.KeyListener.clearMetaKeyState(View,Editable,int)*

public void clearMetaKeyState(
  android.view.View view,
  android.text.Editable content,
  int states)

Remove the given shift states from the edited text. 



*android.text.method.KeyListener.getInputType()*

public int getInputType()

Return the type of text that this key listener is manipulating, as per 
(|android.text.InputType|) . This is used to determine the mode of the soft 
keyboard that is shown for the editor. 

If you return (|android.text.InputType|) then no soft keyboard will provided. 
In other words, you must be providing your own key pad for on-screen input and 
the key listener will be used to handle input from a hard keyboard. 

If you return any other value, a soft input method will be created when the 
user puts focus in the editor, which will provide a keypad and also consume 
hard key events. This means that the key listener will generally not be used, 
instead the soft input method will take care of managing key input as per the 
content type returned here. 



*android.text.method.KeyListener.onKeyDown(View,Editable,int,KeyEvent)*

public boolean onKeyDown(
  android.view.View view,
  android.text.Editable text,
  int keyCode,
  android.view.KeyEvent event)

If the key listener wants to handle this key, return true, otherwise return 
false and the caller (i.e. the widget host) will handle the key. 



*android.text.method.KeyListener.onKeyOther(View,Editable,KeyEvent)*

public boolean onKeyOther(
  android.view.View view,
  android.text.Editable text,
  android.view.KeyEvent event)

If the key listener wants to other kinds of key events, return true, otherwise 
return false and the caller (i.e. the widget host) will handle the key. 



*android.text.method.KeyListener.onKeyUp(View,Editable,int,KeyEvent)*

public boolean onKeyUp(
  android.view.View view,
  android.text.Editable text,
  int keyCode,
  android.view.KeyEvent event)

If the key listener wants to handle this key release, return true, otherwise 
return false and the caller (i.e. the widget host) will handle the key. 




