*android.bluetooth.BluetoothDevice* *BluetoothDevice* Represents a remote Blueto

public final class BluetoothDevice
  extends    |java.lang.Object|
  implements |android.os.Parcelable|

|android.bluetooth.BluetoothDevice_Description|
|android.bluetooth.BluetoothDevice_Fields|
|android.bluetooth.BluetoothDevice_Constructors|
|android.bluetooth.BluetoothDevice_Methods|

================================================================================

*android.bluetooth.BluetoothDevice_Fields*
|java.lang.String_android.bluetooth.BluetoothDevice.ACTION_ACL_CONNECTED|
|java.lang.String_android.bluetooth.BluetoothDevice.ACTION_ACL_DISCONNECT_REQUESTED|
|java.lang.String_android.bluetooth.BluetoothDevice.ACTION_ACL_DISCONNECTED|
|java.lang.String_android.bluetooth.BluetoothDevice.ACTION_ALIAS_CHANGED|
|java.lang.String_android.bluetooth.BluetoothDevice.ACTION_BOND_STATE_CHANGED|
|java.lang.String_android.bluetooth.BluetoothDevice.ACTION_CLASS_CHANGED|
|java.lang.String_android.bluetooth.BluetoothDevice.ACTION_CONNECTION_ACCESS_CANCEL|
|java.lang.String_android.bluetooth.BluetoothDevice.ACTION_CONNECTION_ACCESS_REPLY|
|java.lang.String_android.bluetooth.BluetoothDevice.ACTION_CONNECTION_ACCESS_REQUEST|
|java.lang.String_android.bluetooth.BluetoothDevice.ACTION_DISAPPEARED|
|java.lang.String_android.bluetooth.BluetoothDevice.ACTION_FOUND|
|java.lang.String_android.bluetooth.BluetoothDevice.ACTION_NAME_CHANGED|
|java.lang.String_android.bluetooth.BluetoothDevice.ACTION_NAME_FAILED|
|java.lang.String_android.bluetooth.BluetoothDevice.ACTION_PAIRING_CANCEL|
|java.lang.String_android.bluetooth.BluetoothDevice.ACTION_PAIRING_REQUEST|
|java.lang.String_android.bluetooth.BluetoothDevice.ACTION_UUID|
|int_android.bluetooth.BluetoothDevice.BOND_BONDED|
|int_android.bluetooth.BluetoothDevice.BOND_BONDING|
|int_android.bluetooth.BluetoothDevice.BOND_NONE|
|int_android.bluetooth.BluetoothDevice.BOND_SUCCESS|
|int_android.bluetooth.BluetoothDevice.CONNECTION_ACCESS_NO|
|int_android.bluetooth.BluetoothDevice.CONNECTION_ACCESS_YES|
|android.os.Parcelable.Creator<android.bluetooth.BluetoothDevice>_android.bluetooth.BluetoothDevice.CREATOR|
|int_android.bluetooth.BluetoothDevice.DEVICE_TYPE_CLASSIC|
|int_android.bluetooth.BluetoothDevice.DEVICE_TYPE_DUAL|
|int_android.bluetooth.BluetoothDevice.DEVICE_TYPE_LE|
|int_android.bluetooth.BluetoothDevice.DEVICE_TYPE_UNKNOWN|
|int_android.bluetooth.BluetoothDevice.ERROR|
|java.lang.String_android.bluetooth.BluetoothDevice.EXTRA_ACCESS_REQUEST_TYPE|
|java.lang.String_android.bluetooth.BluetoothDevice.EXTRA_ALWAYS_ALLOWED|
|java.lang.String_android.bluetooth.BluetoothDevice.EXTRA_BOND_STATE|
|java.lang.String_android.bluetooth.BluetoothDevice.EXTRA_CLASS|
|java.lang.String_android.bluetooth.BluetoothDevice.EXTRA_CLASS_NAME|
|java.lang.String_android.bluetooth.BluetoothDevice.EXTRA_CONNECTION_ACCESS_RESULT|
|java.lang.String_android.bluetooth.BluetoothDevice.EXTRA_DEVICE|
|java.lang.String_android.bluetooth.BluetoothDevice.EXTRA_NAME|
|java.lang.String_android.bluetooth.BluetoothDevice.EXTRA_PACKAGE_NAME|
|java.lang.String_android.bluetooth.BluetoothDevice.EXTRA_PAIRING_KEY|
|java.lang.String_android.bluetooth.BluetoothDevice.EXTRA_PAIRING_VARIANT|
|java.lang.String_android.bluetooth.BluetoothDevice.EXTRA_PREVIOUS_BOND_STATE|
|java.lang.String_android.bluetooth.BluetoothDevice.EXTRA_REASON|
|java.lang.String_android.bluetooth.BluetoothDevice.EXTRA_RSSI|
|java.lang.String_android.bluetooth.BluetoothDevice.EXTRA_UUID|
|int_android.bluetooth.BluetoothDevice.PAIRING_VARIANT_CONSENT|
|int_android.bluetooth.BluetoothDevice.PAIRING_VARIANT_DISPLAY_PASSKEY|
|int_android.bluetooth.BluetoothDevice.PAIRING_VARIANT_DISPLAY_PIN|
|int_android.bluetooth.BluetoothDevice.PAIRING_VARIANT_OOB_CONSENT|
|int_android.bluetooth.BluetoothDevice.PAIRING_VARIANT_PASSKEY|
|int_android.bluetooth.BluetoothDevice.PAIRING_VARIANT_PASSKEY_CONFIRMATION|
|int_android.bluetooth.BluetoothDevice.PAIRING_VARIANT_PIN|
|int_android.bluetooth.BluetoothDevice.REQUEST_TYPE_MESSAGE_ACCESS|
|int_android.bluetooth.BluetoothDevice.REQUEST_TYPE_PHONEBOOK_ACCESS|
|int_android.bluetooth.BluetoothDevice.REQUEST_TYPE_PROFILE_CONNECTION|
|int_android.bluetooth.BluetoothDevice.UNBOND_REASON_AUTH_CANCELED|
|int_android.bluetooth.BluetoothDevice.UNBOND_REASON_AUTH_FAILED|
|int_android.bluetooth.BluetoothDevice.UNBOND_REASON_AUTH_REJECTED|
|int_android.bluetooth.BluetoothDevice.UNBOND_REASON_AUTH_TIMEOUT|
|int_android.bluetooth.BluetoothDevice.UNBOND_REASON_DISCOVERY_IN_PROGRESS|
|int_android.bluetooth.BluetoothDevice.UNBOND_REASON_REMOTE_AUTH_CANCELED|
|int_android.bluetooth.BluetoothDevice.UNBOND_REASON_REMOTE_DEVICE_DOWN|
|int_android.bluetooth.BluetoothDevice.UNBOND_REASON_REMOVED|
|int_android.bluetooth.BluetoothDevice.UNBOND_REASON_REPEATED_ATTEMPTS|

*android.bluetooth.BluetoothDevice_Methods*
|android.bluetooth.BluetoothDevice.cancelBondProcess()|Cancel an in-progress bo
|android.bluetooth.BluetoothDevice.cancelPairingUserInput()|
|android.bluetooth.BluetoothDevice.connectGatt(Context,boolean,BluetoothGattCallback)|
|android.bluetooth.BluetoothDevice.convertPinToBytes(String)|Check that a pin i
|android.bluetooth.BluetoothDevice.createBond()|Start the bonding (pairing) pro
|android.bluetooth.BluetoothDevice.createBondOutOfBand(byte[],byte[])|Start the
|android.bluetooth.BluetoothDevice.createInsecureRfcommSocket(int)|Construct an
|android.bluetooth.BluetoothDevice.createInsecureRfcommSocketToServiceRecord(UUID)|
|android.bluetooth.BluetoothDevice.createRfcommSocket(int)|Create an RFCOMMBlue
|android.bluetooth.BluetoothDevice.createRfcommSocketToServiceRecord(UUID)|Crea
|android.bluetooth.BluetoothDevice.createScoSocket()|Construct a SCO socket rea
|android.bluetooth.BluetoothDevice.describeContents()|
|android.bluetooth.BluetoothDevice.equals(Object)|
|android.bluetooth.BluetoothDevice.fetchUuidsWithSdp()|Perform a service discov
|android.bluetooth.BluetoothDevice.getAddress()|Returns the hardware address of
|android.bluetooth.BluetoothDevice.getAlias()|Get the Bluetooth alias of the re
|android.bluetooth.BluetoothDevice.getAliasName()|Get the Bluetooth alias of th
|android.bluetooth.BluetoothDevice.getBluetoothClass()|Get the Bluetooth class 
|android.bluetooth.BluetoothDevice.getBondState()|Get the bond state of the rem
|android.bluetooth.BluetoothDevice.getName()|Get the friendly Bluetooth name of
|android.bluetooth.BluetoothDevice.getServiceChannel(ParcelUuid)|
|android.bluetooth.BluetoothDevice.getTrustState()|Get trust state of a remote 
|android.bluetooth.BluetoothDevice.getType()|Get the Bluetooth device type of t
|android.bluetooth.BluetoothDevice.getUuids()|Returns the supported features (U
|android.bluetooth.BluetoothDevice.hashCode()|
|android.bluetooth.BluetoothDevice.isBluetoothDock()|
|android.bluetooth.BluetoothDevice.removeBond()|Remove bond (pairing) with the 
|android.bluetooth.BluetoothDevice.setAlias(String)|Set the Bluetooth alias of 
|android.bluetooth.BluetoothDevice.setDeviceOutOfBandData(byte[],byte[])|Set th
|android.bluetooth.BluetoothDevice.setPairingConfirmation(boolean)|Confirm pass
|android.bluetooth.BluetoothDevice.setPasskey(int)|
|android.bluetooth.BluetoothDevice.setPin(byte[])|Set the pin during pairing wh
|android.bluetooth.BluetoothDevice.setRemoteOutOfBandData()|
|android.bluetooth.BluetoothDevice.setTrust(boolean)|Set trust state for a remo
|android.bluetooth.BluetoothDevice.toString()|Returns a string representation o
|android.bluetooth.BluetoothDevice.writeToParcel(Parcel,int)|

*android.bluetooth.BluetoothDevice_Description*

Represents a remote Bluetooth device. A (|android.bluetooth.BluetoothDevice|) 
lets you create a connection with the respective device or query information 
about it, such as the name, address, class, and bonding state. 

This class is really just a thin wrapper for a Bluetooth hardware address. 
Objects of this class are immutable. Operations on this class are performed on 
the remote Bluetooth hardware address, using the 
(|android.bluetooth.BluetoothAdapter|) that was used to create this 
(|android.bluetooth.BluetoothDevice|) . 

To get a (|android.bluetooth.BluetoothDevice|) , use 
BluetoothAdapter.getRemoteDevice(String)(|android.bluetooth.BluetoothAdapter|) 
to create one representing a device of a known MAC address (which you can get 
through device discovery with (|android.bluetooth.BluetoothAdapter|) ) or get 
one from the set of bonded devices returned by 
BluetoothAdapter.getBondedDevices()(|android.bluetooth.BluetoothAdapter|) . You 
can then open a (|android.bluetooth.BluetoothSocket|) for communication with 
the remote device, using (|android.bluetooth.BluetoothDevice|) . 

Note: Requires the (|android.Manifest.permission|) permission. 

Developer Guides For more information about using Bluetooth, read the <a 
href="guide/topics/wireless/bluetooth.html">Bluetooth developer guide. 
(|android.bluetooth.BluetoothAdapter|) (|android.bluetooth.BluetoothSocket|) 



*java.lang.String_android.bluetooth.BluetoothDevice.ACTION_ACL_CONNECTED*

Broadcast Action: Indicates a low level (ACL) connection has been established 
with a remote device. Always contains the extra field 
(|android.bluetooth.BluetoothDevice|) . ACL connections are managed 
automatically by the Android Bluetooth stack. Requires 
(|android.Manifest.permission|) to receive. 


*java.lang.String_android.bluetooth.BluetoothDevice.ACTION_ACL_DISCONNECT_REQUESTED*

Broadcast Action: Indicates that a low level (ACL) disconnection has been 
requested for a remote device, and it will soon be disconnected. This is useful 
for graceful disconnection. Applications should use this intent as a hint to 
immediately terminate higher level connections (RFCOMM, L2CAP, or profile 
connections) to the remote device. Always contains the extra field 
(|android.bluetooth.BluetoothDevice|) . Requires 
(|android.Manifest.permission|) to receive. 


*java.lang.String_android.bluetooth.BluetoothDevice.ACTION_ACL_DISCONNECTED*

Broadcast Action: Indicates a low level (ACL) disconnection from a remote 
device. Always contains the extra field (|android.bluetooth.BluetoothDevice|) . 
ACL connections are managed automatically by the Android Bluetooth stack. 
Requires (|android.Manifest.permission|) to receive. 


*java.lang.String_android.bluetooth.BluetoothDevice.ACTION_ALIAS_CHANGED*

Broadcast Action: Indicates the alias of a remote device has been changed. 
Always contains the extra field (|android.bluetooth.BluetoothDevice|) . 
Requires (|android.Manifest.permission|) to receive. 


*java.lang.String_android.bluetooth.BluetoothDevice.ACTION_BOND_STATE_CHANGED*

Broadcast Action: Indicates a change in the bond state of a remote device. For 
example, if a device is bonded (paired). Always contains the extra fields 
(|android.bluetooth.BluetoothDevice|) , (|android.bluetooth.BluetoothDevice|) 
and (|android.bluetooth.BluetoothDevice|) . Requires 
(|android.Manifest.permission|) to receive. 


*java.lang.String_android.bluetooth.BluetoothDevice.ACTION_CLASS_CHANGED*

Broadcast Action: Bluetooth class of a remote device has changed. Always 
contains the extra fields (|android.bluetooth.BluetoothDevice|) and 
(|android.bluetooth.BluetoothDevice|) . Requires 
(|android.Manifest.permission|) to receive. 
(|android.bluetooth.BluetoothClass|) 


*java.lang.String_android.bluetooth.BluetoothDevice.ACTION_CONNECTION_ACCESS_CANCEL*




*java.lang.String_android.bluetooth.BluetoothDevice.ACTION_CONNECTION_ACCESS_REPLY*




*java.lang.String_android.bluetooth.BluetoothDevice.ACTION_CONNECTION_ACCESS_REQUEST*




*java.lang.String_android.bluetooth.BluetoothDevice.ACTION_DISAPPEARED*

Broadcast Action: Remote device disappeared. Sent when a remote device that was 
found in the last discovery is not found in the current discovery. Always 
contains the extra field (|android.bluetooth.BluetoothDevice|) . Requires 
(|android.Manifest.permission|) to receive. 


*java.lang.String_android.bluetooth.BluetoothDevice.ACTION_FOUND*

Broadcast Action: Remote device discovered. Sent when a remote device is found 
during discovery. Always contains the extra fields 
(|android.bluetooth.BluetoothDevice|) and (|android.bluetooth.BluetoothDevice|) 
. Can contain the extra fields (|android.bluetooth.BluetoothDevice|) and/or 
(|android.bluetooth.BluetoothDevice|) if they are available. Requires 
(|android.Manifest.permission|) to receive. 


*java.lang.String_android.bluetooth.BluetoothDevice.ACTION_NAME_CHANGED*

Broadcast Action: Indicates the friendly name of a remote device has been 
retrieved for the first time, or changed since the last retrieval. Always 
contains the extra fields (|android.bluetooth.BluetoothDevice|) and 
(|android.bluetooth.BluetoothDevice|) . Requires 
(|android.Manifest.permission|) to receive. 


*java.lang.String_android.bluetooth.BluetoothDevice.ACTION_NAME_FAILED*

Broadcast Action: Indicates a failure to retrieve the name of a remote device. 
Always contains the extra field (|android.bluetooth.BluetoothDevice|) . 
Requires (|android.Manifest.permission|) to receive. 


*java.lang.String_android.bluetooth.BluetoothDevice.ACTION_PAIRING_CANCEL*




*java.lang.String_android.bluetooth.BluetoothDevice.ACTION_PAIRING_REQUEST*

Broadcast Action: This intent is used to broadcast PAIRING REQUEST Requires 
(|android.Manifest.permission|) to receive. 


*java.lang.String_android.bluetooth.BluetoothDevice.ACTION_UUID*

Broadcast Action: This intent is used to broadcast the (|java.util.UUID|) 
wrapped as a (|android.os.ParcelUuid|) of the remote device after it has been 
fetched. This intent is sent only when the UUIDs of the remote device are 
requested to be fetched using Service Discovery Protocol Always contains the 
extra field (|android.bluetooth.BluetoothDevice|) Always contains the extra 
field (|android.bluetooth.BluetoothDevice|) Requires 
(|android.Manifest.permission|) to receive. 


*int_android.bluetooth.BluetoothDevice.BOND_BONDED*

Indicates the remote device is bonded (paired). A shared link keys exists 
locally for the remote device, so communication can be authenticated and 
encrypted. Being bonded (paired) with a remote device does not necessarily mean 
the device is currently connected. It just means that the pending procedure was 
completed at some earlier time, and the link key is still stored locally, ready 
to use on the next connection. 


*int_android.bluetooth.BluetoothDevice.BOND_BONDING*

Indicates bonding (pairing) is in progress with the remote device. 


*int_android.bluetooth.BluetoothDevice.BOND_NONE*

Indicates the remote device is not bonded (paired). There is no shared link key 
with the remote device, so communication (if it is allowed at all) will be 
unauthenticated and unencrypted. 


*int_android.bluetooth.BluetoothDevice.BOND_SUCCESS*

A bond attempt succeeded 


*int_android.bluetooth.BluetoothDevice.CONNECTION_ACCESS_NO*




*int_android.bluetooth.BluetoothDevice.CONNECTION_ACCESS_YES*




*android.os.Parcelable.Creator<android.bluetooth.BluetoothDevice>_android.bluetooth.BluetoothDevice.CREATOR*




*int_android.bluetooth.BluetoothDevice.DEVICE_TYPE_CLASSIC*

Bluetooth device type, Classic - BR/EDR devices 


*int_android.bluetooth.BluetoothDevice.DEVICE_TYPE_DUAL*

Bluetooth device type, Dual Mode - BR/EDR/LE 


*int_android.bluetooth.BluetoothDevice.DEVICE_TYPE_LE*

Bluetooth device type, Low Energy - LE-only 


*int_android.bluetooth.BluetoothDevice.DEVICE_TYPE_UNKNOWN*

Bluetooth device type, Unknown 


*int_android.bluetooth.BluetoothDevice.ERROR*

Sentinel error value for this class. Guaranteed to not equal any other integer 
constant in this class. Provided as a convenience for functions that require a 
sentinel error value, for example: 
Intent.getIntExtra(BluetoothDevice.EXTRA_BOND_STATE, BluetoothDevice.ERROR) 


*java.lang.String_android.bluetooth.BluetoothDevice.EXTRA_ACCESS_REQUEST_TYPE*

Used as an extra field in (|android.bluetooth.BluetoothDevice|) intent. 


*java.lang.String_android.bluetooth.BluetoothDevice.EXTRA_ALWAYS_ALLOWED*

Used as an extra field in (|android.bluetooth.BluetoothDevice|) intents, 
Contains boolean to indicate if the allowed response is once-for-all so that 
next request will be granted without asking user again. 


*java.lang.String_android.bluetooth.BluetoothDevice.EXTRA_BOND_STATE*

Used as an int extra field in (|android.bluetooth.BluetoothDevice|) intents. 
Contains the bond state of the remote device. Possible values are: 
(|android.bluetooth.BluetoothDevice|) , (|android.bluetooth.BluetoothDevice|) , 
(|android.bluetooth.BluetoothDevice|) . 


*java.lang.String_android.bluetooth.BluetoothDevice.EXTRA_CLASS*

Used as a Parcelable (|android.bluetooth.BluetoothClass|) extra field in 
(|android.bluetooth.BluetoothDevice|) and (|android.bluetooth.BluetoothDevice|) 
intents. 


*java.lang.String_android.bluetooth.BluetoothDevice.EXTRA_CLASS_NAME*

Used as an extra field in (|android.bluetooth.BluetoothDevice|) intents, 
Contains class name to return reply intent to. 


*java.lang.String_android.bluetooth.BluetoothDevice.EXTRA_CONNECTION_ACCESS_RESULT*

Used as an extra field in (|android.bluetooth.BluetoothDevice|) intent. 


*java.lang.String_android.bluetooth.BluetoothDevice.EXTRA_DEVICE*

Used as a Parcelable (|android.bluetooth.BluetoothDevice|) extra field in every 
intent broadcast by this class. It contains the 
(|android.bluetooth.BluetoothDevice|) that the intent applies to. 


*java.lang.String_android.bluetooth.BluetoothDevice.EXTRA_NAME*

Used as a String extra field in (|android.bluetooth.BluetoothDevice|) and 
(|android.bluetooth.BluetoothDevice|) intents. It contains the friendly 
Bluetooth name. 


*java.lang.String_android.bluetooth.BluetoothDevice.EXTRA_PACKAGE_NAME*

Used as an extra field in (|android.bluetooth.BluetoothDevice|) intents, 
Contains package name to return reply intent to. 


*java.lang.String_android.bluetooth.BluetoothDevice.EXTRA_PAIRING_KEY*

Used as an int extra field in (|android.bluetooth.BluetoothDevice|) intents as 
the value of passkey. 


*java.lang.String_android.bluetooth.BluetoothDevice.EXTRA_PAIRING_VARIANT*

Used as an int extra field in (|android.bluetooth.BluetoothDevice|) intents to 
indicate pairing method used. Possible values are: 
(|android.bluetooth.BluetoothDevice|) , (|android.bluetooth.BluetoothDevice|) , 


*java.lang.String_android.bluetooth.BluetoothDevice.EXTRA_PREVIOUS_BOND_STATE*

Used as an int extra field in (|android.bluetooth.BluetoothDevice|) intents. 
Contains the previous bond state of the remote device. Possible values are: 
(|android.bluetooth.BluetoothDevice|) , (|android.bluetooth.BluetoothDevice|) , 
(|android.bluetooth.BluetoothDevice|) . 


*java.lang.String_android.bluetooth.BluetoothDevice.EXTRA_REASON*

Used as an int extra field in (|android.bluetooth.BluetoothDevice|) intents for 
unbond reason. 


*java.lang.String_android.bluetooth.BluetoothDevice.EXTRA_RSSI*

Used as an optional short extra field in (|android.bluetooth.BluetoothDevice|) 
intents. Contains the RSSI value of the remote device as reported by the 
Bluetooth hardware. 


*java.lang.String_android.bluetooth.BluetoothDevice.EXTRA_UUID*

Used as an extra field in (|android.bluetooth.BluetoothDevice|) intents, 
Contains the (|android.os.ParcelUuid|) s of the remote device which is a 
parcelable version of (|java.util.UUID|) . 


*int_android.bluetooth.BluetoothDevice.PAIRING_VARIANT_CONSENT*

The user will be prompted to accept or deny the incoming pairing request 


*int_android.bluetooth.BluetoothDevice.PAIRING_VARIANT_DISPLAY_PASSKEY*

The user will be prompted to enter the passkey displayed on remote device This 
is used for Bluetooth 2.1 pairing. 


*int_android.bluetooth.BluetoothDevice.PAIRING_VARIANT_DISPLAY_PIN*

The user will be prompted to enter the PIN displayed on remote device. This is 
used for Bluetooth 2.0 pairing. 


*int_android.bluetooth.BluetoothDevice.PAIRING_VARIANT_OOB_CONSENT*

The user will be prompted to accept or deny the OOB pairing request 


*int_android.bluetooth.BluetoothDevice.PAIRING_VARIANT_PASSKEY*

The user will be prompted to enter a passkey 


*int_android.bluetooth.BluetoothDevice.PAIRING_VARIANT_PASSKEY_CONFIRMATION*

The user will be prompted to confirm the passkey displayed on the screen or an 
app will confirm the passkey for the user. 


*int_android.bluetooth.BluetoothDevice.PAIRING_VARIANT_PIN*

The user will be prompted to enter a pin or an app will enter a pin for user. 


*int_android.bluetooth.BluetoothDevice.REQUEST_TYPE_MESSAGE_ACCESS*




*int_android.bluetooth.BluetoothDevice.REQUEST_TYPE_PHONEBOOK_ACCESS*




*int_android.bluetooth.BluetoothDevice.REQUEST_TYPE_PROFILE_CONNECTION*




*int_android.bluetooth.BluetoothDevice.UNBOND_REASON_AUTH_CANCELED*

A bond attempt failed because we canceled the bonding process 


*int_android.bluetooth.BluetoothDevice.UNBOND_REASON_AUTH_FAILED*

A bond attempt failed because pins did not match, or remote device did not 
respond to pin request in time 


*int_android.bluetooth.BluetoothDevice.UNBOND_REASON_AUTH_REJECTED*

A bond attempt failed because the other side explicitly rejected bonding 


*int_android.bluetooth.BluetoothDevice.UNBOND_REASON_AUTH_TIMEOUT*

A bond attempt failed because of authentication timeout 


*int_android.bluetooth.BluetoothDevice.UNBOND_REASON_DISCOVERY_IN_PROGRESS*

A bond attempt failed because a discovery is in progress 


*int_android.bluetooth.BluetoothDevice.UNBOND_REASON_REMOTE_AUTH_CANCELED*

A bond attempt failed because we received an Authentication Cancel by remote 
end 


*int_android.bluetooth.BluetoothDevice.UNBOND_REASON_REMOTE_DEVICE_DOWN*

A bond attempt failed because we could not contact the remote device 


*int_android.bluetooth.BluetoothDevice.UNBOND_REASON_REMOVED*

An existing bond was explicitly revoked 


*int_android.bluetooth.BluetoothDevice.UNBOND_REASON_REPEATED_ATTEMPTS*

A bond attempt failed because of repeated attempts 



*android.bluetooth.BluetoothDevice.cancelBondProcess()*

public boolean cancelBondProcess()

Cancel an in-progress bonding request started with 
(|android.bluetooth.BluetoothDevice|) . Requires 
(|android.Manifest.permission|) . 



    Returns: true on success, false on error 

*android.bluetooth.BluetoothDevice.cancelPairingUserInput()*

public boolean cancelPairingUserInput()





*android.bluetooth.BluetoothDevice.connectGatt(Context,boolean,BluetoothGattCallback)*

public |android.bluetooth.BluetoothGatt| connectGatt(
  android.content.Context context,
  boolean autoConnect,
  android.bluetooth.BluetoothGattCallback callback)

Connect to GATT Server hosted by this device. Caller acts as GATT client. The 
callback is used to deliver results to Caller, such as connection status as 
well as any further GATT client operations. The method returns a BluetoothGatt 
instance. You can use BluetoothGatt to conduct GATT client operations. 


    callback - GATT callback handler that will receive asynchronous callbacks. 
    autoConnect - Whether to directly connect to the remote device (false) or to automatically 
       connect as soon as the remote device becomes available (true). 

*android.bluetooth.BluetoothDevice.convertPinToBytes(String)*

public static byte[] convertPinToBytes(java.lang.String pin)

Check that a pin is valid and convert to byte array. 

Bluetooth pin's are 1 to 16 bytes of UTF-8 characters. 


    pin - pin as java String 

    Returns: the pin code as a UTF-8 byte array, or null if it is an invalid Bluetooth pin. 

*android.bluetooth.BluetoothDevice.createBond()*

public boolean createBond()

Start the bonding (pairing) process with the remote device. This is an 
asynchronous call, it will return immediately. Register for 
(|android.bluetooth.BluetoothDevice|) intents to be notified when the bonding 
process completes, and its result. Android system services will handle the 
necessary user interactions to confirm and complete the bonding process. 
Requires (|android.Manifest.permission|) . 



    Returns: false on immediate error, true if bonding will begin 

*android.bluetooth.BluetoothDevice.createBondOutOfBand(byte[],byte[])*

public boolean createBondOutOfBand(
  byte[] hash,
  byte[] randomizer)

Start the bonding (pairing) process with the remote device using the Out Of 
Band mechanism. 

This is an asynchronous call, it will return immediately. Register for 
(|android.bluetooth.BluetoothDevice|) intents to be notified when the bonding 
process completes, and its result. 

Android system services will handle the necessary user interactions to confirm 
and complete the bonding process. 

Requires (|android.Manifest.permission|) . 


    hash - - Simple Secure pairing hash 
    randomizer - - The random key obtained using OOB 

    Returns: false on immediate error, true if bonding will begin 

*android.bluetooth.BluetoothDevice.createInsecureRfcommSocket(int)*

public |android.bluetooth.BluetoothSocket| createInsecureRfcommSocket(int port)
  throws |java.io.IOException|
         
Construct an insecure RFCOMM socket ready to start an outgoing connection. Call 
#connect on the returned #BluetoothSocket to begin the connection. The remote 
device will not be authenticated and communication on this socket will not be 
encrypted. Requires (|android.Manifest.permission|) 


    port - remote port 

    Returns: An RFCOMM BluetoothSocket 

*android.bluetooth.BluetoothDevice.createInsecureRfcommSocketToServiceRecord(UUID)*

public |android.bluetooth.BluetoothSocket| createInsecureRfcommSocketToServiceRecord(java.util.UUID uuid)
  throws |java.io.IOException|
         
Create an RFCOMM (|android.bluetooth.BluetoothSocket|) socket ready to start an 
insecure outgoing connection to this remote device using SDP lookup of uuid. 
The communication channel will not have an authenticated link key i.e it will 
be subject to man-in-the-middle attacks. For Bluetooth 2.1 devices, the link 
key will be encrypted, as encryption is mandatory. For legacy devices (pre 
Bluetooth 2.1 devices) the link key will be not be encrypted. Use 
(|android.bluetooth.BluetoothDevice|) if an encrypted and authenticated 
communication channel is desired. This is designed to be used with 
(|android.bluetooth.BluetoothAdapter|) for peer-peer Bluetooth applications. 
Use (|android.bluetooth.BluetoothSocket|) to initiate the outgoing connection. 
This will also perform an SDP lookup of the given uuid to determine which 
channel to connect to. The remote device will be authenticated and 
communication on this socket will be encrypted. Hint: If you are connecting to 
a Bluetooth serial board then try using the well-known SPP UUID 
00001101-0000-1000-8000-00805F9B34FB. However if you are connecting to an 
Android peer then please generate your own unique UUID. Requires 
(|android.Manifest.permission|) 


    uuid - service record uuid to lookup RFCOMM channel 

    Returns: a RFCOMM BluetoothServerSocket ready for an outgoing connection 

*android.bluetooth.BluetoothDevice.createRfcommSocket(int)*

public |android.bluetooth.BluetoothSocket| createRfcommSocket(int channel)
  throws |java.io.IOException|
         
Create an RFCOMM (|android.bluetooth.BluetoothSocket|) ready to start a secure 
outgoing connection to this remote device on given channel. The remote device 
will be authenticated and communication on this socket will be encrypted. Use 
this socket only if an authenticated socket link is possible. Authentication 
refers to the authentication of the link key to prevent man-in-the-middle type 
of attacks. For example, for Bluetooth 2.1 devices, if any of the devices does 
not have an input and output capability or just has the ability to display a 
numeric key, a secure socket connection is not possible. In such a case, use 
{#link createInsecureRfcommSocket}. For more details, refer to the Security 
Model section 5.2 (vol 3) of Bluetooth Core Specification version 2.1 + EDR. 
Use (|android.bluetooth.BluetoothSocket|) to initiate the outgoing connection. 
Valid RFCOMM channels are in range 1 to 30. Requires 
(|android.Manifest.permission|) 


    channel - RFCOMM channel to connect to 

    Returns: a RFCOMM BluetoothServerSocket ready for an outgoing connection 

*android.bluetooth.BluetoothDevice.createRfcommSocketToServiceRecord(UUID)*

public |android.bluetooth.BluetoothSocket| createRfcommSocketToServiceRecord(java.util.UUID uuid)
  throws |java.io.IOException|
         
Create an RFCOMM (|android.bluetooth.BluetoothSocket|) ready to start a secure 
outgoing connection to this remote device using SDP lookup of uuid. This is 
designed to be used with (|android.bluetooth.BluetoothAdapter|) for peer-peer 
Bluetooth applications. Use (|android.bluetooth.BluetoothSocket|) to initiate 
the outgoing connection. This will also perform an SDP lookup of the given uuid 
to determine which channel to connect to. The remote device will be 
authenticated and communication on this socket will be encrypted. Use this 
socket only if an authenticated socket link is possible. Authentication refers 
to the authentication of the link key to prevent man-in-the-middle type of 
attacks. For example, for Bluetooth 2.1 devices, if any of the devices does not 
have an input and output capability or just has the ability to display a 
numeric key, a secure socket connection is not possible. In such a case, use 
{#link createInsecureRfcommSocketToServiceRecord}. For more details, refer to 
the Security Model section 5.2 (vol 3) of Bluetooth Core Specification version 
2.1 + EDR. Hint: If you are connecting to a Bluetooth serial board then try 
using the well-known SPP UUID 00001101-0000-1000-8000-00805F9B34FB. However if 
you are connecting to an Android peer then please generate your own unique 
UUID. Requires (|android.Manifest.permission|) 


    uuid - service record uuid to lookup RFCOMM channel 

    Returns: a RFCOMM BluetoothServerSocket ready for an outgoing connection 

*android.bluetooth.BluetoothDevice.createScoSocket()*

public |android.bluetooth.BluetoothSocket| createScoSocket()
  throws |java.io.IOException|
         
Construct a SCO socket ready to start an outgoing connection. Call #connect on 
the returned #BluetoothSocket to begin the connection. Requires 
(|android.Manifest.permission|) 



    Returns: a SCO BluetoothSocket 

*android.bluetooth.BluetoothDevice.describeContents()*

public int describeContents()





*android.bluetooth.BluetoothDevice.equals(Object)*

public boolean equals(java.lang.Object o)





*android.bluetooth.BluetoothDevice.fetchUuidsWithSdp()*

public boolean fetchUuidsWithSdp()

Perform a service discovery on the remote device to get the UUIDs supported. 

This API is asynchronous and (|android.bluetooth.BluetoothDevice|) intent is 
sent, with the UUIDs supported by the remote end. If there is an error in 
getting the SDP records or if the process takes a long time, 
(|android.bluetooth.BluetoothDevice|) intent is sent with the UUIDs that is 
currently present in the cache. Clients should use the 
(|android.bluetooth.BluetoothDevice|) to get UUIDs if service discovery is not 
to be performed. Requires (|android.Manifest.permission|) . 



    Returns: False if the sanity check fails, True if the process of initiating an ACL 
             connection to the remote device was started. 

*android.bluetooth.BluetoothDevice.getAddress()*

public |java.lang.String| getAddress()

Returns the hardware address of this BluetoothDevice. For example, 
"00:11:22:AA:BB:CC". 



    Returns: Bluetooth hardware address as string 

*android.bluetooth.BluetoothDevice.getAlias()*

public |java.lang.String| getAlias()

Get the Bluetooth alias of the remote device. Alias is the locally modified 
name of a remote device. 



    Returns: the Bluetooth alias, or null if no alias or there was a problem 

*android.bluetooth.BluetoothDevice.getAliasName()*

public |java.lang.String| getAliasName()

Get the Bluetooth alias of the remote device. If Alias is null, get the 
Bluetooth name instead. 



    Returns: the Bluetooth alias, or null if no alias or there was a problem 

*android.bluetooth.BluetoothDevice.getBluetoothClass()*

public |android.bluetooth.BluetoothClass| getBluetoothClass()

Get the Bluetooth class of the remote device. Requires 
(|android.Manifest.permission|) . 



    Returns: Bluetooth class object, or null on error 

*android.bluetooth.BluetoothDevice.getBondState()*

public int getBondState()

Get the bond state of the remote device. Possible values for the bond state 
are: (|android.bluetooth.BluetoothDevice|) , 
(|android.bluetooth.BluetoothDevice|) , (|android.bluetooth.BluetoothDevice|) . 
Requires (|android.Manifest.permission|) . 



    Returns: the bond state 

*android.bluetooth.BluetoothDevice.getName()*

public |java.lang.String| getName()

Get the friendly Bluetooth name of the remote device. 

The local adapter will automatically retrieve remote names when performing a 
device scan, and will cache them. This method just returns the name for this 
device from the cache. Requires (|android.Manifest.permission|) 



    Returns: the Bluetooth name, or null if there was a problem. 

*android.bluetooth.BluetoothDevice.getServiceChannel(ParcelUuid)*

public int getServiceChannel(android.os.ParcelUuid uuid)





*android.bluetooth.BluetoothDevice.getTrustState()*

public boolean getTrustState()

Get trust state of a remote device. Requires (|android.Manifest.permission|) . 



*android.bluetooth.BluetoothDevice.getType()*

public int getType()

Get the Bluetooth device type of the remote device. 

Requires (|android.Manifest.permission|) 



    Returns: the device type {@link #DEVICE_TYPE_CLASSIC}, {@link #DEVICE_TYPE_LE} {@link 
             #DEVICE_TYPE_DUAL}. {@link #DEVICE_TYPE_UNKNOWN} if it's not 
             available 

*android.bluetooth.BluetoothDevice.getUuids()*

public |android.os.ParcelUuid|[] getUuids()

Returns the supported features (UUIDs) of the remote device. 

This method does not start a service discovery procedure to retrieve the UUIDs 
from the remote device. Instead, the local cached copy of the service UUIDs are 
returned. Use (|android.bluetooth.BluetoothDevice|) if fresh UUIDs are desired. 
Requires (|android.Manifest.permission|) . 



    Returns: the supported features (UUIDs) of the remote device, or null on error 

*android.bluetooth.BluetoothDevice.hashCode()*

public int hashCode()





*android.bluetooth.BluetoothDevice.isBluetoothDock()*

public boolean isBluetoothDock()





*android.bluetooth.BluetoothDevice.removeBond()*

public boolean removeBond()

Remove bond (pairing) with the remote device. Delete the link key associated 
with the remote device, and immediately terminate connections to that device 
that require authentication and encryption. Requires 
(|android.Manifest.permission|) . 



    Returns: true on success, false on error 

*android.bluetooth.BluetoothDevice.setAlias(String)*

public boolean setAlias(java.lang.String alias)

Set the Bluetooth alias of the remote device. Alias is the locally modified 
name of a remote device. This methoid overwrites the alias. The changed alias 
is saved in the local storage so that the change is preserved over power cycle. 



    Returns: true on success, false on error 

*android.bluetooth.BluetoothDevice.setDeviceOutOfBandData(byte[],byte[])*

public boolean setDeviceOutOfBandData(
  byte[] hash,
  byte[] randomizer)

Set the Out Of Band data for a remote device to be used later in the pairing 
mechanism. Users can obtain this data through other trusted channels 

Requires (|android.Manifest.permission|) . 


    hash - Simple Secure pairing hash 
    randomizer - The random key obtained using OOB 

    Returns: false on error; true otherwise 

*android.bluetooth.BluetoothDevice.setPairingConfirmation(boolean)*

public boolean setPairingConfirmation(boolean confirm)

Confirm passkey for (|android.bluetooth.BluetoothDevice|) pairing. Requires 
(|android.Manifest.permission|) . 



    Returns: true confirmation has been sent out false for error 

*android.bluetooth.BluetoothDevice.setPasskey(int)*

public boolean setPasskey(int passkey)





*android.bluetooth.BluetoothDevice.setPin(byte[])*

public boolean setPin(byte[] pin)

Set the pin during pairing when the pairing method is 
(|android.bluetooth.BluetoothDevice|) Requires (|android.Manifest.permission|) 
. 



    Returns: true pin has been set false for error 

*android.bluetooth.BluetoothDevice.setRemoteOutOfBandData()*

public boolean setRemoteOutOfBandData()





*android.bluetooth.BluetoothDevice.setTrust(boolean)*

public boolean setTrust(boolean value)

Set trust state for a remote device. Requires (|android.Manifest.permission|) . 


    value - the trust state value (true or false) 

*android.bluetooth.BluetoothDevice.toString()*

public |java.lang.String| toString()

Returns a string representation of this BluetoothDevice. Currently this is the 
Bluetooth hardware address, for example "00:11:22:AA:BB:CC". However, you 
should always use (|android.bluetooth.BluetoothDevice|) if you explicitly 
require the Bluetooth hardware address in case the 
(|android.bluetooth.BluetoothDevice|) representation changes in the future. 



    Returns: string representation of this BluetoothDevice 

*android.bluetooth.BluetoothDevice.writeToParcel(Parcel,int)*

public void writeToParcel(
  android.os.Parcel out,
  int flags)






