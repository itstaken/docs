*android.support.v8.renderscript.Allocation* *Allocation*  This class provides t

public class Allocation
  extends    |android.support.v8.renderscript.BaseObj|

|android.support.v8.renderscript.Allocation_Description|
|android.support.v8.renderscript.Allocation_Fields|
|android.support.v8.renderscript.Allocation_Constructors|
|android.support.v8.renderscript.Allocation_Methods|

================================================================================

*android.support.v8.renderscript.Allocation_Fields*
|int_android.support.v8.renderscript.Allocation.USAGE_GRAPHICS_TEXTURE|
|int_android.support.v8.renderscript.Allocation.USAGE_IO_INPUT|
|int_android.support.v8.renderscript.Allocation.USAGE_IO_OUTPUT|
|int_android.support.v8.renderscript.Allocation.USAGE_SCRIPT|
|int_android.support.v8.renderscript.Allocation.USAGE_SHARED|

*android.support.v8.renderscript.Allocation_Methods*
|android.support.v8.renderscript.Allocation.copy1DRangeFrom(int,int,Allocation,int)|
|android.support.v8.renderscript.Allocation.copy1DRangeFrom(int,int,byte[])|Cop
|android.support.v8.renderscript.Allocation.copy1DRangeFrom(int,int,float[])|Co
|android.support.v8.renderscript.Allocation.copy1DRangeFrom(int,int,int[])|Copy
|android.support.v8.renderscript.Allocation.copy1DRangeFrom(int,int,short[])|Co
|android.support.v8.renderscript.Allocation.copy1DRangeFromUnchecked(int,int,byte[])|
|android.support.v8.renderscript.Allocation.copy1DRangeFromUnchecked(int,int,float[])|
|android.support.v8.renderscript.Allocation.copy1DRangeFromUnchecked(int,int,int[])|
|android.support.v8.renderscript.Allocation.copy1DRangeFromUnchecked(int,int,short[])|
|android.support.v8.renderscript.Allocation.copy2DRangeFrom(int,int,Bitmap)|Cop
|android.support.v8.renderscript.Allocation.copy2DRangeFrom(int,int,int,int,Allocation,int,int)|
|android.support.v8.renderscript.Allocation.copy2DRangeFrom(int,int,int,int,byte[])|
|android.support.v8.renderscript.Allocation.copy2DRangeFrom(int,int,int,int,float[])|
|android.support.v8.renderscript.Allocation.copy2DRangeFrom(int,int,int,int,int[])|
|android.support.v8.renderscript.Allocation.copy2DRangeFrom(int,int,int,int,short[])|
|android.support.v8.renderscript.Allocation.copy3DRangeFrom(int,int,int,int,int,int,Allocation,int,int,int)|
|android.support.v8.renderscript.Allocation.copy3DRangeFrom(int,int,int,int,int,int,byte[])|
|android.support.v8.renderscript.Allocation.copy3DRangeFrom(int,int,int,int,int,int,float[])|
|android.support.v8.renderscript.Allocation.copy3DRangeFrom(int,int,int,int,int,int,int[])|
|android.support.v8.renderscript.Allocation.copy3DRangeFrom(int,int,int,int,int,int,short[])|
|android.support.v8.renderscript.Allocation.copyFrom(BaseObj[])|Copy an array o
|android.support.v8.renderscript.Allocation.copyFrom(Bitmap)|Copy into an Alloc
|android.support.v8.renderscript.Allocation.copyFrom(byte[])|Copy into this All
|android.support.v8.renderscript.Allocation.copyFrom(float[])|Copy into this Al
|android.support.v8.renderscript.Allocation.copyFrom(int[])|Copy into this Allo
|android.support.v8.renderscript.Allocation.copyFrom(short[])|Copy into this Al
|android.support.v8.renderscript.Allocation.copyFromUnchecked(byte[])|Copy into
|android.support.v8.renderscript.Allocation.copyFromUnchecked(float[])|Copy int
|android.support.v8.renderscript.Allocation.copyFromUnchecked(int[])|Copy into 
|android.support.v8.renderscript.Allocation.copyFromUnchecked(short[])|Copy int
|android.support.v8.renderscript.Allocation.copyTo(Bitmap)|Copy from the Alloca
|android.support.v8.renderscript.Allocation.createCubemapFromBitmap(RenderScript,Bitmap)|
|android.support.v8.renderscript.Allocation.createCubemapFromBitmap(RenderScript,Bitmap,Allocation.MipmapControl,int)|
|android.support.v8.renderscript.Allocation.createCubemapFromCubeFaces(RenderScript,Bitmap,Bitmap,Bitmap,Bitmap,Bitmap,Bitmap)|
|android.support.v8.renderscript.Allocation.createCubemapFromCubeFaces(RenderScript,Bitmap,Bitmap,Bitmap,Bitmap,Bitmap,Bitmap,Allocation.MipmapControl,int)|
|android.support.v8.renderscript.Allocation.createFromBitmap(RenderScript,Bitmap)|
|android.support.v8.renderscript.Allocation.createFromBitmap(RenderScript,Bitmap,Allocation.MipmapControl,int)|
|android.support.v8.renderscript.Allocation.createFromBitmapResource(RenderScript,Resources,int)|
|android.support.v8.renderscript.Allocation.createFromBitmapResource(RenderScript,Resources,int,Allocation.MipmapControl,int)|
|android.support.v8.renderscript.Allocation.createFromString(RenderScript,String,int)|
|android.support.v8.renderscript.Allocation.createSized(RenderScript,Element,int)|
|android.support.v8.renderscript.Allocation.createSized(RenderScript,Element,int,int)|
|android.support.v8.renderscript.Allocation.createTyped(RenderScript,Type)|Crea
|android.support.v8.renderscript.Allocation.createTyped(RenderScript,Type,Allocation.MipmapControl,int)|
|android.support.v8.renderscript.Allocation.createTyped(RenderScript,Type,int)|
|android.support.v8.renderscript.Allocation.finalize()|
|android.support.v8.renderscript.Allocation.generateMipmaps()|Generate a mipmap
|android.support.v8.renderscript.Allocation.getBytesSize()|Get the size of the 
|android.support.v8.renderscript.Allocation.getElement()|Get theandroid.support
|android.support.v8.renderscript.Allocation.getType()|Get theandroid.support.v8
|android.support.v8.renderscript.Allocation.getUsage()|Get the usage flags of t
|android.support.v8.renderscript.Allocation.ioReceive()|Receive the latest inpu
|android.support.v8.renderscript.Allocation.ioSend()|Send a buffer to the outpu
|android.support.v8.renderscript.Allocation.ioSendOutput()|Delete once code is 
|android.support.v8.renderscript.Allocation.setFromFieldPacker(int,FieldPacker)|
|android.support.v8.renderscript.Allocation.setFromFieldPacker(int,int,FieldPacker)|
|android.support.v8.renderscript.Allocation.syncAll(int)|Propagate changes from

*android.support.v8.renderscript.Allocation_Description*

This class provides the primary method through which data is passed to and from 
RenderScript kernels. An Allocation provides the backing store for a given 
(|android.support.v8.renderscript.Type|) . 

An Allocation also contains a set of usage flags that denote how the Allocation 
could be used. For example, an Allocation may have usage flags specifying that 
it can be used from a script as well as input to a 
(|android.support.v8.renderscript.Sampler|) . A developer must synchronize 
across these different usages using 
(|android.support.v8.renderscript.Allocation|) in order to ensure that 
different users of the Allocation have a consistent view of memory. For 
example, in the case where an Allocation is used as the output of one kernel 
and as Sampler input in a later kernel, a developer must call 
syncAll(Allocation.USAGE_SCRIPT)(|android.support.v8.renderscript.Allocation|) 
prior to launching the second kernel to ensure correctness. 

An Allocation can be populated with the 
(|android.support.v8.renderscript.Allocation|) routines. For more complex 
Element types, the (|android.support.v8.renderscript.Allocation|) methods can 
be used to copy from byte arrays or similar constructs. 

Developer Guides For more information about creating an application that uses 
RenderScript, read the <a 
href="guide/topics/renderscript/index.html">RenderScript developer guide. 



*int_android.support.v8.renderscript.Allocation.USAGE_GRAPHICS_TEXTURE*

The Allocation will be used as a texture source by one or more graphics 
programs. 


*int_android.support.v8.renderscript.Allocation.USAGE_IO_INPUT*

The Allocation will be used as a (|android.graphics.SurfaceTexture|) consumer. 
This usage will cause the Allocation to be created as read-only. 


*int_android.support.v8.renderscript.Allocation.USAGE_IO_OUTPUT*

The Allocation will be used as a (|android.graphics.SurfaceTexture|) producer. 
The dimensions and format of the (|android.graphics.SurfaceTexture|) will be 
forced to those of the Allocation. 


*int_android.support.v8.renderscript.Allocation.USAGE_SCRIPT*

The Allocation will be bound to and accessed by scripts. 


*int_android.support.v8.renderscript.Allocation.USAGE_SHARED*

The Allocation's backing store will be inherited from another object (usually a 
(|android.graphics.Bitmap|) ); copying to or from the original source Bitmap 
will cause a synchronization rather than a full copy. 
(|android.support.v8.renderscript.Allocation|) may also be used to synchronize 
the Allocation and the source Bitmap. 

This is set by default for allocations created with 
(|android.support.v8.renderscript.Allocation|) in API version 18 and higher. 



*android.support.v8.renderscript.Allocation.copy1DRangeFrom(int,int,Allocation,int)*

public void copy1DRangeFrom(
  int off,
  int count,
  android.support.v8.renderscript.Allocation data,
  int dataOff)

Copy part of an Allocation into this Allocation. 


    off - The offset of the first element to be copied. 
    count - The number of elements to be copied. 
    data - the source data allocation. 
    dataOff - off The offset of the first element in data to be copied. 

*android.support.v8.renderscript.Allocation.copy1DRangeFrom(int,int,byte[])*

public void copy1DRangeFrom(
  int off,
  int count,
  byte[] d)

Copy an array into part of this Allocation. This variant is type checked and 
will generate exceptions if the Allocation type is not an 8 bit integer type. 


    off - The offset of the first element to be copied. 
    count - The number of elements to be copied. 
    d - the source data array 

*android.support.v8.renderscript.Allocation.copy1DRangeFrom(int,int,float[])*

public void copy1DRangeFrom(
  int off,
  int count,
  float[] d)

Copy an array into part of this Allocation. This variant is type checked and 
will generate exceptions if the Allocation type is not a 32 bit float type. 


    off - The offset of the first element to be copied. 
    count - The number of elements to be copied. 
    d - the source data array. 

*android.support.v8.renderscript.Allocation.copy1DRangeFrom(int,int,int[])*

public void copy1DRangeFrom(
  int off,
  int count,
  int[] d)

Copy an array into part of this Allocation. This variant is type checked and 
will generate exceptions if the Allocation type is not a 32 bit integer type. 


    off - The offset of the first element to be copied. 
    count - The number of elements to be copied. 
    d - the source data array 

*android.support.v8.renderscript.Allocation.copy1DRangeFrom(int,int,short[])*

public void copy1DRangeFrom(
  int off,
  int count,
  short[] d)

Copy an array into part of this Allocation. This variant is type checked and 
will generate exceptions if the Allocation type is not a 16 bit integer type. 


    off - The offset of the first element to be copied. 
    count - The number of elements to be copied. 
    d - the source data array 

*android.support.v8.renderscript.Allocation.copy1DRangeFromUnchecked(int,int,byte[])*

public void copy1DRangeFromUnchecked(
  int off,
  int count,
  byte[] d)

Copy an array into part of this Allocation. This method does not guarantee that 
the Allocation is compatible with the input buffer. 


    off - The offset of the first element to be copied. 
    count - The number of elements to be copied. 
    d - the source data array 

*android.support.v8.renderscript.Allocation.copy1DRangeFromUnchecked(int,int,float[])*

public void copy1DRangeFromUnchecked(
  int off,
  int count,
  float[] d)

Copy an array into part of this Allocation. This method does not guarantee that 
the Allocation is compatible with the input buffer. 


    off - The offset of the first element to be copied. 
    count - The number of elements to be copied. 
    d - the source data array 

*android.support.v8.renderscript.Allocation.copy1DRangeFromUnchecked(int,int,int[])*

public void copy1DRangeFromUnchecked(
  int off,
  int count,
  int[] d)

Copy an array into part of this Allocation. This method does not guarantee that 
the Allocation is compatible with the input buffer. 


    off - The offset of the first element to be copied. 
    count - The number of elements to be copied. 
    d - the source data array 

*android.support.v8.renderscript.Allocation.copy1DRangeFromUnchecked(int,int,short[])*

public void copy1DRangeFromUnchecked(
  int off,
  int count,
  short[] d)

Copy an array into part of this Allocation. This method does not guarantee that 
the Allocation is compatible with the input buffer. 


    off - The offset of the first element to be copied. 
    count - The number of elements to be copied. 
    d - the source data array 

*android.support.v8.renderscript.Allocation.copy2DRangeFrom(int,int,Bitmap)*

public void copy2DRangeFrom(
  int xoff,
  int yoff,
  Bitmap data)

Copy a (|android.graphics.Bitmap|) into an Allocation. The height and width of 
the update will use the height and width of the (|android.graphics.Bitmap|) . 


    xoff - X offset of the region to update in this Allocation 
    yoff - Y offset of the region to update in this Allocation 
    data - the Bitmap to be copied 

*android.support.v8.renderscript.Allocation.copy2DRangeFrom(int,int,int,int,Allocation,int,int)*

public void copy2DRangeFrom(
  int xoff,
  int yoff,
  int w,
  int h,
  android.support.v8.renderscript.Allocation data,
  int dataXoff,
  int dataYoff)

Copy a rectangular region from an Allocation into a rectangular region in this 
Allocation. 


    xoff - X offset of the region in this Allocation 
    yoff - Y offset of the region in this Allocation 
    w - Width of the region to update. 
    h - Height of the region to update. 
    data - source Allocation. 
    dataXoff - X offset in source Allocation 
    dataYoff - Y offset in source Allocation 

*android.support.v8.renderscript.Allocation.copy2DRangeFrom(int,int,int,int,byte[])*

public void copy2DRangeFrom(
  int xoff,
  int yoff,
  int w,
  int h,
  byte[] data)

Copy from an array into a rectangular region in this Allocation. The array is 
assumed to be tightly packed. 


    xoff - X offset of the region to update in this Allocation 
    yoff - Y offset of the region to update in this Allocation 
    w - Width of the region to update 
    h - Height of the region to update 
    data - to be placed into the Allocation 

*android.support.v8.renderscript.Allocation.copy2DRangeFrom(int,int,int,int,float[])*

public void copy2DRangeFrom(
  int xoff,
  int yoff,
  int w,
  int h,
  float[] data)

Copy from an array into a rectangular region in this Allocation. The array is 
assumed to be tightly packed. 


    xoff - X offset of the region to update in this Allocation 
    yoff - Y offset of the region to update in this Allocation 
    w - Width of the region to update 
    h - Height of the region to update 
    data - to be placed into the Allocation 

*android.support.v8.renderscript.Allocation.copy2DRangeFrom(int,int,int,int,int[])*

public void copy2DRangeFrom(
  int xoff,
  int yoff,
  int w,
  int h,
  int[] data)

Copy from an array into a rectangular region in this Allocation. The array is 
assumed to be tightly packed. 


    xoff - X offset of the region to update in this Allocation 
    yoff - Y offset of the region to update in this Allocation 
    w - Width of the region to update 
    h - Height of the region to update 
    data - to be placed into the Allocation 

*android.support.v8.renderscript.Allocation.copy2DRangeFrom(int,int,int,int,short[])*

public void copy2DRangeFrom(
  int xoff,
  int yoff,
  int w,
  int h,
  short[] data)

Copy from an array into a rectangular region in this Allocation. The array is 
assumed to be tightly packed. 


    xoff - X offset of the region to update in this Allocation 
    yoff - Y offset of the region to update in this Allocation 
    w - Width of the region to update 
    h - Height of the region to update 
    data - to be placed into the Allocation 

*android.support.v8.renderscript.Allocation.copy3DRangeFrom(int,int,int,int,int,int,Allocation,int,int,int)*

public void copy3DRangeFrom(
  int xoff,
  int yoff,
  int zoff,
  int w,
  int h,
  int d,
  android.support.v8.renderscript.Allocation data,
  int dataXoff,
  int dataYoff,
  int dataZoff)




    xoff - X offset of the region to update in this Allocation 
    yoff - Y offset of the region to update in this Allocation 
    zoff - Z offset of the region to update in this Allocation 
    w - Width of the region to update. 
    h - Height of the region to update. 
    d - Depth of the region to update. 
    data - source allocation. 
    dataXoff - X offset of the region in the source Allocation 
    dataYoff - Y offset of the region in the source Allocation 
    dataZoff - Z offset of the region in the source Allocation 

*android.support.v8.renderscript.Allocation.copy3DRangeFrom(int,int,int,int,int,int,byte[])*

public void copy3DRangeFrom(
  int xoff,
  int yoff,
  int zoff,
  int w,
  int h,
  int d,
  byte[] data)




    xoff - X offset of the region to update in this Allocation 
    yoff - Y offset of the region to update in this Allocation 
    zoff - Z offset of the region to update in this Allocation 
    w - Width of the region to update 
    h - Height of the region to update 
    d - Depth of the region to update 
    data - to be placed into the allocation 

*android.support.v8.renderscript.Allocation.copy3DRangeFrom(int,int,int,int,int,int,float[])*

public void copy3DRangeFrom(
  int xoff,
  int yoff,
  int zoff,
  int w,
  int h,
  int d,
  float[] data)





*android.support.v8.renderscript.Allocation.copy3DRangeFrom(int,int,int,int,int,int,int[])*

public void copy3DRangeFrom(
  int xoff,
  int yoff,
  int zoff,
  int w,
  int h,
  int d,
  int[] data)





*android.support.v8.renderscript.Allocation.copy3DRangeFrom(int,int,int,int,int,int,short[])*

public void copy3DRangeFrom(
  int xoff,
  int yoff,
  int zoff,
  int w,
  int h,
  int d,
  short[] data)





*android.support.v8.renderscript.Allocation.copyFrom(BaseObj[])*

public void copyFrom(android.support.v8.renderscript.BaseObj[] d)

Copy an array of RS objects to the Allocation. 


    d - Source array. 

*android.support.v8.renderscript.Allocation.copyFrom(Bitmap)*

public void copyFrom(Bitmap b)

Copy into an Allocation from a (|android.graphics.Bitmap|) . The height, width, 
and format of the bitmap must match the existing allocation. 

If the (|android.graphics.Bitmap|) is the same as the 
(|android.graphics.Bitmap|) used to create the Allocation with 
(|android.support.v8.renderscript.Allocation|) and 
(|android.support.v8.renderscript.Allocation|) is set on the Allocation, this 
will synchronize the Allocation with the latest data from the 
(|android.graphics.Bitmap|) , potentially avoiding the actual copy. 


    b - the source bitmap 

*android.support.v8.renderscript.Allocation.copyFrom(byte[])*

public void copyFrom(byte[] d)

Copy into this Allocation from an array. This variant is type checked and will 
generate exceptions if the Allocation's 
(|android.support.v8.renderscript.Element|) is not an 8 bit integer type. 


    d - the source data array 

*android.support.v8.renderscript.Allocation.copyFrom(float[])*

public void copyFrom(float[] d)

Copy into this Allocation from an array. This variant is type checked and will 
generate exceptions if the Allocation's 
(|android.support.v8.renderscript.Element|) is not a 32 bit float type. 


    d - the source data array 

*android.support.v8.renderscript.Allocation.copyFrom(int[])*

public void copyFrom(int[] d)

Copy into this Allocation from an array. This variant is type checked and will 
generate exceptions if the Allocation's 
(|android.support.v8.renderscript.Element|) is not a 32 bit integer type. 


    d - the source data array 

*android.support.v8.renderscript.Allocation.copyFrom(short[])*

public void copyFrom(short[] d)

Copy into this Allocation from an array. This variant is type checked and will 
generate exceptions if the Allocation's 
(|android.support.v8.renderscript.Element|) is not a 16 bit integer type. 


    d - the source data array 

*android.support.v8.renderscript.Allocation.copyFromUnchecked(byte[])*

public void copyFromUnchecked(byte[] d)

Copy into this Allocation from an array. This method does not guarantee that 
the Allocation is compatible with the input buffer; it copies memory without 
reinterpretation. 


    d - the source data array 

*android.support.v8.renderscript.Allocation.copyFromUnchecked(float[])*

public void copyFromUnchecked(float[] d)

Copy into this Allocation from an array. This method does not guarantee that 
the Allocation is compatible with the input buffer; it copies memory without 
reinterpretation. 


    d - the source data array 

*android.support.v8.renderscript.Allocation.copyFromUnchecked(int[])*

public void copyFromUnchecked(int[] d)

Copy into this Allocation from an array. This method does not guarantee that 
the Allocation is compatible with the input buffer; it copies memory without 
reinterpretation. 


    d - the source data array 

*android.support.v8.renderscript.Allocation.copyFromUnchecked(short[])*

public void copyFromUnchecked(short[] d)

Copy into this Allocation from an array. This method does not guarantee that 
the Allocation is compatible with the input buffer; it copies memory without 
reinterpretation. 


    d - the source data array 

*android.support.v8.renderscript.Allocation.copyTo(Bitmap)*

public void copyTo(Bitmap b)

Copy from the Allocation into a (|android.graphics.Bitmap|) . The bitmap must 
match the dimensions of the Allocation. 


    b - The bitmap to be set from the Allocation. 

*android.support.v8.renderscript.Allocation.createCubemapFromBitmap(RenderScript,Bitmap)*

public static |android.support.v8.renderscript.Allocation| createCubemapFromBitmap(
  android.support.v8.renderscript.RenderScript rs,
  Bitmap b)

Creates a non-mipmapped cubemap Allocation for use as a graphics texture from a 
(|android.graphics.Bitmap|) containing the horizontal list of cube faces. Each 
face must be a square, have the same size as all other faces, and have a width 
that is a power of 2. 


    rs - Context to which the allocation will belong. 
    b - bitmap with cubemap faces layed out in the following format: right, left, top, 
       bottom, front, back 

    Returns: allocation containing cubemap data 

*android.support.v8.renderscript.Allocation.createCubemapFromBitmap(RenderScript,Bitmap,Allocation.MipmapControl,int)*

public static |android.support.v8.renderscript.Allocation| createCubemapFromBitmap(
  android.support.v8.renderscript.RenderScript rs,
  Bitmap b,
  android.support.v8.renderscript.Allocation.MipmapControl mips,
  int usage)

Creates a cubemap Allocation from a (|android.graphics.Bitmap|) containing the 
horizontal list of cube faces. Each face must be a square, have the same size 
as all other faces, and have a width that is a power of 2. 


    rs - Context to which the allocation will belong. 
    b - Bitmap with cubemap faces layed out in the following format: right, left, top, 
       bottom, front, back 
    mips - specifies desired mipmap behaviour for the cubemap 
    usage - bit field specifying how the cubemap is utilized 

    Returns: allocation containing cubemap data 

*android.support.v8.renderscript.Allocation.createCubemapFromCubeFaces(RenderScript,Bitmap,Bitmap,Bitmap,Bitmap,Bitmap,Bitmap)*

public static |android.support.v8.renderscript.Allocation| createCubemapFromCubeFaces(
  android.support.v8.renderscript.RenderScript rs,
  Bitmap xpos,
  Bitmap xneg,
  Bitmap ypos,
  Bitmap yneg,
  Bitmap zpos,
  Bitmap zneg)

Creates a non-mipmapped cubemap Allocation for use as a sampler input from 6 
(|android.graphics.Bitmap|) objects containing the cube faces. Each face must 
be a square, have the same size as all other faces, and have a width that is a 
power of 2. 


    rs - Context to which the allocation will belong. 
    xpos - cubemap face in the positive x direction 
    xneg - cubemap face in the negative x direction 
    ypos - cubemap face in the positive y direction 
    yneg - cubemap face in the negative y direction 
    zpos - cubemap face in the positive z direction 
    zneg - cubemap face in the negative z direction 

    Returns: allocation containing cubemap data 

*android.support.v8.renderscript.Allocation.createCubemapFromCubeFaces(RenderScript,Bitmap,Bitmap,Bitmap,Bitmap,Bitmap,Bitmap,Allocation.MipmapControl,int)*

public static |android.support.v8.renderscript.Allocation| createCubemapFromCubeFaces(
  android.support.v8.renderscript.RenderScript rs,
  Bitmap xpos,
  Bitmap xneg,
  Bitmap ypos,
  Bitmap yneg,
  Bitmap zpos,
  Bitmap zneg,
  android.support.v8.renderscript.Allocation.MipmapControl mips,
  int usage)

Creates a cubemap Allocation from 6 (|android.graphics.Bitmap|) objects 
containing the cube faces. Each face must be a square, have the same size as 
all other faces, and have a width that is a power of 2. 


    rs - Context to which the allocation will belong. 
    xpos - cubemap face in the positive x direction 
    xneg - cubemap face in the negative x direction 
    ypos - cubemap face in the positive y direction 
    yneg - cubemap face in the negative y direction 
    zpos - cubemap face in the positive z direction 
    zneg - cubemap face in the negative z direction 
    mips - specifies desired mipmap behaviour for the cubemap 
    usage - bit field specifying how the cubemap is utilized 

    Returns: allocation containing cubemap data 

*android.support.v8.renderscript.Allocation.createFromBitmap(RenderScript,Bitmap)*

public static |android.support.v8.renderscript.Allocation| createFromBitmap(
  android.support.v8.renderscript.RenderScript rs,
  Bitmap b)

Creates an Allocation from a (|android.graphics.Bitmap|) . 

This Allocation will be created with 
(|android.support.v8.renderscript.Allocation|) , and 
(|android.support.v8.renderscript.Allocation|) . 


    rs - Context to which the allocation will belong. 
    b - bitmap source for the allocation data 

    Returns: Allocation containing bitmap data 

*android.support.v8.renderscript.Allocation.createFromBitmap(RenderScript,Bitmap,Allocation.MipmapControl,int)*

public static |android.support.v8.renderscript.Allocation| createFromBitmap(
  android.support.v8.renderscript.RenderScript rs,
  Bitmap b,
  android.support.v8.renderscript.Allocation.MipmapControl mips,
  int usage)

Creates an Allocation from a (|android.graphics.Bitmap|) . 


    rs - Context to which the allocation will belong. 
    b - Bitmap source for the allocation data 
    mips - specifies desired mipmap behaviour for the allocation 
    usage - bit field specifying how the allocation is utilized 

    Returns: Allocation containing bitmap data 

*android.support.v8.renderscript.Allocation.createFromBitmapResource(RenderScript,Resources,int)*

public static |android.support.v8.renderscript.Allocation| createFromBitmapResource(
  android.support.v8.renderscript.RenderScript rs,
  Resources res,
  int id)

Creates a non-mipmapped Allocation to use as a graphics texture from the 
(|android.graphics.Bitmap|) referenced by resource ID. 

This allocation will be created with 
(|android.support.v8.renderscript.Allocation|) and 
(|android.support.v8.renderscript.Allocation|) . 


    rs - Context to which the allocation will belong. 
    res - application resources 
    id - resource id to load the data from 

    Returns: Allocation containing resource data 

*android.support.v8.renderscript.Allocation.createFromBitmapResource(RenderScript,Resources,int,Allocation.MipmapControl,int)*

public static |android.support.v8.renderscript.Allocation| createFromBitmapResource(
  android.support.v8.renderscript.RenderScript rs,
  Resources res,
  int id,
  android.support.v8.renderscript.Allocation.MipmapControl mips,
  int usage)

Creates an Allocation from the Bitmap referenced by resource ID. 


    rs - Context to which the allocation will belong. 
    res - application resources 
    id - resource id to load the data from 
    mips - specifies desired mipmap behaviour for the allocation 
    usage - bit field specifying how the allocation is utilized 

    Returns: Allocation containing resource data 

*android.support.v8.renderscript.Allocation.createFromString(RenderScript,String,int)*

public static |android.support.v8.renderscript.Allocation| createFromString(
  android.support.v8.renderscript.RenderScript rs,
  java.lang.String str,
  int usage)

Creates an Allocation containing string data encoded in UTF-8 format. 


    rs - Context to which the allocation will belong. 
    str - string to create the allocation from 
    usage - bit field specifying how the allocaiton is utilized 

*android.support.v8.renderscript.Allocation.createSized(RenderScript,Element,int)*

public static |android.support.v8.renderscript.Allocation| createSized(
  android.support.v8.renderscript.RenderScript rs,
  android.support.v8.renderscript.Element e,
  int count)

Creates an Allocation with a specified number of given elements 


    rs - Context to which the Allocation will belong. 
    e - Element to use in the Allocation 
    count - the number of Elements in the Allocation 

    Returns: 

*android.support.v8.renderscript.Allocation.createSized(RenderScript,Element,int,int)*

public static |android.support.v8.renderscript.Allocation| createSized(
  android.support.v8.renderscript.RenderScript rs,
  android.support.v8.renderscript.Element e,
  int count,
  int usage)

Creates an Allocation with a specified number of given elements 


    rs - Context to which the Allocation will belong. 
    e - Element to use in the Allocation 
    count - the number of Elements in the Allocation 
    usage - bit field specifying how the Allocation is utilized 

    Returns: 

*android.support.v8.renderscript.Allocation.createTyped(RenderScript,Type)*

public static |android.support.v8.renderscript.Allocation| createTyped(
  android.support.v8.renderscript.RenderScript rs,
  android.support.v8.renderscript.Type type)

Creates an Allocation for use by scripts with a given 
(|android.support.v8.renderscript.Type|) and no mipmaps 


    rs - Context to which the Allocation will belong. 
    type - RenderScript Type describing data layout 

    Returns: 

*android.support.v8.renderscript.Allocation.createTyped(RenderScript,Type,Allocation.MipmapControl,int)*

public static |android.support.v8.renderscript.Allocation| createTyped(
  android.support.v8.renderscript.RenderScript rs,
  android.support.v8.renderscript.Type type,
  android.support.v8.renderscript.Allocation.MipmapControl mips,
  int usage)

Creates a new Allocation with the given 
(|android.support.v8.renderscript.Type|) , mipmap flag, and usage flags. 


    type - RenderScript type describing data layout 
    mips - specifies desired mipmap behaviour for the allocation 
    usage - bit field specifying how the Allocation is utilized 

*android.support.v8.renderscript.Allocation.createTyped(RenderScript,Type,int)*

public static |android.support.v8.renderscript.Allocation| createTyped(
  android.support.v8.renderscript.RenderScript rs,
  android.support.v8.renderscript.Type type,
  int usage)

Creates an Allocation with the size specified by the type and no mipmaps 
generated by default 


    rs - Context to which the allocation will belong. 
    type - renderscript type describing data layout 
    usage - bit field specifying how the allocation is utilized 

    Returns: 

*android.support.v8.renderscript.Allocation.finalize()*

protected void finalize()
  throws |java.lang.Throwable|
         




*android.support.v8.renderscript.Allocation.generateMipmaps()*

public void generateMipmaps()

Generate a mipmap chain. This is only valid if the Type of the Allocation 
includes mipmaps. 

This function will generate a complete set of mipmaps from the top level LOD 
and place them into the script memory space. 

If the Allocation is also using other memory spaces, a call to 
syncAll(Allocation.USAGE_SCRIPT)(|android.support.v8.renderscript.Allocation|) 
is required. 



*android.support.v8.renderscript.Allocation.getBytesSize()*

public int getBytesSize()

Get the size of the Allocation in bytes. 



    Returns: size of the Allocation in bytes. 

*android.support.v8.renderscript.Allocation.getElement()*

public |android.support.v8.renderscript.Element| getElement()

Get the (|android.support.v8.renderscript.Element|) of the 
(|android.support.v8.renderscript.Type|) of the Allocation. 



    Returns: 

*android.support.v8.renderscript.Allocation.getType()*

public |android.support.v8.renderscript.Type| getType()

Get the (|android.support.v8.renderscript.Type|) of the Allocation. 



    Returns: 

*android.support.v8.renderscript.Allocation.getUsage()*

public int getUsage()

Get the usage flags of the Allocation. 



    Returns: usage this Allocation's set of the USAGE_* flags OR'd together 

*android.support.v8.renderscript.Allocation.ioReceive()*

public void ioReceive()

Receive the latest input into the Allocation. This operation is only valid if 
(|android.support.v8.renderscript.Allocation|) is set on the Allocation. 



*android.support.v8.renderscript.Allocation.ioSend()*

public void ioSend()

Send a buffer to the output stream. The contents of the Allocation will be 
undefined after this operation. This operation is only valid if 
(|android.support.v8.renderscript.Allocation|) is set on the Allocation. 



*android.support.v8.renderscript.Allocation.ioSendOutput()*

public void ioSendOutput()

Delete once code is updated. 



*android.support.v8.renderscript.Allocation.setFromFieldPacker(int,FieldPacker)*

public void setFromFieldPacker(
  int xoff,
  android.support.v8.renderscript.FieldPacker fp)

This is only intended to be used by auto-generated code reflected from the 
RenderScript script files and should not be used by developers. 


    xoff - 
    fp - 

*android.support.v8.renderscript.Allocation.setFromFieldPacker(int,int,FieldPacker)*

public void setFromFieldPacker(
  int xoff,
  int component_number,
  android.support.v8.renderscript.FieldPacker fp)

This is only intended to be used by auto-generated code reflected from the 
RenderScript script files. 


    xoff - 
    component_number - 
    fp - 

*android.support.v8.renderscript.Allocation.syncAll(int)*

public void syncAll(int srcLocation)

Propagate changes from one usage of the Allocation to the other usages of the 
Allocation. 




