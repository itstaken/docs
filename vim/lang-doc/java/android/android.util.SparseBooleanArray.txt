*android.util.SparseBooleanArray* *SparseBooleanArray* SparseBooleanArrays map i

public class SparseBooleanArray
  extends    |java.lang.Object|
  implements |java.lang.Cloneable|

|android.util.SparseBooleanArray_Description|
|android.util.SparseBooleanArray_Fields|
|android.util.SparseBooleanArray_Constructors|
|android.util.SparseBooleanArray_Methods|

================================================================================

*android.util.SparseBooleanArray_Constructors*
|android.util.SparseBooleanArray()|Creates a new SparseBooleanArray containing 
|android.util.SparseBooleanArray(int)|Creates a new SparseBooleanArray containi

*android.util.SparseBooleanArray_Methods*
|android.util.SparseBooleanArray.append(int,boolean)|Puts a key/value pair into
|android.util.SparseBooleanArray.clear()|Removes all key-value mappings from th
|android.util.SparseBooleanArray.clone()|
|android.util.SparseBooleanArray.delete(int)|Removes the mapping from the speci
|android.util.SparseBooleanArray.get(int)|Gets the boolean mapped from the spec
|android.util.SparseBooleanArray.get(int,boolean)|Gets the boolean mapped from 
|android.util.SparseBooleanArray.indexOfKey(int)|Returns the index for which#ke
|android.util.SparseBooleanArray.indexOfValue(boolean)|Returns an index for whi
|android.util.SparseBooleanArray.keyAt(int)|Given an index in the range 0...siz
|android.util.SparseBooleanArray.put(int,boolean)|Adds a mapping from the speci
|android.util.SparseBooleanArray.size()|Returns the number of key-value mapping
|android.util.SparseBooleanArray.toString()|
|android.util.SparseBooleanArray.valueAt(int)|Given an index in the range 0...s

*android.util.SparseBooleanArray_Description*

SparseBooleanArrays map integers to booleans. Unlike a normal array of booleans 
there can be gaps in the indices. It is intended to be more memory efficient 
than using a HashMap to map Integers to Booleans, both because it avoids 
auto-boxing keys and values and its data structure doesn't rely on an extra 
entry object for each mapping. 

Note that this container keeps its mappings in an array data structure, using a 
binary search to find keys. The implementation is not intended to be 
appropriate for data structures that may contain large numbers of items. It is 
generally slower than a traditional HashMap, since lookups require a binary 
search and adds and removes require inserting and deleting entries in the 
array. For containers holding up to hundreds of items, the performance 
difference is not significant, less than 50%. 

It is possible to iterate over the items in this container using 
(|android.util.SparseBooleanArray|) and (|android.util.SparseBooleanArray|) . 
Iterating over the keys using keyAt(int) with ascending values of the index 
will return the keys in ascending order, or the values corresponding to the 
keys in ascending order in the case of valueAt(int). 



*android.util.SparseBooleanArray()*

public SparseBooleanArray()

Creates a new SparseBooleanArray containing no mappings. 


*android.util.SparseBooleanArray(int)*

public SparseBooleanArray(int initialCapacity)

Creates a new SparseBooleanArray containing no mappings that will not require 
any additional memory allocation to store the specified number of mappings. If 
you supply an initial capacity of 0, the sparse array will be initialized with 
a light-weight representation not requiring any additional array allocations. 


*android.util.SparseBooleanArray.append(int,boolean)*

public void append(
  int key,
  boolean value)

Puts a key/value pair into the array, optimizing for the case where the key is 
greater than all existing keys in the array. 



*android.util.SparseBooleanArray.clear()*

public void clear()

Removes all key-value mappings from this SparseBooleanArray. 



*android.util.SparseBooleanArray.clone()*

public |android.util.SparseBooleanArray| clone()





*android.util.SparseBooleanArray.delete(int)*

public void delete(int key)

Removes the mapping from the specified key, if there was any. 



*android.util.SparseBooleanArray.get(int)*

public boolean get(int key)

Gets the boolean mapped from the specified key, or false if no such mapping has 
been made. 



*android.util.SparseBooleanArray.get(int,boolean)*

public boolean get(
  int key,
  boolean valueIfKeyNotFound)

Gets the boolean mapped from the specified key, or the specified value if no 
such mapping has been made. 



*android.util.SparseBooleanArray.indexOfKey(int)*

public int indexOfKey(int key)

Returns the index for which (|android.util.SparseBooleanArray|) would return 
the specified key, or a negative number if the specified key is not mapped. 



*android.util.SparseBooleanArray.indexOfValue(boolean)*

public int indexOfValue(boolean value)

Returns an index for which (|android.util.SparseBooleanArray|) would return the 
specified key, or a negative number if no keys map to the specified value. 
Beware that this is a linear search, unlike lookups by key, and that multiple 
keys can map to the same value and this will find only one of them. 



*android.util.SparseBooleanArray.keyAt(int)*

public int keyAt(int index)

Given an index in the range 0...size()-1, returns the key from the indexth 
key-value mapping that this SparseBooleanArray stores. 

The keys corresponding to indices in ascending order are guaranteed to be in 
ascending order, e.g., keyAt(0) will return the smallest key and 
keyAt(size()-1) will return the largest key. 



*android.util.SparseBooleanArray.put(int,boolean)*

public void put(
  int key,
  boolean value)

Adds a mapping from the specified key to the specified value, replacing the 
previous mapping from the specified key if there was one. 



*android.util.SparseBooleanArray.size()*

public int size()

Returns the number of key-value mappings that this SparseBooleanArray currently 
stores. 



*android.util.SparseBooleanArray.toString()*

public |java.lang.String| toString()

This implementation composes a string by iterating over its mappings. 



*android.util.SparseBooleanArray.valueAt(int)*

public boolean valueAt(int index)

Given an index in the range 0...size()-1, returns the value from the indexth 
key-value mapping that this SparseBooleanArray stores. 

The values corresponding to indices in ascending order are guaranteed to be 
associated with keys in ascending order, e.g., valueAt(0) will return the value 
associated with the smallest key and valueAt(size()-1) will return the value 
associated with the largest key. 




