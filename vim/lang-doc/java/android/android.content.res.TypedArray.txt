*android.content.res.TypedArray* *TypedArray* Container for an array of values t

public class TypedArray
  extends    |java.lang.Object|

|android.content.res.TypedArray_Description|
|android.content.res.TypedArray_Fields|
|android.content.res.TypedArray_Constructors|
|android.content.res.TypedArray_Methods|

================================================================================

*android.content.res.TypedArray_Methods*
|android.content.res.TypedArray.getBoolean(int,boolean)|Retrieve the boolean va
|android.content.res.TypedArray.getColor(int,int)|Retrieve the color value for 
|android.content.res.TypedArray.getColorStateList(int)|Retrieve the ColorStateL
|android.content.res.TypedArray.getDimension(int,float)|Retrieve a dimensional 
|android.content.res.TypedArray.getDimensionPixelOffset(int,int)|Retrieve a dim
|android.content.res.TypedArray.getDimensionPixelSize(int,int)|Retrieve a dimen
|android.content.res.TypedArray.getDrawable(int)|Retrieve the Drawable for the 
|android.content.res.TypedArray.getFloat(int,float)|Retrieve the float value fo
|android.content.res.TypedArray.getFraction(int,int,int,float)|Retrieve a fract
|android.content.res.TypedArray.getIndex(int)|Return an index in the array that
|android.content.res.TypedArray.getIndexCount()|Return the number of indices in
|android.content.res.TypedArray.getInt(int,int)|Retrieve the integer value for 
|android.content.res.TypedArray.getInteger(int,int)|Retrieve the integer value 
|android.content.res.TypedArray.getLayoutDimension(int,int)|Special version of#
|android.content.res.TypedArray.getLayoutDimension(int,String)|Special version 
|android.content.res.TypedArray.getNonConfigurationString(int,int)|
|android.content.res.TypedArray.getNonResourceString(int)|Retrieve the string v
|android.content.res.TypedArray.getPositionDescription()|Returns a message abou
|android.content.res.TypedArray.getResourceId(int,int)|Retrieve the resource id
|android.content.res.TypedArray.getResources()|Return the Resources object this
|android.content.res.TypedArray.getString(int)|Retrieve the string value for th
|android.content.res.TypedArray.getText(int)|Retrieve the styled string value f
|android.content.res.TypedArray.getTextArray(int)|Retrieve the CharSequence[] f
|android.content.res.TypedArray.getValue(int,TypedValue)|Retrieve the raw Typed
|android.content.res.TypedArray.hasValue(int)|Determines whether there is an at
|android.content.res.TypedArray.length()|Return the number of values in this ar
|android.content.res.TypedArray.peekValue(int)|Retrieve the raw TypedValue for 
|android.content.res.TypedArray.recycle()|Give back a previously retrieved arra
|android.content.res.TypedArray.toString()|

*android.content.res.TypedArray_Description*

Container for an array of values that were retrieved with 
(|android.content.res.Resources.Theme|) or (|android.content.res.Resources|) . 
Be sure to call (|android.content.res.TypedArray|) when done with them. 

The indices used to retrieve values from this structure correspond to the 
positions of the attributes given to obtainStyledAttributes. 



*android.content.res.TypedArray.getBoolean(int,boolean)*

public boolean getBoolean(
  int index,
  boolean defValue)

Retrieve the boolean value for the attribute at index. 


    index - Index of attribute to retrieve. 
    defValue - Value to return if the attribute is not defined. 

    Returns: Attribute boolean value, or defValue if not defined. 

*android.content.res.TypedArray.getColor(int,int)*

public int getColor(
  int index,
  int defValue)

Retrieve the color value for the attribute at index. If the attribute 
references a color resource holding a complex 
(|android.content.res.ColorStateList|) , then the default color from the set is 
returned. 


    index - Index of attribute to retrieve. 
    defValue - Value to return if the attribute is not defined or not a resource. 

    Returns: Attribute color value, or defValue if not defined. 

*android.content.res.TypedArray.getColorStateList(int)*

public |android.content.res.ColorStateList| getColorStateList(int index)

Retrieve the ColorStateList for the attribute at index. The value may be either 
a single solid color or a reference to a color or complex 
(|android.content.res.ColorStateList|) description. 


    index - Index of attribute to retrieve. 

    Returns: ColorStateList for the attribute, or null if not defined. 

*android.content.res.TypedArray.getDimension(int,float)*

public float getDimension(
  int index,
  float defValue)

Retrieve a dimensional unit attribute at index. Unit conversions are based on 
the current (|android.util.DisplayMetrics|) associated with the resources this 
(|android.content.res.TypedArray|) object came from. 


    index - Index of attribute to retrieve. 
    defValue - Value to return if the attribute is not defined or not a resource. 

    Returns: Attribute dimension value multiplied by the appropriate metric, or defValue if 
             not defined. 

*android.content.res.TypedArray.getDimensionPixelOffset(int,int)*

public int getDimensionPixelOffset(
  int index,
  int defValue)

Retrieve a dimensional unit attribute at index for use as an offset in raw 
pixels. This is the same as (|android.content.res.TypedArray|) , except the 
returned value is converted to integer pixels for you. An offset conversion 
involves simply truncating the base value to an integer. 


    index - Index of attribute to retrieve. 
    defValue - Value to return if the attribute is not defined or not a resource. 

    Returns: Attribute dimension value multiplied by the appropriate metric and truncated to 
             integer pixels, or defValue if not defined. 

*android.content.res.TypedArray.getDimensionPixelSize(int,int)*

public int getDimensionPixelSize(
  int index,
  int defValue)

Retrieve a dimensional unit attribute at index for use as a size in raw pixels. 
This is the same as (|android.content.res.TypedArray|) , except the returned 
value is converted to integer pixels for use as a size. A size conversion 
involves rounding the base value, and ensuring that a non-zero base value is at 
least one pixel in size. 


    index - Index of attribute to retrieve. 
    defValue - Value to return if the attribute is not defined or not a resource. 

    Returns: Attribute dimension value multiplied by the appropriate metric and truncated to 
             integer pixels, or defValue if not defined. 

*android.content.res.TypedArray.getDrawable(int)*

public Drawable getDrawable(int index)

Retrieve the Drawable for the attribute at index. This gets the resource ID of 
the selected attribute, and uses 
Resources.getDrawable(|android.content.res.Resources|) of the owning Resources 
object to retrieve its Drawable. 


    index - Index of attribute to retrieve. 

    Returns: Drawable for the attribute, or null if not defined. 

*android.content.res.TypedArray.getFloat(int,float)*

public float getFloat(
  int index,
  float defValue)

Retrieve the float value for the attribute at index. 


    index - Index of attribute to retrieve. 

    Returns: Attribute float value, or defValue if not defined.. 

*android.content.res.TypedArray.getFraction(int,int,int,float)*

public float getFraction(
  int index,
  int base,
  int pbase,
  float defValue)

Retrieve a fractional unit attribute at index. 


    index - Index of attribute to retrieve. 
    base - The base value of this fraction. In other words, a standard fraction is 
       multiplied by this value. 
    pbase - The parent base value of this fraction. In other words, a parent fraction 
       (nn%p) is multiplied by this value. 
    defValue - Value to return if the attribute is not defined or not a resource. 

    Returns: Attribute fractional value multiplied by the appropriate base value, or 
             defValue if not defined. 

*android.content.res.TypedArray.getIndex(int)*

public int getIndex(int at)

Return an index in the array that has data. 


    at - The index you would like to returned, ranging from 0 to {@link 
       #getIndexCount()}. 

    Returns: The index at the given offset, which can be used with {@link #getValue} and 
             related APIs. 

*android.content.res.TypedArray.getIndexCount()*

public int getIndexCount()

Return the number of indices in the array that actually have data. 



*android.content.res.TypedArray.getInt(int,int)*

public int getInt(
  int index,
  int defValue)

Retrieve the integer value for the attribute at index. 


    index - Index of attribute to retrieve. 
    defValue - Value to return if the attribute is not defined. 

    Returns: Attribute int value, or defValue if not defined. 

*android.content.res.TypedArray.getInteger(int,int)*

public int getInteger(
  int index,
  int defValue)

Retrieve the integer value for the attribute at index. 


    index - Index of attribute to retrieve. 
    defValue - Value to return if the attribute is not defined or not a resource. 

    Returns: Attribute integer value, or defValue if not defined. 

*android.content.res.TypedArray.getLayoutDimension(int,int)*

public int getLayoutDimension(
  int index,
  int defValue)

Special version of (|android.content.res.TypedArray|) for retrieving 
(|android.view.ViewGroup|) 's layout_width and layout_height attributes. This 
is only here for performance reasons; applications should use 
(|android.content.res.TypedArray|) . 


    index - Index of the attribute to retrieve. 
    defValue - The default value to return if this attribute is not default or contains the 
       wrong type of data. 

    Returns: Attribute dimension value multiplied by the appropriate metric and truncated to 
             integer pixels. 

*android.content.res.TypedArray.getLayoutDimension(int,String)*

public int getLayoutDimension(
  int index,
  java.lang.String name)

Special version of (|android.content.res.TypedArray|) for retrieving 
(|android.view.ViewGroup|) 's layout_width and layout_height attributes. This 
is only here for performance reasons; applications should use 
(|android.content.res.TypedArray|) . 


    index - Index of the attribute to retrieve. 
    name - Textual name of attribute for error reporting. 

    Returns: Attribute dimension value multiplied by the appropriate metric and truncated to 
             integer pixels. 

*android.content.res.TypedArray.getNonConfigurationString(int,int)*

public |java.lang.String| getNonConfigurationString(
  int index,
  int allowedChangingConfigs)




    index - Index of attribute to retrieve. 
    allowedChangingConfigs - Bit mask of configurations from {@link Configuration}.NATIVE_CONFIG_* that are 
       allowed to change. 

    Returns: String holding string data. Any styling information is removed. Returns null if 
             the attribute is not defined. 

*android.content.res.TypedArray.getNonResourceString(int)*

public |java.lang.String| getNonResourceString(int index)

Retrieve the string value for the attribute at index, but only if that string 
comes from an immediate value in an XML file. That is, this does not allow 
references to string resources, string attributes, or conversions from other 
types. As such, this method will only return strings for TypedArray objects 
that come from attributes in an XML file. 


    index - Index of attribute to retrieve. 

    Returns: String holding string data. Any styling information is removed. Returns null if 
             the attribute is not defined or is not an immediate string value. 

*android.content.res.TypedArray.getPositionDescription()*

public |java.lang.String| getPositionDescription()

Returns a message about the parser state suitable for printing error messages. 



*android.content.res.TypedArray.getResourceId(int,int)*

public int getResourceId(
  int index,
  int defValue)

Retrieve the resource identifier for the attribute at index. Note that 
attribute resource as resolved when the overall 
(|android.content.res.TypedArray|) object is retrieved. As a result, this 
function will return the resource identifier of the final resource value that 
was found, not necessarily the original resource that was specified by the 
attribute. 


    index - Index of attribute to retrieve. 
    defValue - Value to return if the attribute is not defined or not a resource. 

    Returns: Attribute resource identifier, or defValue if not defined. 

*android.content.res.TypedArray.getResources()*

public |android.content.res.Resources| getResources()

Return the Resources object this array was loaded from. 



*android.content.res.TypedArray.getString(int)*

public |java.lang.String| getString(int index)

Retrieve the string value for the attribute at index. 


    index - Index of attribute to retrieve. 

    Returns: String holding string data. Any styling information is removed. Returns null if 
             the attribute is not defined. 

*android.content.res.TypedArray.getText(int)*

public |java.lang.CharSequence| getText(int index)

Retrieve the styled string value for the attribute at index. 


    index - Index of attribute to retrieve. 

    Returns: CharSequence holding string data. May be styled. Returns null if the attribute 
             is not defined. 

*android.content.res.TypedArray.getTextArray(int)*

public |java.lang.CharSequence|[] getTextArray(int index)

Retrieve the CharSequence[] for the attribute at index. This gets the resource 
ID of the selected attribute, and uses 
Resources.getTextArray(|android.content.res.Resources|) of the owning Resources 
object to retrieve its String[]. 


    index - Index of attribute to retrieve. 

    Returns: CharSequence[] for the attribute, or null if not defined. 

*android.content.res.TypedArray.getValue(int,TypedValue)*

public boolean getValue(
  int index,
  android.util.TypedValue outValue)

Retrieve the raw TypedValue for the attribute at index. 


    index - Index of attribute to retrieve. 
    outValue - TypedValue object in which to place the attribute's data. 

    Returns: Returns true if the value was retrieved, else false. 

*android.content.res.TypedArray.hasValue(int)*

public boolean hasValue(int index)

Determines whether there is an attribute at index. 


    index - Index of attribute to retrieve. 

    Returns: True if the attribute has a value, false otherwise. 

*android.content.res.TypedArray.length()*

public int length()

Return the number of values in this array. 



*android.content.res.TypedArray.peekValue(int)*

public |android.util.TypedValue| peekValue(int index)

Retrieve the raw TypedValue for the attribute at index and return a temporary 
object holding its data. This object is only valid until the next call on to 
(|android.content.res.TypedArray|) . 


    index - Index of attribute to retrieve. 

    Returns: Returns a TypedValue object if the attribute is defined, containing its data; 
             otherwise returns null. (You will not receive a TypedValue whose 
             type is TYPE_NULL.) 

*android.content.res.TypedArray.recycle()*

public void recycle()

Give back a previously retrieved array, for later re-use. 



*android.content.res.TypedArray.toString()*

public |java.lang.String| toString()






