*android.view.InputDevice* *InputDevice* Describes the capabilities of a particu

public final class InputDevice
  extends    |java.lang.Object|
  implements |android.os.Parcelable|

|android.view.InputDevice_Description|
|android.view.InputDevice_Fields|
|android.view.InputDevice_Constructors|
|android.view.InputDevice_Methods|

================================================================================

*android.view.InputDevice_Fields*
|android.os.Parcelable.Creator<android.view.InputDevice>_android.view.InputDevice.CREATOR|
|int_android.view.InputDevice.KEYBOARD_TYPE_ALPHABETIC|
|int_android.view.InputDevice.KEYBOARD_TYPE_NON_ALPHABETIC|
|int_android.view.InputDevice.KEYBOARD_TYPE_NONE|
|int_android.view.InputDevice.MOTION_RANGE_ORIENTATION|
|int_android.view.InputDevice.MOTION_RANGE_PRESSURE|
|int_android.view.InputDevice.MOTION_RANGE_SIZE|
|int_android.view.InputDevice.MOTION_RANGE_TOOL_MAJOR|
|int_android.view.InputDevice.MOTION_RANGE_TOOL_MINOR|
|int_android.view.InputDevice.MOTION_RANGE_TOUCH_MAJOR|
|int_android.view.InputDevice.MOTION_RANGE_TOUCH_MINOR|
|int_android.view.InputDevice.MOTION_RANGE_X|
|int_android.view.InputDevice.MOTION_RANGE_Y|
|int_android.view.InputDevice.SOURCE_ANY|
|int_android.view.InputDevice.SOURCE_CLASS_BUTTON|
|int_android.view.InputDevice.SOURCE_CLASS_JOYSTICK|
|int_android.view.InputDevice.SOURCE_CLASS_MASK|
|int_android.view.InputDevice.SOURCE_CLASS_NONE|
|int_android.view.InputDevice.SOURCE_CLASS_POINTER|
|int_android.view.InputDevice.SOURCE_CLASS_POSITION|
|int_android.view.InputDevice.SOURCE_CLASS_TRACKBALL|
|int_android.view.InputDevice.SOURCE_DPAD|
|int_android.view.InputDevice.SOURCE_GAMEPAD|
|int_android.view.InputDevice.SOURCE_JOYSTICK|
|int_android.view.InputDevice.SOURCE_KEYBOARD|
|int_android.view.InputDevice.SOURCE_MOUSE|
|int_android.view.InputDevice.SOURCE_STYLUS|
|int_android.view.InputDevice.SOURCE_TOUCH_NAVIGATION|
|int_android.view.InputDevice.SOURCE_TOUCHPAD|
|int_android.view.InputDevice.SOURCE_TOUCHSCREEN|
|int_android.view.InputDevice.SOURCE_TRACKBALL|
|int_android.view.InputDevice.SOURCE_UNKNOWN|

*android.view.InputDevice_Methods*
|android.view.InputDevice.describeContents()|
|android.view.InputDevice.getControllerNumber()|The controller number for a giv
|android.view.InputDevice.getDescriptor()|Gets the input device descriptor, whi
|android.view.InputDevice.getDevice(int)|Gets information about the input devic
|android.view.InputDevice.getDeviceIds()|Gets the ids of all input devices in t
|android.view.InputDevice.getGeneration()|Gets a generation number for this inp
|android.view.InputDevice.getId()|Gets the input device id.
|android.view.InputDevice.getKeyboardType()|Gets the keyboard type.
|android.view.InputDevice.getKeyCharacterMap()|Gets the key character map assoc
|android.view.InputDevice.getMotionRange(int)|Gets information about the range 
|android.view.InputDevice.getMotionRange(int,int)|Gets information about the ra
|android.view.InputDevice.getMotionRanges()|Gets the ranges for all axes suppor
|android.view.InputDevice.getName()|Gets the name of this input device.
|android.view.InputDevice.getProductId()|Gets the product id for the given devi
|android.view.InputDevice.getSources()|Gets the input sources supported by this
|android.view.InputDevice.getVendorId()|Gets the vendor id for the given device
|android.view.InputDevice.getVibrator()|Gets the vibrator service associated wi
|android.view.InputDevice.hasButtonUnderPad()|Reports whether the device has a 
|android.view.InputDevice.hasKeys(int...)|Gets whether the device is capable of
|android.view.InputDevice.isExternal()|Returns true if the device is external (
|android.view.InputDevice.isFullKeyboard()|Returns true if the device is a full
|android.view.InputDevice.isVirtual()|Returns true if the device is a virtual i
|android.view.InputDevice.toString()|
|android.view.InputDevice.writeToParcel(Parcel,int)|

*android.view.InputDevice_Description*

Describes the capabilities of a particular input device. 

Each input device may support multiple classes of input. For example, a 
multi-function keyboard may compose the capabilities of a standard keyboard 
together with a track pad mouse or other pointing device. 

Some input devices present multiple distinguishable sources of input. 
Applications can query the framework about the characteristics of each distinct 
source. 

As a further wrinkle, different kinds of input sources uses different 
coordinate systems to describe motion events. Refer to the comments on the 
input source constants for the appropriate interpretation. 



*android.os.Parcelable.Creator<android.view.InputDevice>_android.view.InputDevice.CREATOR*




*int_android.view.InputDevice.KEYBOARD_TYPE_ALPHABETIC*

The keyboard supports a complement of alphabetic keys. 


*int_android.view.InputDevice.KEYBOARD_TYPE_NON_ALPHABETIC*

The keyboard is not fully alphabetic. It may be a numeric keypad or an 
assortment of buttons that are not mapped as alphabetic keys suitable for text 
input. 


*int_android.view.InputDevice.KEYBOARD_TYPE_NONE*

There is no keyboard. 


*int_android.view.InputDevice.MOTION_RANGE_ORIENTATION*

Constant for retrieving the range of values for (|android.view.MotionEvent|) . 


*int_android.view.InputDevice.MOTION_RANGE_PRESSURE*

Constant for retrieving the range of values for (|android.view.MotionEvent|) . 


*int_android.view.InputDevice.MOTION_RANGE_SIZE*

Constant for retrieving the range of values for (|android.view.MotionEvent|) . 


*int_android.view.InputDevice.MOTION_RANGE_TOOL_MAJOR*

Constant for retrieving the range of values for (|android.view.MotionEvent|) . 


*int_android.view.InputDevice.MOTION_RANGE_TOOL_MINOR*

Constant for retrieving the range of values for (|android.view.MotionEvent|) . 


*int_android.view.InputDevice.MOTION_RANGE_TOUCH_MAJOR*

Constant for retrieving the range of values for (|android.view.MotionEvent|) . 


*int_android.view.InputDevice.MOTION_RANGE_TOUCH_MINOR*

Constant for retrieving the range of values for (|android.view.MotionEvent|) . 


*int_android.view.InputDevice.MOTION_RANGE_X*

Constant for retrieving the range of values for (|android.view.MotionEvent|) . 


*int_android.view.InputDevice.MOTION_RANGE_Y*

Constant for retrieving the range of values for (|android.view.MotionEvent|) . 


*int_android.view.InputDevice.SOURCE_ANY*

A special input source constant that is used when filtering input devices to 
match devices that provide any type of input source. 


*int_android.view.InputDevice.SOURCE_CLASS_BUTTON*

The input source has buttons or keys. Examples: (|android.view.InputDevice|) , 
(|android.view.InputDevice|) . 

A (|android.view.KeyEvent|) should be interpreted as a button or key press. 

Use (|android.view.InputDevice|) to query the device's button and key mappings. 


*int_android.view.InputDevice.SOURCE_CLASS_JOYSTICK*

The input source is a joystick. 

A (|android.view.MotionEvent|) should be interpreted as absolute joystick 
movements. 

Use (|android.view.InputDevice|) to query the range of positions. 


*int_android.view.InputDevice.SOURCE_CLASS_MASK*

A mask for input source classes. 

Each distinct input source constant has one or more input source class bits set 
to specify the desired interpretation for its input events. 


*int_android.view.InputDevice.SOURCE_CLASS_NONE*

The input source has no class. 

It is up to the application to determine how to handle the device based on the 
device type. 


*int_android.view.InputDevice.SOURCE_CLASS_POINTER*

The input source is a pointing device associated with a display. Examples: 
(|android.view.InputDevice|) , (|android.view.InputDevice|) . 

A (|android.view.MotionEvent|) should be interpreted as absolute coordinates in 
display units according to the (|android.view.View|) hierarchy. Pointer down/up 
indicated when the finger touches the display or when the selection button is 
pressed/released. 

Use (|android.view.InputDevice|) to query the range of the pointing device. 
Some devices permit touches outside the display area so the effective range may 
be somewhat smaller or larger than the actual display size. 


*int_android.view.InputDevice.SOURCE_CLASS_POSITION*

The input source is an absolute positioning device not associated with a 
display (unlike (|android.view.InputDevice|) ). 

A (|android.view.MotionEvent|) should be interpreted as absolute coordinates in 
device-specific surface units. 

Use (|android.view.InputDevice|) to query the range of positions. 


*int_android.view.InputDevice.SOURCE_CLASS_TRACKBALL*

The input source is a trackball navigation device. Examples: 
(|android.view.InputDevice|) . 

A (|android.view.MotionEvent|) should be interpreted as relative movements in 
device-specific units used for navigation purposes. Pointer down/up indicates 
when the selection button is pressed/released. 

Use (|android.view.InputDevice|) to query the range of motion. 


*int_android.view.InputDevice.SOURCE_DPAD*

The input source is a DPad. 


*int_android.view.InputDevice.SOURCE_GAMEPAD*

The input source is a game pad. (It may also be a (|android.view.InputDevice|) 
). 


*int_android.view.InputDevice.SOURCE_JOYSTICK*

The input source is a joystick. (It may also be a (|android.view.InputDevice|) 
). 


*int_android.view.InputDevice.SOURCE_KEYBOARD*

The input source is a keyboard. 

This source indicates pretty much anything that has buttons. Use 
(|android.view.InputDevice|) to determine whether the keyboard has alphabetic 
keys and can be used to enter text. 


*int_android.view.InputDevice.SOURCE_MOUSE*

The input source is a mouse pointing device. This code is also used for other 
mouse-like pointing devices such as trackpads and trackpoints. 


*int_android.view.InputDevice.SOURCE_STYLUS*

The input source is a stylus pointing device. 

Note that this bit merely indicates that an input device is capable of 
obtaining input from a stylus. To determine whether a given touch event was 
produced by a stylus, examine the tool type returned by 
(|android.view.MotionEvent|) for each individual pointer. 

A single touch event may multiple pointers with different tool types, such as 
an event that has one pointer with tool type (|android.view.MotionEvent|) and 
another pointer with tool type (|android.view.MotionEvent|) . So it is 
important to examine the tool type of each pointer, regardless of the source 
reported by (|android.view.MotionEvent|) . 


*int_android.view.InputDevice.SOURCE_TOUCH_NAVIGATION*

The input source is a touch device whose motions should be interpreted as 
navigation events. 

For example, an upward swipe should be as an upward focus traversal in the same 
manner as pressing up on a D-Pad would be. Swipes to the left, right and down 
should be treated in a similar manner. 


*int_android.view.InputDevice.SOURCE_TOUCHPAD*

The input source is a touch pad or digitizer tablet that is not associated with 
a display (unlike (|android.view.InputDevice|) ). 


*int_android.view.InputDevice.SOURCE_TOUCHSCREEN*

The input source is a touch screen pointing device. 


*int_android.view.InputDevice.SOURCE_TRACKBALL*

The input source is a trackball. 


*int_android.view.InputDevice.SOURCE_UNKNOWN*

The input source is unknown. 



*android.view.InputDevice.describeContents()*

public int describeContents()





*android.view.InputDevice.getControllerNumber()*

public int getControllerNumber()

The controller number for a given input device. 

Each gamepad or joystick is given a unique, positive controller number when 
initially configured by the system. This number may change due to events such 
as device disconnects / reconnects or user initiated reassignment. Any change 
in number will trigger an event that can be observed by registering an 
(|InputManager.InputDeviceListener|) . 

All input devices which are not gamepads or joysticks will be assigned a 
controller number of 0. 



    Returns: The controller number of the device. 

*android.view.InputDevice.getDescriptor()*

public |java.lang.String| getDescriptor()

Gets the input device descriptor, which is a stable identifier for an input 
device. 

An input device descriptor uniquely identifies an input device. Its value is 
intended to be persistent across system restarts, and should not change even if 
the input device is disconnected, reconnected or reconfigured at any time. 

It is possible for there to be multiple (|android.view.InputDevice|) instances 
that have the same input device descriptor. This might happen in situations 
where a single human input device registers multiple 
(|android.view.InputDevice|) instances (HID collections) that describe separate 
features of the device, such as a keyboard that also has a trackpad. 
Alternately, it may be that the input devices are simply indistinguishable, 
such as two keyboards made by the same manufacturer. 

The input device descriptor returned by (|android.view.InputDevice|) should 
only be used when an application needs to remember settings associated with a 
particular input device. For all other purposes when referring to a logical 
(|android.view.InputDevice|) instance at runtime use the id returned by 
(|android.view.InputDevice|) . 



    Returns: The input device descriptor. 

*android.view.InputDevice.getDevice(int)*

public static |android.view.InputDevice| getDevice(int id)

Gets information about the input device with the specified id. 


    id - The device id. 

    Returns: The input device or null if not found. 

*android.view.InputDevice.getDeviceIds()*

public static int[] getDeviceIds()

Gets the ids of all input devices in the system. 



    Returns: The input device ids. 

*android.view.InputDevice.getGeneration()*

public int getGeneration()

Gets a generation number for this input device. The generation number is 
incremented whenever the device is reconfigured and its properties may have 
changed. 



    Returns: The generation number. 

*android.view.InputDevice.getId()*

public int getId()

Gets the input device id. 

Each input device receives a unique id when it is first configured by the 
system. The input device id may change when the system is restarted or if the 
input device is disconnected, reconnected or reconfigured at any time. If you 
require a stable identifier for a device that persists across boots and 
reconfigurations, use (|android.view.InputDevice|) . 



    Returns: The input device id. 

*android.view.InputDevice.getKeyboardType()*

public int getKeyboardType()

Gets the keyboard type. 



    Returns: The keyboard type. 

*android.view.InputDevice.getKeyCharacterMap()*

public |android.view.KeyCharacterMap| getKeyCharacterMap()

Gets the key character map associated with this input device. 



    Returns: The key character map. 

*android.view.InputDevice.getMotionRange(int)*

public |android.view.InputDevice.MotionRange| getMotionRange(int axis)

Gets information about the range of values for a particular 
(|android.view.MotionEvent|) axis. If the device supports multiple sources, the 
same axis may have different meanings for each source. Returns information 
about the first axis found for any source. To obtain information about the axis 
for a specific source, use (|android.view.InputDevice|) . 


    axis - The axis constant. 

    Returns: The range of values, or null if the requested axis is not supported by the 
             device. 

*android.view.InputDevice.getMotionRange(int,int)*

public |android.view.InputDevice.MotionRange| getMotionRange(
  int axis,
  int source)

Gets information about the range of values for a particular 
(|android.view.MotionEvent|) axis used by a particular source on the device. If 
the device supports multiple sources, the same axis may have different meanings 
for each source. 


    axis - The axis constant. 
    source - The source for which to return information. 

    Returns: The range of values, or null if the requested axis is not supported by the 
             device. 

*android.view.InputDevice.getMotionRanges()*

public |java.util.List|<MotionRange> getMotionRanges()

Gets the ranges for all axes supported by the device. 



    Returns: The motion ranges for the device. 

*android.view.InputDevice.getName()*

public |java.lang.String| getName()

Gets the name of this input device. 



    Returns: The input device name. 

*android.view.InputDevice.getProductId()*

public int getProductId()

Gets the product id for the given device, if available. 

A product id uniquely identifies which product within the address space of a 
given vendor, identified by the device's vendor id. A value of 0 will be 
assigned where a product id is not available. 



    Returns: The product id of a given device 

*android.view.InputDevice.getSources()*

public int getSources()

Gets the input sources supported by this input device as a combined bitfield. 



    Returns: The supported input sources. 

*android.view.InputDevice.getVendorId()*

public int getVendorId()

Gets the vendor id for the given device, if available. 

A vendor id uniquely identifies the company who manufactured the device. A 
value of 0 will be assigned where a vendor id is not available. 



    Returns: The vendor id of a given device 

*android.view.InputDevice.getVibrator()*

public |android.os.Vibrator| getVibrator()

Gets the vibrator service associated with the device, if there is one. Even if 
the device does not have a vibrator, the result is never null. Use 
(|android.os.Vibrator|) to determine whether a vibrator is present. 

Note that the vibrator associated with the device may be different from the 
system vibrator. To obtain an instance of the system vibrator instead, call 
(|android.content.Context|) with (|android.content.Context|) as argument. 



    Returns: The vibrator service associated with the device, never null. 

*android.view.InputDevice.hasButtonUnderPad()*

public boolean hasButtonUnderPad()

Reports whether the device has a button under its touchpad 



    Returns: Whether the device has a button under its touchpad 

*android.view.InputDevice.hasKeys(int...)*

public boolean[] hasKeys(int[] keys)

Gets whether the device is capable of producing the list of keycodes. 


    keys - The list of android keycodes to check for. 

    Returns: An array of booleans where each member specifies whether the device is capable 
             of generating the keycode given by the corresponding value at the 
             same index in the keys array. 

*android.view.InputDevice.isExternal()*

public boolean isExternal()

Returns true if the device is external (connected to USB or Bluetooth or some 
other peripheral bus), otherwise it is built-in. 



    Returns: True if the device is external. 

*android.view.InputDevice.isFullKeyboard()*

public boolean isFullKeyboard()

Returns true if the device is a full keyboard. 



    Returns: True if the device is a full keyboard. 

*android.view.InputDevice.isVirtual()*

public boolean isVirtual()

Returns true if the device is a virtual input device rather than a real one, 
such as the virtual keyboard (see (|android.view.KeyCharacterMap|) ). 

Virtual input devices are provided to implement system-level functionality and 
should not be seen or configured by users. 



    Returns: True if the device is virtual. 

*android.view.InputDevice.toString()*

public |java.lang.String| toString()





*android.view.InputDevice.writeToParcel(Parcel,int)*

public void writeToParcel(
  android.os.Parcel out,
  int flags)






