*android.view.InputFilter* *InputFilter* Filters input events before they are di

public abstract class InputFilter
  extends    |IInputFilter.Stub|

|android.view.InputFilter_Description|
|android.view.InputFilter_Fields|
|android.view.InputFilter_Constructors|
|android.view.InputFilter_Methods|

================================================================================

*android.view.InputFilter_Constructors*
|android.view.InputFilter(Looper)|Creates the input filter.

*android.view.InputFilter_Methods*
|android.view.InputFilter.filterInputEvent(InputEvent,int)|Called to enqueue th
|android.view.InputFilter.install(IInputFilterHost)|Called when the input filte
|android.view.InputFilter.onInputEvent(InputEvent,int)|Called when an input eve
|android.view.InputFilter.onInstalled()|Called when the filter is installed int
|android.view.InputFilter.onUninstalled()|Called when the filter is uninstalled
|android.view.InputFilter.sendInputEvent(InputEvent,int)|Sends an input event t
|android.view.InputFilter.uninstall()|Called when the input filter is uninstall

*android.view.InputFilter_Description*

Filters input events before they are dispatched to the system. 

At most one input filter can be installed by calling (|WindowManagerService|) . 
When an input filter is installed, the system's behavior changes as follows: 

Input events are first delivered to the (|android.view.WindowManagerPolicy|) 
interception methods before queuing as usual. This critical step takes care of 
managing the power state of the device and handling wake keys. Input events are 
then asynchronously delivered to the input filter's 
(|android.view.InputFilter|) method instead of being enqueued for dispatch to 
applications as usual. The input filter only receives input events that were 
generated by an input device; the input filter will not receive input events 
that were injected into the system by other means, such as by instrumentation. 
The input filter processes and optionally transforms the stream of events. For 
example, it may transform a sequence of motion events representing an 
accessibility gesture into a different sequence of motion events, key presses 
or other system-level interactions. The input filter can send events to be 
dispatched by calling (|android.view.InputFilter|) and passing appropriate 
policy flags for the input event. 

The importance of input event consistency 

The input filter mechanism is very low-level. At a minimum, it needs to ensure 
that it sends an internally consistent stream of input events to the 
dispatcher. There are very important invariants to be maintained. 

For example, if a key down is sent, a corresponding key up should also be sent 
eventually. Likewise, for touch events, each pointer must individually go down 
with (|android.view.MotionEvent|) or (|android.view.MotionEvent|) and then 
individually go up with (|android.view.MotionEvent|) or 
(|android.view.MotionEvent|) and the sequence of pointer ids used must be 
consistent throughout the gesture. 

Sometimes a filter may wish to cancel a previously dispatched key or motion. It 
should use (|android.view.KeyEvent|) or (|android.view.MotionEvent|) 
accordingly. 

The input filter must take into account the fact that the input events coming 
from different devices or even different sources all consist of distinct 
streams of input. Use (|android.view.InputEvent|) and 
(|android.view.InputEvent|) to identify the source of the event and its 
semantics. There may be multiple sources of keys, touches and other input: they 
must be kept separate. 

Policy flags 

Input events received from the dispatcher and sent to the dispatcher have 
policy flags associated with them. Policy flags control some functions of the 
dispatcher. 

The early policy interception decides whether an input event should be 
delivered to applications or dropped. The policy indicates its decision by 
setting the (|android.view.WindowManagerPolicy|) policy flag. The input filter 
may sometimes receive events that do not have this flag set. It should take 
note of the fact that the policy intends to drop the event, clean up its state, 
and then send appropriate cancellation events to the dispatcher if needed. 

For example, suppose the input filter is processing a gesture and one of the 
touch events it receives does not have the (|android.view.WindowManagerPolicy|) 
flag set. The input filter should clear its internal state about the gesture 
and then send key or motion events to the dispatcher to cancel any keys or 
pointers that are down. 

Corollary: Events that get sent to the dispatcher should usually include the 
(|android.view.WindowManagerPolicy|) flag. Otherwise, they will be dropped! 

It may be prudent to disable automatic key repeating for synthetic key events 
by setting the (|android.view.WindowManagerPolicy|) policy flag. 



*android.view.InputFilter(Looper)*

public InputFilter(android.os.Looper looper)

Creates the input filter. 

    looper - The looper to run callbacks on. 

*android.view.InputFilter.filterInputEvent(InputEvent,int)*

public final void filterInputEvent(
  android.view.InputEvent event,
  int policyFlags)

Called to enqueue the input event for filtering. The event will be recycled 
after the input filter processes it. This method is guaranteed to be 
non-reentrant. 


    event - The input event to enqueue. 

*android.view.InputFilter.install(IInputFilterHost)*

public final void install(IInputFilterHost host)

Called when the input filter is installed. This method is guaranteed to be 
non-reentrant. 


    host - The input filter host environment. 

*android.view.InputFilter.onInputEvent(InputEvent,int)*

public void onInputEvent(
  android.view.InputEvent event,
  int policyFlags)

Called when an input event has been received from the dispatcher. 

The default implementation sends the input event back to the dispatcher, 
unchanged. 

The event will be recycled when this method returns. If you want to keep it 
around, make a copy! 


    event - The input event that was received. 
    policyFlags - The input event policy flags. 

*android.view.InputFilter.onInstalled()*

public void onInstalled()

Called when the filter is installed into the dispatch pipeline. 

This method is called before the input filter receives any input events. The 
input filter should take this opportunity to prepare itself. 



*android.view.InputFilter.onUninstalled()*

public void onUninstalled()

Called when the filter is uninstalled from the dispatch pipeline. 

This method is called after the input filter receives its last input event. The 
input filter should take this opportunity to clean up. 



*android.view.InputFilter.sendInputEvent(InputEvent,int)*

public void sendInputEvent(
  android.view.InputEvent event,
  int policyFlags)

Sends an input event to the dispatcher. 


    event - The input event to publish. 
    policyFlags - The input event policy flags. 

*android.view.InputFilter.uninstall()*

public final void uninstall()

Called when the input filter is uninstalled. This method is guaranteed to be 
non-reentrant. 




