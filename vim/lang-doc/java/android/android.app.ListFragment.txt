*android.app.ListFragment* *ListFragment* A fragment that displays a list of ite

public class ListFragment
  extends    |android.app.Fragment|

|android.app.ListFragment_Description|
|android.app.ListFragment_Fields|
|android.app.ListFragment_Constructors|
|android.app.ListFragment_Methods|

================================================================================

*android.app.ListFragment_Constructors*
|android.app.ListFragment()|

*android.app.ListFragment_Methods*
|android.app.ListFragment.getListAdapter()|Get the ListAdapter associated with 
|android.app.ListFragment.getListView()|Get the activity's list view widget.
|android.app.ListFragment.getSelectedItemId()|Get the cursor row ID of the curr
|android.app.ListFragment.getSelectedItemPosition()|Get the position of the cur
|android.app.ListFragment.onCreateView(LayoutInflater,ViewGroup,Bundle)|Provide
|android.app.ListFragment.onDestroyView()|Detach from list view.
|android.app.ListFragment.onListItemClick(ListView,View,int,long)|This method w
|android.app.ListFragment.onViewCreated(View,Bundle)|Attach to list view once t
|android.app.ListFragment.setEmptyText(CharSequence)|The default content for a 
|android.app.ListFragment.setListAdapter(ListAdapter)|Provide the cursor for th
|android.app.ListFragment.setListShown(boolean)|Control whether the list is bei
|android.app.ListFragment.setListShownNoAnimation(boolean)|Like#setListShown(bo
|android.app.ListFragment.setSelection(int)|Set the currently selected list ite

*android.app.ListFragment_Description*

A fragment that displays a list of items by binding to a data source such as an 
array or Cursor, and exposes event handlers when the user selects an item. 

ListFragment hosts a ListView(|android.widget.ListView|) object that can be 
bound to different data sources, typically either an array or a Cursor holding 
query results. Binding, screen layout, and row layout are discussed in the 
following sections. 

Screen Layout 

ListFragment has a default layout that consists of a single list view. However, 
if you desire, you can customize the fragment layout by returning your own view 
hierarchy from (|android.app.ListFragment|) . To do this, your view hierarchy 
must contain a ListView object with the id "@android:id/list" (or 
(|android.R.id|) if it's in code) 

Optionally, your view hierarchy can contain another view object of any type to 
display when the list view is empty. This "empty list" notifier must have an id 
"android:empty". Note that when an empty view is present, the list view will be 
hidden when there is no data to display. 

The following code demonstrates an (ugly) custom list layout. It has a list 
with a green background, and an alternate red "no data" message. 



<?xml version=1.0 encoding=utf-8?> <LinearLayout 
xmlns:android="http://schemas.android.com/apk/res/android" 
android:orientation=vertical android:layout_width=match_parent 
android:layout_height=match_parent android:paddingLeft=8dp 
android:paddingRight=8dp> 

<ListView android:id=@id/android:list android:layout_width=match_parent 
android:layout_height=match_parent android:background=#00FF00 
android:layout_weight=1 android:drawSelectorOnTop=false/> 

<TextView android:id=@id/android:empty android:layout_width=match_parent 
android:layout_height=match_parent android:background=#FF0000 android:text=No 
data/> </LinearLayout> 

Row Layout 

You can specify the layout of individual rows in the list. You do this by 
specifying a layout resource in the ListAdapter object hosted by the fragment 
(the ListAdapter binds the ListView to the data; more on this later). 

A ListAdapter constructor takes a parameter that specifies a layout resource 
for each row. It also has two additional parameters that let you specify which 
data field to associate with which object in the row layout resource. These two 
parameters are typically parallel arrays. 

Android provides some standard row layout resources. These are in the 
(|android.R.layout|) class, and have names such as simple_list_item_1, 
simple_list_item_2, and two_line_list_item. The following layout XML is the 
source for the resource two_line_list_item, which displays two data fields,one 
above the other, for each list row. 



<?xml version=1.0 encoding=utf-8?> <LinearLayout 
xmlns:android="http://schemas.android.com/apk/res/android" 
android:layout_width=match_parent android:layout_height=wrap_content 
android:orientation=vertical> 

<TextView android:id=@+id/text1 android:textSize=16sp android:textStyle=bold 
android:layout_width=match_parent android:layout_height=wrap_content/> 

<TextView android:id=@+id/text2 android:textSize=16sp 
android:layout_width=match_parent android:layout_height=wrap_content/> 
</LinearLayout> 

You must identify the data bound to each TextView object in this layout. The 
syntax for this is discussed in the next section. 

Binding to Data 

You bind the ListFragment's ListView object to data using a class that 
implements the ListAdapter(|android.widget.ListAdapter|) interface. Android 
provides two standard list adapters: 
SimpleAdapter(|android.widget.SimpleAdapter|) for static data (Maps), and 
SimpleCursorAdapter(|android.widget.SimpleCursorAdapter|) for Cursor query 
results. 

You must use ListFragment.setListAdapter()(|android.app.ListFragment|) to 
associate the list with an adapter. Do not directly call 
ListView.setAdapter()(|android.widget.ListView|) or else important 
initialization will be skipped. 



*android.app.ListFragment()*

public ListFragment()




*android.app.ListFragment.getListAdapter()*

public |android.widget.ListAdapter| getListAdapter()

Get the ListAdapter associated with this activity's ListView. 



*android.app.ListFragment.getListView()*

public |android.widget.ListView| getListView()

Get the activity's list view widget. 



*android.app.ListFragment.getSelectedItemId()*

public long getSelectedItemId()

Get the cursor row ID of the currently selected list item. 



*android.app.ListFragment.getSelectedItemPosition()*

public int getSelectedItemPosition()

Get the position of the currently selected list item. 



*android.app.ListFragment.onCreateView(LayoutInflater,ViewGroup,Bundle)*

public |android.view.View| onCreateView(
  android.view.LayoutInflater inflater,
  android.view.ViewGroup container,
  android.os.Bundle savedInstanceState)

Provide default implementation to return a simple list view. Subclasses can 
override to replace with their own layout. If doing so, the returned view 
hierarchy must have a ListView whose id is android.R.id.list(|android.R.id|) 
and can optionally have a sibling view id android.R.id.empty(|android.R.id|) 
that is to be shown when the list is empty. 

If you are overriding this method with your own custom content, consider 
including the standard layout (|android.R.layout|) in your layout file, so that 
you continue to retain all of the standard behavior of ListFragment. In 
particular, this is currently the only way to have the built-in indeterminant 
progress state be shown. 



*android.app.ListFragment.onDestroyView()*

public void onDestroyView()

Detach from list view. 



*android.app.ListFragment.onListItemClick(ListView,View,int,long)*

public void onListItemClick(
  android.widget.ListView l,
  android.view.View v,
  int position,
  long id)

This method will be called when an item in the list is selected. Subclasses 
should override. Subclasses can call getListView().getItemAtPosition(position) 
if they need to access the data associated with the selected item. 


    l - The ListView where the click happened 
    v - The view that was clicked within the ListView 
    position - The position of the view in the list 
    id - The row id of the item that was clicked 

*android.app.ListFragment.onViewCreated(View,Bundle)*

public void onViewCreated(
  android.view.View view,
  android.os.Bundle savedInstanceState)

Attach to list view once the view hierarchy has been created. 



*android.app.ListFragment.setEmptyText(CharSequence)*

public void setEmptyText(java.lang.CharSequence text)

The default content for a ListFragment has a TextView that can be shown when 
the list is empty. If you would like to have it shown, call this method to 
supply the text it should use. 



*android.app.ListFragment.setListAdapter(ListAdapter)*

public void setListAdapter(android.widget.ListAdapter adapter)

Provide the cursor for the list view. 



*android.app.ListFragment.setListShown(boolean)*

public void setListShown(boolean shown)

Control whether the list is being displayed. You can make it not displayed if 
you are waiting for the initial data to show in it. During this time an 
indeterminant progress indicator will be shown instead. 

Applications do not normally need to use this themselves. The default behavior 
of ListFragment is to start with the list not being shown, only showing it once 
an adapter is given with (|android.app.ListFragment|) . If the list at that 
point had not been shown, when it does get shown it will be do without the user 
ever seeing the hidden state. 


    shown - If true, the list view is shown; if false, the progress indicator. The initial 
       value is true. 

*android.app.ListFragment.setListShownNoAnimation(boolean)*

public void setListShownNoAnimation(boolean shown)

Like (|android.app.ListFragment|) , but no animation is used when transitioning 
from the previous state. 



*android.app.ListFragment.setSelection(int)*

public void setSelection(int position)

Set the currently selected list item to the specified position with the 
adapter's data 


    position - 


