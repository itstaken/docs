*android.widget.FrameLayout* *FrameLayout* FrameLayout is designed to block out 

public class FrameLayout
  extends    |android.view.ViewGroup|

|android.widget.FrameLayout_Description|
|android.widget.FrameLayout_Fields|
|android.widget.FrameLayout_Constructors|
|android.widget.FrameLayout_Methods|

================================================================================

*android.widget.FrameLayout_Fields*
|boolean_android.widget.FrameLayout.mForegroundInPadding|

*android.widget.FrameLayout_Constructors*
|android.widget.FrameLayout(Context)|
|android.widget.FrameLayout(Context,AttributeSet)|
|android.widget.FrameLayout(Context,AttributeSet,int)|

*android.widget.FrameLayout_Methods*
|android.widget.FrameLayout.checkLayoutParams(ViewGroup.LayoutParams)|
|android.widget.FrameLayout.draw(Canvas)|
|android.widget.FrameLayout.drawableStateChanged()|
|android.widget.FrameLayout.gatherTransparentRegion(Region)|
|android.widget.FrameLayout.generateDefaultLayoutParams()|Returns a set of layo
|android.widget.FrameLayout.generateLayoutParams(AttributeSet)|
|android.widget.FrameLayout.generateLayoutParams(ViewGroup.LayoutParams)|
|android.widget.FrameLayout.getConsiderGoneChildrenWhenMeasuring()|Determines w
|android.widget.FrameLayout.getForeground()|Returns the drawable used as the fo
|android.widget.FrameLayout.getForegroundGravity()|Describes how the foreground
|android.widget.FrameLayout.getMeasureAllChildren()|Determines whether all chil
|android.widget.FrameLayout.jumpDrawablesToCurrentState()|
|android.widget.FrameLayout.onInitializeAccessibilityEvent(AccessibilityEvent)|
|android.widget.FrameLayout.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)|
|android.widget.FrameLayout.onLayout(boolean,int,int,int,int)|
|android.widget.FrameLayout.onMeasure(int,int)|
|android.widget.FrameLayout.onSizeChanged(int,int,int,int)|
|android.widget.FrameLayout.setForeground(Drawable)|Supply a Drawable that is t
|android.widget.FrameLayout.setForegroundGravity(int)|Describes how the foregro
|android.widget.FrameLayout.setMeasureAllChildren(boolean)|Sets whether to cons
|android.widget.FrameLayout.shouldDelayChildPressedState()|
|android.widget.FrameLayout.verifyDrawable(Drawable)|

*android.widget.FrameLayout_Description*

FrameLayout is designed to block out an area on the screen to display a single 
item. Generally, FrameLayout should be used to hold a single child view, 
because it can be difficult to organize child views in a way that's scalable to 
different screen sizes without the children overlapping each other. You can, 
however, add multiple children to a FrameLayout and control their position 
within the FrameLayout by assigning gravity to each child, using the 
android:layout_gravity attribute. Child views are drawn in a stack, with the 
most recently added child on top. The size of the FrameLayout is the size of 
its largest child (plus padding), visible or not (if the FrameLayout's parent 
permits). Views that are (|android.view.View|) are used for sizing only if 
setConsiderGoneChildrenWhenMeasuring()(|android.widget.FrameLayout|) is set to 
true. 



*boolean_android.widget.FrameLayout.mForegroundInPadding*





*android.widget.FrameLayout(Context)*

public FrameLayout(android.content.Context context)




*android.widget.FrameLayout(Context,AttributeSet)*

public FrameLayout(
  android.content.Context context,
  android.util.AttributeSet attrs)




*android.widget.FrameLayout(Context,AttributeSet,int)*

public FrameLayout(
  android.content.Context context,
  android.util.AttributeSet attrs,
  int defStyle)




*android.widget.FrameLayout.checkLayoutParams(ViewGroup.LayoutParams)*

protected boolean checkLayoutParams(android.view.ViewGroup.LayoutParams p)





*android.widget.FrameLayout.draw(Canvas)*

public void draw(Canvas canvas)





*android.widget.FrameLayout.drawableStateChanged()*

protected void drawableStateChanged()





*android.widget.FrameLayout.gatherTransparentRegion(Region)*

public boolean gatherTransparentRegion(Region region)





*android.widget.FrameLayout.generateDefaultLayoutParams()*

protected |android.widget.FrameLayout.LayoutParams| generateDefaultLayoutParams()

Returns a set of layout parameters with a width of 
(|android.view.ViewGroup.LayoutParams|) , and a height of 
(|android.view.ViewGroup.LayoutParams|) . 



*android.widget.FrameLayout.generateLayoutParams(AttributeSet)*

public |android.widget.FrameLayout.LayoutParams| generateLayoutParams(android.util.AttributeSet attrs)





*android.widget.FrameLayout.generateLayoutParams(ViewGroup.LayoutParams)*

protected |android.view.ViewGroup.LayoutParams| generateLayoutParams(android.view.ViewGroup.LayoutParams p)





*android.widget.FrameLayout.getConsiderGoneChildrenWhenMeasuring()*

public boolean getConsiderGoneChildrenWhenMeasuring()

Determines whether all children, or just those in the VISIBLE or INVISIBLE 
state, are considered when measuring. 

    Deprecated: This method is deprecated in favor of
 {@link #getMeasureAllChildren() getMeasureAllChildren()}, which was
 renamed for consistency with
 {@link #setMeasureAllChildren(boolean) setMeasureAllChildren()}.


    Returns: Whether all children are considered when measuring. 

*android.widget.FrameLayout.getForeground()*

public Drawable getForeground()

Returns the drawable used as the foreground of this FrameLayout. The foreground 
drawable, if non-null, is always drawn on top of the children. 



    Returns: A Drawable or null if no foreground was set. 

*android.widget.FrameLayout.getForegroundGravity()*

public int getForegroundGravity()

Describes how the foreground is positioned. 



    Returns: foreground gravity. 

*android.widget.FrameLayout.getMeasureAllChildren()*

public boolean getMeasureAllChildren()

Determines whether all children, or just those in the VISIBLE or INVISIBLE 
state, are considered when measuring. 



    Returns: Whether all children are considered when measuring. 

*android.widget.FrameLayout.jumpDrawablesToCurrentState()*

public void jumpDrawablesToCurrentState()





*android.widget.FrameLayout.onInitializeAccessibilityEvent(AccessibilityEvent)*

public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent event)





*android.widget.FrameLayout.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)*

public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo info)





*android.widget.FrameLayout.onLayout(boolean,int,int,int,int)*

protected void onLayout(
  boolean changed,
  int left,
  int top,
  int right,
  int bottom)





*android.widget.FrameLayout.onMeasure(int,int)*

protected void onMeasure(
  int widthMeasureSpec,
  int heightMeasureSpec)





*android.widget.FrameLayout.onSizeChanged(int,int,int,int)*

protected void onSizeChanged(
  int w,
  int h,
  int oldw,
  int oldh)





*android.widget.FrameLayout.setForeground(Drawable)*

public void setForeground(Drawable drawable)

Supply a Drawable that is to be rendered on top of all of the child views in 
the frame layout. Any padding in the Drawable will be taken into account by 
ensuring that the children are inset to be placed inside of the padding area. 


    drawable - The Drawable to be drawn on top of the children. 

*android.widget.FrameLayout.setForegroundGravity(int)*

public void setForegroundGravity(int foregroundGravity)

Describes how the foreground is positioned. Defaults to START and TOP. 


    foregroundGravity - See {@link android.view.Gravity} 

*android.widget.FrameLayout.setMeasureAllChildren(boolean)*

public void setMeasureAllChildren(boolean measureAll)

Sets whether to consider all children, or just those in the VISIBLE or 
INVISIBLE state, when measuring. Defaults to false. 


    measureAll - true to consider children marked GONE, false otherwise. Default value is false. 

*android.widget.FrameLayout.shouldDelayChildPressedState()*

public boolean shouldDelayChildPressedState()





*android.widget.FrameLayout.verifyDrawable(Drawable)*

protected boolean verifyDrawable(Drawable who)






