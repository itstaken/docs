*android.app.ActionBar* *ActionBar* A window feature at the top of the activity 

public abstract class ActionBar
  extends    |java.lang.Object|

|android.app.ActionBar_Description|
|android.app.ActionBar_Fields|
|android.app.ActionBar_Constructors|
|android.app.ActionBar_Methods|

================================================================================

*android.app.ActionBar_Fields*
|int_android.app.ActionBar.DISPLAY_HOME_AS_UP|
|int_android.app.ActionBar.DISPLAY_SHOW_CUSTOM|
|int_android.app.ActionBar.DISPLAY_SHOW_HOME|
|int_android.app.ActionBar.DISPLAY_SHOW_TITLE|
|int_android.app.ActionBar.DISPLAY_TITLE_MULTIPLE_LINES|
|int_android.app.ActionBar.DISPLAY_USE_LOGO|
|int_android.app.ActionBar.NAVIGATION_MODE_LIST|
|int_android.app.ActionBar.NAVIGATION_MODE_STANDARD|
|int_android.app.ActionBar.NAVIGATION_MODE_TABS|

*android.app.ActionBar_Constructors*
|android.app.ActionBar()|

*android.app.ActionBar_Methods*
|android.app.ActionBar.addOnMenuVisibilityListener(ActionBar.OnMenuVisibilityListener)|
|android.app.ActionBar.addTab(ActionBar.Tab)|Add a tab for use in tabbed naviga
|android.app.ActionBar.addTab(ActionBar.Tab,boolean)|Add a tab for use in tabbe
|android.app.ActionBar.addTab(ActionBar.Tab,int)|Add a tab for use in tabbed na
|android.app.ActionBar.addTab(ActionBar.Tab,int,boolean)|Add a tab for use in t
|android.app.ActionBar.getCustomView()|
|android.app.ActionBar.getDisplayOptions()|
|android.app.ActionBar.getHeight()|Retrieve the current height of the ActionBar
|android.app.ActionBar.getNavigationItemCount()|Get the number of navigation it
|android.app.ActionBar.getNavigationMode()|Returns the current navigation mode.
|android.app.ActionBar.getSelectedNavigationIndex()|Get the position of the sel
|android.app.ActionBar.getSelectedTab()|Returns the currently selected tab if i
|android.app.ActionBar.getSubtitle()|Returns the current ActionBar subtitle in 
|android.app.ActionBar.getTabAt(int)|Returns the tab at the specified index.
|android.app.ActionBar.getTabCount()|Returns the number of tabs currently regis
|android.app.ActionBar.getThemedContext()|Returns aContextwith an appropriate t
|android.app.ActionBar.getTitle()|Returns the current ActionBar title in standa
|android.app.ActionBar.hide()|Hide the ActionBar if it is currently showing.
|android.app.ActionBar.isShowing()|
|android.app.ActionBar.isTitleTruncated()|Returns true if the Title field has b
|android.app.ActionBar.newTab()|Create and return a newTab.
|android.app.ActionBar.removeAllTabs()|Remove all tabs from the action bar and 
|android.app.ActionBar.removeOnMenuVisibilityListener(ActionBar.OnMenuVisibilityListener)|
|android.app.ActionBar.removeTab(ActionBar.Tab)|Remove a tab from the action ba
|android.app.ActionBar.removeTabAt(int)|Remove a tab from the action bar.
|android.app.ActionBar.selectTab(ActionBar.Tab)|Select the specified tab.
|android.app.ActionBar.setBackgroundDrawable(Drawable)|Set the ActionBar's back
|android.app.ActionBar.setCustomView(int)|Set the action bar into custom naviga
|android.app.ActionBar.setCustomView(View)|Set the action bar into custom navig
|android.app.ActionBar.setCustomView(View,ActionBar.LayoutParams)|Set the actio
|android.app.ActionBar.setDisplayHomeAsUpEnabled(boolean)|Set whether home shou
|android.app.ActionBar.setDisplayOptions(int)|Set display options.
|android.app.ActionBar.setDisplayOptions(int,int)|Set selected display options.
|android.app.ActionBar.setDisplayShowCustomEnabled(boolean)|Set whether a custo
|android.app.ActionBar.setDisplayShowHomeEnabled(boolean)|Set whether to includ
|android.app.ActionBar.setDisplayShowTitleEnabled(boolean)|Set whether an activ
|android.app.ActionBar.setDisplayUseLogoEnabled(boolean)|Set whether to display
|android.app.ActionBar.setHomeActionContentDescription(CharSequence)|Set an alt
|android.app.ActionBar.setHomeActionContentDescription(int)|Set an alternate de
|android.app.ActionBar.setHomeAsUpIndicator(Drawable)|Set an alternate drawable
|android.app.ActionBar.setHomeButtonEnabled(boolean)|Enable or disable the "hom
|android.app.ActionBar.setIcon(Drawable)|Set the icon to display in the 'home' 
|android.app.ActionBar.setIcon(int)|Set the icon to display in the 'home' secti
|android.app.ActionBar.setListNavigationCallbacks(SpinnerAdapter,ActionBar.OnNavigationListener)|
|android.app.ActionBar.setLogo(Drawable)|Set the logo to display in the 'home' 
|android.app.ActionBar.setLogo(int)|Set the logo to display in the 'home' secti
|android.app.ActionBar.setNavigationMode(int)|Set the current navigation mode.
|android.app.ActionBar.setSelectedNavigationItem(int)|Set the selected navigati
|android.app.ActionBar.setSplitBackgroundDrawable(Drawable)|Set the ActionBar's
|android.app.ActionBar.setStackedBackgroundDrawable(Drawable)|Set the ActionBar
|android.app.ActionBar.setSubtitle(CharSequence)|Set the action bar's subtitle.
|android.app.ActionBar.setSubtitle(int)|Set the action bar's subtitle.
|android.app.ActionBar.setTitle(CharSequence)|Set the action bar's title.
|android.app.ActionBar.setTitle(int)|Set the action bar's title.
|android.app.ActionBar.show()|Show the ActionBar if it is not currently showing

*android.app.ActionBar_Description*

A window feature at the top of the activity that may display the activity 
title, navigation modes, and other interactive items. Beginning with Android 
3.0 (API level 11), the action bar appears at the top of an activity's window 
when the activity uses the system's Holo(|android.R.style|) theme (or one of 
its descendant themes), which is the default. You may otherwise add the action 
bar by calling requestFeature(FEATURE_ACTION_BAR)(|android.view.Window|) or by 
declaring it in a custom theme with the windowActionBar(|android.R.styleable|) 
property. By default, the action bar shows the application icon on the left, 
followed by the activity title. If your activity has an options menu, you can 
make select items accessible directly from the action bar as "action items". 
You can also modify various characteristics of the action bar or remove it 
completely. From your activity, you can retrieve an instance of 
(|android.app.ActionBar|) by calling getActionBar()(|android.app.Activity|) . 
In some cases, the action bar may be overlayed by another bar that enables 
contextual actions, using an (|android.view.ActionMode|) . For example, when 
the user selects one or more items in your activity, you can enable an action 
mode that offers actions specific to the selected items, with a UI that 
temporarily replaces the action bar. Although the UI may occupy the same space, 
the (|android.view.ActionMode|) APIs are distinct and independent from those 
for (|android.app.ActionBar|) . 

Developer Guides For information about how to use the action bar, including how 
to add action items, navigation modes and more, read the <a 
href="guide/topics/ui/actionbar.html">Action Bar developer guide. 



*int_android.app.ActionBar.DISPLAY_HOME_AS_UP*

Display the 'home' element such that it appears as an 'up' affordance. e.g. 
show an arrow to the left indicating the action that will be taken. 

Set this flag if selecting the 'home' button in the action bar to return up by 
a single level in your UI rather than back to the top level or front page. 

Setting this option will implicitly enable interaction with the home/up button. 
See (|android.app.ActionBar|) . 


*int_android.app.ActionBar.DISPLAY_SHOW_CUSTOM*

Show the custom view if one has been set. 


*int_android.app.ActionBar.DISPLAY_SHOW_HOME*

Show 'home' elements in this action bar, leaving more space for other 
navigation elements. This includes logo and icon. 


*int_android.app.ActionBar.DISPLAY_SHOW_TITLE*

Show the activity title and subtitle, if present. 


*int_android.app.ActionBar.DISPLAY_TITLE_MULTIPLE_LINES*

Allow the title to wrap onto multiple lines if space is available 


*int_android.app.ActionBar.DISPLAY_USE_LOGO*

Use logo instead of icon if available. This flag will cause appropriate 
navigation modes to use a wider logo in place of the standard icon. 


*int_android.app.ActionBar.NAVIGATION_MODE_LIST*

List navigation mode. Instead of static title text this mode presents a list 
menu for navigation within the activity. e.g. this might be presented to the 
user as a dropdown list. 


*int_android.app.ActionBar.NAVIGATION_MODE_STANDARD*

Standard navigation mode. Consists of either a logo or icon and title text with 
an optional subtitle. Clicking any of these elements will dispatch 
onOptionsItemSelected to the host Activity with a MenuItem with item ID 
android.R.id.home. 


*int_android.app.ActionBar.NAVIGATION_MODE_TABS*

Tab navigation mode. Instead of static title text this mode presents a series 
of tabs for navigation within the activity. 



*android.app.ActionBar()*

public ActionBar()




*android.app.ActionBar.addOnMenuVisibilityListener(ActionBar.OnMenuVisibilityListener)*

public abstract void addOnMenuVisibilityListener(android.app.ActionBar.OnMenuVisibilityListener listener)

Add a listener that will respond to menu visibility change events. 


    listener - The new listener to add 

*android.app.ActionBar.addTab(ActionBar.Tab)*

public abstract void addTab(android.app.ActionBar.Tab tab)

Add a tab for use in tabbed navigation mode. The tab will be added at the end 
of the list. If this is the first tab to be added it will become the selected 
tab. 


    tab - Tab to add 

*android.app.ActionBar.addTab(ActionBar.Tab,boolean)*

public abstract void addTab(
  android.app.ActionBar.Tab tab,
  boolean setSelected)

Add a tab for use in tabbed navigation mode. The tab will be added at the end 
of the list. 


    tab - Tab to add 
    setSelected - True if the added tab should become the selected tab. 

*android.app.ActionBar.addTab(ActionBar.Tab,int)*

public abstract void addTab(
  android.app.ActionBar.Tab tab,
  int position)

Add a tab for use in tabbed navigation mode. The tab will be inserted at 
position. If this is the first tab to be added it will become the selected tab. 


    tab - The tab to add 
    position - The new position of the tab 

*android.app.ActionBar.addTab(ActionBar.Tab,int,boolean)*

public abstract void addTab(
  android.app.ActionBar.Tab tab,
  int position,
  boolean setSelected)

Add a tab for use in tabbed navigation mode. The tab will be insterted at 
position. 


    tab - The tab to add 
    position - The new position of the tab 
    setSelected - True if the added tab should become the selected tab. 

*android.app.ActionBar.getCustomView()*

public abstract |android.view.View| getCustomView()





    Returns: The current custom view. 

*android.app.ActionBar.getDisplayOptions()*

public abstract int getDisplayOptions()





    Returns: The current set of display options. 

*android.app.ActionBar.getHeight()*

public abstract int getHeight()

Retrieve the current height of the ActionBar. 



    Returns: The ActionBar's height 

*android.app.ActionBar.getNavigationItemCount()*

public abstract int getNavigationItemCount()

Get the number of navigation items present in the current navigation mode. 



    Returns: Number of navigation items. 

*android.app.ActionBar.getNavigationMode()*

public abstract int getNavigationMode()

Returns the current navigation mode. The result will be one of: 

(|android.app.ActionBar|) (|android.app.ActionBar|) (|android.app.ActionBar|) 



    Returns: The current navigation mode. 

*android.app.ActionBar.getSelectedNavigationIndex()*

public abstract int getSelectedNavigationIndex()

Get the position of the selected navigation item in list or tabbed navigation 
modes. 



    Returns: Position of the selected item. 

*android.app.ActionBar.getSelectedTab()*

public abstract |android.app.ActionBar.Tab| getSelectedTab()

Returns the currently selected tab if in tabbed navigation mode and there is at 
least one tab present. 



    Returns: The currently selected tab or null 

*android.app.ActionBar.getSubtitle()*

public abstract |java.lang.CharSequence| getSubtitle()

Returns the current ActionBar subtitle in standard mode. Returns null if 
(|android.app.ActionBar|) would not return (|android.app.ActionBar|) . 



    Returns: The current ActionBar subtitle or null. 

*android.app.ActionBar.getTabAt(int)*

public abstract |android.app.ActionBar.Tab| getTabAt(int index)

Returns the tab at the specified index. 


    index - Index value in the range 0-get 

    Returns: 

*android.app.ActionBar.getTabCount()*

public abstract int getTabCount()

Returns the number of tabs currently registered with the action bar. 



    Returns: 

*android.app.ActionBar.getThemedContext()*

public |android.content.Context| getThemedContext()

Returns a (|android.content.Context|) with an appropriate theme for creating 
views that will appear in the action bar. If you are inflating or instantiating 
custom views that will appear in an action bar, you should use the Context 
returned by this method. (This includes adapters used for list navigation 
mode.) This will ensure that views contrast properly against the action bar. 



    Returns: A themed Context for creating views 

*android.app.ActionBar.getTitle()*

public abstract |java.lang.CharSequence| getTitle()

Returns the current ActionBar title in standard mode. Returns null if 
(|android.app.ActionBar|) would not return (|android.app.ActionBar|) . 



    Returns: The current ActionBar title or null. 

*android.app.ActionBar.hide()*

public abstract void hide()

Hide the ActionBar if it is currently showing. If the window hosting the 
ActionBar does not have the feature (|android.view.Window|) it will resize 
application content to fit the new space available. 

Instead of calling this function directly, you can also cause an ActionBar 
using the overlay feature to hide through 
View.SYSTEM_UI_FLAG_FULLSCREEN(|android.view.View|) . Hiding the ActionBar 
through this system UI flag allows you to more seamlessly hide it in 
conjunction with other screen decorations. 



*android.app.ActionBar.isShowing()*

public abstract boolean isShowing()





    Returns: true if the ActionBar is showing, false otherwise. 

*android.app.ActionBar.isTitleTruncated()*

public boolean isTitleTruncated()

Returns true if the Title field has been truncated during layout for lack of 
available space. 



    Returns: true if the Title field has been truncated 

*android.app.ActionBar.newTab()*

public abstract |android.app.ActionBar.Tab| newTab()

Create and return a new (|android.app.ActionBar.Tab|) . This tab will not be 
included in the action bar until it is added. 

Very often tabs will be used to switch between (|android.app.Fragment|) 
objects. Here is a typical implementation of such 
tabs:development/samples/ApiDemos/src/com/example/android/apis/app/FragmentTabs.java
complete 



    Returns: 

*android.app.ActionBar.removeAllTabs()*

public abstract void removeAllTabs()

Remove all tabs from the action bar and deselect the current tab. 



*android.app.ActionBar.removeOnMenuVisibilityListener(ActionBar.OnMenuVisibilityListener)*

public abstract void removeOnMenuVisibilityListener(android.app.ActionBar.OnMenuVisibilityListener listener)

Remove a menu visibility listener. This listener will no longer receive menu 
visibility change events. 


    listener - A listener to remove that was previously added 

*android.app.ActionBar.removeTab(ActionBar.Tab)*

public abstract void removeTab(android.app.ActionBar.Tab tab)

Remove a tab from the action bar. If the removed tab was selected it will be 
deselected and another tab will be selected if present. 


    tab - The tab to remove 

*android.app.ActionBar.removeTabAt(int)*

public abstract void removeTabAt(int position)

Remove a tab from the action bar. If the removed tab was selected it will be 
deselected and another tab will be selected if present. 


    position - Position of the tab to remove 

*android.app.ActionBar.selectTab(ActionBar.Tab)*

public abstract void selectTab(android.app.ActionBar.Tab tab)

Select the specified tab. If it is not a child of this action bar it will be 
added. 

Note: If you want to select by index, use (|android.app.ActionBar|) . 


    tab - Tab to select 

*android.app.ActionBar.setBackgroundDrawable(Drawable)*

public abstract void setBackgroundDrawable(Drawable d)

Set the ActionBar's background. This will be used for the primary action bar. 


    d - Background drawable 

*android.app.ActionBar.setCustomView(int)*

public abstract void setCustomView(int resId)

Set the action bar into custom navigation mode, supplying a view for custom 
navigation. 

Custom navigation views appear between the application icon and any action 
buttons and may use any space available there. Common use cases for custom 
navigation views might include an auto-suggesting address bar for a browser or 
other navigation mechanisms that do not translate well to provided navigation 
modes. 

The display option (|android.app.ActionBar|) must be set for the custom view to 
be displayed. 


    resId - Resource ID of a layout to inflate into the ActionBar. 

*android.app.ActionBar.setCustomView(View)*

public abstract void setCustomView(android.view.View view)

Set the action bar into custom navigation mode, supplying a view for custom 
navigation. 

Custom navigation views appear between the application icon and any action 
buttons and may use any space available there. Common use cases for custom 
navigation views might include an auto-suggesting address bar for a browser or 
other navigation mechanisms that do not translate well to provided navigation 
modes. 


    view - Custom navigation view to place in the ActionBar. 

*android.app.ActionBar.setCustomView(View,ActionBar.LayoutParams)*

public abstract void setCustomView(
  android.view.View view,
  android.app.ActionBar.LayoutParams layoutParams)

Set the action bar into custom navigation mode, supplying a view for custom 
navigation. 

Custom navigation views appear between the application icon and any action 
buttons and may use any space available there. Common use cases for custom 
navigation views might include an auto-suggesting address bar for a browser or 
other navigation mechanisms that do not translate well to provided navigation 
modes. 

The display option (|android.app.ActionBar|) must be set for the custom view to 
be displayed. 


    view - Custom navigation view to place in the ActionBar. 
    layoutParams - How this custom view should layout in the bar. 

*android.app.ActionBar.setDisplayHomeAsUpEnabled(boolean)*

public abstract void setDisplayHomeAsUpEnabled(boolean showHomeAsUp)

Set whether home should be displayed as an "up" affordance. Set this to true if 
selecting "home" returns up by a single level in your UI rather than back to 
the top level or front page. 

To set several display options at once, see the setDisplayOptions methods. 


    showHomeAsUp - true to show the user that selecting home will return one level up rather than 
       to the top level of the app. 

*android.app.ActionBar.setDisplayOptions(int)*

public abstract void setDisplayOptions(int options)

Set display options. This changes all display option bits at once. To change a 
limited subset of display options, see (|android.app.ActionBar|) . 


    options - A combination of the bits defined by the DISPLAY_ constants defined in 
       ActionBar. 

*android.app.ActionBar.setDisplayOptions(int,int)*

public abstract void setDisplayOptions(
  int options,
  int mask)

Set selected display options. Only the options specified by mask will be 
changed. To change all display option bits at once, see 
(|android.app.ActionBar|) . 

Example: setDisplayOptions(0, DISPLAY_SHOW_HOME) will disable the 
(|android.app.ActionBar|) option. setDisplayOptions(DISPLAY_SHOW_HOME, 
DISPLAY_SHOW_HOME | DISPLAY_USE_LOGO) will enable (|android.app.ActionBar|) and 
disable (|android.app.ActionBar|) . 


    options - A combination of the bits defined by the DISPLAY_ constants defined in 
       ActionBar. 
    mask - A bit mask declaring which display options should be changed. 

*android.app.ActionBar.setDisplayShowCustomEnabled(boolean)*

public abstract void setDisplayShowCustomEnabled(boolean showCustom)

Set whether a custom view should be displayed, if set. 

To set several display options at once, see the setDisplayOptions methods. 


    showCustom - true if the currently set custom view should be displayed, false otherwise. 

*android.app.ActionBar.setDisplayShowHomeEnabled(boolean)*

public abstract void setDisplayShowHomeEnabled(boolean showHome)

Set whether to include the application home affordance in the action bar. Home 
is presented as either an activity icon or logo. 

To set several display options at once, see the setDisplayOptions methods. 


    showHome - true to show home, false otherwise. 

*android.app.ActionBar.setDisplayShowTitleEnabled(boolean)*

public abstract void setDisplayShowTitleEnabled(boolean showTitle)

Set whether an activity title/subtitle should be displayed. 

To set several display options at once, see the setDisplayOptions methods. 


    showTitle - true to display a title/subtitle if present. 

*android.app.ActionBar.setDisplayUseLogoEnabled(boolean)*

public abstract void setDisplayUseLogoEnabled(boolean useLogo)

Set whether to display the activity logo rather than the activity icon. A logo 
is often a wider, more detailed image. 

To set several display options at once, see the setDisplayOptions methods. 


    useLogo - true to use the activity logo, false to use the activity icon. 

*android.app.ActionBar.setHomeActionContentDescription(CharSequence)*

public void setHomeActionContentDescription(java.lang.CharSequence description)

Set an alternate description for the Home/Up action, when enabled. 

This description is commonly used for accessibility/screen readers when the 
Home action is enabled. (See (|android.app.ActionBar|) .) Examples of this are, 
"Navigate Home" or "Navigate Up" depending on the (|android.app.ActionBar|) 
display option. If you have changed the home-as-up indicator using 
(|android.app.ActionBar|) to indicate more specific functionality such as a 
sliding drawer, you should also set this to accurately describe the action. 

Setting this to null will use the system default description. 


    description - New description for the Home action when enabled 

*android.app.ActionBar.setHomeActionContentDescription(int)*

public void setHomeActionContentDescription(int resId)

Set an alternate description for the Home/Up action, when enabled. 

This description is commonly used for accessibility/screen readers when the 
Home action is enabled. (See (|android.app.ActionBar|) .) Examples of this are, 
"Navigate Home" or "Navigate Up" depending on the (|android.app.ActionBar|) 
display option. If you have changed the home-as-up indicator using 
(|android.app.ActionBar|) to indicate more specific functionality such as a 
sliding drawer, you should also set this to accurately describe the action. 

Setting this to 0 will use the system default description. 


    resId - Resource ID of a string to use as the new description for the Home action when 
       enabled 

*android.app.ActionBar.setHomeAsUpIndicator(Drawable)*

public void setHomeAsUpIndicator(Drawable indicator)

Set an alternate drawable to display next to the icon/logo/title when 
(|android.app.ActionBar|) is enabled. This can be useful if you are using this 
mode to display an alternate selection for up navigation, such as a sliding 
drawer. 

If you pass null to this method, the default drawable from the theme will be 
used. 

If you implement alternate or intermediate behavior around Up, you should also 
call setHomeActionContentDescription()(|android.app.ActionBar|) to provide a 
correct description of the action for accessibility support. 


    indicator - A drawable to use for the up indicator, or null to use the theme's default 

*android.app.ActionBar.setHomeButtonEnabled(boolean)*

public void setHomeButtonEnabled(boolean enabled)

Enable or disable the "home" button in the corner of the action bar. (Note that 
this is the application home/up affordance on the action bar, not the 
systemwide home button.) 

This defaults to true for packages targeting < API 14. For packages targeting 
API 14 or greater, the application should call this method to enable 
interaction with the home/up affordance. 

Setting the (|android.app.ActionBar|) display option will automatically enable 
the home button. 


    enabled - true to enable the home button, false to disable the home button. 

*android.app.ActionBar.setIcon(Drawable)*

public abstract void setIcon(Drawable icon)

Set the icon to display in the 'home' section of the action bar. The action bar 
will use an icon specified by its style or the activity icon by default. 

Whether the home section shows an icon or logo is controlled by the display 
option (|android.app.ActionBar|) . 


    icon - Drawable to show as an icon. 

*android.app.ActionBar.setIcon(int)*

public abstract void setIcon(int resId)

Set the icon to display in the 'home' section of the action bar. The action bar 
will use an icon specified by its style or the activity icon by default. 

Whether the home section shows an icon or logo is controlled by the display 
option (|android.app.ActionBar|) . 


    resId - Resource ID of a drawable to show as an icon. 

*android.app.ActionBar.setListNavigationCallbacks(SpinnerAdapter,ActionBar.OnNavigationListener)*

public abstract void setListNavigationCallbacks(
  android.widget.SpinnerAdapter adapter,
  android.app.ActionBar.OnNavigationListener callback)

Set the adapter and navigation callback for list navigation mode. 

The supplied adapter will provide views for the expanded list as well as the 
currently selected item. (These may be displayed differently.) 

The supplied OnNavigationListener will alert the application when the user 
changes the current list selection. 


    adapter - An adapter that will provide views both to display the current navigation 
       selection and populate views within the dropdown navigation menu. 
    callback - An OnNavigationListener that will receive events when the user selects a 
       navigation item. 

*android.app.ActionBar.setLogo(Drawable)*

public abstract void setLogo(Drawable logo)

Set the logo to display in the 'home' section of the action bar. The action bar 
will use a logo specified by its style or the activity logo by default. 

Whether the home section shows an icon or logo is controlled by the display 
option (|android.app.ActionBar|) . 


    logo - Drawable to show as a logo. 

*android.app.ActionBar.setLogo(int)*

public abstract void setLogo(int resId)

Set the logo to display in the 'home' section of the action bar. The action bar 
will use a logo specified by its style or the activity logo by default. 

Whether the home section shows an icon or logo is controlled by the display 
option (|android.app.ActionBar|) . 


    resId - Resource ID of a drawable to show as a logo. 

*android.app.ActionBar.setNavigationMode(int)*

public abstract void setNavigationMode(int mode)

Set the current navigation mode. 


    mode - The new mode to set. 

*android.app.ActionBar.setSelectedNavigationItem(int)*

public abstract void setSelectedNavigationItem(int position)

Set the selected navigation item in list or tabbed navigation modes. 


    position - Position of the item to select. 

*android.app.ActionBar.setSplitBackgroundDrawable(Drawable)*

public void setSplitBackgroundDrawable(Drawable d)

Set the ActionBar's split background. This will appear in the split action bar 
containing menu-provided action buttons on some devices and configurations. You 
can enable split action bar with (|android.R.attr|) 


    d - Background drawable for the split bar 

*android.app.ActionBar.setStackedBackgroundDrawable(Drawable)*

public void setStackedBackgroundDrawable(Drawable d)

Set the ActionBar's stacked background. This will appear in the second 
row/stacked bar on some devices and configurations. 


    d - Background drawable for the stacked row 

*android.app.ActionBar.setSubtitle(CharSequence)*

public abstract void setSubtitle(java.lang.CharSequence subtitle)

Set the action bar's subtitle. This will only be displayed if 
(|android.app.ActionBar|) is set. Set to null to disable the subtitle entirely. 


    subtitle - Subtitle to set 

*android.app.ActionBar.setSubtitle(int)*

public abstract void setSubtitle(int resId)

Set the action bar's subtitle. This will only be displayed if 
(|android.app.ActionBar|) is set. 


    resId - Resource ID of subtitle string to set 

*android.app.ActionBar.setTitle(CharSequence)*

public abstract void setTitle(java.lang.CharSequence title)

Set the action bar's title. This will only be displayed if 
(|android.app.ActionBar|) is set. 


    title - Title to set 

*android.app.ActionBar.setTitle(int)*

public abstract void setTitle(int resId)

Set the action bar's title. This will only be displayed if 
(|android.app.ActionBar|) is set. 


    resId - Resource ID of title string to set 

*android.app.ActionBar.show()*

public abstract void show()

Show the ActionBar if it is not currently showing. If the window hosting the 
ActionBar does not have the feature (|android.view.Window|) it will resize 
application content to fit the new space available. 

If you are hiding the ActionBar through 
View.SYSTEM_UI_FLAG_FULLSCREEN(|android.view.View|) , you should not call this 
function directly. 




