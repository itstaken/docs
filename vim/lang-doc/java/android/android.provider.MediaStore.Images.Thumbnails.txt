*android.provider.MediaStore.Images.Thumbnails* *MediaStore.Images.Thumbnails* T

public static class MediaStore.Images.Thumbnails
  extends    |java.lang.Object|
  implements |android.provider.BaseColumns|

|android.provider.MediaStore.Images.Thumbnails_Description|
|android.provider.MediaStore.Images.Thumbnails_Fields|
|android.provider.MediaStore.Images.Thumbnails_Constructors|
|android.provider.MediaStore.Images.Thumbnails_Methods|

================================================================================

*android.provider.MediaStore.Images.Thumbnails_Fields*
|java.lang.String_android.provider.MediaStore.Images.Thumbnails.DATA|
|java.lang.String_android.provider.MediaStore.Images.Thumbnails.DEFAULT_SORT_ORDER|
|android.net.Uri_android.provider.MediaStore.Images.Thumbnails.EXTERNAL_CONTENT_URI|
|int_android.provider.MediaStore.Images.Thumbnails.FULL_SCREEN_KIND|
|java.lang.String_android.provider.MediaStore.Images.Thumbnails.HEIGHT|
|java.lang.String_android.provider.MediaStore.Images.Thumbnails.IMAGE_ID|
|android.net.Uri_android.provider.MediaStore.Images.Thumbnails.INTERNAL_CONTENT_URI|
|java.lang.String_android.provider.MediaStore.Images.Thumbnails.KIND|
|int_android.provider.MediaStore.Images.Thumbnails.MICRO_KIND|
|int_android.provider.MediaStore.Images.Thumbnails.MINI_KIND|
|java.lang.String_android.provider.MediaStore.Images.Thumbnails.THUMB_DATA|
|java.lang.String_android.provider.MediaStore.Images.Thumbnails.WIDTH|

*android.provider.MediaStore.Images.Thumbnails_Constructors*
|android.provider.MediaStore.Images.Thumbnails()|

*android.provider.MediaStore.Images.Thumbnails_Methods*
|android.provider.MediaStore.Images.Thumbnails.cancelThumbnailRequest(ContentResolver,long)|
|android.provider.MediaStore.Images.Thumbnails.cancelThumbnailRequest(ContentResolver,long,long)|
|android.provider.MediaStore.Images.Thumbnails.getContentUri(String)|Get the co
|android.provider.MediaStore.Images.Thumbnails.getThumbnail(ContentResolver,long,int,BitmapFactory.Options)|
|android.provider.MediaStore.Images.Thumbnails.getThumbnail(ContentResolver,long,long,int,BitmapFactory.Options)|
|android.provider.MediaStore.Images.Thumbnails.query(ContentResolver,Uri,String[])|
|android.provider.MediaStore.Images.Thumbnails.queryMiniThumbnail(ContentResolver,long,int,String[])|
|android.provider.MediaStore.Images.Thumbnails.queryMiniThumbnails(ContentResolver,Uri,int,String[])|

*android.provider.MediaStore.Images.Thumbnails_Description*

This class allows developers to query and get two kinds of thumbnails: 
MINI_KIND: 512 x 384 thumbnail MICRO_KIND: 96 x 96 thumbnail 



*java.lang.String_android.provider.MediaStore.Images.Thumbnails.DATA*

The data stream for the thumbnail Type: DATA STREAM 


*java.lang.String_android.provider.MediaStore.Images.Thumbnails.DEFAULT_SORT_ORDER*

The default sort order for this table 


*android.net.Uri_android.provider.MediaStore.Images.Thumbnails.EXTERNAL_CONTENT_URI*

The content:// style URI for the "primary" external storage volume. 


*int_android.provider.MediaStore.Images.Thumbnails.FULL_SCREEN_KIND*




*java.lang.String_android.provider.MediaStore.Images.Thumbnails.HEIGHT*

The height of the thumbnail Type: INTEGER (long) 


*java.lang.String_android.provider.MediaStore.Images.Thumbnails.IMAGE_ID*

The original image for the thumbnal Type: INTEGER (ID from Images table) 


*android.net.Uri_android.provider.MediaStore.Images.Thumbnails.INTERNAL_CONTENT_URI*

The content:// style URI for the internal storage. 


*java.lang.String_android.provider.MediaStore.Images.Thumbnails.KIND*

The kind of the thumbnail Type: INTEGER (One of the values below) 


*int_android.provider.MediaStore.Images.Thumbnails.MICRO_KIND*




*int_android.provider.MediaStore.Images.Thumbnails.MINI_KIND*




*java.lang.String_android.provider.MediaStore.Images.Thumbnails.THUMB_DATA*

The blob raw data of thumbnail Type: DATA STREAM 


*java.lang.String_android.provider.MediaStore.Images.Thumbnails.WIDTH*

The width of the thumbnal Type: INTEGER (long) 



*android.provider.MediaStore.Images.Thumbnails()*

public MediaStore.Images.Thumbnails()




*android.provider.MediaStore.Images.Thumbnails.cancelThumbnailRequest(ContentResolver,long)*

public static void cancelThumbnailRequest(
  android.content.ContentResolver cr,
  long origId)

This method cancels the thumbnail request so clients waiting for getThumbnail 
will be interrupted and return immediately. Only the original process which 
made the getThumbnail requests can cancel their own requests. 


    cr - ContentResolver 
    origId - original image id 

*android.provider.MediaStore.Images.Thumbnails.cancelThumbnailRequest(ContentResolver,long,long)*

public static void cancelThumbnailRequest(
  android.content.ContentResolver cr,
  long origId,
  long groupId)

This method cancels the thumbnail request so clients waiting for getThumbnail 
will be interrupted and return immediately. Only the original process which 
made the getThumbnail requests can cancel their own requests. 


    cr - ContentResolver 
    origId - original image id 
    groupId - the same groupId used in getThumbnail. 

*android.provider.MediaStore.Images.Thumbnails.getContentUri(String)*

public static |android.net.Uri| getContentUri(java.lang.String volumeName)

Get the content:// style URI for the image media table on the given volume. 


    volumeName - the name of the volume to get the URI for 

    Returns: the URI to the image media table on the given volume 

*android.provider.MediaStore.Images.Thumbnails.getThumbnail(ContentResolver,long,int,BitmapFactory.Options)*

public static Bitmap getThumbnail(
  android.content.ContentResolver cr,
  long origId,
  int kind,
  BitmapFactory.Options options)

This method checks if the thumbnails of the specified image (origId) has been 
created. It will be blocked until the thumbnails are generated. 


    cr - ContentResolver used to dispatch queries to MediaProvider. 
    origId - Original image id associated with thumbnail of interest. 
    kind - The type of thumbnail to fetch. Should be either MINI_KIND or MICRO_KIND. 
    options - this is only used for MINI_KIND when decoding the Bitmap 

    Returns: A Bitmap instance. It could be null if the original image associated with 
             origId doesn't exist or memory is not enough. 

*android.provider.MediaStore.Images.Thumbnails.getThumbnail(ContentResolver,long,long,int,BitmapFactory.Options)*

public static Bitmap getThumbnail(
  android.content.ContentResolver cr,
  long origId,
  long groupId,
  int kind,
  BitmapFactory.Options options)

This method checks if the thumbnails of the specified image (origId) has been 
created. It will be blocked until the thumbnails are generated. 


    cr - ContentResolver used to dispatch queries to MediaProvider. 
    origId - Original image id associated with thumbnail of interest. 
    groupId - the id of group to which this request belongs 
    kind - The type of thumbnail to fetch. Should be either MINI_KIND or MICRO_KIND. 
    options - this is only used for MINI_KIND when decoding the Bitmap 

    Returns: A Bitmap instance. It could be null if the original image associated with 
             origId doesn't exist or memory is not enough. 

*android.provider.MediaStore.Images.Thumbnails.query(ContentResolver,Uri,String[])*

public static final |android.database.Cursor| query(
  android.content.ContentResolver cr,
  android.net.Uri uri,
  java.lang.String[] projection)





*android.provider.MediaStore.Images.Thumbnails.queryMiniThumbnail(ContentResolver,long,int,String[])*

public static final |android.database.Cursor| queryMiniThumbnail(
  android.content.ContentResolver cr,
  long origId,
  int kind,
  java.lang.String[] projection)





*android.provider.MediaStore.Images.Thumbnails.queryMiniThumbnails(ContentResolver,Uri,int,String[])*

public static final |android.database.Cursor| queryMiniThumbnails(
  android.content.ContentResolver cr,
  android.net.Uri uri,
  int kind,
  java.lang.String[] projection)






