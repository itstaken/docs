*android.view.WindowManagerPolicy.WindowManagerFuncs* *WindowManagerPolicy.WindowManagerFuncs* 

public static interface interface WindowManagerPolicy.WindowManagerFuncs


|android.view.WindowManagerPolicy.WindowManagerFuncs_Description|
|android.view.WindowManagerPolicy.WindowManagerFuncs_Fields|
|android.view.WindowManagerPolicy.WindowManagerFuncs_Constructors|
|android.view.WindowManagerPolicy.WindowManagerFuncs_Methods|

================================================================================

*android.view.WindowManagerPolicy.WindowManagerFuncs_Fields*
|int_android.view.WindowManagerPolicy.WindowManagerFuncs.LID_ABSENT|
|int_android.view.WindowManagerPolicy.WindowManagerFuncs.LID_CLOSED|
|int_android.view.WindowManagerPolicy.WindowManagerFuncs.LID_OPEN|

*android.view.WindowManagerPolicy.WindowManagerFuncs_Methods*
|android.view.WindowManagerPolicy.WindowManagerFuncs.addFakeWindow(Looper,InputEventReceiver.Factory,String,int,int,int,boolean,boolean,boolean)|
|android.view.WindowManagerPolicy.WindowManagerFuncs.getLidState()|Returns a co
|android.view.WindowManagerPolicy.WindowManagerFuncs.getWindowManagerLock()|Ret
|android.view.WindowManagerPolicy.WindowManagerFuncs.rebootSafeMode(boolean)|
|android.view.WindowManagerPolicy.WindowManagerFuncs.reevaluateStatusBarVisibility()|
|android.view.WindowManagerPolicy.WindowManagerFuncs.registerPointerEventListener(WindowManagerPolicy.PointerEventListener)|
|android.view.WindowManagerPolicy.WindowManagerFuncs.shutdown(boolean)|
|android.view.WindowManagerPolicy.WindowManagerFuncs.switchKeyboardLayout(int,int)|
|android.view.WindowManagerPolicy.WindowManagerFuncs.unregisterPointerEventListener(WindowManagerPolicy.PointerEventListener)|

*android.view.WindowManagerPolicy.WindowManagerFuncs_Description*

Interface for calling back in to the window manager that is private between it 
and the policy. 



*int_android.view.WindowManagerPolicy.WindowManagerFuncs.LID_ABSENT*




*int_android.view.WindowManagerPolicy.WindowManagerFuncs.LID_CLOSED*




*int_android.view.WindowManagerPolicy.WindowManagerFuncs.LID_OPEN*





*android.view.WindowManagerPolicy.WindowManagerFuncs.addFakeWindow(Looper,InputEventReceiver.Factory,String,int,int,int,boolean,boolean,boolean)*

public |android.view.WindowManagerPolicy.FakeWindow| addFakeWindow(
  android.os.Looper looper,
  android.view.InputEventReceiver.Factory inputEventReceiverFactory,
  java.lang.String name,
  int windowType,
  int layoutParamsFlags,
  int layoutParamsPrivateFlags,
  boolean canReceiveKeys,
  boolean hasFocus,
  boolean touchFullscreen)

Add a fake window to the window manager. This window sits at the top of the 
other windows and consumes events. 



*android.view.WindowManagerPolicy.WindowManagerFuncs.getLidState()*

public int getLidState()

Returns a code that describes the current state of the lid switch. 



*android.view.WindowManagerPolicy.WindowManagerFuncs.getWindowManagerLock()*

public |java.lang.Object| getWindowManagerLock()

Return the window manager lock needed to correctly call "Lw" methods. 



*android.view.WindowManagerPolicy.WindowManagerFuncs.rebootSafeMode(boolean)*

public void rebootSafeMode(boolean confirm)





*android.view.WindowManagerPolicy.WindowManagerFuncs.reevaluateStatusBarVisibility()*

public void reevaluateStatusBarVisibility()

Ask the window manager to re-evaluate the system UI flags. 



*android.view.WindowManagerPolicy.WindowManagerFuncs.registerPointerEventListener(WindowManagerPolicy.PointerEventListener)*

public void registerPointerEventListener(android.view.WindowManagerPolicy.PointerEventListener listener)

Register a system listener for touch events 



*android.view.WindowManagerPolicy.WindowManagerFuncs.shutdown(boolean)*

public void shutdown(boolean confirm)





*android.view.WindowManagerPolicy.WindowManagerFuncs.switchKeyboardLayout(int,int)*

public void switchKeyboardLayout(
  int deviceId,
  int direction)

Switch the keyboard layout for the given device. Direction should be +1 or -1 
to go to the next or previous keyboard layout. 



*android.view.WindowManagerPolicy.WindowManagerFuncs.unregisterPointerEventListener(WindowManagerPolicy.PointerEventListener)*

public void unregisterPointerEventListener(android.view.WindowManagerPolicy.PointerEventListener listener)

Unregister a system listener for touch events 




