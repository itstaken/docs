*android.app.AlertDialog.Builder* *AlertDialog.Builder* 

public static class AlertDialog.Builder
  extends    |java.lang.Object|

|android.app.AlertDialog.Builder_Description|
|android.app.AlertDialog.Builder_Fields|
|android.app.AlertDialog.Builder_Constructors|
|android.app.AlertDialog.Builder_Methods|

================================================================================

*android.app.AlertDialog.Builder_Constructors*
|android.app.AlertDialog.Builder(Context)|Constructor using a context for this 
|android.app.AlertDialog.Builder(Context,int)|Constructor using a context and t

*android.app.AlertDialog.Builder_Methods*
|android.app.AlertDialog.Builder.create()|Creates aAlertDialogwith the argument
|android.app.AlertDialog.Builder.getContext()|Returns aContextwith the appropri
|android.app.AlertDialog.Builder.setAdapter(ListAdapter,DialogInterface.OnClickListener)|
|android.app.AlertDialog.Builder.setCancelable(boolean)|Sets whether the dialog
|android.app.AlertDialog.Builder.setCursor(Cursor,DialogInterface.OnClickListener,String)|
|android.app.AlertDialog.Builder.setCustomTitle(View)|Set the title using the c
|android.app.AlertDialog.Builder.setIcon(Drawable)|Set theDrawableto be used in
|android.app.AlertDialog.Builder.setIcon(int)|Set the resource id of theDrawabl
|android.app.AlertDialog.Builder.setIconAttribute(int)|Set an icon as supplied 
|android.app.AlertDialog.Builder.setInverseBackgroundForced(boolean)|Sets the D
|android.app.AlertDialog.Builder.setItems(CharSequence[],DialogInterface.OnClickListener)|
|android.app.AlertDialog.Builder.setItems(int,DialogInterface.OnClickListener)|
|android.app.AlertDialog.Builder.setMessage(CharSequence)|Set the message to di
|android.app.AlertDialog.Builder.setMessage(int)|Set the message to display usi
|android.app.AlertDialog.Builder.setMultiChoiceItems(CharSequence[],boolean[],DialogInterface.OnMultiChoiceClickListener)|
|android.app.AlertDialog.Builder.setMultiChoiceItems(Cursor,String,String,DialogInterface.OnMultiChoiceClickListener)|
|android.app.AlertDialog.Builder.setMultiChoiceItems(int,boolean[],DialogInterface.OnMultiChoiceClickListener)|
|android.app.AlertDialog.Builder.setNegativeButton(CharSequence,DialogInterface.OnClickListener)|
|android.app.AlertDialog.Builder.setNegativeButton(int,DialogInterface.OnClickListener)|
|android.app.AlertDialog.Builder.setNeutralButton(CharSequence,DialogInterface.OnClickListener)|
|android.app.AlertDialog.Builder.setNeutralButton(int,DialogInterface.OnClickListener)|
|android.app.AlertDialog.Builder.setOnCancelListener(DialogInterface.OnCancelListener)|
|android.app.AlertDialog.Builder.setOnDismissListener(DialogInterface.OnDismissListener)|
|android.app.AlertDialog.Builder.setOnItemSelectedListener(AdapterView.OnItemSelectedListener)|
|android.app.AlertDialog.Builder.setOnKeyListener(DialogInterface.OnKeyListener)|
|android.app.AlertDialog.Builder.setPositiveButton(CharSequence,DialogInterface.OnClickListener)|
|android.app.AlertDialog.Builder.setPositiveButton(int,DialogInterface.OnClickListener)|
|android.app.AlertDialog.Builder.setRecycleOnMeasureEnabled(boolean)|
|android.app.AlertDialog.Builder.setSingleChoiceItems(CharSequence[],int,DialogInterface.OnClickListener)|
|android.app.AlertDialog.Builder.setSingleChoiceItems(Cursor,int,String,DialogInterface.OnClickListener)|
|android.app.AlertDialog.Builder.setSingleChoiceItems(int,int,DialogInterface.OnClickListener)|
|android.app.AlertDialog.Builder.setSingleChoiceItems(ListAdapter,int,DialogInterface.OnClickListener)|
|android.app.AlertDialog.Builder.setTitle(CharSequence)|Set the title displayed
|android.app.AlertDialog.Builder.setTitle(int)|Set the title using the given re
|android.app.AlertDialog.Builder.setView(View)|Set a custom view to be the cont
|android.app.AlertDialog.Builder.setView(View,int,int,int,int)|Set a custom vie
|android.app.AlertDialog.Builder.show()|Creates aAlertDialogwith the arguments 

*android.app.AlertDialog.Builder_Description*





*android.app.AlertDialog.Builder(Context)*

public AlertDialog.Builder(android.content.Context context)

Constructor using a context for this builder and the 
(|android.app.AlertDialog|) it creates. 


*android.app.AlertDialog.Builder(Context,int)*

public AlertDialog.Builder(
  android.content.Context context,
  int theme)

Constructor using a context and theme for this builder and the 
(|android.app.AlertDialog|) it creates. The actual theme that an AlertDialog 
uses is a private implementation, however you can here supply either the name 
of an attribute in the theme from which to get the dialog's style (such as 
(|android.R.attr|) or one of the constants 
AlertDialog.THEME_TRADITIONAL(|android.app.AlertDialog|) , 
AlertDialog.THEME_HOLO_DARK(|android.app.AlertDialog|) , or 
AlertDialog.THEME_HOLO_LIGHT(|android.app.AlertDialog|) . 


*android.app.AlertDialog.Builder.create()*

public |android.app.AlertDialog| create()

Creates a (|android.app.AlertDialog|) with the arguments supplied to this 
builder. It does not (|android.app.Dialog|) the dialog. This allows the user to 
do any extra processing before displaying the dialog. Use 
(|android.app.AlertDialog.Builder|) if you don't have any other processing to 
do and want this to be created and displayed. 



*android.app.AlertDialog.Builder.getContext()*

public |android.content.Context| getContext()

Returns a (|android.content.Context|) with the appropriate theme for dialogs 
created by this Builder. Applications should use this Context for obtaining 
LayoutInflaters for inflating views that will be used in the resulting dialogs, 
as it will cause views to be inflated with the correct theme. 



    Returns: A Context for built Dialogs. 

*android.app.AlertDialog.Builder.setAdapter(ListAdapter,DialogInterface.OnClickListener)*

public |android.app.AlertDialog.Builder| setAdapter(
  android.widget.ListAdapter adapter,
  android.content.DialogInterface.OnClickListener listener)

Set a list of items, which are supplied by the given 
(|android.widget.ListAdapter|) , to be displayed in the dialog as the content, 
you will be notified of the selected item via the supplied listener. 


    adapter - The {@link ListAdapter} to supply the list of items 
    listener - The listener that will be called when an item is clicked. 

    Returns: This Builder object to allow for chaining of calls to set methods 

*android.app.AlertDialog.Builder.setCancelable(boolean)*

public |android.app.AlertDialog.Builder| setCancelable(boolean cancelable)

Sets whether the dialog is cancelable or not. Default is true. 



    Returns: This Builder object to allow for chaining of calls to set methods 

*android.app.AlertDialog.Builder.setCursor(Cursor,DialogInterface.OnClickListener,String)*

public |android.app.AlertDialog.Builder| setCursor(
  android.database.Cursor cursor,
  android.content.DialogInterface.OnClickListener listener,
  java.lang.String labelColumn)

Set a list of items, which are supplied by the given 
(|android.database.Cursor|) , to be displayed in the dialog as the content, you 
will be notified of the selected item via the supplied listener. 


    cursor - The {@link Cursor} to supply the list of items 
    listener - The listener that will be called when an item is clicked. 
    labelColumn - The column name on the cursor containing the string to display in the label. 

    Returns: This Builder object to allow for chaining of calls to set methods 

*android.app.AlertDialog.Builder.setCustomTitle(View)*

public |android.app.AlertDialog.Builder| setCustomTitle(android.view.View customTitleView)

Set the title using the custom viewcustomTitleView. The methods 
(|android.app.AlertDialog.Builder|) and (|android.app.AlertDialog.Builder|) 
should be sufficient for most titles, but this is provided if the title needs 
more customization. Using this will replace the title and icon set via the 
other methods. 


    customTitleView - The custom view to use as the title. 

    Returns: This Builder object to allow for chaining of calls to set methods 

*android.app.AlertDialog.Builder.setIcon(Drawable)*

public |android.app.AlertDialog.Builder| setIcon(Drawable icon)

Set the (|Drawable|) to be used in the title. 



    Returns: This Builder object to allow for chaining of calls to set methods 

*android.app.AlertDialog.Builder.setIcon(int)*

public |android.app.AlertDialog.Builder| setIcon(int iconId)

Set the resource id of the (|Drawable|) to be used in the title. 



    Returns: This Builder object to allow for chaining of calls to set methods 

*android.app.AlertDialog.Builder.setIconAttribute(int)*

public |android.app.AlertDialog.Builder| setIconAttribute(int attrId)

Set an icon as supplied by a theme attribute. e.g. 
android.R.attr.alertDialogIcon 


    attrId - ID of a theme attribute that points to a drawable resource. 

*android.app.AlertDialog.Builder.setInverseBackgroundForced(boolean)*

public |android.app.AlertDialog.Builder| setInverseBackgroundForced(boolean useInverseBackground)

Sets the Dialog to use the inverse background, regardless of what the contents 
is. 


    useInverseBackground - Whether to use the inverse background 

    Returns: This Builder object to allow for chaining of calls to set methods 

*android.app.AlertDialog.Builder.setItems(CharSequence[],DialogInterface.OnClickListener)*

public |android.app.AlertDialog.Builder| setItems(
  java.lang.CharSequence[] items,
  android.content.DialogInterface.OnClickListener listener)

Set a list of items to be displayed in the dialog as the content, you will be 
notified of the selected item via the supplied listener. 



    Returns: This Builder object to allow for chaining of calls to set methods 

*android.app.AlertDialog.Builder.setItems(int,DialogInterface.OnClickListener)*

public |android.app.AlertDialog.Builder| setItems(
  int itemsId,
  android.content.DialogInterface.OnClickListener listener)

Set a list of items to be displayed in the dialog as the content, you will be 
notified of the selected item via the supplied listener. This should be an 
array type i.e. R.array.foo 



    Returns: This Builder object to allow for chaining of calls to set methods 

*android.app.AlertDialog.Builder.setMessage(CharSequence)*

public |android.app.AlertDialog.Builder| setMessage(java.lang.CharSequence message)

Set the message to display. 



    Returns: This Builder object to allow for chaining of calls to set methods 

*android.app.AlertDialog.Builder.setMessage(int)*

public |android.app.AlertDialog.Builder| setMessage(int messageId)

Set the message to display using the given resource id. 



    Returns: This Builder object to allow for chaining of calls to set methods 

*android.app.AlertDialog.Builder.setMultiChoiceItems(CharSequence[],boolean[],DialogInterface.OnMultiChoiceClickListener)*

public |android.app.AlertDialog.Builder| setMultiChoiceItems(
  java.lang.CharSequence[] items,
  boolean[] checkedItems,
  android.content.DialogInterface.OnMultiChoiceClickListener listener)

Set a list of items to be displayed in the dialog as the content, you will be 
notified of the selected item via the supplied listener. The list will have a 
check mark displayed to the right of the text for each checked item. Clicking 
on an item in the list will not dismiss the dialog. Clicking on a button will 
dismiss the dialog. 


    items - the text of the items to be displayed in the list. 
    checkedItems - specifies which items are checked. It should be null in which case no items are 
       checked. If non null it must be exactly the same length as the array of 
       items. 
    listener - notified when an item on the list is clicked. The dialog will not be dismissed 
       when an item is clicked. It will only be dismissed if clicked on a 
       button, if no buttons are supplied it's up to the user to dismiss the 
       dialog. 

    Returns: This Builder object to allow for chaining of calls to set methods 

*android.app.AlertDialog.Builder.setMultiChoiceItems(Cursor,String,String,DialogInterface.OnMultiChoiceClickListener)*

public |android.app.AlertDialog.Builder| setMultiChoiceItems(
  android.database.Cursor cursor,
  java.lang.String isCheckedColumn,
  java.lang.String labelColumn,
  android.content.DialogInterface.OnMultiChoiceClickListener listener)

Set a list of items to be displayed in the dialog as the content, you will be 
notified of the selected item via the supplied listener. The list will have a 
check mark displayed to the right of the text for each checked item. Clicking 
on an item in the list will not dismiss the dialog. Clicking on a button will 
dismiss the dialog. 


    cursor - the cursor used to provide the items. 
    isCheckedColumn - specifies the column name on the cursor to use to determine whether a checkbox 
       is checked or not. It must return an integer value where 1 means checked 
       and 0 means unchecked. 
    labelColumn - The column name on the cursor containing the string to display in the label. 
    listener - notified when an item on the list is clicked. The dialog will not be dismissed 
       when an item is clicked. It will only be dismissed if clicked on a 
       button, if no buttons are supplied it's up to the user to dismiss the 
       dialog. 

    Returns: This Builder object to allow for chaining of calls to set methods 

*android.app.AlertDialog.Builder.setMultiChoiceItems(int,boolean[],DialogInterface.OnMultiChoiceClickListener)*

public |android.app.AlertDialog.Builder| setMultiChoiceItems(
  int itemsId,
  boolean[] checkedItems,
  android.content.DialogInterface.OnMultiChoiceClickListener listener)

Set a list of items to be displayed in the dialog as the content, you will be 
notified of the selected item via the supplied listener. This should be an 
array type, e.g. R.array.foo. The list will have a check mark displayed to the 
right of the text for each checked item. Clicking on an item in the list will 
not dismiss the dialog. Clicking on a button will dismiss the dialog. 


    itemsId - the resource id of an array i.e. R.array.foo 
    checkedItems - specifies which items are checked. It should be null in which case no items are 
       checked. If non null it must be exactly the same length as the array of 
       items. 
    listener - notified when an item on the list is clicked. The dialog will not be dismissed 
       when an item is clicked. It will only be dismissed if clicked on a 
       button, if no buttons are supplied it's up to the user to dismiss the 
       dialog. 

    Returns: This Builder object to allow for chaining of calls to set methods 

*android.app.AlertDialog.Builder.setNegativeButton(CharSequence,DialogInterface.OnClickListener)*

public |android.app.AlertDialog.Builder| setNegativeButton(
  java.lang.CharSequence text,
  android.content.DialogInterface.OnClickListener listener)

Set a listener to be invoked when the negative button of the dialog is pressed. 


    text - The text to display in the negative button 
    listener - The {@link DialogInterface.OnClickListener} to use. 

    Returns: This Builder object to allow for chaining of calls to set methods 

*android.app.AlertDialog.Builder.setNegativeButton(int,DialogInterface.OnClickListener)*

public |android.app.AlertDialog.Builder| setNegativeButton(
  int textId,
  android.content.DialogInterface.OnClickListener listener)

Set a listener to be invoked when the negative button of the dialog is pressed. 


    textId - The resource id of the text to display in the negative button 
    listener - The {@link DialogInterface.OnClickListener} to use. 

    Returns: This Builder object to allow for chaining of calls to set methods 

*android.app.AlertDialog.Builder.setNeutralButton(CharSequence,DialogInterface.OnClickListener)*

public |android.app.AlertDialog.Builder| setNeutralButton(
  java.lang.CharSequence text,
  android.content.DialogInterface.OnClickListener listener)

Set a listener to be invoked when the neutral button of the dialog is pressed. 


    text - The text to display in the neutral button 
    listener - The {@link DialogInterface.OnClickListener} to use. 

    Returns: This Builder object to allow for chaining of calls to set methods 

*android.app.AlertDialog.Builder.setNeutralButton(int,DialogInterface.OnClickListener)*

public |android.app.AlertDialog.Builder| setNeutralButton(
  int textId,
  android.content.DialogInterface.OnClickListener listener)

Set a listener to be invoked when the neutral button of the dialog is pressed. 


    textId - The resource id of the text to display in the neutral button 
    listener - The {@link DialogInterface.OnClickListener} to use. 

    Returns: This Builder object to allow for chaining of calls to set methods 

*android.app.AlertDialog.Builder.setOnCancelListener(DialogInterface.OnCancelListener)*

public |android.app.AlertDialog.Builder| setOnCancelListener(android.content.DialogInterface.OnCancelListener onCancelListener)

Sets the callback that will be called if the dialog is canceled. 

Even in a cancelable dialog, the dialog may be dismissed for reasons other than 
being canceled or one of the supplied choices being selected. If you are 
interested in listening for all cases where the dialog is dismissed and not 
just when it is canceled, see 
setOnDismissListener(|android.app.AlertDialog.Builder|) . 



    Returns: This Builder object to allow for chaining of calls to set methods 

*android.app.AlertDialog.Builder.setOnDismissListener(DialogInterface.OnDismissListener)*

public |android.app.AlertDialog.Builder| setOnDismissListener(android.content.DialogInterface.OnDismissListener onDismissListener)

Sets the callback that will be called when the dialog is dismissed for any 
reason. 



    Returns: This Builder object to allow for chaining of calls to set methods 

*android.app.AlertDialog.Builder.setOnItemSelectedListener(AdapterView.OnItemSelectedListener)*

public |android.app.AlertDialog.Builder| setOnItemSelectedListener(android.widget.AdapterView.OnItemSelectedListener listener)

Sets a listener to be invoked when an item in the list is selected. 


    listener - The listener to be invoked. 

    Returns: This Builder object to allow for chaining of calls to set methods 

*android.app.AlertDialog.Builder.setOnKeyListener(DialogInterface.OnKeyListener)*

public |android.app.AlertDialog.Builder| setOnKeyListener(android.content.DialogInterface.OnKeyListener onKeyListener)

Sets the callback that will be called if a key is dispatched to the dialog. 



    Returns: This Builder object to allow for chaining of calls to set methods 

*android.app.AlertDialog.Builder.setPositiveButton(CharSequence,DialogInterface.OnClickListener)*

public |android.app.AlertDialog.Builder| setPositiveButton(
  java.lang.CharSequence text,
  android.content.DialogInterface.OnClickListener listener)

Set a listener to be invoked when the positive button of the dialog is pressed. 


    text - The text to display in the positive button 
    listener - The {@link DialogInterface.OnClickListener} to use. 

    Returns: This Builder object to allow for chaining of calls to set methods 

*android.app.AlertDialog.Builder.setPositiveButton(int,DialogInterface.OnClickListener)*

public |android.app.AlertDialog.Builder| setPositiveButton(
  int textId,
  android.content.DialogInterface.OnClickListener listener)

Set a listener to be invoked when the positive button of the dialog is pressed. 


    textId - The resource id of the text to display in the positive button 
    listener - The {@link DialogInterface.OnClickListener} to use. 

    Returns: This Builder object to allow for chaining of calls to set methods 

*android.app.AlertDialog.Builder.setRecycleOnMeasureEnabled(boolean)*

public |android.app.AlertDialog.Builder| setRecycleOnMeasureEnabled(boolean enabled)





*android.app.AlertDialog.Builder.setSingleChoiceItems(CharSequence[],int,DialogInterface.OnClickListener)*

public |android.app.AlertDialog.Builder| setSingleChoiceItems(
  java.lang.CharSequence[] items,
  int checkedItem,
  android.content.DialogInterface.OnClickListener listener)

Set a list of items to be displayed in the dialog as the content, you will be 
notified of the selected item via the supplied listener. The list will have a 
check mark displayed to the right of the text for the checked item. Clicking on 
an item in the list will not dismiss the dialog. Clicking on a button will 
dismiss the dialog. 


    items - the items to be displayed. 
    checkedItem - specifies which item is checked. If -1 no items are checked. 
    listener - notified when an item on the list is clicked. The dialog will not be dismissed 
       when an item is clicked. It will only be dismissed if clicked on a 
       button, if no buttons are supplied it's up to the user to dismiss the 
       dialog. 

    Returns: This Builder object to allow for chaining of calls to set methods 

*android.app.AlertDialog.Builder.setSingleChoiceItems(Cursor,int,String,DialogInterface.OnClickListener)*

public |android.app.AlertDialog.Builder| setSingleChoiceItems(
  android.database.Cursor cursor,
  int checkedItem,
  java.lang.String labelColumn,
  android.content.DialogInterface.OnClickListener listener)

Set a list of items to be displayed in the dialog as the content, you will be 
notified of the selected item via the supplied listener. The list will have a 
check mark displayed to the right of the text for the checked item. Clicking on 
an item in the list will not dismiss the dialog. Clicking on a button will 
dismiss the dialog. 


    cursor - the cursor to retrieve the items from. 
    checkedItem - specifies which item is checked. If -1 no items are checked. 
    labelColumn - The column name on the cursor containing the string to display in the label. 
    listener - notified when an item on the list is clicked. The dialog will not be dismissed 
       when an item is clicked. It will only be dismissed if clicked on a 
       button, if no buttons are supplied it's up to the user to dismiss the 
       dialog. 

    Returns: This Builder object to allow for chaining of calls to set methods 

*android.app.AlertDialog.Builder.setSingleChoiceItems(int,int,DialogInterface.OnClickListener)*

public |android.app.AlertDialog.Builder| setSingleChoiceItems(
  int itemsId,
  int checkedItem,
  android.content.DialogInterface.OnClickListener listener)

Set a list of items to be displayed in the dialog as the content, you will be 
notified of the selected item via the supplied listener. This should be an 
array type i.e. R.array.foo The list will have a check mark displayed to the 
right of the text for the checked item. Clicking on an item in the list will 
not dismiss the dialog. Clicking on a button will dismiss the dialog. 


    itemsId - the resource id of an array i.e. R.array.foo 
    checkedItem - specifies which item is checked. If -1 no items are checked. 
    listener - notified when an item on the list is clicked. The dialog will not be dismissed 
       when an item is clicked. It will only be dismissed if clicked on a 
       button, if no buttons are supplied it's up to the user to dismiss the 
       dialog. 

    Returns: This Builder object to allow for chaining of calls to set methods 

*android.app.AlertDialog.Builder.setSingleChoiceItems(ListAdapter,int,DialogInterface.OnClickListener)*

public |android.app.AlertDialog.Builder| setSingleChoiceItems(
  android.widget.ListAdapter adapter,
  int checkedItem,
  android.content.DialogInterface.OnClickListener listener)

Set a list of items to be displayed in the dialog as the content, you will be 
notified of the selected item via the supplied listener. The list will have a 
check mark displayed to the right of the text for the checked item. Clicking on 
an item in the list will not dismiss the dialog. Clicking on a button will 
dismiss the dialog. 


    adapter - The {@link ListAdapter} to supply the list of items 
    checkedItem - specifies which item is checked. If -1 no items are checked. 
    listener - notified when an item on the list is clicked. The dialog will not be dismissed 
       when an item is clicked. It will only be dismissed if clicked on a 
       button, if no buttons are supplied it's up to the user to dismiss the 
       dialog. 

    Returns: This Builder object to allow for chaining of calls to set methods 

*android.app.AlertDialog.Builder.setTitle(CharSequence)*

public |android.app.AlertDialog.Builder| setTitle(java.lang.CharSequence title)

Set the title displayed in the (|android.app.Dialog|) . 



    Returns: This Builder object to allow for chaining of calls to set methods 

*android.app.AlertDialog.Builder.setTitle(int)*

public |android.app.AlertDialog.Builder| setTitle(int titleId)

Set the title using the given resource id. 



    Returns: This Builder object to allow for chaining of calls to set methods 

*android.app.AlertDialog.Builder.setView(View)*

public |android.app.AlertDialog.Builder| setView(android.view.View view)

Set a custom view to be the contents of the Dialog. If the supplied view is an 
instance of a (|android.widget.ListView|) the light background will be used. 


    view - The view to use as the contents of the Dialog. 

    Returns: This Builder object to allow for chaining of calls to set methods 

*android.app.AlertDialog.Builder.setView(View,int,int,int,int)*

public |android.app.AlertDialog.Builder| setView(
  android.view.View view,
  int viewSpacingLeft,
  int viewSpacingTop,
  int viewSpacingRight,
  int viewSpacingBottom)

Set a custom view to be the contents of the Dialog, specifying the spacing to 
appear around that view. If the supplied view is an instance of a 
(|android.widget.ListView|) the light background will be used. 


    view - The view to use as the contents of the Dialog. 
    viewSpacingLeft - Spacing between the left edge of the view and the dialog frame 
    viewSpacingTop - Spacing between the top edge of the view and the dialog frame 
    viewSpacingRight - Spacing between the right edge of the view and the dialog frame 
    viewSpacingBottom - Spacing between the bottom edge of the view and the dialog frame 

    Returns: This Builder object to allow for chaining of calls to set methods 

This is currently hidden because it seems like people should just be able to 
             put padding around the view. 

*android.app.AlertDialog.Builder.show()*

public |android.app.AlertDialog| show()

Creates a (|android.app.AlertDialog|) with the arguments supplied to this 
builder and (|android.app.Dialog|) 's the dialog. 




