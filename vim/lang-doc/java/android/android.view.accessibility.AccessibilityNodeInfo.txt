*android.view.accessibility.AccessibilityNodeInfo* *AccessibilityNodeInfo* This 

public class AccessibilityNodeInfo
  extends    |java.lang.Object|
  implements |android.os.Parcelable|

|android.view.accessibility.AccessibilityNodeInfo_Description|
|android.view.accessibility.AccessibilityNodeInfo_Fields|
|android.view.accessibility.AccessibilityNodeInfo_Constructors|
|android.view.accessibility.AccessibilityNodeInfo_Methods|

================================================================================

*android.view.accessibility.AccessibilityNodeInfo_Fields*
|int_android.view.accessibility.AccessibilityNodeInfo.ACTION_ACCESSIBILITY_FOCUS|
|java.lang.String_android.view.accessibility.AccessibilityNodeInfo.ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN|
|java.lang.String_android.view.accessibility.AccessibilityNodeInfo.ACTION_ARGUMENT_HTML_ELEMENT_STRING|
|java.lang.String_android.view.accessibility.AccessibilityNodeInfo.ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT|
|java.lang.String_android.view.accessibility.AccessibilityNodeInfo.ACTION_ARGUMENT_SELECTION_END_INT|
|java.lang.String_android.view.accessibility.AccessibilityNodeInfo.ACTION_ARGUMENT_SELECTION_START_INT|
|int_android.view.accessibility.AccessibilityNodeInfo.ACTION_CLEAR_ACCESSIBILITY_FOCUS|
|int_android.view.accessibility.AccessibilityNodeInfo.ACTION_CLEAR_FOCUS|
|int_android.view.accessibility.AccessibilityNodeInfo.ACTION_CLEAR_SELECTION|
|int_android.view.accessibility.AccessibilityNodeInfo.ACTION_CLICK|
|int_android.view.accessibility.AccessibilityNodeInfo.ACTION_COLLAPSE|
|int_android.view.accessibility.AccessibilityNodeInfo.ACTION_COPY|
|int_android.view.accessibility.AccessibilityNodeInfo.ACTION_CUT|
|int_android.view.accessibility.AccessibilityNodeInfo.ACTION_DISMISS|
|int_android.view.accessibility.AccessibilityNodeInfo.ACTION_EXPAND|
|int_android.view.accessibility.AccessibilityNodeInfo.ACTION_FOCUS|
|int_android.view.accessibility.AccessibilityNodeInfo.ACTION_LONG_CLICK|
|int_android.view.accessibility.AccessibilityNodeInfo.ACTION_NEXT_AT_MOVEMENT_GRANULARITY|
|int_android.view.accessibility.AccessibilityNodeInfo.ACTION_NEXT_HTML_ELEMENT|
|int_android.view.accessibility.AccessibilityNodeInfo.ACTION_PASTE|
|int_android.view.accessibility.AccessibilityNodeInfo.ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY|
|int_android.view.accessibility.AccessibilityNodeInfo.ACTION_PREVIOUS_HTML_ELEMENT|
|int_android.view.accessibility.AccessibilityNodeInfo.ACTION_SCROLL_BACKWARD|
|int_android.view.accessibility.AccessibilityNodeInfo.ACTION_SCROLL_FORWARD|
|int_android.view.accessibility.AccessibilityNodeInfo.ACTION_SELECT|
|int_android.view.accessibility.AccessibilityNodeInfo.ACTION_SET_SELECTION|
|int_android.view.accessibility.AccessibilityNodeInfo.ACTIVE_WINDOW_ID|
|android.os.Parcelable.Creator<android.view.accessibility.AccessibilityNodeInfo>_android.view.accessibility.AccessibilityNodeInfo.CREATOR|
|int_android.view.accessibility.AccessibilityNodeInfo.FLAG_INCLUDE_NOT_IMPORTANT_VIEWS|
|int_android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_DESCENDANTS|
|int_android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_PREDECESSORS|
|int_android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_SIBLINGS|
|int_android.view.accessibility.AccessibilityNodeInfo.FLAG_REPORT_VIEW_IDS|
|int_android.view.accessibility.AccessibilityNodeInfo.FOCUS_ACCESSIBILITY|
|int_android.view.accessibility.AccessibilityNodeInfo.FOCUS_INPUT|
|int_android.view.accessibility.AccessibilityNodeInfo.MOVEMENT_GRANULARITY_CHARACTER|
|int_android.view.accessibility.AccessibilityNodeInfo.MOVEMENT_GRANULARITY_LINE|
|int_android.view.accessibility.AccessibilityNodeInfo.MOVEMENT_GRANULARITY_PAGE|
|int_android.view.accessibility.AccessibilityNodeInfo.MOVEMENT_GRANULARITY_PARAGRAPH|
|int_android.view.accessibility.AccessibilityNodeInfo.MOVEMENT_GRANULARITY_WORD|
|long_android.view.accessibility.AccessibilityNodeInfo.ROOT_NODE_ID|
|int_android.view.accessibility.AccessibilityNodeInfo.UNDEFINED|

*android.view.accessibility.AccessibilityNodeInfo_Methods*
|android.view.accessibility.AccessibilityNodeInfo.addAction(int)|Adds an action
|android.view.accessibility.AccessibilityNodeInfo.addChild(View)|Adds a child.
|android.view.accessibility.AccessibilityNodeInfo.addChild(View,int)|Adds a vir
|android.view.accessibility.AccessibilityNodeInfo.canOpenPopup()|Gets if this n
|android.view.accessibility.AccessibilityNodeInfo.describeContents()|
|android.view.accessibility.AccessibilityNodeInfo.enforceNotSealed()|Enforces t
|android.view.accessibility.AccessibilityNodeInfo.enforceSealed()|Enforces that
|android.view.accessibility.AccessibilityNodeInfo.equals(Object)|
|android.view.accessibility.AccessibilityNodeInfo.findAccessibilityNodeInfosByText(String)|
|android.view.accessibility.AccessibilityNodeInfo.findAccessibilityNodeInfosByViewId(String)|
|android.view.accessibility.AccessibilityNodeInfo.findFocus(int)|Find the view 
|android.view.accessibility.AccessibilityNodeInfo.focusSearch(int)|Searches for
|android.view.accessibility.AccessibilityNodeInfo.getAccessibilityViewId(long)|
|android.view.accessibility.AccessibilityNodeInfo.getActions()|Gets the actions
|android.view.accessibility.AccessibilityNodeInfo.getBoundsInParent(Rect)|Gets 
|android.view.accessibility.AccessibilityNodeInfo.getBoundsInScreen(Rect)|Gets 
|android.view.accessibility.AccessibilityNodeInfo.getChild(int)|Get the child a
|android.view.accessibility.AccessibilityNodeInfo.getChildCount()|Gets the numb
|android.view.accessibility.AccessibilityNodeInfo.getChildNodeIds()|
|android.view.accessibility.AccessibilityNodeInfo.getClassName()|Gets the class
|android.view.accessibility.AccessibilityNodeInfo.getCollectionInfo()|Gets the 
|android.view.accessibility.AccessibilityNodeInfo.getCollectionItemInfo()|Gets 
|android.view.accessibility.AccessibilityNodeInfo.getContentDescription()|Gets 
|android.view.accessibility.AccessibilityNodeInfo.getExtras()|Gets an optional 
|android.view.accessibility.AccessibilityNodeInfo.getInputType()|Gets the input
|android.view.accessibility.AccessibilityNodeInfo.getLabeledBy()|Gets the node 
|android.view.accessibility.AccessibilityNodeInfo.getLabelFor()|Gets the node i
|android.view.accessibility.AccessibilityNodeInfo.getLiveRegion()|Gets the node
|android.view.accessibility.AccessibilityNodeInfo.getMovementGranularities()|Ge
|android.view.accessibility.AccessibilityNodeInfo.getPackageName()|Gets the pac
|android.view.accessibility.AccessibilityNodeInfo.getParent()|Gets the parent.
|android.view.accessibility.AccessibilityNodeInfo.getParentNodeId()|
|android.view.accessibility.AccessibilityNodeInfo.getRangeInfo()|Gets the range
|android.view.accessibility.AccessibilityNodeInfo.getSourceNodeId()|Gets the id
|android.view.accessibility.AccessibilityNodeInfo.getText()|Gets the text of th
|android.view.accessibility.AccessibilityNodeInfo.getTextSelectionEnd()|Gets th
|android.view.accessibility.AccessibilityNodeInfo.getTextSelectionStart()|Gets 
|android.view.accessibility.AccessibilityNodeInfo.getViewIdResourceName()|Gets 
|android.view.accessibility.AccessibilityNodeInfo.getVirtualDescendantId(long)|
|android.view.accessibility.AccessibilityNodeInfo.getWindowId()|Gets the id of 
|android.view.accessibility.AccessibilityNodeInfo.hashCode()|
|android.view.accessibility.AccessibilityNodeInfo.isAccessibilityFocused()|Gets
|android.view.accessibility.AccessibilityNodeInfo.isCheckable()|Gets whether th
|android.view.accessibility.AccessibilityNodeInfo.isChecked()|Gets whether this
|android.view.accessibility.AccessibilityNodeInfo.isClickable()|Gets whether th
|android.view.accessibility.AccessibilityNodeInfo.isContentInvalid()|Gets if th
|android.view.accessibility.AccessibilityNodeInfo.isDismissable()|Gets if the n
|android.view.accessibility.AccessibilityNodeInfo.isEditable()|Gets if the node
|android.view.accessibility.AccessibilityNodeInfo.isEnabled()|Gets whether this
|android.view.accessibility.AccessibilityNodeInfo.isFocusable()|Gets whether th
|android.view.accessibility.AccessibilityNodeInfo.isFocused()|Gets whether this
|android.view.accessibility.AccessibilityNodeInfo.isLongClickable()|Gets whethe
|android.view.accessibility.AccessibilityNodeInfo.isMultiLine()|Gets if the nod
|android.view.accessibility.AccessibilityNodeInfo.isPassword()|Gets whether thi
|android.view.accessibility.AccessibilityNodeInfo.isScrollable()|Gets if the no
|android.view.accessibility.AccessibilityNodeInfo.isSealed()|Gets if this insta
|android.view.accessibility.AccessibilityNodeInfo.isSelected()|Gets whether thi
|android.view.accessibility.AccessibilityNodeInfo.isVisibleToUser()|Sets whethe
|android.view.accessibility.AccessibilityNodeInfo.makeNodeId(int,int)|Makes a n
|android.view.accessibility.AccessibilityNodeInfo.obtain()|Returns a cached ins
|android.view.accessibility.AccessibilityNodeInfo.obtain(AccessibilityNodeInfo)|
|android.view.accessibility.AccessibilityNodeInfo.obtain(View)|Returns a cached
|android.view.accessibility.AccessibilityNodeInfo.obtain(View,int)|Returns a ca
|android.view.accessibility.AccessibilityNodeInfo.performAction(int)|Performs a
|android.view.accessibility.AccessibilityNodeInfo.performAction(int,Bundle)|Per
|android.view.accessibility.AccessibilityNodeInfo.recycle()|Return an instance 
|android.view.accessibility.AccessibilityNodeInfo.refresh()|Refreshes this info
|android.view.accessibility.AccessibilityNodeInfo.refresh(boolean)|Refreshes th
|android.view.accessibility.AccessibilityNodeInfo.setAccessibilityFocused(boolean)|
|android.view.accessibility.AccessibilityNodeInfo.setBoundsInParent(Rect)|Sets 
|android.view.accessibility.AccessibilityNodeInfo.setBoundsInScreen(Rect)|Sets 
|android.view.accessibility.AccessibilityNodeInfo.setCanOpenPopup(boolean)|Sets
|android.view.accessibility.AccessibilityNodeInfo.setCheckable(boolean)|Sets wh
|android.view.accessibility.AccessibilityNodeInfo.setChecked(boolean)|Sets whet
|android.view.accessibility.AccessibilityNodeInfo.setClassName(CharSequence)|Se
|android.view.accessibility.AccessibilityNodeInfo.setClickable(boolean)|Sets wh
|android.view.accessibility.AccessibilityNodeInfo.setCollectionInfo(AccessibilityNodeInfo.CollectionInfo)|
|android.view.accessibility.AccessibilityNodeInfo.setCollectionItemInfo(AccessibilityNodeInfo.CollectionItemInfo)|
|android.view.accessibility.AccessibilityNodeInfo.setConnectionId(int)|Sets the
|android.view.accessibility.AccessibilityNodeInfo.setContentDescription(CharSequence)|
|android.view.accessibility.AccessibilityNodeInfo.setContentInvalid(boolean)|Se
|android.view.accessibility.AccessibilityNodeInfo.setDismissable(boolean)|Sets 
|android.view.accessibility.AccessibilityNodeInfo.setEditable(boolean)|Sets whe
|android.view.accessibility.AccessibilityNodeInfo.setEnabled(boolean)|Sets whet
|android.view.accessibility.AccessibilityNodeInfo.setFocusable(boolean)|Sets wh
|android.view.accessibility.AccessibilityNodeInfo.setFocused(boolean)|Sets whet
|android.view.accessibility.AccessibilityNodeInfo.setInputType(int)|Sets the in
|android.view.accessibility.AccessibilityNodeInfo.setLabeledBy(View)|Sets the v
|android.view.accessibility.AccessibilityNodeInfo.setLabeledBy(View,int)|Sets t
|android.view.accessibility.AccessibilityNodeInfo.setLabelFor(View)|Sets the vi
|android.view.accessibility.AccessibilityNodeInfo.setLabelFor(View,int)|Sets th
|android.view.accessibility.AccessibilityNodeInfo.setLiveRegion(int)|Sets the n
|android.view.accessibility.AccessibilityNodeInfo.setLongClickable(boolean)|Set
|android.view.accessibility.AccessibilityNodeInfo.setMovementGranularities(int)|
|android.view.accessibility.AccessibilityNodeInfo.setMultiLine(boolean)|Sets if
|android.view.accessibility.AccessibilityNodeInfo.setPackageName(CharSequence)|
|android.view.accessibility.AccessibilityNodeInfo.setParent(View)|Sets the pare
|android.view.accessibility.AccessibilityNodeInfo.setParent(View,int)|Sets the 
|android.view.accessibility.AccessibilityNodeInfo.setPassword(boolean)|Sets whe
|android.view.accessibility.AccessibilityNodeInfo.setRangeInfo(AccessibilityNodeInfo.RangeInfo)|
|android.view.accessibility.AccessibilityNodeInfo.setScrollable(boolean)|Sets i
|android.view.accessibility.AccessibilityNodeInfo.setSealed(boolean)|Sets if th
|android.view.accessibility.AccessibilityNodeInfo.setSelected(boolean)|Sets whe
|android.view.accessibility.AccessibilityNodeInfo.setSource(View)|Sets the sour
|android.view.accessibility.AccessibilityNodeInfo.setSource(View,int)|Sets the 
|android.view.accessibility.AccessibilityNodeInfo.setText(CharSequence)|Sets th
|android.view.accessibility.AccessibilityNodeInfo.setTextSelection(int,int)|Set
|android.view.accessibility.AccessibilityNodeInfo.setViewIdResourceName(String)|
|android.view.accessibility.AccessibilityNodeInfo.setVisibleToUser(boolean)|Set
|android.view.accessibility.AccessibilityNodeInfo.toString()|
|android.view.accessibility.AccessibilityNodeInfo.writeToParcel(Parcel,int)|

*android.view.accessibility.AccessibilityNodeInfo_Description*

This class represents a node of the window content as well as actions that can 
be requested from its source. From the point of view of an 
(|android.accessibilityservice.AccessibilityService|) a window content is 
presented as tree of accessibility node info which may or may not map 
one-to-one to the view hierarchy. In other words, a custom view is free to 
report itself as a tree of accessibility node info. 

Once an accessibility node info is delivered to an accessibility service it is 
made immutable and calling a state mutation method generates an error. 

Please refer to (|android.accessibilityservice.AccessibilityService|) for 
details about how to obtain a handle to window content as a tree of 
accessibility node info as well as familiarizing with the security model. 

Developer Guides For more information about making applications accessible, 
read the <a href="guide/topics/ui/accessibility/index.html">Accessibility 
developer guide. 



*int_android.view.accessibility.AccessibilityNodeInfo.ACTION_ACCESSIBILITY_FOCUS*

Action that gives accessibility focus to the node. 


*java.lang.String_android.view.accessibility.AccessibilityNodeInfo.ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN*

Argument for whether when moving at granularity to extend the selection or to 
move it otherwise. 

Type: boolean Actions: (|android.view.accessibility.AccessibilityNodeInfo|) , 
(|android.view.accessibility.AccessibilityNodeInfo|) 


*java.lang.String_android.view.accessibility.AccessibilityNodeInfo.ACTION_ARGUMENT_HTML_ELEMENT_STRING*

Argument for which HTML element to get moving to the next/previous HTML 
element. 

Type: String Actions: (|android.view.accessibility.AccessibilityNodeInfo|) , 
(|android.view.accessibility.AccessibilityNodeInfo|) 


*java.lang.String_android.view.accessibility.AccessibilityNodeInfo.ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT*

Argument for which movement granularity to be used when traversing the node 
text. 

Type: int Actions: (|android.view.accessibility.AccessibilityNodeInfo|) , 
(|android.view.accessibility.AccessibilityNodeInfo|) 


*java.lang.String_android.view.accessibility.AccessibilityNodeInfo.ACTION_ARGUMENT_SELECTION_END_INT*

Argument for specifying the selection end. 

Type: int Actions: (|android.view.accessibility.AccessibilityNodeInfo|) 


*java.lang.String_android.view.accessibility.AccessibilityNodeInfo.ACTION_ARGUMENT_SELECTION_START_INT*

Argument for specifying the selection start. 

Type: int Actions: (|android.view.accessibility.AccessibilityNodeInfo|) 


*int_android.view.accessibility.AccessibilityNodeInfo.ACTION_CLEAR_ACCESSIBILITY_FOCUS*

Action that clears accessibility focus of the node. 


*int_android.view.accessibility.AccessibilityNodeInfo.ACTION_CLEAR_FOCUS*

Action that clears input focus of the node. 


*int_android.view.accessibility.AccessibilityNodeInfo.ACTION_CLEAR_SELECTION*

Action that unselects the node. 


*int_android.view.accessibility.AccessibilityNodeInfo.ACTION_CLICK*

Action that clicks on the node info. 


*int_android.view.accessibility.AccessibilityNodeInfo.ACTION_COLLAPSE*

Action to collapse an expandable node. 


*int_android.view.accessibility.AccessibilityNodeInfo.ACTION_COPY*

Action to copy the current selection to the clipboard. 


*int_android.view.accessibility.AccessibilityNodeInfo.ACTION_CUT*

Action to cut the current selection and place it to the clipboard. 


*int_android.view.accessibility.AccessibilityNodeInfo.ACTION_DISMISS*

Action to dismiss a dismissable node. 


*int_android.view.accessibility.AccessibilityNodeInfo.ACTION_EXPAND*

Action to expand an expandable node. 


*int_android.view.accessibility.AccessibilityNodeInfo.ACTION_FOCUS*

Action that gives input focus to the node. 


*int_android.view.accessibility.AccessibilityNodeInfo.ACTION_LONG_CLICK*

Action that long clicks on the node. 


*int_android.view.accessibility.AccessibilityNodeInfo.ACTION_NEXT_AT_MOVEMENT_GRANULARITY*

Action that requests to go to the next entity in this node's text at a given 
movement granularity. For example, move to the next character, word, etc. 

Arguments: (|android.view.accessibility.AccessibilityNodeInfo|) <, 
(|android.view.accessibility.AccessibilityNodeInfo|) Example: Move to the 
previous character and do not extend selection. 

Bundle arguments = new Bundle(); 
arguments.putInt(AccessibilityNodeInfo.ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT,
AccessibilityNodeInfo.MOVEMENT_GRANULARITY_CHARACTER); 
arguments.putBoolean(AccessibilityNodeInfo.ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN,
false); 
info.performAction(AccessibilityNodeInfo.ACTION_NEXT_AT_MOVEMENT_GRANULARITY, 
arguments); 




*int_android.view.accessibility.AccessibilityNodeInfo.ACTION_NEXT_HTML_ELEMENT*

Action to move to the next HTML element of a given type. For example, move to 
the BUTTON, INPUT, TABLE, etc. 

Arguments: (|android.view.accessibility.AccessibilityNodeInfo|) Example: 

Bundle arguments = new Bundle(); 
arguments.putString(AccessibilityNodeInfo.ACTION_ARGUMENT_HTML_ELEMENT_STRING, 
"BUTTON"); info.performAction(AccessibilityNodeInfo.ACTION_NEXT_HTML_ELEMENT, 
arguments); 




*int_android.view.accessibility.AccessibilityNodeInfo.ACTION_PASTE*

Action to paste the current clipboard content. 


*int_android.view.accessibility.AccessibilityNodeInfo.ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY*

Action that requests to go to the previous entity in this node's text at a 
given movement granularity. For example, move to the next character, word, etc. 

Arguments: (|android.view.accessibility.AccessibilityNodeInfo|) <, 
(|android.view.accessibility.AccessibilityNodeInfo|) Example: Move to the next 
character and do not extend selection. 

Bundle arguments = new Bundle(); 
arguments.putInt(AccessibilityNodeInfo.ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT,
AccessibilityNodeInfo.MOVEMENT_GRANULARITY_CHARACTER); 
arguments.putBoolean(AccessibilityNodeInfo.ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN,
false); 
info.performAction(AccessibilityNodeInfo.ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY,
arguments); 




*int_android.view.accessibility.AccessibilityNodeInfo.ACTION_PREVIOUS_HTML_ELEMENT*

Action to move to the previous HTML element of a given type. For example, move 
to the BUTTON, INPUT, TABLE, etc. 

Arguments: (|android.view.accessibility.AccessibilityNodeInfo|) Example: 

Bundle arguments = new Bundle(); 
arguments.putString(AccessibilityNodeInfo.ACTION_ARGUMENT_HTML_ELEMENT_STRING, 
"BUTTON"); 
info.performAction(AccessibilityNodeInfo.ACTION_PREVIOUS_HTML_ELEMENT, 
arguments); 




*int_android.view.accessibility.AccessibilityNodeInfo.ACTION_SCROLL_BACKWARD*

Action to scroll the node content backward. 


*int_android.view.accessibility.AccessibilityNodeInfo.ACTION_SCROLL_FORWARD*

Action to scroll the node content forward. 


*int_android.view.accessibility.AccessibilityNodeInfo.ACTION_SELECT*

Action that selects the node. 


*int_android.view.accessibility.AccessibilityNodeInfo.ACTION_SET_SELECTION*

Action to set the selection. Performing this action with no arguments clears 
the selection. 

Arguments: (|android.view.accessibility.AccessibilityNodeInfo|) , 
(|android.view.accessibility.AccessibilityNodeInfo|) Example: 

Bundle arguments = new Bundle(); 
arguments.putInt(AccessibilityNodeInfo.ACTION_ARGUMENT_SELECTION_START_INT, 1); 
arguments.putInt(AccessibilityNodeInfo.ACTION_ARGUMENT_SELECTION_END_INT, 2); 
info.performAction(AccessibilityNodeInfo.ACTION_SET_SELECTION, arguments); 




*int_android.view.accessibility.AccessibilityNodeInfo.ACTIVE_WINDOW_ID*




*android.os.Parcelable.Creator<android.view.accessibility.AccessibilityNodeInfo>_android.view.accessibility.AccessibilityNodeInfo.CREATOR*




*int_android.view.accessibility.AccessibilityNodeInfo.FLAG_INCLUDE_NOT_IMPORTANT_VIEWS*




*int_android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_DESCENDANTS*




*int_android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_PREDECESSORS*




*int_android.view.accessibility.AccessibilityNodeInfo.FLAG_PREFETCH_SIBLINGS*




*int_android.view.accessibility.AccessibilityNodeInfo.FLAG_REPORT_VIEW_IDS*




*int_android.view.accessibility.AccessibilityNodeInfo.FOCUS_ACCESSIBILITY*

The accessibility focus. 


*int_android.view.accessibility.AccessibilityNodeInfo.FOCUS_INPUT*

The input focus. 


*int_android.view.accessibility.AccessibilityNodeInfo.MOVEMENT_GRANULARITY_CHARACTER*

Movement granularity bit for traversing the text of a node by character. 


*int_android.view.accessibility.AccessibilityNodeInfo.MOVEMENT_GRANULARITY_LINE*

Movement granularity bit for traversing the text of a node by line. 


*int_android.view.accessibility.AccessibilityNodeInfo.MOVEMENT_GRANULARITY_PAGE*

Movement granularity bit for traversing the text of a node by page. 


*int_android.view.accessibility.AccessibilityNodeInfo.MOVEMENT_GRANULARITY_PARAGRAPH*

Movement granularity bit for traversing the text of a node by paragraph. 


*int_android.view.accessibility.AccessibilityNodeInfo.MOVEMENT_GRANULARITY_WORD*

Movement granularity bit for traversing the text of a node by word. 


*long_android.view.accessibility.AccessibilityNodeInfo.ROOT_NODE_ID*




*int_android.view.accessibility.AccessibilityNodeInfo.UNDEFINED*





*android.view.accessibility.AccessibilityNodeInfo.addAction(int)*

public void addAction(int action)

Adds an action that can be performed on the node. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    action - The action. 

*android.view.accessibility.AccessibilityNodeInfo.addChild(View)*

public void addChild(android.view.View child)

Adds a child. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    child - The child. 

*android.view.accessibility.AccessibilityNodeInfo.addChild(View,int)*

public void addChild(
  android.view.View root,
  int virtualDescendantId)

Adds a virtual child which is a descendant of the given root. If 
virtualDescendantId is (|android.view.View|) the root is added as a child. 

A virtual descendant is an imaginary View that is reported as a part of the 
view hierarchy for accessibility purposes. This enables custom views that draw 
complex content to report them selves as a tree of virtual views, thus 
conveying their logical structure. 


    root - The root of the virtual subtree. 
    virtualDescendantId - The id of the virtual child. 

*android.view.accessibility.AccessibilityNodeInfo.canOpenPopup()*

public boolean canOpenPopup()

Gets if this node opens a popup or a dialog. 



    Returns: If the the node opens a popup. 

*android.view.accessibility.AccessibilityNodeInfo.describeContents()*

public int describeContents()





*android.view.accessibility.AccessibilityNodeInfo.enforceNotSealed()*

protected void enforceNotSealed()

Enforces that this instance is not sealed. 



*android.view.accessibility.AccessibilityNodeInfo.enforceSealed()*

protected void enforceSealed()

Enforces that this instance is sealed. 



*android.view.accessibility.AccessibilityNodeInfo.equals(Object)*

public boolean equals(java.lang.Object object)





*android.view.accessibility.AccessibilityNodeInfo.findAccessibilityNodeInfosByText(String)*

public |java.util.List|<AccessibilityNodeInfo> findAccessibilityNodeInfosByText(java.lang.String text)

Finds (|android.view.accessibility.AccessibilityNodeInfo|) s by text. The match 
is case insensitive containment. The search is relative to this info i.e. this 
info is the root of the traversed tree. 

Note: It is a client responsibility to recycle the received info by calling 
(|android.view.accessibility.AccessibilityNodeInfo|) to avoid creating of 
multiple instances. 


    text - The searched text. 

    Returns: A list of node info. 

*android.view.accessibility.AccessibilityNodeInfo.findAccessibilityNodeInfosByViewId(String)*

public |java.util.List|<AccessibilityNodeInfo> findAccessibilityNodeInfosByViewId(java.lang.String viewId)

Finds (|android.view.accessibility.AccessibilityNodeInfo|) s by the fully 
qualified view id's resource name where a fully qualified id is of the from 
"package:id/id_resource_name". For example, if the target application's package 
is "foo.bar" and the id resource name is "baz", the fully qualified resource id 
is "foo.bar:id/baz". 

Note: It is a client responsibility to recycle the received info by calling 
(|android.view.accessibility.AccessibilityNodeInfo|) to avoid creating of 
multiple instances. 

Note: The primary usage of this API is for UI test automation and in order to 
report the fully qualified view id if an 
(|android.view.accessibility.AccessibilityNodeInfo|) the client has to set the 
(|android.accessibilityservice.AccessibilityServiceInfo|) flag when configuring 
his (|android.accessibilityservice.AccessibilityService|) . 


    viewId - The fully qualified resource name of the view id to find. 

    Returns: A list of node info. 

*android.view.accessibility.AccessibilityNodeInfo.findFocus(int)*

public |android.view.accessibility.AccessibilityNodeInfo| findFocus(int focus)

Find the view that has the specified focus type. The search starts from the 
view represented by this node info. 


    focus - The focus to find. One of {@link #FOCUS_INPUT} or {@link #FOCUS_ACCESSIBILITY}. 

    Returns: The node info of the focused view or null. 

*android.view.accessibility.AccessibilityNodeInfo.focusSearch(int)*

public |android.view.accessibility.AccessibilityNodeInfo| focusSearch(int direction)

Searches for the nearest view in the specified direction that can take the 
input focus. 


    direction - The direction. Can be one of: {@link View#FOCUS_DOWN}, {@link View#FOCUS_UP}, 
       {@link View#FOCUS_LEFT}, {@link View#FOCUS_RIGHT}, {@link 
       View#FOCUS_FORWARD}, {@link View#FOCUS_BACKWARD}. 

    Returns: The node info for the view that can take accessibility focus. 

*android.view.accessibility.AccessibilityNodeInfo.getAccessibilityViewId(long)*

public static int getAccessibilityViewId(long accessibilityNodeId)

Gets the accessibility view id which identifies a View in the view three. 


    accessibilityNodeId - The id of an {@link AccessibilityNodeInfo}. 

    Returns: The accessibility view id part of the node id. 

*android.view.accessibility.AccessibilityNodeInfo.getActions()*

public int getActions()

Gets the actions that can be performed on the node. 



    Returns: The bit mask of with actions. 

*android.view.accessibility.AccessibilityNodeInfo.getBoundsInParent(Rect)*

public void getBoundsInParent(Rect outBounds)

Gets the node bounds in parent coordinates. 


    outBounds - The output node bounds. 

*android.view.accessibility.AccessibilityNodeInfo.getBoundsInScreen(Rect)*

public void getBoundsInScreen(Rect outBounds)

Gets the node bounds in screen coordinates. 


    outBounds - The output node bounds. 

*android.view.accessibility.AccessibilityNodeInfo.getChild(int)*

public |android.view.accessibility.AccessibilityNodeInfo| getChild(int index)

Get the child at given index. 

Note: It is a client responsibility to recycle the received info by calling 
(|android.view.accessibility.AccessibilityNodeInfo|) to avoid creating of 
multiple instances. 


    index - The child index. 

    Returns: The child node. 

*android.view.accessibility.AccessibilityNodeInfo.getChildCount()*

public int getChildCount()

Gets the number of children. 



    Returns: The child count. 

*android.view.accessibility.AccessibilityNodeInfo.getChildNodeIds()*

public |android.util.SparseLongArray| getChildNodeIds()





    Returns: The ids of the children. 

*android.view.accessibility.AccessibilityNodeInfo.getClassName()*

public |java.lang.CharSequence| getClassName()

Gets the class this node comes from. 



    Returns: The class name. 

*android.view.accessibility.AccessibilityNodeInfo.getCollectionInfo()*

public |android.view.accessibility.AccessibilityNodeInfo.CollectionInfo| getCollectionInfo()

Gets the collection info if the node is a collection. A collection child is 
always a collection item. 



    Returns: The collection info. 

*android.view.accessibility.AccessibilityNodeInfo.getCollectionItemInfo()*

public |android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo| getCollectionItemInfo()

Gets the collection item info if the node is a collection item. A collection 
item is always a child of a collection. 



    Returns: The collection item info. 

*android.view.accessibility.AccessibilityNodeInfo.getContentDescription()*

public |java.lang.CharSequence| getContentDescription()

Gets the content description of this node. 



    Returns: The content description. 

*android.view.accessibility.AccessibilityNodeInfo.getExtras()*

public |android.os.Bundle| getExtras()

Gets an optional bundle with extra data. The bundle is lazily created and never 
null. 

Note: It is recommended to use the package name of your application as a prefix 
for the keys to avoid collisions which may confuse an accessibility service if 
the same key has different meaning when emitted from different applications. 



    Returns: 

*android.view.accessibility.AccessibilityNodeInfo.getInputType()*

public int getInputType()

Gets the input type of the source as defined by (|android.text.InputType|) . 



    Returns: The input type. 

*android.view.accessibility.AccessibilityNodeInfo.getLabeledBy()*

public |android.view.accessibility.AccessibilityNodeInfo| getLabeledBy()

Gets the node info which serves as the label of the view represented by this 
info for accessibility purposes. 

Note: It is a client responsibility to recycle the received info by calling 
(|android.view.accessibility.AccessibilityNodeInfo|) to avoid creating of 
multiple instances. 



    Returns: 

*android.view.accessibility.AccessibilityNodeInfo.getLabelFor()*

public |android.view.accessibility.AccessibilityNodeInfo| getLabelFor()

Gets the node info for which the view represented by this info serves as a 
label for accessibility purposes. 

Note: It is a client responsibility to recycle the received info by calling 
(|android.view.accessibility.AccessibilityNodeInfo|) to avoid creating of 
multiple instances. 



    Returns: The labeled info. 

*android.view.accessibility.AccessibilityNodeInfo.getLiveRegion()*

public int getLiveRegion()

Gets the node's live region mode. 

A live region is a node that contains information that is important for the 
user and when it changes the user should be notified. For example, in a login 
screen with a TextView that displays an "incorrect password" notification, that 
view should be marked as a live region with mode (|android.view.View|) . 

It is the responsibility of the accessibility service to monitor 
(|android.view.accessibility.AccessibilityEvent|) events indicating changes to 
live region nodes and their children. 



    Returns: The live region mode, or {@link View#ACCESSIBILITY_LIVE_REGION_NONE} if the 
             view is not a live region. 

*android.view.accessibility.AccessibilityNodeInfo.getMovementGranularities()*

public int getMovementGranularities()

Gets the movement granularities for traversing the text of this node. 



    Returns: The bit mask with granularities. 

*android.view.accessibility.AccessibilityNodeInfo.getPackageName()*

public |java.lang.CharSequence| getPackageName()

Gets the package this node comes from. 



    Returns: The package name. 

*android.view.accessibility.AccessibilityNodeInfo.getParent()*

public |android.view.accessibility.AccessibilityNodeInfo| getParent()

Gets the parent. 

Note: It is a client responsibility to recycle the received info by calling 
(|android.view.accessibility.AccessibilityNodeInfo|) to avoid creating of 
multiple instances. 



    Returns: 

*android.view.accessibility.AccessibilityNodeInfo.getParentNodeId()*

public long getParentNodeId()





    Returns: The parent node id. 

*android.view.accessibility.AccessibilityNodeInfo.getRangeInfo()*

public |android.view.accessibility.AccessibilityNodeInfo.RangeInfo| getRangeInfo()

Gets the range info if this node is a range. 



    Returns: 

*android.view.accessibility.AccessibilityNodeInfo.getSourceNodeId()*

public long getSourceNodeId()

Gets the id of the source node. 



    Returns: 

*android.view.accessibility.AccessibilityNodeInfo.getText()*

public |java.lang.CharSequence| getText()

Gets the text of this node. 



    Returns: 

*android.view.accessibility.AccessibilityNodeInfo.getTextSelectionEnd()*

public int getTextSelectionEnd()

Gets the text selection end. 



    Returns: The text selection end if there is selection or -1. 

*android.view.accessibility.AccessibilityNodeInfo.getTextSelectionStart()*

public int getTextSelectionStart()

Gets the text selection start. 



    Returns: The text selection start if there is selection or -1. 

*android.view.accessibility.AccessibilityNodeInfo.getViewIdResourceName()*

public |java.lang.String| getViewIdResourceName()

Gets the fully qualified resource name of the source view's id. 

Note: The primary usage of this API is for UI test automation and in order to 
report the source view id of an 
(|android.view.accessibility.AccessibilityNodeInfo|) the client has to set the 
(|android.accessibilityservice.AccessibilityServiceInfo|) flag when configuring 
his (|android.accessibilityservice.AccessibilityService|) . 



    Returns: The id resource name. 

*android.view.accessibility.AccessibilityNodeInfo.getVirtualDescendantId(long)*

public static int getVirtualDescendantId(long accessibilityNodeId)

Gets the virtual descendant id which identifies an imaginary view in a 
containing View. 


    accessibilityNodeId - The id of an {@link AccessibilityNodeInfo}. 

    Returns: The virtual view id part of the node id. 

*android.view.accessibility.AccessibilityNodeInfo.getWindowId()*

public int getWindowId()

Gets the id of the window from which the info comes from. 



    Returns: The window id. 

*android.view.accessibility.AccessibilityNodeInfo.hashCode()*

public int hashCode()





*android.view.accessibility.AccessibilityNodeInfo.isAccessibilityFocused()*

public boolean isAccessibilityFocused()

Gets whether this node is accessibility focused. 



    Returns: True if the node is accessibility focused. 

*android.view.accessibility.AccessibilityNodeInfo.isCheckable()*

public boolean isCheckable()

Gets whether this node is checkable. 



    Returns: True if the node is checkable. 

*android.view.accessibility.AccessibilityNodeInfo.isChecked()*

public boolean isChecked()

Gets whether this node is checked. 



    Returns: True if the node is checked. 

*android.view.accessibility.AccessibilityNodeInfo.isClickable()*

public boolean isClickable()

Gets whether this node is clickable. 



    Returns: True if the node is clickable. 

*android.view.accessibility.AccessibilityNodeInfo.isContentInvalid()*

public boolean isContentInvalid()

Gets if the content of this node is invalid. For example, a date is not 
well-formed. 



    Returns: If the node content is invalid. 

*android.view.accessibility.AccessibilityNodeInfo.isDismissable()*

public boolean isDismissable()

Gets if the node can be dismissed. 



    Returns: If the node can be dismissed. 

*android.view.accessibility.AccessibilityNodeInfo.isEditable()*

public boolean isEditable()

Gets if the node is editable. 



    Returns: True if the node is editable, false otherwise. 

*android.view.accessibility.AccessibilityNodeInfo.isEnabled()*

public boolean isEnabled()

Gets whether this node is enabled. 



    Returns: True if the node is enabled. 

*android.view.accessibility.AccessibilityNodeInfo.isFocusable()*

public boolean isFocusable()

Gets whether this node is focusable. 



    Returns: True if the node is focusable. 

*android.view.accessibility.AccessibilityNodeInfo.isFocused()*

public boolean isFocused()

Gets whether this node is focused. 



    Returns: True if the node is focused. 

*android.view.accessibility.AccessibilityNodeInfo.isLongClickable()*

public boolean isLongClickable()

Gets whether this node is long clickable. 



    Returns: True if the node is long clickable. 

*android.view.accessibility.AccessibilityNodeInfo.isMultiLine()*

public boolean isMultiLine()

Gets if the node is a multi line editable text. 



    Returns: True if the node is multi line. 

*android.view.accessibility.AccessibilityNodeInfo.isPassword()*

public boolean isPassword()

Gets whether this node is a password. 



    Returns: True if the node is a password. 

*android.view.accessibility.AccessibilityNodeInfo.isScrollable()*

public boolean isScrollable()

Gets if the node is scrollable. 



    Returns: True if the node is scrollable, false otherwise. 

*android.view.accessibility.AccessibilityNodeInfo.isSealed()*

public boolean isSealed()

Gets if this instance is sealed. 



    Returns: Whether is sealed. 

*android.view.accessibility.AccessibilityNodeInfo.isSelected()*

public boolean isSelected()

Gets whether this node is selected. 



    Returns: True if the node is selected. 

*android.view.accessibility.AccessibilityNodeInfo.isVisibleToUser()*

public boolean isVisibleToUser()

Sets whether this node is visible to the user. 



    Returns: Whether the node is visible to the user. 

*android.view.accessibility.AccessibilityNodeInfo.makeNodeId(int,int)*

public static long makeNodeId(
  int accessibilityViewId,
  int virtualDescendantId)

Makes a node id by shifting the virtualDescendantId by 
(|android.view.accessibility.AccessibilityNodeInfo|) and taking the bitwise or 
with the accessibilityViewId. 


    accessibilityViewId - A View accessibility id. 
    virtualDescendantId - A virtual descendant id. 

    Returns: 

*android.view.accessibility.AccessibilityNodeInfo.obtain()*

public static |android.view.accessibility.AccessibilityNodeInfo| obtain()

Returns a cached instance if such is available otherwise a new one. 



    Returns: 

*android.view.accessibility.AccessibilityNodeInfo.obtain(AccessibilityNodeInfo)*

public static |android.view.accessibility.AccessibilityNodeInfo| obtain(android.view.accessibility.AccessibilityNodeInfo info)

Returns a cached instance if such is available or a new one is create. The 
returned instance is initialized from the given info. 


    info - The other info. 

    Returns: 

*android.view.accessibility.AccessibilityNodeInfo.obtain(View)*

public static |android.view.accessibility.AccessibilityNodeInfo| obtain(android.view.View source)

Returns a cached instance if such is available otherwise a new one and sets the 
source. 


    source - The source view. 

    Returns: 

*android.view.accessibility.AccessibilityNodeInfo.obtain(View,int)*

public static |android.view.accessibility.AccessibilityNodeInfo| obtain(
  android.view.View root,
  int virtualDescendantId)

Returns a cached instance if such is available otherwise a new one and sets the 
source. 


    root - The root of the virtual subtree. 
    virtualDescendantId - The id of the virtual descendant. 

    Returns: 

*android.view.accessibility.AccessibilityNodeInfo.performAction(int)*

public boolean performAction(int action)

Performs an action on the node. 

Note: An action can be performed only if the request is made from an 
(|android.accessibilityservice.AccessibilityService|) . 


    action - The action to perform. 

    Returns: True if the action was performed. 

*android.view.accessibility.AccessibilityNodeInfo.performAction(int,Bundle)*

public boolean performAction(
  int action,
  android.os.Bundle arguments)

Performs an action on the node. 

Note: An action can be performed only if the request is made from an 
(|android.accessibilityservice.AccessibilityService|) . 


    action - The action to perform. 
    arguments - A bundle with additional arguments. 

    Returns: True if the action was performed. 

*android.view.accessibility.AccessibilityNodeInfo.recycle()*

public void recycle()

Return an instance back to be reused. 

Note: You must not touch the object after calling this function. 



*android.view.accessibility.AccessibilityNodeInfo.refresh()*

public boolean refresh()

Refreshes this info with the latest state of the view it represents. 

Note: If this method returns false this info is obsolete since it represents a 
view that is no longer in the view tree and should be recycled. 



    Returns: Whether the refresh succeeded. 

*android.view.accessibility.AccessibilityNodeInfo.refresh(boolean)*

public boolean refresh(boolean bypassCache)

Refreshes this info with the latest state of the view it represents. 

Note: If this method returns false this info is obsolete since it represents a 
view that is no longer in the view tree and should be recycled. 


    bypassCache - Whether to bypass the cache. 

    Returns: Whether the refresh succeeded. 

*android.view.accessibility.AccessibilityNodeInfo.setAccessibilityFocused(boolean)*

public void setAccessibilityFocused(boolean focused)

Sets whether this node is accessibility focused. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    focused - True if the node is accessibility focused. 

*android.view.accessibility.AccessibilityNodeInfo.setBoundsInParent(Rect)*

public void setBoundsInParent(Rect bounds)

Sets the node bounds in parent coordinates. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    bounds - The node bounds. 

*android.view.accessibility.AccessibilityNodeInfo.setBoundsInScreen(Rect)*

public void setBoundsInScreen(Rect bounds)

Sets the node bounds in screen coordinates. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    bounds - The node bounds. 

*android.view.accessibility.AccessibilityNodeInfo.setCanOpenPopup(boolean)*

public void setCanOpenPopup(boolean opensPopup)

Sets if this node opens a popup or a dialog. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    opensPopup - If the the node opens a popup. 

*android.view.accessibility.AccessibilityNodeInfo.setCheckable(boolean)*

public void setCheckable(boolean checkable)

Sets whether this node is checkable. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    checkable - True if the node is checkable. 

*android.view.accessibility.AccessibilityNodeInfo.setChecked(boolean)*

public void setChecked(boolean checked)

Sets whether this node is checked. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    checked - True if the node is checked. 

*android.view.accessibility.AccessibilityNodeInfo.setClassName(CharSequence)*

public void setClassName(java.lang.CharSequence className)

Sets the class this node comes from. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    className - The class name. 

*android.view.accessibility.AccessibilityNodeInfo.setClickable(boolean)*

public void setClickable(boolean clickable)

Sets whether this node is clickable. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    clickable - True if the node is clickable. 

*android.view.accessibility.AccessibilityNodeInfo.setCollectionInfo(AccessibilityNodeInfo.CollectionInfo)*

public void setCollectionInfo(android.view.accessibility.AccessibilityNodeInfo.CollectionInfo collectionInfo)

Sets the collection info if the node is a collection. A collection child is 
always a collection item. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    collectionInfo - The collection info. 

*android.view.accessibility.AccessibilityNodeInfo.setCollectionItemInfo(AccessibilityNodeInfo.CollectionItemInfo)*

public void setCollectionItemInfo(android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo collectionItemInfo)

Sets the collection item info if the node is a collection item. A collection 
item is always a child of a collection. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 



    Returns: collectionItem True if the node is an item. 

*android.view.accessibility.AccessibilityNodeInfo.setConnectionId(int)*

public void setConnectionId(int connectionId)

Sets the unique id of the IAccessibilityServiceConnection over which this 
instance can send requests to the system. 


    connectionId - The connection id. 

*android.view.accessibility.AccessibilityNodeInfo.setContentDescription(CharSequence)*

public void setContentDescription(java.lang.CharSequence contentDescription)

Sets the content description of this node. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    contentDescription - The content description. 

*android.view.accessibility.AccessibilityNodeInfo.setContentInvalid(boolean)*

public void setContentInvalid(boolean contentInvalid)

Sets if the content of this node is invalid. For example, a date is not 
well-formed. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    contentInvalid - If the node content is invalid. 

*android.view.accessibility.AccessibilityNodeInfo.setDismissable(boolean)*

public void setDismissable(boolean dismissable)

Sets if the node can be dismissed. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    dismissable - If the node can be dismissed. 

*android.view.accessibility.AccessibilityNodeInfo.setEditable(boolean)*

public void setEditable(boolean editable)

Sets whether this node is editable. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    editable - True if the node is editable. 

*android.view.accessibility.AccessibilityNodeInfo.setEnabled(boolean)*

public void setEnabled(boolean enabled)

Sets whether this node is enabled. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    enabled - True if the node is enabled. 

*android.view.accessibility.AccessibilityNodeInfo.setFocusable(boolean)*

public void setFocusable(boolean focusable)

Sets whether this node is focusable. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    focusable - True if the node is focusable. 

*android.view.accessibility.AccessibilityNodeInfo.setFocused(boolean)*

public void setFocused(boolean focused)

Sets whether this node is focused. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    focused - True if the node is focused. 

*android.view.accessibility.AccessibilityNodeInfo.setInputType(int)*

public void setInputType(int inputType)

Sets the input type of the source as defined by (|android.text.InputType|) . 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    inputType - The input type. 

*android.view.accessibility.AccessibilityNodeInfo.setLabeledBy(View)*

public void setLabeledBy(android.view.View label)

Sets the view which serves as the label of the view represented by this info 
for accessibility purposes. 


    label - The view that labels this node's source. 

*android.view.accessibility.AccessibilityNodeInfo.setLabeledBy(View,int)*

public void setLabeledBy(
  android.view.View root,
  int virtualDescendantId)

Sets the view which serves as the label of the view represented by this info 
for accessibility purposes. If virtualDescendantId is (|android.view.View|) the 
root is set as the label. 

A virtual descendant is an imaginary View that is reported as a part of the 
view hierarchy for accessibility purposes. This enables custom views that draw 
complex content to report themselves as a tree of virtual views, thus conveying 
their logical structure. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    root - The root whose virtual descendant labels this node's source. 
    virtualDescendantId - The id of the virtual descendant. 

*android.view.accessibility.AccessibilityNodeInfo.setLabelFor(View)*

public void setLabelFor(android.view.View labeled)

Sets the view for which the view represented by this info serves as a label for 
accessibility purposes. 


    labeled - The view for which this info serves as a label. 

*android.view.accessibility.AccessibilityNodeInfo.setLabelFor(View,int)*

public void setLabelFor(
  android.view.View root,
  int virtualDescendantId)

Sets the view for which the view represented by this info serves as a label for 
accessibility purposes. If virtualDescendantId is (|android.view.View|) the 
root is set as the labeled. 

A virtual descendant is an imaginary View that is reported as a part of the 
view hierarchy for accessibility purposes. This enables custom views that draw 
complex content to report themselves as a tree of virtual views, thus conveying 
their logical structure. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    root - The root whose virtual descendant serves as a label. 
    virtualDescendantId - The id of the virtual descendant. 

*android.view.accessibility.AccessibilityNodeInfo.setLiveRegion(int)*

public void setLiveRegion(int mode)

Sets the node's live region mode. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    mode - The live region mode, or {@link View#ACCESSIBILITY_LIVE_REGION_NONE} if the 
       view is not a live region. 

*android.view.accessibility.AccessibilityNodeInfo.setLongClickable(boolean)*

public void setLongClickable(boolean longClickable)

Sets whether this node is long clickable. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    longClickable - True if the node is long clickable. 

*android.view.accessibility.AccessibilityNodeInfo.setMovementGranularities(int)*

public void setMovementGranularities(int granularities)

Sets the movement granularities for traversing the text of this node. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    granularities - The bit mask with granularities. 

*android.view.accessibility.AccessibilityNodeInfo.setMultiLine(boolean)*

public void setMultiLine(boolean multiLine)

Sets if the node is a multi line editable text. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    multiLine - True if the node is multi line. 

*android.view.accessibility.AccessibilityNodeInfo.setPackageName(CharSequence)*

public void setPackageName(java.lang.CharSequence packageName)

Sets the package this node comes from. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    packageName - The package name. 

*android.view.accessibility.AccessibilityNodeInfo.setParent(View)*

public void setParent(android.view.View parent)

Sets the parent. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    parent - The parent. 

*android.view.accessibility.AccessibilityNodeInfo.setParent(View,int)*

public void setParent(
  android.view.View root,
  int virtualDescendantId)

Sets the parent to be a virtual descendant of the given root. If 
virtualDescendantId equals to (|android.view.View|) the root is set as the 
parent. 

A virtual descendant is an imaginary View that is reported as a part of the 
view hierarchy for accessibility purposes. This enables custom views that draw 
complex content to report them selves as a tree of virtual views, thus 
conveying their logical structure. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    root - The root of the virtual subtree. 
    virtualDescendantId - The id of the virtual descendant. 

*android.view.accessibility.AccessibilityNodeInfo.setPassword(boolean)*

public void setPassword(boolean password)

Sets whether this node is a password. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    password - True if the node is a password. 

*android.view.accessibility.AccessibilityNodeInfo.setRangeInfo(AccessibilityNodeInfo.RangeInfo)*

public void setRangeInfo(android.view.accessibility.AccessibilityNodeInfo.RangeInfo rangeInfo)

Sets the range info if this node is a range. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    rangeInfo - The range info. 

*android.view.accessibility.AccessibilityNodeInfo.setScrollable(boolean)*

public void setScrollable(boolean scrollable)

Sets if the node is scrollable. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    scrollable - True if the node is scrollable, false otherwise. 

*android.view.accessibility.AccessibilityNodeInfo.setSealed(boolean)*

public void setSealed(boolean sealed)

Sets if this instance is sealed. 


    sealed - Whether is sealed. 

*android.view.accessibility.AccessibilityNodeInfo.setSelected(boolean)*

public void setSelected(boolean selected)

Sets whether this node is selected. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    selected - True if the node is selected. 

*android.view.accessibility.AccessibilityNodeInfo.setSource(View)*

public void setSource(android.view.View source)

Sets the source. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    source - The info source. 

*android.view.accessibility.AccessibilityNodeInfo.setSource(View,int)*

public void setSource(
  android.view.View root,
  int virtualDescendantId)

Sets the source to be a virtual descendant of the given root. If 
virtualDescendantId is (|android.view.View|) the root is set as the source. 

A virtual descendant is an imaginary View that is reported as a part of the 
view hierarchy for accessibility purposes. This enables custom views that draw 
complex content to report themselves as a tree of virtual views, thus conveying 
their logical structure. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    root - The root of the virtual subtree. 
    virtualDescendantId - The id of the virtual descendant. 

*android.view.accessibility.AccessibilityNodeInfo.setText(CharSequence)*

public void setText(java.lang.CharSequence text)

Sets the text of this node. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    text - The text. 

*android.view.accessibility.AccessibilityNodeInfo.setTextSelection(int,int)*

public void setTextSelection(
  int start,
  int end)

Sets the text selection start and end. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    start - The text selection start. 
    end - The text selection end. 

*android.view.accessibility.AccessibilityNodeInfo.setViewIdResourceName(String)*

public void setViewIdResourceName(java.lang.String viewIdResName)

Sets the fully qualified resource name of the source view's id. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    viewIdResName - The id resource name. 

*android.view.accessibility.AccessibilityNodeInfo.setVisibleToUser(boolean)*

public void setVisibleToUser(boolean visibleToUser)

Sets whether this node is visible to the user. 

Note: Cannot be called from an 
(|android.accessibilityservice.AccessibilityService|) . This class is made 
immutable before being delivered to an AccessibilityService. 


    visibleToUser - Whether the node is visible to the user. 

*android.view.accessibility.AccessibilityNodeInfo.toString()*

public |java.lang.String| toString()





*android.view.accessibility.AccessibilityNodeInfo.writeToParcel(Parcel,int)*

public void writeToParcel(
  android.os.Parcel parcel,
  int flags)

Note: After the instance is written to a parcel it is recycled. You must not 
touch the object after calling this function. 




