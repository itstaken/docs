*android.text.method.MetaKeyKeyListener* *MetaKeyKeyListener* This base class en

public abstract class MetaKeyKeyListener
  extends    |java.lang.Object|

|android.text.method.MetaKeyKeyListener_Description|
|android.text.method.MetaKeyKeyListener_Fields|
|android.text.method.MetaKeyKeyListener_Constructors|
|android.text.method.MetaKeyKeyListener_Methods|

================================================================================

*android.text.method.MetaKeyKeyListener_Fields*
|int_android.text.method.MetaKeyKeyListener.META_ALT_LOCKED|
|int_android.text.method.MetaKeyKeyListener.META_ALT_ON|
|int_android.text.method.MetaKeyKeyListener.META_CAP_LOCKED|
|int_android.text.method.MetaKeyKeyListener.META_SELECTING|
|int_android.text.method.MetaKeyKeyListener.META_SHIFT_ON|
|int_android.text.method.MetaKeyKeyListener.META_SYM_LOCKED|
|int_android.text.method.MetaKeyKeyListener.META_SYM_ON|

*android.text.method.MetaKeyKeyListener_Constructors*
|android.text.method.MetaKeyKeyListener()|

*android.text.method.MetaKeyKeyListener_Methods*
|android.text.method.MetaKeyKeyListener.adjustMetaAfterKeypress(long)|Call this
|android.text.method.MetaKeyKeyListener.adjustMetaAfterKeypress(Spannable)|Call
|android.text.method.MetaKeyKeyListener.clearMetaKeyState(Editable,int)|
|android.text.method.MetaKeyKeyListener.clearMetaKeyState(long,int)|Clears the 
|android.text.method.MetaKeyKeyListener.clearMetaKeyState(View,Editable,int)|
|android.text.method.MetaKeyKeyListener.getMetaState(CharSequence)|Gets the sta
|android.text.method.MetaKeyKeyListener.getMetaState(CharSequence,int)|Gets the
|android.text.method.MetaKeyKeyListener.getMetaState(CharSequence,int,KeyEvent)|
|android.text.method.MetaKeyKeyListener.getMetaState(CharSequence,KeyEvent)|Get
|android.text.method.MetaKeyKeyListener.getMetaState(long)|Gets the state of th
|android.text.method.MetaKeyKeyListener.getMetaState(long,int)|Gets the state o
|android.text.method.MetaKeyKeyListener.handleKeyDown(long,int,KeyEvent)|Handle
|android.text.method.MetaKeyKeyListener.handleKeyUp(long,int,KeyEvent)|Handles 
|android.text.method.MetaKeyKeyListener.isMetaTracker(CharSequence,Object)|Retu
|android.text.method.MetaKeyKeyListener.isSelectingMetaTracker(CharSequence,Object)|
|android.text.method.MetaKeyKeyListener.onKeyDown(View,Editable,int,KeyEvent)|H
|android.text.method.MetaKeyKeyListener.onKeyUp(View,Editable,int,KeyEvent)|Han
|android.text.method.MetaKeyKeyListener.resetLockedMeta(long)|Call this if you 
|android.text.method.MetaKeyKeyListener.resetLockedMeta(Spannable)|Call this if
|android.text.method.MetaKeyKeyListener.resetMetaState(Spannable)|Resets all me
|android.text.method.MetaKeyKeyListener.startSelecting(View,Spannable)|Start se
|android.text.method.MetaKeyKeyListener.stopSelecting(View,Spannable)|Stop sele

*android.text.method.MetaKeyKeyListener_Description*

This base class encapsulates the behavior for tracking the state of meta keys 
such as SHIFT, ALT and SYM as well as the pseudo-meta state of selecting text. 

Key listeners that care about meta state should inherit from this class; you 
should not instantiate this class directly in a client. 

This class provides two mechanisms for tracking meta state that can be used 
together or independently. 

Methods such as (|android.text.method.MetaKeyKeyListener|) and 
(|android.text.method.MetaKeyKeyListener|) operate on a meta key state bit 
mask. Methods such as (|android.text.method.MetaKeyKeyListener|) and 
(|android.text.method.MetaKeyKeyListener|) operate on meta key state flags 
stored as spans in an (|android.text.Editable|) text buffer. The spans only 
describe the current meta key state of the text editor; they do not carry any 
positional information. 

The behavior of this class varies according to the keyboard capabilities 
described by the (|android.view.KeyCharacterMap|) of the keyboard device such 
as the key modifier behavior(|android.view.KeyCharacterMap|) . 
(|android.text.method.MetaKeyKeyListener|) implements chorded and toggled key 
modifiers. When key modifiers are toggled into a latched or locked state, the 
state of the modifier is stored in the (|android.text.Editable|) text buffer or 
in a meta state integer managed by the client. These latched or locked 
modifiers should be considered to be held in addition to those that the 
keyboard already reported as being pressed in (|android.view.KeyEvent|) . In 
other words, the (|android.text.method.MetaKeyKeyListener|) augments the meta 
state provided by the keyboard; it does not replace it. This distinction is 
important to ensure that meta keys not handled by 
(|android.text.method.MetaKeyKeyListener|) such as (|android.view.KeyEvent|) or 
(|android.view.KeyEvent|) are taken into consideration. 

To ensure correct meta key behavior, the following pattern should be used when 
mapping key codes to characters: 

private char getUnicodeChar(TextKeyListener listener, KeyEvent event, Editable 
textBuffer) { // Use the combined meta states from the event and the key 
listener. int metaState = event.getMetaState() | 
listener.getMetaState(textBuffer); return event.getUnicodeChar(metaState); } 



*int_android.text.method.MetaKeyKeyListener.META_ALT_LOCKED*

Flag that indicates that the ALT key is locked. 


*int_android.text.method.MetaKeyKeyListener.META_ALT_ON*

Flag that indicates that the ALT key is on. Value equals 
(|android.view.KeyEvent|) . 


*int_android.text.method.MetaKeyKeyListener.META_CAP_LOCKED*

Flag that indicates that the SHIFT key is locked in CAPS mode. 


*int_android.text.method.MetaKeyKeyListener.META_SELECTING*




*int_android.text.method.MetaKeyKeyListener.META_SHIFT_ON*

Flag that indicates that the SHIFT key is on. Value equals 
(|android.view.KeyEvent|) . 


*int_android.text.method.MetaKeyKeyListener.META_SYM_LOCKED*

Flag that indicates that the SYM key is locked. 


*int_android.text.method.MetaKeyKeyListener.META_SYM_ON*

Flag that indicates that the SYM key is on. Value equals 
(|android.view.KeyEvent|) . 



*android.text.method.MetaKeyKeyListener()*

public MetaKeyKeyListener()




*android.text.method.MetaKeyKeyListener.adjustMetaAfterKeypress(long)*

public static long adjustMetaAfterKeypress(long state)

Call this method after you handle a keypress so that the meta state will be 
reset to unshifted (if it is not still down) or primed to be reset to unshifted 
(once it is released). Takes the current state, returns the new state. 



*android.text.method.MetaKeyKeyListener.adjustMetaAfterKeypress(Spannable)*

public static void adjustMetaAfterKeypress(android.text.Spannable content)

Call this method after you handle a keypress so that the meta state will be 
reset to unshifted (if it is not still down) or primed to be reset to unshifted 
(once it is released). 



*android.text.method.MetaKeyKeyListener.clearMetaKeyState(Editable,int)*

public static void clearMetaKeyState(
  android.text.Editable content,
  int states)





*android.text.method.MetaKeyKeyListener.clearMetaKeyState(long,int)*

public long clearMetaKeyState(
  long state,
  int which)

Clears the state of the specified meta key if it is locked. 


    state - the meta key state 
    which - meta keys to clear, may be a combination of {@link #META_SHIFT_ON}, {@link 
       #META_ALT_ON} or {@link #META_SYM_ON}. 

*android.text.method.MetaKeyKeyListener.clearMetaKeyState(View,Editable,int)*

public void clearMetaKeyState(
  android.view.View view,
  android.text.Editable content,
  int states)





*android.text.method.MetaKeyKeyListener.getMetaState(CharSequence)*

public static final int getMetaState(java.lang.CharSequence text)

Gets the state of the meta keys. 


    text - the buffer in which the meta key would have been pressed. 

    Returns: an integer in which each bit set to one represents a pressed or locked meta 
             key. 

*android.text.method.MetaKeyKeyListener.getMetaState(CharSequence,int)*

public static final int getMetaState(
  java.lang.CharSequence text,
  int meta)

Gets the state of a particular meta key. 


    meta - META_SHIFT_ON, META_ALT_ON, META_SYM_ON 
    text - the buffer in which the meta key would have been pressed. 

    Returns: 0 if inactive, 1 if active, 2 if locked. 

*android.text.method.MetaKeyKeyListener.getMetaState(CharSequence,int,KeyEvent)*

public static final int getMetaState(
  java.lang.CharSequence text,
  int meta,
  android.view.KeyEvent event)

Gets the state of a particular meta key to use with a particular key event. 

If the key event has been created by a device that does not support toggled key 
modifiers, like a virtual keyboard for example, only the meta state in the key 
event is considered. 


    meta - META_SHIFT_ON, META_ALT_ON, META_SYM_ON 
    text - the buffer in which the meta key would have been pressed. 
    event - the event for which to evaluate the meta state. 

    Returns: 0 if inactive, 1 if active, 2 if locked. 

*android.text.method.MetaKeyKeyListener.getMetaState(CharSequence,KeyEvent)*

public static final int getMetaState(
  java.lang.CharSequence text,
  android.view.KeyEvent event)

Gets the state of the meta keys for a specific key event. 

For input devices that use toggled key modifiers, the `toggled' state is stored 
into the text buffer. This method retrieves the meta state for this event, 
accounting for the stored state. If the event has been created by a device that 
does not support toggled key modifiers, like a virtual device for example, the 
stored state is ignored. 


    text - the buffer in which the meta key would have been pressed. 
    event - the event for which to evaluate the meta state. 

    Returns: an integer in which each bit set to one represents a pressed or locked meta 
             key. 

*android.text.method.MetaKeyKeyListener.getMetaState(long)*

public static final int getMetaState(long state)

Gets the state of the meta keys. 


    state - the current meta state bits. 

    Returns: an integer in which each bit set to one represents a pressed or locked meta 
             key. 

*android.text.method.MetaKeyKeyListener.getMetaState(long,int)*

public static final int getMetaState(
  long state,
  int meta)

Gets the state of a particular meta key. 


    state - the current state bits. 
    meta - META_SHIFT_ON, META_ALT_ON, or META_SYM_ON 

    Returns: 0 if inactive, 1 if active, 2 if locked. 

*android.text.method.MetaKeyKeyListener.handleKeyDown(long,int,KeyEvent)*

public static long handleKeyDown(
  long state,
  int keyCode,
  android.view.KeyEvent event)

Handles presses of the meta keys. 



*android.text.method.MetaKeyKeyListener.handleKeyUp(long,int,KeyEvent)*

public static long handleKeyUp(
  long state,
  int keyCode,
  android.view.KeyEvent event)

Handles release of the meta keys. 



*android.text.method.MetaKeyKeyListener.isMetaTracker(CharSequence,Object)*

public static boolean isMetaTracker(
  java.lang.CharSequence text,
  java.lang.Object what)

Returns true if this object is one that this class would use to keep track of 
any meta state in the specified text. 



*android.text.method.MetaKeyKeyListener.isSelectingMetaTracker(CharSequence,Object)*

public static boolean isSelectingMetaTracker(
  java.lang.CharSequence text,
  java.lang.Object what)

Returns true if this object is one that this class would use to keep track of 
the selecting meta state in the specified text. 



*android.text.method.MetaKeyKeyListener.onKeyDown(View,Editable,int,KeyEvent)*

public boolean onKeyDown(
  android.view.View view,
  android.text.Editable content,
  int keyCode,
  android.view.KeyEvent event)

Handles presses of the meta keys. 



*android.text.method.MetaKeyKeyListener.onKeyUp(View,Editable,int,KeyEvent)*

public boolean onKeyUp(
  android.view.View view,
  android.text.Editable content,
  int keyCode,
  android.view.KeyEvent event)

Handles release of the meta keys. 



*android.text.method.MetaKeyKeyListener.resetLockedMeta(long)*

public static long resetLockedMeta(long state)

Call this if you are a method that ignores the locked meta state (arrow keys, 
for example) and you handle a key. 



*android.text.method.MetaKeyKeyListener.resetLockedMeta(Spannable)*

protected static void resetLockedMeta(android.text.Spannable content)

Call this if you are a method that ignores the locked meta state (arrow keys, 
for example) and you handle a key. 



*android.text.method.MetaKeyKeyListener.resetMetaState(Spannable)*

public static void resetMetaState(android.text.Spannable text)

Resets all meta state to inactive. 



*android.text.method.MetaKeyKeyListener.startSelecting(View,Spannable)*

public static void startSelecting(
  android.view.View view,
  android.text.Spannable content)

Start selecting text. 



*android.text.method.MetaKeyKeyListener.stopSelecting(View,Spannable)*

public static void stopSelecting(
  android.view.View view,
  android.text.Spannable content)

Stop selecting text. This does not actually collapse the selection; call 
(|android.text.Selection|) too. 




