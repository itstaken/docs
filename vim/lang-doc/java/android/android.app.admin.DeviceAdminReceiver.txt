*android.app.admin.DeviceAdminReceiver* *DeviceAdminReceiver* Base class for imp

public class DeviceAdminReceiver
  extends    |android.content.BroadcastReceiver|

|android.app.admin.DeviceAdminReceiver_Description|
|android.app.admin.DeviceAdminReceiver_Fields|
|android.app.admin.DeviceAdminReceiver_Constructors|
|android.app.admin.DeviceAdminReceiver_Methods|

================================================================================

*android.app.admin.DeviceAdminReceiver_Fields*
|java.lang.String_android.app.admin.DeviceAdminReceiver.ACTION_DEVICE_ADMIN_DISABLE_REQUESTED|
|java.lang.String_android.app.admin.DeviceAdminReceiver.ACTION_DEVICE_ADMIN_DISABLED|
|java.lang.String_android.app.admin.DeviceAdminReceiver.ACTION_DEVICE_ADMIN_ENABLED|
|java.lang.String_android.app.admin.DeviceAdminReceiver.ACTION_PASSWORD_CHANGED|
|java.lang.String_android.app.admin.DeviceAdminReceiver.ACTION_PASSWORD_EXPIRING|
|java.lang.String_android.app.admin.DeviceAdminReceiver.ACTION_PASSWORD_FAILED|
|java.lang.String_android.app.admin.DeviceAdminReceiver.ACTION_PASSWORD_SUCCEEDED|
|java.lang.String_android.app.admin.DeviceAdminReceiver.DEVICE_ADMIN_META_DATA|
|java.lang.String_android.app.admin.DeviceAdminReceiver.EXTRA_DISABLE_WARNING|

*android.app.admin.DeviceAdminReceiver_Constructors*
|android.app.admin.DeviceAdminReceiver()|

*android.app.admin.DeviceAdminReceiver_Methods*
|android.app.admin.DeviceAdminReceiver.getManager(Context)|Retrieve the DeviceP
|android.app.admin.DeviceAdminReceiver.getWho(Context)|Retrieve the ComponentNa
|android.app.admin.DeviceAdminReceiver.onDisabled(Context,Intent)|Called prior 
|android.app.admin.DeviceAdminReceiver.onDisableRequested(Context,Intent)|Calle
|android.app.admin.DeviceAdminReceiver.onEnabled(Context,Intent)|Called after t
|android.app.admin.DeviceAdminReceiver.onPasswordChanged(Context,Intent)|Called
|android.app.admin.DeviceAdminReceiver.onPasswordExpiring(Context,Intent)|Calle
|android.app.admin.DeviceAdminReceiver.onPasswordFailed(Context,Intent)|Called 
|android.app.admin.DeviceAdminReceiver.onPasswordSucceeded(Context,Intent)|Call
|android.app.admin.DeviceAdminReceiver.onReceive(Context,Intent)|Intercept stan

*android.app.admin.DeviceAdminReceiver_Description*

Base class for implementing a device administration component. This class 
provides a convenience for interpreting the raw intent actions that are sent by 
the system. 

The callback methods, like the base 
BroadcastReceiver.onReceive()(|android.content.BroadcastReceiver|) method, 
happen on the main thread of the process. Thus long running operations must be 
done on another thread. Note that because a receiver is done once returning 
from its receive function, such long-running operations should probably be done 
in a (|android.app.Service|) . 

When publishing your DeviceAdmin subclass as a receiver, it must handle 
(|android.app.admin.DeviceAdminReceiver|) and require the 
(|android.Manifest.permission|) permission. A typical manifest entry would look 
like:development/samples/ApiDemos/AndroidManifest.xml 
device_admin_declarationThe meta-data referenced here provides addition 
information specific to the device administrator, as parsed by the 
(|android.app.admin.DeviceAdminInfo|) class. A typical file would 
be:development/samples/ApiDemos/res/xml/device_admin_sample.xml meta_data 
Developer Guides For more information about device administration, read the <a 
href="guide/topics/admin/device-admin.html">Device Administration developer 
guide. 



*java.lang.String_android.app.admin.DeviceAdminReceiver.ACTION_DEVICE_ADMIN_DISABLE_REQUESTED*

Action sent to a device administrator when the user has requested to disable 
it, but before this has actually been done. This gives you a chance to supply a 
message to the user about the impact of disabling your admin, by setting the 
extra field (|android.app.admin.DeviceAdminReceiver|) in the result Intent. If 
not set, no warning will be displayed. If set, the given text will be shown to 
the user before they disable your admin. 


*java.lang.String_android.app.admin.DeviceAdminReceiver.ACTION_DEVICE_ADMIN_DISABLED*

Action sent to a device administrator when the user has disabled it. Upon 
return, the application no longer has access to the protected device policy 
manager APIs. You will generally handle this in 
(|android.app.admin.DeviceAdminReceiver|) . Note that this action will be sent 
the receiver regardless of whether it is explicitly listed in its intent 
filter. 


*java.lang.String_android.app.admin.DeviceAdminReceiver.ACTION_DEVICE_ADMIN_ENABLED*

This is the primary action that a device administrator must implement to be 
allowed to manage a device. This will be set to the receiver when the user 
enables it for administration. You will generally handle this in 
(|android.app.admin.DeviceAdminReceiver|) . To be supported, the receiver must 
also require the (|android.Manifest.permission|) permission so that other 
applications can not abuse it. 


*java.lang.String_android.app.admin.DeviceAdminReceiver.ACTION_PASSWORD_CHANGED*

Action sent to a device administrator when the user has changed the password of 
their device. You can at this point check the characteristics of the new 
password with 
DevicePolicyManager.isActivePasswordSufficient()(|android.app.admin.DevicePolicyManager|)
. You will generally handle this in (|android.app.admin.DeviceAdminReceiver|) . 

The calling device admin must have requested 
(|android.app.admin.DeviceAdminInfo|) to receive this broadcast. 


*java.lang.String_android.app.admin.DeviceAdminReceiver.ACTION_PASSWORD_EXPIRING*

Action periodically sent to a device administrator when the device password is 
expiring. 

The calling device admin must have requested 
(|android.app.admin.DeviceAdminInfo|) to receive this broadcast. 


*java.lang.String_android.app.admin.DeviceAdminReceiver.ACTION_PASSWORD_FAILED*

Action sent to a device administrator when the user has failed at attempted to 
enter the password. You can at this point check the number of failed password 
attempts there have been with 
DevicePolicyManager.getCurrentFailedPasswordAttempts()(|android.app.admin.DevicePolicyManager|)
. You will generally handle this in (|android.app.admin.DeviceAdminReceiver|) . 

The calling device admin must have requested 
(|android.app.admin.DeviceAdminInfo|) to receive this broadcast. 


*java.lang.String_android.app.admin.DeviceAdminReceiver.ACTION_PASSWORD_SUCCEEDED*

Action sent to a device administrator when the user has successfully entered 
their password, after failing one or more times. 

The calling device admin must have requested 
(|android.app.admin.DeviceAdminInfo|) to receive this broadcast. 


*java.lang.String_android.app.admin.DeviceAdminReceiver.DEVICE_ADMIN_META_DATA*

Name under which a DevicePolicy component publishes information about itself. 
This meta-data must reference an XML resource containing a device-admin tag. 
XXX TO DO: describe syntax. 


*java.lang.String_android.app.admin.DeviceAdminReceiver.EXTRA_DISABLE_WARNING*

A CharSequence that can be shown to the user informing them of the impact of 
disabling your admin. 



*android.app.admin.DeviceAdminReceiver()*

public DeviceAdminReceiver()




*android.app.admin.DeviceAdminReceiver.getManager(Context)*

public |android.app.admin.DevicePolicyManager| getManager(android.content.Context context)

Retrieve the DevicePolicyManager interface for this administrator to work with 
the system. 



*android.app.admin.DeviceAdminReceiver.getWho(Context)*

public |android.content.ComponentName| getWho(android.content.Context context)

Retrieve the ComponentName describing who this device administrator is, for use 
in (|android.app.admin.DevicePolicyManager|) APIs that require the 
administrator to identify itself. 



*android.app.admin.DeviceAdminReceiver.onDisabled(Context,Intent)*

public void onDisabled(
  android.content.Context context,
  android.content.Intent intent)

Called prior to the administrator being disabled, as a result of receiving 
(|android.app.admin.DeviceAdminReceiver|) . Upon return, you can no longer use 
the protected parts of the (|android.app.admin.DevicePolicyManager|) API. 


    context - The running context as per {@link #onReceive}. 
    intent - The received intent as per {@link #onReceive}. 

*android.app.admin.DeviceAdminReceiver.onDisableRequested(Context,Intent)*

public |java.lang.CharSequence| onDisableRequested(
  android.content.Context context,
  android.content.Intent intent)

Called when the user has asked to disable the administrator, as a result of 
receiving (|android.app.admin.DeviceAdminReceiver|) , giving you a chance to 
present a warning message to them. The message is returned as the result; if 
null is returned (the default implementation), no message will be displayed. 


    context - The running context as per {@link #onReceive}. 
    intent - The received intent as per {@link #onReceive}. 

    Returns: Return the warning message to display to the user before being disabled; if 
             null is returned, no message is displayed. 

*android.app.admin.DeviceAdminReceiver.onEnabled(Context,Intent)*

public void onEnabled(
  android.content.Context context,
  android.content.Intent intent)

Called after the administrator is first enabled, as a result of receiving 
(|android.app.admin.DeviceAdminReceiver|) . At this point you can use 
(|android.app.admin.DevicePolicyManager|) to set your desired policies. 


    context - The running context as per {@link #onReceive}. 
    intent - The received intent as per {@link #onReceive}. 

*android.app.admin.DeviceAdminReceiver.onPasswordChanged(Context,Intent)*

public void onPasswordChanged(
  android.content.Context context,
  android.content.Intent intent)

Called after the user has changed their password, as a result of receiving 
(|android.app.admin.DeviceAdminReceiver|) . At this point you can use 
DevicePolicyManager.getCurrentFailedPasswordAttempts()(|android.app.admin.DevicePolicyManager|)
to retrieve the active password characteristics. 


    context - The running context as per {@link #onReceive}. 
    intent - The received intent as per {@link #onReceive}. 

*android.app.admin.DeviceAdminReceiver.onPasswordExpiring(Context,Intent)*

public void onPasswordExpiring(
  android.content.Context context,
  android.content.Intent intent)

Called periodically when the password is about to expire or has expired. It 
will typically be called at these times: on device boot, once per day before 
the password expires, and at the time when the password expires. 

If the password is not updated by the user, this method will continue to be 
called once per day until the password is changed or the device admin disables 
password expiration. 

The admin will typically post a notification requesting the user to change 
their password in response to this call. The actual password expiration time 
can be obtained by calling (|android.app.admin.DevicePolicyManager|) The admin 
should be sure to take down any notifications it posted in response to this 
call when it receives (|android.app.admin.DeviceAdminReceiver|) . 


    context - The running context as per {@link #onReceive}. 
    intent - The received intent as per {@link #onReceive}. 

*android.app.admin.DeviceAdminReceiver.onPasswordFailed(Context,Intent)*

public void onPasswordFailed(
  android.content.Context context,
  android.content.Intent intent)

Called after the user has failed at entering their current password, as a 
result of receiving (|android.app.admin.DeviceAdminReceiver|) . At this point 
you can use (|android.app.admin.DevicePolicyManager|) to retrieve the number of 
failed password attempts. 


    context - The running context as per {@link #onReceive}. 
    intent - The received intent as per {@link #onReceive}. 

*android.app.admin.DeviceAdminReceiver.onPasswordSucceeded(Context,Intent)*

public void onPasswordSucceeded(
  android.content.Context context,
  android.content.Intent intent)

Called after the user has succeeded at entering their current password, as a 
result of receiving (|android.app.admin.DeviceAdminReceiver|) . This will only 
be received the first time they succeed after having previously failed. 


    context - The running context as per {@link #onReceive}. 
    intent - The received intent as per {@link #onReceive}. 

*android.app.admin.DeviceAdminReceiver.onReceive(Context,Intent)*

public void onReceive(
  android.content.Context context,
  android.content.Intent intent)

Intercept standard device administrator broadcasts. Implementations should not 
override this method; it is better to implement the convenience callbacks for 
each action. 




