*android.hardware.camera2.impl.CameraDevice* *CameraDevice* HAL2.1+ implementati

public class CameraDevice
  extends    |java.lang.Object|
  implements |android.hardware.camera2.CameraDevice|

|android.hardware.camera2.impl.CameraDevice_Description|
|android.hardware.camera2.impl.CameraDevice_Fields|
|android.hardware.camera2.impl.CameraDevice_Constructors|
|android.hardware.camera2.impl.CameraDevice_Methods|

================================================================================

*android.hardware.camera2.impl.CameraDevice_Constructors*
|android.hardware.camera2.impl.CameraDevice(String,CameraDevice.StateListener,Handler)|

*android.hardware.camera2.impl.CameraDevice_Methods*
|android.hardware.camera2.impl.CameraDevice.capture(CaptureRequest,CameraDevice.CaptureListener,Handler)|
|android.hardware.camera2.impl.CameraDevice.captureBurst(List<CaptureRequest>,CameraDevice.CaptureListener,Handler)|
|android.hardware.camera2.impl.CameraDevice.close()|
|android.hardware.camera2.impl.CameraDevice.configureOutputs(List<Surface>)|
|android.hardware.camera2.impl.CameraDevice.createCaptureRequest(int)|
|android.hardware.camera2.impl.CameraDevice.finalize()|
|android.hardware.camera2.impl.CameraDevice.flush()|
|android.hardware.camera2.impl.CameraDevice.getCallbacks()|
|android.hardware.camera2.impl.CameraDevice.getId()|
|android.hardware.camera2.impl.CameraDevice.setRemoteDevice(ICameraDeviceUser)|
|android.hardware.camera2.impl.CameraDevice.setRepeatingBurst(List<CaptureRequest>,CameraDevice.CaptureListener,Handler)|
|android.hardware.camera2.impl.CameraDevice.setRepeatingRequest(CaptureRequest,CameraDevice.CaptureListener,Handler)|
|android.hardware.camera2.impl.CameraDevice.stopRepeating()|
|android.hardware.camera2.impl.CameraDevice.waitUntilIdle()|

*android.hardware.camera2.impl.CameraDevice_Description*

HAL2.1+ implementation of CameraDevice. Use CameraManager#open to instantiate 



*android.hardware.camera2.impl.CameraDevice(String,CameraDevice.StateListener,Handler)*

public CameraDevice(
  java.lang.String cameraId,
  android.hardware.camera2.CameraDevice.StateListener listener,
  android.os.Handler handler)




*android.hardware.camera2.impl.CameraDevice.capture(CaptureRequest,CameraDevice.CaptureListener,Handler)*

public int capture(
  android.hardware.camera2.CaptureRequest request,
  android.hardware.camera2.CameraDevice.CaptureListener listener,
  android.os.Handler handler)
  throws |android.hardware.camera2.CameraAccessException|
         




*android.hardware.camera2.impl.CameraDevice.captureBurst(List<CaptureRequest>,CameraDevice.CaptureListener,Handler)*

public int captureBurst(
  java.util.List<android.hardware.camera2.CaptureRequest> requests,
  android.hardware.camera2.CameraDevice.CaptureListener listener,
  android.os.Handler handler)
  throws |android.hardware.camera2.CameraAccessException|
         




*android.hardware.camera2.impl.CameraDevice.close()*

public void close()





*android.hardware.camera2.impl.CameraDevice.configureOutputs(List<Surface>)*

public void configureOutputs(java.util.List<android.view.Surface> outputs)
  throws |android.hardware.camera2.CameraAccessException|
         




*android.hardware.camera2.impl.CameraDevice.createCaptureRequest(int)*

public |android.hardware.camera2.CaptureRequest.Builder| createCaptureRequest(int templateType)
  throws |android.hardware.camera2.CameraAccessException|
         




*android.hardware.camera2.impl.CameraDevice.finalize()*

protected void finalize()
  throws |java.lang.Throwable|
         




*android.hardware.camera2.impl.CameraDevice.flush()*

public void flush()
  throws |android.hardware.camera2.CameraAccessException|
         




*android.hardware.camera2.impl.CameraDevice.getCallbacks()*

public |android.hardware.camera2.impl.CameraDevice.CameraDeviceCallbacks| getCallbacks()





*android.hardware.camera2.impl.CameraDevice.getId()*

public |java.lang.String| getId()





*android.hardware.camera2.impl.CameraDevice.setRemoteDevice(ICameraDeviceUser)*

public void setRemoteDevice(ICameraDeviceUser remoteDevice)





*android.hardware.camera2.impl.CameraDevice.setRepeatingBurst(List<CaptureRequest>,CameraDevice.CaptureListener,Handler)*

public int setRepeatingBurst(
  java.util.List<android.hardware.camera2.CaptureRequest> requests,
  android.hardware.camera2.CameraDevice.CaptureListener listener,
  android.os.Handler handler)
  throws |android.hardware.camera2.CameraAccessException|
         




*android.hardware.camera2.impl.CameraDevice.setRepeatingRequest(CaptureRequest,CameraDevice.CaptureListener,Handler)*

public int setRepeatingRequest(
  android.hardware.camera2.CaptureRequest request,
  android.hardware.camera2.CameraDevice.CaptureListener listener,
  android.os.Handler handler)
  throws |android.hardware.camera2.CameraAccessException|
         




*android.hardware.camera2.impl.CameraDevice.stopRepeating()*

public void stopRepeating()
  throws |android.hardware.camera2.CameraAccessException|
         




*android.hardware.camera2.impl.CameraDevice.waitUntilIdle()*

public void waitUntilIdle()
  throws |android.hardware.camera2.CameraAccessException|
         





