*android.widget.RemoteViewsAdapter* *RemoteViewsAdapter* 

public class RemoteViewsAdapter
  extends    |android.widget.BaseAdapter|
  implements |android.os.Handler.Callback|

|android.widget.RemoteViewsAdapter_Description|
|android.widget.RemoteViewsAdapter_Fields|
|android.widget.RemoteViewsAdapter_Constructors|
|android.widget.RemoteViewsAdapter_Methods|

================================================================================

*android.widget.RemoteViewsAdapter_Constructors*
|android.widget.RemoteViewsAdapter(Context,Intent,RemoteViewsAdapter.RemoteAdapterConnectionCallback)|

*android.widget.RemoteViewsAdapter_Methods*
|android.widget.RemoteViewsAdapter.finalize()|
|android.widget.RemoteViewsAdapter.getCount()|
|android.widget.RemoteViewsAdapter.getItem(int)|
|android.widget.RemoteViewsAdapter.getItemId(int)|
|android.widget.RemoteViewsAdapter.getItemViewType(int)|
|android.widget.RemoteViewsAdapter.getRemoteViewsServiceIntent()|
|android.widget.RemoteViewsAdapter.getView(int,View,ViewGroup)|
|android.widget.RemoteViewsAdapter.getViewTypeCount()|
|android.widget.RemoteViewsAdapter.handleMessage(Message)|
|android.widget.RemoteViewsAdapter.hasStableIds()|
|android.widget.RemoteViewsAdapter.isDataReady()|
|android.widget.RemoteViewsAdapter.isEmpty()|
|android.widget.RemoteViewsAdapter.notifyDataSetChanged()|
|android.widget.RemoteViewsAdapter.saveRemoteViewsCache()|
|android.widget.RemoteViewsAdapter.setRemoteViewsOnClickHandler(RemoteViews.OnClickHandler)|
|android.widget.RemoteViewsAdapter.setVisibleRangeHint(int,int)|This method all

*android.widget.RemoteViewsAdapter_Description*





*android.widget.RemoteViewsAdapter(Context,Intent,RemoteViewsAdapter.RemoteAdapterConnectionCallback)*

public RemoteViewsAdapter(
  android.content.Context context,
  android.content.Intent intent,
  android.widget.RemoteViewsAdapter.RemoteAdapterConnectionCallback callback)




*android.widget.RemoteViewsAdapter.finalize()*

protected void finalize()
  throws |java.lang.Throwable|
         




*android.widget.RemoteViewsAdapter.getCount()*

public int getCount()





*android.widget.RemoteViewsAdapter.getItem(int)*

public |java.lang.Object| getItem(int position)





*android.widget.RemoteViewsAdapter.getItemId(int)*

public long getItemId(int position)





*android.widget.RemoteViewsAdapter.getItemViewType(int)*

public int getItemViewType(int position)





*android.widget.RemoteViewsAdapter.getRemoteViewsServiceIntent()*

public |android.content.Intent| getRemoteViewsServiceIntent()





*android.widget.RemoteViewsAdapter.getView(int,View,ViewGroup)*

public |android.view.View| getView(
  int position,
  android.view.View convertView,
  android.view.ViewGroup parent)





*android.widget.RemoteViewsAdapter.getViewTypeCount()*

public int getViewTypeCount()





*android.widget.RemoteViewsAdapter.handleMessage(Message)*

public boolean handleMessage(android.os.Message msg)





*android.widget.RemoteViewsAdapter.hasStableIds()*

public boolean hasStableIds()





*android.widget.RemoteViewsAdapter.isDataReady()*

public boolean isDataReady()





*android.widget.RemoteViewsAdapter.isEmpty()*

public boolean isEmpty()





*android.widget.RemoteViewsAdapter.notifyDataSetChanged()*

public void notifyDataSetChanged()





*android.widget.RemoteViewsAdapter.saveRemoteViewsCache()*

public void saveRemoteViewsCache()





*android.widget.RemoteViewsAdapter.setRemoteViewsOnClickHandler(RemoteViews.OnClickHandler)*

public void setRemoteViewsOnClickHandler(android.widget.RemoteViews.OnClickHandler handler)





*android.widget.RemoteViewsAdapter.setVisibleRangeHint(int,int)*

public void setVisibleRangeHint(
  int lowerBound,
  int upperBound)

This method allows an AdapterView using this Adapter to provide information 
about which views are currently being displayed. This allows for certain 
optimizations and preloading which wouldn't otherwise be possible. 




