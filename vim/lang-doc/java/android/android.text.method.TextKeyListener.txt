*android.text.method.TextKeyListener* *TextKeyListener* This is the key listener

public class TextKeyListener
  extends    |android.text.method.BaseKeyListener|
  implements |android.text.SpanWatcher|

|android.text.method.TextKeyListener_Description|
|android.text.method.TextKeyListener_Fields|
|android.text.method.TextKeyListener_Constructors|
|android.text.method.TextKeyListener_Methods|

================================================================================

*android.text.method.TextKeyListener_Constructors*
|android.text.method.TextKeyListener(TextKeyListener.Capitalize,boolean)|Create

*android.text.method.TextKeyListener_Methods*
|android.text.method.TextKeyListener.clear(Editable)|Clear all the input state 
|android.text.method.TextKeyListener.getInputType()|
|android.text.method.TextKeyListener.getInstance()|Returns a new or existing in
|android.text.method.TextKeyListener.getInstance(boolean,TextKeyListener.Capitalize)|
|android.text.method.TextKeyListener.onKeyDown(View,Editable,int,KeyEvent)|
|android.text.method.TextKeyListener.onKeyOther(View,Editable,KeyEvent)|
|android.text.method.TextKeyListener.onKeyUp(View,Editable,int,KeyEvent)|
|android.text.method.TextKeyListener.onSpanAdded(Spannable,Object,int,int)|
|android.text.method.TextKeyListener.onSpanChanged(Spannable,Object,int,int,int,int)|
|android.text.method.TextKeyListener.onSpanRemoved(Spannable,Object,int,int)|
|android.text.method.TextKeyListener.release()|
|android.text.method.TextKeyListener.shouldCap(TextKeyListener.Capitalize,CharSequence,int)|

*android.text.method.TextKeyListener_Description*

This is the key listener for typing normal text. It delegates to other key 
listeners appropriate to the current keyboard and language. 

As for all implementations of (|android.text.method.KeyListener|) , this class 
is only concerned with hardware keyboards. Software input methods have no 
obligation to trigger the methods in this class. 



*android.text.method.TextKeyListener(TextKeyListener.Capitalize,boolean)*

public TextKeyListener(
  android.text.method.TextKeyListener.Capitalize cap,
  boolean autotext)

Creates a new TextKeyListener with the specified capitalization and correction 
properties. 

    cap - when, if ever, to automatically capitalize. 
    autotext - whether to automatically do spelling corrections. 

*android.text.method.TextKeyListener.clear(Editable)*

public static void clear(android.text.Editable e)

Clear all the input state (autotext, autocap, multitap, undo) from the 
specified Editable, going beyond Editable.clear(), which just clears the text 
but not the input state. 


    e - the buffer whose text and state are to be cleared. 

*android.text.method.TextKeyListener.getInputType()*

public int getInputType()





*android.text.method.TextKeyListener.getInstance()*

public static |android.text.method.TextKeyListener| getInstance()

Returns a new or existing instance with no automatic capitalization or 
correction. 



*android.text.method.TextKeyListener.getInstance(boolean,TextKeyListener.Capitalize)*

public static |android.text.method.TextKeyListener| getInstance(
  boolean autotext,
  android.text.method.TextKeyListener.Capitalize cap)

Returns a new or existing instance with the specified capitalization and 
correction properties. 


    cap - when, if ever, to automatically capitalize. 
    autotext - whether to automatically do spelling corrections. 

*android.text.method.TextKeyListener.onKeyDown(View,Editable,int,KeyEvent)*

public boolean onKeyDown(
  android.view.View view,
  android.text.Editable content,
  int keyCode,
  android.view.KeyEvent event)





*android.text.method.TextKeyListener.onKeyOther(View,Editable,KeyEvent)*

public boolean onKeyOther(
  android.view.View view,
  android.text.Editable content,
  android.view.KeyEvent event)





*android.text.method.TextKeyListener.onKeyUp(View,Editable,int,KeyEvent)*

public boolean onKeyUp(
  android.view.View view,
  android.text.Editable content,
  int keyCode,
  android.view.KeyEvent event)





*android.text.method.TextKeyListener.onSpanAdded(Spannable,Object,int,int)*

public void onSpanAdded(
  android.text.Spannable s,
  java.lang.Object what,
  int start,
  int end)





*android.text.method.TextKeyListener.onSpanChanged(Spannable,Object,int,int,int,int)*

public void onSpanChanged(
  android.text.Spannable s,
  java.lang.Object what,
  int start,
  int end,
  int st,
  int en)





*android.text.method.TextKeyListener.onSpanRemoved(Spannable,Object,int,int)*

public void onSpanRemoved(
  android.text.Spannable s,
  java.lang.Object what,
  int start,
  int end)





*android.text.method.TextKeyListener.release()*

public void release()





*android.text.method.TextKeyListener.shouldCap(TextKeyListener.Capitalize,CharSequence,int)*

public static boolean shouldCap(
  android.text.method.TextKeyListener.Capitalize cap,
  java.lang.CharSequence cs,
  int off)

Returns whether it makes sense to automatically capitalize at the specified 
position in the specified text, with the specified rules. 


    cap - the capitalization rules to consider. 
    cs - the text in which an insertion is being made. 
    off - the offset into that text where the insertion is being made. 

    Returns: whether the character being inserted should be capitalized. 


