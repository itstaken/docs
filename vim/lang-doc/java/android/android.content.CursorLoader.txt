*android.content.CursorLoader* *CursorLoader* A loader that queries theContentRe

public class CursorLoader
  extends    |android.content.AsyncTaskLoader|

|android.content.CursorLoader_Description|
|android.content.CursorLoader_Fields|
|android.content.CursorLoader_Constructors|
|android.content.CursorLoader_Methods|

================================================================================

*android.content.CursorLoader_Constructors*
|android.content.CursorLoader(Context)|Creates an empty unspecified CursorLoade
|android.content.CursorLoader(Context,Uri,String[],String,String[],String)|Crea

*android.content.CursorLoader_Methods*
|android.content.CursorLoader.cancelLoadInBackground()|
|android.content.CursorLoader.deliverResult(Cursor)|
|android.content.CursorLoader.dump(String,FileDescriptor,PrintWriter,String[])|
|android.content.CursorLoader.getProjection()|
|android.content.CursorLoader.getSelection()|
|android.content.CursorLoader.getSelectionArgs()|
|android.content.CursorLoader.getSortOrder()|
|android.content.CursorLoader.getUri()|
|android.content.CursorLoader.loadInBackground()|
|android.content.CursorLoader.onCanceled(Cursor)|
|android.content.CursorLoader.onReset()|
|android.content.CursorLoader.onStartLoading()|Starts an asynchronous load of t
|android.content.CursorLoader.onStopLoading()|Must be called from the UI thread
|android.content.CursorLoader.setProjection(String[])|
|android.content.CursorLoader.setSelection(String)|
|android.content.CursorLoader.setSelectionArgs(String[])|
|android.content.CursorLoader.setSortOrder(String)|
|android.content.CursorLoader.setUri(Uri)|

*android.content.CursorLoader_Description*

A loader that queries the (|android.content.ContentResolver|) and returns a 
(|android.database.Cursor|) . This class implements the 
(|android.content.Loader|) protocol in a standard way for querying cursors, 
building on (|android.content.AsyncTaskLoader|) to perform the cursor query on 
a background thread so that it does not block the application's UI. 

A CursorLoader must be built with the full information for the query to 
perform, either through the (|android.content.CursorLoader|) or creating an 
empty instance with (|android.content.CursorLoader|) and filling in the desired 
paramters with (|android.content.CursorLoader|) , 
(|android.content.CursorLoader|) , (|android.content.CursorLoader|) , 
(|android.content.CursorLoader|) , and (|android.content.CursorLoader|) . 



*android.content.CursorLoader(Context)*

public CursorLoader(android.content.Context context)

Creates an empty unspecified CursorLoader. You must follow this with calls to 
(|android.content.CursorLoader|) , (|android.content.CursorLoader|) , etc to 
specify the query to perform. 


*android.content.CursorLoader(Context,Uri,String[],String,String[],String)*

public CursorLoader(
  android.content.Context context,
  android.net.Uri uri,
  java.lang.String[] projection,
  java.lang.String selection,
  java.lang.String[] selectionArgs,
  java.lang.String sortOrder)

Creates a fully-specified CursorLoader. See 
ContentResolver.query()(|android.content.ContentResolver|) for documentation on 
the meaning of the parameters. These will be passed as-is to that call. 


*android.content.CursorLoader.cancelLoadInBackground()*

public void cancelLoadInBackground()





*android.content.CursorLoader.deliverResult(Cursor)*

public void deliverResult(android.database.Cursor cursor)





*android.content.CursorLoader.dump(String,FileDescriptor,PrintWriter,String[])*

public void dump(
  java.lang.String prefix,
  java.io.FileDescriptor fd,
  java.io.PrintWriter writer,
  java.lang.String[] args)





*android.content.CursorLoader.getProjection()*

public |java.lang.String|[] getProjection()





*android.content.CursorLoader.getSelection()*

public |java.lang.String| getSelection()





*android.content.CursorLoader.getSelectionArgs()*

public |java.lang.String|[] getSelectionArgs()





*android.content.CursorLoader.getSortOrder()*

public |java.lang.String| getSortOrder()





*android.content.CursorLoader.getUri()*

public |android.net.Uri| getUri()





*android.content.CursorLoader.loadInBackground()*

public |android.database.Cursor| loadInBackground()





*android.content.CursorLoader.onCanceled(Cursor)*

public void onCanceled(android.database.Cursor cursor)





*android.content.CursorLoader.onReset()*

protected void onReset()





*android.content.CursorLoader.onStartLoading()*

protected void onStartLoading()

Starts an asynchronous load of the contacts list data. When the result is ready 
the callbacks will be called on the UI thread. If a previous load has been 
completed and is still valid the result may be passed to the callbacks 
immediately. 

Must be called from the UI thread 



*android.content.CursorLoader.onStopLoading()*

protected void onStopLoading()

Must be called from the UI thread 



*android.content.CursorLoader.setProjection(String[])*

public void setProjection(java.lang.String[] projection)





*android.content.CursorLoader.setSelection(String)*

public void setSelection(java.lang.String selection)





*android.content.CursorLoader.setSelectionArgs(String[])*

public void setSelectionArgs(java.lang.String[] selectionArgs)





*android.content.CursorLoader.setSortOrder(String)*

public void setSortOrder(java.lang.String sortOrder)





*android.content.CursorLoader.setUri(Uri)*

public void setUri(android.net.Uri uri)






