*android.os.BatteryStats.Uid.Proc* *BatteryStats.Uid.Proc* The statistics associ

public abstract static class BatteryStats.Uid.Proc
  extends    |java.lang.Object|

|android.os.BatteryStats.Uid.Proc_Description|
|android.os.BatteryStats.Uid.Proc_Fields|
|android.os.BatteryStats.Uid.Proc_Constructors|
|android.os.BatteryStats.Uid.Proc_Methods|

================================================================================

*android.os.BatteryStats.Uid.Proc_Constructors*
|android.os.BatteryStats.Uid.Proc()|

*android.os.BatteryStats.Uid.Proc_Methods*
|android.os.BatteryStats.Uid.Proc.countExcessivePowers()|
|android.os.BatteryStats.Uid.Proc.getExcessivePower(int)|
|android.os.BatteryStats.Uid.Proc.getForegroundTime(int)|Returns the cpu time s
|android.os.BatteryStats.Uid.Proc.getStarts(int)|Returns the number of times th
|android.os.BatteryStats.Uid.Proc.getSystemTime(int)|Returns the total time (in
|android.os.BatteryStats.Uid.Proc.getTimeAtCpuSpeedStep(int,int)|Returns the ap
|android.os.BatteryStats.Uid.Proc.getUserTime(int)|Returns the total time (in 1

*android.os.BatteryStats.Uid.Proc_Description*

The statistics associated with a particular process. 



*android.os.BatteryStats.Uid.Proc()*

public BatteryStats.Uid.Proc()




*android.os.BatteryStats.Uid.Proc.countExcessivePowers()*

public abstract int countExcessivePowers()





*android.os.BatteryStats.Uid.Proc.getExcessivePower(int)*

public abstract |android.os.BatteryStats.Uid.Proc.ExcessivePower| getExcessivePower(int i)





*android.os.BatteryStats.Uid.Proc.getForegroundTime(int)*

public abstract long getForegroundTime(int which)

Returns the cpu time spent in microseconds while the process was in the 
foreground. 


    which - one of STATS_TOTAL, STATS_LAST, STATS_CURRENT or STATS_UNPLUGGED 

    Returns: foreground cpu time in microseconds 

*android.os.BatteryStats.Uid.Proc.getStarts(int)*

public abstract int getStarts(int which)

Returns the number of times the process has been started. 


    which - one of STATS_TOTAL, STATS_LAST, or STATS_CURRENT. 

*android.os.BatteryStats.Uid.Proc.getSystemTime(int)*

public abstract long getSystemTime(int which)

Returns the total time (in 1/100 sec) spent executing in system code. 


    which - one of STATS_TOTAL, STATS_LAST, or STATS_CURRENT. 

*android.os.BatteryStats.Uid.Proc.getTimeAtCpuSpeedStep(int,int)*

public abstract long getTimeAtCpuSpeedStep(
  int speedStep,
  int which)

Returns the approximate cpu time spent in microseconds, at a certain CPU speed. 


    speedStep - the index of the CPU speed. This is not the actual speed of the CPU. 
    which - one of STATS_TOTAL, STATS_LAST, STATS_CURRENT or STATS_UNPLUGGED 

*android.os.BatteryStats.Uid.Proc.getUserTime(int)*

public abstract long getUserTime(int which)

Returns the total time (in 1/100 sec) spent executing in user code. 


    which - one of STATS_TOTAL, STATS_LAST, or STATS_CURRENT. 


