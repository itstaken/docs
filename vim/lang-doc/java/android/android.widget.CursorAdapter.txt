*android.widget.CursorAdapter* *CursorAdapter* Adapter that exposes data from aa

public abstract class CursorAdapter
  extends    |android.widget.BaseAdapter|
  implements |android.widget.Filterable|
             |android.widget.CursorFilter.CursorFilterClient|

|android.widget.CursorAdapter_Description|
|android.widget.CursorAdapter_Fields|
|android.widget.CursorAdapter_Constructors|
|android.widget.CursorAdapter_Methods|

================================================================================

*android.widget.CursorAdapter_Fields*
|int_android.widget.CursorAdapter.FLAG_AUTO_REQUERY|
|int_android.widget.CursorAdapter.FLAG_REGISTER_CONTENT_OBSERVER|
|boolean_android.widget.CursorAdapter.mAutoRequery|
|android.widget.CursorAdapter.ChangeObserver_android.widget.CursorAdapter.mChangeObserver|
|android.content.Context_android.widget.CursorAdapter.mContext|
|android.database.Cursor_android.widget.CursorAdapter.mCursor|
|android.widget.CursorFilter_android.widget.CursorAdapter.mCursorFilter|
|android.database.DataSetObserver_android.widget.CursorAdapter.mDataSetObserver|
|boolean_android.widget.CursorAdapter.mDataValid|
|android.widget.FilterQueryProvider_android.widget.CursorAdapter.mFilterQueryProvider|
|int_android.widget.CursorAdapter.mRowIDColumn|

*android.widget.CursorAdapter_Constructors*
|android.widget.CursorAdapter(Context,Cursor)|Constructor that always enables a
|android.widget.CursorAdapter(Context,Cursor,boolean)|Constructor that allows c
|android.widget.CursorAdapter(Context,Cursor,int)|Recommended constructor.

*android.widget.CursorAdapter_Methods*
|android.widget.CursorAdapter.bindView(View,Context,Cursor)|Bind an existing vi
|android.widget.CursorAdapter.changeCursor(Cursor)|Change the underlying cursor
|android.widget.CursorAdapter.convertToString(Cursor)|Converts the cursor into 
|android.widget.CursorAdapter.getCount()|
|android.widget.CursorAdapter.getCursor()|Returns the cursor.
|android.widget.CursorAdapter.getDropDownView(int,View,ViewGroup)|
|android.widget.CursorAdapter.getFilter()|
|android.widget.CursorAdapter.getFilterQueryProvider()|Returns the query filter
|android.widget.CursorAdapter.getItem(int)|
|android.widget.CursorAdapter.getItemId(int)|
|android.widget.CursorAdapter.getView(int,View,ViewGroup)|
|android.widget.CursorAdapter.hasStableIds()|
|android.widget.CursorAdapter.init(Context,Cursor,boolean)|
|android.widget.CursorAdapter.newDropDownView(Context,Cursor,ViewGroup)|Makes a
|android.widget.CursorAdapter.newView(Context,Cursor,ViewGroup)|Makes a new vie
|android.widget.CursorAdapter.onContentChanged()|Called when theContentObserver
|android.widget.CursorAdapter.runQueryOnBackgroundThread(CharSequence)|Runs a q
|android.widget.CursorAdapter.setFilterQueryProvider(FilterQueryProvider)|Sets 
|android.widget.CursorAdapter.swapCursor(Cursor)|Swap in a new Cursor, returnin

*android.widget.CursorAdapter_Description*

Adapter that exposes data from a Cursor(|android.database.Cursor|) to a 
ListView(|android.widget.ListView|) widget. 

The Cursor must include a column named "_id" or this class will not work. 
Additionally, using (|android.database.MergeCursor|) with this class will not 
work if the merged Cursors have overlapping values in their "_id" columns. 



*int_android.widget.CursorAdapter.FLAG_AUTO_REQUERY*

If set the adapter will call requery() on the cursor whenever a content change 
notification is delivered. Implies (|android.widget.CursorAdapter|) . 


*int_android.widget.CursorAdapter.FLAG_REGISTER_CONTENT_OBSERVER*

If set the adapter will register a content observer on the cursor and will call 
(|android.widget.CursorAdapter|) when a notification comes in. Be careful when 
using this flag: you will need to unset the current Cursor from the adapter to 
avoid leaks due to its registered observers. This flag is not needed when using 
a CursorAdapter with a (|android.content.CursorLoader|) . 


*boolean_android.widget.CursorAdapter.mAutoRequery*

This field should be made private, so it is hidden from the SDK. 


*android.widget.CursorAdapter.ChangeObserver_android.widget.CursorAdapter.mChangeObserver*

This field should be made private, so it is hidden from the SDK. 


*android.content.Context_android.widget.CursorAdapter.mContext*

This field should be made private, so it is hidden from the SDK. 


*android.database.Cursor_android.widget.CursorAdapter.mCursor*

This field should be made private, so it is hidden from the SDK. 


*android.widget.CursorFilter_android.widget.CursorAdapter.mCursorFilter*

This field should be made private, so it is hidden from the SDK. 


*android.database.DataSetObserver_android.widget.CursorAdapter.mDataSetObserver*

This field should be made private, so it is hidden from the SDK. 


*boolean_android.widget.CursorAdapter.mDataValid*

This field should be made private, so it is hidden from the SDK. 


*android.widget.FilterQueryProvider_android.widget.CursorAdapter.mFilterQueryProvider*

This field should be made private, so it is hidden from the SDK. 


*int_android.widget.CursorAdapter.mRowIDColumn*

This field should be made private, so it is hidden from the SDK. 



*android.widget.CursorAdapter(Context,Cursor)*

public CursorAdapter(
  android.content.Context context,
  android.database.Cursor c)

Constructor that always enables auto-requery. 

    c - The cursor from which to get the data. 
    context - The context 

*android.widget.CursorAdapter(Context,Cursor,boolean)*

public CursorAdapter(
  android.content.Context context,
  android.database.Cursor c,
  boolean autoRequery)

Constructor that allows control over auto-requery. It is recommended you not 
use this, but instead (|android.widget.CursorAdapter|) . When using this 
constructor, (|android.widget.CursorAdapter|) will always be set. 

    c - The cursor from which to get the data. 
    context - The context 
    autoRequery - If true the adapter will call requery() on the cursor whenever it changes so 
       the most recent data is always displayed. Using true here is 
       discouraged. 

*android.widget.CursorAdapter(Context,Cursor,int)*

public CursorAdapter(
  android.content.Context context,
  android.database.Cursor c,
  int flags)

Recommended constructor. 

    c - The cursor from which to get the data. 
    context - The context 
    flags - Flags used to determine the behavior of the adapter; may be any combination of 
       {@link #FLAG_AUTO_REQUERY} and {@link #FLAG_REGISTER_CONTENT_OBSERVER}. 

*android.widget.CursorAdapter.bindView(View,Context,Cursor)*

public abstract void bindView(
  android.view.View view,
  android.content.Context context,
  android.database.Cursor cursor)

Bind an existing view to the data pointed to by cursor 


    view - Existing view, returned earlier by newView 
    context - Interface to application's global information 
    cursor - The cursor from which to get the data. The cursor is already moved to the 
       correct position. 

*android.widget.CursorAdapter.changeCursor(Cursor)*

public void changeCursor(android.database.Cursor cursor)

Change the underlying cursor to a new cursor. If there is an existing cursor it 
will be closed. 


    cursor - The new cursor to be used 

*android.widget.CursorAdapter.convertToString(Cursor)*

public |java.lang.CharSequence| convertToString(android.database.Cursor cursor)

Converts the cursor into a CharSequence. Subclasses should override this method 
to convert their results. The default implementation returns an empty String 
for null values or the default String representation of the value. 


    cursor - the cursor to convert to a CharSequence 

    Returns: a CharSequence representing the value 

*android.widget.CursorAdapter.getCount()*

public int getCount()





*android.widget.CursorAdapter.getCursor()*

public |android.database.Cursor| getCursor()

Returns the cursor. 



    Returns: 

*android.widget.CursorAdapter.getDropDownView(int,View,ViewGroup)*

public |android.view.View| getDropDownView(
  int position,
  android.view.View convertView,
  android.view.ViewGroup parent)





*android.widget.CursorAdapter.getFilter()*

public |android.widget.Filter| getFilter()





*android.widget.CursorAdapter.getFilterQueryProvider()*

public |android.widget.FilterQueryProvider| getFilterQueryProvider()

Returns the query filter provider used for filtering. When the provider is 
null, no filtering occurs. 



    Returns: the current filter query provider or null if it does not exist 

*android.widget.CursorAdapter.getItem(int)*

public |java.lang.Object| getItem(int position)





*android.widget.CursorAdapter.getItemId(int)*

public long getItemId(int position)





*android.widget.CursorAdapter.getView(int,View,ViewGroup)*

public |android.view.View| getView(
  int position,
  android.view.View convertView,
  android.view.ViewGroup parent)





*android.widget.CursorAdapter.hasStableIds()*

public boolean hasStableIds()





*android.widget.CursorAdapter.init(Context,Cursor,boolean)*

protected void init(
  android.content.Context context,
  android.database.Cursor c,
  boolean autoRequery)



    Deprecated: Don't use this, use the normal constructor.  This will
 be removed in the future.


*android.widget.CursorAdapter.newDropDownView(Context,Cursor,ViewGroup)*

public |android.view.View| newDropDownView(
  android.content.Context context,
  android.database.Cursor cursor,
  android.view.ViewGroup parent)

Makes a new drop down view to hold the data pointed to by cursor. 


    context - Interface to application's global information 
    cursor - The cursor from which to get the data. The cursor is already moved to the 
       correct position. 
    parent - The parent to which the new view is attached to 

    Returns: the newly created view. 

*android.widget.CursorAdapter.newView(Context,Cursor,ViewGroup)*

public abstract |android.view.View| newView(
  android.content.Context context,
  android.database.Cursor cursor,
  android.view.ViewGroup parent)

Makes a new view to hold the data pointed to by cursor. 


    context - Interface to application's global information 
    cursor - The cursor from which to get the data. The cursor is already moved to the 
       correct position. 
    parent - The parent to which the new view is attached to 

    Returns: the newly created view. 

*android.widget.CursorAdapter.onContentChanged()*

protected void onContentChanged()

Called when the (|android.database.ContentObserver|) on the cursor receives a 
change notification. The default implementation provides the auto-requery 
logic, but may be overridden by sub classes. 



*android.widget.CursorAdapter.runQueryOnBackgroundThread(CharSequence)*

public |android.database.Cursor| runQueryOnBackgroundThread(java.lang.CharSequence constraint)

Runs a query with the specified constraint. This query is requested by the 
filter attached to this adapter. 

The query is provided by a (|android.widget.FilterQueryProvider|) . If no 
provider is specified, the current cursor is not filtered and returned. 

After this method returns the resulting cursor is passed to 
(|android.widget.CursorAdapter|) and the previous cursor is closed. 

This method is always executed on a background thread, not on the application's 
main thread (or UI thread.) 

Contract: when constraint is null or empty, the original results, prior to any 
filtering, must be returned. 


    constraint - the constraint with which the query must be filtered 

    Returns: a Cursor representing the results of the new query 

*android.widget.CursorAdapter.setFilterQueryProvider(FilterQueryProvider)*

public void setFilterQueryProvider(android.widget.FilterQueryProvider filterQueryProvider)

Sets the query filter provider used to filter the current Cursor. The 
provider's (|android.widget.FilterQueryProvider|) method is invoked when 
filtering is requested by a client of this adapter. 


    filterQueryProvider - the filter query provider or null to remove it 

*android.widget.CursorAdapter.swapCursor(Cursor)*

public |android.database.Cursor| swapCursor(android.database.Cursor newCursor)

Swap in a new Cursor, returning the old Cursor. Unlike 
(|android.widget.CursorAdapter|) , the returned old Cursor is not closed. 


    newCursor - The new cursor to be used. 

    Returns: Returns the previously set Cursor, or null if there wasa not one. If the given 
             new Cursor is the same instance is the previously set Cursor, null 
             is also returned. 


