*android.service.wallpaper.WallpaperService.Engine* *WallpaperService.Engine* Th

public class WallpaperService.Engine
  extends    |java.lang.Object|

|android.service.wallpaper.WallpaperService.Engine_Description|
|android.service.wallpaper.WallpaperService.Engine_Fields|
|android.service.wallpaper.WallpaperService.Engine_Constructors|
|android.service.wallpaper.WallpaperService.Engine_Methods|

================================================================================

*android.service.wallpaper.WallpaperService.Engine_Constructors*
|android.service.wallpaper.WallpaperService.Engine()|

*android.service.wallpaper.WallpaperService.Engine_Methods*
|android.service.wallpaper.WallpaperService.Engine.dump(String,FileDescriptor,PrintWriter,String[])|
|android.service.wallpaper.WallpaperService.Engine.getDesiredMinimumHeight()|Co
|android.service.wallpaper.WallpaperService.Engine.getDesiredMinimumWidth()|Con
|android.service.wallpaper.WallpaperService.Engine.getSurfaceHolder()|Provides 
|android.service.wallpaper.WallpaperService.Engine.isPreview()|Returns true if 
|android.service.wallpaper.WallpaperService.Engine.isVisible()|Return whether t
|android.service.wallpaper.WallpaperService.Engine.onCommand(String,int,int,int,Bundle,boolean)|
|android.service.wallpaper.WallpaperService.Engine.onCreate(SurfaceHolder)|Call
|android.service.wallpaper.WallpaperService.Engine.onDesiredSizeChanged(int,int)|
|android.service.wallpaper.WallpaperService.Engine.onDestroy()|Called right bef
|android.service.wallpaper.WallpaperService.Engine.onOffsetsChanged(float,float,float,float,int,int)|
|android.service.wallpaper.WallpaperService.Engine.onSurfaceChanged(SurfaceHolder,int,int,int)|
|android.service.wallpaper.WallpaperService.Engine.onSurfaceCreated(SurfaceHolder)|
|android.service.wallpaper.WallpaperService.Engine.onSurfaceDestroyed(SurfaceHolder)|
|android.service.wallpaper.WallpaperService.Engine.onSurfaceRedrawNeeded(SurfaceHolder)|
|android.service.wallpaper.WallpaperService.Engine.onTouchEvent(MotionEvent)|Ca
|android.service.wallpaper.WallpaperService.Engine.onVisibilityChanged(boolean)|
|android.service.wallpaper.WallpaperService.Engine.setFixedSizeAllowed(boolean)|
|android.service.wallpaper.WallpaperService.Engine.setOffsetNotificationsEnabled(boolean)|
|android.service.wallpaper.WallpaperService.Engine.setTouchEventsEnabled(boolean)|

*android.service.wallpaper.WallpaperService.Engine_Description*

The actual implementation of a wallpaper. A wallpaper service may have multiple 
instances running (for example as a real wallpaper and as a preview), each of 
which is represented by its own Engine instance. You must implement 
(|android.service.wallpaper.WallpaperService|) to return your concrete Engine 
implementation. 



*android.service.wallpaper.WallpaperService.Engine()*

public WallpaperService.Engine()




*android.service.wallpaper.WallpaperService.Engine.dump(String,FileDescriptor,PrintWriter,String[])*

protected void dump(
  java.lang.String prefix,
  java.io.FileDescriptor fd,
  java.io.PrintWriter out,
  java.lang.String[] args)





*android.service.wallpaper.WallpaperService.Engine.getDesiredMinimumHeight()*

public int getDesiredMinimumHeight()

Convenience for 
WallpaperManager.getDesiredMinimumHeight()(|android.app.WallpaperManager|) , 
returning the height that the system would like this wallpaper to run in. 



*android.service.wallpaper.WallpaperService.Engine.getDesiredMinimumWidth()*

public int getDesiredMinimumWidth()

Convenience for 
WallpaperManager.getDesiredMinimumWidth()(|android.app.WallpaperManager|) , 
returning the width that the system would like this wallpaper to run in. 



*android.service.wallpaper.WallpaperService.Engine.getSurfaceHolder()*

public |android.view.SurfaceHolder| getSurfaceHolder()

Provides access to the surface in which this wallpaper is drawn. 



*android.service.wallpaper.WallpaperService.Engine.isPreview()*

public boolean isPreview()

Returns true if this engine is running in preview mode -- that is, it is being 
shown to the user before they select it as the actual wallpaper. 



*android.service.wallpaper.WallpaperService.Engine.isVisible()*

public boolean isVisible()

Return whether the wallpaper is currently visible to the user, this is the last 
value supplied to (|android.service.wallpaper.WallpaperService.Engine|) . 



*android.service.wallpaper.WallpaperService.Engine.onCommand(String,int,int,int,Bundle,boolean)*

public |android.os.Bundle| onCommand(
  java.lang.String action,
  int x,
  int y,
  int z,
  android.os.Bundle extras,
  boolean resultRequested)

Process a command that was sent to the wallpaper with 
(|android.app.WallpaperManager|) . The default implementation does nothing, and 
always returns null as the result. 


    action - The name of the command to perform. This tells you what to do and how to 
       interpret the rest of the arguments. 
    x - Generic integer parameter. 
    y - Generic integer parameter. 
    z - Generic integer parameter. 
    extras - Any additional parameters. 
    resultRequested - If true, the caller is requesting that a result, appropriate for the command, 
       be returned back. 

    Returns: If returning a result, create a Bundle and place the result data in to it. 
             Otherwise return null. 

*android.service.wallpaper.WallpaperService.Engine.onCreate(SurfaceHolder)*

public void onCreate(android.view.SurfaceHolder surfaceHolder)

Called once to initialize the engine. After returning, the engine's surface 
will be created by the framework. 



*android.service.wallpaper.WallpaperService.Engine.onDesiredSizeChanged(int,int)*

public void onDesiredSizeChanged(
  int desiredWidth,
  int desiredHeight)

Called when an application has changed the desired virtual size of the 
wallpaper. 



*android.service.wallpaper.WallpaperService.Engine.onDestroy()*

public void onDestroy()

Called right before the engine is going away. After this the surface will be 
destroyed and this Engine object is no longer valid. 



*android.service.wallpaper.WallpaperService.Engine.onOffsetsChanged(float,float,float,float,int,int)*

public void onOffsetsChanged(
  float xOffset,
  float yOffset,
  float xOffsetStep,
  float yOffsetStep,
  int xPixelOffset,
  int yPixelOffset)

Called to inform you of the wallpaper's offsets changing within its contain, 
corresponding to the container's call to 
WallpaperManager.setWallpaperOffsets()(|android.app.WallpaperManager|) . 



*android.service.wallpaper.WallpaperService.Engine.onSurfaceChanged(SurfaceHolder,int,int,int)*

public void onSurfaceChanged(
  android.view.SurfaceHolder holder,
  int format,
  int width,
  int height)

Convenience for 
SurfaceHolder.Callback.surfaceChanged()(|SurfaceHolder.Callback|) . 



*android.service.wallpaper.WallpaperService.Engine.onSurfaceCreated(SurfaceHolder)*

public void onSurfaceCreated(android.view.SurfaceHolder holder)

Convenience for 
SurfaceHolder.Callback.surfaceCreated()(|SurfaceHolder.Callback|) . 



*android.service.wallpaper.WallpaperService.Engine.onSurfaceDestroyed(SurfaceHolder)*

public void onSurfaceDestroyed(android.view.SurfaceHolder holder)

Convenience for 
SurfaceHolder.Callback.surfaceDestroyed()(|SurfaceHolder.Callback|) . 



*android.service.wallpaper.WallpaperService.Engine.onSurfaceRedrawNeeded(SurfaceHolder)*

public void onSurfaceRedrawNeeded(android.view.SurfaceHolder holder)

Convenience for 
SurfaceHolder.Callback.surfaceRedrawNeeded()(|SurfaceHolder.Callback2|) . 



*android.service.wallpaper.WallpaperService.Engine.onTouchEvent(MotionEvent)*

public void onTouchEvent(android.view.MotionEvent event)

Called as the user performs touch-screen interaction with the window that is 
currently showing this wallpaper. Note that the events you receive here are 
driven by the actual application the user is interacting with, so if it is slow 
you will get fewer move events. 



*android.service.wallpaper.WallpaperService.Engine.onVisibilityChanged(boolean)*

public void onVisibilityChanged(boolean visible)

Called to inform you of the wallpaper becoming visible or hidden. It is very 
important that a wallpaper only use CPU while it is visible.. 



*android.service.wallpaper.WallpaperService.Engine.setFixedSizeAllowed(boolean)*

public void setFixedSizeAllowed(boolean allowed)





*android.service.wallpaper.WallpaperService.Engine.setOffsetNotificationsEnabled(boolean)*

public void setOffsetNotificationsEnabled(boolean enabled)

Control whether this wallpaper will receive notifications when the wallpaper 
has been scrolled. By default, wallpapers will receive notifications, although 
the default static image wallpapers do not. It is a performance optimization to 
set this to false. 


    enabled - whether the wallpaper wants to receive offset notifications 

*android.service.wallpaper.WallpaperService.Engine.setTouchEventsEnabled(boolean)*

public void setTouchEventsEnabled(boolean enabled)

Control whether this wallpaper will receive raw touch events from the window 
manager as the user interacts with the window that is currently displaying the 
wallpaper. By default they are turned off. If enabled, the events will be 
received in (|android.service.wallpaper.WallpaperService.Engine|) . 




