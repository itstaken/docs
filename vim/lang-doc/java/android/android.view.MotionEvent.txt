*android.view.MotionEvent* *MotionEvent* Object used to report movement (mouse, 

public final class MotionEvent
  extends    |android.view.InputEvent|
  implements |android.os.Parcelable|

|android.view.MotionEvent_Description|
|android.view.MotionEvent_Fields|
|android.view.MotionEvent_Constructors|
|android.view.MotionEvent_Methods|

================================================================================

*android.view.MotionEvent_Fields*
|int_android.view.MotionEvent.ACTION_CANCEL|
|int_android.view.MotionEvent.ACTION_DOWN|
|int_android.view.MotionEvent.ACTION_HOVER_ENTER|
|int_android.view.MotionEvent.ACTION_HOVER_EXIT|
|int_android.view.MotionEvent.ACTION_HOVER_MOVE|
|int_android.view.MotionEvent.ACTION_MASK|
|int_android.view.MotionEvent.ACTION_MOVE|
|int_android.view.MotionEvent.ACTION_OUTSIDE|
|int_android.view.MotionEvent.ACTION_POINTER_1_DOWN|
|int_android.view.MotionEvent.ACTION_POINTER_1_UP|
|int_android.view.MotionEvent.ACTION_POINTER_2_DOWN|
|int_android.view.MotionEvent.ACTION_POINTER_2_UP|
|int_android.view.MotionEvent.ACTION_POINTER_3_DOWN|
|int_android.view.MotionEvent.ACTION_POINTER_3_UP|
|int_android.view.MotionEvent.ACTION_POINTER_DOWN|
|int_android.view.MotionEvent.ACTION_POINTER_ID_MASK|
|int_android.view.MotionEvent.ACTION_POINTER_ID_SHIFT|
|int_android.view.MotionEvent.ACTION_POINTER_INDEX_MASK|
|int_android.view.MotionEvent.ACTION_POINTER_INDEX_SHIFT|
|int_android.view.MotionEvent.ACTION_POINTER_UP|
|int_android.view.MotionEvent.ACTION_SCROLL|
|int_android.view.MotionEvent.ACTION_UP|
|int_android.view.MotionEvent.AXIS_BRAKE|
|int_android.view.MotionEvent.AXIS_DISTANCE|
|int_android.view.MotionEvent.AXIS_GAS|
|int_android.view.MotionEvent.AXIS_GENERIC_1|
|int_android.view.MotionEvent.AXIS_GENERIC_10|
|int_android.view.MotionEvent.AXIS_GENERIC_11|
|int_android.view.MotionEvent.AXIS_GENERIC_12|
|int_android.view.MotionEvent.AXIS_GENERIC_13|
|int_android.view.MotionEvent.AXIS_GENERIC_14|
|int_android.view.MotionEvent.AXIS_GENERIC_15|
|int_android.view.MotionEvent.AXIS_GENERIC_16|
|int_android.view.MotionEvent.AXIS_GENERIC_2|
|int_android.view.MotionEvent.AXIS_GENERIC_3|
|int_android.view.MotionEvent.AXIS_GENERIC_4|
|int_android.view.MotionEvent.AXIS_GENERIC_5|
|int_android.view.MotionEvent.AXIS_GENERIC_6|
|int_android.view.MotionEvent.AXIS_GENERIC_7|
|int_android.view.MotionEvent.AXIS_GENERIC_8|
|int_android.view.MotionEvent.AXIS_GENERIC_9|
|int_android.view.MotionEvent.AXIS_HAT_X|
|int_android.view.MotionEvent.AXIS_HAT_Y|
|int_android.view.MotionEvent.AXIS_HSCROLL|
|int_android.view.MotionEvent.AXIS_LTRIGGER|
|int_android.view.MotionEvent.AXIS_ORIENTATION|
|int_android.view.MotionEvent.AXIS_PRESSURE|
|int_android.view.MotionEvent.AXIS_RTRIGGER|
|int_android.view.MotionEvent.AXIS_RUDDER|
|int_android.view.MotionEvent.AXIS_RX|
|int_android.view.MotionEvent.AXIS_RY|
|int_android.view.MotionEvent.AXIS_RZ|
|int_android.view.MotionEvent.AXIS_SIZE|
|int_android.view.MotionEvent.AXIS_THROTTLE|
|int_android.view.MotionEvent.AXIS_TILT|
|int_android.view.MotionEvent.AXIS_TOOL_MAJOR|
|int_android.view.MotionEvent.AXIS_TOOL_MINOR|
|int_android.view.MotionEvent.AXIS_TOUCH_MAJOR|
|int_android.view.MotionEvent.AXIS_TOUCH_MINOR|
|int_android.view.MotionEvent.AXIS_VSCROLL|
|int_android.view.MotionEvent.AXIS_WHEEL|
|int_android.view.MotionEvent.AXIS_X|
|int_android.view.MotionEvent.AXIS_Y|
|int_android.view.MotionEvent.AXIS_Z|
|int_android.view.MotionEvent.BUTTON_BACK|
|int_android.view.MotionEvent.BUTTON_FORWARD|
|int_android.view.MotionEvent.BUTTON_PRIMARY|
|int_android.view.MotionEvent.BUTTON_SECONDARY|
|int_android.view.MotionEvent.BUTTON_TERTIARY|
|android.os.Parcelable.Creator<android.view.MotionEvent>_android.view.MotionEvent.CREATOR|
|int_android.view.MotionEvent.EDGE_BOTTOM|
|int_android.view.MotionEvent.EDGE_LEFT|
|int_android.view.MotionEvent.EDGE_RIGHT|
|int_android.view.MotionEvent.EDGE_TOP|
|int_android.view.MotionEvent.FLAG_TAINTED|
|int_android.view.MotionEvent.FLAG_WINDOW_IS_OBSCURED|
|int_android.view.MotionEvent.INVALID_POINTER_ID|
|int_android.view.MotionEvent.TOOL_TYPE_ERASER|
|int_android.view.MotionEvent.TOOL_TYPE_FINGER|
|int_android.view.MotionEvent.TOOL_TYPE_MOUSE|
|int_android.view.MotionEvent.TOOL_TYPE_STYLUS|
|int_android.view.MotionEvent.TOOL_TYPE_UNKNOWN|

*android.view.MotionEvent_Methods*
|android.view.MotionEvent.actionToString(int)|Returns a string that represents 
|android.view.MotionEvent.addBatch(long,float,float,float,float,int)|Add a new 
|android.view.MotionEvent.addBatch(long,MotionEvent.PointerCoords[],int)|Add a 
|android.view.MotionEvent.addBatch(MotionEvent)|Adds all of the movement sample
|android.view.MotionEvent.axisFromString(String)|Gets an axis by its symbolic n
|android.view.MotionEvent.axisToString(int)|Returns a string that represents th
|android.view.MotionEvent.buttonStateToString(int)|Returns a string that repres
|android.view.MotionEvent.clampNoHistory(float,float,float,float)|Returns a new
|android.view.MotionEvent.copy()|
|android.view.MotionEvent.createFromParcelBody(Parcel)|
|android.view.MotionEvent.finalize()|
|android.view.MotionEvent.findPointerIndex(int)|Given a pointer identifier, fin
|android.view.MotionEvent.getAction()|Return the kind of action being performed
|android.view.MotionEvent.getActionIndex()|For#ACTION_POINTER_DOWNor#ACTION_POI
|android.view.MotionEvent.getActionMasked()|Return the masked action being perf
|android.view.MotionEvent.getAxisValue(int)|#getAxisValue(int)for the first poi
|android.view.MotionEvent.getAxisValue(int,int)|Returns the value of the reques
|android.view.MotionEvent.getButtonState()|Gets the state of all buttons that a
|android.view.MotionEvent.getDeviceId()|
|android.view.MotionEvent.getDownTime()|Returns the time (in ms) when the user 
|android.view.MotionEvent.getEdgeFlags()|Returns a bitfield indicating which ed
|android.view.MotionEvent.getEventTime()|Retrieve the time this event occurred,
|android.view.MotionEvent.getEventTimeNano()|Retrieve the time this event occur
|android.view.MotionEvent.getFlags()|Gets the motion event flags.
|android.view.MotionEvent.getHistoricalAxisValue(int,int)|#getHistoricalAxisVal
|android.view.MotionEvent.getHistoricalAxisValue(int,int,int)|Returns the histo
|android.view.MotionEvent.getHistoricalEventTime(int)|Returns the time that a h
|android.view.MotionEvent.getHistoricalEventTimeNano(int)|Returns the time that
|android.view.MotionEvent.getHistoricalOrientation(int)|#getHistoricalOrientati
|android.view.MotionEvent.getHistoricalOrientation(int,int)|Returns a historica
|android.view.MotionEvent.getHistoricalPointerCoords(int,int,MotionEvent.PointerCoords)|
|android.view.MotionEvent.getHistoricalPressure(int)|#getHistoricalPressure(int
|android.view.MotionEvent.getHistoricalPressure(int,int)|Returns a historical p
|android.view.MotionEvent.getHistoricalSize(int)|#getHistoricalSize(int, int)fo
|android.view.MotionEvent.getHistoricalSize(int,int)|Returns a historical size 
|android.view.MotionEvent.getHistoricalToolMajor(int)|#getHistoricalToolMajor(i
|android.view.MotionEvent.getHistoricalToolMajor(int,int)|Returns a historical 
|android.view.MotionEvent.getHistoricalToolMinor(int)|#getHistoricalToolMinor(i
|android.view.MotionEvent.getHistoricalToolMinor(int,int)|Returns a historical 
|android.view.MotionEvent.getHistoricalTouchMajor(int)|#getHistoricalTouchMajor
|android.view.MotionEvent.getHistoricalTouchMajor(int,int)|Returns a historical
|android.view.MotionEvent.getHistoricalTouchMinor(int)|#getHistoricalTouchMinor
|android.view.MotionEvent.getHistoricalTouchMinor(int,int)|Returns a historical
|android.view.MotionEvent.getHistoricalX(int)|#getHistoricalX(int, int)for the 
|android.view.MotionEvent.getHistoricalX(int,int)|Returns a historical X coordi
|android.view.MotionEvent.getHistoricalY(int)|#getHistoricalY(int, int)for the 
|android.view.MotionEvent.getHistoricalY(int,int)|Returns a historical Y coordi
|android.view.MotionEvent.getHistorySize()|Returns the number of historical poi
|android.view.MotionEvent.getMetaState()|Returns the state of any meta / modifi
|android.view.MotionEvent.getOrientation()|#getOrientation(int)for the first po
|android.view.MotionEvent.getOrientation(int)|Returns the orientation of the to
|android.view.MotionEvent.getPointerCoords(int,MotionEvent.PointerCoords)|Popul
|android.view.MotionEvent.getPointerCount()|The number of pointers of data cont
|android.view.MotionEvent.getPointerId(int)|Return the pointer identifier assoc
|android.view.MotionEvent.getPointerIdBits()|Gets an integer where each pointer
|android.view.MotionEvent.getPointerProperties(int,MotionEvent.PointerProperties)|
|android.view.MotionEvent.getPressure()|#getPressure(int)for the first pointer 
|android.view.MotionEvent.getPressure(int)|Returns the current pressure of this
|android.view.MotionEvent.getRawX()|Returns the original raw X coordinate of th
|android.view.MotionEvent.getRawY()|Returns the original raw Y coordinate of th
|android.view.MotionEvent.getSize()|#getSize(int)for the first pointer index (m
|android.view.MotionEvent.getSize(int)|Returns a scaled value of the approximat
|android.view.MotionEvent.getSource()|
|android.view.MotionEvent.getToolMajor()|#getToolMajor(int)for the first pointe
|android.view.MotionEvent.getToolMajor(int)|Returns the length of the major axi
|android.view.MotionEvent.getToolMinor()|#getToolMinor(int)for the first pointe
|android.view.MotionEvent.getToolMinor(int)|Returns the length of the minor axi
|android.view.MotionEvent.getToolType(int)|Gets the tool type of a pointer for 
|android.view.MotionEvent.getTouchMajor()|#getTouchMajor(int)for the first poin
|android.view.MotionEvent.getTouchMajor(int)|Returns the length of the major ax
|android.view.MotionEvent.getTouchMinor()|#getTouchMinor(int)for the first poin
|android.view.MotionEvent.getTouchMinor(int)|Returns the length of the minor ax
|android.view.MotionEvent.getX()|#getX(int)for the first pointer index (may be 
|android.view.MotionEvent.getX(int)|Returns the X coordinate of this event for 
|android.view.MotionEvent.getXPrecision()|Return the precision of the X coordin
|android.view.MotionEvent.getY()|#getY(int)for the first pointer index (may be 
|android.view.MotionEvent.getY(int)|Returns the Y coordinate of this event for 
|android.view.MotionEvent.getYPrecision()|Return the precision of the Y coordin
|android.view.MotionEvent.isTainted()|
|android.view.MotionEvent.isTouchEvent()|Returns true if this motion event is a
|android.view.MotionEvent.isWithinBoundsNoHistory(float,float,float,float)|Retu
|android.view.MotionEvent.obtain(long,long,int,float,float,float,float,int,float,float,int,int)|
|android.view.MotionEvent.obtain(long,long,int,float,float,int)|Create a new Mo
|android.view.MotionEvent.obtain(long,long,int,int,float,float,float,float,int,float,float,int,int)|
|android.view.MotionEvent.obtain(long,long,int,int,int[],MotionEvent.PointerCoords[],int,float,float,int,int,int,int)|
|android.view.MotionEvent.obtain(long,long,int,int,MotionEvent.PointerProperties[],MotionEvent.PointerCoords[],int,int,float,float,int,int,int,int)|
|android.view.MotionEvent.obtain(MotionEvent)|Create a new MotionEvent, copying
|android.view.MotionEvent.obtainNoHistory(MotionEvent)|Create a new MotionEvent
|android.view.MotionEvent.offsetLocation(float,float)|Adjust this event's locat
|android.view.MotionEvent.recycle()|Recycle the MotionEvent, to be re-used by a
|android.view.MotionEvent.scale(float)|Applies a scale factor to all points wit
|android.view.MotionEvent.setAction(int)|Sets this event's action.
|android.view.MotionEvent.setDownTime(long)|Sets the time (in ms) when the user
|android.view.MotionEvent.setEdgeFlags(int)|Sets the bitfield indicating which 
|android.view.MotionEvent.setLocation(float,float)|Set this event's location.
|android.view.MotionEvent.setSource(int)|
|android.view.MotionEvent.setTainted(boolean)|
|android.view.MotionEvent.split(int)|Splits a motion event such that it include
|android.view.MotionEvent.toolTypeToString(int)|Returns a string that represent
|android.view.MotionEvent.toString()|
|android.view.MotionEvent.transform(Matrix)|Applies a transformation matrix to 
|android.view.MotionEvent.writeToParcel(Parcel,int)|

*android.view.MotionEvent_Description*

Object used to report movement (mouse, pen, finger, trackball) events. Motion 
events may hold either absolute or relative movements and other data, depending 
on the type of device. 

Overview 

Motion events describe movements in terms of an action code and a set of axis 
values. The action code specifies the state change that occurred such as a 
pointer going down or up. The axis values describe the position and other 
movement properties. 

For example, when the user first touches the screen, the system delivers a 
touch event to the appropriate (|android.view.View|) with the action code 
(|android.view.MotionEvent|) and a set of axis values that include the X and Y 
coordinates of the touch and information about the pressure, size and 
orientation of the contact area. 

Some devices can report multiple movement traces at the same time. Multi-touch 
screens emit one movement trace for each finger. The individual fingers or 
other objects that generate movement traces are referred to as pointers. Motion 
events contain information about all of the pointers that are currently active 
even if some of them have not moved since the last event was delivered. 

The number of pointers only ever changes by one as individual pointers go up 
and down, except when the gesture is canceled. 

Each pointer has a unique id that is assigned when it first goes down 
(indicated by (|android.view.MotionEvent|) or (|android.view.MotionEvent|) ). A 
pointer id remains valid until the pointer eventually goes up (indicated by 
(|android.view.MotionEvent|) or (|android.view.MotionEvent|) ) or when the 
gesture is canceled (indicated by (|android.view.MotionEvent|) ). 

The MotionEvent class provides many methods to query the position and other 
properties of pointers, such as (|android.view.MotionEvent|) , 
(|android.view.MotionEvent|) , (|android.view.MotionEvent|) , 
(|android.view.MotionEvent|) , (|android.view.MotionEvent|) , and many others. 
Most of these methods accept the pointer index as a parameter rather than the 
pointer id. The pointer index of each pointer in the event ranges from 0 to one 
less than the value returned by (|android.view.MotionEvent|) . 

The order in which individual pointers appear within a motion event is 
undefined. Thus the pointer index of a pointer can change from one event to the 
next but the pointer id of a pointer is guaranteed to remain constant as long 
as the pointer remains active. Use the (|android.view.MotionEvent|) method to 
obtain the pointer id of a pointer to track it across all subsequent motion 
events in a gesture. Then for successive motion events, use the 
(|android.view.MotionEvent|) method to obtain the pointer index for a given 
pointer id in that motion event. 

Mouse and stylus buttons can be retrieved using (|android.view.MotionEvent|) . 
It is a good idea to check the button state while handling 
(|android.view.MotionEvent|) as part of a touch event. The application may 
choose to perform some different action if the touch event starts due to a 
secondary button click, such as presenting a context menu. 

Batching 

For efficiency, motion events with (|android.view.MotionEvent|) may batch 
together multiple movement samples within a single object. The most current 
pointer coordinates are available using (|android.view.MotionEvent|) and 
(|android.view.MotionEvent|) . Earlier coordinates within the batch are 
accessed using (|android.view.MotionEvent|) and (|android.view.MotionEvent|) . 
The coordinates are "historical" only insofar as they are older than the 
current coordinates in the batch; however, they are still distinct from any 
other coordinates reported in prior motion events. To process all coordinates 
in the batch in time order, first consume the historical coordinates then 
consume the current coordinates. 

Example: Consuming all samples for all pointers in a motion event in time 
order. 

void printSamples(MotionEvent ev) { final int historySize = 
ev.getHistorySize(); final int pointerCount = ev.getPointerCount(); for (int h 
= 0; h < historySize; h++) { System.out.printf("At time %d:", 
ev.getHistoricalEventTime(h)); for (int p = 0; p < pointerCount; p++) { 
System.out.printf(" pointer %d: (%f,%f)", ev.getPointerId(p), 
ev.getHistoricalX(p, h), ev.getHistoricalY(p, h)); } } System.out.printf("At 
time %d:", ev.getEventTime()); for (int p = 0; p < pointerCount; p++) { 
System.out.printf(" pointer %d: (%f,%f)", ev.getPointerId(p), ev.getX(p), 
ev.getY(p)); } } 

Device Types 

The interpretation of the contents of a MotionEvent varies significantly 
depending on the source class of the device. 

On pointing devices with source class (|android.view.InputDevice|) such as 
touch screens, the pointer coordinates specify absolute positions such as view 
X/Y coordinates. Each complete gesture is represented by a sequence of motion 
events with actions that describe pointer state transitions and movements. A 
gesture starts with a motion event with (|android.view.MotionEvent|) that 
provides the location of the first pointer down. As each additional pointer 
that goes down or up, the framework will generate a motion event with 
(|android.view.MotionEvent|) or (|android.view.MotionEvent|) accordingly. 
Pointer movements are described by motion events with 
(|android.view.MotionEvent|) . Finally, a gesture end either when the final 
pointer goes up as represented by a motion event with 
(|android.view.MotionEvent|) or when gesture is canceled with 
(|android.view.MotionEvent|) . 

Some pointing devices such as mice may support vertical and/or horizontal 
scrolling. A scroll event is reported as a generic motion event with 
(|android.view.MotionEvent|) that includes the relative scroll offset in the 
(|android.view.MotionEvent|) and (|android.view.MotionEvent|) axes. See 
(|android.view.MotionEvent|) for information about retrieving these additional 
axes. 

On trackball devices with source class (|android.view.InputDevice|) , the 
pointer coordinates specify relative movements as X/Y deltas. A trackball 
gesture consists of a sequence of movements described by motion events with 
(|android.view.MotionEvent|) interspersed with occasional 
(|android.view.MotionEvent|) or (|android.view.MotionEvent|) motion events when 
the trackball button is pressed or released. 

On joystick devices with source class (|android.view.InputDevice|) , the 
pointer coordinates specify the absolute position of the joystick axes. The 
joystick axis values are normalized to a range of -1.0 to 1.0 where 0.0 
corresponds to the center position. More information about the set of available 
axes and the range of motion can be obtained using (|android.view.InputDevice|) 
. Some common joystick axes are (|android.view.MotionEvent|) , 
(|android.view.MotionEvent|) , (|android.view.MotionEvent|) , 
(|android.view.MotionEvent|) , (|android.view.MotionEvent|) and 
(|android.view.MotionEvent|) . 

Refer to (|android.view.InputDevice|) for more information about how different 
kinds of input devices and sources represent pointer coordinates. 

Consistency Guarantees 

Motion events are always delivered to views as a consistent stream of events. 
What constitutes a consistent stream varies depending on the type of device. 
For touch events, consistency implies that pointers go down one at a time, move 
around as a group and then go up one at a time or are canceled. 

While the framework tries to deliver consistent streams of motion events to 
views, it cannot guarantee it. Some events may be dropped or modified by 
containing views in the application before they are delivered thereby making 
the stream of events inconsistent. Views should always be prepared to handle 
(|android.view.MotionEvent|) and should tolerate anomalous situations such as 
receiving a new (|android.view.MotionEvent|) without first having received an 
(|android.view.MotionEvent|) for the prior gesture. 



*int_android.view.MotionEvent.ACTION_CANCEL*

Constant for (|android.view.MotionEvent|) : The current gesture has been 
aborted. You will not receive any more points in it. You should treat this as 
an up event, but not perform any action that you normally would. 


*int_android.view.MotionEvent.ACTION_DOWN*

Constant for (|android.view.MotionEvent|) : A pressed gesture has started, the 
motion contains the initial starting location. 

This is also a good time to check the button state to distinguish secondary and 
tertiary button clicks and handle them appropriately. Use 
(|android.view.MotionEvent|) to retrieve the button state. 


*int_android.view.MotionEvent.ACTION_HOVER_ENTER*

Constant for (|android.view.MotionEvent|) : The pointer is not down but has 
entered the boundaries of a window or view. 

This action is always delivered to the window or view under the pointer. 

This action is not a touch event so it is delivered to (|android.view.View|) 
rather than (|android.view.View|) . 


*int_android.view.MotionEvent.ACTION_HOVER_EXIT*

Constant for (|android.view.MotionEvent|) : The pointer is not down but has 
exited the boundaries of a window or view. 

This action is always delivered to the window or view that was previously under 
the pointer. 

This action is not a touch event so it is delivered to (|android.view.View|) 
rather than (|android.view.View|) . 


*int_android.view.MotionEvent.ACTION_HOVER_MOVE*

Constant for (|android.view.MotionEvent|) : A change happened but the pointer 
is not down (unlike (|android.view.MotionEvent|) ). The motion contains the 
most recent point, as well as any intermediate points since the last hover move 
event. 

This action is always delivered to the window or view under the pointer. 

This action is not a touch event so it is delivered to (|android.view.View|) 
rather than (|android.view.View|) . 


*int_android.view.MotionEvent.ACTION_MASK*

Bit mask of the parts of the action code that are the action itself. 


*int_android.view.MotionEvent.ACTION_MOVE*

Constant for (|android.view.MotionEvent|) : A change has happened during a 
press gesture (between (|android.view.MotionEvent|) and 
(|android.view.MotionEvent|) ). The motion contains the most recent point, as 
well as any intermediate points since the last down or move event. 


*int_android.view.MotionEvent.ACTION_OUTSIDE*

Constant for (|android.view.MotionEvent|) : A movement has happened outside of 
the normal bounds of the UI element. This does not provide a full gesture, but 
only the initial location of the movement/touch. 


*int_android.view.MotionEvent.ACTION_POINTER_1_DOWN*




*int_android.view.MotionEvent.ACTION_POINTER_1_UP*




*int_android.view.MotionEvent.ACTION_POINTER_2_DOWN*




*int_android.view.MotionEvent.ACTION_POINTER_2_UP*




*int_android.view.MotionEvent.ACTION_POINTER_3_DOWN*




*int_android.view.MotionEvent.ACTION_POINTER_3_UP*




*int_android.view.MotionEvent.ACTION_POINTER_DOWN*

Constant for (|android.view.MotionEvent|) : A non-primary pointer has gone 
down. 

Use (|android.view.MotionEvent|) to retrieve the index of the pointer that 
changed. 

The index is encoded in the (|android.view.MotionEvent|) bits of the unmasked 
action returned by (|android.view.MotionEvent|) . 


*int_android.view.MotionEvent.ACTION_POINTER_ID_MASK*




*int_android.view.MotionEvent.ACTION_POINTER_ID_SHIFT*




*int_android.view.MotionEvent.ACTION_POINTER_INDEX_MASK*

Bits in the action code that represent a pointer index, used with 
(|android.view.MotionEvent|) and (|android.view.MotionEvent|) . Shifting down 
by (|android.view.MotionEvent|) provides the actual pointer index where the 
data for the pointer going up or down can be found; you can get its identifier 
with (|android.view.MotionEvent|) and the actual data with 
(|android.view.MotionEvent|) etc. 


*int_android.view.MotionEvent.ACTION_POINTER_INDEX_SHIFT*

Bit shift for the action bits holding the pointer index as defined by 
(|android.view.MotionEvent|) . 


*int_android.view.MotionEvent.ACTION_POINTER_UP*

Constant for (|android.view.MotionEvent|) : A non-primary pointer has gone up. 

Use (|android.view.MotionEvent|) to retrieve the index of the pointer that 
changed. 

The index is encoded in the (|android.view.MotionEvent|) bits of the unmasked 
action returned by (|android.view.MotionEvent|) . 


*int_android.view.MotionEvent.ACTION_SCROLL*

Constant for (|android.view.MotionEvent|) : The motion event contains relative 
vertical and/or horizontal scroll offsets. Use (|android.view.MotionEvent|) to 
retrieve the information from (|android.view.MotionEvent|) and 
(|android.view.MotionEvent|) . The pointer may or may not be down when this 
event is dispatched. 

This action is always delivered to the window or view under the pointer, which 
may not be the window or view currently touched. 

This action is not a touch event so it is delivered to (|android.view.View|) 
rather than (|android.view.View|) . 


*int_android.view.MotionEvent.ACTION_UP*

Constant for (|android.view.MotionEvent|) : A pressed gesture has finished, the 
motion contains the final release location as well as any intermediate points 
since the last down or move event. 


*int_android.view.MotionEvent.AXIS_BRAKE*

Axis constant: Brake axis of a motion event. 

For a joystick, reports the absolute position of the brake control. The value 
is normalized to a range from 0.0 (no braking) to 1.0 (maximum braking). 




*int_android.view.MotionEvent.AXIS_DISTANCE*

Axis constant: Distance axis of a motion event. 

For a stylus, reports the distance of the stylus from the screen. A value of 
0.0 indicates direct contact and larger values indicate increasing distance 
from the surface. 




*int_android.view.MotionEvent.AXIS_GAS*

Axis constant: Gas axis of a motion event. 

For a joystick, reports the absolute position of the gas (accelerator) control. 
The value is normalized to a range from 0.0 (no acceleration) to 1.0 (maximum 
acceleration). 




*int_android.view.MotionEvent.AXIS_GENERIC_1*

Axis constant: Generic 1 axis of a motion event. The interpretation of a 
generic axis is device-specific. 


*int_android.view.MotionEvent.AXIS_GENERIC_10*

Axis constant: Generic 10 axis of a motion event. The interpretation of a 
generic axis is device-specific. 


*int_android.view.MotionEvent.AXIS_GENERIC_11*

Axis constant: Generic 11 axis of a motion event. The interpretation of a 
generic axis is device-specific. 


*int_android.view.MotionEvent.AXIS_GENERIC_12*

Axis constant: Generic 12 axis of a motion event. The interpretation of a 
generic axis is device-specific. 


*int_android.view.MotionEvent.AXIS_GENERIC_13*

Axis constant: Generic 13 axis of a motion event. The interpretation of a 
generic axis is device-specific. 


*int_android.view.MotionEvent.AXIS_GENERIC_14*

Axis constant: Generic 14 axis of a motion event. The interpretation of a 
generic axis is device-specific. 


*int_android.view.MotionEvent.AXIS_GENERIC_15*

Axis constant: Generic 15 axis of a motion event. The interpretation of a 
generic axis is device-specific. 


*int_android.view.MotionEvent.AXIS_GENERIC_16*

Axis constant: Generic 16 axis of a motion event. The interpretation of a 
generic axis is device-specific. 


*int_android.view.MotionEvent.AXIS_GENERIC_2*

Axis constant: Generic 2 axis of a motion event. The interpretation of a 
generic axis is device-specific. 


*int_android.view.MotionEvent.AXIS_GENERIC_3*

Axis constant: Generic 3 axis of a motion event. The interpretation of a 
generic axis is device-specific. 


*int_android.view.MotionEvent.AXIS_GENERIC_4*

Axis constant: Generic 4 axis of a motion event. The interpretation of a 
generic axis is device-specific. 


*int_android.view.MotionEvent.AXIS_GENERIC_5*

Axis constant: Generic 5 axis of a motion event. The interpretation of a 
generic axis is device-specific. 


*int_android.view.MotionEvent.AXIS_GENERIC_6*

Axis constant: Generic 6 axis of a motion event. The interpretation of a 
generic axis is device-specific. 


*int_android.view.MotionEvent.AXIS_GENERIC_7*

Axis constant: Generic 7 axis of a motion event. The interpretation of a 
generic axis is device-specific. 


*int_android.view.MotionEvent.AXIS_GENERIC_8*

Axis constant: Generic 8 axis of a motion event. The interpretation of a 
generic axis is device-specific. 


*int_android.view.MotionEvent.AXIS_GENERIC_9*

Axis constant: Generic 9 axis of a motion event. The interpretation of a 
generic axis is device-specific. 


*int_android.view.MotionEvent.AXIS_HAT_X*

Axis constant: Hat X axis of a motion event. 

For a joystick, reports the absolute X position of the directional hat control. 
The value is normalized to a range from -1.0 (left) to 1.0 (right). 




*int_android.view.MotionEvent.AXIS_HAT_Y*

Axis constant: Hat Y axis of a motion event. 

For a joystick, reports the absolute Y position of the directional hat control. 
The value is normalized to a range from -1.0 (up) to 1.0 (down). 




*int_android.view.MotionEvent.AXIS_HSCROLL*

Axis constant: Horizontal Scroll axis of a motion event. 

For a mouse, reports the relative movement of the horizontal scroll wheel. The 
value is normalized to a range from -1.0 (left) to 1.0 (right). 

This axis should be used to scroll views horizontally. 


*int_android.view.MotionEvent.AXIS_LTRIGGER*

Axis constant: Left Trigger axis of a motion event. 

For a joystick, reports the absolute position of the left trigger control. The 
value is normalized to a range from 0.0 (released) to 1.0 (fully pressed). 




*int_android.view.MotionEvent.AXIS_ORIENTATION*

Axis constant: Orientation axis of a motion event. 

For a touch screen or touch pad, reports the orientation of the finger or tool 
in radians relative to the vertical plane of the device. An angle of 0 radians 
indicates that the major axis of contact is oriented upwards, is perfectly 
circular or is of unknown orientation. A positive angle indicates that the 
major axis of contact is oriented to the right. A negative angle indicates that 
the major axis of contact is oriented to the left. The full range is from -PI/2 
radians (finger pointing fully left) to PI/2 radians (finger pointing fully 
right). For a stylus, the orientation indicates the direction in which the 
stylus is pointing in relation to the vertical axis of the current orientation 
of the screen. The range is from -PI radians to PI radians, where 0 is pointing 
up, -PI/2 radians is pointing left, -PI or PI radians is pointing down, and 
PI/2 radians is pointing right. See also (|android.view.MotionEvent|) . 




*int_android.view.MotionEvent.AXIS_PRESSURE*

Axis constant: Pressure axis of a motion event. 

For a touch screen or touch pad, reports the approximate pressure applied to 
the surface by a finger or other tool. The value is normalized to a range from 
0 (no pressure at all) to 1 (normal pressure), although values higher than 1 
may be generated depending on the calibration of the input device. For a 
trackball, the value is set to 1 if the trackball button is pressed or 0 
otherwise. For a mouse, the value is set to 1 if the primary mouse button is 
pressed or 0 otherwise. 




*int_android.view.MotionEvent.AXIS_RTRIGGER*

Axis constant: Right Trigger axis of a motion event. 

For a joystick, reports the absolute position of the right trigger control. The 
value is normalized to a range from 0.0 (released) to 1.0 (fully pressed). 




*int_android.view.MotionEvent.AXIS_RUDDER*

Axis constant: Rudder axis of a motion event. 

For a joystick, reports the absolute position of the rudder control. The value 
is normalized to a range from -1.0 (turn left) to 1.0 (turn right). 




*int_android.view.MotionEvent.AXIS_RX*

Axis constant: X Rotation axis of a motion event. 

For a joystick, reports the absolute rotation angle about the X axis. The value 
is normalized to a range from -1.0 (counter-clockwise) to 1.0 (clockwise). 




*int_android.view.MotionEvent.AXIS_RY*

Axis constant: Y Rotation axis of a motion event. 

For a joystick, reports the absolute rotation angle about the Y axis. The value 
is normalized to a range from -1.0 (counter-clockwise) to 1.0 (clockwise). 




*int_android.view.MotionEvent.AXIS_RZ*

Axis constant: Z Rotation axis of a motion event. 

For a joystick, reports the absolute rotation angle about the Z axis. The value 
is normalized to a range from -1.0 (counter-clockwise) to 1.0 (clockwise). On 
game pads with two analog joysticks, this axis is often reinterpreted to report 
the absolute Y position of the second joystick instead. 




*int_android.view.MotionEvent.AXIS_SIZE*

Axis constant: Size axis of a motion event. 

For a touch screen or touch pad, reports the approximate size of the contact 
area in relation to the maximum detectable size for the device. The value is 
normalized to a range from 0 (smallest detectable size) to 1 (largest 
detectable size), although it is not a linear scale. This value is of limited 
use. To obtain calibrated size information, use (|android.view.MotionEvent|) or 
(|android.view.MotionEvent|) . 




*int_android.view.MotionEvent.AXIS_THROTTLE*

Axis constant: Throttle axis of a motion event. 

For a joystick, reports the absolute position of the throttle control. The 
value is normalized to a range from 0.0 (fully open) to 1.0 (fully closed). 




*int_android.view.MotionEvent.AXIS_TILT*

Axis constant: Tilt axis of a motion event. 

For a stylus, reports the tilt angle of the stylus in radians where 0 radians 
indicates that the stylus is being held perpendicular to the surface, and PI/2 
radians indicates that the stylus is being held flat against the surface. 




*int_android.view.MotionEvent.AXIS_TOOL_MAJOR*

Axis constant: ToolMajor axis of a motion event. 

For a touch screen, reports the length of the major axis of an ellipse that 
represents the size of the approaching finger or tool used to make contact. For 
a touch pad, reports the length of the major axis of an ellipse that represents 
the size of the approaching finger or tool used to make contact. The units are 
device-dependent; use (|android.view.InputDevice|) to query the effective range 
of values. 

When the touch is circular, the major and minor axis lengths will be equal to 
one another. 

The tool size may be larger than the touch size since the tool may not be fully 
in contact with the touch sensor. 


*int_android.view.MotionEvent.AXIS_TOOL_MINOR*

Axis constant: ToolMinor axis of a motion event. 

For a touch screen, reports the length of the minor axis of an ellipse that 
represents the size of the approaching finger or tool used to make contact. For 
a touch pad, reports the length of the minor axis of an ellipse that represents 
the size of the approaching finger or tool used to make contact. The units are 
device-dependent; use (|android.view.InputDevice|) to query the effective range 
of values. 

When the touch is circular, the major and minor axis lengths will be equal to 
one another. 

The tool size may be larger than the touch size since the tool may not be fully 
in contact with the touch sensor. 


*int_android.view.MotionEvent.AXIS_TOUCH_MAJOR*

Axis constant: TouchMajor axis of a motion event. 

For a touch screen, reports the length of the major axis of an ellipse that 
represents the touch area at the point of contact. The units are display 
pixels. For a touch pad, reports the length of the major axis of an ellipse 
that represents the touch area at the point of contact. The units are 
device-dependent; use (|android.view.InputDevice|) to query the effective range 
of values. 




*int_android.view.MotionEvent.AXIS_TOUCH_MINOR*

Axis constant: TouchMinor axis of a motion event. 

For a touch screen, reports the length of the minor axis of an ellipse that 
represents the touch area at the point of contact. The units are display 
pixels. For a touch pad, reports the length of the minor axis of an ellipse 
that represents the touch area at the point of contact. The units are 
device-dependent; use (|android.view.InputDevice|) to query the effective range 
of values. 

When the touch is circular, the major and minor axis lengths will be equal to 
one another. 


*int_android.view.MotionEvent.AXIS_VSCROLL*

Axis constant: Vertical Scroll axis of a motion event. 

For a mouse, reports the relative movement of the vertical scroll wheel. The 
value is normalized to a range from -1.0 (down) to 1.0 (up). 

This axis should be used to scroll views vertically. 


*int_android.view.MotionEvent.AXIS_WHEEL*

Axis constant: Wheel axis of a motion event. 

For a joystick, reports the absolute position of the steering wheel control. 
The value is normalized to a range from -1.0 (turn left) to 1.0 (turn right). 




*int_android.view.MotionEvent.AXIS_X*

Axis constant: X axis of a motion event. 

For a touch screen, reports the absolute X screen position of the center of the 
touch contact area. The units are display pixels. For a touch pad, reports the 
absolute X surface position of the center of the touch contact area. The units 
are device-dependent; use (|android.view.InputDevice|) to query the effective 
range of values. For a mouse, reports the absolute X screen position of the 
mouse pointer. The units are display pixels. For a trackball, reports the 
relative horizontal displacement of the trackball. The value is normalized to a 
range from -1.0 (left) to 1.0 (right). For a joystick, reports the absolute X 
position of the joystick. The value is normalized to a range from -1.0 (left) 
to 1.0 (right). 




*int_android.view.MotionEvent.AXIS_Y*

Axis constant: Y axis of a motion event. 

For a touch screen, reports the absolute Y screen position of the center of the 
touch contact area. The units are display pixels. For a touch pad, reports the 
absolute Y surface position of the center of the touch contact area. The units 
are device-dependent; use (|android.view.InputDevice|) to query the effective 
range of values. For a mouse, reports the absolute Y screen position of the 
mouse pointer. The units are display pixels. For a trackball, reports the 
relative vertical displacement of the trackball. The value is normalized to a 
range from -1.0 (up) to 1.0 (down). For a joystick, reports the absolute Y 
position of the joystick. The value is normalized to a range from -1.0 (up or 
far) to 1.0 (down or near). 




*int_android.view.MotionEvent.AXIS_Z*

Axis constant: Z axis of a motion event. 

For a joystick, reports the absolute Z position of the joystick. The value is 
normalized to a range from -1.0 (high) to 1.0 (low). On game pads with two 
analog joysticks, this axis is often reinterpreted to report the absolute X 
position of the second joystick instead. 




*int_android.view.MotionEvent.BUTTON_BACK*

Button constant: Back button pressed (mouse back button). 

The system may send a (|android.view.KeyEvent|) key press to the application 
when this button is pressed. 


*int_android.view.MotionEvent.BUTTON_FORWARD*

Button constant: Forward button pressed (mouse forward button). 

The system may send a (|android.view.KeyEvent|) key press to the application 
when this button is pressed. 


*int_android.view.MotionEvent.BUTTON_PRIMARY*

Button constant: Primary button (left mouse button). 

This button constant is not set in response to simple touches with a finger or 
stylus tip. The user must actually push a button. 


*int_android.view.MotionEvent.BUTTON_SECONDARY*

Button constant: Secondary button (right mouse button, stylus first button). 


*int_android.view.MotionEvent.BUTTON_TERTIARY*

Button constant: Tertiary button (middle mouse button, stylus second button). 


*android.os.Parcelable.Creator<android.view.MotionEvent>_android.view.MotionEvent.CREATOR*




*int_android.view.MotionEvent.EDGE_BOTTOM*

Flag indicating the motion event intersected the bottom edge of the screen. 


*int_android.view.MotionEvent.EDGE_LEFT*

Flag indicating the motion event intersected the left edge of the screen. 


*int_android.view.MotionEvent.EDGE_RIGHT*

Flag indicating the motion event intersected the right edge of the screen. 


*int_android.view.MotionEvent.EDGE_TOP*

Flag indicating the motion event intersected the top edge of the screen. 


*int_android.view.MotionEvent.FLAG_TAINTED*

Private flag that indicates when the system has detected that this motion event 
may be inconsistent with respect to the sequence of previously delivered motion 
events, such as when a pointer move event is sent but the pointer is not down. 


*int_android.view.MotionEvent.FLAG_WINDOW_IS_OBSCURED*

This flag indicates that the window that received this motion event is partly 
or wholly obscured by another visible window above it. This flag is set to true 
even if the event did not directly pass through the obscured area. A security 
sensitive application can check this flag to identify situations in which a 
malicious application may have covered up part of its content for the purpose 
of misleading the user or hijacking touches. An appropriate response might be 
to drop the suspect touches or to take additional precautions to confirm the 
user's actual intent. 


*int_android.view.MotionEvent.INVALID_POINTER_ID*

An invalid pointer id. 

This value (-1) can be used as a placeholder to indicate that a pointer id has 
not been assigned or is not available. It cannot appear as a pointer id inside 
a (|android.view.MotionEvent|) . 


*int_android.view.MotionEvent.TOOL_TYPE_ERASER*

Tool type constant: The tool is an eraser or a stylus being used in an inverted 
posture. 


*int_android.view.MotionEvent.TOOL_TYPE_FINGER*

Tool type constant: The tool is a finger. 


*int_android.view.MotionEvent.TOOL_TYPE_MOUSE*

Tool type constant: The tool is a mouse or trackpad. 


*int_android.view.MotionEvent.TOOL_TYPE_STYLUS*

Tool type constant: The tool is a stylus. 


*int_android.view.MotionEvent.TOOL_TYPE_UNKNOWN*

Tool type constant: Unknown tool type. This constant is used when the tool type 
is not known or is not relevant, such as for a trackball or other non-pointing 
device. 



*android.view.MotionEvent.actionToString(int)*

public static |java.lang.String| actionToString(int action)

Returns a string that represents the symbolic name of the specified unmasked 
action such as "ACTION_DOWN", "ACTION_POINTER_DOWN(3)" or an equivalent numeric 
constant such as "35" if unknown. 


    action - The unmasked action. 

    Returns: The symbolic name of the specified action. 

*android.view.MotionEvent.addBatch(long,float,float,float,float,int)*

public final void addBatch(
  long eventTime,
  float x,
  float y,
  float pressure,
  float size,
  int metaState)

Add a new movement to the batch of movements in this event. The event's current 
location, position and size is updated to the new values. The current values in 
the event are added to a list of historical values. 

Only applies to (|android.view.MotionEvent|) or (|android.view.MotionEvent|) 
events. 


    eventTime - The time stamp (in ms) for this data. 
    x - The new X position. 
    y - The new Y position. 
    pressure - The new pressure. 
    size - The new size. 
    metaState - Meta key state. 

*android.view.MotionEvent.addBatch(long,MotionEvent.PointerCoords[],int)*

public final void addBatch(
  long eventTime,
  android.view.MotionEvent.PointerCoords[] pointerCoords,
  int metaState)

Add a new movement to the batch of movements in this event. The event's current 
location, position and size is updated to the new values. The current values in 
the event are added to a list of historical values. 

Only applies to (|android.view.MotionEvent|) or (|android.view.MotionEvent|) 
events. 


    eventTime - The time stamp (in ms) for this data. 
    pointerCoords - The new pointer coordinates. 
    metaState - Meta key state. 

*android.view.MotionEvent.addBatch(MotionEvent)*

public final boolean addBatch(android.view.MotionEvent event)

Adds all of the movement samples of the specified event to this one if it is 
compatible. To be compatible, the event must have the same device id, source, 
action, flags, pointer count, pointer properties. 

Only applies to (|android.view.MotionEvent|) or (|android.view.MotionEvent|) 
events. 


    event - The event whose movements samples should be added to this one if possible. 

    Returns: True if batching was performed or false if batching was not possible. 

*android.view.MotionEvent.axisFromString(String)*

public static int axisFromString(java.lang.String symbolicName)

Gets an axis by its symbolic name such as "AXIS_X" or an equivalent numeric 
constant such as "42". 


    symbolicName - The symbolic name of the axis. 

    Returns: The axis or -1 if not found. 

*android.view.MotionEvent.axisToString(int)*

public static |java.lang.String| axisToString(int axis)

Returns a string that represents the symbolic name of the specified axis such 
as "AXIS_X" or an equivalent numeric constant such as "42" if unknown. 


    axis - The axis. 

    Returns: The symbolic name of the specified axis. 

*android.view.MotionEvent.buttonStateToString(int)*

public static |java.lang.String| buttonStateToString(int buttonState)

Returns a string that represents the symbolic name of the specified combined 
button state flags such as "0", "BUTTON_PRIMARY", 
"BUTTON_PRIMARY|BUTTON_SECONDARY" or an equivalent numeric constant such as 
"0x10000000" if unknown. 


    buttonState - The button state. 

    Returns: The symbolic name of the specified combined button state flags. 

*android.view.MotionEvent.clampNoHistory(float,float,float,float)*

public final |android.view.MotionEvent| clampNoHistory(
  float left,
  float top,
  float right,
  float bottom)

Returns a new motion events whose points have been clamped to the specified 
bounds. 



*android.view.MotionEvent.copy()*

public |android.view.MotionEvent| copy()





*android.view.MotionEvent.createFromParcelBody(Parcel)*

public static |android.view.MotionEvent| createFromParcelBody(android.os.Parcel in)





*android.view.MotionEvent.finalize()*

protected void finalize()
  throws |java.lang.Throwable|
         




*android.view.MotionEvent.findPointerIndex(int)*

public final int findPointerIndex(int pointerId)

Given a pointer identifier, find the index of its data in the event. 


    pointerId - The identifier of the pointer to be found. 

    Returns: Returns either the index of the pointer (for use with {@link #getX(int)} et 
             al.), or -1 if there is no data available for that pointer 
             identifier. 

*android.view.MotionEvent.getAction()*

public final int getAction()

Return the kind of action being performed. Consider using 
(|android.view.MotionEvent|) and (|android.view.MotionEvent|) to retrieve the 
separate masked action and pointer index. 



    Returns: The action, such as {@link #ACTION_DOWN} or the combination of {@link 
             #ACTION_POINTER_DOWN} with a shifted pointer index. 

*android.view.MotionEvent.getActionIndex()*

public final int getActionIndex()

For (|android.view.MotionEvent|) or (|android.view.MotionEvent|) as returned by 
(|android.view.MotionEvent|) , this returns the associated pointer index. The 
index may be used with (|android.view.MotionEvent|) , 
(|android.view.MotionEvent|) , (|android.view.MotionEvent|) , 
(|android.view.MotionEvent|) , and (|android.view.MotionEvent|) to get 
information about the pointer that has gone down or up. 



    Returns: The index associated with the action. 

*android.view.MotionEvent.getActionMasked()*

public final int getActionMasked()

Return the masked action being performed, without pointer index information. 
Use (|android.view.MotionEvent|) to return the index associated with pointer 
actions. 



    Returns: The action, such as {@link #ACTION_DOWN} or {@link #ACTION_POINTER_DOWN}. 

*android.view.MotionEvent.getAxisValue(int)*

public final float getAxisValue(int axis)

(|android.view.MotionEvent|) for the first pointer index (may be an arbitrary 
pointer identifier). 


    axis - The axis identifier for the axis value to retrieve. 

*android.view.MotionEvent.getAxisValue(int,int)*

public final float getAxisValue(
  int axis,
  int pointerIndex)

Returns the value of the requested axis for the given pointer index (use 
(|android.view.MotionEvent|) to find the pointer identifier for this index). 


    axis - The axis identifier for the axis value to retrieve. 
    pointerIndex - Raw index of pointer to retrieve. Value may be from 0 (the first pointer that 
       is down) to {@link #getPointerCount()}-1. 

    Returns: The value of the axis, or 0 if the axis is not available. 

*android.view.MotionEvent.getButtonState()*

public final int getButtonState()

Gets the state of all buttons that are pressed such as a mouse or stylus 
button. 



    Returns: The button state. 

*android.view.MotionEvent.getDeviceId()*

public final int getDeviceId()





*android.view.MotionEvent.getDownTime()*

public final long getDownTime()

Returns the time (in ms) when the user originally pressed down to start a 
stream of position events. 



*android.view.MotionEvent.getEdgeFlags()*

public final int getEdgeFlags()

Returns a bitfield indicating which edges, if any, were touched by this 
MotionEvent. For touch events, clients can use this to determine if the user's 
finger was touching the edge of the display. 

This property is only set for (|android.view.MotionEvent|) events. 



*android.view.MotionEvent.getEventTime()*

public final long getEventTime()

Retrieve the time this event occurred, in the (|android.os.SystemClock|) time 
base. 



    Returns: Returns the time this event occurred, in the {@link 
             android.os.SystemClock#uptimeMillis} time base. 

*android.view.MotionEvent.getEventTimeNano()*

public final long getEventTimeNano()

Retrieve the time this event occurred, in the (|android.os.SystemClock|) time 
base but with nanosecond precision. 

The value is in nanosecond precision but it may not have nanosecond accuracy. 



    Returns: Returns the time this event occurred, in the {@link 
             android.os.SystemClock#uptimeMillis} time base but with nanosecond 
             precision. 

*android.view.MotionEvent.getFlags()*

public final int getFlags()

Gets the motion event flags. 



*android.view.MotionEvent.getHistoricalAxisValue(int,int)*

public final float getHistoricalAxisValue(
  int axis,
  int pos)

(|android.view.MotionEvent|) for the first pointer index (may be an arbitrary 
pointer identifier). 


    axis - The axis identifier for the axis value to retrieve. 
    pos - Which historical value to return; must be less than {@link #getHistorySize} 

*android.view.MotionEvent.getHistoricalAxisValue(int,int,int)*

public final float getHistoricalAxisValue(
  int axis,
  int pointerIndex,
  int pos)

Returns the historical value of the requested axis, as per 
(|android.view.MotionEvent|) , occurred between this event and the previous 
event for the given pointer. Only applies to ACTION_MOVE events. 


    axis - The axis identifier for the axis value to retrieve. 
    pointerIndex - Raw index of pointer to retrieve. Value may be from 0 (the first pointer that 
       is down) to {@link #getPointerCount()}-1. 
    pos - Which historical value to return; must be less than {@link #getHistorySize} 

    Returns: The value of the axis, or 0 if the axis is not available. 

*android.view.MotionEvent.getHistoricalEventTime(int)*

public final long getHistoricalEventTime(int pos)

Returns the time that a historical movement occurred between this event and the 
previous event, in the (|android.os.SystemClock|) time base. 

This only applies to ACTION_MOVE events. 


    pos - Which historical value to return; must be less than {@link #getHistorySize} 

    Returns: Returns the time that a historical movement occurred between this event and the 
             previous event, in the {@link android.os.SystemClock#uptimeMillis} 
             time base. 

*android.view.MotionEvent.getHistoricalEventTimeNano(int)*

public final long getHistoricalEventTimeNano(int pos)

Returns the time that a historical movement occurred between this event and the 
previous event, in the (|android.os.SystemClock|) time base but with nanosecond 
(instead of millisecond) precision. 

This only applies to ACTION_MOVE events. 

The value is in nanosecond precision but it may not have nanosecond accuracy. 


    pos - Which historical value to return; must be less than {@link #getHistorySize} 

    Returns: Returns the time that a historical movement occurred between this event and the 
             previous event, in the {@link android.os.SystemClock#uptimeMillis} 
             time base but with nanosecond (instead of millisecond) precision. 

*android.view.MotionEvent.getHistoricalOrientation(int)*

public final float getHistoricalOrientation(int pos)

(|android.view.MotionEvent|) for the first pointer index (may be an arbitrary 
pointer identifier). 


    pos - Which historical value to return; must be less than {@link #getHistorySize} 

*android.view.MotionEvent.getHistoricalOrientation(int,int)*

public final float getHistoricalOrientation(
  int pointerIndex,
  int pos)

Returns a historical orientation coordinate, as per 
(|android.view.MotionEvent|) , that occurred between this event and the 
previous event for the given pointer. Only applies to ACTION_MOVE events. 


    pointerIndex - Raw index of pointer to retrieve. Value may be from 0 (the first pointer that 
       is down) to {@link #getPointerCount()}-1. 
    pos - Which historical value to return; must be less than {@link #getHistorySize} 

*android.view.MotionEvent.getHistoricalPointerCoords(int,int,MotionEvent.PointerCoords)*

public final void getHistoricalPointerCoords(
  int pointerIndex,
  int pos,
  android.view.MotionEvent.PointerCoords outPointerCoords)

Populates a (|android.view.MotionEvent.PointerCoords|) object with historical 
pointer coordinate data, as per (|android.view.MotionEvent|) , that occurred 
between this event and the previous event for the given pointer. Only applies 
to ACTION_MOVE events. 


    pointerIndex - Raw index of pointer to retrieve. Value may be from 0 (the first pointer that 
       is down) to {@link #getPointerCount()}-1. 
    pos - Which historical value to return; must be less than {@link #getHistorySize} 
    outPointerCoords - The pointer coordinate object to populate. 

*android.view.MotionEvent.getHistoricalPressure(int)*

public final float getHistoricalPressure(int pos)

(|android.view.MotionEvent|) for the first pointer index (may be an arbitrary 
pointer identifier). 


    pos - Which historical value to return; must be less than {@link #getHistorySize} 

*android.view.MotionEvent.getHistoricalPressure(int,int)*

public final float getHistoricalPressure(
  int pointerIndex,
  int pos)

Returns a historical pressure coordinate, as per (|android.view.MotionEvent|) , 
that occurred between this event and the previous event for the given pointer. 
Only applies to ACTION_MOVE events. 


    pointerIndex - Raw index of pointer to retrieve. Value may be from 0 (the first pointer that 
       is down) to {@link #getPointerCount()}-1. 
    pos - Which historical value to return; must be less than {@link #getHistorySize} 

*android.view.MotionEvent.getHistoricalSize(int)*

public final float getHistoricalSize(int pos)

(|android.view.MotionEvent|) for the first pointer index (may be an arbitrary 
pointer identifier). 


    pos - Which historical value to return; must be less than {@link #getHistorySize} 

*android.view.MotionEvent.getHistoricalSize(int,int)*

public final float getHistoricalSize(
  int pointerIndex,
  int pos)

Returns a historical size coordinate, as per (|android.view.MotionEvent|) , 
that occurred between this event and the previous event for the given pointer. 
Only applies to ACTION_MOVE events. 


    pointerIndex - Raw index of pointer to retrieve. Value may be from 0 (the first pointer that 
       is down) to {@link #getPointerCount()}-1. 
    pos - Which historical value to return; must be less than {@link #getHistorySize} 

*android.view.MotionEvent.getHistoricalToolMajor(int)*

public final float getHistoricalToolMajor(int pos)

(|android.view.MotionEvent|) for the first pointer index (may be an arbitrary 
pointer identifier). 


    pos - Which historical value to return; must be less than {@link #getHistorySize} 

*android.view.MotionEvent.getHistoricalToolMajor(int,int)*

public final float getHistoricalToolMajor(
  int pointerIndex,
  int pos)

Returns a historical tool major axis coordinate, as per 
(|android.view.MotionEvent|) , that occurred between this event and the 
previous event for the given pointer. Only applies to ACTION_MOVE events. 


    pointerIndex - Raw index of pointer to retrieve. Value may be from 0 (the first pointer that 
       is down) to {@link #getPointerCount()}-1. 
    pos - Which historical value to return; must be less than {@link #getHistorySize} 

*android.view.MotionEvent.getHistoricalToolMinor(int)*

public final float getHistoricalToolMinor(int pos)

(|android.view.MotionEvent|) for the first pointer index (may be an arbitrary 
pointer identifier). 


    pos - Which historical value to return; must be less than {@link #getHistorySize} 

*android.view.MotionEvent.getHistoricalToolMinor(int,int)*

public final float getHistoricalToolMinor(
  int pointerIndex,
  int pos)

Returns a historical tool minor axis coordinate, as per 
(|android.view.MotionEvent|) , that occurred between this event and the 
previous event for the given pointer. Only applies to ACTION_MOVE events. 


    pointerIndex - Raw index of pointer to retrieve. Value may be from 0 (the first pointer that 
       is down) to {@link #getPointerCount()}-1. 
    pos - Which historical value to return; must be less than {@link #getHistorySize} 

*android.view.MotionEvent.getHistoricalTouchMajor(int)*

public final float getHistoricalTouchMajor(int pos)

(|android.view.MotionEvent|) for the first pointer index (may be an arbitrary 
pointer identifier). 


    pos - Which historical value to return; must be less than {@link #getHistorySize} 

*android.view.MotionEvent.getHistoricalTouchMajor(int,int)*

public final float getHistoricalTouchMajor(
  int pointerIndex,
  int pos)

Returns a historical touch major axis coordinate, as per 
(|android.view.MotionEvent|) , that occurred between this event and the 
previous event for the given pointer. Only applies to ACTION_MOVE events. 


    pointerIndex - Raw index of pointer to retrieve. Value may be from 0 (the first pointer that 
       is down) to {@link #getPointerCount()}-1. 
    pos - Which historical value to return; must be less than {@link #getHistorySize} 

*android.view.MotionEvent.getHistoricalTouchMinor(int)*

public final float getHistoricalTouchMinor(int pos)

(|android.view.MotionEvent|) for the first pointer index (may be an arbitrary 
pointer identifier). 


    pos - Which historical value to return; must be less than {@link #getHistorySize} 

*android.view.MotionEvent.getHistoricalTouchMinor(int,int)*

public final float getHistoricalTouchMinor(
  int pointerIndex,
  int pos)

Returns a historical touch minor axis coordinate, as per 
(|android.view.MotionEvent|) , that occurred between this event and the 
previous event for the given pointer. Only applies to ACTION_MOVE events. 


    pointerIndex - Raw index of pointer to retrieve. Value may be from 0 (the first pointer that 
       is down) to {@link #getPointerCount()}-1. 
    pos - Which historical value to return; must be less than {@link #getHistorySize} 

*android.view.MotionEvent.getHistoricalX(int)*

public final float getHistoricalX(int pos)

(|android.view.MotionEvent|) for the first pointer index (may be an arbitrary 
pointer identifier). 


    pos - Which historical value to return; must be less than {@link #getHistorySize} 

*android.view.MotionEvent.getHistoricalX(int,int)*

public final float getHistoricalX(
  int pointerIndex,
  int pos)

Returns a historical X coordinate, as per (|android.view.MotionEvent|) , that 
occurred between this event and the previous event for the given pointer. Only 
applies to ACTION_MOVE events. 


    pointerIndex - Raw index of pointer to retrieve. Value may be from 0 (the first pointer that 
       is down) to {@link #getPointerCount()}-1. 
    pos - Which historical value to return; must be less than {@link #getHistorySize} 

*android.view.MotionEvent.getHistoricalY(int)*

public final float getHistoricalY(int pos)

(|android.view.MotionEvent|) for the first pointer index (may be an arbitrary 
pointer identifier). 


    pos - Which historical value to return; must be less than {@link #getHistorySize} 

*android.view.MotionEvent.getHistoricalY(int,int)*

public final float getHistoricalY(
  int pointerIndex,
  int pos)

Returns a historical Y coordinate, as per (|android.view.MotionEvent|) , that 
occurred between this event and the previous event for the given pointer. Only 
applies to ACTION_MOVE events. 


    pointerIndex - Raw index of pointer to retrieve. Value may be from 0 (the first pointer that 
       is down) to {@link #getPointerCount()}-1. 
    pos - Which historical value to return; must be less than {@link #getHistorySize} 

*android.view.MotionEvent.getHistorySize()*

public final int getHistorySize()

Returns the number of historical points in this event. These are movements that 
have occurred between this event and the previous event. This only applies to 
ACTION_MOVE events -- all other actions will have a size of 0. 



    Returns: Returns the number of historical points in the event. 

*android.view.MotionEvent.getMetaState()*

public final int getMetaState()

Returns the state of any meta / modifier keys that were in effect when the 
event was generated. This is the same values as those returned by 
KeyEvent.getMetaState(|android.view.KeyEvent|) . 



    Returns: an integer in which each bit set to 1 represents a pressed meta key 

*android.view.MotionEvent.getOrientation()*

public final float getOrientation()

(|android.view.MotionEvent|) for the first pointer index (may be an arbitrary 
pointer identifier). 



*android.view.MotionEvent.getOrientation(int)*

public final float getOrientation(int pointerIndex)

Returns the orientation of the touch area and tool area in radians clockwise 
from vertical for the given pointer index (use (|android.view.MotionEvent|) to 
find the pointer identifier for this index). An angle of 0 radians indicates 
that the major axis of contact is oriented upwards, is perfectly circular or is 
of unknown orientation. A positive angle indicates that the major axis of 
contact is oriented to the right. A negative angle indicates that the major 
axis of contact is oriented to the left. The full range is from -PI/2 radians 
(finger pointing fully left) to PI/2 radians (finger pointing fully right). 


    pointerIndex - Raw index of pointer to retrieve. Value may be from 0 (the first pointer that 
       is down) to {@link #getPointerCount()}-1. 

*android.view.MotionEvent.getPointerCoords(int,MotionEvent.PointerCoords)*

public final void getPointerCoords(
  int pointerIndex,
  android.view.MotionEvent.PointerCoords outPointerCoords)

Populates a (|android.view.MotionEvent.PointerCoords|) object with pointer 
coordinate data for the specified pointer index. 


    pointerIndex - Raw index of pointer to retrieve. Value may be from 0 (the first pointer that 
       is down) to {@link #getPointerCount()}-1. 
    outPointerCoords - The pointer coordinate object to populate. 

*android.view.MotionEvent.getPointerCount()*

public final int getPointerCount()

The number of pointers of data contained in this event. Always >= 1. 



*android.view.MotionEvent.getPointerId(int)*

public final int getPointerId(int pointerIndex)

Return the pointer identifier associated with a particular pointer data index 
is this event. The identifier tells you the actual pointer number associated 
with the data, accounting for individual pointers going up and down since the 
start of the current gesture. 


    pointerIndex - Raw index of pointer to retrieve. Value may be from 0 (the first pointer that 
       is down) to {@link #getPointerCount()}-1. 

*android.view.MotionEvent.getPointerIdBits()*

public final int getPointerIdBits()

Gets an integer where each pointer id present in the event is marked as a bit. 



*android.view.MotionEvent.getPointerProperties(int,MotionEvent.PointerProperties)*

public final void getPointerProperties(
  int pointerIndex,
  android.view.MotionEvent.PointerProperties outPointerProperties)

Populates a (|android.view.MotionEvent.PointerProperties|) object with pointer 
properties for the specified pointer index. 


    pointerIndex - Raw index of pointer to retrieve. Value may be from 0 (the first pointer that 
       is down) to {@link #getPointerCount()}-1. 
    outPointerProperties - The pointer properties object to populate. 

*android.view.MotionEvent.getPressure()*

public final float getPressure()

(|android.view.MotionEvent|) for the first pointer index (may be an arbitrary 
pointer identifier). 



*android.view.MotionEvent.getPressure(int)*

public final float getPressure(int pointerIndex)

Returns the current pressure of this event for the given pointer index (use 
(|android.view.MotionEvent|) to find the pointer identifier for this index). 
The pressure generally ranges from 0 (no pressure at all) to 1 (normal 
pressure), however values higher than 1 may be generated depending on the 
calibration of the input device. 


    pointerIndex - Raw index of pointer to retrieve. Value may be from 0 (the first pointer that 
       is down) to {@link #getPointerCount()}-1. 

*android.view.MotionEvent.getRawX()*

public final float getRawX()

Returns the original raw X coordinate of this event. For touch events on the 
screen, this is the original location of the event on the screen, before it had 
been adjusted for the containing window and views. 



*android.view.MotionEvent.getRawY()*

public final float getRawY()

Returns the original raw Y coordinate of this event. For touch events on the 
screen, this is the original location of the event on the screen, before it had 
been adjusted for the containing window and views. 



*android.view.MotionEvent.getSize()*

public final float getSize()

(|android.view.MotionEvent|) for the first pointer index (may be an arbitrary 
pointer identifier). 



*android.view.MotionEvent.getSize(int)*

public final float getSize(int pointerIndex)

Returns a scaled value of the approximate size for the given pointer index (use 
(|android.view.MotionEvent|) to find the pointer identifier for this index). 
This represents some approximation of the area of the screen being pressed; the 
actual value in pixels corresponding to the touch is normalized with the device 
specific range of values and scaled to a value between 0 and 1. The value of 
size can be used to determine fat touch events. 


    pointerIndex - Raw index of pointer to retrieve. Value may be from 0 (the first pointer that 
       is down) to {@link #getPointerCount()}-1. 

*android.view.MotionEvent.getSource()*

public final int getSource()





*android.view.MotionEvent.getToolMajor()*

public final float getToolMajor()

(|android.view.MotionEvent|) for the first pointer index (may be an arbitrary 
pointer identifier). 



*android.view.MotionEvent.getToolMajor(int)*

public final float getToolMajor(int pointerIndex)

Returns the length of the major axis of an ellipse that describes the size of 
the approaching tool for the given pointer index (use 
(|android.view.MotionEvent|) to find the pointer identifier for this index). 
The tool area represents the estimated size of the finger or pen that is 
touching the device independent of its actual touch area at the point of 
contact. 


    pointerIndex - Raw index of pointer to retrieve. Value may be from 0 (the first pointer that 
       is down) to {@link #getPointerCount()}-1. 

*android.view.MotionEvent.getToolMinor()*

public final float getToolMinor()

(|android.view.MotionEvent|) for the first pointer index (may be an arbitrary 
pointer identifier). 



*android.view.MotionEvent.getToolMinor(int)*

public final float getToolMinor(int pointerIndex)

Returns the length of the minor axis of an ellipse that describes the size of 
the approaching tool for the given pointer index (use 
(|android.view.MotionEvent|) to find the pointer identifier for this index). 
The tool area represents the estimated size of the finger or pen that is 
touching the device independent of its actual touch area at the point of 
contact. 


    pointerIndex - Raw index of pointer to retrieve. Value may be from 0 (the first pointer that 
       is down) to {@link #getPointerCount()}-1. 

*android.view.MotionEvent.getToolType(int)*

public final int getToolType(int pointerIndex)

Gets the tool type of a pointer for the given pointer index. The tool type 
indicates the type of tool used to make contact such as a finger or stylus, if 
known. 


    pointerIndex - Raw index of pointer to retrieve. Value may be from 0 (the first pointer that 
       is down) to {@link #getPointerCount()}-1. 

    Returns: The tool type of the pointer. 

*android.view.MotionEvent.getTouchMajor()*

public final float getTouchMajor()

(|android.view.MotionEvent|) for the first pointer index (may be an arbitrary 
pointer identifier). 



*android.view.MotionEvent.getTouchMajor(int)*

public final float getTouchMajor(int pointerIndex)

Returns the length of the major axis of an ellipse that describes the touch 
area at the point of contact for the given pointer index (use 
(|android.view.MotionEvent|) to find the pointer identifier for this index). 


    pointerIndex - Raw index of pointer to retrieve. Value may be from 0 (the first pointer that 
       is down) to {@link #getPointerCount()}-1. 

*android.view.MotionEvent.getTouchMinor()*

public final float getTouchMinor()

(|android.view.MotionEvent|) for the first pointer index (may be an arbitrary 
pointer identifier). 



*android.view.MotionEvent.getTouchMinor(int)*

public final float getTouchMinor(int pointerIndex)

Returns the length of the minor axis of an ellipse that describes the touch 
area at the point of contact for the given pointer index (use 
(|android.view.MotionEvent|) to find the pointer identifier for this index). 


    pointerIndex - Raw index of pointer to retrieve. Value may be from 0 (the first pointer that 
       is down) to {@link #getPointerCount()}-1. 

*android.view.MotionEvent.getX()*

public final float getX()

(|android.view.MotionEvent|) for the first pointer index (may be an arbitrary 
pointer identifier). 



*android.view.MotionEvent.getX(int)*

public final float getX(int pointerIndex)

Returns the X coordinate of this event for the given pointer index (use 
(|android.view.MotionEvent|) to find the pointer identifier for this index). 
Whole numbers are pixels; the value may have a fraction for input devices that 
are sub-pixel precise. 


    pointerIndex - Raw index of pointer to retrieve. Value may be from 0 (the first pointer that 
       is down) to {@link #getPointerCount()}-1. 

*android.view.MotionEvent.getXPrecision()*

public final float getXPrecision()

Return the precision of the X coordinates being reported. You can multiply this 
number with (|android.view.MotionEvent|) to find the actual hardware value of 
the X coordinate. 



    Returns: Returns the precision of X coordinates being reported. 

*android.view.MotionEvent.getY()*

public final float getY()

(|android.view.MotionEvent|) for the first pointer index (may be an arbitrary 
pointer identifier). 



*android.view.MotionEvent.getY(int)*

public final float getY(int pointerIndex)

Returns the Y coordinate of this event for the given pointer index (use 
(|android.view.MotionEvent|) to find the pointer identifier for this index). 
Whole numbers are pixels; the value may have a fraction for input devices that 
are sub-pixel precise. 


    pointerIndex - Raw index of pointer to retrieve. Value may be from 0 (the first pointer that 
       is down) to {@link #getPointerCount()}-1. 

*android.view.MotionEvent.getYPrecision()*

public final float getYPrecision()

Return the precision of the Y coordinates being reported. You can multiply this 
number with (|android.view.MotionEvent|) to find the actual hardware value of 
the Y coordinate. 



    Returns: Returns the precision of Y coordinates being reported. 

*android.view.MotionEvent.isTainted()*

public final boolean isTainted()





*android.view.MotionEvent.isTouchEvent()*

public final boolean isTouchEvent()

Returns true if this motion event is a touch event. 

Specifically excludes pointer events with action (|android.view.MotionEvent|) , 
(|android.view.MotionEvent|) , (|android.view.MotionEvent|) , or 
(|android.view.MotionEvent|) because they are not actually touch events (the 
pointer is not down). 



    Returns: True if this motion event is a touch event. 

*android.view.MotionEvent.isWithinBoundsNoHistory(float,float,float,float)*

public final boolean isWithinBoundsNoHistory(
  float left,
  float top,
  float right,
  float bottom)

Returns true if all points in the motion event are completely within the 
specified bounds. 



*android.view.MotionEvent.obtain(long,long,int,float,float,float,float,int,float,float,int,int)*

public static |android.view.MotionEvent| obtain(
  long downTime,
  long eventTime,
  int action,
  float x,
  float y,
  float pressure,
  float size,
  int metaState,
  float xPrecision,
  float yPrecision,
  int deviceId,
  int edgeFlags)

Create a new MotionEvent, filling in all of the basic values that define the 
motion. 


    downTime - The time (in ms) when the user originally pressed down to start a stream of 
       position events. This must be obtained from {@link 
       SystemClock#uptimeMillis()}. 
    eventTime - The the time (in ms) when this specific event was generated. This must be 
       obtained from {@link SystemClock#uptimeMillis()}. 
    action - The kind of action being performed, such as {@link #ACTION_DOWN}. 
    x - The X coordinate of this event. 
    y - The Y coordinate of this event. 
    pressure - The current pressure of this event. The pressure generally ranges from 0 (no 
       pressure at all) to 1 (normal pressure), however values higher than 1 
       may be generated depending on the calibration of the input device. 
    size - A scaled value of the approximate size of the area being pressed when touched 
       with the finger. The actual value in pixels corresponding to the finger 
       touch is normalized with a device specific range of values and scaled to 
       a value between 0 and 1. 
    metaState - The state of any meta / modifier keys that were in effect when the event was 
       generated. 
    xPrecision - The precision of the X coordinate being reported. 
    yPrecision - The precision of the Y coordinate being reported. 
    deviceId - The id for the device that this event came from. An id of zero indicates that 
       the event didn't come from a physical device; other numbers are 
       arbitrary and you shouldn't depend on the values. 
    edgeFlags - A bitfield indicating which edges, if any, were touched by this MotionEvent. 

*android.view.MotionEvent.obtain(long,long,int,float,float,int)*

public static |android.view.MotionEvent| obtain(
  long downTime,
  long eventTime,
  int action,
  float x,
  float y,
  int metaState)

Create a new MotionEvent, filling in a subset of the basic motion values. Those 
not specified here are: device id (always 0), pressure and size (always 1), x 
and y precision (always 1), and edgeFlags (always 0). 


    downTime - The time (in ms) when the user originally pressed down to start a stream of 
       position events. This must be obtained from {@link 
       SystemClock#uptimeMillis()}. 
    eventTime - The the time (in ms) when this specific event was generated. This must be 
       obtained from {@link SystemClock#uptimeMillis()}. 
    action - The kind of action being performed, such as {@link #ACTION_DOWN}. 
    x - The X coordinate of this event. 
    y - The Y coordinate of this event. 
    metaState - The state of any meta / modifier keys that were in effect when the event was 
       generated. 

*android.view.MotionEvent.obtain(long,long,int,int,float,float,float,float,int,float,float,int,int)*

public static |android.view.MotionEvent| obtain(
  long downTime,
  long eventTime,
  int action,
  int pointerCount,
  float x,
  float y,
  float pressure,
  float size,
  int metaState,
  float xPrecision,
  float yPrecision,
  int deviceId,
  int edgeFlags)

Create a new MotionEvent, filling in all of the basic values that define the 
motion. 

    Deprecated: Use {@link #obtain(long, long, int, float, float, float, float, int, float, float, int, int)}
 instead.

    downTime - The time (in ms) when the user originally pressed down to start a stream of 
       position events. This must be obtained from {@link 
       SystemClock#uptimeMillis()}. 
    eventTime - The the time (in ms) when this specific event was generated. This must be 
       obtained from {@link SystemClock#uptimeMillis()}. 
    action - The kind of action being performed, such as {@link #ACTION_DOWN}. 
    pointerCount - The number of pointers that are active in this event. 
    x - The X coordinate of this event. 
    y - The Y coordinate of this event. 
    pressure - The current pressure of this event. The pressure generally ranges from 0 (no 
       pressure at all) to 1 (normal pressure), however values higher than 1 
       may be generated depending on the calibration of the input device. 
    size - A scaled value of the approximate size of the area being pressed when touched 
       with the finger. The actual value in pixels corresponding to the finger 
       touch is normalized with a device specific range of values and scaled to 
       a value between 0 and 1. 
    metaState - The state of any meta / modifier keys that were in effect when the event was 
       generated. 
    xPrecision - The precision of the X coordinate being reported. 
    yPrecision - The precision of the Y coordinate being reported. 
    deviceId - The id for the device that this event came from. An id of zero indicates that 
       the event didn't come from a physical device; other numbers are 
       arbitrary and you shouldn't depend on the values. 
    edgeFlags - A bitfield indicating which edges, if any, were touched by this MotionEvent. 

*android.view.MotionEvent.obtain(long,long,int,int,int[],MotionEvent.PointerCoords[],int,float,float,int,int,int,int)*

public static |android.view.MotionEvent| obtain(
  long downTime,
  long eventTime,
  int action,
  int pointerCount,
  int[] pointerIds,
  android.view.MotionEvent.PointerCoords[] pointerCoords,
  int metaState,
  float xPrecision,
  float yPrecision,
  int deviceId,
  int edgeFlags,
  int source,
  int flags)

Create a new MotionEvent, filling in all of the basic values that define the 
motion. 

    Deprecated: Use {@link #obtain(long, long, int, int, PointerProperties[], PointerCoords[], int, int, float, float, int, int, int, int)}
 instead.

    downTime - The time (in ms) when the user originally pressed down to start a stream of 
       position events. This must be obtained from {@link 
       SystemClock#uptimeMillis()}. 
    eventTime - The the time (in ms) when this specific event was generated. This must be 
       obtained from {@link SystemClock#uptimeMillis()}. 
    action - The kind of action being performed, such as {@link #ACTION_DOWN}. 
    pointerCount - The number of pointers that will be in this event. 
    pointerIds - An array of pointerCount values providing an identifier for each pointer. 
    pointerCoords - An array of pointerCount values providing a {@link PointerCoords} coordinate 
       object for each pointer. 
    metaState - The state of any meta / modifier keys that were in effect when the event was 
       generated. 
    xPrecision - The precision of the X coordinate being reported. 
    yPrecision - The precision of the Y coordinate being reported. 
    deviceId - The id for the device that this event came from. An id of zero indicates that 
       the event didn't come from a physical device; other numbers are 
       arbitrary and you shouldn't depend on the values. 
    edgeFlags - A bitfield indicating which edges, if any, were touched by this MotionEvent. 
    source - The source of this event. 
    flags - The motion event flags. 

*android.view.MotionEvent.obtain(long,long,int,int,MotionEvent.PointerProperties[],MotionEvent.PointerCoords[],int,int,float,float,int,int,int,int)*

public static |android.view.MotionEvent| obtain(
  long downTime,
  long eventTime,
  int action,
  int pointerCount,
  android.view.MotionEvent.PointerProperties[] pointerProperties,
  android.view.MotionEvent.PointerCoords[] pointerCoords,
  int metaState,
  int buttonState,
  float xPrecision,
  float yPrecision,
  int deviceId,
  int edgeFlags,
  int source,
  int flags)

Create a new MotionEvent, filling in all of the basic values that define the 
motion. 


    downTime - The time (in ms) when the user originally pressed down to start a stream of 
       position events. This must be obtained from {@link 
       SystemClock#uptimeMillis()}. 
    eventTime - The the time (in ms) when this specific event was generated. This must be 
       obtained from {@link SystemClock#uptimeMillis()}. 
    action - The kind of action being performed, such as {@link #ACTION_DOWN}. 
    pointerCount - The number of pointers that will be in this event. 
    pointerProperties - An array of pointerCount values providing a {@link PointerProperties} property 
       object for each pointer, which must include the pointer identifier. 
    pointerCoords - An array of pointerCount values providing a {@link PointerCoords} coordinate 
       object for each pointer. 
    metaState - The state of any meta / modifier keys that were in effect when the event was 
       generated. 
    buttonState - The state of buttons that are pressed. 
    xPrecision - The precision of the X coordinate being reported. 
    yPrecision - The precision of the Y coordinate being reported. 
    deviceId - The id for the device that this event came from. An id of zero indicates that 
       the event didn't come from a physical device; other numbers are 
       arbitrary and you shouldn't depend on the values. 
    edgeFlags - A bitfield indicating which edges, if any, were touched by this MotionEvent. 
    source - The source of this event. 
    flags - The motion event flags. 

*android.view.MotionEvent.obtain(MotionEvent)*

public static |android.view.MotionEvent| obtain(android.view.MotionEvent other)

Create a new MotionEvent, copying from an existing one. 



*android.view.MotionEvent.obtainNoHistory(MotionEvent)*

public static |android.view.MotionEvent| obtainNoHistory(android.view.MotionEvent other)

Create a new MotionEvent, copying from an existing one, but not including any 
historical point information. 



*android.view.MotionEvent.offsetLocation(float,float)*

public final void offsetLocation(
  float deltaX,
  float deltaY)

Adjust this event's location. 


    deltaX - Amount to add to the current X coordinate of the event. 
    deltaY - Amount to add to the current Y coordinate of the event. 

*android.view.MotionEvent.recycle()*

public final void recycle()

Recycle the MotionEvent, to be re-used by a later caller. After calling this 
function you must not ever touch the event again. 



*android.view.MotionEvent.scale(float)*

public final void scale(float scale)

Applies a scale factor to all points within this event. 

This method is used to adjust touch events to simulate different density 
displays for compatibility mode. The values returned by 
(|android.view.MotionEvent|) , (|android.view.MotionEvent|) , 
(|android.view.MotionEvent|) and (|android.view.MotionEvent|) are also affected 
by the scale factor. 


    scale - The scale factor to apply. 

*android.view.MotionEvent.setAction(int)*

public final void setAction(int action)

Sets this event's action. 



*android.view.MotionEvent.setDownTime(long)*

public final void setDownTime(long downTime)

Sets the time (in ms) when the user originally pressed down to start a stream 
of position events. 



*android.view.MotionEvent.setEdgeFlags(int)*

public final void setEdgeFlags(int flags)

Sets the bitfield indicating which edges, if any, were touched by this 
MotionEvent. 



*android.view.MotionEvent.setLocation(float,float)*

public final void setLocation(
  float x,
  float y)

Set this event's location. Applies (|android.view.MotionEvent|) with a delta 
from the current location to the given new location. 


    x - New absolute X location. 
    y - New absolute Y location. 

*android.view.MotionEvent.setSource(int)*

public final void setSource(int source)





*android.view.MotionEvent.setTainted(boolean)*

public final void setTainted(boolean tainted)





*android.view.MotionEvent.split(int)*

public final |android.view.MotionEvent| split(int idBits)

Splits a motion event such that it includes only a subset of pointer ids. 



*android.view.MotionEvent.toolTypeToString(int)*

public static |java.lang.String| toolTypeToString(int toolType)

Returns a string that represents the symbolic name of the specified tool type 
such as "TOOL_TYPE_FINGER" or an equivalent numeric constant such as "42" if 
unknown. 


    toolType - The tool type. 

    Returns: The symbolic name of the specified tool type. 

*android.view.MotionEvent.toString()*

public |java.lang.String| toString()





*android.view.MotionEvent.transform(Matrix)*

public final void transform(Matrix matrix)

Applies a transformation matrix to all of the points in the event. 


    matrix - The transformation matrix to apply. 

*android.view.MotionEvent.writeToParcel(Parcel,int)*

public void writeToParcel(
  android.os.Parcel out,
  int flags)






