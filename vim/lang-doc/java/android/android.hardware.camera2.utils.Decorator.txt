*android.hardware.camera2.utils.Decorator* *Decorator* This is an implementation

public class Decorator<T>
  extends    |java.lang.Object|
  implements |java.lang.reflect.InvocationHandler|

|android.hardware.camera2.utils.Decorator_Description|
|android.hardware.camera2.utils.Decorator_Fields|
|android.hardware.camera2.utils.Decorator_Constructors|
|android.hardware.camera2.utils.Decorator_Methods|

================================================================================

*android.hardware.camera2.utils.Decorator_Methods*
|android.hardware.camera2.utils.Decorator.invoke(Object,Method,Object[])|
|android.hardware.camera2.utils.Decorator.newInstance(T,Decorator.DecoratorListener)|

*android.hardware.camera2.utils.Decorator_Description*

This is an implementation of the 'decorator' design pattern using Java's proxy 
mechanism. 



*android.hardware.camera2.utils.Decorator.invoke(Object,Method,Object[])*

public |java.lang.Object| invoke(
  java.lang.Object proxy,
  java.lang.reflect.Method m,
  java.lang.Object[] args)
  throws |java.lang.Throwable|
         




*android.hardware.camera2.utils.Decorator.newInstance(T,Decorator.DecoratorListener)*

public static |T| newInstance(
  T obj,
  android.hardware.camera2.utils.Decorator.DecoratorListener listener)

Create a decorator wrapping the specified object's method calls. 


    obj - the object whose method calls you want to intercept 
    listener - the decorator handler for intercepted method calls 

    Returns: a wrapped interface-compatible T 


