*android.graphics.DashPathEffect_Delegate* *DashPathEffect_Delegate* Delegate im

public final class DashPathEffect_Delegate
  extends    |android.graphics.PathEffect_Delegate|

|android.graphics.DashPathEffect_Delegate_Description|
|android.graphics.DashPathEffect_Delegate_Fields|
|android.graphics.DashPathEffect_Delegate_Constructors|
|android.graphics.DashPathEffect_Delegate_Methods|

================================================================================

*android.graphics.DashPathEffect_Delegate_Methods*
|android.graphics.DashPathEffect_Delegate.getStroke(Paint_Delegate)|
|android.graphics.DashPathEffect_Delegate.getSupportMessage()|
|android.graphics.DashPathEffect_Delegate.isSupported()|

*android.graphics.DashPathEffect_Delegate_Description*

Delegate implementing the native methods of android.graphics.DashPathEffect 

Through the layoutlib_create tool, the original native methods of 
DashPathEffect have been replaced by calls to methods of the same name in this 
delegate class. 

This class behaves like the original native implementation, but in Java, 
keeping previously native data into its own objects and mapping them to int 
that are sent back and forth between it and the original DashPathEffect class. 

Because this extends (|android.graphics.PathEffect_Delegate|) , there's no need 
to use a (|com.android.layoutlib.bridge.impl.DelegateManager|) , as all the 
PathEffect classes will be added to the manager owned by 
(|android.graphics.PathEffect_Delegate|) . 



*android.graphics.DashPathEffect_Delegate.getStroke(Paint_Delegate)*

public |java.awt.Stroke| getStroke(android.graphics.Paint_Delegate paint)





*android.graphics.DashPathEffect_Delegate.getSupportMessage()*

public |java.lang.String| getSupportMessage()





*android.graphics.DashPathEffect_Delegate.isSupported()*

public boolean isSupported()






