*android.widget.AutoCompleteTextView* *AutoCompleteTextView* An editable text vi

public class AutoCompleteTextView
  extends    |android.widget.EditText|
  implements |android.widget.Filter.FilterListener|

|android.widget.AutoCompleteTextView_Description|
|android.widget.AutoCompleteTextView_Fields|
|android.widget.AutoCompleteTextView_Constructors|
|android.widget.AutoCompleteTextView_Methods|

================================================================================

*android.widget.AutoCompleteTextView_Constructors*
|android.widget.AutoCompleteTextView(Context)|
|android.widget.AutoCompleteTextView(Context,AttributeSet)|
|android.widget.AutoCompleteTextView(Context,AttributeSet,int)|

*android.widget.AutoCompleteTextView_Methods*
|android.widget.AutoCompleteTextView.clearListSelection()|Clear the list select
|android.widget.AutoCompleteTextView.convertSelectionToString(Object)|Converts 
|android.widget.AutoCompleteTextView.dismissDropDown()|Closes the drop down if 
|android.widget.AutoCompleteTextView.enoughToFilter()|Returns true if the amoun
|android.widget.AutoCompleteTextView.ensureImeVisible(boolean)|Ensures that the
|android.widget.AutoCompleteTextView.getAdapter()|Returns a filterable list ada
|android.widget.AutoCompleteTextView.getCompletionHint()|Gets the optional hint
|android.widget.AutoCompleteTextView.getDropDownAnchor()|Returns the id for the
|android.widget.AutoCompleteTextView.getDropDownAnimationStyle()|Returns the an
|android.widget.AutoCompleteTextView.getDropDownBackground()|Gets the backgroun
|android.widget.AutoCompleteTextView.getDropDownHeight()|Returns the current he
|android.widget.AutoCompleteTextView.getDropDownHorizontalOffset()|Gets the hor
|android.widget.AutoCompleteTextView.getDropDownVerticalOffset()|Gets the verti
|android.widget.AutoCompleteTextView.getDropDownWidth()|Returns the current wid
|android.widget.AutoCompleteTextView.getFilter()|Returns the Filter obtained fr
|android.widget.AutoCompleteTextView.getItemClickListener()|Returns the listene
|android.widget.AutoCompleteTextView.getItemSelectedListener()|Returns the list
|android.widget.AutoCompleteTextView.getListSelection()|Get the position of the
|android.widget.AutoCompleteTextView.getOnItemClickListener()|Returns the liste
|android.widget.AutoCompleteTextView.getOnItemSelectedListener()|Returns the li
|android.widget.AutoCompleteTextView.getThreshold()|Returns the number of chara
|android.widget.AutoCompleteTextView.getValidator()|Returns the Validator set w
|android.widget.AutoCompleteTextView.isDropDownAlwaysVisible()|
|android.widget.AutoCompleteTextView.isDropDownDismissedOnCompletion()|Checks w
|android.widget.AutoCompleteTextView.isInputMethodNotNeeded()|
|android.widget.AutoCompleteTextView.isPerformingCompletion()|Identifies whethe
|android.widget.AutoCompleteTextView.isPopupShowing()|Indicates whether the pop
|android.widget.AutoCompleteTextView.onAttachedToWindow()|
|android.widget.AutoCompleteTextView.onCommitCompletion(CompletionInfo)|
|android.widget.AutoCompleteTextView.onDetachedFromWindow()|
|android.widget.AutoCompleteTextView.onDisplayHint(int)|
|android.widget.AutoCompleteTextView.onFilterComplete(int)|
|android.widget.AutoCompleteTextView.onFocusChanged(boolean,int,Rect)|
|android.widget.AutoCompleteTextView.onKeyDown(int,KeyEvent)|
|android.widget.AutoCompleteTextView.onKeyPreIme(int,KeyEvent)|
|android.widget.AutoCompleteTextView.onKeyUp(int,KeyEvent)|
|android.widget.AutoCompleteTextView.onWindowFocusChanged(boolean)|
|android.widget.AutoCompleteTextView.performCompletion()|Performs the text comp
|android.widget.AutoCompleteTextView.performFiltering(CharSequence,int)|Starts 
|android.widget.AutoCompleteTextView.performValidation()|If a validator was set
|android.widget.AutoCompleteTextView.replaceText(CharSequence)|Performs the tex
|android.widget.AutoCompleteTextView.setAdapter(T)|Changes the list of data use
|android.widget.AutoCompleteTextView.setCompletionHint(CharSequence)|Sets the o
|android.widget.AutoCompleteTextView.setDropDownAlwaysVisible(boolean)|Sets whe
|android.widget.AutoCompleteTextView.setDropDownAnchor(int)|Sets the view to wh
|android.widget.AutoCompleteTextView.setDropDownAnimationStyle(int)|Sets the an
|android.widget.AutoCompleteTextView.setDropDownBackgroundDrawable(Drawable)|Se
|android.widget.AutoCompleteTextView.setDropDownBackgroundResource(int)|Sets th
|android.widget.AutoCompleteTextView.setDropDownDismissedOnCompletion(boolean)|
|android.widget.AutoCompleteTextView.setDropDownHeight(int)|Sets the current he
|android.widget.AutoCompleteTextView.setDropDownHorizontalOffset(int)|Sets the 
|android.widget.AutoCompleteTextView.setDropDownVerticalOffset(int)|Sets the ve
|android.widget.AutoCompleteTextView.setDropDownWidth(int)|Sets the current wid
|android.widget.AutoCompleteTextView.setForceIgnoreOutsideTouch(boolean)|Forces
|android.widget.AutoCompleteTextView.setFrame(int,int,int,int)|
|android.widget.AutoCompleteTextView.setListSelection(int)|Set the position of 
|android.widget.AutoCompleteTextView.setOnClickListener(View.OnClickListener)|
|android.widget.AutoCompleteTextView.setOnDismissListener(AutoCompleteTextView.OnDismissListener)|
|android.widget.AutoCompleteTextView.setOnItemClickListener(AdapterView.OnItemClickListener)|
|android.widget.AutoCompleteTextView.setOnItemSelectedListener(AdapterView.OnItemSelectedListener)|
|android.widget.AutoCompleteTextView.setText(CharSequence,boolean)|Like#setText
|android.widget.AutoCompleteTextView.setThreshold(int)|Specifies the minimum nu
|android.widget.AutoCompleteTextView.setValidator(AutoCompleteTextView.Validator)|
|android.widget.AutoCompleteTextView.showDropDown()|Displays the drop down on s
|android.widget.AutoCompleteTextView.showDropDownAfterLayout()|Issues a runnabl

*android.widget.AutoCompleteTextView_Description*

An editable text view that shows completion suggestions automatically while the 
user is typing. The list of suggestions is displayed in a drop down menu from 
which the user can choose an item to replace the content of the edit box with. 

The drop down can be dismissed at any time by pressing the back key or, if no 
item is selected in the drop down, by pressing the enter/dpad center key. 

The list of suggestions is obtained from a data adapter and appears only after 
a given number of characters defined by the 
threshold(|android.widget.AutoCompleteTextView|) . 

The following code snippet shows how to create a text view which suggests 
various countries names while the user is typing: 

public class CountriesActivity extends Activity { protected void 
onCreate(Bundle icicle) { super.onCreate(icicle); 
setContentView(R.layout.countries); 

ArrayAdapter<String> adapter = new ArrayAdapter<String>(this, 
android.R.layout.simple_dropdown_item_1line, COUNTRIES); AutoCompleteTextView 
textView = (AutoCompleteTextView) findViewById(R.id.countries_list); 
textView.setAdapter(adapter); } 

private static final String[] COUNTRIES = new String[] { "Belgium", "France", 
"Italy", "Germany", "Spain" }; } 

See the <a href="guide/topics/ui/controls/text.html">Text Fields guide. 



*android.widget.AutoCompleteTextView(Context)*

public AutoCompleteTextView(android.content.Context context)




*android.widget.AutoCompleteTextView(Context,AttributeSet)*

public AutoCompleteTextView(
  android.content.Context context,
  android.util.AttributeSet attrs)




*android.widget.AutoCompleteTextView(Context,AttributeSet,int)*

public AutoCompleteTextView(
  android.content.Context context,
  android.util.AttributeSet attrs,
  int defStyle)




*android.widget.AutoCompleteTextView.clearListSelection()*

public void clearListSelection()

Clear the list selection. This may only be temporary, as user input will often 
bring it back. 



*android.widget.AutoCompleteTextView.convertSelectionToString(Object)*

protected |java.lang.CharSequence| convertSelectionToString(java.lang.Object selectedItem)

Converts the selected item from the drop down list into a sequence of character 
that can be used in the edit box. 


    selectedItem - the item selected by the user for completion 

    Returns: a sequence of characters representing the selected suggestion 

*android.widget.AutoCompleteTextView.dismissDropDown()*

public void dismissDropDown()

Closes the drop down if present on screen. 



*android.widget.AutoCompleteTextView.enoughToFilter()*

public boolean enoughToFilter()

Returns true if the amount of text in the field meets or exceeds the 
(|android.widget.AutoCompleteTextView|) requirement. You can override this to 
impose a different standard for when filtering will be triggered. 



*android.widget.AutoCompleteTextView.ensureImeVisible(boolean)*

public void ensureImeVisible(boolean visible)

Ensures that the drop down is not obscuring the IME. 


    visible - whether the ime should be in front. If false, the ime is pushed to the 
       background. 

*android.widget.AutoCompleteTextView.getAdapter()*

public |android.widget.ListAdapter| getAdapter()

Returns a filterable list adapter used for auto completion. 



    Returns: a data adapter used for auto completion 

*android.widget.AutoCompleteTextView.getCompletionHint()*

public |java.lang.CharSequence| getCompletionHint()

Gets the optional hint text displayed at the bottom of the the matching list. 



    Returns: The hint text, if any 

*android.widget.AutoCompleteTextView.getDropDownAnchor()*

public int getDropDownAnchor()

Returns the id for the view that the auto-complete drop down list is anchored 
to. 



    Returns: the view's id, or {@link View#NO_ID} if none specified 

*android.widget.AutoCompleteTextView.getDropDownAnimationStyle()*

public int getDropDownAnimationStyle()

Returns the animation style that is used when the drop-down list appears and 
disappears 



    Returns: the animation style that is used when the drop-down list appears and disappears 

*android.widget.AutoCompleteTextView.getDropDownBackground()*

public Drawable getDropDownBackground()

Gets the background of the auto-complete drop-down list. 



    Returns: the background drawable 

*android.widget.AutoCompleteTextView.getDropDownHeight()*

public int getDropDownHeight()

Returns the current height for the auto-complete drop down list. This can be a 
fixed height, or (|ViewGroup.LayoutParams|) to fill the screen, or 
(|ViewGroup.LayoutParams|) to fit the height of the drop down's content. 



    Returns: the height for the drop down list 

*android.widget.AutoCompleteTextView.getDropDownHorizontalOffset()*

public int getDropDownHorizontalOffset()

Gets the horizontal offset used for the auto-complete drop-down list. 



    Returns: the horizontal offset 

*android.widget.AutoCompleteTextView.getDropDownVerticalOffset()*

public int getDropDownVerticalOffset()

Gets the vertical offset used for the auto-complete drop-down list. 



    Returns: the vertical offset 

*android.widget.AutoCompleteTextView.getDropDownWidth()*

public int getDropDownWidth()

Returns the current width for the auto-complete drop down list. This can be a 
fixed width, or (|ViewGroup.LayoutParams|) to fill the screen, or 
(|ViewGroup.LayoutParams|) to fit the width of its anchor view. 



    Returns: the width for the drop down list 

*android.widget.AutoCompleteTextView.getFilter()*

protected |android.widget.Filter| getFilter()

Returns the Filter obtained from (|android.widget.Filterable|) , or null if 
(|android.widget.AutoCompleteTextView|) was not called with a Filterable. 



*android.widget.AutoCompleteTextView.getItemClickListener()*

public |android.widget.AdapterView.OnItemClickListener| getItemClickListener()

Returns the listener that is notified whenever the user clicks an item in the 
drop down list. 

    Deprecated: Use {@link #getOnItemClickListener()} intead


    Returns: the item click listener 

*android.widget.AutoCompleteTextView.getItemSelectedListener()*

public |android.widget.AdapterView.OnItemSelectedListener| getItemSelectedListener()

Returns the listener that is notified whenever the user selects an item in the 
drop down list. 

    Deprecated: Use {@link #getOnItemSelectedListener()} intead


    Returns: the item selected listener 

*android.widget.AutoCompleteTextView.getListSelection()*

public int getListSelection()

Get the position of the dropdown view selection, if there is one. Returns 
ListView.INVALID_POSITION(|android.widget.ListView|) if there is no dropdown or 
if there is no selection. 



    Returns: the position of the current selection, if there is one, or {@link 
             ListView#INVALID_POSITION ListView.INVALID_POSITION} if not. 

*android.widget.AutoCompleteTextView.getOnItemClickListener()*

public |android.widget.AdapterView.OnItemClickListener| getOnItemClickListener()

Returns the listener that is notified whenever the user clicks an item in the 
drop down list. 



    Returns: the item click listener 

*android.widget.AutoCompleteTextView.getOnItemSelectedListener()*

public |android.widget.AdapterView.OnItemSelectedListener| getOnItemSelectedListener()

Returns the listener that is notified whenever the user selects an item in the 
drop down list. 



    Returns: the item selected listener 

*android.widget.AutoCompleteTextView.getThreshold()*

public int getThreshold()

Returns the number of characters the user must type before the drop down list 
is shown. 



    Returns: the minimum number of characters to type to show the drop down 

*android.widget.AutoCompleteTextView.getValidator()*

public |android.widget.AutoCompleteTextView.Validator| getValidator()

Returns the Validator set with (|android.widget.AutoCompleteTextView|) , or 
null if it was not set. 



*android.widget.AutoCompleteTextView.isDropDownAlwaysVisible()*

public boolean isDropDownAlwaysVisible()





    Returns: Whether the drop-down is visible as long as there is {@link #enoughToFilter()} 

*android.widget.AutoCompleteTextView.isDropDownDismissedOnCompletion()*

public boolean isDropDownDismissedOnCompletion()

Checks whether the drop-down is dismissed when a suggestion is clicked. 



*android.widget.AutoCompleteTextView.isInputMethodNotNeeded()*

public boolean isInputMethodNotNeeded()





*android.widget.AutoCompleteTextView.isPerformingCompletion()*

public boolean isPerformingCompletion()

Identifies whether the view is currently performing a text completion, so 
subclasses can decide whether to respond to text changed events. 



*android.widget.AutoCompleteTextView.isPopupShowing()*

public boolean isPopupShowing()

Indicates whether the popup menu is showing. 



    Returns: true if the popup menu is showing, false otherwise 

*android.widget.AutoCompleteTextView.onAttachedToWindow()*

protected void onAttachedToWindow()





*android.widget.AutoCompleteTextView.onCommitCompletion(CompletionInfo)*

public void onCommitCompletion(android.view.inputmethod.CompletionInfo completion)





*android.widget.AutoCompleteTextView.onDetachedFromWindow()*

protected void onDetachedFromWindow()





*android.widget.AutoCompleteTextView.onDisplayHint(int)*

protected void onDisplayHint(int hint)





*android.widget.AutoCompleteTextView.onFilterComplete(int)*

public void onFilterComplete(int count)





*android.widget.AutoCompleteTextView.onFocusChanged(boolean,int,Rect)*

protected void onFocusChanged(
  boolean focused,
  int direction,
  Rect previouslyFocusedRect)





*android.widget.AutoCompleteTextView.onKeyDown(int,KeyEvent)*

public boolean onKeyDown(
  int keyCode,
  android.view.KeyEvent event)





*android.widget.AutoCompleteTextView.onKeyPreIme(int,KeyEvent)*

public boolean onKeyPreIme(
  int keyCode,
  android.view.KeyEvent event)





*android.widget.AutoCompleteTextView.onKeyUp(int,KeyEvent)*

public boolean onKeyUp(
  int keyCode,
  android.view.KeyEvent event)





*android.widget.AutoCompleteTextView.onWindowFocusChanged(boolean)*

public void onWindowFocusChanged(boolean hasWindowFocus)





*android.widget.AutoCompleteTextView.performCompletion()*

public void performCompletion()

Performs the text completion by converting the selected item from the drop down 
list into a string, replacing the text box's content with this string and 
finally dismissing the drop down menu. 



*android.widget.AutoCompleteTextView.performFiltering(CharSequence,int)*

protected void performFiltering(
  java.lang.CharSequence text,
  int keyCode)

Starts filtering the content of the drop down list. The filtering pattern is 
the content of the edit box. Subclasses should override this method to filter 
with a different pattern, for instance a substring of text. 


    text - the filtering pattern 
    keyCode - the last character inserted in the edit box; beware that this will be null when 
       text is being added through a soft input method. 

*android.widget.AutoCompleteTextView.performValidation()*

public void performValidation()

If a validator was set on this view and the current string is not valid, ask 
the validator to fix it. 



*android.widget.AutoCompleteTextView.replaceText(CharSequence)*

protected void replaceText(java.lang.CharSequence text)

Performs the text completion by replacing the current text by the selected 
item. Subclasses should override this method to avoid replacing the whole 
content of the edit box. 


    text - the selected suggestion in the drop down list 

*android.widget.AutoCompleteTextView.setAdapter(T)*

public void setAdapter(T extends android.widget.ListAdapter & android.widget.Filterable adapter)

Changes the list of data used for auto completion. The provided list must be a 
filterable list adapter. 

The caller is still responsible for managing any resources used by the adapter. 
Notably, when the AutoCompleteTextView is closed or released, the adapter is 
not notified. A common case is the use of (|android.widget.CursorAdapter|) , 
which contains a (|android.database.Cursor|) that must be closed. This can be 
done automatically (see startManagingCursor()(|android.app.Activity|) ), or by 
manually closing the cursor when the AutoCompleteTextView is dismissed. 


    adapter - the adapter holding the auto completion data 

*android.widget.AutoCompleteTextView.setCompletionHint(CharSequence)*

public void setCompletionHint(java.lang.CharSequence hint)

Sets the optional hint text that is displayed at the bottom of the the matching 
list. This can be used as a cue to the user on how to best use the list, or to 
provide extra information. 


    hint - the text to be displayed to the user 

*android.widget.AutoCompleteTextView.setDropDownAlwaysVisible(boolean)*

public void setDropDownAlwaysVisible(boolean dropDownAlwaysVisible)

Sets whether the drop-down should remain visible as long as there is there is 
(|android.widget.AutoCompleteTextView|) . This is useful if an unknown number 
of results are expected to show up in the adapter sometime in the future. 

The drop-down will occupy the entire screen below 
(|android.widget.AutoCompleteTextView|) regardless of the size or content of 
the list. (|android.widget.AutoCompleteTextView|) will fill any space that is 
not used by the list. 


    dropDownAlwaysVisible - Whether to keep the drop-down visible. 

*android.widget.AutoCompleteTextView.setDropDownAnchor(int)*

public void setDropDownAnchor(int id)

Sets the view to which the auto-complete drop down list should anchor. The view 
corresponding to this id will not be loaded until the next time it is needed to 
avoid loading a view which is not yet instantiated. 


    id - the id to anchor the drop down list view to 

*android.widget.AutoCompleteTextView.setDropDownAnimationStyle(int)*

public void setDropDownAnimationStyle(int animationStyle)

Sets the animation style of the auto-complete drop-down list. 

If the drop-down is showing, calling this method will take effect only the next 
time the drop-down is shown. 


    animationStyle - animation style to use when the drop-down appears and disappears. Set to -1 for 
       the default animation, 0 for no animation, or a resource identifier for 
       an explicit animation. 

*android.widget.AutoCompleteTextView.setDropDownBackgroundDrawable(Drawable)*

public void setDropDownBackgroundDrawable(Drawable d)

Sets the background of the auto-complete drop-down list. 


    d - the drawable to set as the background 

*android.widget.AutoCompleteTextView.setDropDownBackgroundResource(int)*

public void setDropDownBackgroundResource(int id)

Sets the background of the auto-complete drop-down list. 


    id - the id of the drawable to set as the background 

*android.widget.AutoCompleteTextView.setDropDownDismissedOnCompletion(boolean)*

public void setDropDownDismissedOnCompletion(boolean dropDownDismissedOnCompletion)

Sets whether the drop-down is dismissed when a suggestion is clicked. This is 
true by default. 


    dropDownDismissedOnCompletion - Whether to dismiss the drop-down. 

*android.widget.AutoCompleteTextView.setDropDownHeight(int)*

public void setDropDownHeight(int height)

Sets the current height for the auto-complete drop down list. This can be a 
fixed height, or (|ViewGroup.LayoutParams|) to fill the screen, or 
(|ViewGroup.LayoutParams|) to fit the height of the drop down's content. 


    height - the height to use 

*android.widget.AutoCompleteTextView.setDropDownHorizontalOffset(int)*

public void setDropDownHorizontalOffset(int offset)

Sets the horizontal offset used for the auto-complete drop-down list. 


    offset - the horizontal offset 

*android.widget.AutoCompleteTextView.setDropDownVerticalOffset(int)*

public void setDropDownVerticalOffset(int offset)

Sets the vertical offset used for the auto-complete drop-down list. 


    offset - the vertical offset 

*android.widget.AutoCompleteTextView.setDropDownWidth(int)*

public void setDropDownWidth(int width)

Sets the current width for the auto-complete drop down list. This can be a 
fixed width, or (|ViewGroup.LayoutParams|) to fill the screen, or 
(|ViewGroup.LayoutParams|) to fit the width of its anchor view. 


    width - the width to use 

*android.widget.AutoCompleteTextView.setForceIgnoreOutsideTouch(boolean)*

public void setForceIgnoreOutsideTouch(boolean forceIgnoreOutsideTouch)

Forces outside touches to be ignored. Normally if 
(|android.widget.AutoCompleteTextView|) is false, we allow outside touch to 
dismiss the dropdown. If this is set to true, then we ignore outside touch even 
when the drop down is not set to always visible. 



*android.widget.AutoCompleteTextView.setFrame(int,int,int,int)*

protected boolean setFrame(
  int l,
  int t,
  int r,
  int b)





*android.widget.AutoCompleteTextView.setListSelection(int)*

public void setListSelection(int position)

Set the position of the dropdown view selection. 


    position - The position to move the selector to. 

*android.widget.AutoCompleteTextView.setOnClickListener(View.OnClickListener)*

public void setOnClickListener(android.view.View.OnClickListener listener)





*android.widget.AutoCompleteTextView.setOnDismissListener(AutoCompleteTextView.OnDismissListener)*

public void setOnDismissListener(android.widget.AutoCompleteTextView.OnDismissListener dismissListener)

Set a listener that will be invoked whenever the AutoCompleteTextView's list of 
completions is dismissed. 


    dismissListener - Listener to invoke when completions are dismissed 

*android.widget.AutoCompleteTextView.setOnItemClickListener(AdapterView.OnItemClickListener)*

public void setOnItemClickListener(android.widget.AdapterView.OnItemClickListener l)

Sets the listener that will be notified when the user clicks an item in the 
drop down list. 


    l - the item click listener 

*android.widget.AutoCompleteTextView.setOnItemSelectedListener(AdapterView.OnItemSelectedListener)*

public void setOnItemSelectedListener(android.widget.AdapterView.OnItemSelectedListener l)

Sets the listener that will be notified when the user selects an item in the 
drop down list. 


    l - the item selected listener 

*android.widget.AutoCompleteTextView.setText(CharSequence,boolean)*

public void setText(
  java.lang.CharSequence text,
  boolean filter)

Like (|android.widget.AutoCompleteTextView|) , except that it can disable 
filtering. 


    filter - If false, no filtering will be performed as a result of this call. 

*android.widget.AutoCompleteTextView.setThreshold(int)*

public void setThreshold(int threshold)

Specifies the minimum number of characters the user has to type in the edit box 
before the drop down list is shown. 

When threshold is less than or equals 0, a threshold of 1 is applied. 


    threshold - the number of characters to type before the drop down is shown 

*android.widget.AutoCompleteTextView.setValidator(AutoCompleteTextView.Validator)*

public void setValidator(android.widget.AutoCompleteTextView.Validator validator)

Sets the validator used to perform text validation. 


    validator - The validator used to validate the text entered in this widget. 

*android.widget.AutoCompleteTextView.showDropDown()*

public void showDropDown()

Displays the drop down on screen. 



*android.widget.AutoCompleteTextView.showDropDownAfterLayout()*

public void showDropDownAfterLayout()

Issues a runnable to show the dropdown as soon as possible. 




