*android.hardware.usb.UsbAccessory* *UsbAccessory* A class representing a USB ac

public class UsbAccessory
  extends    |java.lang.Object|
  implements |android.os.Parcelable|

|android.hardware.usb.UsbAccessory_Description|
|android.hardware.usb.UsbAccessory_Fields|
|android.hardware.usb.UsbAccessory_Constructors|
|android.hardware.usb.UsbAccessory_Methods|

================================================================================

*android.hardware.usb.UsbAccessory_Fields*
|android.os.Parcelable.Creator<android.hardware.usb.UsbAccessory>_android.hardware.usb.UsbAccessory.CREATOR|
|int_android.hardware.usb.UsbAccessory.DESCRIPTION_STRING|
|int_android.hardware.usb.UsbAccessory.MANUFACTURER_STRING|
|int_android.hardware.usb.UsbAccessory.MODEL_STRING|
|int_android.hardware.usb.UsbAccessory.SERIAL_STRING|
|int_android.hardware.usb.UsbAccessory.URI_STRING|
|int_android.hardware.usb.UsbAccessory.VERSION_STRING|

*android.hardware.usb.UsbAccessory_Constructors*
|android.hardware.usb.UsbAccessory(String[])|UsbAccessory should only be instan
|android.hardware.usb.UsbAccessory(String,String,String,String,String,String)|U

*android.hardware.usb.UsbAccessory_Methods*
|android.hardware.usb.UsbAccessory.describeContents()|
|android.hardware.usb.UsbAccessory.equals(Object)|
|android.hardware.usb.UsbAccessory.getDescription()|Returns a user visible desc
|android.hardware.usb.UsbAccessory.getManufacturer()|Returns the manufacturer n
|android.hardware.usb.UsbAccessory.getModel()|Returns the model name of the acc
|android.hardware.usb.UsbAccessory.getSerial()|Returns the unique serial number
|android.hardware.usb.UsbAccessory.getUri()|Returns the URI for the accessory.
|android.hardware.usb.UsbAccessory.getVersion()|Returns the version of the acce
|android.hardware.usb.UsbAccessory.hashCode()|
|android.hardware.usb.UsbAccessory.toString()|
|android.hardware.usb.UsbAccessory.writeToParcel(Parcel,int)|

*android.hardware.usb.UsbAccessory_Description*

A class representing a USB accessory, which is an external hardware component 
that communicates with an android application over USB. The accessory is the 
USB host and android the device side of the USB connection. 

When the accessory connects, it reports its manufacturer and model names, the 
version of the accessory, and a user visible description of the accessory to 
the device. The manufacturer, model and version strings are used by the USB 
Manager to choose an appropriate application for the accessory. The accessory 
may optionally provide a unique serial number and a URL to for the accessory's 
website to the device as well. 

An instance of this class is sent to the application via the 
(|android.hardware.usb.UsbManager|) Intent. The application can then call 
(|android.hardware.usb.UsbManager|) to open a file descriptor for reading and 
writing data to and from the accessory. 

Developer Guides For more information about communicating with USB hardware, 
read the <a href="guide/topics/usb/index.html">USB developer guide. 



*android.os.Parcelable.Creator<android.hardware.usb.UsbAccessory>_android.hardware.usb.UsbAccessory.CREATOR*




*int_android.hardware.usb.UsbAccessory.DESCRIPTION_STRING*




*int_android.hardware.usb.UsbAccessory.MANUFACTURER_STRING*




*int_android.hardware.usb.UsbAccessory.MODEL_STRING*




*int_android.hardware.usb.UsbAccessory.SERIAL_STRING*




*int_android.hardware.usb.UsbAccessory.URI_STRING*




*int_android.hardware.usb.UsbAccessory.VERSION_STRING*





*android.hardware.usb.UsbAccessory(String[])*

public UsbAccessory(java.lang.String[] strings)

UsbAccessory should only be instantiated by UsbService implementation 


*android.hardware.usb.UsbAccessory(String,String,String,String,String,String)*

public UsbAccessory(
  java.lang.String manufacturer,
  java.lang.String model,
  java.lang.String description,
  java.lang.String version,
  java.lang.String uri,
  java.lang.String serial)

UsbAccessory should only be instantiated by UsbService implementation 


*android.hardware.usb.UsbAccessory.describeContents()*

public int describeContents()





*android.hardware.usb.UsbAccessory.equals(Object)*

public boolean equals(java.lang.Object obj)





*android.hardware.usb.UsbAccessory.getDescription()*

public |java.lang.String| getDescription()

Returns a user visible description of the accessory. 



    Returns: the accessory description 

*android.hardware.usb.UsbAccessory.getManufacturer()*

public |java.lang.String| getManufacturer()

Returns the manufacturer name of the accessory. 



    Returns: the accessory manufacturer 

*android.hardware.usb.UsbAccessory.getModel()*

public |java.lang.String| getModel()

Returns the model name of the accessory. 



    Returns: the accessory model 

*android.hardware.usb.UsbAccessory.getSerial()*

public |java.lang.String| getSerial()

Returns the unique serial number for the accessory. This is an optional serial 
number that can be used to differentiate between individual accessories of the 
same model and manufacturer 



    Returns: the unique serial number 

*android.hardware.usb.UsbAccessory.getUri()*

public |java.lang.String| getUri()

Returns the URI for the accessory. This is an optional URI that might show 
information about the accessory or provide the option to download an 
application for the accessory 



    Returns: the accessory URI 

*android.hardware.usb.UsbAccessory.getVersion()*

public |java.lang.String| getVersion()

Returns the version of the accessory. 



    Returns: the accessory version 

*android.hardware.usb.UsbAccessory.hashCode()*

public int hashCode()





*android.hardware.usb.UsbAccessory.toString()*

public |java.lang.String| toString()





*android.hardware.usb.UsbAccessory.writeToParcel(Parcel,int)*

public void writeToParcel(
  android.os.Parcel parcel,
  int flags)






