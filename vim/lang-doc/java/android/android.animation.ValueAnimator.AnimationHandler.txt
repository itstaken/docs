*android.animation.ValueAnimator.AnimationHandler* *ValueAnimator.AnimationHandler* 

protected static class ValueAnimator.AnimationHandler
  extends    |java.lang.Object|
  implements |java.lang.Runnable|

|android.animation.ValueAnimator.AnimationHandler_Description|
|android.animation.ValueAnimator.AnimationHandler_Fields|
|android.animation.ValueAnimator.AnimationHandler_Constructors|
|android.animation.ValueAnimator.AnimationHandler_Methods|

================================================================================

*android.animation.ValueAnimator.AnimationHandler_Fields*
|java.util.ArrayList<android.animation.ValueAnimator>_android.animation.ValueAnimator.AnimationHandler.mAnimations|
|java.util.ArrayList<android.animation.ValueAnimator>_android.animation.ValueAnimator.AnimationHandler.mDelayedAnims|
|java.util.ArrayList<android.animation.ValueAnimator>_android.animation.ValueAnimator.AnimationHandler.mPendingAnimations|

*android.animation.ValueAnimator.AnimationHandler_Methods*
|android.animation.ValueAnimator.AnimationHandler.run()|
|android.animation.ValueAnimator.AnimationHandler.start()|Start animating on th

*android.animation.ValueAnimator.AnimationHandler_Description*

This custom, static handler handles the timing pulse that is shared by all 
active animations. This approach ensures that the setting of animation values 
will happen on the UI thread and that all animations will share the same times 
for calculating their values, which makes synchronizing animations possible. 

The handler uses the Choreographer for executing periodic callbacks. 



*java.util.ArrayList<android.animation.ValueAnimator>_android.animation.ValueAnimator.AnimationHandler.mAnimations*




*java.util.ArrayList<android.animation.ValueAnimator>_android.animation.ValueAnimator.AnimationHandler.mDelayedAnims*

Internal per-thread collections used to avoid set collisions as animations 
start and end while being processed. 


*java.util.ArrayList<android.animation.ValueAnimator>_android.animation.ValueAnimator.AnimationHandler.mPendingAnimations*





*android.animation.ValueAnimator.AnimationHandler.run()*

public void run()





*android.animation.ValueAnimator.AnimationHandler.start()*

public void start()

Start animating on the next frame. 




