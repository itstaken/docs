*android.content.res.AssetFileDescriptor.AutoCloseInputStream* *AssetFileDescriptor.AutoCloseInputStream* 

public static class AssetFileDescriptor.AutoCloseInputStream
  extends    |android.os.ParcelFileDescriptor.AutoCloseInputStream|

|android.content.res.AssetFileDescriptor.AutoCloseInputStream_Description|
|android.content.res.AssetFileDescriptor.AutoCloseInputStream_Fields|
|android.content.res.AssetFileDescriptor.AutoCloseInputStream_Constructors|
|android.content.res.AssetFileDescriptor.AutoCloseInputStream_Methods|

================================================================================

*android.content.res.AssetFileDescriptor.AutoCloseInputStream_Constructors*
|android.content.res.AssetFileDescriptor.AutoCloseInputStream(AssetFileDescriptor)|

*android.content.res.AssetFileDescriptor.AutoCloseInputStream_Methods*
|android.content.res.AssetFileDescriptor.AutoCloseInputStream.available()|
|android.content.res.AssetFileDescriptor.AutoCloseInputStream.mark(int)|
|android.content.res.AssetFileDescriptor.AutoCloseInputStream.markSupported()|
|android.content.res.AssetFileDescriptor.AutoCloseInputStream.read()|
|android.content.res.AssetFileDescriptor.AutoCloseInputStream.read(byte[])|
|android.content.res.AssetFileDescriptor.AutoCloseInputStream.read(byte[],int,int)|
|android.content.res.AssetFileDescriptor.AutoCloseInputStream.reset()|
|android.content.res.AssetFileDescriptor.AutoCloseInputStream.skip(long)|

*android.content.res.AssetFileDescriptor.AutoCloseInputStream_Description*

An InputStream you can create on a ParcelFileDescriptor, which will take care 
of calling ParcelFileDescritor.close()(|android.os.ParcelFileDescriptor|) for 
you when the stream is closed. 



*android.content.res.AssetFileDescriptor.AutoCloseInputStream(AssetFileDescriptor)*

public AssetFileDescriptor.AutoCloseInputStream(android.content.res.AssetFileDescriptor fd)
  throws |java.io.IOException|
         



*android.content.res.AssetFileDescriptor.AutoCloseInputStream.available()*

public int available()
  throws |java.io.IOException|
         




*android.content.res.AssetFileDescriptor.AutoCloseInputStream.mark(int)*

public void mark(int readlimit)





*android.content.res.AssetFileDescriptor.AutoCloseInputStream.markSupported()*

public boolean markSupported()





*android.content.res.AssetFileDescriptor.AutoCloseInputStream.read()*

public int read()
  throws |java.io.IOException|
         




*android.content.res.AssetFileDescriptor.AutoCloseInputStream.read(byte[])*

public int read(byte[] buffer)
  throws |java.io.IOException|
         




*android.content.res.AssetFileDescriptor.AutoCloseInputStream.read(byte[],int,int)*

public int read(
  byte[] buffer,
  int offset,
  int count)
  throws |java.io.IOException|
         




*android.content.res.AssetFileDescriptor.AutoCloseInputStream.reset()*

public synchronized void reset()
  throws |java.io.IOException|
         




*android.content.res.AssetFileDescriptor.AutoCloseInputStream.skip(long)*

public long skip(long count)
  throws |java.io.IOException|
         





