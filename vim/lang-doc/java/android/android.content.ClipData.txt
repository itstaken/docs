*android.content.ClipData* *ClipData* Representation of a clipped data on the cl

public class ClipData
  extends    |java.lang.Object|
  implements |android.os.Parcelable|

|android.content.ClipData_Description|
|android.content.ClipData_Fields|
|android.content.ClipData_Constructors|
|android.content.ClipData_Methods|

================================================================================

*android.content.ClipData_Fields*
|android.os.Parcelable.Creator<android.content.ClipData>_android.content.ClipData.CREATOR|

*android.content.ClipData_Constructors*
|android.content.ClipData(CharSequence,String[],ClipData.Item)|Create a new cli
|android.content.ClipData(ClipData)|Create a new clip that is a copy of another
|android.content.ClipData(ClipDescription,ClipData.Item)|Create a new clip.

*android.content.ClipData_Methods*
|android.content.ClipData.addItem(ClipData.Item)|Add a new Item to the overall 
|android.content.ClipData.describeContents()|
|android.content.ClipData.getDescription()|Return theClipDescriptionassociated 
|android.content.ClipData.getIcon()|
|android.content.ClipData.getItemAt(int)|Return a single item inside of the cli
|android.content.ClipData.getItemCount()|Return the number of items in the clip
|android.content.ClipData.newHtmlText(CharSequence,CharSequence,String)|Create 
|android.content.ClipData.newIntent(CharSequence,Intent)|Create a new ClipData 
|android.content.ClipData.newPlainText(CharSequence,CharSequence)|Create a new 
|android.content.ClipData.newRawUri(CharSequence,Uri)|Create a new ClipData hol
|android.content.ClipData.newUri(ContentResolver,CharSequence,Uri)|Create a new
|android.content.ClipData.prepareToLeaveProcess()|Prepare thisClipDatato leave 
|android.content.ClipData.toShortString(StringBuilder)|
|android.content.ClipData.toString()|
|android.content.ClipData.writeToParcel(Parcel,int)|

*android.content.ClipData_Description*

Representation of a clipped data on the clipboard. 

ClippedData is a complex type containing one or Item instances, each of which 
can hold one or more representations of an item of data. For display to the 
user, it also has a label and iconic representation. 

A ClipData contains a (|android.content.ClipDescription|) , which describes 
important meta-data about the clip. In particular, its 
getDescription().getMimeType(int)(|android.content.ClipDescription|) must 
return correct MIME type(s) describing the data in the clip. For help in 
correctly constructing a clip with the correct MIME type, use 
(|android.content.ClipData|) , (|android.content.ClipData|) , and 
(|android.content.ClipData|) . 

Each Item instance can be one of three main classes of data: a simple 
CharSequence of text, a single Intent object, or a Uri. See 
(|android.content.ClipData.Item|) for more details. 

Developer Guides For more information about using the clipboard framework, read 
the <a href="guide/topics/clipboard/copy-paste.html">Copy and Paste developer 
guide. 

Implementing Paste or Drop 

To implement a paste or drop of a ClippedData object into an application, the 
application must correctly interpret the data for its use. If the 
(|android.content.ClipData.Item|) it contains is simple text or an Intent, 
there is little to be done: text can only be interpreted as text, and an Intent 
will typically be used for creating shortcuts (such as placing icons on the 
home screen) or other actions. 

If all you want is the textual representation of the clipped data, you can use 
the convenience method Item.coerceToText(|android.content.ClipData.Item|) . In 
this case there is generally no need to worry about the MIME types reported by 
getDescription().getMimeType(int)(|android.content.ClipDescription|) , since 
any clip item an always be converted to a string. 

More complicated exchanges will be done through URIs, in particular "content:" 
URIs. A content URI allows the recipient of a ClippedData item to interact 
closely with the ContentProvider holding the data in order to negotiate the 
transfer of that data. The clip must also be filled in with the available MIME 
types; (|android.content.ClipData|) will take care of correctly doing this. 

For example, here is the paste function of a simple NotePad application. When 
retrieving the data from the clipboard, it can do either two things: if the 
clipboard contains a URI reference to an existing note, it copies the entire 
structure of the note into a new note; otherwise, it simply coerces the clip 
into text and uses that as the new note's 
contents.development/samples/NotePad/src/com/example/android/notepad/NoteEditor.java
pasteIn many cases an application can paste various types of streams of data. 
For example, an e-mail application may want to allow the user to paste an image 
or other binary data as an attachment. This is accomplished through the 
ContentResolver (|android.content.ContentResolver|) and 
(|android.content.ContentResolver|) methods. These allow a client to discover 
the type(s) of data that a particular content URI can make available as a 
stream and retrieve the stream of data. 

For example, the implementation of 
Item.coerceToText(|android.content.ClipData.Item|) itself uses this to try to 
retrieve a URI clip as a stream of 
text:frameworks/base/core/java/android/content/ClipData.java coerceToText 
Implementing Copy or Drag 

To be the source of a clip, the application must construct a ClippedData object 
that any recipient can interpret best for their context. If the clip is to 
contain a simple text, Intent, or URI, this is easy: an 
(|android.content.ClipData.Item|) containing the appropriate data type can be 
constructed and used. 

More complicated data types require the implementation of support in a 
ContentProvider for describing and generating the data for the recipient. A 
common scenario is one where an application places on the clipboard the 
content: URI of an object that the user has copied, with the data at that URI 
consisting of a complicated structure that only other applications with direct 
knowledge of the structure can use. 

For applications that do not have intrinsic knowledge of the data structure, 
the content provider holding it can make the data available as an arbitrary 
number of types of data streams. This is done by implementing the 
ContentProvider (|android.content.ContentProvider|) and 
(|android.content.ContentProvider|) methods. 

Going back to our simple NotePad application, this is the implementation it may 
have to convert a single note URI (consisting of a title and the note text) 
into a stream of plain text 
data.development/samples/NotePad/src/com/example/android/notepad/NotePadProvider.java
streamThe copy operation in our NotePad application is now just a simple matter 
of making a clip containing the URI of the note being 
copied:development/samples/NotePad/src/com/example/android/notepad/NotesList.java
copyNote if a paste operation needs this clip as text (for example to paste 
into an editor), then (|android.content.ClipData.Item|) will ask the content 
provider for the clip URI as text and successfully paste the entire note. 



*android.os.Parcelable.Creator<android.content.ClipData>_android.content.ClipData.CREATOR*





*android.content.ClipData(CharSequence,String[],ClipData.Item)*

public ClipData(
  java.lang.CharSequence label,
  java.lang.String[] mimeTypes,
  android.content.ClipData.Item item)

Create a new clip. 

    label - Label to show to the user describing this clip. 
    mimeTypes - An array of MIME types this data is available as. 
    item - The contents of the first item in the clip. 

*android.content.ClipData(ClipData)*

public ClipData(android.content.ClipData other)

Create a new clip that is a copy of another clip. This does a deep-copy of all 
items in the clip. 

    other - The existing ClipData that is to be copied. 

*android.content.ClipData(ClipDescription,ClipData.Item)*

public ClipData(
  android.content.ClipDescription description,
  android.content.ClipData.Item item)

Create a new clip. 

    description - The ClipDescription describing the clip contents. 
    item - The contents of the first item in the clip. 

*android.content.ClipData.addItem(ClipData.Item)*

public void addItem(android.content.ClipData.Item item)

Add a new Item to the overall ClipData container. 



*android.content.ClipData.describeContents()*

public int describeContents()





*android.content.ClipData.getDescription()*

public |android.content.ClipDescription| getDescription()

Return the (|android.content.ClipDescription|) associated with this data, 
describing what it contains. 



*android.content.ClipData.getIcon()*

public Bitmap getIcon()





*android.content.ClipData.getItemAt(int)*

public |android.content.ClipData.Item| getItemAt(int index)

Return a single item inside of the clip data. The index can range from 0 to 
(|android.content.ClipData|) -1. 



*android.content.ClipData.getItemCount()*

public int getItemCount()

Return the number of items in the clip data. 



*android.content.ClipData.newHtmlText(CharSequence,CharSequence,String)*

public static |android.content.ClipData| newHtmlText(
  java.lang.CharSequence label,
  java.lang.CharSequence text,
  java.lang.String htmlText)

Create a new ClipData holding data of the type 
(|android.content.ClipDescription|) . 


    label - User-visible label for the clip data. 
    text - The text of clip as plain text, for receivers that don't handle HTML. This is 
       required. 
    htmlText - The actual HTML text in the clip. 

    Returns: Returns a new ClipData containing the specified data. 

*android.content.ClipData.newIntent(CharSequence,Intent)*

public static |android.content.ClipData| newIntent(
  java.lang.CharSequence label,
  android.content.Intent intent)

Create a new ClipData holding an Intent with MIME type 
(|android.content.ClipDescription|) . 


    label - User-visible label for the clip data. 
    intent - The actual Intent in the clip. 

    Returns: Returns a new ClipData containing the specified data. 

*android.content.ClipData.newPlainText(CharSequence,CharSequence)*

public static |android.content.ClipData| newPlainText(
  java.lang.CharSequence label,
  java.lang.CharSequence text)

Create a new ClipData holding data of the type 
(|android.content.ClipDescription|) . 


    label - User-visible label for the clip data. 
    text - The actual text in the clip. 

    Returns: Returns a new ClipData containing the specified data. 

*android.content.ClipData.newRawUri(CharSequence,Uri)*

public static |android.content.ClipData| newRawUri(
  java.lang.CharSequence label,
  android.net.Uri uri)

Create a new ClipData holding an URI with MIME type 
(|android.content.ClipDescription|) . Unlike (|android.content.ClipData|) , 
nothing is inferred about the URI -- if it is a content: URI holding a bitmap, 
the reported type will still be uri-list. Use this with care! 


    label - User-visible label for the clip data. 
    uri - The URI in the clip. 

    Returns: Returns a new ClipData containing the specified data. 

*android.content.ClipData.newUri(ContentResolver,CharSequence,Uri)*

public static |android.content.ClipData| newUri(
  android.content.ContentResolver resolver,
  java.lang.CharSequence label,
  android.net.Uri uri)

Create a new ClipData holding a URI. If the URI is a content: URI, this will 
query the content provider for the MIME type of its data and use that as the 
MIME type. Otherwise, it will use the MIME type 
(|android.content.ClipDescription|) . 


    resolver - ContentResolver used to get information about the URI. 
    label - User-visible label for the clip data. 
    uri - The URI in the clip. 

    Returns: Returns a new ClipData containing the specified data. 

*android.content.ClipData.prepareToLeaveProcess()*

public void prepareToLeaveProcess()

Prepare this (|android.content.ClipData|) to leave an app process. 



*android.content.ClipData.toShortString(StringBuilder)*

public void toShortString(java.lang.StringBuilder b)





*android.content.ClipData.toString()*

public |java.lang.String| toString()





*android.content.ClipData.writeToParcel(Parcel,int)*

public void writeToParcel(
  android.os.Parcel dest,
  int flags)






