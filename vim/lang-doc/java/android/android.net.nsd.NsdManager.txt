*android.net.nsd.NsdManager* *NsdManager* The Network Service Discovery Manager 

public final class NsdManager
  extends    |java.lang.Object|

|android.net.nsd.NsdManager_Description|
|android.net.nsd.NsdManager_Fields|
|android.net.nsd.NsdManager_Constructors|
|android.net.nsd.NsdManager_Methods|

================================================================================

*android.net.nsd.NsdManager_Fields*
|java.lang.String_android.net.nsd.NsdManager.ACTION_NSD_STATE_CHANGED|
|int_android.net.nsd.NsdManager.DISABLE|
|int_android.net.nsd.NsdManager.DISCOVER_SERVICES|
|int_android.net.nsd.NsdManager.DISCOVER_SERVICES_FAILED|
|int_android.net.nsd.NsdManager.DISCOVER_SERVICES_STARTED|
|int_android.net.nsd.NsdManager.ENABLE|
|java.lang.String_android.net.nsd.NsdManager.EXTRA_NSD_STATE|
|int_android.net.nsd.NsdManager.FAILURE_ALREADY_ACTIVE|
|int_android.net.nsd.NsdManager.FAILURE_INTERNAL_ERROR|
|int_android.net.nsd.NsdManager.FAILURE_MAX_LIMIT|
|int_android.net.nsd.NsdManager.NATIVE_DAEMON_EVENT|
|int_android.net.nsd.NsdManager.NSD_STATE_DISABLED|
|int_android.net.nsd.NsdManager.NSD_STATE_ENABLED|
|int_android.net.nsd.NsdManager.PROTOCOL_DNS_SD|
|int_android.net.nsd.NsdManager.REGISTER_SERVICE|
|int_android.net.nsd.NsdManager.REGISTER_SERVICE_FAILED|
|int_android.net.nsd.NsdManager.REGISTER_SERVICE_SUCCEEDED|
|int_android.net.nsd.NsdManager.RESOLVE_SERVICE|
|int_android.net.nsd.NsdManager.RESOLVE_SERVICE_FAILED|
|int_android.net.nsd.NsdManager.RESOLVE_SERVICE_SUCCEEDED|
|int_android.net.nsd.NsdManager.SERVICE_FOUND|
|int_android.net.nsd.NsdManager.SERVICE_LOST|
|int_android.net.nsd.NsdManager.STOP_DISCOVERY|
|int_android.net.nsd.NsdManager.STOP_DISCOVERY_FAILED|
|int_android.net.nsd.NsdManager.STOP_DISCOVERY_SUCCEEDED|
|int_android.net.nsd.NsdManager.UNREGISTER_SERVICE|
|int_android.net.nsd.NsdManager.UNREGISTER_SERVICE_FAILED|
|int_android.net.nsd.NsdManager.UNREGISTER_SERVICE_SUCCEEDED|

*android.net.nsd.NsdManager_Constructors*
|android.net.nsd.NsdManager(Context,INsdManager)|Create a new Nsd instance.

*android.net.nsd.NsdManager_Methods*
|android.net.nsd.NsdManager.discoverServices(String,int,NsdManager.DiscoveryListener)|
|android.net.nsd.NsdManager.registerService(NsdServiceInfo,int,NsdManager.RegistrationListener)|
|android.net.nsd.NsdManager.resolveService(NsdServiceInfo,NsdManager.ResolveListener)|
|android.net.nsd.NsdManager.setEnabled(boolean)|Internal use only @hide
|android.net.nsd.NsdManager.stopServiceDiscovery(NsdManager.DiscoveryListener)|
|android.net.nsd.NsdManager.unregisterService(NsdManager.RegistrationListener)|

*android.net.nsd.NsdManager_Description*

The Network Service Discovery Manager class provides the API to discover 
services on a network. As an example, if device A and device B are connected 
over a Wi-Fi network, a game registered on device A can be discovered by a game 
on device B. Another example use case is an application discovering printers on 
the network. 

The API currently supports DNS based service discovery and discovery is 
currently limited to a local network over Multicast DNS. DNS service discovery 
is described at http://files.dns-sd.org/draft-cheshire-dnsext-dns-sd.txt 

The API is asynchronous and responses to requests from an application are on 
listener callbacks on a seperate thread. 

There are three main operations the API supports - registration, discovery and 
resolution. 

Application start | | | onServiceRegistered() Register any local services / to 
be advertised with \ registerService() onRegistrationFailed() | | 
discoverServices() | Maintain a list to track discovered services | |---------> 
| | | onServiceFound() | | | add service to list | | | | | | onServiceLost() | 
| | remove service from list | | |<---------- | | | Connect to a service | from 
list ? | resolveService() | onServiceResolved() | Establish connection to 
service with the host and port information 



An application that needs to advertise itself over a network for other 
applications to discover it can do so with a call to 
(|android.net.nsd.NsdManager|) . If Example is a http based application that 
can provide HTML data to peer services, it can register a name "Example" with 
service type "_http._tcp". A successful registration is notified with a 
callback to (|android.net.nsd.NsdManager.RegistrationListener|) and a failure 
to register is notified over 
(|android.net.nsd.NsdManager.RegistrationListener|) A peer application looking 
for http services can initiate a discovery for "_http._tcp" with a call to 
(|android.net.nsd.NsdManager|) . A service found is notified with a callback to 
(|android.net.nsd.NsdManager.DiscoveryListener|) and a service lost is notified 
on (|android.net.nsd.NsdManager.DiscoveryListener|) . 

Once the peer application discovers the "Example" http srevice, and needs to 
receive data from the "Example" application, it can initiate a resolve with 
(|android.net.nsd.NsdManager|) to resolve the host and port details for the 
purpose of establishing a connection. A successful resolve is notified on 
(|android.net.nsd.NsdManager.ResolveListener|) and a failure is notified on 
(|android.net.nsd.NsdManager.ResolveListener|) . 

Applications can reserve for a service type at 
http://www.iana.org/form/ports-service. Existing services can be found at 
http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xml


Get an instance of this class by calling 
Context.getSystemService(Context.NSD_SERVICE)(|android.content.Context|) . 
(|android.net.nsd.NsdServiceInfo|) 



*java.lang.String_android.net.nsd.NsdManager.ACTION_NSD_STATE_CHANGED*

Broadcast intent action to indicate whether network service discovery is 
enabled or disabled. An extra (|android.net.nsd.NsdManager|) provides the state 
information as int. 


*int_android.net.nsd.NsdManager.DISABLE*




*int_android.net.nsd.NsdManager.DISCOVER_SERVICES*




*int_android.net.nsd.NsdManager.DISCOVER_SERVICES_FAILED*




*int_android.net.nsd.NsdManager.DISCOVER_SERVICES_STARTED*




*int_android.net.nsd.NsdManager.ENABLE*




*java.lang.String_android.net.nsd.NsdManager.EXTRA_NSD_STATE*

The lookup key for an int that indicates whether network service discovery is 
enabled or disabled. Retrieve it with (|android.content.Intent|) . 


*int_android.net.nsd.NsdManager.FAILURE_ALREADY_ACTIVE*

Indicates that the operation failed because it is already active. 


*int_android.net.nsd.NsdManager.FAILURE_INTERNAL_ERROR*

Failures are passed with (|android.net.nsd.NsdManager.RegistrationListener|) , 
(|android.net.nsd.NsdManager.RegistrationListener|) , 
(|android.net.nsd.NsdManager.DiscoveryListener|) , 
(|android.net.nsd.NsdManager.DiscoveryListener|) or 
(|android.net.nsd.NsdManager.ResolveListener|) . 

Indicates that the operation failed due to an internal error. 


*int_android.net.nsd.NsdManager.FAILURE_MAX_LIMIT*

Indicates that the operation failed because the maximum outstanding requests 
from the applications have reached. 


*int_android.net.nsd.NsdManager.NATIVE_DAEMON_EVENT*




*int_android.net.nsd.NsdManager.NSD_STATE_DISABLED*

Network service discovery is disabled 


*int_android.net.nsd.NsdManager.NSD_STATE_ENABLED*

Network service discovery is enabled 


*int_android.net.nsd.NsdManager.PROTOCOL_DNS_SD*

Dns based service discovery protocol 


*int_android.net.nsd.NsdManager.REGISTER_SERVICE*




*int_android.net.nsd.NsdManager.REGISTER_SERVICE_FAILED*




*int_android.net.nsd.NsdManager.REGISTER_SERVICE_SUCCEEDED*




*int_android.net.nsd.NsdManager.RESOLVE_SERVICE*




*int_android.net.nsd.NsdManager.RESOLVE_SERVICE_FAILED*




*int_android.net.nsd.NsdManager.RESOLVE_SERVICE_SUCCEEDED*




*int_android.net.nsd.NsdManager.SERVICE_FOUND*




*int_android.net.nsd.NsdManager.SERVICE_LOST*




*int_android.net.nsd.NsdManager.STOP_DISCOVERY*




*int_android.net.nsd.NsdManager.STOP_DISCOVERY_FAILED*




*int_android.net.nsd.NsdManager.STOP_DISCOVERY_SUCCEEDED*




*int_android.net.nsd.NsdManager.UNREGISTER_SERVICE*




*int_android.net.nsd.NsdManager.UNREGISTER_SERVICE_FAILED*




*int_android.net.nsd.NsdManager.UNREGISTER_SERVICE_SUCCEEDED*





*android.net.nsd.NsdManager(Context,INsdManager)*

public NsdManager(
  android.content.Context context,
  INsdManager service)

Create a new Nsd instance. Applications use 
Context.getSystemService()(|android.content.Context|) to retrieve 
Context.NSD_SERVICE(|android.content.Context|) . 

    service - the Binder interface 

*android.net.nsd.NsdManager.discoverServices(String,int,NsdManager.DiscoveryListener)*

public void discoverServices(
  java.lang.String serviceType,
  int protocolType,
  android.net.nsd.NsdManager.DiscoveryListener listener)

Initiate service discovery to browse for instances of a service type. Service 
discovery consumes network bandwidth and will continue until the application 
calls (|android.net.nsd.NsdManager|) . 

The function call immediately returns after sending a request to start service 
discovery to the framework. The application is notified of a success to 
initiate discovery through the callback 
(|android.net.nsd.NsdManager.DiscoveryListener|) or a failure through 
(|android.net.nsd.NsdManager.DiscoveryListener|) . 

Upon successful start, application is notified when a service is found with 
(|android.net.nsd.NsdManager.DiscoveryListener|) or when a service is lost with 
(|android.net.nsd.NsdManager.DiscoveryListener|) . 

Upon failure to start, service discovery is not active and application does not 
need to invoke (|android.net.nsd.NsdManager|) 


    serviceType - The service type being discovered. Examples include "_http._tcp" for http 
       services or "_ipp._tcp" for printers 
    protocolType - The service discovery protocol 
    listener - The listener notifies of a successful discovery and is used to stop discovery 
       on this serviceType through a call on {@link #stopServiceDiscovery}. 
       Cannot be null. 

*android.net.nsd.NsdManager.registerService(NsdServiceInfo,int,NsdManager.RegistrationListener)*

public void registerService(
  android.net.nsd.NsdServiceInfo serviceInfo,
  int protocolType,
  android.net.nsd.NsdManager.RegistrationListener listener)

Register a service to be discovered by other services. 

The function call immediately returns after sending a request to register 
service to the framework. The application is notified of a success to initiate 
discovery through the callback 
(|android.net.nsd.NsdManager.RegistrationListener|) or a failure through 
(|android.net.nsd.NsdManager.RegistrationListener|) . 


    serviceInfo - The service being registered 
    protocolType - The service discovery protocol 
    listener - The listener notifies of a successful registration and is used to unregister 
       this service through a call on {@link #unregisterService}. Cannot be 
       null. 

*android.net.nsd.NsdManager.resolveService(NsdServiceInfo,NsdManager.ResolveListener)*

public void resolveService(
  android.net.nsd.NsdServiceInfo serviceInfo,
  android.net.nsd.NsdManager.ResolveListener listener)

Resolve a discovered service. An application can resolve a service right before 
establishing a connection to fetch the IP and port details on which to setup 
the connection. 


    serviceInfo - service to be resolved 
    listener - to receive callback upon success or failure. Cannot be null. 

*android.net.nsd.NsdManager.setEnabled(boolean)*

public void setEnabled(boolean enabled)

Internal use only @hide 



*android.net.nsd.NsdManager.stopServiceDiscovery(NsdManager.DiscoveryListener)*

public void stopServiceDiscovery(android.net.nsd.NsdManager.DiscoveryListener listener)

Stop service discovery initiated with (|android.net.nsd.NsdManager|) . An 
active service discovery is notified to the application with 
(|android.net.nsd.NsdManager.DiscoveryListener|) and it stays active until the 
application invokes a stop service discovery. A successful stop is notified to 
with a call to (|android.net.nsd.NsdManager.DiscoveryListener|) . 

Upon failure to stop service discovery, application is notified through 
(|android.net.nsd.NsdManager.DiscoveryListener|) . 


    listener - This should be the listener object that was passed to {@link 
       #discoverServices}. It identifies the discovery that should be stopped 
       and notifies of a successful stop. 

*android.net.nsd.NsdManager.unregisterService(NsdManager.RegistrationListener)*

public void unregisterService(android.net.nsd.NsdManager.RegistrationListener listener)

Unregister a service registered through (|android.net.nsd.NsdManager|) . A 
successful unregister is notified to the application with a call to 
(|android.net.nsd.NsdManager.RegistrationListener|) . 


    listener - This should be the listener object that was passed to {@link #registerService}. 
       It identifies the service that should be unregistered and notifies of a 
       successful unregistration. 


