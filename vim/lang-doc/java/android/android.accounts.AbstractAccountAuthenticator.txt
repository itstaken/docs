*android.accounts.AbstractAccountAuthenticator* *AbstractAccountAuthenticator* A

public abstract class AbstractAccountAuthenticator
  extends    |java.lang.Object|

|android.accounts.AbstractAccountAuthenticator_Description|
|android.accounts.AbstractAccountAuthenticator_Fields|
|android.accounts.AbstractAccountAuthenticator_Constructors|
|android.accounts.AbstractAccountAuthenticator_Methods|

================================================================================

*android.accounts.AbstractAccountAuthenticator_Constructors*
|android.accounts.AbstractAccountAuthenticator(Context)|

*android.accounts.AbstractAccountAuthenticator_Methods*
|android.accounts.AbstractAccountAuthenticator.addAccount(AccountAuthenticatorResponse,String,String,String[],Bundle)|
|android.accounts.AbstractAccountAuthenticator.addAccountFromCredentials(AccountAuthenticatorResponse,Account,Bundle)|
|android.accounts.AbstractAccountAuthenticator.confirmCredentials(AccountAuthenticatorResponse,Account,Bundle)|
|android.accounts.AbstractAccountAuthenticator.editProperties(AccountAuthenticatorResponse,String)|
|android.accounts.AbstractAccountAuthenticator.getAccountCredentialsForCloning(AccountAuthenticatorResponse,Account)|
|android.accounts.AbstractAccountAuthenticator.getAccountRemovalAllowed(AccountAuthenticatorResponse,Account)|
|android.accounts.AbstractAccountAuthenticator.getAuthToken(AccountAuthenticatorResponse,Account,String,Bundle)|
|android.accounts.AbstractAccountAuthenticator.getAuthTokenLabel(String)|Ask th
|android.accounts.AbstractAccountAuthenticator.getIBinder()|
|android.accounts.AbstractAccountAuthenticator.hasFeatures(AccountAuthenticatorResponse,Account,String[])|
|android.accounts.AbstractAccountAuthenticator.updateCredentials(AccountAuthenticatorResponse,Account,String,Bundle)|

*android.accounts.AbstractAccountAuthenticator_Description*

Abstract base class for creating AccountAuthenticators. In order to be an 
authenticator one must extend this class, provider implementations for the 
abstract methods and write a service that returns the result of 
(|android.accounts.AbstractAccountAuthenticator|) in the service's 
(|android.app.Service|) when invoked with an intent with action 
(|android.accounts.AccountManager|) . This service must specify the following 
intent filter and metadata tags in its AndroidManifest.xml file 

<intent-filter> <action android:name="android.accounts.AccountAuthenticator" /> 
</intent-filter> <meta-data 
android:name="android.accounts.AccountAuthenticator" 
android:resource="@xml/authenticator" /> 

The android:resource attribute must point to a resource that looks like: 

<account-authenticator 
xmlns:android="http://schemas.android.com/apk/res/android" 
android:accountType="typeOfAuthenticator" android:icon="@drawable/icon" 
android:smallIcon="@drawable/miniIcon" android:label="@string/label" 
android:accountPreferences="@xml/account_preferences" /> 

Replace the icons and labels with your own resources. The android:accountType 
attribute must be a string that uniquely identifies your authenticator and will 
be the same string that user will use when making calls on the 
(|android.accounts.AccountManager|) and it also corresponds to 
(|android.accounts.Account|) for your accounts. One user of the android:icon is 
the "Account & Sync" settings page and one user of the android:smallIcon is the 
Contact Application's tab panels. 

The preferences attribute points to a PreferenceScreen xml hierarchy that 
contains a list of PreferenceScreens that can be invoked to manage the 
authenticator. An example is: 

<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"> 
<PreferenceCategory android:title="@string/title_fmt" /> <PreferenceScreen 
android:key="key1" android:title="@string/key1_action" 
android:summary="@string/key1_summary"> <intent android:action="key1.ACTION" 
android:targetPackage="key1.package" android:targetClass="key1.class" /> 
</PreferenceScreen> </PreferenceScreen> 

The standard pattern for implementing any of the abstract methods is the 
following: 

If the supplied arguments are enough for the authenticator to fully satisfy the 
request then it will do so and return a (|android.os.Bundle|) that contains the 
results. If the authenticator needs information from the user to satisfy the 
request then it will create an (|android.content.Intent|) to an activity that 
will prompt the user for the information and then carry out the request. This 
intent must be returned in a Bundle as key (|android.accounts.AccountManager|) 
. 

The activity needs to return the final result when it is complete so the Intent 
should contain the (|android.accounts.AccountAuthenticatorResponse|) as 
(|android.accounts.AccountManager|) . The activity must then call 
(|android.accounts.AccountAuthenticatorResponse|) or 
(|android.accounts.AccountAuthenticatorResponse|) when it is complete. If the 
authenticator cannot synchronously process the request and return a result then 
it may choose to return null and then use the AccountManagerResponse to send 
the result when it has completed the request. 

The following descriptions of each of the abstract authenticator methods will 
not describe the possible asynchronous nature of the request handling and will 
instead just describe the input parameters and the expected result. 

When writing an activity to satisfy these requests one must pass in the 
AccountManagerResponse and return the result via that response when the 
activity finishes (or whenever else the activity author deems it is the correct 
time to respond). The (|android.accounts.AccountAuthenticatorActivity|) handles 
this, so one may wish to extend that when writing activities to handle these 
requests. 



*android.accounts.AbstractAccountAuthenticator(Context)*

public AbstractAccountAuthenticator(android.content.Context context)




*android.accounts.AbstractAccountAuthenticator.addAccount(AccountAuthenticatorResponse,String,String,String[],Bundle)*

public abstract |android.os.Bundle| addAccount(
  android.accounts.AccountAuthenticatorResponse response,
  java.lang.String accountType,
  java.lang.String authTokenType,
  java.lang.String[] requiredFeatures,
  android.os.Bundle options)
  throws |android.accounts.NetworkErrorException|
         
Adds an account of the specified accountType. 


    response - to send the result back to the AccountManager, will never be null 
    accountType - the type of account to add, will never be null 
    authTokenType - the type of auth token to retrieve after adding the account, may be null 
    requiredFeatures - a String array of authenticator-specific features that the added account must 
       support, may be null 
    options - a Bundle of authenticator-specific options, may be null 

    Returns: a Bundle result or null if the result is to be returned via the response. The 
             result will contain either: 

{@link AccountManager#KEY_INTENT}, or {@link AccountManager#KEY_ACCOUNT_NAME} 
             and {@link AccountManager#KEY_ACCOUNT_TYPE} of the account that 
             was added, or {@link AccountManager#KEY_ERROR_CODE} and {@link 
             AccountManager#KEY_ERROR_MESSAGE} to indicate an error 

*android.accounts.AbstractAccountAuthenticator.addAccountFromCredentials(AccountAuthenticatorResponse,Account,Bundle)*

public |android.os.Bundle| addAccountFromCredentials(
  android.accounts.AccountAuthenticatorResponse response,
  android.accounts.Account account,
  android.os.Bundle accountCredentials)
  throws |android.accounts.NetworkErrorException|
         
Creates an account based on credentials provided by the authenticator instance 
of another user on the device, who has chosen to share the account with this 
user. 


    response - to send the result back to the AccountManager, will never be null 
    account - the account to clone, will never be null 
    accountCredentials - the Bundle containing the required credentials to create the account. Contents 
       of the Bundle are only meaningful to the authenticator. This Bundle is 
       provided by {@link 
       #getAccountCredentialsForCloning(AccountAuthenticatorResponse, 
       Account)}. 

    Returns: a Bundle result or null if the result is to be returned via the response. 

*android.accounts.AbstractAccountAuthenticator.confirmCredentials(AccountAuthenticatorResponse,Account,Bundle)*

public abstract |android.os.Bundle| confirmCredentials(
  android.accounts.AccountAuthenticatorResponse response,
  android.accounts.Account account,
  android.os.Bundle options)
  throws |android.accounts.NetworkErrorException|
         
Checks that the user knows the credentials of an account. 


    response - to send the result back to the AccountManager, will never be null 
    account - the account whose credentials are to be checked, will never be null 
    options - a Bundle of authenticator-specific options, may be null 

    Returns: a Bundle result or null if the result is to be returned via the response. The 
             result will contain either: 

{@link AccountManager#KEY_INTENT}, or {@link 
             AccountManager#KEY_BOOLEAN_RESULT}, true if the check succeeded, 
             false otherwise {@link AccountManager#KEY_ERROR_CODE} and {@link 
             AccountManager#KEY_ERROR_MESSAGE} to indicate an error 

*android.accounts.AbstractAccountAuthenticator.editProperties(AccountAuthenticatorResponse,String)*

public abstract |android.os.Bundle| editProperties(
  android.accounts.AccountAuthenticatorResponse response,
  java.lang.String accountType)

Returns a Bundle that contains the Intent of the activity that can be used to 
edit the properties. In order to indicate success the activity should call 
response.setResult() with a non-null Bundle. 


    response - used to set the result for the request. If the Constants.INTENT_KEY is set in 
       the bundle then this response field is to be used for sending future 
       results if and when the Intent is started. 
    accountType - the AccountType whose properties are to be edited. 

    Returns: a Bundle containing the result or the Intent to start to continue the request. 
             If this is null then the request is considered to still be active 
             and the result should sent later using response. 

*android.accounts.AbstractAccountAuthenticator.getAccountCredentialsForCloning(AccountAuthenticatorResponse,Account)*

public |android.os.Bundle| getAccountCredentialsForCloning(
  android.accounts.AccountAuthenticatorResponse response,
  android.accounts.Account account)
  throws |android.accounts.NetworkErrorException|
         
Returns a Bundle that contains whatever is required to clone the account on a 
different user. The Bundle is passed to the authenticator instance in the 
target user via (|android.accounts.AbstractAccountAuthenticator|) . The default 
implementation returns null, indicating that cloning is not supported. 


    response - to send the result back to the AccountManager, will never be null 
    account - the account to clone, will never be null 

    Returns: a Bundle result or null if the result is to be returned via the response. 

*android.accounts.AbstractAccountAuthenticator.getAccountRemovalAllowed(AccountAuthenticatorResponse,Account)*

public |android.os.Bundle| getAccountRemovalAllowed(
  android.accounts.AccountAuthenticatorResponse response,
  android.accounts.Account account)
  throws |android.accounts.NetworkErrorException|
         
Checks if the removal of this account is allowed. 


    response - to send the result back to the AccountManager, will never be null 
    account - the account to check, will never be null 

    Returns: a Bundle result or null if the result is to be returned via the response. The 
             result will contain either: 

{@link AccountManager#KEY_INTENT}, or {@link 
             AccountManager#KEY_BOOLEAN_RESULT}, true if the removal of the 
             account is allowed, false otherwise {@link 
             AccountManager#KEY_ERROR_CODE} and {@link 
             AccountManager#KEY_ERROR_MESSAGE} to indicate an error 

*android.accounts.AbstractAccountAuthenticator.getAuthToken(AccountAuthenticatorResponse,Account,String,Bundle)*

public abstract |android.os.Bundle| getAuthToken(
  android.accounts.AccountAuthenticatorResponse response,
  android.accounts.Account account,
  java.lang.String authTokenType,
  android.os.Bundle options)
  throws |android.accounts.NetworkErrorException|
         
Gets the authtoken for an account. 


    response - to send the result back to the AccountManager, will never be null 
    account - the account whose credentials are to be retrieved, will never be null 
    authTokenType - the type of auth token to retrieve, will never be null 
    options - a Bundle of authenticator-specific options, may be null 

    Returns: a Bundle result or null if the result is to be returned via the response. The 
             result will contain either: 

{@link AccountManager#KEY_INTENT}, or {@link AccountManager#KEY_ACCOUNT_NAME}, 
             {@link AccountManager#KEY_ACCOUNT_TYPE}, and {@link 
             AccountManager#KEY_AUTHTOKEN}, or {@link 
             AccountManager#KEY_ERROR_CODE} and {@link 
             AccountManager#KEY_ERROR_MESSAGE} to indicate an error 

*android.accounts.AbstractAccountAuthenticator.getAuthTokenLabel(String)*

public abstract |java.lang.String| getAuthTokenLabel(java.lang.String authTokenType)

Ask the authenticator for a localized label for the given authTokenType. 


    authTokenType - the authTokenType whose label is to be returned, will never be null 

    Returns: the localized label of the auth token type, may be null if the type isn't known 

*android.accounts.AbstractAccountAuthenticator.getIBinder()*

public final |android.os.IBinder| getIBinder()





    Returns: the IBinder for the AccountAuthenticator 

*android.accounts.AbstractAccountAuthenticator.hasFeatures(AccountAuthenticatorResponse,Account,String[])*

public abstract |android.os.Bundle| hasFeatures(
  android.accounts.AccountAuthenticatorResponse response,
  android.accounts.Account account,
  java.lang.String[] features)
  throws |android.accounts.NetworkErrorException|
         
Checks if the account supports all the specified authenticator specific 
features. 


    response - to send the result back to the AccountManager, will never be null 
    account - the account to check, will never be null 
    features - an array of features to check, will never be null 

    Returns: a Bundle result or null if the result is to be returned via the response. The 
             result will contain either: 

{@link AccountManager#KEY_INTENT}, or {@link 
             AccountManager#KEY_BOOLEAN_RESULT}, true if the account has all 
             the features, false otherwise {@link 
             AccountManager#KEY_ERROR_CODE} and {@link 
             AccountManager#KEY_ERROR_MESSAGE} to indicate an error 

*android.accounts.AbstractAccountAuthenticator.updateCredentials(AccountAuthenticatorResponse,Account,String,Bundle)*

public abstract |android.os.Bundle| updateCredentials(
  android.accounts.AccountAuthenticatorResponse response,
  android.accounts.Account account,
  java.lang.String authTokenType,
  android.os.Bundle options)
  throws |android.accounts.NetworkErrorException|
         
Update the locally stored credentials for an account. 


    response - to send the result back to the AccountManager, will never be null 
    account - the account whose credentials are to be updated, will never be null 
    authTokenType - the type of auth token to retrieve after updating the credentials, may be null 
    options - a Bundle of authenticator-specific options, may be null 

    Returns: a Bundle result or null if the result is to be returned via the response. The 
             result will contain either: 

{@link AccountManager#KEY_INTENT}, or {@link AccountManager#KEY_ACCOUNT_NAME} 
             and {@link AccountManager#KEY_ACCOUNT_TYPE} of the account that 
             was added, or {@link AccountManager#KEY_ERROR_CODE} and {@link 
             AccountManager#KEY_ERROR_MESSAGE} to indicate an error 


