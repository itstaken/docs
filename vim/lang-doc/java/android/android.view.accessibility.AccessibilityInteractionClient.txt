*android.view.accessibility.AccessibilityInteractionClient* *AccessibilityInteractionClient* 

public final class AccessibilityInteractionClient
  extends    |IAccessibilityInteractionConnectionCallback.Stub|

|android.view.accessibility.AccessibilityInteractionClient_Description|
|android.view.accessibility.AccessibilityInteractionClient_Fields|
|android.view.accessibility.AccessibilityInteractionClient_Constructors|
|android.view.accessibility.AccessibilityInteractionClient_Methods|

================================================================================

*android.view.accessibility.AccessibilityInteractionClient_Fields*
|int_android.view.accessibility.AccessibilityInteractionClient.NO_ID|

*android.view.accessibility.AccessibilityInteractionClient_Methods*
|android.view.accessibility.AccessibilityInteractionClient.addConnection(int,IAccessibilityServiceConnection)|
|android.view.accessibility.AccessibilityInteractionClient.clearCache()|
|android.view.accessibility.AccessibilityInteractionClient.findAccessibilityNodeInfoByAccessibilityId(int,int,long,boolean,int)|
|android.view.accessibility.AccessibilityInteractionClient.findAccessibilityNodeInfosByText(int,int,long,String)|
|android.view.accessibility.AccessibilityInteractionClient.findAccessibilityNodeInfosByViewId(int,int,long,String)|
|android.view.accessibility.AccessibilityInteractionClient.findFocus(int,int,long,int)|
|android.view.accessibility.AccessibilityInteractionClient.focusSearch(int,int,long,int)|
|android.view.accessibility.AccessibilityInteractionClient.getConnection(int)|G
|android.view.accessibility.AccessibilityInteractionClient.getInstance()|
|android.view.accessibility.AccessibilityInteractionClient.getInstanceForThread(long)|
|android.view.accessibility.AccessibilityInteractionClient.getRootInActiveWindow(int)|
|android.view.accessibility.AccessibilityInteractionClient.onAccessibilityEvent(AccessibilityEvent)|
|android.view.accessibility.AccessibilityInteractionClient.performAccessibilityAction(int,int,long,int,Bundle)|
|android.view.accessibility.AccessibilityInteractionClient.removeConnection(int)|
|android.view.accessibility.AccessibilityInteractionClient.setFindAccessibilityNodeInfoResult(AccessibilityNodeInfo,int)|
|android.view.accessibility.AccessibilityInteractionClient.setFindAccessibilityNodeInfosResult(List<AccessibilityNodeInfo>,int)|
|android.view.accessibility.AccessibilityInteractionClient.setPerformAccessibilityActionResult(boolean,int)|
|android.view.accessibility.AccessibilityInteractionClient.setSameThreadMessage(Message)|

*android.view.accessibility.AccessibilityInteractionClient_Description*

This class is a singleton that performs accessibility interaction which is it 
queries remote view hierarchies about snapshots of their views as well requests 
from these hierarchies to perform certain actions on their views. 

Rationale: The content retrieval APIs are synchronous from a client's 
perspective but internally they are asynchronous. The client thread calls into 
the system requesting an action and providing a callback to receive the result 
after which it waits up to a timeout for that result. The system enforces 
security and the delegates the request to a given view hierarchy where a 
message is posted (from a binder thread) describing what to be performed by the 
main UI thread the result of which it delivered via the mentioned callback. 
However, the blocked client thread and the main UI thread of the target view 
hierarchy can be the same thread, for example an accessibility service and an 
activity run in the same process, thus they are executed on the same main 
thread. In such a case the retrieval will fail since the UI thread that has to 
process the message describing the work to be done is blocked waiting for a 
result is has to compute! To avoid this scenario when making a call the client 
also passes its process and thread ids so the accessed view hierarchy can 
detect if the client making the request is running in its main UI thread. In 
such a case the view hierarchy, specifically the binder thread performing the 
IPC to it, does not post a message to be run on the UI thread but passes it to 
the singleton interaction client through which all interactions occur and the 
latter is responsible to execute the message before starting to wait for the 
asynchronous result delivered via the callback. In this case the expected 
result is already received so no waiting is performed. 



*int_android.view.accessibility.AccessibilityInteractionClient.NO_ID*





*android.view.accessibility.AccessibilityInteractionClient.addConnection(int,IAccessibilityServiceConnection)*

public void addConnection(
  int connectionId,
  IAccessibilityServiceConnection connection)

Adds a cached accessibility service connection. 


    connectionId - The connection id. 
    connection - The connection. 

*android.view.accessibility.AccessibilityInteractionClient.clearCache()*

public void clearCache()





*android.view.accessibility.AccessibilityInteractionClient.findAccessibilityNodeInfoByAccessibilityId(int,int,long,boolean,int)*

public |android.view.accessibility.AccessibilityNodeInfo| findAccessibilityNodeInfoByAccessibilityId(
  int connectionId,
  int accessibilityWindowId,
  long accessibilityNodeId,
  boolean bypassCache,
  int prefetchFlags)

Finds an (|android.view.accessibility.AccessibilityNodeInfo|) by accessibility 
id. 


    connectionId - The id of a connection for interacting with the system. 
    accessibilityWindowId - A unique window id. Use {@link 
       android.view.accessibility.AccessibilityNodeInfo#ACTIVE_WINDOW_ID} to 
       query the currently active window. 
    accessibilityNodeId - A unique view id or virtual descendant id from where to start the search. Use 
       {@link android.view.accessibility.AccessibilityNodeInfo#ROOT_NODE_ID} to 
       start from the root. 
    bypassCache - Whether to bypass the cache while looking for the node. 
    prefetchFlags - flags to guide prefetching. 

    Returns: An {@link AccessibilityNodeInfo} if found, null otherwise. 

*android.view.accessibility.AccessibilityInteractionClient.findAccessibilityNodeInfosByText(int,int,long,String)*

public |java.util.List|<AccessibilityNodeInfo> findAccessibilityNodeInfosByText(
  int connectionId,
  int accessibilityWindowId,
  long accessibilityNodeId,
  java.lang.String text)

Finds (|android.view.accessibility.AccessibilityNodeInfo|) s by View text. The 
match is case insensitive containment. The search is performed in the window 
whose id is specified and starts from the node whose accessibility id is 
specified. 


    connectionId - The id of a connection for interacting with the system. 
    accessibilityWindowId - A unique window id. Use {@link 
       android.view.accessibility.AccessibilityNodeInfo#ACTIVE_WINDOW_ID} to 
       query the currently active window. 
    accessibilityNodeId - A unique view id or virtual descendant id from where to start the search. Use 
       {@link android.view.accessibility.AccessibilityNodeInfo#ROOT_NODE_ID} to 
       start from the root. 
    text - The searched text. 

    Returns: A list of found {@link AccessibilityNodeInfo}s. 

*android.view.accessibility.AccessibilityInteractionClient.findAccessibilityNodeInfosByViewId(int,int,long,String)*

public |java.util.List|<AccessibilityNodeInfo> findAccessibilityNodeInfosByViewId(
  int connectionId,
  int accessibilityWindowId,
  long accessibilityNodeId,
  java.lang.String viewId)

Finds an (|android.view.accessibility.AccessibilityNodeInfo|) by View id. The 
search is performed in the window whose id is specified and starts from the 
node whose accessibility id is specified. 


    connectionId - The id of a connection for interacting with the system. 
    accessibilityWindowId - A unique window id. Use {@link 
       android.view.accessibility.AccessibilityNodeInfo#ACTIVE_WINDOW_ID} to 
       query the currently active window. 
    accessibilityNodeId - A unique view id or virtual descendant id from where to start the search. Use 
       {@link android.view.accessibility.AccessibilityNodeInfo#ROOT_NODE_ID} to 
       start from the root. 
    viewId - The fully qualified resource name of the view id to find. 

    Returns: An list of {@link AccessibilityNodeInfo} if found, empty list otherwise. 

*android.view.accessibility.AccessibilityInteractionClient.findFocus(int,int,long,int)*

public |android.view.accessibility.AccessibilityNodeInfo| findFocus(
  int connectionId,
  int accessibilityWindowId,
  long accessibilityNodeId,
  int focusType)

Finds the (|android.view.accessibility.AccessibilityNodeInfo|) that has the 
specified focus type. The search is performed in the window whose id is 
specified and starts from the node whose accessibility id is specified. 


    connectionId - The id of a connection for interacting with the system. 
    accessibilityWindowId - A unique window id. Use {@link 
       android.view.accessibility.AccessibilityNodeInfo#ACTIVE_WINDOW_ID} to 
       query the currently active window. 
    accessibilityNodeId - A unique view id or virtual descendant id from where to start the search. Use 
       {@link android.view.accessibility.AccessibilityNodeInfo#ROOT_NODE_ID} to 
       start from the root. 
    focusType - The focus type. 

    Returns: The accessibility focused {@link AccessibilityNodeInfo}. 

*android.view.accessibility.AccessibilityInteractionClient.focusSearch(int,int,long,int)*

public |android.view.accessibility.AccessibilityNodeInfo| focusSearch(
  int connectionId,
  int accessibilityWindowId,
  long accessibilityNodeId,
  int direction)

Finds the accessibility focused 
(|android.view.accessibility.AccessibilityNodeInfo|) . The search is performed 
in the window whose id is specified and starts from the node whose 
accessibility id is specified. 


    connectionId - The id of a connection for interacting with the system. 
    accessibilityWindowId - A unique window id. Use {@link 
       android.view.accessibility.AccessibilityNodeInfo#ACTIVE_WINDOW_ID} to 
       query the currently active window. 
    accessibilityNodeId - A unique view id or virtual descendant id from where to start the search. Use 
       {@link android.view.accessibility.AccessibilityNodeInfo#ROOT_NODE_ID} to 
       start from the root. 
    direction - The direction in which to search for focusable. 

    Returns: The accessibility focused {@link AccessibilityNodeInfo}. 

*android.view.accessibility.AccessibilityInteractionClient.getConnection(int)*

public IAccessibilityServiceConnection getConnection(int connectionId)

Gets a cached accessibility service connection. 


    connectionId - The connection id. 

    Returns: The cached connection if such. 

*android.view.accessibility.AccessibilityInteractionClient.getInstance()*

public static |android.view.accessibility.AccessibilityInteractionClient| getInstance()





    Returns: The client for the current thread. 

*android.view.accessibility.AccessibilityInteractionClient.getInstanceForThread(long)*

public static |android.view.accessibility.AccessibilityInteractionClient| getInstanceForThread(long threadId)

Note: We keep one instance per interrogating thread since the instance contains 
state which can lead to undesired thread interleavings. We do not have a thread 
local variable since other threads should be able to look up the correct client 
knowing a thread id. See ViewRootImpl for details. 



    Returns: The client for a given threadId. 

*android.view.accessibility.AccessibilityInteractionClient.getRootInActiveWindow(int)*

public |android.view.accessibility.AccessibilityNodeInfo| getRootInActiveWindow(int connectionId)

Gets the root (|android.view.accessibility.AccessibilityNodeInfo|) in the 
currently active window. 


    connectionId - The id of a connection for interacting with the system. 

    Returns: The root {@link AccessibilityNodeInfo} if found, null otherwise. 

*android.view.accessibility.AccessibilityInteractionClient.onAccessibilityEvent(AccessibilityEvent)*

public void onAccessibilityEvent(android.view.accessibility.AccessibilityEvent event)





*android.view.accessibility.AccessibilityInteractionClient.performAccessibilityAction(int,int,long,int,Bundle)*

public boolean performAccessibilityAction(
  int connectionId,
  int accessibilityWindowId,
  long accessibilityNodeId,
  int action,
  android.os.Bundle arguments)

Performs an accessibility action on an 
(|android.view.accessibility.AccessibilityNodeInfo|) . 


    connectionId - The id of a connection for interacting with the system. 
    accessibilityWindowId - A unique window id. Use {@link 
       android.view.accessibility.AccessibilityNodeInfo#ACTIVE_WINDOW_ID} to 
       query the currently active window. 
    accessibilityNodeId - A unique view id or virtual descendant id from where to start the search. Use 
       {@link android.view.accessibility.AccessibilityNodeInfo#ROOT_NODE_ID} to 
       start from the root. 
    action - The action to perform. 
    arguments - Optional action arguments. 

    Returns: Whether the action was performed. 

*android.view.accessibility.AccessibilityInteractionClient.removeConnection(int)*

public void removeConnection(int connectionId)

Removes a cached accessibility service connection. 


    connectionId - The connection id. 

*android.view.accessibility.AccessibilityInteractionClient.setFindAccessibilityNodeInfoResult(AccessibilityNodeInfo,int)*

public void setFindAccessibilityNodeInfoResult(
  android.view.accessibility.AccessibilityNodeInfo info,
  int interactionId)





*android.view.accessibility.AccessibilityInteractionClient.setFindAccessibilityNodeInfosResult(List<AccessibilityNodeInfo>,int)*

public void setFindAccessibilityNodeInfosResult(
  java.util.List<android.view.accessibility.AccessibilityNodeInfo> infos,
  int interactionId)





*android.view.accessibility.AccessibilityInteractionClient.setPerformAccessibilityActionResult(boolean,int)*

public void setPerformAccessibilityActionResult(
  boolean succeeded,
  int interactionId)





*android.view.accessibility.AccessibilityInteractionClient.setSameThreadMessage(Message)*

public void setSameThreadMessage(android.os.Message message)

Sets the message to be processed if the interacted view hierarchy and the 
interacting client are running in the same thread. 


    message - The message. 


