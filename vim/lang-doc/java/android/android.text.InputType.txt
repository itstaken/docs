*android.text.InputType* *InputType* Bit definitions for an integer defining the

public interface interface InputType


|android.text.InputType_Description|
|android.text.InputType_Fields|
|android.text.InputType_Constructors|
|android.text.InputType_Methods|

================================================================================

*android.text.InputType_Fields*
|int_android.text.InputType.TYPE_CLASS_DATETIME|
|int_android.text.InputType.TYPE_CLASS_NUMBER|
|int_android.text.InputType.TYPE_CLASS_PHONE|
|int_android.text.InputType.TYPE_CLASS_TEXT|
|int_android.text.InputType.TYPE_DATETIME_VARIATION_DATE|
|int_android.text.InputType.TYPE_DATETIME_VARIATION_NORMAL|
|int_android.text.InputType.TYPE_DATETIME_VARIATION_TIME|
|int_android.text.InputType.TYPE_MASK_CLASS|
|int_android.text.InputType.TYPE_MASK_FLAGS|
|int_android.text.InputType.TYPE_MASK_VARIATION|
|int_android.text.InputType.TYPE_NULL|
|int_android.text.InputType.TYPE_NUMBER_FLAG_DECIMAL|
|int_android.text.InputType.TYPE_NUMBER_FLAG_SIGNED|
|int_android.text.InputType.TYPE_NUMBER_VARIATION_NORMAL|
|int_android.text.InputType.TYPE_NUMBER_VARIATION_PASSWORD|
|int_android.text.InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE|
|int_android.text.InputType.TYPE_TEXT_FLAG_AUTO_CORRECT|
|int_android.text.InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS|
|int_android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES|
|int_android.text.InputType.TYPE_TEXT_FLAG_CAP_WORDS|
|int_android.text.InputType.TYPE_TEXT_FLAG_IME_MULTI_LINE|
|int_android.text.InputType.TYPE_TEXT_FLAG_MULTI_LINE|
|int_android.text.InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS|
|int_android.text.InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS|
|int_android.text.InputType.TYPE_TEXT_VARIATION_EMAIL_SUBJECT|
|int_android.text.InputType.TYPE_TEXT_VARIATION_FILTER|
|int_android.text.InputType.TYPE_TEXT_VARIATION_LONG_MESSAGE|
|int_android.text.InputType.TYPE_TEXT_VARIATION_NORMAL|
|int_android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD|
|int_android.text.InputType.TYPE_TEXT_VARIATION_PERSON_NAME|
|int_android.text.InputType.TYPE_TEXT_VARIATION_PHONETIC|
|int_android.text.InputType.TYPE_TEXT_VARIATION_POSTAL_ADDRESS|
|int_android.text.InputType.TYPE_TEXT_VARIATION_SHORT_MESSAGE|
|int_android.text.InputType.TYPE_TEXT_VARIATION_URI|
|int_android.text.InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD|
|int_android.text.InputType.TYPE_TEXT_VARIATION_WEB_EDIT_TEXT|
|int_android.text.InputType.TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS|
|int_android.text.InputType.TYPE_TEXT_VARIATION_WEB_PASSWORD|

*android.text.InputType_Description*

Bit definitions for an integer defining the basic content type of text held in 
an (|android.text.Editable|) object. Supported classes may be combined with 
variations and flags to indicate desired behaviors. 

Examples 

A password field with with the password visible to the user: inputType = 
TYPE_CLASS_TEXT | TYPE_TEXT_VARIATION_VISIBLE_PASSWORD 

A multi-line postal address with automatic capitalization: inputType = 
TYPE_CLASS_TEXT | TYPE_TEXT_VARIATION_POSTAL_ADDRESS | 
TYPE_TEXT_FLAG_MULTI_LINE 

A time field: inputType = TYPE_CLASS_DATETIME | TYPE_DATETIME_VARIATION_TIME 



*int_android.text.InputType.TYPE_CLASS_DATETIME*

Class for dates and times. It supports the following variations: 
(|android.text.InputType|) (|android.text.InputType|) , and 
(|android.text.InputType|) . 


*int_android.text.InputType.TYPE_CLASS_NUMBER*

Class for numeric text. This class supports the following flags: 
(|android.text.InputType|) and (|android.text.InputType|) . It also supports 
the following variations: (|android.text.InputType|) and 
(|android.text.InputType|) . IME authors: If you do not recognize the 
variation, normal should be assumed. 


*int_android.text.InputType.TYPE_CLASS_PHONE*

Class for a phone number. This class currently supports no variations or flags. 


*int_android.text.InputType.TYPE_CLASS_TEXT*

Class for normal text. This class supports the following flags (only one of 
which should be set): (|android.text.InputType|) , (|android.text.InputType|) , 
and. (|android.text.InputType|) . It also supports the following variations: 
(|android.text.InputType|) , and (|android.text.InputType|) . If you do not 
recognize the variation, normal should be assumed. 


*int_android.text.InputType.TYPE_DATETIME_VARIATION_DATE*

Default variation of (|android.text.InputType|) : allows entering only a date. 


*int_android.text.InputType.TYPE_DATETIME_VARIATION_NORMAL*

Default variation of (|android.text.InputType|) : allows entering both a date 
and time. 


*int_android.text.InputType.TYPE_DATETIME_VARIATION_TIME*

Default variation of (|android.text.InputType|) : allows entering only a time. 


*int_android.text.InputType.TYPE_MASK_CLASS*

Mask of bits that determine the overall class of text being given. Currently 
supported classes are: (|android.text.InputType|) , (|android.text.InputType|) 
, (|android.text.InputType|) , (|android.text.InputType|) . IME authors: If the 
class is not one you understand, assume (|android.text.InputType|) with NO 
variation or flags. 


*int_android.text.InputType.TYPE_MASK_FLAGS*

Mask of bits that provide addition bit flags of options. 


*int_android.text.InputType.TYPE_MASK_VARIATION*

Mask of bits that determine the variation of the base content class. 


*int_android.text.InputType.TYPE_NULL*

Special content type for when no explicit type has been specified. This should 
be interpreted to mean that the target input connection is not rich, it can not 
process and show things like candidate text nor retrieve the current text, so 
the input method will need to run in a limited "generate key events" mode, if 
it supports it. Note that some input methods may not support it, for example a 
voice-based input method will likely not be able to generate key events even if 
this flag is set. 


*int_android.text.InputType.TYPE_NUMBER_FLAG_DECIMAL*

Flag of (|android.text.InputType|) : the number is decimal, allowing a decimal 
point to provide fractional values. 


*int_android.text.InputType.TYPE_NUMBER_FLAG_SIGNED*

Flag of (|android.text.InputType|) : the number is signed, allowing a positive 
or negative sign at the start. 


*int_android.text.InputType.TYPE_NUMBER_VARIATION_NORMAL*

Default variation of (|android.text.InputType|) : plain normal numeric text. 
This was added in (|android.os.Build.VERSION_CODES|) . An IME must target this 
API version or later to see this input type; if it doesn't, a request for this 
type will be dropped when passed through 
EditorInfo.makeCompatible(int)(|android.view.inputmethod.EditorInfo|) . 


*int_android.text.InputType.TYPE_NUMBER_VARIATION_PASSWORD*

Variation of (|android.text.InputType|) : entering a numeric password. This was 
added in (|android.os.Build.VERSION_CODES|) . An IME must target this API 
version or later to see this input type; if it doesn't, a request for this type 
will be dropped when passed through 
EditorInfo.makeCompatible(int)(|android.view.inputmethod.EditorInfo|) . 


*int_android.text.InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE*

Flag for (|android.text.InputType|) : the text editor (which means the 
application) is performing auto-completion of the text being entered based on 
its own semantics, which it will present to the user as they type. This 
generally means that the input method should not be showing candidates itself, 
but can expect the editor to supply its own completions/candidates from 
InputMethodSession.displayCompletions()(|android.view.inputmethod.InputMethodSession|)
as a result of the editor calling 
InputMethodManager.displayCompletions()(|android.view.inputmethod.InputMethodManager|)
. Note the contrast with (|android.text.InputType|) and 
(|android.text.InputType|) :TYPE_TEXT_FLAG_AUTO_COMPLETEmeans the editor should 
show an interface for displaying suggestions, but instead of supplying its own 
it will rely on the Editor to pass completions/corrections. 


*int_android.text.InputType.TYPE_TEXT_FLAG_AUTO_CORRECT*

Flag for (|android.text.InputType|) : the user is entering free-form text that 
should have auto-correction applied to it. Without this flag, the IME will not 
try to correct typos. You should always set this flag unless you really expect 
users to type non-words in this field, for example to choose a name for a 
character in a game. Contrast this with (|android.text.InputType|) and 
(|android.text.InputType|) :TYPE_TEXT_FLAG_AUTO_CORRECTmeans that the IME will 
try to auto-correct typos as the user is typing, but does not define whether 
the IME offers an interface to show suggestions. 


*int_android.text.InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS*

Flag for (|android.text.InputType|) : capitalize all characters. Overrides 
(|android.text.InputType|) and (|android.text.InputType|) . This value is 
explicitly defined to be the same as (|android.text.TextUtils|) . Of course, 
this only affects languages where there are upper-case and lower-case letters. 


*int_android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES*

Flag for (|android.text.InputType|) : capitalize the first character of each 
sentence. This value is explicitly defined to be the same as 
(|android.text.TextUtils|) . For example in English it means to capitalize 
after a period and a space (note that other languages may have different 
characters for period, or not use spaces, or use different grammatical rules). 
Of course, this only affects languages where there are upper-case and 
lower-case letters. 


*int_android.text.InputType.TYPE_TEXT_FLAG_CAP_WORDS*

Flag for (|android.text.InputType|) : capitalize the first character of every 
word. Overrides (|android.text.InputType|) . This value is explicitly defined 
to be the same as (|android.text.TextUtils|) . Of course, this only affects 
languages where there are upper-case and lower-case letters. 


*int_android.text.InputType.TYPE_TEXT_FLAG_IME_MULTI_LINE*

Flag for (|android.text.InputType|) : the regular text view associated with 
this should not be multi-line, but when a fullscreen input method is providing 
text it should use multiple lines if it can. 


*int_android.text.InputType.TYPE_TEXT_FLAG_MULTI_LINE*

Flag for (|android.text.InputType|) : multiple lines of text can be entered 
into the field. If this flag is not set, the text field will be constrained to 
a single line. The IME may also choose not to display an enter key when this 
flag is not set, as there should be no need to create new lines. 


*int_android.text.InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS*

Flag for (|android.text.InputType|) : the input method does not need to display 
any dictionary-based candidates. This is useful for text views that do not 
contain words from the language and do not benefit from any dictionary-based 
completions or corrections. It overrides the (|android.text.InputType|) value 
when set. Please avoid using this unless you are certain this is what you want. 
Many input methods need suggestions to work well, for example the ones based on 
gesture typing. Consider clearing (|android.text.InputType|) instead if you 
just do not want the IME to correct typos. Note the contrast with 
(|android.text.InputType|) and (|android.text.InputType|) 
:TYPE_TEXT_FLAG_NO_SUGGESTIONSmeans the IME should never show an interface to 
display suggestions. Most IMEs will also take this to mean they should not try 
to auto-correct what the user is typing. 


*int_android.text.InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS*

Variation of (|android.text.InputType|) : entering an e-mail address. 


*int_android.text.InputType.TYPE_TEXT_VARIATION_EMAIL_SUBJECT*

Variation of (|android.text.InputType|) : entering the subject line of an 
e-mail. 


*int_android.text.InputType.TYPE_TEXT_VARIATION_FILTER*

Variation of (|android.text.InputType|) : entering text to filter contents of a 
list etc. 


*int_android.text.InputType.TYPE_TEXT_VARIATION_LONG_MESSAGE*

Variation of (|android.text.InputType|) : entering the content of a long, 
possibly formal message such as the body of an e-mail. 


*int_android.text.InputType.TYPE_TEXT_VARIATION_NORMAL*

Default variation of (|android.text.InputType|) : plain old normal text. 


*int_android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD*

Variation of (|android.text.InputType|) : entering a password. 


*int_android.text.InputType.TYPE_TEXT_VARIATION_PERSON_NAME*

Variation of (|android.text.InputType|) : entering the name of a person. 


*int_android.text.InputType.TYPE_TEXT_VARIATION_PHONETIC*

Variation of (|android.text.InputType|) : entering text for phonetic 
pronunciation, such as a phonetic name field in contacts. This is mostly useful 
for languages where one spelling may have several phonetic readings, like 
Japanese. 


*int_android.text.InputType.TYPE_TEXT_VARIATION_POSTAL_ADDRESS*

Variation of (|android.text.InputType|) : entering a postal mailing address. 


*int_android.text.InputType.TYPE_TEXT_VARIATION_SHORT_MESSAGE*

Variation of (|android.text.InputType|) : entering a short, possibly informal 
message such as an instant message or a text message. 


*int_android.text.InputType.TYPE_TEXT_VARIATION_URI*

Variation of (|android.text.InputType|) : entering a URI. 


*int_android.text.InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD*

Variation of (|android.text.InputType|) : entering a password, which should be 
visible to the user. 


*int_android.text.InputType.TYPE_TEXT_VARIATION_WEB_EDIT_TEXT*

Variation of (|android.text.InputType|) : entering text inside of a web form. 


*int_android.text.InputType.TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS*

Variation of (|android.text.InputType|) : entering e-mail address inside of a 
web form. This was added in (|android.os.Build.VERSION_CODES|) . An IME must 
target this API version or later to see this input type; if it doesn't, a 
request for this type will be seen as (|android.text.InputType|) when passed 
through EditorInfo.makeCompatible(int)(|android.view.inputmethod.EditorInfo|) . 


*int_android.text.InputType.TYPE_TEXT_VARIATION_WEB_PASSWORD*

Variation of (|android.text.InputType|) : entering password inside of a web 
form. This was added in (|android.os.Build.VERSION_CODES|) . An IME must target 
this API version or later to see this input type; if it doesn't, a request for 
this type will be seen as (|android.text.InputType|) when passed through 
EditorInfo.makeCompatible(int)(|android.view.inputmethod.EditorInfo|) . 



