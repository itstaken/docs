*android.text.Spanned* *Spanned* This is the interface for text that has markup 

public interface interface Spanned

  implements |java.lang.CharSequence|

|android.text.Spanned_Description|
|android.text.Spanned_Fields|
|android.text.Spanned_Constructors|
|android.text.Spanned_Methods|

================================================================================

*android.text.Spanned_Fields*
|int_android.text.Spanned.SPAN_COMPOSING|
|int_android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE|
|int_android.text.Spanned.SPAN_EXCLUSIVE_INCLUSIVE|
|int_android.text.Spanned.SPAN_INCLUSIVE_EXCLUSIVE|
|int_android.text.Spanned.SPAN_INCLUSIVE_INCLUSIVE|
|int_android.text.Spanned.SPAN_INTERMEDIATE|
|int_android.text.Spanned.SPAN_MARK_MARK|
|int_android.text.Spanned.SPAN_MARK_POINT|
|int_android.text.Spanned.SPAN_PARAGRAPH|
|int_android.text.Spanned.SPAN_POINT_MARK|
|int_android.text.Spanned.SPAN_POINT_MARK_MASK|
|int_android.text.Spanned.SPAN_POINT_POINT|
|int_android.text.Spanned.SPAN_PRIORITY|
|int_android.text.Spanned.SPAN_PRIORITY_SHIFT|
|int_android.text.Spanned.SPAN_USER|
|int_android.text.Spanned.SPAN_USER_SHIFT|

*android.text.Spanned_Methods*
|android.text.Spanned.getSpanEnd(Object)|Return the end of the range of text to
|android.text.Spanned.getSpanFlags(Object)|Return the flags that were specified
|android.text.Spanned.getSpans(int,int,Class<T>)|Return an array of the markup 
|android.text.Spanned.getSpanStart(Object)|Return the beginning of the range of
|android.text.Spanned.nextSpanTransition(int,int,Class)|Return the first offset

*android.text.Spanned_Description*

This is the interface for text that has markup objects attached to ranges of 
it. Not all text classes have mutable markup or text; see 
(|android.text.Spannable|) for mutable markup and (|android.text.Editable|) for 
mutable text. 



*int_android.text.Spanned.SPAN_COMPOSING*

This flag is set on spans that are being used to apply temporary styling 
information on the composing text of an input method, so that they can be found 
and removed when the composing text is being replaced. 


*int_android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE*

Spans of type SPAN_EXCLUSIVE_EXCLUSIVE do not expand to include text inserted 
at either their starting or ending point. They can never have a length of 0 and 
are automatically removed from the buffer if all the text they cover is 
removed. 


*int_android.text.Spanned.SPAN_EXCLUSIVE_INCLUSIVE*

Non-0-length spans of type SPAN_EXCLUSIVE_INCLUSIVE expand to include text 
inserted at their ending point but not at their starting point. When 0-length, 
they behave like points. 


*int_android.text.Spanned.SPAN_INCLUSIVE_EXCLUSIVE*

Non-0-length spans of type SPAN_INCLUSIVE_EXCLUSIVE expand to include text 
inserted at their starting point but not at their ending point. When 0-length, 
they behave like marks. 


*int_android.text.Spanned.SPAN_INCLUSIVE_INCLUSIVE*

Spans of type SPAN_INCLUSIVE_INCLUSIVE expand to include text inserted at 
either their starting or ending point. 


*int_android.text.Spanned.SPAN_INTERMEDIATE*

This flag will be set for intermediate span changes, meaning there is 
guaranteed to be another change following it. Typically it is used for 
(|android.text.Selection|) which automatically uses this with the first offset 
it sets when updating the selection. 


*int_android.text.Spanned.SPAN_MARK_MARK*

0-length spans with type SPAN_MARK_MARK behave like text marks: they remain at 
their original offset when text is inserted at that offset. Conceptually, the 
text is added after the mark. 


*int_android.text.Spanned.SPAN_MARK_POINT*

SPAN_MARK_POINT is a synonym for (|android.text.Spanned|) . 


*int_android.text.Spanned.SPAN_PARAGRAPH*

SPAN_PARAGRAPH behaves like SPAN_INCLUSIVE_EXCLUSIVE (SPAN_MARK_MARK), except 
that if either end of the span is at the end of the buffer, that end behaves 
like _POINT instead (so SPAN_INCLUSIVE_INCLUSIVE if it starts in the middle and 
ends at the end, or SPAN_EXCLUSIVE_INCLUSIVE if it both starts and ends at the 
end). 

Its endpoints must be the start or end of the buffer or immediately after a \n 
character, and if the \n that anchors it is deleted, the endpoint is pulled to 
the next \n that follows in the buffer (or to the end of the buffer). 


*int_android.text.Spanned.SPAN_POINT_MARK*

SPAN_POINT_MARK is a synonym for (|android.text.Spanned|) . 


*int_android.text.Spanned.SPAN_POINT_MARK_MASK*

Bitmask of bits that are relevent for controlling point/mark behavior of spans. 

MARK and POINT are conceptually located between two adjacent characters. A MARK 
is "attached" to the character before, while a POINT will stick to the 
character after. The insertion cursor is conceptually located between the MARK 
and the POINT. 

As a result, inserting a new character between a MARK and a POINT will leave 
the MARK unchanged, while the POINT will be shifted, now located after the 
inserted character and still glued to the same character after it. 

Depending on whether the insertion happens at the beginning or the end of a 
span, the span will hence be expanded to include the new character (when the 
span is using a MARK at its beginning or a POINT at its end) or it will be 
excluded. 

Note that before and after here refer to offsets in the String, which are 
independent from the visual representation of the text (left-to-right or 
right-to-left). 


*int_android.text.Spanned.SPAN_POINT_POINT*

0-length spans with type SPAN_POINT_POINT behave like cursors: they are pushed 
forward by the length of the insertion when text is inserted at their offset. 
The text is conceptually inserted before the point. 


*int_android.text.Spanned.SPAN_PRIORITY*

The bits specified by the SPAN_PRIORITY bitmap determine the order of change 
notifications -- higher numbers go first. You probably don't need to set this; 
it is used so that when text changes, the text layout gets the chance to update 
itself before any other callbacks can inquire about the layout of the text. 


*int_android.text.Spanned.SPAN_PRIORITY_SHIFT*

The bits numbered just above SPAN_PRIORITY_SHIFT determine the order of change 
notifications -- higher numbers go first. You probably don't need to set this; 
it is used so that when text changes, the text layout gets the chance to update 
itself before any other callbacks can inquire about the layout of the text. 


*int_android.text.Spanned.SPAN_USER*

The bits specified by the SPAN_USER bitfield are available for callers to use 
to store scalar data associated with their span object. 


*int_android.text.Spanned.SPAN_USER_SHIFT*

The bits numbered SPAN_USER_SHIFT and above are available for callers to use to 
store scalar data associated with their span object. 



*android.text.Spanned.getSpanEnd(Object)*

public int getSpanEnd(java.lang.Object tag)

Return the end of the range of text to which the specified markup object is 
attached, or -1 if the object is not attached. 



*android.text.Spanned.getSpanFlags(Object)*

public int getSpanFlags(java.lang.Object tag)

Return the flags that were specified when (|android.text.Spannable|) was used 
to attach the specified markup object, or 0 if the specified object has not 
been attached. 



*android.text.Spanned.getSpans(int,int,Class<T>)*

public |T|[] getSpans(
  int start,
  int end,
  java.lang.Class<T> type)

Return an array of the markup objects attached to the specified slice of this 
CharSequence and whose type is the specified type or a subclass of it. Specify 
Object.class for the type if you want all the objects regardless of type. 



*android.text.Spanned.getSpanStart(Object)*

public int getSpanStart(java.lang.Object tag)

Return the beginning of the range of text to which the specified markup object 
is attached, or -1 if the object is not attached. 



*android.text.Spanned.nextSpanTransition(int,int,Class)*

public int nextSpanTransition(
  int start,
  int limit,
  java.lang.Class type)

Return the first offset greater than or equal to start where a markup object of 
class type begins or ends, or limit if there are no starts or ends greater than 
or equal to start but less than limit. Specify null or Object.class for the 
type if you want every transition regardless of type. 




