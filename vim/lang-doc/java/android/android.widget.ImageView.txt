*android.widget.ImageView* *ImageView* Displays an arbitrary image, such as an i

public class ImageView
  extends    |android.view.View|

|android.widget.ImageView_Description|
|android.widget.ImageView_Fields|
|android.widget.ImageView_Constructors|
|android.widget.ImageView_Methods|

================================================================================

*android.widget.ImageView_Constructors*
|android.widget.ImageView(Context)|
|android.widget.ImageView(Context,AttributeSet)|
|android.widget.ImageView(Context,AttributeSet,int)|

*android.widget.ImageView_Methods*
|android.widget.ImageView.clearColorFilter()|
|android.widget.ImageView.drawableStateChanged()|
|android.widget.ImageView.getAdjustViewBounds()|True when ImageView is adjustin
|android.widget.ImageView.getBaseline()|Return the offset of the widget's text 
|android.widget.ImageView.getBaselineAlignBottom()|Return whether this view's b
|android.widget.ImageView.getColorFilter()|Returns the active color filter for 
|android.widget.ImageView.getCropToPadding()|Return whether this ImageView crop
|android.widget.ImageView.getDrawable()|Return the view's drawable, or null if 
|android.widget.ImageView.getImageAlpha()|Returns the alpha that will be applie
|android.widget.ImageView.getImageMatrix()|Return the view's optional matrix.
|android.widget.ImageView.getMaxHeight()|The maximum height of this view.
|android.widget.ImageView.getMaxWidth()|The maximum width of this view.
|android.widget.ImageView.getScaleType()|Return the current scale type in use b
|android.widget.ImageView.hasOverlappingRendering()|
|android.widget.ImageView.invalidateDrawable(Drawable)|
|android.widget.ImageView.jumpDrawablesToCurrentState()|
|android.widget.ImageView.onAttachedToWindow()|
|android.widget.ImageView.onCreateDrawableState(int)|
|android.widget.ImageView.onDetachedFromWindow()|
|android.widget.ImageView.onDraw(Canvas)|
|android.widget.ImageView.onInitializeAccessibilityEvent(AccessibilityEvent)|
|android.widget.ImageView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)|
|android.widget.ImageView.onMeasure(int,int)|
|android.widget.ImageView.onPopulateAccessibilityEvent(AccessibilityEvent)|
|android.widget.ImageView.onRtlPropertiesChanged(int)|
|android.widget.ImageView.setAdjustViewBounds(boolean)|Set this to true if you 
|android.widget.ImageView.setAlpha(int)|Sets the alpha value that should be app
|android.widget.ImageView.setBaseline(int)|Set the offset of the widget's text 
|android.widget.ImageView.setBaselineAlignBottom(boolean)|Set whether to set th
|android.widget.ImageView.setColorFilter(ColorFilter)|Apply an arbitrary colorf
|android.widget.ImageView.setColorFilter(int)|Set a tinting option for the imag
|android.widget.ImageView.setColorFilter(int,PorterDuff.Mode)|Set a tinting opt
|android.widget.ImageView.setCropToPadding(boolean)|Sets whether this ImageView
|android.widget.ImageView.setFrame(int,int,int,int)|
|android.widget.ImageView.setImageAlpha(int)|Sets the alpha value that should b
|android.widget.ImageView.setImageBitmap(Bitmap)|Sets a Bitmap as the content o
|android.widget.ImageView.setImageDrawable(Drawable)|Sets a drawable as the con
|android.widget.ImageView.setImageLevel(int)|Sets the image level, when it is c
|android.widget.ImageView.setImageMatrix(Matrix)|
|android.widget.ImageView.setImageResource(int)|Sets a drawable as the content 
|android.widget.ImageView.setImageState(int[],boolean)|
|android.widget.ImageView.setImageURI(Uri)|Sets the content of this ImageView t
|android.widget.ImageView.setMaxHeight(int)|An optional argument to supply a ma
|android.widget.ImageView.setMaxWidth(int)|An optional argument to supply a max
|android.widget.ImageView.setScaleType(ImageView.ScaleType)|Controls how the im
|android.widget.ImageView.setSelected(boolean)|
|android.widget.ImageView.setVisibility(int)|
|android.widget.ImageView.setXfermode(Xfermode)|
|android.widget.ImageView.verifyDrawable(Drawable)|

*android.widget.ImageView_Description*

Displays an arbitrary image, such as an icon. The ImageView class can load 
images from various sources (such as resources or content providers), takes 
care of computing its measurement from the image so that it can be used in any 
layout manager, and provides various display options such as scaling and 
tinting. 



*android.widget.ImageView(Context)*

public ImageView(android.content.Context context)




*android.widget.ImageView(Context,AttributeSet)*

public ImageView(
  android.content.Context context,
  android.util.AttributeSet attrs)




*android.widget.ImageView(Context,AttributeSet,int)*

public ImageView(
  android.content.Context context,
  android.util.AttributeSet attrs,
  int defStyle)




*android.widget.ImageView.clearColorFilter()*

public final void clearColorFilter()





*android.widget.ImageView.drawableStateChanged()*

protected void drawableStateChanged()





*android.widget.ImageView.getAdjustViewBounds()*

public boolean getAdjustViewBounds()

True when ImageView is adjusting its bounds to preserve the aspect ratio of its 
drawable 



    Returns: whether to adjust the bounds of this view to presrve the original aspect ratio 
             of the drawable 

*android.widget.ImageView.getBaseline()*

public int getBaseline()

Return the offset of the widget's text baseline from the widget's top boundary. 



    Returns: the offset of the baseline within the widget's bounds or -1 if baseline 
             alignment is not supported. 

*android.widget.ImageView.getBaselineAlignBottom()*

public boolean getBaselineAlignBottom()

Return whether this view's baseline will be considered the bottom of the view. 



*android.widget.ImageView.getColorFilter()*

public ColorFilter getColorFilter()

Returns the active color filter for this ImageView. 



    Returns: the active color filter for this ImageView 

*android.widget.ImageView.getCropToPadding()*

public boolean getCropToPadding()

Return whether this ImageView crops to padding. 



    Returns: whether this ImageView crops to padding 

*android.widget.ImageView.getDrawable()*

public Drawable getDrawable()

Return the view's drawable, or null if no drawable has been assigned. 



*android.widget.ImageView.getImageAlpha()*

public int getImageAlpha()

Returns the alpha that will be applied to the drawable of this ImageView. 



    Returns: the alpha that will be applied to the drawable of this ImageView 

*android.widget.ImageView.getImageMatrix()*

public Matrix getImageMatrix()

Return the view's optional matrix. This is applied to the view's drawable when 
it is drawn. If there is not matrix, this method will return an identity 
matrix. Do not change this matrix in place but make a copy. If you want a 
different matrix applied to the drawable, be sure to call setImageMatrix(). 



*android.widget.ImageView.getMaxHeight()*

public int getMaxHeight()

The maximum height of this view. 



    Returns: The maximum height of this view 

*android.widget.ImageView.getMaxWidth()*

public int getMaxWidth()

The maximum width of this view. 



    Returns: The maximum width of this view 

*android.widget.ImageView.getScaleType()*

public |android.widget.ImageView.ScaleType| getScaleType()

Return the current scale type in use by this ImageView. 



*android.widget.ImageView.hasOverlappingRendering()*

public boolean hasOverlappingRendering()





*android.widget.ImageView.invalidateDrawable(Drawable)*

public void invalidateDrawable(Drawable dr)





*android.widget.ImageView.jumpDrawablesToCurrentState()*

public void jumpDrawablesToCurrentState()





*android.widget.ImageView.onAttachedToWindow()*

protected void onAttachedToWindow()





*android.widget.ImageView.onCreateDrawableState(int)*

public int[] onCreateDrawableState(int extraSpace)





*android.widget.ImageView.onDetachedFromWindow()*

protected void onDetachedFromWindow()





*android.widget.ImageView.onDraw(Canvas)*

protected void onDraw(Canvas canvas)





*android.widget.ImageView.onInitializeAccessibilityEvent(AccessibilityEvent)*

public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent event)





*android.widget.ImageView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)*

public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo info)





*android.widget.ImageView.onMeasure(int,int)*

protected void onMeasure(
  int widthMeasureSpec,
  int heightMeasureSpec)





*android.widget.ImageView.onPopulateAccessibilityEvent(AccessibilityEvent)*

public void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent event)





*android.widget.ImageView.onRtlPropertiesChanged(int)*

public void onRtlPropertiesChanged(int layoutDirection)





*android.widget.ImageView.setAdjustViewBounds(boolean)*

public void setAdjustViewBounds(boolean adjustViewBounds)

Set this to true if you want the ImageView to adjust its bounds to preserve the 
aspect ratio of its drawable. 

Note: If the application targets API level 17 or lower, adjustViewBounds will 
allow the drawable to shrink the view bounds, but not grow to fill available 
measured space in all cases. This is for compatibility with legacy 
MeasureSpec(|android.view.View.MeasureSpec|) and 
RelativeLayout(|android.widget.RelativeLayout|) behavior. 


    adjustViewBounds - Whether to adjust the bounds of this view to preserve the original aspect ratio 
       of the drawable. 

*android.widget.ImageView.setAlpha(int)*

public void setAlpha(int alpha)

Sets the alpha value that should be applied to the image. 

    Deprecated: use #setImageAlpha(int) instead

    alpha - the alpha value that should be applied to the image 

*android.widget.ImageView.setBaseline(int)*

public void setBaseline(int baseline)

Set the offset of the widget's text baseline from the widget's top boundary. 
This value is overridden by the (|android.widget.ImageView|) property. 


    baseline - The baseline to use, or -1 if none is to be provided. 

*android.widget.ImageView.setBaselineAlignBottom(boolean)*

public void setBaselineAlignBottom(boolean aligned)

Set whether to set the baseline of this view to the bottom of the view. Setting 
this value overrides any calls to setBaseline. 


    aligned - If true, the image view will be baseline aligned with based on its bottom edge. 

*android.widget.ImageView.setColorFilter(ColorFilter)*

public void setColorFilter(ColorFilter cf)

Apply an arbitrary colorfilter to the image. 


    cf - the colorfilter to apply (may be null) 

*android.widget.ImageView.setColorFilter(int)*

public final void setColorFilter(int color)

Set a tinting option for the image. Assumes (|PorterDuff.Mode|) blending mode. 


    color - Color tint to apply. 

*android.widget.ImageView.setColorFilter(int,PorterDuff.Mode)*

public final void setColorFilter(
  int color,
  PorterDuff.Mode mode)

Set a tinting option for the image. 


    color - Color tint to apply. 
    mode - How to apply the color. The standard mode is {@link PorterDuff.Mode#SRC_ATOP} 

*android.widget.ImageView.setCropToPadding(boolean)*

public void setCropToPadding(boolean cropToPadding)

Sets whether this ImageView will crop to padding. 


    cropToPadding - whether this ImageView will crop to padding 

*android.widget.ImageView.setFrame(int,int,int,int)*

protected boolean setFrame(
  int l,
  int t,
  int r,
  int b)





*android.widget.ImageView.setImageAlpha(int)*

public void setImageAlpha(int alpha)

Sets the alpha value that should be applied to the image. 


    alpha - the alpha value that should be applied to the image 

*android.widget.ImageView.setImageBitmap(Bitmap)*

public void setImageBitmap(Bitmap bm)

Sets a Bitmap as the content of this ImageView. 


    bm - The bitmap to set 

*android.widget.ImageView.setImageDrawable(Drawable)*

public void setImageDrawable(Drawable drawable)

Sets a drawable as the content of this ImageView. 


    drawable - The drawable to set 

*android.widget.ImageView.setImageLevel(int)*

public void setImageLevel(int level)

Sets the image level, when it is constructed from a 
(|android.graphics.drawable.LevelListDrawable|) . 


    level - The new level for the image. 

*android.widget.ImageView.setImageMatrix(Matrix)*

public void setImageMatrix(Matrix matrix)





*android.widget.ImageView.setImageResource(int)*

public void setImageResource(int resId)

Sets a drawable as the content of this ImageView. 

This does Bitmap reading and decoding on the UI thread, which can cause a 
latency hiccup. If that's a concern, consider using 
(|android.widget.ImageView|) or (|android.widget.ImageView|) and 
(|android.graphics.BitmapFactory|) instead. 


    resId - the resource identifier of the drawable 

*android.widget.ImageView.setImageState(int[],boolean)*

public void setImageState(
  int[] state,
  boolean merge)





*android.widget.ImageView.setImageURI(Uri)*

public void setImageURI(android.net.Uri uri)

Sets the content of this ImageView to the specified Uri. 

This does Bitmap reading and decoding on the UI thread, which can cause a 
latency hiccup. If that's a concern, consider using 
(|android.widget.ImageView|) or (|android.widget.ImageView|) and 
(|android.graphics.BitmapFactory|) instead. 


    uri - The Uri of an image 

*android.widget.ImageView.setMaxHeight(int)*

public void setMaxHeight(int maxHeight)

An optional argument to supply a maximum height for this view. Only valid if 
(|android.widget.ImageView|) has been set to true. To set an image to be a 
maximum of 100 x 100 while preserving the original aspect ratio, do the 
following: 1) set adjustViewBounds to true 2) set maxWidth and maxHeight to 100 
3) set the height and width layout params to WRAP_CONTENT. 

Note that this view could be still smaller than 100 x 100 using this approach 
if the original image is small. To set an image to a fixed size, specify that 
size in the layout params and then use (|android.widget.ImageView|) to 
determine how to fit the image within the bounds. 


    maxHeight - maximum height for this view 

*android.widget.ImageView.setMaxWidth(int)*

public void setMaxWidth(int maxWidth)

An optional argument to supply a maximum width for this view. Only valid if 
(|android.widget.ImageView|) has been set to true. To set an image to be a 
maximum of 100 x 100 while preserving the original aspect ratio, do the 
following: 1) set adjustViewBounds to true 2) set maxWidth and maxHeight to 100 
3) set the height and width layout params to WRAP_CONTENT. 

Note that this view could be still smaller than 100 x 100 using this approach 
if the original image is small. To set an image to a fixed size, specify that 
size in the layout params and then use (|android.widget.ImageView|) to 
determine how to fit the image within the bounds. 


    maxWidth - maximum width for this view 

*android.widget.ImageView.setScaleType(ImageView.ScaleType)*

public void setScaleType(android.widget.ImageView.ScaleType scaleType)

Controls how the image should be resized or moved to match the size of this 
ImageView. 


    scaleType - The desired scaling mode. 

*android.widget.ImageView.setSelected(boolean)*

public void setSelected(boolean selected)





*android.widget.ImageView.setVisibility(int)*

public void setVisibility(int visibility)





*android.widget.ImageView.setXfermode(Xfermode)*

public final void setXfermode(Xfermode mode)





*android.widget.ImageView.verifyDrawable(Drawable)*

protected boolean verifyDrawable(Drawable dr)






