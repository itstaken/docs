*android.os.PatternMatcher* *PatternMatcher* A simple pattern matcher, which is 

public class PatternMatcher
  extends    |java.lang.Object|
  implements |android.os.Parcelable|

|android.os.PatternMatcher_Description|
|android.os.PatternMatcher_Fields|
|android.os.PatternMatcher_Constructors|
|android.os.PatternMatcher_Methods|

================================================================================

*android.os.PatternMatcher_Fields*
|android.os.Parcelable.Creator<android.os.PatternMatcher>_android.os.PatternMatcher.CREATOR|
|int_android.os.PatternMatcher.PATTERN_LITERAL|
|int_android.os.PatternMatcher.PATTERN_PREFIX|
|int_android.os.PatternMatcher.PATTERN_SIMPLE_GLOB|

*android.os.PatternMatcher_Constructors*
|android.os.PatternMatcher(Parcel)|
|android.os.PatternMatcher(String,int)|

*android.os.PatternMatcher_Methods*
|android.os.PatternMatcher.describeContents()|
|android.os.PatternMatcher.getPath()|
|android.os.PatternMatcher.getType()|
|android.os.PatternMatcher.match(String)|
|android.os.PatternMatcher.toString()|
|android.os.PatternMatcher.writeToParcel(Parcel,int)|

*android.os.PatternMatcher_Description*

A simple pattern matcher, which is safe to use on untrusted data: it does not 
provide full reg-exp support, only simple globbing that can not be used 
maliciously. 



*android.os.Parcelable.Creator<android.os.PatternMatcher>_android.os.PatternMatcher.CREATOR*




*int_android.os.PatternMatcher.PATTERN_LITERAL*

Pattern type: the given pattern must exactly match the string it is tested 
against. 


*int_android.os.PatternMatcher.PATTERN_PREFIX*

Pattern type: the given pattern must match the beginning of the string it is 
tested against. 


*int_android.os.PatternMatcher.PATTERN_SIMPLE_GLOB*

Pattern type: the given pattern is interpreted with a simple glob syntax for 
matching against the string it is tested against. In this syntax, you can use 
the '*' character to match against zero or more occurrences of the character 
immediately before. If the character before it is '.' it will match any 
character. The character '\' can be used as an escape. This essentially 
provides only the '*' wildcard part of a normal regexp. 



*android.os.PatternMatcher(Parcel)*

public PatternMatcher(android.os.Parcel src)




*android.os.PatternMatcher(String,int)*

public PatternMatcher(
  java.lang.String pattern,
  int type)




*android.os.PatternMatcher.describeContents()*

public int describeContents()





*android.os.PatternMatcher.getPath()*

public final |java.lang.String| getPath()





*android.os.PatternMatcher.getType()*

public final int getType()





*android.os.PatternMatcher.match(String)*

public boolean match(java.lang.String str)





*android.os.PatternMatcher.toString()*

public |java.lang.String| toString()





*android.os.PatternMatcher.writeToParcel(Parcel,int)*

public void writeToParcel(
  android.os.Parcel dest,
  int flags)






