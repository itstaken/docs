*android.media.MediaDrm* *MediaDrm* 

public final class MediaDrm
  extends    |java.lang.Object|

|android.media.MediaDrm_Description|
|android.media.MediaDrm_Fields|
|android.media.MediaDrm_Constructors|
|android.media.MediaDrm_Methods|

================================================================================

*android.media.MediaDrm_Fields*
|int_android.media.MediaDrm.EVENT_KEY_EXPIRED|
|int_android.media.MediaDrm.EVENT_KEY_REQUIRED|
|int_android.media.MediaDrm.EVENT_PROVISION_REQUIRED|
|int_android.media.MediaDrm.EVENT_VENDOR_DEFINED|
|int_android.media.MediaDrm.KEY_TYPE_OFFLINE|
|int_android.media.MediaDrm.KEY_TYPE_RELEASE|
|int_android.media.MediaDrm.KEY_TYPE_STREAMING|
|java.lang.String_android.media.MediaDrm.PROPERTY_ALGORITHMS|
|java.lang.String_android.media.MediaDrm.PROPERTY_DESCRIPTION|
|java.lang.String_android.media.MediaDrm.PROPERTY_DEVICE_UNIQUE_ID|
|java.lang.String_android.media.MediaDrm.PROPERTY_VENDOR|
|java.lang.String_android.media.MediaDrm.PROPERTY_VERSION|

*android.media.MediaDrm_Constructors*
|android.media.MediaDrm(UUID)|

*android.media.MediaDrm_Methods*
|android.media.MediaDrm.closeSession(byte[])|
|android.media.MediaDrm.finalize()|
|android.media.MediaDrm.getCryptoSession(byte[],String,String)|
|android.media.MediaDrm.getKeyRequest(byte[],byte[],String,int,HashMap<String,String>)|
|android.media.MediaDrm.getPropertyByteArray(String)|
|android.media.MediaDrm.getPropertyString(String)|
|android.media.MediaDrm.getProvisionRequest()|
|android.media.MediaDrm.getSecureStops()|
|android.media.MediaDrm.isCryptoSchemeSupported(UUID)|
|android.media.MediaDrm.isCryptoSchemeSupported(UUID,String)|
|android.media.MediaDrm.openSession()|
|android.media.MediaDrm.provideKeyResponse(byte[],byte[])|
|android.media.MediaDrm.provideProvisionResponse(byte[])|
|android.media.MediaDrm.queryKeyStatus(byte[])|
|android.media.MediaDrm.release()|
|android.media.MediaDrm.releaseSecureStops(byte[])|
|android.media.MediaDrm.removeKeys(byte[])|
|android.media.MediaDrm.restoreKeys(byte[],byte[])|
|android.media.MediaDrm.setOnEventListener(MediaDrm.OnEventListener)|
|android.media.MediaDrm.setPropertyByteArray(String,byte[])|
|android.media.MediaDrm.setPropertyString(String,String)|

*android.media.MediaDrm_Description*





*int_android.media.MediaDrm.EVENT_KEY_EXPIRED*




*int_android.media.MediaDrm.EVENT_KEY_REQUIRED*




*int_android.media.MediaDrm.EVENT_PROVISION_REQUIRED*




*int_android.media.MediaDrm.EVENT_VENDOR_DEFINED*




*int_android.media.MediaDrm.KEY_TYPE_OFFLINE*




*int_android.media.MediaDrm.KEY_TYPE_RELEASE*




*int_android.media.MediaDrm.KEY_TYPE_STREAMING*




*java.lang.String_android.media.MediaDrm.PROPERTY_ALGORITHMS*




*java.lang.String_android.media.MediaDrm.PROPERTY_DESCRIPTION*




*java.lang.String_android.media.MediaDrm.PROPERTY_DEVICE_UNIQUE_ID*




*java.lang.String_android.media.MediaDrm.PROPERTY_VENDOR*




*java.lang.String_android.media.MediaDrm.PROPERTY_VERSION*





*android.media.MediaDrm(UUID)*

public MediaDrm(java.util.UUID uuid)
  throws |android.media.UnsupportedSchemeException|
         



*android.media.MediaDrm.closeSession(byte[])*

public native void closeSession(byte[] sessionId)





*android.media.MediaDrm.finalize()*

protected void finalize()





*android.media.MediaDrm.getCryptoSession(byte[],String,String)*

public |android.media.MediaDrm.CryptoSession| getCryptoSession(
  byte[] sessionId,
  java.lang.String cipherAlgorithm,
  java.lang.String macAlgorithm)





*android.media.MediaDrm.getKeyRequest(byte[],byte[],String,int,HashMap<String,String>)*

public native |android.media.MediaDrm.KeyRequest| getKeyRequest(
  byte[] scope,
  byte[] init,
  java.lang.String mimeType,
  int keyType,
  java.util.HashMap<java.lang.String, java.lang.String> optionalParameters)
  throws |android.media.NotProvisionedException|
         




*android.media.MediaDrm.getPropertyByteArray(String)*

public native byte[] getPropertyByteArray(java.lang.String propertyName)





*android.media.MediaDrm.getPropertyString(String)*

public native |java.lang.String| getPropertyString(java.lang.String propertyName)





*android.media.MediaDrm.getProvisionRequest()*

public native |android.media.MediaDrm.ProvisionRequest| getProvisionRequest()





*android.media.MediaDrm.getSecureStops()*

public native |java.util.List|<byte[]> getSecureStops()





*android.media.MediaDrm.isCryptoSchemeSupported(UUID)*

public static final boolean isCryptoSchemeSupported(java.util.UUID uuid)





*android.media.MediaDrm.isCryptoSchemeSupported(UUID,String)*

public static final boolean isCryptoSchemeSupported(
  java.util.UUID uuid,
  java.lang.String mimeType)





*android.media.MediaDrm.openSession()*

public native byte[] openSession()
  throws |android.media.NotProvisionedException|
         




*android.media.MediaDrm.provideKeyResponse(byte[],byte[])*

public native byte[] provideKeyResponse(
  byte[] scope,
  byte[] response)
  throws |android.media.DeniedByServerException|
         |android.media.NotProvisionedException|
         




*android.media.MediaDrm.provideProvisionResponse(byte[])*

public native void provideProvisionResponse(byte[] response)
  throws |android.media.DeniedByServerException|
         




*android.media.MediaDrm.queryKeyStatus(byte[])*

public native |java.util.HashMap|<String,String> queryKeyStatus(byte[] sessionId)





*android.media.MediaDrm.release()*

public final native void release()





*android.media.MediaDrm.releaseSecureStops(byte[])*

public native void releaseSecureStops(byte[] ssRelease)





*android.media.MediaDrm.removeKeys(byte[])*

public native void removeKeys(byte[] sessionId)





*android.media.MediaDrm.restoreKeys(byte[],byte[])*

public native void restoreKeys(
  byte[] sessionId,
  byte[] keySetId)





*android.media.MediaDrm.setOnEventListener(MediaDrm.OnEventListener)*

public void setOnEventListener(android.media.MediaDrm.OnEventListener listener)





*android.media.MediaDrm.setPropertyByteArray(String,byte[])*

public native void setPropertyByteArray(
  java.lang.String propertyName,
  byte[] value)





*android.media.MediaDrm.setPropertyString(String,String)*

public native void setPropertyString(
  java.lang.String propertyName,
  java.lang.String value)






