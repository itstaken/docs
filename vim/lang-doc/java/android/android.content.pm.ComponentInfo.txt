*android.content.pm.ComponentInfo* *ComponentInfo* Base class containing informa

public class ComponentInfo
  extends    |android.content.pm.PackageItemInfo|

|android.content.pm.ComponentInfo_Description|
|android.content.pm.ComponentInfo_Fields|
|android.content.pm.ComponentInfo_Constructors|
|android.content.pm.ComponentInfo_Methods|

================================================================================

*android.content.pm.ComponentInfo_Fields*
|android.content.pm.ApplicationInfo_android.content.pm.ComponentInfo.applicationInfo|
|int_android.content.pm.ComponentInfo.descriptionRes|
|boolean_android.content.pm.ComponentInfo.enabled|
|boolean_android.content.pm.ComponentInfo.exported|
|java.lang.String_android.content.pm.ComponentInfo.processName|

*android.content.pm.ComponentInfo_Constructors*
|android.content.pm.ComponentInfo()|
|android.content.pm.ComponentInfo(ComponentInfo)|
|android.content.pm.ComponentInfo(Parcel)|

*android.content.pm.ComponentInfo_Methods*
|android.content.pm.ComponentInfo.dumpBack(Printer,String)|
|android.content.pm.ComponentInfo.dumpFront(Printer,String)|
|android.content.pm.ComponentInfo.getApplicationInfo()|
|android.content.pm.ComponentInfo.getIconResource()|Return the icon resource id
|android.content.pm.ComponentInfo.getLogoResource()|Return the logo resource id
|android.content.pm.ComponentInfo.isEnabled()|Return whether this component and
|android.content.pm.ComponentInfo.loadDefaultIcon(PackageManager)|
|android.content.pm.ComponentInfo.loadDefaultLogo(PackageManager)|
|android.content.pm.ComponentInfo.loadLabel(PackageManager)|
|android.content.pm.ComponentInfo.writeToParcel(Parcel,int)|

*android.content.pm.ComponentInfo_Description*

Base class containing information common to all application components ( 
(|android.content.pm.ActivityInfo|) , (|android.content.pm.ServiceInfo|) ). 
This class is not intended to be used by itself; it is simply here to share 
common definitions between all application components. As such, it does not 
itself implement Parcelable, but does provide convenience methods to assist in 
the implementation of Parcelable in subclasses. 



*android.content.pm.ApplicationInfo_android.content.pm.ComponentInfo.applicationInfo*

Global information about the application/package this component is a part of. 


*int_android.content.pm.ComponentInfo.descriptionRes*

A string resource identifier (in the package's resources) containing a 
user-readable description of the component. From the "description" attribute 
or, if not set, 0. 


*boolean_android.content.pm.ComponentInfo.enabled*

Indicates whether or not this component may be instantiated. Note that this 
value can be overriden by the one in its parent 
(|android.content.pm.ApplicationInfo|) . 


*boolean_android.content.pm.ComponentInfo.exported*

Set to true if this component is available for use by other applications. Comes 
from android:exported(|android.R.attr|) of the <activity>, <receiver>, 
<service>, or <provider> tag. 


*java.lang.String_android.content.pm.ComponentInfo.processName*

The name of the process this component should run in. From the 
"android:process" attribute or, if not set, the same as 
applicationInfo.processName. 



*android.content.pm.ComponentInfo()*

public ComponentInfo()




*android.content.pm.ComponentInfo(ComponentInfo)*

public ComponentInfo(android.content.pm.ComponentInfo orig)




*android.content.pm.ComponentInfo(Parcel)*

protected ComponentInfo(android.os.Parcel source)




*android.content.pm.ComponentInfo.dumpBack(Printer,String)*

protected void dumpBack(
  android.util.Printer pw,
  java.lang.String prefix)





*android.content.pm.ComponentInfo.dumpFront(Printer,String)*

protected void dumpFront(
  android.util.Printer pw,
  java.lang.String prefix)





*android.content.pm.ComponentInfo.getApplicationInfo()*

protected |android.content.pm.ApplicationInfo| getApplicationInfo()





*android.content.pm.ComponentInfo.getIconResource()*

public final int getIconResource()

Return the icon resource identifier to use for this component. If the component 
defines an icon, that is used; else, the application icon is used. 



    Returns: The icon associated with this component. 

*android.content.pm.ComponentInfo.getLogoResource()*

public final int getLogoResource()

Return the logo resource identifier to use for this component. If the component 
defines a logo, that is used; else, the application logo is used. 



    Returns: The logo associated with this component. 

*android.content.pm.ComponentInfo.isEnabled()*

public boolean isEnabled()

Return whether this component and its enclosing application are enabled. 



*android.content.pm.ComponentInfo.loadDefaultIcon(PackageManager)*

protected Drawable loadDefaultIcon(android.content.pm.PackageManager pm)





*android.content.pm.ComponentInfo.loadDefaultLogo(PackageManager)*

protected Drawable loadDefaultLogo(android.content.pm.PackageManager pm)





*android.content.pm.ComponentInfo.loadLabel(PackageManager)*

public |java.lang.CharSequence| loadLabel(android.content.pm.PackageManager pm)





*android.content.pm.ComponentInfo.writeToParcel(Parcel,int)*

public void writeToParcel(
  android.os.Parcel dest,
  int parcelableFlags)






