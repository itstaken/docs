*android.appwidget.AppWidgetManager* *AppWidgetManager* Updates AppWidget state;

public class AppWidgetManager
  extends    |java.lang.Object|

|android.appwidget.AppWidgetManager_Description|
|android.appwidget.AppWidgetManager_Fields|
|android.appwidget.AppWidgetManager_Constructors|
|android.appwidget.AppWidgetManager_Methods|

================================================================================

*android.appwidget.AppWidgetManager_Fields*
|java.lang.String_android.appwidget.AppWidgetManager.ACTION_APPWIDGET_BIND|
|java.lang.String_android.appwidget.AppWidgetManager.ACTION_APPWIDGET_CONFIGURE|
|java.lang.String_android.appwidget.AppWidgetManager.ACTION_APPWIDGET_DELETED|
|java.lang.String_android.appwidget.AppWidgetManager.ACTION_APPWIDGET_DISABLED|
|java.lang.String_android.appwidget.AppWidgetManager.ACTION_APPWIDGET_ENABLED|
|java.lang.String_android.appwidget.AppWidgetManager.ACTION_APPWIDGET_OPTIONS_CHANGED|
|java.lang.String_android.appwidget.AppWidgetManager.ACTION_APPWIDGET_PICK|
|java.lang.String_android.appwidget.AppWidgetManager.ACTION_APPWIDGET_UPDATE|
|java.lang.String_android.appwidget.AppWidgetManager.ACTION_KEYGUARD_APPWIDGET_PICK|
|java.lang.String_android.appwidget.AppWidgetManager.EXTRA_APPWIDGET_ID|
|java.lang.String_android.appwidget.AppWidgetManager.EXTRA_APPWIDGET_IDS|
|java.lang.String_android.appwidget.AppWidgetManager.EXTRA_APPWIDGET_OPTIONS|
|java.lang.String_android.appwidget.AppWidgetManager.EXTRA_APPWIDGET_PROVIDER|
|java.lang.String_android.appwidget.AppWidgetManager.EXTRA_CATEGORY_FILTER|
|java.lang.String_android.appwidget.AppWidgetManager.EXTRA_CUSTOM_EXTRAS|
|java.lang.String_android.appwidget.AppWidgetManager.EXTRA_CUSTOM_INFO|
|java.lang.String_android.appwidget.AppWidgetManager.EXTRA_CUSTOM_SORT|
|int_android.appwidget.AppWidgetManager.INVALID_APPWIDGET_ID|
|java.lang.String_android.appwidget.AppWidgetManager.META_DATA_APPWIDGET_PROVIDER|
|java.lang.String_android.appwidget.AppWidgetManager.OPTION_APPWIDGET_HOST_CATEGORY|
|java.lang.String_android.appwidget.AppWidgetManager.OPTION_APPWIDGET_MAX_HEIGHT|
|java.lang.String_android.appwidget.AppWidgetManager.OPTION_APPWIDGET_MAX_WIDTH|
|java.lang.String_android.appwidget.AppWidgetManager.OPTION_APPWIDGET_MIN_HEIGHT|
|java.lang.String_android.appwidget.AppWidgetManager.OPTION_APPWIDGET_MIN_WIDTH|

*android.appwidget.AppWidgetManager_Methods*
|android.appwidget.AppWidgetManager.bindAppWidgetId(int,ComponentName)|Set the 
|android.appwidget.AppWidgetManager.bindAppWidgetId(int,ComponentName,Bundle)|S
|android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed(int,ComponentName)|
|android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed(int,ComponentName,Bundle)|
|android.appwidget.AppWidgetManager.bindRemoteViewsService(int,Intent,IBinder,UserHandle)|
|android.appwidget.AppWidgetManager.getAppWidgetIds(ComponentName)|Get the list
|android.appwidget.AppWidgetManager.getAppWidgetInfo(int)|Get the available inf
|android.appwidget.AppWidgetManager.getAppWidgetOptions(int)|Get the extras ass
|android.appwidget.AppWidgetManager.getInstalledProviders()|Return a list of th
|android.appwidget.AppWidgetManager.getInstalledProviders(int)|Return a list of
|android.appwidget.AppWidgetManager.getInstance(Context)|Get the AppWidgetManag
|android.appwidget.AppWidgetManager.hasBindAppWidgetPermission(String)|Query if
|android.appwidget.AppWidgetManager.notifyAppWidgetViewDataChanged(int[],int)|N
|android.appwidget.AppWidgetManager.notifyAppWidgetViewDataChanged(int,int)|Not
|android.appwidget.AppWidgetManager.partiallyUpdateAppWidget(int[],RemoteViews)|
|android.appwidget.AppWidgetManager.partiallyUpdateAppWidget(int,RemoteViews)|P
|android.appwidget.AppWidgetManager.setBindAppWidgetPermission(String,boolean)|
|android.appwidget.AppWidgetManager.unbindRemoteViewsService(int,Intent,UserHandle)|
|android.appwidget.AppWidgetManager.updateAppWidget(ComponentName,RemoteViews)|
|android.appwidget.AppWidgetManager.updateAppWidget(int[],RemoteViews)|Set the 
|android.appwidget.AppWidgetManager.updateAppWidget(int,RemoteViews)|Set the Re
|android.appwidget.AppWidgetManager.updateAppWidgetOptions(int,Bundle)|Update t

*android.appwidget.AppWidgetManager_Description*

Updates AppWidget state; gets information about installed AppWidget providers 
and other AppWidget related state. 

Developer Guides For more information about creating app widgets, read the <a 
href="guide/topics/appwidgets/index.html">App Widgets developer guide. 



*java.lang.String_android.appwidget.AppWidgetManager.ACTION_APPWIDGET_BIND*

Activity action to launch from your (|android.appwidget.AppWidgetHost|) 
activity when you want to bind an AppWidget to display and 
bindAppWidgetIdIfAllowed returns false. 

You must supply the following extras: 

(|android.appwidget.AppWidgetManager|) A newly allocated appWidgetId, which 
will be bound to the AppWidget provider you provide. 

(|android.appwidget.AppWidgetManager|) The BroadcastReceiver that will be the 
AppWidget provider for this AppWidget. 



The system will respond with an onActivityResult call with the following extras 
in the intent: 

(|android.appwidget.AppWidgetManager|) The appWidgetId that you supplied in the 
original intent. 



When you receive the result from the AppWidget bind activity, if the resultCode 
is (|android.app.Activity|) , the AppWidget has been bound. You should then 
check the AppWidgetProviderInfo for the returned AppWidget, and if it has one, 
launch its configuration activity. If (|android.app.Activity|) is returned, you 
should delete the appWidgetId. 


*java.lang.String_android.appwidget.AppWidgetManager.ACTION_APPWIDGET_CONFIGURE*

Sent when it is time to configure your AppWidget while it is being added to a 
host. This action is not sent as a broadcast to the AppWidget provider, but as 
a startActivity to the activity specified in the AppWidgetProviderInfo 
meta-data(|android.appwidget.AppWidgetProviderInfo|) . 

The intent will contain the following extras: 

(|android.appwidget.AppWidgetManager|) The appWidgetId to configure. 



If you return (|android.app.Activity|) using 
Activity.setResult()(|android.app.Activity|) , the AppWidget will be added, and 
you will receive an (|android.appwidget.AppWidgetManager|) broadcast for this 
AppWidget. If you return (|android.app.Activity|) , the host will cancel the 
add and not display this AppWidget, and you will receive a 
(|android.appwidget.AppWidgetManager|) broadcast. 


*java.lang.String_android.appwidget.AppWidgetManager.ACTION_APPWIDGET_DELETED*

Sent when an instance of an AppWidget is deleted from its host. 

This is a protected intent that can only be sent by the system. 


*java.lang.String_android.appwidget.AppWidgetManager.ACTION_APPWIDGET_DISABLED*

Sent when an instance of an AppWidget is removed from the last host. 

This is a protected intent that can only be sent by the system. 


*java.lang.String_android.appwidget.AppWidgetManager.ACTION_APPWIDGET_ENABLED*

Sent when an instance of an AppWidget is added to a host for the first time. 
This broadcast is sent at boot time if there is a AppWidgetHost installed with 
an instance for this provider. 

This is a protected intent that can only be sent by the system. 


*java.lang.String_android.appwidget.AppWidgetManager.ACTION_APPWIDGET_OPTIONS_CHANGED*

Sent when the custom extras for an AppWidget change. 

This is a protected intent that can only be sent by the system. 


*java.lang.String_android.appwidget.AppWidgetManager.ACTION_APPWIDGET_PICK*

Activity action to launch from your (|android.appwidget.AppWidgetHost|) 
activity when you want to pick an AppWidget to display. The AppWidget picker 
activity will be launched. 

You must supply the following extras: 

(|android.appwidget.AppWidgetManager|) A newly allocated appWidgetId, which 
will be bound to the AppWidget provider once the user has selected one. 



The system will respond with an onActivityResult call with the following extras 
in the intent: 

(|android.appwidget.AppWidgetManager|) The appWidgetId that you supplied in the 
original intent. 



When you receive the result from the AppWidget pick activity, if the resultCode 
is (|android.app.Activity|) , an AppWidget has been selected. You should then 
check the AppWidgetProviderInfo for the returned AppWidget, and if it has one, 
launch its configuration activity. If (|android.app.Activity|) is returned, you 
should delete the appWidgetId. 


*java.lang.String_android.appwidget.AppWidgetManager.ACTION_APPWIDGET_UPDATE*

Sent when it is time to update your AppWidget. 

This may be sent in response to a new instance for this AppWidget provider 
having been instantiated, the requested update 
interval(|android.appwidget.AppWidgetProviderInfo|) having lapsed, or the 
system booting. 

The intent will contain the following extras: 

(|android.appwidget.AppWidgetManager|) The appWidgetIds to update. This may be 
all of the AppWidgets created for this provider, or just a subset. The system 
tries to send updates for as few AppWidget instances as possible. 




*java.lang.String_android.appwidget.AppWidgetManager.ACTION_KEYGUARD_APPWIDGET_PICK*

Similar to ACTION_APPWIDGET_PICK, but used from keyguard 


*java.lang.String_android.appwidget.AppWidgetManager.EXTRA_APPWIDGET_ID*

An intent extra that contains one appWidgetId. 

The value will be an int that can be retrieved like 
this:frameworks/base/tests/appwidgets/AppWidgetHostTest/src/com/android/tests/appwidgethost/AppWidgetHostActivity.java
getExtra_EXTRA_APPWIDGET_ID 


*java.lang.String_android.appwidget.AppWidgetManager.EXTRA_APPWIDGET_IDS*

An intent extra that contains multiple appWidgetIds. 

The value will be an int array that can be retrieved like 
this:frameworks/base/tests/appwidgets/AppWidgetHostTest/src/com/android/tests/appwidgethost/TestAppWidgetProvider.java
getExtra_EXTRA_APPWIDGET_IDS 


*java.lang.String_android.appwidget.AppWidgetManager.EXTRA_APPWIDGET_OPTIONS*

An intent extra which points to a bundle of extra information for a particular 
widget id. In particular this bundle can contain EXTRA_APPWIDGET_WIDTH and 
EXTRA_APPWIDGET_HEIGHT. 


*java.lang.String_android.appwidget.AppWidgetManager.EXTRA_APPWIDGET_PROVIDER*

An intent extra that contains the component name of a AppWidget provider. 

The value will be an ComponentName. 


*java.lang.String_android.appwidget.AppWidgetManager.EXTRA_CATEGORY_FILTER*

An intent extra to pass to the AppWidget picker which allows the picker to 
filter the list based on the (|android.appwidget.AppWidgetProviderInfo|) . 


*java.lang.String_android.appwidget.AppWidgetManager.EXTRA_CUSTOM_EXTRAS*

An intent extra to pass to the AppWidget picker containing a (|java.util.List|) 
of (|android.os.Bundle|) objects to mix in to the list of AppWidgets that are 
installed. It will be added to the extras object on the 
(|android.content.Intent|) that is returned from the picker activity. 


*java.lang.String_android.appwidget.AppWidgetManager.EXTRA_CUSTOM_INFO*

An intent extra to pass to the AppWidget picker containing a (|java.util.List|) 
of (|android.appwidget.AppWidgetProviderInfo|) objects to mix in to the list of 
AppWidgets that are installed. (This is how the launcher shows the search 
widget). 


*java.lang.String_android.appwidget.AppWidgetManager.EXTRA_CUSTOM_SORT*

An intent extra to pass to the AppWidget picker to specify whether or not to 
sort the list of caller-specified extra AppWidgets along with the rest of the 
AppWidgets 


*int_android.appwidget.AppWidgetManager.INVALID_APPWIDGET_ID*

A sentinel value that the AppWidget manager will never return as a appWidgetId. 


*java.lang.String_android.appwidget.AppWidgetManager.META_DATA_APPWIDGET_PROVIDER*

Field for the manifest meta-data tag. 


*java.lang.String_android.appwidget.AppWidgetManager.OPTION_APPWIDGET_HOST_CATEGORY*

A bundle extra that hints to the AppWidgetProvider the category of host that 
owns this this widget. Can have the value 
(|android.appwidget.AppWidgetProviderInfo|) or 
(|android.appwidget.AppWidgetProviderInfo|) . 


*java.lang.String_android.appwidget.AppWidgetManager.OPTION_APPWIDGET_MAX_HEIGHT*

A bundle extra that contains the upper bound on the current width, in dips, of 
a widget instance. 


*java.lang.String_android.appwidget.AppWidgetManager.OPTION_APPWIDGET_MAX_WIDTH*

A bundle extra that contains the upper bound on the current width, in dips, of 
a widget instance. 


*java.lang.String_android.appwidget.AppWidgetManager.OPTION_APPWIDGET_MIN_HEIGHT*

A bundle extra that contains the lower bound on the current height, in dips, of 
a widget instance. 


*java.lang.String_android.appwidget.AppWidgetManager.OPTION_APPWIDGET_MIN_WIDTH*

A bundle extra that contains the lower bound on the current width, in dips, of 
a widget instance. 



*android.appwidget.AppWidgetManager.bindAppWidgetId(int,ComponentName)*

public void bindAppWidgetId(
  int appWidgetId,
  android.content.ComponentName provider)

Set the component for a given appWidgetId. 

You need the BIND_APPWIDGET permission or the user must have enabled binding 
widgets always for your component. This method is used by the AppWidget picker 
and should not be used by other apps. 


    appWidgetId - The AppWidget instance for which to set the RemoteViews. 
    provider - The {@link android.content.BroadcastReceiver} that will be the AppWidget 
       provider for this AppWidget. 

*android.appwidget.AppWidgetManager.bindAppWidgetId(int,ComponentName,Bundle)*

public void bindAppWidgetId(
  int appWidgetId,
  android.content.ComponentName provider,
  android.os.Bundle options)

Set the component for a given appWidgetId. 

You need the BIND_APPWIDGET permission or the user must have enabled binding 
widgets always for your component. This method is used by the AppWidget picker 
and should not be used by other apps. 


    appWidgetId - The AppWidget instance for which to set the RemoteViews. 
    provider - The {@link android.content.BroadcastReceiver} that will be the AppWidget 
       provider for this AppWidget. 
    options - Bundle containing options for the AppWidget. See also {@link 
       #updateAppWidgetOptions(int, Bundle)} 

*android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed(int,ComponentName)*

public boolean bindAppWidgetIdIfAllowed(
  int appWidgetId,
  android.content.ComponentName provider)

Set the component for a given appWidgetId. 

You need the BIND_APPWIDGET permission or the user must have enabled binding 
widgets always for your component. Should be used by apps that host widgets; if 
this method returns false, call (|android.appwidget.AppWidgetManager|) to 
request permission to bind 


    appWidgetId - The AppWidget instance for which to set the RemoteViews. 
    provider - The {@link android.content.BroadcastReceiver} that will be the AppWidget 
       provider for this AppWidget. 

    Returns: true if this component has permission to bind the AppWidget 

*android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed(int,ComponentName,Bundle)*

public boolean bindAppWidgetIdIfAllowed(
  int appWidgetId,
  android.content.ComponentName provider,
  android.os.Bundle options)

Set the component for a given appWidgetId. 

You need the BIND_APPWIDGET permission or the user must have enabled binding 
widgets always for your component. Should be used by apps that host widgets; if 
this method returns false, call (|android.appwidget.AppWidgetManager|) to 
request permission to bind 


    appWidgetId - The AppWidget instance for which to set the RemoteViews. 
    provider - The {@link android.content.BroadcastReceiver} that will be the AppWidget 
       provider for this AppWidget. 
    options - Bundle containing options for the AppWidget. See also {@link 
       #updateAppWidgetOptions(int, Bundle)} 

    Returns: true if this component has permission to bind the AppWidget 

*android.appwidget.AppWidgetManager.bindRemoteViewsService(int,Intent,IBinder,UserHandle)*

public void bindRemoteViewsService(
  int appWidgetId,
  android.content.Intent intent,
  android.os.IBinder connection,
  android.os.UserHandle userHandle)

Binds the RemoteViewsService for a given appWidgetId and intent. 

The appWidgetId specified must already be bound to the calling AppWidgetHost 
via AppWidgetManager.bindAppWidgetId()(|android.appwidget.AppWidgetManager|) . 


    appWidgetId - The AppWidget instance for which to bind the RemoteViewsService. 
    intent - The intent of the service which will be providing the data to the 
       RemoteViewsAdapter. 
    connection - The callback interface to be notified when a connection is made or lost. 
    userHandle - The user to bind to. 

*android.appwidget.AppWidgetManager.getAppWidgetIds(ComponentName)*

public int[] getAppWidgetIds(android.content.ComponentName provider)

Get the list of appWidgetIds that have been bound to the given AppWidget 
provider. 


    provider - The {@link android.content.BroadcastReceiver} that is the AppWidget provider to 
       find appWidgetIds for. 

*android.appwidget.AppWidgetManager.getAppWidgetInfo(int)*

public |android.appwidget.AppWidgetProviderInfo| getAppWidgetInfo(int appWidgetId)

Get the available info about the AppWidget. 



    Returns: A appWidgetId. If the appWidgetId has not been bound to a provider yet, or you 
             don't have access to that appWidgetId, null is returned. 

*android.appwidget.AppWidgetManager.getAppWidgetOptions(int)*

public |android.os.Bundle| getAppWidgetOptions(int appWidgetId)

Get the extras associated with a given widget instance. 

The extras can be used to embed additional information about this widget to be 
accessed by the associated widget's AppWidgetProvider. 


    appWidgetId - The AppWidget instances for which to set the RemoteViews. 

    Returns: The options associated with the given widget instance. 

*android.appwidget.AppWidgetManager.getInstalledProviders()*

public |java.util.List|<AppWidgetProviderInfo> getInstalledProviders()

Return a list of the AppWidget providers that are currently installed. 



*android.appwidget.AppWidgetManager.getInstalledProviders(int)*

public |java.util.List|<AppWidgetProviderInfo> getInstalledProviders(int categoryFilter)

Return a list of the AppWidget providers that are currently installed. 


    categoryFilter - Will only return providers which register as any of the specified specified 
       categories. See {@link AppWidgetProviderInfo#widgetCategory}. 

*android.appwidget.AppWidgetManager.getInstance(Context)*

public static |android.appwidget.AppWidgetManager| getInstance(android.content.Context context)

Get the AppWidgetManager instance to use for the supplied 
Context(|android.content.Context|) object. 



*android.appwidget.AppWidgetManager.hasBindAppWidgetPermission(String)*

public boolean hasBindAppWidgetPermission(java.lang.String packageName)

Query if a given package was granted permission by the user to bind app widgets 

You need the MODIFY_APPWIDGET_BIND_PERMISSIONS permission 


    packageName - The package for which the permission is being queried 

    Returns: true if the package was granted permission by the user to bind app widgets 

*android.appwidget.AppWidgetManager.notifyAppWidgetViewDataChanged(int[],int)*

public void notifyAppWidgetViewDataChanged(
  int[] appWidgetIds,
  int viewId)

Notifies the specified collection view in all the specified AppWidget instances 
to invalidate their data. 


    appWidgetIds - The AppWidget instances to notify of view data changes. 
    viewId - The collection view id. 

*android.appwidget.AppWidgetManager.notifyAppWidgetViewDataChanged(int,int)*

public void notifyAppWidgetViewDataChanged(
  int appWidgetId,
  int viewId)

Notifies the specified collection view in the specified AppWidget instance to 
invalidate its data. 


    appWidgetId - The AppWidget instance to notify of view data changes. 
    viewId - The collection view id. 

*android.appwidget.AppWidgetManager.partiallyUpdateAppWidget(int[],RemoteViews)*

public void partiallyUpdateAppWidget(
  int[] appWidgetIds,
  android.widget.RemoteViews views)

Perform an incremental update or command on the widget(s) specified by 
appWidgetIds. 

This update differs from (|android.appwidget.AppWidgetManager|) in that the 
RemoteViews object which is passed is understood to be an incomplete 
representation of the widget, and hence does not replace the cached 
representation of the widget. As of API level 17, the new properties set within 
the views objects will be appended to the cached representation of the widget, 
and hence will persist. 

Use with (|android.widget.RemoteViews|) , (|android.widget.RemoteViews|) , 
(|android.widget.RemoteViews|) and similar commands. 

It is okay to call this method both inside an 
(|android.appwidget.AppWidgetManager|) broadcast, and outside of the handler. 
This method will only work when called from the uid that owns the AppWidget 
provider. 

This method will be ignored if a widget has not received a full update via 
(|android.appwidget.AppWidgetManager|) . 


    appWidgetIds - The AppWidget instances for which to set the RemoteViews. 
    views - The RemoteViews object containing the incremental update / command. 

*android.appwidget.AppWidgetManager.partiallyUpdateAppWidget(int,RemoteViews)*

public void partiallyUpdateAppWidget(
  int appWidgetId,
  android.widget.RemoteViews views)

Perform an incremental update or command on the widget specified by 
appWidgetId. 

This update differs from (|android.appwidget.AppWidgetManager|) in that the 
RemoteViews object which is passed is understood to be an incomplete 
representation of the widget, and hence is not cached by the AppWidgetService. 
Note that because these updates are not cached, any state that they modify that 
is not restored by restoreInstanceState will not persist in the case that the 
widgets are restored using the cached version in AppWidgetService. 

Use with (|android.widget.RemoteViews|) , (|android.widget.RemoteViews|) , 
(|android.widget.RemoteViews|) and similar commands. 

It is okay to call this method both inside an 
(|android.appwidget.AppWidgetManager|) broadcast, and outside of the handler. 
This method will only work when called from the uid that owns the AppWidget 
provider. 

This method will be ignored if a widget has not received a full update via 
(|android.appwidget.AppWidgetManager|) . 


    appWidgetId - The AppWidget instance for which to set the RemoteViews. 
    views - The RemoteViews object containing the incremental update / command. 

*android.appwidget.AppWidgetManager.setBindAppWidgetPermission(String,boolean)*

public void setBindAppWidgetPermission(
  java.lang.String packageName,
  boolean permission)

Changes any user-granted permission for the given package to bind app widgets 

You need the MODIFY_APPWIDGET_BIND_PERMISSIONS permission 


    provider - The package whose permission is being changed 
    permission - Whether to give the package permission to bind widgets 

*android.appwidget.AppWidgetManager.unbindRemoteViewsService(int,Intent,UserHandle)*

public void unbindRemoteViewsService(
  int appWidgetId,
  android.content.Intent intent,
  android.os.UserHandle userHandle)

Unbinds the RemoteViewsService for a given appWidgetId and intent. 

The appWidgetId specified muse already be bound to the calling AppWidgetHost 
via AppWidgetManager.bindAppWidgetId()(|android.appwidget.AppWidgetManager|) . 


    appWidgetId - The AppWidget instance for which to bind the RemoteViewsService. 
    intent - The intent of the service which will be providing the data to the 
       RemoteViewsAdapter. 
    userHandle - The user to unbind from. 

*android.appwidget.AppWidgetManager.updateAppWidget(ComponentName,RemoteViews)*

public void updateAppWidget(
  android.content.ComponentName provider,
  android.widget.RemoteViews views)

Set the RemoteViews to use for all AppWidget instances for the supplied 
AppWidget provider. 

It is okay to call this method both inside an 
(|android.appwidget.AppWidgetManager|) broadcast, and outside of the handler. 
This method will only work when called from the uid that owns the AppWidget 
provider. 


    provider - The {@link ComponentName} for the {@link android.content.BroadcastReceiver 
       BroadcastReceiver} provider for your AppWidget. 
    views - The RemoteViews object to show. 

*android.appwidget.AppWidgetManager.updateAppWidget(int[],RemoteViews)*

public void updateAppWidget(
  int[] appWidgetIds,
  android.widget.RemoteViews views)

Set the RemoteViews to use for the specified appWidgetIds. 

Note that the RemoteViews parameter will be cached by the AppWidgetService, and 
hence should contain a complete representation of the widget. For performing 
partial widget updates, see (|android.appwidget.AppWidgetManager|) . 

It is okay to call this method both inside an 
(|android.appwidget.AppWidgetManager|) broadcast, and outside of the handler. 
This method will only work when called from the uid that owns the AppWidget 
provider. 

The total Bitmap memory used by the RemoteViews object cannot exceed that 
required to fill the screen 1.5 times, ie. (screen width x screen height x 4 x 
1.5) bytes. 


    appWidgetIds - The AppWidget instances for which to set the RemoteViews. 
    views - The RemoteViews object to show. 

*android.appwidget.AppWidgetManager.updateAppWidget(int,RemoteViews)*

public void updateAppWidget(
  int appWidgetId,
  android.widget.RemoteViews views)

Set the RemoteViews to use for the specified appWidgetId. 

Note that the RemoteViews parameter will be cached by the AppWidgetService, and 
hence should contain a complete representation of the widget. For performing 
partial widget updates, see (|android.appwidget.AppWidgetManager|) . 

It is okay to call this method both inside an 
(|android.appwidget.AppWidgetManager|) broadcast, and outside of the handler. 
This method will only work when called from the uid that owns the AppWidget 
provider. 

The total Bitmap memory used by the RemoteViews object cannot exceed that 
required to fill the screen 1.5 times, ie. (screen width x screen height x 4 x 
1.5) bytes. 


    appWidgetId - The AppWidget instance for which to set the RemoteViews. 
    views - The RemoteViews object to show. 

*android.appwidget.AppWidgetManager.updateAppWidgetOptions(int,Bundle)*

public void updateAppWidgetOptions(
  int appWidgetId,
  android.os.Bundle options)

Update the extras for a given widget instance. 

The extras can be used to embed additional information about this widget to be 
accessed by the associated widget's AppWidgetProvider. 


    appWidgetId - The AppWidget instances for which to set the RemoteViews. 
    options - The options to associate with this widget 


