*android.view.ActionMode* *ActionMode* Represents a contextual mode of the user 

public abstract class ActionMode
  extends    |java.lang.Object|

|android.view.ActionMode_Description|
|android.view.ActionMode_Fields|
|android.view.ActionMode_Constructors|
|android.view.ActionMode_Methods|

================================================================================

*android.view.ActionMode_Constructors*
|android.view.ActionMode()|

*android.view.ActionMode_Methods*
|android.view.ActionMode.finish()|Finish and close this action mode.
|android.view.ActionMode.getCustomView()|Returns the current custom view for th
|android.view.ActionMode.getMenu()|Returns the menu of actions that this action
|android.view.ActionMode.getMenuInflater()|Returns aMenuInflaterwith the Action
|android.view.ActionMode.getSubtitle()|Returns the current subtitle of this act
|android.view.ActionMode.getTag()|Retrieve the tag object associated with this 
|android.view.ActionMode.getTitle()|Returns the current title of this action mo
|android.view.ActionMode.getTitleOptionalHint()|
|android.view.ActionMode.invalidate()|Invalidate the action mode and refresh me
|android.view.ActionMode.isTitleOptional()|
|android.view.ActionMode.isUiFocusable()|Returns whether the UI presenting this
|android.view.ActionMode.setCustomView(View)|Set a custom view for this action 
|android.view.ActionMode.setSubtitle(CharSequence)|Set the subtitle of the acti
|android.view.ActionMode.setSubtitle(int)|Set the subtitle of the action mode.
|android.view.ActionMode.setTag(Object)|Set a tag object associated with this A
|android.view.ActionMode.setTitle(CharSequence)|Set the title of the action mod
|android.view.ActionMode.setTitle(int)|Set the title of the action mode.
|android.view.ActionMode.setTitleOptionalHint(boolean)|Set whether or not the t

*android.view.ActionMode_Description*

Represents a contextual mode of the user interface. Action modes can be used to 
provide alternative interaction modes and replace parts of the normal UI until 
finished. Examples of good action modes include text selection and contextual 
actions. 

Developer Guides For information about how to provide contextual actions 
withActionMode, read the <a 
href="guide/topics/ui/menus.html#context-menu">Menus developer guide. 



*android.view.ActionMode()*

public ActionMode()




*android.view.ActionMode.finish()*

public abstract void finish()

Finish and close this action mode. The action mode's 
(|android.view.ActionMode.Callback|) will have its 
(|android.view.ActionMode.Callback|) method called. 



*android.view.ActionMode.getCustomView()*

public abstract |android.view.View| getCustomView()

Returns the current custom view for this action mode. 



    Returns: The current custom view 

*android.view.ActionMode.getMenu()*

public abstract |android.view.Menu| getMenu()

Returns the menu of actions that this action mode presents. 



    Returns: The action mode's menu. 

*android.view.ActionMode.getMenuInflater()*

public abstract |android.view.MenuInflater| getMenuInflater()

Returns a (|android.view.MenuInflater|) with the ActionMode's context. 



*android.view.ActionMode.getSubtitle()*

public abstract |java.lang.CharSequence| getSubtitle()

Returns the current subtitle of this action mode. 



    Returns: Subtitle text 

*android.view.ActionMode.getTag()*

public |java.lang.Object| getTag()

Retrieve the tag object associated with this ActionMode. 

Like the tag available to views, this allows applications to associate 
arbitrary data with an ActionMode for later reference. 



    Returns: Tag associated with this ActionMode 

*android.view.ActionMode.getTitle()*

public abstract |java.lang.CharSequence| getTitle()

Returns the current title of this action mode. 



    Returns: 

*android.view.ActionMode.getTitleOptionalHint()*

public boolean getTitleOptionalHint()





    Returns: true if this action mode has been given a hint to consider the title/subtitle 
             display to be optional. 

*android.view.ActionMode.invalidate()*

public abstract void invalidate()

Invalidate the action mode and refresh menu content. The mode's 
(|android.view.ActionMode.Callback|) will have its 
(|android.view.ActionMode.Callback|) method called. If it returns true the menu 
will be scanned for updated content and any relevant changes will be reflected 
to the user. 



*android.view.ActionMode.isTitleOptional()*

public boolean isTitleOptional()





    Returns: true if this action mode considers the title and subtitle fields as optional. 
             Optional titles may not be displayed to the user. 

*android.view.ActionMode.isUiFocusable()*

public boolean isUiFocusable()

Returns whether the UI presenting this action mode can take focus or not. This 
is used by internal components within the framework that would otherwise 
present an action mode UI that requires focus, such as an EditText as a custom 
view. 



    Returns: true if the UI used to show this action mode can take focus 

*android.view.ActionMode.setCustomView(View)*

public abstract void setCustomView(android.view.View view)

Set a custom view for this action mode. The custom view will take the place of 
the title and subtitle. Useful for things like search boxes. 


    view - Custom view to use in place of the title/subtitle. 

*android.view.ActionMode.setSubtitle(CharSequence)*

public abstract void setSubtitle(java.lang.CharSequence subtitle)

Set the subtitle of the action mode. This method will have no visible effect if 
a custom view has been set. 


    subtitle - Subtitle string to set 

*android.view.ActionMode.setSubtitle(int)*

public abstract void setSubtitle(int resId)

Set the subtitle of the action mode. This method will have no visible effect if 
a custom view has been set. 


    resId - Resource ID of a string to set as the subtitle 

*android.view.ActionMode.setTag(Object)*

public void setTag(java.lang.Object tag)

Set a tag object associated with this ActionMode. 

Like the tag available to views, this allows applications to associate 
arbitrary data with an ActionMode for later reference. 


    tag - Tag to associate with this ActionMode 

*android.view.ActionMode.setTitle(CharSequence)*

public abstract void setTitle(java.lang.CharSequence title)

Set the title of the action mode. This method will have no visible effect if a 
custom view has been set. 


    title - Title string to set 

*android.view.ActionMode.setTitle(int)*

public abstract void setTitle(int resId)

Set the title of the action mode. This method will have no visible effect if a 
custom view has been set. 


    resId - Resource ID of a string to set as the title 

*android.view.ActionMode.setTitleOptionalHint(boolean)*

public void setTitleOptionalHint(boolean titleOptional)

Set whether or not the title/subtitle display for this action mode is optional. 

In many cases the supplied title for an action mode is merely meant to add 
context and is not strictly required for the action mode to be useful. If the 
title is optional, the system may choose to hide the title entirely rather than 
truncate it due to a lack of available space. 

Note that this is merely a hint; the underlying implementation may choose to 
ignore this setting under some circumstances. 


    titleOptional - true if the title only presents optional information. 


