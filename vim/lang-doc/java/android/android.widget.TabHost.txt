*android.widget.TabHost* *TabHost* Container for a tabbed window view.

public class TabHost
  extends    |android.widget.FrameLayout|
  implements |android.view.ViewTreeObserver.OnTouchModeChangeListener|

|android.widget.TabHost_Description|
|android.widget.TabHost_Fields|
|android.widget.TabHost_Constructors|
|android.widget.TabHost_Methods|

================================================================================

*android.widget.TabHost_Fields*
|int_android.widget.TabHost.mCurrentTab|
|android.app.LocalActivityManager_android.widget.TabHost.mLocalActivityManager|

*android.widget.TabHost_Constructors*
|android.widget.TabHost(Context)|
|android.widget.TabHost(Context,AttributeSet)|

*android.widget.TabHost_Methods*
|android.widget.TabHost.addTab(TabHost.TabSpec)|Add a tab.
|android.widget.TabHost.clearAllTabs()|Removes all tabs from the tab widget ass
|android.widget.TabHost.dispatchKeyEvent(KeyEvent)|
|android.widget.TabHost.dispatchWindowFocusChanged(boolean)|
|android.widget.TabHost.getCurrentTab()|
|android.widget.TabHost.getCurrentTabTag()|
|android.widget.TabHost.getCurrentTabView()|
|android.widget.TabHost.getCurrentView()|
|android.widget.TabHost.getTabContentView()|Get the FrameLayout which holds tab
|android.widget.TabHost.getTabWidget()|
|android.widget.TabHost.newTabSpec(String)|Get a newTabSpecassociated with this
|android.widget.TabHost.onAttachedToWindow()|
|android.widget.TabHost.onDetachedFromWindow()|
|android.widget.TabHost.onInitializeAccessibilityEvent(AccessibilityEvent)|
|android.widget.TabHost.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)|
|android.widget.TabHost.onTouchModeChanged(boolean)|
|android.widget.TabHost.sendAccessibilityEvent(int)|
|android.widget.TabHost.setCurrentTab(int)|
|android.widget.TabHost.setCurrentTabByTag(String)|
|android.widget.TabHost.setOnTabChangedListener(TabHost.OnTabChangeListener)|Re
|android.widget.TabHost.setup()|Call setup() before adding tabs if loading TabH
|android.widget.TabHost.setup(LocalActivityManager)|If you are usingTabSpec#set

*android.widget.TabHost_Description*

Container for a tabbed window view. This object holds two children: a set of 
tab labels that the user clicks to select a specific tab, and a FrameLayout 
object that displays the contents of that page. The individual elements are 
typically controlled using this container object, rather than setting values on 
the child elements themselves. 



*int_android.widget.TabHost.mCurrentTab*

This field should be made private, so it is hidden from the SDK. 


*android.app.LocalActivityManager_android.widget.TabHost.mLocalActivityManager*

This field should be made private, so it is hidden from the SDK. 



*android.widget.TabHost(Context)*

public TabHost(android.content.Context context)




*android.widget.TabHost(Context,AttributeSet)*

public TabHost(
  android.content.Context context,
  android.util.AttributeSet attrs)




*android.widget.TabHost.addTab(TabHost.TabSpec)*

public void addTab(android.widget.TabHost.TabSpec tabSpec)

Add a tab. 


    tabSpec - Specifies how to create the indicator and content. 

*android.widget.TabHost.clearAllTabs()*

public void clearAllTabs()

Removes all tabs from the tab widget associated with this tab host. 



*android.widget.TabHost.dispatchKeyEvent(KeyEvent)*

public boolean dispatchKeyEvent(android.view.KeyEvent event)





*android.widget.TabHost.dispatchWindowFocusChanged(boolean)*

public void dispatchWindowFocusChanged(boolean hasFocus)





*android.widget.TabHost.getCurrentTab()*

public int getCurrentTab()





*android.widget.TabHost.getCurrentTabTag()*

public |java.lang.String| getCurrentTabTag()





*android.widget.TabHost.getCurrentTabView()*

public |android.view.View| getCurrentTabView()





*android.widget.TabHost.getCurrentView()*

public |android.view.View| getCurrentView()





*android.widget.TabHost.getTabContentView()*

public |android.widget.FrameLayout| getTabContentView()

Get the FrameLayout which holds tab content 



*android.widget.TabHost.getTabWidget()*

public |android.widget.TabWidget| getTabWidget()





*android.widget.TabHost.newTabSpec(String)*

public |android.widget.TabHost.TabSpec| newTabSpec(java.lang.String tag)

Get a new (|android.widget.TabHost.TabSpec|) associated with this tab host. 


    tag - required tag of tab. 

*android.widget.TabHost.onAttachedToWindow()*

protected void onAttachedToWindow()





*android.widget.TabHost.onDetachedFromWindow()*

protected void onDetachedFromWindow()





*android.widget.TabHost.onInitializeAccessibilityEvent(AccessibilityEvent)*

public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent event)





*android.widget.TabHost.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)*

public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo info)





*android.widget.TabHost.onTouchModeChanged(boolean)*

public void onTouchModeChanged(boolean isInTouchMode)





*android.widget.TabHost.sendAccessibilityEvent(int)*

public void sendAccessibilityEvent(int eventType)





*android.widget.TabHost.setCurrentTab(int)*

public void setCurrentTab(int index)





*android.widget.TabHost.setCurrentTabByTag(String)*

public void setCurrentTabByTag(java.lang.String tag)





*android.widget.TabHost.setOnTabChangedListener(TabHost.OnTabChangeListener)*

public void setOnTabChangedListener(android.widget.TabHost.OnTabChangeListener l)

Register a callback to be invoked when the selected state of any of the items 
in this list changes 


    l - The callback that will run 

*android.widget.TabHost.setup()*

public void setup()

Call setup() before adding tabs if loading TabHost using findViewById(). 
However: You do not need to call setup() after getTabHost() in 
TabActivity(|android.app.TabActivity|) . Example: 

mTabHost = (TabHost)findViewById(R.id.tabhost); mTabHost.setup(); 
mTabHost.addTab(TAB_TAG_1, "Hello, world!", "Tab 1"); 



*android.widget.TabHost.setup(LocalActivityManager)*

public void setup(android.app.LocalActivityManager activityGroup)

If you are using (|android.widget.TabHost.TabSpec|) , this must be called since 
the activityGroup is needed to launch the local activity. 

This is done for you if you extend (|android.app.TabActivity|) . 


    activityGroup - Used to launch activities for tab content. 


