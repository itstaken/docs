*android.widget.QuickContactBadge* *QuickContactBadge* Widget used to show an im

public class QuickContactBadge
  extends    |android.widget.ImageView|
  implements |android.view.View.OnClickListener|

|android.widget.QuickContactBadge_Description|
|android.widget.QuickContactBadge_Fields|
|android.widget.QuickContactBadge_Constructors|
|android.widget.QuickContactBadge_Methods|

================================================================================

*android.widget.QuickContactBadge_Fields*
|java.lang.String[]_android.widget.QuickContactBadge.mExcludeMimes|

*android.widget.QuickContactBadge_Constructors*
|android.widget.QuickContactBadge(Context)|
|android.widget.QuickContactBadge(Context,AttributeSet)|
|android.widget.QuickContactBadge(Context,AttributeSet,int)|

*android.widget.QuickContactBadge_Methods*
|android.widget.QuickContactBadge.assignContactFromEmail(String,boolean)|Assign
|android.widget.QuickContactBadge.assignContactFromEmail(String,boolean,Bundle)|
|android.widget.QuickContactBadge.assignContactFromPhone(String,boolean)|Assign
|android.widget.QuickContactBadge.assignContactFromPhone(String,boolean,Bundle)|
|android.widget.QuickContactBadge.assignContactUri(Uri)|Assign the contact uri 
|android.widget.QuickContactBadge.drawableStateChanged()|
|android.widget.QuickContactBadge.onClick(View)|
|android.widget.QuickContactBadge.onDraw(Canvas)|
|android.widget.QuickContactBadge.onInitializeAccessibilityEvent(AccessibilityEvent)|
|android.widget.QuickContactBadge.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)|
|android.widget.QuickContactBadge.setExcludeMimes(String[])|Set a list of speci
|android.widget.QuickContactBadge.setImageToDefault()|Resets the contact photo 
|android.widget.QuickContactBadge.setMode(int)|This call has no effect anymore,

*android.widget.QuickContactBadge_Description*

Widget used to show an image with the standard QuickContact badge and on-click 
behavior. 



*java.lang.String[]_android.widget.QuickContactBadge.mExcludeMimes*





*android.widget.QuickContactBadge(Context)*

public QuickContactBadge(android.content.Context context)




*android.widget.QuickContactBadge(Context,AttributeSet)*

public QuickContactBadge(
  android.content.Context context,
  android.util.AttributeSet attrs)




*android.widget.QuickContactBadge(Context,AttributeSet,int)*

public QuickContactBadge(
  android.content.Context context,
  android.util.AttributeSet attrs,
  int defStyle)




*android.widget.QuickContactBadge.assignContactFromEmail(String,boolean)*

public void assignContactFromEmail(
  java.lang.String emailAddress,
  boolean lazyLookup)

Assign a contact based on an email address. This should only be used when the 
contact's URI is not available, as an extra query will have to be performed to 
lookup the URI based on the email. 


    emailAddress - The email address of the contact. 
    lazyLookup - If this is true, the lookup query will not be performed until this view is 
       clicked. 

*android.widget.QuickContactBadge.assignContactFromEmail(String,boolean,Bundle)*

public void assignContactFromEmail(
  java.lang.String emailAddress,
  boolean lazyLookup,
  android.os.Bundle extras)

Assign a contact based on an email address. This should only be used when the 
contact's URI is not available, as an extra query will have to be performed to 
lookup the URI based on the email. 


    emailAddress - The email address of the contact. 
    lazyLookup - If this is true, the lookup query will not be performed until this view is 
       clicked. 
    extras - A bundle of extras to populate the contact edit page with if the contact is not 
       found and the user chooses to add the email address to an existing 
       contact or create a new contact. Uses the same string constants as those 
       found in {@link android.provider.ContactsContract.Intents.Insert} 

*android.widget.QuickContactBadge.assignContactFromPhone(String,boolean)*

public void assignContactFromPhone(
  java.lang.String phoneNumber,
  boolean lazyLookup)

Assign a contact based on a phone number. This should only be used when the 
contact's URI is not available, as an extra query will have to be performed to 
lookup the URI based on the phone number. 


    phoneNumber - The phone number of the contact. 
    lazyLookup - If this is true, the lookup query will not be performed until this view is 
       clicked. 

*android.widget.QuickContactBadge.assignContactFromPhone(String,boolean,Bundle)*

public void assignContactFromPhone(
  java.lang.String phoneNumber,
  boolean lazyLookup,
  android.os.Bundle extras)

Assign a contact based on a phone number. This should only be used when the 
contact's URI is not available, as an extra query will have to be performed to 
lookup the URI based on the phone number. 


    phoneNumber - The phone number of the contact. 
    lazyLookup - If this is true, the lookup query will not be performed until this view is 
       clicked. 
    extras - A bundle of extras to populate the contact edit page with if the contact is not 
       found and the user chooses to add the phone number to an existing 
       contact or create a new contact. Uses the same string constants as those 
       found in {@link android.provider.ContactsContract.Intents.Insert} 

*android.widget.QuickContactBadge.assignContactUri(Uri)*

public void assignContactUri(android.net.Uri contactUri)

Assign the contact uri that this QuickContactBadge should be associated with. 
Note that this is only used for displaying the QuickContact window and won't 
bind the contact's photo for you. Call (|android.widget.QuickContactBadge|) to 
set the photo. 


    contactUri - Either a {@link Contacts#CONTENT_URI} or {@link Contacts#CONTENT_LOOKUP_URI} 
       style URI. 

*android.widget.QuickContactBadge.drawableStateChanged()*

protected void drawableStateChanged()





*android.widget.QuickContactBadge.onClick(View)*

public void onClick(android.view.View v)





*android.widget.QuickContactBadge.onDraw(Canvas)*

protected void onDraw(Canvas canvas)





*android.widget.QuickContactBadge.onInitializeAccessibilityEvent(AccessibilityEvent)*

public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent event)





*android.widget.QuickContactBadge.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)*

public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo info)





*android.widget.QuickContactBadge.setExcludeMimes(String[])*

public void setExcludeMimes(java.lang.String[] excludeMimes)

Set a list of specific MIME-types to exclude and not display. For example, this 
can be used to hide the (|android.provider.ContactsContract.Contacts|) profile 
icon. 



*android.widget.QuickContactBadge.setImageToDefault()*

public void setImageToDefault()

Resets the contact photo to the default state. 



*android.widget.QuickContactBadge.setMode(int)*

public void setMode(int size)

This call has no effect anymore, as there is only one QuickContact mode 




