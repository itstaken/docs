*android.hardware.camera2.CaptureRequest* *CaptureRequest* An immutable package 

public final class CaptureRequest
  extends    |android.hardware.camera2.CameraMetadata|
  implements |android.os.Parcelable|

|android.hardware.camera2.CaptureRequest_Description|
|android.hardware.camera2.CaptureRequest_Fields|
|android.hardware.camera2.CaptureRequest_Constructors|
|android.hardware.camera2.CaptureRequest_Methods|

================================================================================

*android.hardware.camera2.CaptureRequest_Fields*
|android.hardware.camera2.CameraMetadata.Key<java.lang.Boolean>_android.hardware.camera2.CaptureRequest.BLACK_LEVEL_LOCK|
|android.hardware.camera2.CameraMetadata.Key<float[]>_android.hardware.camera2.CaptureRequest.COLOR_CORRECTION_GAINS|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.COLOR_CORRECTION_MODE|
|android.hardware.camera2.CameraMetadata.Key<android.hardware.camera2.Rational[]>_android.hardware.camera2.CaptureRequest.COLOR_CORRECTION_TRANSFORM|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.CONTROL_AE_ANTIBANDING_MODE|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.CONTROL_AE_EXPOSURE_COMPENSATION|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Boolean>_android.hardware.camera2.CaptureRequest.CONTROL_AE_LOCK|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.CONTROL_AE_MODE|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.CONTROL_AE_PRECAPTURE_TRIGGER|
|android.hardware.camera2.CameraMetadata.Key<int[]>_android.hardware.camera2.CaptureRequest.CONTROL_AE_REGIONS|
|android.hardware.camera2.CameraMetadata.Key<int[]>_android.hardware.camera2.CaptureRequest.CONTROL_AE_TARGET_FPS_RANGE|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.CONTROL_AF_MODE|
|android.hardware.camera2.CameraMetadata.Key<int[]>_android.hardware.camera2.CaptureRequest.CONTROL_AF_REGIONS|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.CONTROL_AF_TRIGGER|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Boolean>_android.hardware.camera2.CaptureRequest.CONTROL_AWB_LOCK|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.CONTROL_AWB_MODE|
|android.hardware.camera2.CameraMetadata.Key<int[]>_android.hardware.camera2.CaptureRequest.CONTROL_AWB_REGIONS|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.CONTROL_CAPTURE_INTENT|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.CONTROL_EFFECT_MODE|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.CONTROL_MODE|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.CONTROL_SCENE_MODE|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Boolean>_android.hardware.camera2.CaptureRequest.CONTROL_VIDEO_STABILIZATION_MODE|
|android.os.Parcelable.Creator<android.hardware.camera2.CaptureRequest>_android.hardware.camera2.CaptureRequest.CREATOR|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.EDGE_MODE|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.FLASH_MODE|
|android.hardware.camera2.CameraMetadata.Key<double[]>_android.hardware.camera2.CaptureRequest.JPEG_GPS_COORDINATES|
|android.hardware.camera2.CameraMetadata.Key<java.lang.String>_android.hardware.camera2.CaptureRequest.JPEG_GPS_PROCESSING_METHOD|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Long>_android.hardware.camera2.CaptureRequest.JPEG_GPS_TIMESTAMP|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.JPEG_ORIENTATION|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Byte>_android.hardware.camera2.CaptureRequest.JPEG_QUALITY|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Byte>_android.hardware.camera2.CaptureRequest.JPEG_THUMBNAIL_QUALITY|
|android.hardware.camera2.CameraMetadata.Key<android.hardware.camera2.Size>_android.hardware.camera2.CaptureRequest.JPEG_THUMBNAIL_SIZE|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Boolean>_android.hardware.camera2.CaptureRequest.LED_TRANSMIT|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Float>_android.hardware.camera2.CaptureRequest.LENS_APERTURE|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Float>_android.hardware.camera2.CaptureRequest.LENS_FILTER_DENSITY|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Float>_android.hardware.camera2.CaptureRequest.LENS_FOCAL_LENGTH|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Float>_android.hardware.camera2.CaptureRequest.LENS_FOCUS_DISTANCE|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.LENS_OPTICAL_STABILIZATION_MODE|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.NOISE_REDUCTION_MODE|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.REQUEST_ID|
|android.hardware.camera2.CameraMetadata.Key<android.graphics.Rect>_android.hardware.camera2.CaptureRequest.SCALER_CROP_REGION|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Long>_android.hardware.camera2.CaptureRequest.SENSOR_EXPOSURE_TIME|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Long>_android.hardware.camera2.CaptureRequest.SENSOR_FRAME_DURATION|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.SENSOR_SENSITIVITY|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.STATISTICS_FACE_DETECT_MODE|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.STATISTICS_LENS_SHADING_MAP_MODE|
|android.hardware.camera2.CameraMetadata.Key<float[]>_android.hardware.camera2.CaptureRequest.TONEMAP_CURVE_BLUE|
|android.hardware.camera2.CameraMetadata.Key<float[]>_android.hardware.camera2.CaptureRequest.TONEMAP_CURVE_GREEN|
|android.hardware.camera2.CameraMetadata.Key<float[]>_android.hardware.camera2.CaptureRequest.TONEMAP_CURVE_RED|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.TONEMAP_MODE|

*android.hardware.camera2.CaptureRequest_Methods*
|android.hardware.camera2.CaptureRequest.describeContents()|
|android.hardware.camera2.CaptureRequest.equals(Object)|Determine whether this 
|android.hardware.camera2.CaptureRequest.get(CameraMetadata.Key<T>)|
|android.hardware.camera2.CaptureRequest.getTag()|Retrieve the tag for this req
|android.hardware.camera2.CaptureRequest.hashCode()|
|android.hardware.camera2.CaptureRequest.readFromParcel(Parcel)|Expand this obj
|android.hardware.camera2.CaptureRequest.writeToParcel(Parcel,int)|

*android.hardware.camera2.CaptureRequest_Description*

An immutable package of settings and outputs needed to capture a single image 
from the camera device. 

Contains the configuration for the capture hardware (sensor, lens, flash), the 
processing pipeline, the control algorithms, and the output buffers. Also 
contains the list of target Surfaces to send image data to for this capture. 

CaptureRequests can be created by using a 
(|android.hardware.camera2.CaptureRequest.Builder|) instance, obtained by 
calling (|android.hardware.camera2.CameraDevice|) 

CaptureRequests are given to (|android.hardware.camera2.CameraDevice|) or 
(|android.hardware.camera2.CameraDevice|) to capture images from a camera. 

Each request can specify a different subset of target Surfaces for the camera 
to send the captured data to. All the surfaces used in a request must be part 
of the surface list given to the last call to 
(|android.hardware.camera2.CameraDevice|) , when the request is submitted to 
the camera device. 

For example, a request meant for repeating preview might only include the 
Surface for the preview SurfaceView or SurfaceTexture, while a high-resolution 
still capture would also include a Surface from a ImageReader configured for 
high-resolution JPEG images. 



*android.hardware.camera2.CameraMetadata.Key<java.lang.Boolean>_android.hardware.camera2.CaptureRequest.BLACK_LEVEL_LOCK*

Whether black-level compensation is locked to its current values, or is free to 
vary 

When set to ON, the values used for black-level compensation must not change 
until the lock is set to OFF 

Since changes to certain capture parameters (such as exposure time) may require 
resetting of black level compensation, the HAL must report whether setting the 
black level lock was successful in the output result metadata. 

The black level locking must happen at the sensor, and not at the ISP. If for 
some reason black level locking is no longer legal (for example, the analog 
gain has changed, which forces black levels to be recalculated), then the HAL 
is free to override this request (and it must report 'OFF' when this does 
happen) until the next time locking is legal again. 


*android.hardware.camera2.CameraMetadata.Key<float[]>_android.hardware.camera2.CaptureRequest.COLOR_CORRECTION_GAINS*

Gains applying to Bayer color channels for white-balance 

The 4-channel white-balance gains are defined in the order of [R G_even G_odd 
B], where G_even is the gain for green pixels on even rows of the output, and 
G_odd is the gain for greenpixels on the odd rows. if a HAL does not support a 
separate gain for even/odd green channels, it should use the G_even value,and 
write G_odd equal to G_even in the output result metadata. 

This array is either set by HAL when the request android.colorCorrection.mode 
is not TRANSFORM_MATRIX, or directly by the application in the request when the 
android.colorCorrection.mode is TRANSFORM_MATRIX. 

The ouput should be the gains actually applied by the HAL to the current frame. 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.COLOR_CORRECTION_MODE*

When android.control.awbMode is not OFF, TRANSFORM_MATRIX should be ignored. 


*android.hardware.camera2.CameraMetadata.Key<android.hardware.camera2.Rational[]>_android.hardware.camera2.CaptureRequest.COLOR_CORRECTION_TRANSFORM*

A color transform matrix to use to transform from sensor RGB color space to 
output linear sRGB color space 

This matrix is either set by HAL when the request android.colorCorrection.mode 
is not TRANSFORM_MATRIX, or directly by the application in the request when the 
android.colorCorrection.mode is TRANSFORM_MATRIX. 

In the latter case, the HAL may round the matrix to account for precision 
issues; the final rounded matrix should be reported back in this matrix result 
metadata. 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.CONTROL_AE_ANTIBANDING_MODE*

Enum for controlling antibanding 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.CONTROL_AE_EXPOSURE_COMPENSATION*

Adjustment to AE target image brightness 

For example, if EV step is 0.333, '6' will mean an exposure compensation of +2 
EV; -3 will mean an exposure compensation of -1 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Boolean>_android.hardware.camera2.CaptureRequest.CONTROL_AE_LOCK*

Whether AE is currently locked to its latest calculated values 

Note that even when AE is locked, the flash may be fired if the AE mode is 
ON_AUTO_FLASH / ON_ALWAYS_FLASH / ON_AUTO_FLASH_REDEYE. 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.CONTROL_AE_MODE*

Whether AE is currently updating the sensor exposure and sensitivity fields 

Only effective if android.control.mode = AUTO 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.CONTROL_AE_PRECAPTURE_TRIGGER*

Whether the HAL must trigger precapture metering. 

This entry is normally set to IDLE, or is not included at all in the request 
settings. When included and set to START, the HAL must trigger the autoexposure 
precapture metering sequence. 

The effect of AE precapture trigger depends on the current AE mode and state; 
see the camera HAL device v3 header for details. 


*android.hardware.camera2.CameraMetadata.Key<int[]>_android.hardware.camera2.CaptureRequest.CONTROL_AE_REGIONS*

List of areas to use for metering 

Each area is a rectangle plus weight: xmin, ymin, xmax, ymax, weight. The 
rectangle is defined inclusive of the specified coordinates. 

The coordinate system is based on the active pixel array, with (0,0) being the 
top-left pixel in the active pixel array, and 
(android.sensor.info.activeArraySize.width - 1, 
android.sensor.info.activeArraySize.height - 1) being the bottom-right pixel in 
the active pixel array. The weight should be nonnegative. 

If all regions have 0 weight, then no specific metering area needs to be used 
by the HAL. If the metering region is outside the current 
android.scaler.cropRegion, the HAL should ignore the sections outside the 
region and output the used sections in the frame metadata 


*android.hardware.camera2.CameraMetadata.Key<int[]>_android.hardware.camera2.CaptureRequest.CONTROL_AE_TARGET_FPS_RANGE*

Range over which fps can be adjusted to maintain exposure 

Only constrains AE algorithm, not manual control of android.sensor.exposureTime 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.CONTROL_AF_MODE*

Whether AF is currently enabled, and what mode it is set to 


*android.hardware.camera2.CameraMetadata.Key<int[]>_android.hardware.camera2.CaptureRequest.CONTROL_AF_REGIONS*

List of areas to use for focus estimation 

Each area is a rectangle plus weight: xmin, ymin, xmax, ymax, weight. The 
rectangle is defined inclusive of the specified coordinates. 

The coordinate system is based on the active pixel array, with (0,0) being the 
top-left pixel in the active pixel array, and 
(android.sensor.info.activeArraySize.width - 1, 
android.sensor.info.activeArraySize.height - 1) being the bottom-right pixel in 
the active pixel array. The weight should be nonnegative. 

If all regions have 0 weight, then no specific focus area needs to be used by 
the HAL. If the focusing region is outside the current 
android.scaler.cropRegion, the HAL should ignore the sections outside the 
region and output the used sections in the frame metadata 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.CONTROL_AF_TRIGGER*

Whether the HAL must trigger autofocus. 

This entry is normally set to IDLE, or is not included at all in the request 
settings. 

When included and set to START, the HAL must trigger the autofocus algorithm. 
The effect of AF trigger depends on the current AF mode and state; see the 
camera HAL device v3 header for details. When set to CANCEL, the HAL must 
cancel any active trigger, and return to initial AF state. 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Boolean>_android.hardware.camera2.CaptureRequest.CONTROL_AWB_LOCK*

Whether AWB is currently locked to its latest calculated values 

Note that AWB lock is only meaningful for AUTO mode; in other modes, AWB is 
already fixed to a specific setting 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.CONTROL_AWB_MODE*

Whether AWB is currently setting the color transform fields, and what its 
illumination target is 

[BC - AWB lock,AWB modes] 


*android.hardware.camera2.CameraMetadata.Key<int[]>_android.hardware.camera2.CaptureRequest.CONTROL_AWB_REGIONS*

List of areas to use for illuminant estimation 

Only used in AUTO mode. 

Each area is a rectangle plus weight: xmin, ymin, xmax, ymax, weight. The 
rectangle is defined inclusive of the specified coordinates. 

The coordinate system is based on the active pixel array, with (0,0) being the 
top-left pixel in the active pixel array, and 
(android.sensor.info.activeArraySize.width - 1, 
android.sensor.info.activeArraySize.height - 1) being the bottom-right pixel in 
the active pixel array. The weight should be nonnegative. 

If all regions have 0 weight, then no specific metering area needs to be used 
by the HAL. If the metering region is outside the current 
android.scaler.cropRegion, the HAL should ignore the sections outside the 
region and output the used sections in the frame metadata 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.CONTROL_CAPTURE_INTENT*

Information to 3A routines about the purpose of this capture, to help decide 
optimal 3A strategy 

Only used if android.control.mode != OFF. 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.CONTROL_EFFECT_MODE*

Whether any special color effect is in use. Only used if android.control.mode 
!= OFF 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.CONTROL_MODE*

Overall mode of 3A control routines 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.CONTROL_SCENE_MODE*

Which scene mode is active when android.control.mode = SCENE_MODE 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Boolean>_android.hardware.camera2.CaptureRequest.CONTROL_VIDEO_STABILIZATION_MODE*

Whether video stabilization is active 

If enabled, video stabilization can modify the android.scaler.cropRegion to 
keep the video stream stabilized 


*android.os.Parcelable.Creator<android.hardware.camera2.CaptureRequest>_android.hardware.camera2.CaptureRequest.CREATOR*




*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.EDGE_MODE*

Operation mode for edge enhancement 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.FLASH_MODE*

Select flash operation mode 


*android.hardware.camera2.CameraMetadata.Key<double[]>_android.hardware.camera2.CaptureRequest.JPEG_GPS_COORDINATES*

GPS coordinates to include in output JPEG EXIF 


*android.hardware.camera2.CameraMetadata.Key<java.lang.String>_android.hardware.camera2.CaptureRequest.JPEG_GPS_PROCESSING_METHOD*

32 characters describing GPS algorithm to include in EXIF 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Long>_android.hardware.camera2.CaptureRequest.JPEG_GPS_TIMESTAMP*

Time GPS fix was made to include in EXIF 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.JPEG_ORIENTATION*

Orientation of JPEG image to write 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Byte>_android.hardware.camera2.CaptureRequest.JPEG_QUALITY*

Compression quality of the final JPEG image 

85-95 is typical usage range 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Byte>_android.hardware.camera2.CaptureRequest.JPEG_THUMBNAIL_QUALITY*

Compression quality of JPEG thumbnail 


*android.hardware.camera2.CameraMetadata.Key<android.hardware.camera2.Size>_android.hardware.camera2.CaptureRequest.JPEG_THUMBNAIL_SIZE*

Resolution of embedded JPEG thumbnail 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Boolean>_android.hardware.camera2.CaptureRequest.LED_TRANSMIT*

This LED is nominally used to indicate to the user that the camera is powered 
on and may be streaming images back to the Application Processor. In certain 
rare circumstances, the OS may disable this when video is processed locally and 
not transmitted to any untrusted applications. 

In particular, the LED *must* always be on when the data could be transmitted 
off the device. The LED *should* always be on whenever data is stored locally 
on the device. 

The LED *may* be off if a trusted application is using the data that doesn't 
violate the above rules. 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Float>_android.hardware.camera2.CaptureRequest.LENS_APERTURE*

Size of the lens aperture 

Will not be supported on most devices. Can only pick from supported list 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Float>_android.hardware.camera2.CaptureRequest.LENS_FILTER_DENSITY*

State of lens neutral density filter(s) 

Will not be supported on most devices. Can only pick from supported list 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Float>_android.hardware.camera2.CaptureRequest.LENS_FOCAL_LENGTH*

Lens optical zoom setting 

Will not be supported on most devices. 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Float>_android.hardware.camera2.CaptureRequest.LENS_FOCUS_DISTANCE*

Distance to plane of sharpest focus, measured from frontmost surface of the 
lens 

0 = infinity focus. Used value should be clamped to (0,minimum focus distance) 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.LENS_OPTICAL_STABILIZATION_MODE*

Whether optical image stabilization is enabled. 

Will not be supported on most devices. 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.NOISE_REDUCTION_MODE*

Mode of operation for the noise reduction algorithm 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.REQUEST_ID*

An application-specified ID for the current request. Must be maintained 
unchanged in output frame 


*android.hardware.camera2.CameraMetadata.Key<android.graphics.Rect>_android.hardware.camera2.CaptureRequest.SCALER_CROP_REGION*

(x, y, width, height). 

A rectangle with the top-level corner of (x,y) and size (width, height). The 
region of the sensor that is used for output. Each stream must use this 
rectangle to produce its output, cropping to a smaller region if necessary to 
maintain the stream's aspect ratio. 

HAL2.x uses only (x, y, width) 

Any additional per-stream cropping must be done to maximize the final pixel 
area of the stream. 

For example, if the crop region is set to a 4:3 aspect ratio, then 4:3 streams 
should use the exact crop region. 16:9 streams should further crop vertically 
(letterbox). 

Conversely, if the crop region is set to a 16:9, then 4:3 outputs should crop 
horizontally (pillarbox), and 16:9 streams should match exactly. These 
additional crops must be centered within the crop region. 

The output streams must maintain square pixels at all times, no matter what the 
relative aspect ratios of the crop region and the stream are. Negative values 
for corner are allowed for raw output if full pixel array is larger than active 
pixel array. Width and height may be rounded to nearest larger supportable 
width, especially for raw output, where only a few fixed scales may be 
possible. The width and height of the crop region cannot be set to be smaller 
than floor( activeArraySize.width / android.scaler.maxDigitalZoom ) and floor( 
activeArraySize.height / android.scaler.maxDigitalZoom), respectively. 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Long>_android.hardware.camera2.CaptureRequest.SENSOR_EXPOSURE_TIME*

Duration each pixel is exposed to light. 

If the sensor can't expose this exact duration, it should shorten the duration 
exposed to the nearest possible value (rather than expose longer). 

1/10000 - 30 sec range. No bulb mode 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Long>_android.hardware.camera2.CaptureRequest.SENSOR_FRAME_DURATION*

Duration from start of frame exposure to start of next frame exposure 

Exposure time has priority, so duration is set to max(duration, exposure time + 
overhead) 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.SENSOR_SENSITIVITY*

Gain applied to image data. Must be implemented through analog gain only if set 
to values below 'maximum analog sensitivity'. 

If the sensor can't apply this exact gain, it should lessen the gain to the 
nearest possible value (rather than gain more). 

ISO 12232:2006 REI method 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.STATISTICS_FACE_DETECT_MODE*

State of the face detector unit 

Whether face detection is enabled, and whether it should output just the basic 
fields or the full set of fields. Value must be one of the 
android.statistics.info.availableFaceDetectModes. 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.STATISTICS_LENS_SHADING_MAP_MODE*

Whether the HAL needs to output the lens shading map in output result metadata 

When set to ON, android.statistics.lensShadingMap must be provided in the 
output result metdata. 


*android.hardware.camera2.CameraMetadata.Key<float[]>_android.hardware.camera2.CaptureRequest.TONEMAP_CURVE_BLUE*

Table mapping blue input values to output values 

Tonemapping / contrast / gamma curve for the blue channel, to use when 
android.tonemap.mode is CONTRAST_CURVE. 

See android.tonemap.curveRed for more details. 


*android.hardware.camera2.CameraMetadata.Key<float[]>_android.hardware.camera2.CaptureRequest.TONEMAP_CURVE_GREEN*

Table mapping green input values to output values 

Tonemapping / contrast / gamma curve for the green channel, to use when 
android.tonemap.mode is CONTRAST_CURVE. 

See android.tonemap.curveRed for more details. 


*android.hardware.camera2.CameraMetadata.Key<float[]>_android.hardware.camera2.CaptureRequest.TONEMAP_CURVE_RED*

Table mapping red input values to output values 

Tonemapping / contrast / gamma curve for the red channel, to use when 
android.tonemap.mode is CONTRAST_CURVE. 

Since the input and output ranges may vary depending on the camera pipeline, 
the input and output pixel values are represented by normalized floating-point 
values between 0 and 1, with 0 == black and 1 == white. 

The curve should be linearly interpolated between the defined points. The 
points will be listed in increasing order of P_IN. For example, if the array 
is: [0.0, 0.0, 0.3, 0.5, 1.0, 1.0], then the input->output mapping for a few 
sample points would be: 0 -> 0, 0.15 -> 0.25, 0.3 -> 0.5, 0.5 -> 0.64 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureRequest.TONEMAP_MODE*





*android.hardware.camera2.CaptureRequest.describeContents()*

public int describeContents()





*android.hardware.camera2.CaptureRequest.equals(Object)*

public boolean equals(java.lang.Object other)

Determine whether this CaptureRequest is equal to another CaptureRequest. 

A request is considered equal to another is if it's set of key/values is equal, 
it's list of output surfaces is equal, and the user tag is equal. 


    other - Another instance of CaptureRequest. 

    Returns: True if the requests are the same, false otherwise. 

*android.hardware.camera2.CaptureRequest.get(CameraMetadata.Key<T>)*

public |T| get(android.hardware.camera2.CameraMetadata.Key<T> key)





*android.hardware.camera2.CaptureRequest.getTag()*

public |java.lang.Object| getTag()

Retrieve the tag for this request, if any. 

This tag is not used for anything by the camera device, but can be used by an 
application to easily identify a CaptureRequest when it is returned by 
CaptureListener.onCaptureCompleted(|android.hardware.camera2.CameraDevice.CaptureListener|)




    Returns: the last tag Object set on this request, or {@code null} if no tag has been 
             set. 

*android.hardware.camera2.CaptureRequest.hashCode()*

public int hashCode()





*android.hardware.camera2.CaptureRequest.readFromParcel(Parcel)*

public void readFromParcel(android.os.Parcel in)

Expand this object from a Parcel. Hidden since this breaks the immutability of 
CaptureRequest, but is needed to receive CaptureRequests with aidl. 


    in - The parcel from which the object should be read 

*android.hardware.camera2.CaptureRequest.writeToParcel(Parcel,int)*

public void writeToParcel(
  android.os.Parcel dest,
  int flags)






