*android.view.Window* *Window* Abstract base class for a top-level window look a

public abstract class Window
  extends    |java.lang.Object|

|android.view.Window_Description|
|android.view.Window_Fields|
|android.view.Window_Constructors|
|android.view.Window_Methods|

================================================================================

*android.view.Window_Fields*
|int_android.view.Window.DEFAULT_FEATURES|
|int_android.view.Window.FEATURE_ACTION_BAR|
|int_android.view.Window.FEATURE_ACTION_BAR_OVERLAY|
|int_android.view.Window.FEATURE_ACTION_MODE_OVERLAY|
|int_android.view.Window.FEATURE_CONTEXT_MENU|
|int_android.view.Window.FEATURE_CUSTOM_TITLE|
|int_android.view.Window.FEATURE_INDETERMINATE_PROGRESS|
|int_android.view.Window.FEATURE_LEFT_ICON|
|int_android.view.Window.FEATURE_MAX|
|int_android.view.Window.FEATURE_NO_TITLE|
|int_android.view.Window.FEATURE_OPTIONS_PANEL|
|int_android.view.Window.FEATURE_PROGRESS|
|int_android.view.Window.FEATURE_RIGHT_ICON|
|int_android.view.Window.ID_ANDROID_CONTENT|
|int_android.view.Window.PROGRESS_END|
|int_android.view.Window.PROGRESS_INDETERMINATE_OFF|
|int_android.view.Window.PROGRESS_INDETERMINATE_ON|
|int_android.view.Window.PROGRESS_SECONDARY_END|
|int_android.view.Window.PROGRESS_SECONDARY_START|
|int_android.view.Window.PROGRESS_START|
|int_android.view.Window.PROGRESS_VISIBILITY_OFF|
|int_android.view.Window.PROGRESS_VISIBILITY_ON|

*android.view.Window_Constructors*
|android.view.Window(Context)|

*android.view.Window_Methods*
|android.view.Window.addContentView(View,ViewGroup.LayoutParams)|Variation on#s
|android.view.Window.addFlags(int)|Convenience function to set the flag bits as
|android.view.Window.addPrivateFlags(int)|
|android.view.Window.alwaysReadCloseOnTouchAttr()|
|android.view.Window.clearFlags(int)|Convenience function to clear the flag bit
|android.view.Window.closeAllPanels()|
|android.view.Window.closePanel(int)|
|android.view.Window.destroy()|
|android.view.Window.findViewById(int)|Finds a view that was identified by the 
|android.view.Window.getAttributes()|Retrieve the current window attributes ass
|android.view.Window.getCallback()|Return the current Callback interface for th
|android.view.Window.getContainer()|Return the container for this Window.
|android.view.Window.getContext()|Return the Context this window policy is runn
|android.view.Window.getCurrentFocus()|Return the view in this Window that curr
|android.view.Window.getDecorView()|Retrieve the top-level window decor view (c
|android.view.Window.getFeatures()|Return the feature bits that are enabled.
|android.view.Window.getForcedWindowFlags()|Return the window flags that have b
|android.view.Window.getLayoutInflater()|Quick access to theLayoutInflaterinsta
|android.view.Window.getLocalFeatures()|Return the feature bits that are being 
|android.view.Window.getVolumeControlStream()|
|android.view.Window.getWindowManager()|Return the window manager allowing this
|android.view.Window.getWindowStyle()|Return theandroid.R.styleable#Windowattri
|android.view.Window.hasChildren()|
|android.view.Window.hasFeature(int)|Query for the availability of a certain fe
|android.view.Window.hasSoftInputMode()|Has the app specified their own soft in
|android.view.Window.haveDimAmount()|
|android.view.Window.injectInputEvent(InputEvent)|Inject an event to window loc
|android.view.Window.invalidatePanelMenu(int)|
|android.view.Window.isActive()|
|android.view.Window.isDestroyed()|
|android.view.Window.isFloating()|Return whether this window is being displayed
|android.view.Window.isShortcutKey(int,KeyEvent)|Is a keypress one of the defin
|android.view.Window.makeActive()|
|android.view.Window.onActive()|
|android.view.Window.onConfigurationChanged(Configuration)|Should be called whe
|android.view.Window.openPanel(int,KeyEvent)|
|android.view.Window.peekDecorView()|Retrieve the current decor view, but only 
|android.view.Window.performContextMenuIdentifierAction(int,int)|
|android.view.Window.performPanelIdentifierAction(int,int,int)|
|android.view.Window.performPanelShortcut(int,int,KeyEvent,int)|
|android.view.Window.removeFeature(int)|
|android.view.Window.requestFeature(int)|Enable extended screen features.
|android.view.Window.restoreHierarchyState(Bundle)|
|android.view.Window.saveHierarchyState()|
|android.view.Window.setAttributes(WindowManager.LayoutParams)|Specify custom w
|android.view.Window.setBackgroundDrawable(Drawable)|Change the background of t
|android.view.Window.setBackgroundDrawableResource(int)|Change the background o
|android.view.Window.setCallback(Window.Callback)|Set the Callback interface fo
|android.view.Window.setChildDrawable(int,Drawable)|
|android.view.Window.setChildInt(int,int)|
|android.view.Window.setCloseOnTouchOutside(boolean)|
|android.view.Window.setCloseOnTouchOutsideIfNotSet(boolean)|
|android.view.Window.setContainer(Window)|Set the container for this window.
|android.view.Window.setContentView(int)|Convenience for#setContentView(View, a
|android.view.Window.setContentView(View)|Convenience for#setContentView(View, 
|android.view.Window.setContentView(View,ViewGroup.LayoutParams)|Set the screen
|android.view.Window.setDefaultIcon(int)|Set the default icon for this window.
|android.view.Window.setDefaultLogo(int)|Set the default logo for this window.
|android.view.Window.setDefaultWindowFormat(int)|Set the default format of wind
|android.view.Window.setDimAmount(float)|Set the amount of dim behind the windo
|android.view.Window.setFeatureDrawable(int,Drawable)|Set an explicit Drawable 
|android.view.Window.setFeatureDrawableAlpha(int,int)|Set a custom alpha value 
|android.view.Window.setFeatureDrawableResource(int,int)|Set the value for a dr
|android.view.Window.setFeatureDrawableUri(int,Uri)|Set the value for a drawabl
|android.view.Window.setFeatureInt(int,int)|Set the integer value for a feature
|android.view.Window.setFlags(int,int)|Set the flags of the window, as per theW
|android.view.Window.setFormat(int)|Set the format of window, as per the PixelF
|android.view.Window.setGravity(int)|Set the gravity of the window, as per the 
|android.view.Window.setIcon(int)|Set the primary icon for this window.
|android.view.Window.setLayout(int,int)|Set the width and height layout paramet
|android.view.Window.setLocalFocus(boolean,boolean)|Set focus locally.
|android.view.Window.setLogo(int)|Set the logo for this window.
|android.view.Window.setSoftInputMode(int)|Specify an explicit soft input mode 
|android.view.Window.setTitle(CharSequence)|
|android.view.Window.setTitleColor(int)|
|android.view.Window.setType(int)|Set the type of the window, as per the Window
|android.view.Window.setUiOptions(int)|Set extra options that will influence th
|android.view.Window.setUiOptions(int,int)|Set extra options that will influenc
|android.view.Window.setVolumeControlStream(int)|
|android.view.Window.setWindowAnimations(int)|Specify custom animations to use 
|android.view.Window.setWindowManager(WindowManager,IBinder,String)|Set the win
|android.view.Window.setWindowManager(WindowManager,IBinder,String,boolean)|Set
|android.view.Window.shouldCloseOnTouch(Context,MotionEvent)|
|android.view.Window.superDispatchGenericMotionEvent(MotionEvent)|Used by custo
|android.view.Window.superDispatchKeyEvent(KeyEvent)|Used by custom windows, su
|android.view.Window.superDispatchKeyShortcutEvent(KeyEvent)|Used by custom win
|android.view.Window.superDispatchTouchEvent(MotionEvent)|Used by custom window
|android.view.Window.superDispatchTrackballEvent(MotionEvent)|Used by custom wi
|android.view.Window.takeInputQueue(InputQueue.Callback)|Take ownership of this
|android.view.Window.takeKeyEvents(boolean)|Request that key events come to thi
|android.view.Window.takeSurface(SurfaceHolder.Callback2)|Take ownership of thi
|android.view.Window.togglePanel(int,KeyEvent)|

*android.view.Window_Description*

Abstract base class for a top-level window look and behavior policy. An 
instance of this class should be used as the top-level view added to the window 
manager. It provides standard UI policies such as a background, title area, 
default key processing, etc. 

The only existing implementation of this abstract class is 
android.policy.PhoneWindow, which you should instantiate when needing a Window. 
Eventually that class will be refactored and a factory method added for 
creating Window instances without knowing about a particular implementation. 



*int_android.view.Window.DEFAULT_FEATURES*

The default features enabled 


*int_android.view.Window.FEATURE_ACTION_BAR*

Flag for enabling the Action Bar. This is enabled by default for some devices. 
The Action Bar replaces the title bar and provides an alternate location for an 
on-screen menu button on some devices. 


*int_android.view.Window.FEATURE_ACTION_BAR_OVERLAY*

Flag for requesting an Action Bar that overlays window content. Normally an 
Action Bar will sit in the space above window content, but if this feature is 
requested along with (|android.view.Window|) it will be layered over the window 
content itself. This is useful if you would like your app to have more control 
over how the Action Bar is displayed, such as letting application content 
scroll beneath an Action Bar with a transparent background or otherwise 
displaying a transparent/translucent Action Bar over application content. 

This mode is especially useful with 
View.SYSTEM_UI_FLAG_FULLSCREEN(|android.view.View|) , which allows you to 
seamlessly hide the action bar in conjunction with other screen decorations. 

As of (|android.os.Build.VERSION_CODES|) , when an ActionBar is in this mode it 
will adjust the insets provided to 
View.fitSystemWindows(Rect)(|android.view.View|) to include the content covered 
by the action bar, so you can do layout within that space. 


*int_android.view.Window.FEATURE_ACTION_MODE_OVERLAY*

Flag for specifying the behavior of action modes when an Action Bar is not 
present. If overlay is enabled, the action mode UI will be allowed to cover 
existing window content. 


*int_android.view.Window.FEATURE_CONTEXT_MENU*

Flag for the context menu. This is enabled by default. 


*int_android.view.Window.FEATURE_CUSTOM_TITLE*

Flag for custom title. You cannot combine this feature with other title 
features. 


*int_android.view.Window.FEATURE_INDETERMINATE_PROGRESS*

Flag for indeterminate progress 


*int_android.view.Window.FEATURE_LEFT_ICON*

Flag for having an icon on the left side of the title bar 


*int_android.view.Window.FEATURE_MAX*

Max value used as a feature ID 


*int_android.view.Window.FEATURE_NO_TITLE*

Flag for the "no title" feature, turning off the title at the top of the 
screen. 


*int_android.view.Window.FEATURE_OPTIONS_PANEL*

Flag for the "options panel" feature. This is enabled by default. 


*int_android.view.Window.FEATURE_PROGRESS*

Flag for the progress indicator feature 


*int_android.view.Window.FEATURE_RIGHT_ICON*

Flag for having an icon on the right side of the title bar 


*int_android.view.Window.ID_ANDROID_CONTENT*

The ID that the main layout in the XML layout file should have. 


*int_android.view.Window.PROGRESS_END*

Ending value for the (primary) progress 


*int_android.view.Window.PROGRESS_INDETERMINATE_OFF*

Flag for setting the progress bar's indeterminate mode off 


*int_android.view.Window.PROGRESS_INDETERMINATE_ON*

Flag for setting the progress bar's indeterminate mode on 


*int_android.view.Window.PROGRESS_SECONDARY_END*

Highest possible value for the secondary progress 


*int_android.view.Window.PROGRESS_SECONDARY_START*

Lowest possible value for the secondary progress 


*int_android.view.Window.PROGRESS_START*

Starting value for the (primary) progress 


*int_android.view.Window.PROGRESS_VISIBILITY_OFF*

Flag for setting the progress bar's visibility to GONE 


*int_android.view.Window.PROGRESS_VISIBILITY_ON*

Flag for setting the progress bar's visibility to VISIBLE 



*android.view.Window(Context)*

public Window(android.content.Context context)




*android.view.Window.addContentView(View,ViewGroup.LayoutParams)*

public abstract void addContentView(
  android.view.View view,
  android.view.ViewGroup.LayoutParams params)

Variation on (|android.view.Window|) to add an additional content view to the 
screen. Added after any existing ones in the screen -- existing views are NOT 
removed. 


    view - The desired content to display. 
    params - Layout parameters for the view. 

*android.view.Window.addFlags(int)*

public void addFlags(int flags)

Convenience function to set the flag bits as specified in flags, as per 
(|android.view.Window|) . 


    flags - The flag bits to be set. 

*android.view.Window.addPrivateFlags(int)*

public void addPrivateFlags(int flags)





*android.view.Window.alwaysReadCloseOnTouchAttr()*

public abstract void alwaysReadCloseOnTouchAttr()





*android.view.Window.clearFlags(int)*

public void clearFlags(int flags)

Convenience function to clear the flag bits as specified in flags, as per 
(|android.view.Window|) . 


    flags - The flag bits to be cleared. 

*android.view.Window.closeAllPanels()*

public abstract void closeAllPanels()





*android.view.Window.closePanel(int)*

public abstract void closePanel(int featureId)





*android.view.Window.destroy()*

public final void destroy()





*android.view.Window.findViewById(int)*

public |android.view.View| findViewById(int id)

Finds a view that was identified by the id attribute from the XML that was 
processed in (|android.app.Activity|) . This will implicitly call 
(|android.view.Window|) for you, with all of the associated side-effects. 



    Returns: The view if found or null otherwise. 

*android.view.Window.getAttributes()*

public final |android.view.WindowManager.LayoutParams| getAttributes()

Retrieve the current window attributes associated with this panel. 



    Returns: WindowManager.LayoutParams Either the existing window attributes object, or a 
             freshly created one if there is none. 

*android.view.Window.getCallback()*

public final |android.view.Window.Callback| getCallback()

Return the current Callback interface for this window. 



*android.view.Window.getContainer()*

public final |android.view.Window| getContainer()

Return the container for this Window. 



    Returns: Window The containing window, or null if this is a top-level window. 

*android.view.Window.getContext()*

public final |android.content.Context| getContext()

Return the Context this window policy is running in, for retrieving resources 
and other information. 



    Returns: Context The Context that was supplied to the constructor. 

*android.view.Window.getCurrentFocus()*

public abstract |android.view.View| getCurrentFocus()

Return the view in this Window that currently has focus, or null if there are 
none. Note that this does not look in any containing Window. 



    Returns: View The current View with focus or null. 

*android.view.Window.getDecorView()*

public abstract |android.view.View| getDecorView()

Retrieve the top-level window decor view (containing the standard window 
frame/decorations and the client's content inside of that), which can be added 
as a window to the window manager. 

Note that calling this function for the first time "locks in" various window 
characteristics as described in (|android.view.Window|) . 



    Returns: Returns the top-level window decor view. 

*android.view.Window.getFeatures()*

protected final int getFeatures()

Return the feature bits that are enabled. This is the set of features that were 
given to requestFeature(), and are being handled by this Window itself or its 
container. That is, it is the set of requested features that you can actually 
use. 

To do: add a public version of this API that allows you to check for features 
by their feature ID. 



    Returns: int The feature bits. 

*android.view.Window.getForcedWindowFlags()*

protected final int getForcedWindowFlags()

Return the window flags that have been explicitly set by the client, so will 
not be modified by (|android.view.Window|) . 



*android.view.Window.getLayoutInflater()*

public abstract |android.view.LayoutInflater| getLayoutInflater()

Quick access to the (|android.view.LayoutInflater|) instance that this Window 
retrieved from its Context. 



    Returns: LayoutInflater The shared LayoutInflater. 

*android.view.Window.getLocalFeatures()*

protected final int getLocalFeatures()

Return the feature bits that are being implemented by this Window. This is the 
set of features that were given to requestFeature(), and are being handled by 
only this Window itself, not by its containers. 



    Returns: int The feature bits. 

*android.view.Window.getVolumeControlStream()*

public abstract int getVolumeControlStream()





*android.view.Window.getWindowManager()*

public |android.view.WindowManager| getWindowManager()

Return the window manager allowing this Window to display its own windows. 



    Returns: WindowManager The ViewManager. 

*android.view.Window.getWindowStyle()*

public final |android.content.res.TypedArray| getWindowStyle()

Return the (|android.R.styleable|) attributes from this window's theme. 



*android.view.Window.hasChildren()*

public final boolean hasChildren()





*android.view.Window.hasFeature(int)*

public boolean hasFeature(int feature)

Query for the availability of a certain feature. 


    feature - The feature ID to check 

    Returns: true if the feature is enabled, false otherwise. 

*android.view.Window.hasSoftInputMode()*

protected final boolean hasSoftInputMode()

Has the app specified their own soft input mode? 



*android.view.Window.haveDimAmount()*

protected boolean haveDimAmount()





*android.view.Window.injectInputEvent(InputEvent)*

public void injectInputEvent(android.view.InputEvent event)

Inject an event to window locally. 


    event - A key or touch event to inject to this window. 

*android.view.Window.invalidatePanelMenu(int)*

public abstract void invalidatePanelMenu(int featureId)





*android.view.Window.isActive()*

public final boolean isActive()





*android.view.Window.isDestroyed()*

public final boolean isDestroyed()





*android.view.Window.isFloating()*

public abstract boolean isFloating()

Return whether this window is being displayed with a floating style (based on 
the (|android.R.attr|) attribute in the style/theme). 



    Returns: Returns true if the window is configured to be displayed floating on top of 
             whatever is behind it. 

*android.view.Window.isShortcutKey(int,KeyEvent)*

public abstract boolean isShortcutKey(
  int keyCode,
  android.view.KeyEvent event)

Is a keypress one of the defined shortcut keys for this window. 


    keyCode - the key code from {@link android.view.KeyEvent} to check. 
    event - the {@link android.view.KeyEvent} to use to help check. 

*android.view.Window.makeActive()*

public final void makeActive()





*android.view.Window.onActive()*

protected abstract void onActive()





*android.view.Window.onConfigurationChanged(Configuration)*

public abstract void onConfigurationChanged(android.content.res.Configuration newConfig)

Should be called when the configuration is changed. 


    newConfig - The new configuration. 

*android.view.Window.openPanel(int,KeyEvent)*

public abstract void openPanel(
  int featureId,
  android.view.KeyEvent event)





*android.view.Window.peekDecorView()*

public abstract |android.view.View| peekDecorView()

Retrieve the current decor view, but only if it has already been created; 
otherwise returns null. 



    Returns: Returns the top-level window decor or null. 

*android.view.Window.performContextMenuIdentifierAction(int,int)*

public abstract boolean performContextMenuIdentifierAction(
  int id,
  int flags)





*android.view.Window.performPanelIdentifierAction(int,int,int)*

public abstract boolean performPanelIdentifierAction(
  int featureId,
  int id,
  int flags)





*android.view.Window.performPanelShortcut(int,int,KeyEvent,int)*

public abstract boolean performPanelShortcut(
  int featureId,
  int keyCode,
  android.view.KeyEvent event,
  int flags)





*android.view.Window.removeFeature(int)*

protected void removeFeature(int featureId)





*android.view.Window.requestFeature(int)*

public boolean requestFeature(int featureId)

Enable extended screen features. This must be called before setContentView(). 
May be called as many times as desired as long as it is before 
setContentView(). If not called, no extended features will be available. You 
can not turn off a feature once it is requested. You canot use other title 
features with (|android.view.Window|) . 


    featureId - The desired features, defined as constants by Window. 

    Returns: The features that are now set. 

*android.view.Window.restoreHierarchyState(Bundle)*

public abstract void restoreHierarchyState(android.os.Bundle savedInstanceState)





*android.view.Window.saveHierarchyState()*

public abstract |android.os.Bundle| saveHierarchyState()





*android.view.Window.setAttributes(WindowManager.LayoutParams)*

public void setAttributes(android.view.WindowManager.LayoutParams a)

Specify custom window attributes. PLEASE NOTE: the layout params you give here 
should generally be from values previously retrieved with 
(|android.view.Window|) ; you probably do not want to blindly create and apply 
your own, since this will blow away any values set by the framework that you 
are not interested in. 


    a - The new window attributes, which will completely override any current values. 

*android.view.Window.setBackgroundDrawable(Drawable)*

public abstract void setBackgroundDrawable(Drawable drawable)

Change the background of this window to a custom Drawable. Setting the 
background to null will make the window be opaque. To make the window 
transparent, you can use an empty drawable (for instance a ColorDrawable with 
the color 0 or the system drawable android:drawable/empty.) 


    drawable - The new Drawable to use for this window's background. 

*android.view.Window.setBackgroundDrawableResource(int)*

public void setBackgroundDrawableResource(int resid)

Change the background of this window to a Drawable resource. Setting the 
background to null will make the window be opaque. To make the window 
transparent, you can use an empty drawable (for instance a ColorDrawable with 
the color 0 or the system drawable android:drawable/empty.) 


    resid - The resource identifier of a drawable resource which will be installed as the 
       new background. 

*android.view.Window.setCallback(Window.Callback)*

public void setCallback(android.view.Window.Callback callback)

Set the Callback interface for this window, used to intercept key events and 
other dynamic operations in the window. 


    callback - The desired Callback interface. 

*android.view.Window.setChildDrawable(int,Drawable)*

public abstract void setChildDrawable(
  int featureId,
  Drawable drawable)





*android.view.Window.setChildInt(int,int)*

public abstract void setChildInt(
  int featureId,
  int value)





*android.view.Window.setCloseOnTouchOutside(boolean)*

public void setCloseOnTouchOutside(boolean close)





*android.view.Window.setCloseOnTouchOutsideIfNotSet(boolean)*

public void setCloseOnTouchOutsideIfNotSet(boolean close)





*android.view.Window.setContainer(Window)*

public void setContainer(android.view.Window container)

Set the container for this window. If not set, the DecorWindow operates as a 
top-level window; otherwise, it negotiates with the container to display itself 
appropriately. 


    container - The desired containing Window. 

*android.view.Window.setContentView(int)*

public abstract void setContentView(int layoutResID)

Convenience for (|android.view.Window|) to set the screen content from a layout 
resource. The resource will be inflated, adding all top-level views to the 
screen. 


    layoutResID - Resource ID to be inflated. 

*android.view.Window.setContentView(View)*

public abstract void setContentView(android.view.View view)

Convenience for (|android.view.Window|) set the screen content to an explicit 
view. This view is placed directly into the screen's view hierarchy. It can 
itself be a complex view hierarhcy. 


    view - The desired content to display. 

*android.view.Window.setContentView(View,ViewGroup.LayoutParams)*

public abstract void setContentView(
  android.view.View view,
  android.view.ViewGroup.LayoutParams params)

Set the screen content to an explicit view. This view is placed directly into 
the screen's view hierarchy. It can itself be a complex view hierarchy. 

Note that calling this function "locks in" various characteristics of the 
window that can not, from this point forward, be changed: the features that 
have been requested with (|android.view.Window|) , and certain window flags as 
described in (|android.view.Window|) . 


    view - The desired content to display. 
    params - Layout parameters for the view. 

*android.view.Window.setDefaultIcon(int)*

public void setDefaultIcon(int resId)

Set the default icon for this window. This will be overridden by any other icon 
set operation which could come from the theme or another explicit set. 



*android.view.Window.setDefaultLogo(int)*

public void setDefaultLogo(int resId)

Set the default logo for this window. This will be overridden by any other logo 
set operation which could come from the theme or another explicit set. 



*android.view.Window.setDefaultWindowFormat(int)*

protected void setDefaultWindowFormat(int format)

Set the default format of window, as per the PixelFormat types. This is the 
format that will be used unless the client specifies in explicit format with 
setFormat(); 


    format - The new window format (see PixelFormat). 

*android.view.Window.setDimAmount(float)*

public void setDimAmount(float amount)

Set the amount of dim behind the window when using 
(|android.view.WindowManager.LayoutParams|) . This overrides the default dim 
amount of that is selected by the Window based on its theme. 


    amount - The new dim amount, from 0 for no dim to 1 for full dim. 

*android.view.Window.setFeatureDrawable(int,Drawable)*

public abstract void setFeatureDrawable(
  int featureId,
  Drawable drawable)

Set an explicit Drawable value for feature of this window. You must have called 
requestFeature(featureId) before calling this function. 


    featureId - The desired drawable feature to change. Features are constants defined by 
       Window. 
    drawable - A Drawable object to display. 

*android.view.Window.setFeatureDrawableAlpha(int,int)*

public abstract void setFeatureDrawableAlpha(
  int featureId,
  int alpha)

Set a custom alpha value for the given drawale feature, controlling how much 
the background is visible through it. 


    featureId - The desired drawable feature to change. Features are constants defined by 
       Window. 
    alpha - The alpha amount, 0 is completely transparent and 255 is completely opaque. 

*android.view.Window.setFeatureDrawableResource(int,int)*

public abstract void setFeatureDrawableResource(
  int featureId,
  int resId)

Set the value for a drawable feature of this window, from a resource 
identifier. You must have called requestFeauture(featureId) before calling this 
function. 


    featureId - The desired drawable feature to change, defined as a constant by Window. 
    resId - Resource identifier of the desired image. 

*android.view.Window.setFeatureDrawableUri(int,Uri)*

public abstract void setFeatureDrawableUri(
  int featureId,
  android.net.Uri uri)

Set the value for a drawable feature of this window, from a URI. You must have 
called requestFeature(featureId) before calling this function. 

The only URI currently supported is "content:", specifying an image in a 
content provider. 


    featureId - The desired drawable feature to change. Features are constants defined by 
       Window. 
    uri - The desired URI. 

*android.view.Window.setFeatureInt(int,int)*

public abstract void setFeatureInt(
  int featureId,
  int value)

Set the integer value for a feature. The range of the value depends on the 
feature being set. For FEATURE_PROGRESSS, it should go from 0 to 10000. At 
10000 the progress is complete and the indicator hidden. 


    featureId - The desired feature to change. Features are constants defined by Window. 
    value - The value for the feature. The interpretation of this value is 
       feature-specific. 

*android.view.Window.setFlags(int,int)*

public void setFlags(
  int flags,
  int mask)

Set the flags of the window, as per the 
WindowManager.LayoutParams(|android.view.WindowManager.LayoutParams|) flags. 

Note that some flags must be set before the window decoration is created (by 
the first call to (|android.view.Window|) or (|android.view.Window|) : 
(|android.view.WindowManager.LayoutParams|) and 
(|android.view.WindowManager.LayoutParams|) . These will be set for you based 
on the (|android.R.attr|) attribute. 


    flags - The new window flags (see WindowManager.LayoutParams). 
    mask - Which of the window flag bits to modify. 

*android.view.Window.setFormat(int)*

public void setFormat(int format)

Set the format of window, as per the PixelFormat types. This overrides the 
default format that is selected by the Window based on its window decorations. 


    format - The new window format (see PixelFormat). Use PixelFormat.UNKNOWN to allow the 
       Window to select the format. 

*android.view.Window.setGravity(int)*

public void setGravity(int gravity)

Set the gravity of the window, as per the Gravity constants. This controls how 
the window manager is positioned in the overall window; it is only useful when 
using WRAP_CONTENT for the layout width or height. 


    gravity - The desired gravity constant. 

*android.view.Window.setIcon(int)*

public void setIcon(int resId)

Set the primary icon for this window. 


    resId - resource ID of a drawable to set 

*android.view.Window.setLayout(int,int)*

public void setLayout(
  int width,
  int height)

Set the width and height layout parameters of the window. The default for both 
of these is MATCH_PARENT; you can change them to WRAP_CONTENT or an absolute 
value to make a window that is not full-screen. 


    width - The desired layout width of the window. 
    height - The desired layout height of the window. 

*android.view.Window.setLocalFocus(boolean,boolean)*

public void setLocalFocus(
  boolean hasFocus,
  boolean inTouchMode)

Set focus locally. The window should have the 
(|android.view.WindowManager.LayoutParams|) flag set already. 


    hasFocus - Whether this window has focus or not. 
    inTouchMode - Whether this window is in touch mode or not. 

*android.view.Window.setLogo(int)*

public void setLogo(int resId)

Set the logo for this window. A logo is often shown in place of an 
icon(|android.view.Window|) but is generally wider and communicates window 
title information as well. 


    resId - resource ID of a drawable to set 

*android.view.Window.setSoftInputMode(int)*

public void setSoftInputMode(int mode)

Specify an explicit soft input mode to use for the window, as per 
WindowManager.LayoutParams.softInputMode(|android.view.WindowManager.LayoutParams|)
. Providing anything besides "unspecified" here will override the input mode 
the window would normally retrieve from its theme. 



*android.view.Window.setTitle(CharSequence)*

public abstract void setTitle(java.lang.CharSequence title)





*android.view.Window.setTitleColor(int)*

public abstract void setTitleColor(int textColor)





*android.view.Window.setType(int)*

public void setType(int type)

Set the type of the window, as per the WindowManager.LayoutParams types. 


    type - The new window type (see WindowManager.LayoutParams). 

*android.view.Window.setUiOptions(int)*

public void setUiOptions(int uiOptions)

Set extra options that will influence the UI for this window. 


    uiOptions - Flags specifying extra options for this window. 

*android.view.Window.setUiOptions(int,int)*

public void setUiOptions(
  int uiOptions,
  int mask)

Set extra options that will influence the UI for this window. Only the bits 
filtered by mask will be modified. 


    uiOptions - Flags specifying extra options for this window. 
    mask - Flags specifying which options should be modified. Others will remain 
       unchanged. 

*android.view.Window.setVolumeControlStream(int)*

public abstract void setVolumeControlStream(int streamType)





*android.view.Window.setWindowAnimations(int)*

public void setWindowAnimations(int resId)

Specify custom animations to use for the window, as per 
WindowManager.LayoutParams.windowAnimations(|android.view.WindowManager.LayoutParams|)
. Providing anything besides 0 here will override the animations the window 
would normally retrieve from its theme. 



*android.view.Window.setWindowManager(WindowManager,IBinder,String)*

public void setWindowManager(
  android.view.WindowManager wm,
  android.os.IBinder appToken,
  java.lang.String appName)

Set the window manager for use by this Window to, for example, display panels. 
This is not used for displaying the Window itself -- that must be done by the 
client. 


    wm - The window manager for adding new windows. 

*android.view.Window.setWindowManager(WindowManager,IBinder,String,boolean)*

public void setWindowManager(
  android.view.WindowManager wm,
  android.os.IBinder appToken,
  java.lang.String appName,
  boolean hardwareAccelerated)

Set the window manager for use by this Window to, for example, display panels. 
This is not used for displaying the Window itself -- that must be done by the 
client. 


    wm - The window manager for adding new windows. 

*android.view.Window.shouldCloseOnTouch(Context,MotionEvent)*

public boolean shouldCloseOnTouch(
  android.content.Context context,
  android.view.MotionEvent event)





*android.view.Window.superDispatchGenericMotionEvent(MotionEvent)*

public abstract boolean superDispatchGenericMotionEvent(android.view.MotionEvent event)

Used by custom windows, such as Dialog, to pass the generic motion event 
further down the view hierarchy. Application developers should not need to 
implement or call this. 



*android.view.Window.superDispatchKeyEvent(KeyEvent)*

public abstract boolean superDispatchKeyEvent(android.view.KeyEvent event)

Used by custom windows, such as Dialog, to pass the key press event further 
down the view hierarchy. Application developers should not need to implement or 
call this. 



*android.view.Window.superDispatchKeyShortcutEvent(KeyEvent)*

public abstract boolean superDispatchKeyShortcutEvent(android.view.KeyEvent event)

Used by custom windows, such as Dialog, to pass the key shortcut press event 
further down the view hierarchy. Application developers should not need to 
implement or call this. 



*android.view.Window.superDispatchTouchEvent(MotionEvent)*

public abstract boolean superDispatchTouchEvent(android.view.MotionEvent event)

Used by custom windows, such as Dialog, to pass the touch screen event further 
down the view hierarchy. Application developers should not need to implement or 
call this. 



*android.view.Window.superDispatchTrackballEvent(MotionEvent)*

public abstract boolean superDispatchTrackballEvent(android.view.MotionEvent event)

Used by custom windows, such as Dialog, to pass the trackball event further 
down the view hierarchy. Application developers should not need to implement or 
call this. 



*android.view.Window.takeInputQueue(InputQueue.Callback)*

public abstract void takeInputQueue(android.view.InputQueue.Callback callback)

Take ownership of this window's InputQueue. The window will no longer read and 
dispatch input events from the queue; it is your responsibility to do so. 



*android.view.Window.takeKeyEvents(boolean)*

public abstract void takeKeyEvents(boolean get)

Request that key events come to this activity. Use this if your activity has no 
views with focus, but the activity still wants a chance to process key events. 



*android.view.Window.takeSurface(SurfaceHolder.Callback2)*

public abstract void takeSurface(android.view.SurfaceHolder.Callback2 callback)

Take ownership of this window's surface. The window's view hierarchy will no 
longer draw into the surface, though it will otherwise continue to operate 
(such as for receiving input events). The given SurfaceHolder callback will be 
used to tell you about state changes to the surface. 



*android.view.Window.togglePanel(int,KeyEvent)*

public abstract void togglePanel(
  int featureId,
  android.view.KeyEvent event)






