*android.database.sqlite.SQLiteGlobal* *SQLiteGlobal* Provides access to SQLite 

public final class SQLiteGlobal
  extends    |java.lang.Object|

|android.database.sqlite.SQLiteGlobal_Description|
|android.database.sqlite.SQLiteGlobal_Fields|
|android.database.sqlite.SQLiteGlobal_Constructors|
|android.database.sqlite.SQLiteGlobal_Methods|

================================================================================

*android.database.sqlite.SQLiteGlobal_Methods*
|android.database.sqlite.SQLiteGlobal.getDefaultJournalMode()|Gets the default 
|android.database.sqlite.SQLiteGlobal.getDefaultPageSize()|Gets the default pag
|android.database.sqlite.SQLiteGlobal.getDefaultSyncMode()|Gets the default dat
|android.database.sqlite.SQLiteGlobal.getJournalSizeLimit()|Gets the journal si
|android.database.sqlite.SQLiteGlobal.getWALAutoCheckpoint()|Gets the WAL auto-
|android.database.sqlite.SQLiteGlobal.getWALConnectionPoolSize()|Gets the conne
|android.database.sqlite.SQLiteGlobal.getWALSyncMode()|Gets the database synchr
|android.database.sqlite.SQLiteGlobal.releaseMemory()|Attempts to release memor

*android.database.sqlite.SQLiteGlobal_Description*

Provides access to SQLite functions that affect all database connection, such 
as memory management. 

The native code associated with SQLiteGlobal is also sets global configuration 
options using sqlite3_config() then calls sqlite3_initialize() to ensure that 
the SQLite library is properly initialized exactly once before any other 
framework or application code has a chance to run. 

Verbose SQLite logging is enabled if the "log.tag.SQLiteLog" property is set to 
"V". (per (|android.database.sqlite.SQLiteDebug|) ). 



*android.database.sqlite.SQLiteGlobal.getDefaultJournalMode()*

public static |java.lang.String| getDefaultJournalMode()

Gets the default journal mode when WAL is not in use. 



*android.database.sqlite.SQLiteGlobal.getDefaultPageSize()*

public static int getDefaultPageSize()

Gets the default page size to use when creating a database. 



*android.database.sqlite.SQLiteGlobal.getDefaultSyncMode()*

public static |java.lang.String| getDefaultSyncMode()

Gets the default database synchronization mode when WAL is not in use. 



*android.database.sqlite.SQLiteGlobal.getJournalSizeLimit()*

public static int getJournalSizeLimit()

Gets the journal size limit in bytes. 



*android.database.sqlite.SQLiteGlobal.getWALAutoCheckpoint()*

public static int getWALAutoCheckpoint()

Gets the WAL auto-checkpoint integer in database pages. 



*android.database.sqlite.SQLiteGlobal.getWALConnectionPoolSize()*

public static int getWALConnectionPoolSize()

Gets the connection pool size when in WAL mode. 



*android.database.sqlite.SQLiteGlobal.getWALSyncMode()*

public static |java.lang.String| getWALSyncMode()

Gets the database synchronization mode when in WAL mode. 



*android.database.sqlite.SQLiteGlobal.releaseMemory()*

public static int releaseMemory()

Attempts to release memory by pruning the SQLite page cache and other internal 
data structures. 



    Returns: The number of bytes that were freed. 


