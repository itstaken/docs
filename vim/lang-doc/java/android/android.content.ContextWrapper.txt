*android.content.ContextWrapper* *ContextWrapper* Proxying implementation of Con

public class ContextWrapper
  extends    |android.content.Context|

|android.content.ContextWrapper_Description|
|android.content.ContextWrapper_Fields|
|android.content.ContextWrapper_Constructors|
|android.content.ContextWrapper_Methods|

================================================================================

*android.content.ContextWrapper_Constructors*
|android.content.ContextWrapper(Context)|

*android.content.ContextWrapper_Methods*
|android.content.ContextWrapper.attachBaseContext(Context)|Set the base context
|android.content.ContextWrapper.bindService(Intent,ServiceConnection,int)|
|android.content.ContextWrapper.bindServiceAsUser(Intent,ServiceConnection,int,UserHandle)|
|android.content.ContextWrapper.checkCallingOrSelfPermission(String)|
|android.content.ContextWrapper.checkCallingOrSelfUriPermission(Uri,int)|
|android.content.ContextWrapper.checkCallingPermission(String)|
|android.content.ContextWrapper.checkCallingUriPermission(Uri,int)|
|android.content.ContextWrapper.checkPermission(String,int,int)|
|android.content.ContextWrapper.checkUriPermission(Uri,int,int,int)|
|android.content.ContextWrapper.checkUriPermission(Uri,String,String,int,int,int)|
|android.content.ContextWrapper.clearWallpaper()|
|android.content.ContextWrapper.createConfigurationContext(Configuration)|
|android.content.ContextWrapper.createDisplayContext(Display)|
|android.content.ContextWrapper.createPackageContext(String,int)|
|android.content.ContextWrapper.createPackageContextAsUser(String,int,UserHandle)|
|android.content.ContextWrapper.databaseList()|
|android.content.ContextWrapper.deleteDatabase(String)|
|android.content.ContextWrapper.deleteFile(String)|
|android.content.ContextWrapper.enforceCallingOrSelfPermission(String,String)|
|android.content.ContextWrapper.enforceCallingOrSelfUriPermission(Uri,int,String)|
|android.content.ContextWrapper.enforceCallingPermission(String,String)|
|android.content.ContextWrapper.enforceCallingUriPermission(Uri,int,String)|
|android.content.ContextWrapper.enforcePermission(String,int,int,String)|
|android.content.ContextWrapper.enforceUriPermission(Uri,int,int,int,String)|
|android.content.ContextWrapper.enforceUriPermission(Uri,String,String,int,int,int,String)|
|android.content.ContextWrapper.fileList()|
|android.content.ContextWrapper.getApplicationContext()|
|android.content.ContextWrapper.getApplicationInfo()|
|android.content.ContextWrapper.getAssets()|
|android.content.ContextWrapper.getBaseContext()|
|android.content.ContextWrapper.getBasePackageName()|
|android.content.ContextWrapper.getCacheDir()|
|android.content.ContextWrapper.getClassLoader()|
|android.content.ContextWrapper.getContentResolver()|
|android.content.ContextWrapper.getDatabasePath(String)|
|android.content.ContextWrapper.getDir(String,int)|
|android.content.ContextWrapper.getDisplayAdjustments(int)|
|android.content.ContextWrapper.getExternalCacheDir()|
|android.content.ContextWrapper.getExternalCacheDirs()|
|android.content.ContextWrapper.getExternalFilesDir(String)|
|android.content.ContextWrapper.getExternalFilesDirs(String)|
|android.content.ContextWrapper.getFilesDir()|
|android.content.ContextWrapper.getFileStreamPath(String)|
|android.content.ContextWrapper.getMainLooper()|
|android.content.ContextWrapper.getObbDir()|
|android.content.ContextWrapper.getObbDirs()|
|android.content.ContextWrapper.getOpPackageName()|
|android.content.ContextWrapper.getPackageCodePath()|
|android.content.ContextWrapper.getPackageManager()|
|android.content.ContextWrapper.getPackageName()|
|android.content.ContextWrapper.getPackageResourcePath()|
|android.content.ContextWrapper.getResources()|
|android.content.ContextWrapper.getSharedPreferences(String,int)|
|android.content.ContextWrapper.getSharedPrefsFile(String)|
|android.content.ContextWrapper.getSystemService(String)|
|android.content.ContextWrapper.getTheme()|
|android.content.ContextWrapper.getThemeResId()|
|android.content.ContextWrapper.getUserId()|
|android.content.ContextWrapper.getWallpaper()|
|android.content.ContextWrapper.getWallpaperDesiredMinimumHeight()|
|android.content.ContextWrapper.getWallpaperDesiredMinimumWidth()|
|android.content.ContextWrapper.grantUriPermission(String,Uri,int)|
|android.content.ContextWrapper.isRestricted()|
|android.content.ContextWrapper.openFileInput(String)|
|android.content.ContextWrapper.openFileOutput(String,int)|
|android.content.ContextWrapper.openOrCreateDatabase(String,int,SQLiteDatabase.CursorFactory)|
|android.content.ContextWrapper.openOrCreateDatabase(String,int,SQLiteDatabase.CursorFactory,DatabaseErrorHandler)|
|android.content.ContextWrapper.peekWallpaper()|
|android.content.ContextWrapper.registerReceiver(BroadcastReceiver,IntentFilter)|
|android.content.ContextWrapper.registerReceiver(BroadcastReceiver,IntentFilter,String,Handler)|
|android.content.ContextWrapper.registerReceiverAsUser(BroadcastReceiver,UserHandle,IntentFilter,String,Handler)|
|android.content.ContextWrapper.removeStickyBroadcast(Intent)|
|android.content.ContextWrapper.removeStickyBroadcastAsUser(Intent,UserHandle)|
|android.content.ContextWrapper.revokeUriPermission(Uri,int)|
|android.content.ContextWrapper.sendBroadcast(Intent)|
|android.content.ContextWrapper.sendBroadcast(Intent,String)|
|android.content.ContextWrapper.sendBroadcast(Intent,String,int)|
|android.content.ContextWrapper.sendBroadcastAsUser(Intent,UserHandle)|
|android.content.ContextWrapper.sendBroadcastAsUser(Intent,UserHandle,String)|
|android.content.ContextWrapper.sendOrderedBroadcast(Intent,String)|
|android.content.ContextWrapper.sendOrderedBroadcast(Intent,String,BroadcastReceiver,Handler,int,String,Bundle)|
|android.content.ContextWrapper.sendOrderedBroadcast(Intent,String,int,BroadcastReceiver,Handler,int,String,Bundle)|
|android.content.ContextWrapper.sendOrderedBroadcastAsUser(Intent,UserHandle,String,BroadcastReceiver,Handler,int,String,Bundle)|
|android.content.ContextWrapper.sendStickyBroadcast(Intent)|
|android.content.ContextWrapper.sendStickyBroadcastAsUser(Intent,UserHandle)|
|android.content.ContextWrapper.sendStickyOrderedBroadcast(Intent,BroadcastReceiver,Handler,int,String,Bundle)|
|android.content.ContextWrapper.sendStickyOrderedBroadcastAsUser(Intent,UserHandle,BroadcastReceiver,Handler,int,String,Bundle)|
|android.content.ContextWrapper.setTheme(int)|
|android.content.ContextWrapper.setWallpaper(Bitmap)|
|android.content.ContextWrapper.startActivities(Intent[])|
|android.content.ContextWrapper.startActivities(Intent[],Bundle)|
|android.content.ContextWrapper.startActivitiesAsUser(Intent[],Bundle,UserHandle)|
|android.content.ContextWrapper.startActivity(Intent)|
|android.content.ContextWrapper.startActivity(Intent,Bundle)|
|android.content.ContextWrapper.startActivityAsUser(Intent,Bundle,UserHandle)|
|android.content.ContextWrapper.startActivityAsUser(Intent,UserHandle)|
|android.content.ContextWrapper.startInstrumentation(ComponentName,String,Bundle)|
|android.content.ContextWrapper.startIntentSender(IntentSender,Intent,int,int,int)|
|android.content.ContextWrapper.startIntentSender(IntentSender,Intent,int,int,int,Bundle)|
|android.content.ContextWrapper.startService(Intent)|
|android.content.ContextWrapper.startServiceAsUser(Intent,UserHandle)|
|android.content.ContextWrapper.stopService(Intent)|
|android.content.ContextWrapper.stopServiceAsUser(Intent,UserHandle)|
|android.content.ContextWrapper.unbindService(ServiceConnection)|
|android.content.ContextWrapper.unregisterReceiver(BroadcastReceiver)|

*android.content.ContextWrapper_Description*

Proxying implementation of Context that simply delegates all of its calls to 
another Context. Can be subclassed to modify behavior without changing the 
original Context. 



*android.content.ContextWrapper(Context)*

public ContextWrapper(android.content.Context base)




*android.content.ContextWrapper.attachBaseContext(Context)*

protected void attachBaseContext(android.content.Context base)

Set the base context for this ContextWrapper. All calls will then be delegated 
to the base context. Throws IllegalStateException if a base context has already 
been set. 


    base - The new base context for this wrapper. 

*android.content.ContextWrapper.bindService(Intent,ServiceConnection,int)*

public boolean bindService(
  android.content.Intent service,
  android.content.ServiceConnection conn,
  int flags)





*android.content.ContextWrapper.bindServiceAsUser(Intent,ServiceConnection,int,UserHandle)*

public boolean bindServiceAsUser(
  android.content.Intent service,
  android.content.ServiceConnection conn,
  int flags,
  android.os.UserHandle user)





*android.content.ContextWrapper.checkCallingOrSelfPermission(String)*

public int checkCallingOrSelfPermission(java.lang.String permission)





*android.content.ContextWrapper.checkCallingOrSelfUriPermission(Uri,int)*

public int checkCallingOrSelfUriPermission(
  android.net.Uri uri,
  int modeFlags)





*android.content.ContextWrapper.checkCallingPermission(String)*

public int checkCallingPermission(java.lang.String permission)





*android.content.ContextWrapper.checkCallingUriPermission(Uri,int)*

public int checkCallingUriPermission(
  android.net.Uri uri,
  int modeFlags)





*android.content.ContextWrapper.checkPermission(String,int,int)*

public int checkPermission(
  java.lang.String permission,
  int pid,
  int uid)





*android.content.ContextWrapper.checkUriPermission(Uri,int,int,int)*

public int checkUriPermission(
  android.net.Uri uri,
  int pid,
  int uid,
  int modeFlags)





*android.content.ContextWrapper.checkUriPermission(Uri,String,String,int,int,int)*

public int checkUriPermission(
  android.net.Uri uri,
  java.lang.String readPermission,
  java.lang.String writePermission,
  int pid,
  int uid,
  int modeFlags)





*android.content.ContextWrapper.clearWallpaper()*

public void clearWallpaper()
  throws |java.io.IOException|
         




*android.content.ContextWrapper.createConfigurationContext(Configuration)*

public |android.content.Context| createConfigurationContext(android.content.res.Configuration overrideConfiguration)





*android.content.ContextWrapper.createDisplayContext(Display)*

public |android.content.Context| createDisplayContext(android.view.Display display)





*android.content.ContextWrapper.createPackageContext(String,int)*

public |android.content.Context| createPackageContext(
  java.lang.String packageName,
  int flags)
  throws |android.content.pm.PackageManager.NameNotFoundException|
         




*android.content.ContextWrapper.createPackageContextAsUser(String,int,UserHandle)*

public |android.content.Context| createPackageContextAsUser(
  java.lang.String packageName,
  int flags,
  android.os.UserHandle user)
  throws |android.content.pm.PackageManager.NameNotFoundException|
         




*android.content.ContextWrapper.databaseList()*

public |java.lang.String|[] databaseList()





*android.content.ContextWrapper.deleteDatabase(String)*

public boolean deleteDatabase(java.lang.String name)





*android.content.ContextWrapper.deleteFile(String)*

public boolean deleteFile(java.lang.String name)





*android.content.ContextWrapper.enforceCallingOrSelfPermission(String,String)*

public void enforceCallingOrSelfPermission(
  java.lang.String permission,
  java.lang.String message)





*android.content.ContextWrapper.enforceCallingOrSelfUriPermission(Uri,int,String)*

public void enforceCallingOrSelfUriPermission(
  android.net.Uri uri,
  int modeFlags,
  java.lang.String message)





*android.content.ContextWrapper.enforceCallingPermission(String,String)*

public void enforceCallingPermission(
  java.lang.String permission,
  java.lang.String message)





*android.content.ContextWrapper.enforceCallingUriPermission(Uri,int,String)*

public void enforceCallingUriPermission(
  android.net.Uri uri,
  int modeFlags,
  java.lang.String message)





*android.content.ContextWrapper.enforcePermission(String,int,int,String)*

public void enforcePermission(
  java.lang.String permission,
  int pid,
  int uid,
  java.lang.String message)





*android.content.ContextWrapper.enforceUriPermission(Uri,int,int,int,String)*

public void enforceUriPermission(
  android.net.Uri uri,
  int pid,
  int uid,
  int modeFlags,
  java.lang.String message)





*android.content.ContextWrapper.enforceUriPermission(Uri,String,String,int,int,int,String)*

public void enforceUriPermission(
  android.net.Uri uri,
  java.lang.String readPermission,
  java.lang.String writePermission,
  int pid,
  int uid,
  int modeFlags,
  java.lang.String message)





*android.content.ContextWrapper.fileList()*

public |java.lang.String|[] fileList()





*android.content.ContextWrapper.getApplicationContext()*

public |android.content.Context| getApplicationContext()





*android.content.ContextWrapper.getApplicationInfo()*

public |android.content.pm.ApplicationInfo| getApplicationInfo()





*android.content.ContextWrapper.getAssets()*

public |android.content.res.AssetManager| getAssets()





*android.content.ContextWrapper.getBaseContext()*

public |android.content.Context| getBaseContext()





    Returns: the base context as set by the constructor or setBaseContext 

*android.content.ContextWrapper.getBasePackageName()*

public |java.lang.String| getBasePackageName()





*android.content.ContextWrapper.getCacheDir()*

public |java.io.File| getCacheDir()





*android.content.ContextWrapper.getClassLoader()*

public |java.lang.ClassLoader| getClassLoader()





*android.content.ContextWrapper.getContentResolver()*

public |android.content.ContentResolver| getContentResolver()





*android.content.ContextWrapper.getDatabasePath(String)*

public |java.io.File| getDatabasePath(java.lang.String name)





*android.content.ContextWrapper.getDir(String,int)*

public |java.io.File| getDir(
  java.lang.String name,
  int mode)





*android.content.ContextWrapper.getDisplayAdjustments(int)*

public |android.view.DisplayAdjustments| getDisplayAdjustments(int displayId)





*android.content.ContextWrapper.getExternalCacheDir()*

public |java.io.File| getExternalCacheDir()





*android.content.ContextWrapper.getExternalCacheDirs()*

public |java.io.File|[] getExternalCacheDirs()





*android.content.ContextWrapper.getExternalFilesDir(String)*

public |java.io.File| getExternalFilesDir(java.lang.String type)





*android.content.ContextWrapper.getExternalFilesDirs(String)*

public |java.io.File|[] getExternalFilesDirs(java.lang.String type)





*android.content.ContextWrapper.getFilesDir()*

public |java.io.File| getFilesDir()





*android.content.ContextWrapper.getFileStreamPath(String)*

public |java.io.File| getFileStreamPath(java.lang.String name)





*android.content.ContextWrapper.getMainLooper()*

public |android.os.Looper| getMainLooper()





*android.content.ContextWrapper.getObbDir()*

public |java.io.File| getObbDir()





*android.content.ContextWrapper.getObbDirs()*

public |java.io.File|[] getObbDirs()





*android.content.ContextWrapper.getOpPackageName()*

public |java.lang.String| getOpPackageName()





*android.content.ContextWrapper.getPackageCodePath()*

public |java.lang.String| getPackageCodePath()





*android.content.ContextWrapper.getPackageManager()*

public |android.content.pm.PackageManager| getPackageManager()





*android.content.ContextWrapper.getPackageName()*

public |java.lang.String| getPackageName()





*android.content.ContextWrapper.getPackageResourcePath()*

public |java.lang.String| getPackageResourcePath()





*android.content.ContextWrapper.getResources()*

public |android.content.res.Resources| getResources()





*android.content.ContextWrapper.getSharedPreferences(String,int)*

public |android.content.SharedPreferences| getSharedPreferences(
  java.lang.String name,
  int mode)





*android.content.ContextWrapper.getSharedPrefsFile(String)*

public |java.io.File| getSharedPrefsFile(java.lang.String name)





*android.content.ContextWrapper.getSystemService(String)*

public |java.lang.Object| getSystemService(java.lang.String name)





*android.content.ContextWrapper.getTheme()*

public |android.content.res.Resources.Theme| getTheme()





*android.content.ContextWrapper.getThemeResId()*

public int getThemeResId()





*android.content.ContextWrapper.getUserId()*

public int getUserId()





*android.content.ContextWrapper.getWallpaper()*

public Drawable getWallpaper()





*android.content.ContextWrapper.getWallpaperDesiredMinimumHeight()*

public int getWallpaperDesiredMinimumHeight()





*android.content.ContextWrapper.getWallpaperDesiredMinimumWidth()*

public int getWallpaperDesiredMinimumWidth()





*android.content.ContextWrapper.grantUriPermission(String,Uri,int)*

public void grantUriPermission(
  java.lang.String toPackage,
  android.net.Uri uri,
  int modeFlags)





*android.content.ContextWrapper.isRestricted()*

public boolean isRestricted()





*android.content.ContextWrapper.openFileInput(String)*

public |java.io.FileInputStream| openFileInput(java.lang.String name)
  throws |java.io.FileNotFoundException|
         




*android.content.ContextWrapper.openFileOutput(String,int)*

public |java.io.FileOutputStream| openFileOutput(
  java.lang.String name,
  int mode)
  throws |java.io.FileNotFoundException|
         




*android.content.ContextWrapper.openOrCreateDatabase(String,int,SQLiteDatabase.CursorFactory)*

public |android.database.sqlite.SQLiteDatabase| openOrCreateDatabase(
  java.lang.String name,
  int mode,
  android.database.sqlite.SQLiteDatabase.CursorFactory factory)





*android.content.ContextWrapper.openOrCreateDatabase(String,int,SQLiteDatabase.CursorFactory,DatabaseErrorHandler)*

public |android.database.sqlite.SQLiteDatabase| openOrCreateDatabase(
  java.lang.String name,
  int mode,
  android.database.sqlite.SQLiteDatabase.CursorFactory factory,
  android.database.DatabaseErrorHandler errorHandler)





*android.content.ContextWrapper.peekWallpaper()*

public Drawable peekWallpaper()





*android.content.ContextWrapper.registerReceiver(BroadcastReceiver,IntentFilter)*

public |android.content.Intent| registerReceiver(
  android.content.BroadcastReceiver receiver,
  android.content.IntentFilter filter)





*android.content.ContextWrapper.registerReceiver(BroadcastReceiver,IntentFilter,String,Handler)*

public |android.content.Intent| registerReceiver(
  android.content.BroadcastReceiver receiver,
  android.content.IntentFilter filter,
  java.lang.String broadcastPermission,
  android.os.Handler scheduler)





*android.content.ContextWrapper.registerReceiverAsUser(BroadcastReceiver,UserHandle,IntentFilter,String,Handler)*

public |android.content.Intent| registerReceiverAsUser(
  android.content.BroadcastReceiver receiver,
  android.os.UserHandle user,
  android.content.IntentFilter filter,
  java.lang.String broadcastPermission,
  android.os.Handler scheduler)





*android.content.ContextWrapper.removeStickyBroadcast(Intent)*

public void removeStickyBroadcast(android.content.Intent intent)





*android.content.ContextWrapper.removeStickyBroadcastAsUser(Intent,UserHandle)*

public void removeStickyBroadcastAsUser(
  android.content.Intent intent,
  android.os.UserHandle user)





*android.content.ContextWrapper.revokeUriPermission(Uri,int)*

public void revokeUriPermission(
  android.net.Uri uri,
  int modeFlags)





*android.content.ContextWrapper.sendBroadcast(Intent)*

public void sendBroadcast(android.content.Intent intent)





*android.content.ContextWrapper.sendBroadcast(Intent,String)*

public void sendBroadcast(
  android.content.Intent intent,
  java.lang.String receiverPermission)





*android.content.ContextWrapper.sendBroadcast(Intent,String,int)*

public void sendBroadcast(
  android.content.Intent intent,
  java.lang.String receiverPermission,
  int appOp)





*android.content.ContextWrapper.sendBroadcastAsUser(Intent,UserHandle)*

public void sendBroadcastAsUser(
  android.content.Intent intent,
  android.os.UserHandle user)





*android.content.ContextWrapper.sendBroadcastAsUser(Intent,UserHandle,String)*

public void sendBroadcastAsUser(
  android.content.Intent intent,
  android.os.UserHandle user,
  java.lang.String receiverPermission)





*android.content.ContextWrapper.sendOrderedBroadcast(Intent,String)*

public void sendOrderedBroadcast(
  android.content.Intent intent,
  java.lang.String receiverPermission)





*android.content.ContextWrapper.sendOrderedBroadcast(Intent,String,BroadcastReceiver,Handler,int,String,Bundle)*

public void sendOrderedBroadcast(
  android.content.Intent intent,
  java.lang.String receiverPermission,
  android.content.BroadcastReceiver resultReceiver,
  android.os.Handler scheduler,
  int initialCode,
  java.lang.String initialData,
  android.os.Bundle initialExtras)





*android.content.ContextWrapper.sendOrderedBroadcast(Intent,String,int,BroadcastReceiver,Handler,int,String,Bundle)*

public void sendOrderedBroadcast(
  android.content.Intent intent,
  java.lang.String receiverPermission,
  int appOp,
  android.content.BroadcastReceiver resultReceiver,
  android.os.Handler scheduler,
  int initialCode,
  java.lang.String initialData,
  android.os.Bundle initialExtras)





*android.content.ContextWrapper.sendOrderedBroadcastAsUser(Intent,UserHandle,String,BroadcastReceiver,Handler,int,String,Bundle)*

public void sendOrderedBroadcastAsUser(
  android.content.Intent intent,
  android.os.UserHandle user,
  java.lang.String receiverPermission,
  android.content.BroadcastReceiver resultReceiver,
  android.os.Handler scheduler,
  int initialCode,
  java.lang.String initialData,
  android.os.Bundle initialExtras)





*android.content.ContextWrapper.sendStickyBroadcast(Intent)*

public void sendStickyBroadcast(android.content.Intent intent)





*android.content.ContextWrapper.sendStickyBroadcastAsUser(Intent,UserHandle)*

public void sendStickyBroadcastAsUser(
  android.content.Intent intent,
  android.os.UserHandle user)





*android.content.ContextWrapper.sendStickyOrderedBroadcast(Intent,BroadcastReceiver,Handler,int,String,Bundle)*

public void sendStickyOrderedBroadcast(
  android.content.Intent intent,
  android.content.BroadcastReceiver resultReceiver,
  android.os.Handler scheduler,
  int initialCode,
  java.lang.String initialData,
  android.os.Bundle initialExtras)





*android.content.ContextWrapper.sendStickyOrderedBroadcastAsUser(Intent,UserHandle,BroadcastReceiver,Handler,int,String,Bundle)*

public void sendStickyOrderedBroadcastAsUser(
  android.content.Intent intent,
  android.os.UserHandle user,
  android.content.BroadcastReceiver resultReceiver,
  android.os.Handler scheduler,
  int initialCode,
  java.lang.String initialData,
  android.os.Bundle initialExtras)





*android.content.ContextWrapper.setTheme(int)*

public void setTheme(int resid)





*android.content.ContextWrapper.setWallpaper(Bitmap)*

public void setWallpaper(Bitmap bitmap)
  throws |java.io.IOException|
         




*android.content.ContextWrapper.startActivities(Intent[])*

public void startActivities(android.content.Intent[] intents)





*android.content.ContextWrapper.startActivities(Intent[],Bundle)*

public void startActivities(
  android.content.Intent[] intents,
  android.os.Bundle options)





*android.content.ContextWrapper.startActivitiesAsUser(Intent[],Bundle,UserHandle)*

public void startActivitiesAsUser(
  android.content.Intent[] intents,
  android.os.Bundle options,
  android.os.UserHandle userHandle)





*android.content.ContextWrapper.startActivity(Intent)*

public void startActivity(android.content.Intent intent)





*android.content.ContextWrapper.startActivity(Intent,Bundle)*

public void startActivity(
  android.content.Intent intent,
  android.os.Bundle options)





*android.content.ContextWrapper.startActivityAsUser(Intent,Bundle,UserHandle)*

public void startActivityAsUser(
  android.content.Intent intent,
  android.os.Bundle options,
  android.os.UserHandle user)





*android.content.ContextWrapper.startActivityAsUser(Intent,UserHandle)*

public void startActivityAsUser(
  android.content.Intent intent,
  android.os.UserHandle user)





*android.content.ContextWrapper.startInstrumentation(ComponentName,String,Bundle)*

public boolean startInstrumentation(
  android.content.ComponentName className,
  java.lang.String profileFile,
  android.os.Bundle arguments)





*android.content.ContextWrapper.startIntentSender(IntentSender,Intent,int,int,int)*

public void startIntentSender(
  android.content.IntentSender intent,
  android.content.Intent fillInIntent,
  int flagsMask,
  int flagsValues,
  int extraFlags)
  throws |android.content.IntentSender.SendIntentException|
         




*android.content.ContextWrapper.startIntentSender(IntentSender,Intent,int,int,int,Bundle)*

public void startIntentSender(
  android.content.IntentSender intent,
  android.content.Intent fillInIntent,
  int flagsMask,
  int flagsValues,
  int extraFlags,
  android.os.Bundle options)
  throws |android.content.IntentSender.SendIntentException|
         




*android.content.ContextWrapper.startService(Intent)*

public |android.content.ComponentName| startService(android.content.Intent service)





*android.content.ContextWrapper.startServiceAsUser(Intent,UserHandle)*

public |android.content.ComponentName| startServiceAsUser(
  android.content.Intent service,
  android.os.UserHandle user)





*android.content.ContextWrapper.stopService(Intent)*

public boolean stopService(android.content.Intent name)





*android.content.ContextWrapper.stopServiceAsUser(Intent,UserHandle)*

public boolean stopServiceAsUser(
  android.content.Intent name,
  android.os.UserHandle user)





*android.content.ContextWrapper.unbindService(ServiceConnection)*

public void unbindService(android.content.ServiceConnection conn)





*android.content.ContextWrapper.unregisterReceiver(BroadcastReceiver)*

public void unregisterReceiver(android.content.BroadcastReceiver receiver)






