*android.app.backup.FullBackup* *FullBackup* Global constant definitions et cete

public class FullBackup
  extends    |java.lang.Object|

|android.app.backup.FullBackup_Description|
|android.app.backup.FullBackup_Fields|
|android.app.backup.FullBackup_Constructors|
|android.app.backup.FullBackup_Methods|

================================================================================

*android.app.backup.FullBackup_Fields*
|java.lang.String_android.app.backup.FullBackup.APK_TREE_TOKEN|
|java.lang.String_android.app.backup.FullBackup.APPS_PREFIX|
|java.lang.String_android.app.backup.FullBackup.CACHE_TREE_TOKEN|
|java.lang.String_android.app.backup.FullBackup.CONF_TOKEN_INTENT_EXTRA|
|java.lang.String_android.app.backup.FullBackup.DATA_TREE_TOKEN|
|java.lang.String_android.app.backup.FullBackup.DATABASE_TREE_TOKEN|
|java.lang.String_android.app.backup.FullBackup.FULL_BACKUP_INTENT_ACTION|
|java.lang.String_android.app.backup.FullBackup.FULL_RESTORE_INTENT_ACTION|
|java.lang.String_android.app.backup.FullBackup.MANAGED_EXTERNAL_TREE_TOKEN|
|java.lang.String_android.app.backup.FullBackup.OBB_TREE_TOKEN|
|java.lang.String_android.app.backup.FullBackup.ROOT_TREE_TOKEN|
|java.lang.String_android.app.backup.FullBackup.SHARED_PREFIX|
|java.lang.String_android.app.backup.FullBackup.SHARED_STORAGE_TOKEN|
|java.lang.String_android.app.backup.FullBackup.SHAREDPREFS_TREE_TOKEN|

*android.app.backup.FullBackup_Constructors*
|android.app.backup.FullBackup()|

*android.app.backup.FullBackup_Methods*
|android.app.backup.FullBackup.backupToTar(String,String,String,String,String,BackupDataOutput)|
|android.app.backup.FullBackup.restoreFile(ParcelFileDescriptor,long,int,long,long,File)|

*android.app.backup.FullBackup_Description*

Global constant definitions et cetera related to the full-backup-to-fd binary 
format. Nothing in this namespace is part of any API; it's all hidden details 
of the current implementation gathered into one location. 



*java.lang.String_android.app.backup.FullBackup.APK_TREE_TOKEN*




*java.lang.String_android.app.backup.FullBackup.APPS_PREFIX*




*java.lang.String_android.app.backup.FullBackup.CACHE_TREE_TOKEN*




*java.lang.String_android.app.backup.FullBackup.CONF_TOKEN_INTENT_EXTRA*




*java.lang.String_android.app.backup.FullBackup.DATA_TREE_TOKEN*




*java.lang.String_android.app.backup.FullBackup.DATABASE_TREE_TOKEN*




*java.lang.String_android.app.backup.FullBackup.FULL_BACKUP_INTENT_ACTION*




*java.lang.String_android.app.backup.FullBackup.FULL_RESTORE_INTENT_ACTION*




*java.lang.String_android.app.backup.FullBackup.MANAGED_EXTERNAL_TREE_TOKEN*




*java.lang.String_android.app.backup.FullBackup.OBB_TREE_TOKEN*




*java.lang.String_android.app.backup.FullBackup.ROOT_TREE_TOKEN*




*java.lang.String_android.app.backup.FullBackup.SHARED_PREFIX*




*java.lang.String_android.app.backup.FullBackup.SHARED_STORAGE_TOKEN*




*java.lang.String_android.app.backup.FullBackup.SHAREDPREFS_TREE_TOKEN*





*android.app.backup.FullBackup()*

public FullBackup()




*android.app.backup.FullBackup.backupToTar(String,String,String,String,String,BackupDataOutput)*

public static native int backupToTar(
  java.lang.String packageName,
  java.lang.String domain,
  java.lang.String linkdomain,
  java.lang.String rootpath,
  java.lang.String path,
  android.app.backup.BackupDataOutput output)





*android.app.backup.FullBackup.restoreFile(ParcelFileDescriptor,long,int,long,long,File)*

public static void restoreFile(
  android.os.ParcelFileDescriptor data,
  long size,
  int type,
  long mode,
  long mtime,
  java.io.File outFile)
  throws |java.io.IOException|
         
Copy data from a socket to the given File location on permanent storage. The 
modification time and access mode of the resulting file will be set if desired, 
although group/all rwx modes will be stripped: the restored file will not be 
accessible from outside the target application even if the original file was. 
If thetypeparameter indicates that the result should be a directory, the socket 
parameter may benull; even if it is valid, no data will be read from it in this 
case. 

If themodeargument is negative, then the resulting output file will not have 
its access mode or last modification time reset as part of this operation. 


    data - Socket supplying the data to be copied to the output file. If the output is a 
       directory, this may be {@code null}. 
    size - Number of bytes of data to copy from the socket to the file. At least this much 
       data must be available through the {@code data} parameter. 
    type - Must be either {@link BackupAgent#TYPE_FILE} for ordinary file data or {@link 
       BackupAgent#TYPE_DIRECTORY} for a directory. 
    mode - Unix-style file mode (as used by the chmod(2) syscall) to be set on the output 
       file or directory. group/all rwx modes are stripped even if set in this 
       parameter. If this parameter is negative then neither the mode nor the 
       mtime values will be applied to the restored file. 
    mtime - A timestamp in the standard Unix epoch that will be imposed as the last 
       modification time of the output file. if the {@code mode} parameter is 
       negative then this parameter will be ignored. 
    outFile - Location within the filesystem to place the data. This must point to a location 
       that is writeable by the caller, preferably using an absolute path. 


