*android.view.textservice.SpellCheckerSession* *SpellCheckerSession* The SpellCh

public class SpellCheckerSession
  extends    |java.lang.Object|

|android.view.textservice.SpellCheckerSession_Description|
|android.view.textservice.SpellCheckerSession_Fields|
|android.view.textservice.SpellCheckerSession_Constructors|
|android.view.textservice.SpellCheckerSession_Methods|

================================================================================

*android.view.textservice.SpellCheckerSession_Fields*
|java.lang.String_android.view.textservice.SpellCheckerSession.SERVICE_META_DATA|

*android.view.textservice.SpellCheckerSession_Constructors*
|android.view.textservice.SpellCheckerSession(SpellCheckerInfo,ITextServicesManager,SpellCheckerSession.SpellCheckerSessionListener,SpellCheckerSubtype)|

*android.view.textservice.SpellCheckerSession_Methods*
|android.view.textservice.SpellCheckerSession.cancel()|Cancel pending and runni
|android.view.textservice.SpellCheckerSession.close()|Finish this session and a
|android.view.textservice.SpellCheckerSession.finalize()|
|android.view.textservice.SpellCheckerSession.getSentenceSuggestions(TextInfo[],int)|
|android.view.textservice.SpellCheckerSession.getSpellChecker()|Get the spell c
|android.view.textservice.SpellCheckerSession.getSpellCheckerSessionListener()|
|android.view.textservice.SpellCheckerSession.getSuggestions(TextInfo[],int,boolean)|
|android.view.textservice.SpellCheckerSession.getSuggestions(TextInfo,int)|Get 
|android.view.textservice.SpellCheckerSession.getTextServicesSessionListener()|
|android.view.textservice.SpellCheckerSession.isSessionDisconnected()|

*android.view.textservice.SpellCheckerSession_Description*

The SpellCheckerSession interface provides the per client functionality of 
SpellCheckerService. 

Applications 

In most cases, applications that are using the standard 
(|android.widget.TextView|) or its subclasses will have little they need to do 
to work well with spell checker services. The main things you need to be aware 
of are: 

Properly set the (|android.R.attr|) in your editable text views, so that the 
spell checker will have enough context to help the user in editing text in 
them. 

For the rare people amongst us writing client applications that use the spell 
checker service directly, you will need to use 
(|android.view.textservice.SpellCheckerSession|) or 
(|android.view.textservice.SpellCheckerSession|) for obtaining results from the 
spell checker service by yourself. 

Security 

There are a lot of security issues associated with spell checkers, since they 
could monitor all the text being sent to them through, for instance, 
(|android.widget.TextView|) . The Android spell checker framework also allows 
arbitrary third party spell checkers, so care must be taken to restrict their 
selection and interactions. 

Here are some key points about the security architecture behind the spell 
checker framework: 

Only the system is allowed to directly access a spell checker framework's 
(|android.service.textservice.SpellCheckerService|) interface, via the 
(|android.Manifest.permission|) permission. This is enforced in the system by 
not binding to a spell checker service that does not require this permission. 

The user must explicitly enable a new spell checker in settings before they can 
be enabled, to confirm with the system that they know about it and want to make 
it available for use. 



*java.lang.String_android.view.textservice.SpellCheckerSession.SERVICE_META_DATA*

Name under which a SpellChecker service component publishes information about 
itself. This meta-data must reference an XML resource. 



*android.view.textservice.SpellCheckerSession(SpellCheckerInfo,ITextServicesManager,SpellCheckerSession.SpellCheckerSessionListener,SpellCheckerSubtype)*

public SpellCheckerSession(
  android.view.textservice.SpellCheckerInfo info,
  ITextServicesManager tsm,
  android.view.textservice.SpellCheckerSession.SpellCheckerSessionListener listener,
  android.view.textservice.SpellCheckerSubtype subtype)

Constructor 


*android.view.textservice.SpellCheckerSession.cancel()*

public void cancel()

Cancel pending and running spell check tasks 



*android.view.textservice.SpellCheckerSession.close()*

public void close()

Finish this session and allow TextServicesManagerService to disconnect the 
bound spell checker. 



*android.view.textservice.SpellCheckerSession.finalize()*

protected void finalize()
  throws |java.lang.Throwable|
         




*android.view.textservice.SpellCheckerSession.getSentenceSuggestions(TextInfo[],int)*

public void getSentenceSuggestions(
  android.view.textservice.TextInfo[] textInfos,
  int suggestionsLimit)

Get suggestions from the specified sentences 


    textInfos - an array of text metadata for a spell checker 
    suggestionsLimit - the maximum number of suggestions that will be returned 

*android.view.textservice.SpellCheckerSession.getSpellChecker()*

public |android.view.textservice.SpellCheckerInfo| getSpellChecker()

Get the spell checker service info this spell checker session has. 



    Returns: SpellCheckerInfo for the specified locale. 

*android.view.textservice.SpellCheckerSession.getSpellCheckerSessionListener()*

public ISpellCheckerSessionListener getSpellCheckerSessionListener()





*android.view.textservice.SpellCheckerSession.getSuggestions(TextInfo[],int,boolean)*

public void getSuggestions(
  android.view.textservice.TextInfo[] textInfos,
  int suggestionsLimit,
  boolean sequentialWords)

A batch process of getSuggestions 

    Deprecated: use {@link SpellCheckerSession#getSentenceSuggestions(TextInfo[], int)} instead

    textInfos - an array of text metadata for a spell checker 
    suggestionsLimit - the maximum number of suggestions that will be returned 
    sequentialWords - true if textInfos can be treated as sequential words. 

*android.view.textservice.SpellCheckerSession.getSuggestions(TextInfo,int)*

public void getSuggestions(
  android.view.textservice.TextInfo textInfo,
  int suggestionsLimit)

Get candidate strings for a substring of the specified text. 

    Deprecated: use {@link SpellCheckerSession#getSentenceSuggestions(TextInfo[], int)} instead

    textInfo - text metadata for a spell checker 
    suggestionsLimit - the maximum number of suggestions that will be returned 

*android.view.textservice.SpellCheckerSession.getTextServicesSessionListener()*

public ITextServicesSessionListener getTextServicesSessionListener()





*android.view.textservice.SpellCheckerSession.isSessionDisconnected()*

public boolean isSessionDisconnected()





    Returns: true if the connection to a text service of this session is disconnected and 
             not alive. 


