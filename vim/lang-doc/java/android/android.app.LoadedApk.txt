*android.app.LoadedApk* *LoadedApk* Local state maintained about a currently loa

public final class LoadedApk
  extends    |java.lang.Object|

|android.app.LoadedApk_Description|
|android.app.LoadedApk_Fields|
|android.app.LoadedApk_Constructors|
|android.app.LoadedApk_Methods|

================================================================================

*android.app.LoadedApk_Constructors*
|android.app.LoadedApk(ActivityThread,ApplicationInfo,CompatibilityInfo,ActivityThread,ClassLoader,boolean,boolean)|
|android.app.LoadedApk(ActivityThread,String,Context,ApplicationInfo,CompatibilityInfo)|

*android.app.LoadedApk_Methods*
|android.app.LoadedApk.forgetReceiverDispatcher(Context,BroadcastReceiver)|
|android.app.LoadedApk.forgetServiceDispatcher(Context,ServiceConnection)|
|android.app.LoadedApk.getAppDir()|
|android.app.LoadedApk.getApplicationInfo()|
|android.app.LoadedApk.getAssets(ActivityThread)|
|android.app.LoadedApk.getClassLoader()|
|android.app.LoadedApk.getCompatibilityInfo()|
|android.app.LoadedApk.getDataDir()|
|android.app.LoadedApk.getDataDirFile()|
|android.app.LoadedApk.getLibDir()|
|android.app.LoadedApk.getPackageName()|
|android.app.LoadedApk.getReceiverDispatcher(BroadcastReceiver,Context,Handler,Instrumentation,boolean)|
|android.app.LoadedApk.getResDir()|
|android.app.LoadedApk.getResources(ActivityThread)|
|android.app.LoadedApk.getServiceDispatcher(ServiceConnection,Context,Handler,int)|
|android.app.LoadedApk.isSecurityViolation()|
|android.app.LoadedApk.makeApplication(boolean,Instrumentation)|
|android.app.LoadedApk.removeContextRegistrations(Context,String,String)|
|android.app.LoadedApk.setCompatibilityInfo(CompatibilityInfo)|

*android.app.LoadedApk_Description*

Local state maintained about a currently loaded .apk. 



*android.app.LoadedApk(ActivityThread,ApplicationInfo,CompatibilityInfo,ActivityThread,ClassLoader,boolean,boolean)*

public LoadedApk(
  android.app.ActivityThread activityThread,
  android.content.pm.ApplicationInfo aInfo,
  android.content.res.CompatibilityInfo compatInfo,
  android.app.ActivityThread mainThread,
  java.lang.ClassLoader baseLoader,
  boolean securityViolation,
  boolean includeCode)

Create information about a new .apk 

NOTE: This constructor is called with ActivityThread's lock held, so MUST NOT 
call back out to the activity manager. 


*android.app.LoadedApk(ActivityThread,String,Context,ApplicationInfo,CompatibilityInfo)*

public LoadedApk(
  android.app.ActivityThread activityThread,
  java.lang.String name,
  android.content.Context systemContext,
  android.content.pm.ApplicationInfo info,
  android.content.res.CompatibilityInfo compatInfo)




*android.app.LoadedApk.forgetReceiverDispatcher(Context,BroadcastReceiver)*

public IIntentReceiver forgetReceiverDispatcher(
  android.content.Context context,
  android.content.BroadcastReceiver r)





*android.app.LoadedApk.forgetServiceDispatcher(Context,ServiceConnection)*

public final IServiceConnection forgetServiceDispatcher(
  android.content.Context context,
  android.content.ServiceConnection c)





*android.app.LoadedApk.getAppDir()*

public |java.lang.String| getAppDir()





*android.app.LoadedApk.getApplicationInfo()*

public |android.content.pm.ApplicationInfo| getApplicationInfo()





*android.app.LoadedApk.getAssets(ActivityThread)*

public |android.content.res.AssetManager| getAssets(android.app.ActivityThread mainThread)





*android.app.LoadedApk.getClassLoader()*

public |java.lang.ClassLoader| getClassLoader()





*android.app.LoadedApk.getCompatibilityInfo()*

public |android.content.res.CompatibilityInfo| getCompatibilityInfo()





*android.app.LoadedApk.getDataDir()*

public |java.lang.String| getDataDir()





*android.app.LoadedApk.getDataDirFile()*

public |java.io.File| getDataDirFile()





*android.app.LoadedApk.getLibDir()*

public |java.lang.String| getLibDir()





*android.app.LoadedApk.getPackageName()*

public |java.lang.String| getPackageName()





*android.app.LoadedApk.getReceiverDispatcher(BroadcastReceiver,Context,Handler,Instrumentation,boolean)*

public IIntentReceiver getReceiverDispatcher(
  android.content.BroadcastReceiver r,
  android.content.Context context,
  android.os.Handler handler,
  android.app.Instrumentation instrumentation,
  boolean registered)





*android.app.LoadedApk.getResDir()*

public |java.lang.String| getResDir()





*android.app.LoadedApk.getResources(ActivityThread)*

public |android.content.res.Resources| getResources(android.app.ActivityThread mainThread)





*android.app.LoadedApk.getServiceDispatcher(ServiceConnection,Context,Handler,int)*

public final IServiceConnection getServiceDispatcher(
  android.content.ServiceConnection c,
  android.content.Context context,
  android.os.Handler handler,
  int flags)





*android.app.LoadedApk.isSecurityViolation()*

public boolean isSecurityViolation()





*android.app.LoadedApk.makeApplication(boolean,Instrumentation)*

public |android.app.Application| makeApplication(
  boolean forceDefaultAppClass,
  android.app.Instrumentation instrumentation)





*android.app.LoadedApk.removeContextRegistrations(Context,String,String)*

public void removeContextRegistrations(
  android.content.Context context,
  java.lang.String who,
  java.lang.String what)





*android.app.LoadedApk.setCompatibilityInfo(CompatibilityInfo)*

public void setCompatibilityInfo(android.content.res.CompatibilityInfo compatInfo)






