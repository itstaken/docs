*android.os.CancellationSignal* *CancellationSignal* Provides the ability to can

public final class CancellationSignal
  extends    |java.lang.Object|

|android.os.CancellationSignal_Description|
|android.os.CancellationSignal_Fields|
|android.os.CancellationSignal_Constructors|
|android.os.CancellationSignal_Methods|

================================================================================

*android.os.CancellationSignal_Constructors*
|android.os.CancellationSignal()|Creates a cancellation signal, initially not c

*android.os.CancellationSignal_Methods*
|android.os.CancellationSignal.cancel()|Cancels the operation and signals the c
|android.os.CancellationSignal.createTransport()|Creates a transport that can b
|android.os.CancellationSignal.fromTransport(ICancellationSignal)|Given a local
|android.os.CancellationSignal.isCanceled()|Returns true if the operation has b
|android.os.CancellationSignal.setOnCancelListener(CancellationSignal.OnCancelListener)|
|android.os.CancellationSignal.setRemote(ICancellationSignal)|Sets the remote t
|android.os.CancellationSignal.throwIfCanceled()|ThrowsOperationCanceledExcepti

*android.os.CancellationSignal_Description*

Provides the ability to cancel an operation in progress. 



*android.os.CancellationSignal()*

public CancellationSignal()

Creates a cancellation signal, initially not canceled. 


*android.os.CancellationSignal.cancel()*

public void cancel()

Cancels the operation and signals the cancellation listener. If the operation 
has not yet started, then it will be canceled as soon as it does. 



*android.os.CancellationSignal.createTransport()*

public static ICancellationSignal createTransport()

Creates a transport that can be returned back to the caller of a Binder 
function and subsequently used to dispatch a cancellation signal. 



    Returns: The new cancellation signal transport. 

*android.os.CancellationSignal.fromTransport(ICancellationSignal)*

public static |android.os.CancellationSignal| fromTransport(ICancellationSignal transport)

Given a locally created transport, returns its associated cancellation signal. 


    transport - The locally created transport, or null if none. 

    Returns: The associated cancellation signal, or null if none. 

*android.os.CancellationSignal.isCanceled()*

public boolean isCanceled()

Returns true if the operation has been canceled. 



    Returns: True if the operation has been canceled. 

*android.os.CancellationSignal.setOnCancelListener(CancellationSignal.OnCancelListener)*

public void setOnCancelListener(android.os.CancellationSignal.OnCancelListener listener)

Sets the cancellation listener to be called when canceled. 

This method is intended to be used by the recipient of a cancellation signal 
such as a database or a content provider to handle cancellation requests while 
performing a long-running operation. This method is not intended to be used by 
applications themselves. 

If (|android.os.CancellationSignal|) has already been called, then the provided 
listener is invoked immediately. 

This method is guaranteed that the listener will not be called after it has 
been removed. 


    listener - The cancellation listener, or null to remove the current listener. 

*android.os.CancellationSignal.setRemote(ICancellationSignal)*

public void setRemote(ICancellationSignal remote)

Sets the remote transport. 

If (|android.os.CancellationSignal|) has already been called, then the provided 
remote transport is canceled immediately. 

This method is guaranteed that the remote transport will not be called after it 
has been removed. 


    remote - The remote transport, or null to remove. 

*android.os.CancellationSignal.throwIfCanceled()*

public void throwIfCanceled()

Throws (|android.os.OperationCanceledException|) if the operation has been 
canceled. 




