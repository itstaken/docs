*android.widget.HorizontalScrollView* *HorizontalScrollView* Layout container fo

public class HorizontalScrollView
  extends    |android.widget.FrameLayout|

|android.widget.HorizontalScrollView_Description|
|android.widget.HorizontalScrollView_Fields|
|android.widget.HorizontalScrollView_Constructors|
|android.widget.HorizontalScrollView_Methods|

================================================================================

*android.widget.HorizontalScrollView_Constructors*
|android.widget.HorizontalScrollView(Context)|
|android.widget.HorizontalScrollView(Context,AttributeSet)|
|android.widget.HorizontalScrollView(Context,AttributeSet,int)|

*android.widget.HorizontalScrollView_Methods*
|android.widget.HorizontalScrollView.addView(View)|
|android.widget.HorizontalScrollView.addView(View,int)|
|android.widget.HorizontalScrollView.addView(View,int,ViewGroup.LayoutParams)|
|android.widget.HorizontalScrollView.addView(View,ViewGroup.LayoutParams)|
|android.widget.HorizontalScrollView.arrowScroll(int)|Handle scrolling in respo
|android.widget.HorizontalScrollView.computeHorizontalScrollOffset()|
|android.widget.HorizontalScrollView.computeHorizontalScrollRange()|The scroll 
|android.widget.HorizontalScrollView.computeScroll()|
|android.widget.HorizontalScrollView.computeScrollDeltaToGetChildRectOnScreen(Rect)|
|android.widget.HorizontalScrollView.dispatchKeyEvent(KeyEvent)|
|android.widget.HorizontalScrollView.draw(Canvas)|
|android.widget.HorizontalScrollView.executeKeyEvent(KeyEvent)|You can call thi
|android.widget.HorizontalScrollView.fling(int)|Fling the scroll view
|android.widget.HorizontalScrollView.fullScroll(int)|Handles scrolling in respo
|android.widget.HorizontalScrollView.getLeftFadingEdgeStrength()|
|android.widget.HorizontalScrollView.getMaxScrollAmount()|
|android.widget.HorizontalScrollView.getRightFadingEdgeStrength()|
|android.widget.HorizontalScrollView.isFillViewport()|Indicates whether this Ho
|android.widget.HorizontalScrollView.isSmoothScrollingEnabled()|
|android.widget.HorizontalScrollView.measureChild(View,int,int)|
|android.widget.HorizontalScrollView.measureChildWithMargins(View,int,int,int,int)|
|android.widget.HorizontalScrollView.onGenericMotionEvent(MotionEvent)|
|android.widget.HorizontalScrollView.onInitializeAccessibilityEvent(AccessibilityEvent)|
|android.widget.HorizontalScrollView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)|
|android.widget.HorizontalScrollView.onInterceptTouchEvent(MotionEvent)|
|android.widget.HorizontalScrollView.onLayout(boolean,int,int,int,int)|
|android.widget.HorizontalScrollView.onMeasure(int,int)|
|android.widget.HorizontalScrollView.onOverScrolled(int,int,boolean,boolean)|
|android.widget.HorizontalScrollView.onRequestFocusInDescendants(int,Rect)|When
|android.widget.HorizontalScrollView.onRestoreInstanceState(Parcelable)|
|android.widget.HorizontalScrollView.onSaveInstanceState()|
|android.widget.HorizontalScrollView.onSizeChanged(int,int,int,int)|
|android.widget.HorizontalScrollView.onTouchEvent(MotionEvent)|
|android.widget.HorizontalScrollView.pageScroll(int)|Handles scrolling in respo
|android.widget.HorizontalScrollView.performAccessibilityAction(int,Bundle)|
|android.widget.HorizontalScrollView.requestChildFocus(View,View)|
|android.widget.HorizontalScrollView.requestChildRectangleOnScreen(View,Rect,boolean)|
|android.widget.HorizontalScrollView.requestDisallowInterceptTouchEvent(boolean)|
|android.widget.HorizontalScrollView.requestLayout()|
|android.widget.HorizontalScrollView.scrollTo(int,int)|
|android.widget.HorizontalScrollView.setFillViewport(boolean)|Indicates this Ho
|android.widget.HorizontalScrollView.setOverScrollMode(int)|
|android.widget.HorizontalScrollView.setSmoothScrollingEnabled(boolean)|Set whe
|android.widget.HorizontalScrollView.shouldDelayChildPressedState()|
|android.widget.HorizontalScrollView.smoothScrollBy(int,int)|LikeView#scrollBy,
|android.widget.HorizontalScrollView.smoothScrollTo(int,int)|Like#scrollTo, but

*android.widget.HorizontalScrollView_Description*

Layout container for a view hierarchy that can be scrolled by the user, 
allowing it to be larger than the physical display. A HorizontalScrollView is a 
(|android.widget.FrameLayout|) , meaning you should place one child in it 
containing the entire contents to scroll; this child may itself be a layout 
manager with a complex hierarchy of objects. A child that is often used is a 
(|android.widget.LinearLayout|) in a horizontal orientation, presenting a 
horizontal array of top-level items that the user can scroll through. 

The (|android.widget.TextView|) class also takes care of its own scrolling, so 
does not require a HorizontalScrollView, but using the two together is possible 
to achieve the effect of a text view within a larger container. 

HorizontalScrollView only supports horizontal scrolling. For vertical 
scrolling, use either (|android.widget.ScrollView|) or 
(|android.widget.ListView|) . 



*android.widget.HorizontalScrollView(Context)*

public HorizontalScrollView(android.content.Context context)




*android.widget.HorizontalScrollView(Context,AttributeSet)*

public HorizontalScrollView(
  android.content.Context context,
  android.util.AttributeSet attrs)




*android.widget.HorizontalScrollView(Context,AttributeSet,int)*

public HorizontalScrollView(
  android.content.Context context,
  android.util.AttributeSet attrs,
  int defStyle)




*android.widget.HorizontalScrollView.addView(View)*

public void addView(android.view.View child)





*android.widget.HorizontalScrollView.addView(View,int)*

public void addView(
  android.view.View child,
  int index)





*android.widget.HorizontalScrollView.addView(View,int,ViewGroup.LayoutParams)*

public void addView(
  android.view.View child,
  int index,
  android.view.ViewGroup.LayoutParams params)





*android.widget.HorizontalScrollView.addView(View,ViewGroup.LayoutParams)*

public void addView(
  android.view.View child,
  android.view.ViewGroup.LayoutParams params)





*android.widget.HorizontalScrollView.arrowScroll(int)*

public boolean arrowScroll(int direction)

Handle scrolling in response to a left or right arrow click. 


    direction - The direction corresponding to the arrow key that was pressed 

    Returns: True if we consumed the event, false otherwise 

*android.widget.HorizontalScrollView.computeHorizontalScrollOffset()*

protected int computeHorizontalScrollOffset()





*android.widget.HorizontalScrollView.computeHorizontalScrollRange()*

protected int computeHorizontalScrollRange()

The scroll range of a scroll view is the overall width of all of its children. 



*android.widget.HorizontalScrollView.computeScroll()*

public void computeScroll()





*android.widget.HorizontalScrollView.computeScrollDeltaToGetChildRectOnScreen(Rect)*

protected int computeScrollDeltaToGetChildRectOnScreen(Rect rect)

Compute the amount to scroll in the X direction in order to get a rectangle 
completely on the screen (or, if taller than the screen, at least the first 
screen size chunk of it). 


    rect - The rect. 

    Returns: The scroll delta. 

*android.widget.HorizontalScrollView.dispatchKeyEvent(KeyEvent)*

public boolean dispatchKeyEvent(android.view.KeyEvent event)





*android.widget.HorizontalScrollView.draw(Canvas)*

public void draw(Canvas canvas)





*android.widget.HorizontalScrollView.executeKeyEvent(KeyEvent)*

public boolean executeKeyEvent(android.view.KeyEvent event)

You can call this function yourself to have the scroll view perform scrolling 
from a key event, just as if the event had been dispatched to it by the view 
hierarchy. 


    event - The key event to execute. 

    Returns: Return true if the event was handled, else false. 

*android.widget.HorizontalScrollView.fling(int)*

public void fling(int velocityX)

Fling the scroll view 


    velocityX - The initial velocity in the X direction. Positive numbers mean that the 
       finger/cursor is moving down the screen, which means we want to scroll 
       towards the left. 

*android.widget.HorizontalScrollView.fullScroll(int)*

public boolean fullScroll(int direction)

Handles scrolling in response to a "home/end" shortcut press. This method will 
scroll the view to the left or right and give the focus to the 
leftmost/rightmost component in the new visible area. If no component is a good 
candidate for focus, this scrollview reclaims the focus. 


    direction - the scroll direction: {@link android.view.View#FOCUS_LEFT} to go the left of 
       the view or {@link android.view.View#FOCUS_RIGHT} to go the right 

    Returns: true if the key event is consumed by this method, false otherwise 

*android.widget.HorizontalScrollView.getLeftFadingEdgeStrength()*

protected float getLeftFadingEdgeStrength()





*android.widget.HorizontalScrollView.getMaxScrollAmount()*

public int getMaxScrollAmount()





    Returns: The maximum amount this scroll view will scroll in response to an arrow event. 

*android.widget.HorizontalScrollView.getRightFadingEdgeStrength()*

protected float getRightFadingEdgeStrength()





*android.widget.HorizontalScrollView.isFillViewport()*

public boolean isFillViewport()

Indicates whether this HorizontalScrollView's content is stretched to fill the 
viewport. 



    Returns: True if the content fills the viewport, false otherwise. 

*android.widget.HorizontalScrollView.isSmoothScrollingEnabled()*

public boolean isSmoothScrollingEnabled()





    Returns: Whether arrow scrolling will animate its transition. 

*android.widget.HorizontalScrollView.measureChild(View,int,int)*

protected void measureChild(
  android.view.View child,
  int parentWidthMeasureSpec,
  int parentHeightMeasureSpec)





*android.widget.HorizontalScrollView.measureChildWithMargins(View,int,int,int,int)*

protected void measureChildWithMargins(
  android.view.View child,
  int parentWidthMeasureSpec,
  int widthUsed,
  int parentHeightMeasureSpec,
  int heightUsed)





*android.widget.HorizontalScrollView.onGenericMotionEvent(MotionEvent)*

public boolean onGenericMotionEvent(android.view.MotionEvent event)





*android.widget.HorizontalScrollView.onInitializeAccessibilityEvent(AccessibilityEvent)*

public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent event)





*android.widget.HorizontalScrollView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)*

public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo info)





*android.widget.HorizontalScrollView.onInterceptTouchEvent(MotionEvent)*

public boolean onInterceptTouchEvent(android.view.MotionEvent ev)





*android.widget.HorizontalScrollView.onLayout(boolean,int,int,int,int)*

protected void onLayout(
  boolean changed,
  int l,
  int t,
  int r,
  int b)





*android.widget.HorizontalScrollView.onMeasure(int,int)*

protected void onMeasure(
  int widthMeasureSpec,
  int heightMeasureSpec)





*android.widget.HorizontalScrollView.onOverScrolled(int,int,boolean,boolean)*

protected void onOverScrolled(
  int scrollX,
  int scrollY,
  boolean clampedX,
  boolean clampedY)





*android.widget.HorizontalScrollView.onRequestFocusInDescendants(int,Rect)*

protected boolean onRequestFocusInDescendants(
  int direction,
  Rect previouslyFocusedRect)

When looking for focus in children of a scroll view, need to be a little more 
careful not to give focus to something that is scrolled off screen. 

This is more expensive than the default (|android.view.ViewGroup|) 
implementation, otherwise this behavior might have been made the default. 



*android.widget.HorizontalScrollView.onRestoreInstanceState(Parcelable)*

protected void onRestoreInstanceState(android.os.Parcelable state)





*android.widget.HorizontalScrollView.onSaveInstanceState()*

protected |android.os.Parcelable| onSaveInstanceState()





*android.widget.HorizontalScrollView.onSizeChanged(int,int,int,int)*

protected void onSizeChanged(
  int w,
  int h,
  int oldw,
  int oldh)





*android.widget.HorizontalScrollView.onTouchEvent(MotionEvent)*

public boolean onTouchEvent(android.view.MotionEvent ev)





*android.widget.HorizontalScrollView.pageScroll(int)*

public boolean pageScroll(int direction)

Handles scrolling in response to a "page up/down" shortcut press. This method 
will scroll the view by one page left or right and give the focus to the 
leftmost/rightmost component in the new visible area. If no component is a good 
candidate for focus, this scrollview reclaims the focus. 


    direction - the scroll direction: {@link android.view.View#FOCUS_LEFT} to go one page left 
       or {@link android.view.View#FOCUS_RIGHT} to go one page right 

    Returns: true if the key event is consumed by this method, false otherwise 

*android.widget.HorizontalScrollView.performAccessibilityAction(int,Bundle)*

public boolean performAccessibilityAction(
  int action,
  android.os.Bundle arguments)





*android.widget.HorizontalScrollView.requestChildFocus(View,View)*

public void requestChildFocus(
  android.view.View child,
  android.view.View focused)





*android.widget.HorizontalScrollView.requestChildRectangleOnScreen(View,Rect,boolean)*

public boolean requestChildRectangleOnScreen(
  android.view.View child,
  Rect rectangle,
  boolean immediate)





*android.widget.HorizontalScrollView.requestDisallowInterceptTouchEvent(boolean)*

public void requestDisallowInterceptTouchEvent(boolean disallowIntercept)





*android.widget.HorizontalScrollView.requestLayout()*

public void requestLayout()





*android.widget.HorizontalScrollView.scrollTo(int,int)*

public void scrollTo(
  int x,
  int y)

This version also clamps the scrolling to the bounds of our child. 



*android.widget.HorizontalScrollView.setFillViewport(boolean)*

public void setFillViewport(boolean fillViewport)

Indicates this HorizontalScrollView whether it should stretch its content width 
to fill the viewport or not. 


    fillViewport - True to stretch the content's width to the viewport's boundaries, false 
       otherwise. 

*android.widget.HorizontalScrollView.setOverScrollMode(int)*

public void setOverScrollMode(int mode)





*android.widget.HorizontalScrollView.setSmoothScrollingEnabled(boolean)*

public void setSmoothScrollingEnabled(boolean smoothScrollingEnabled)

Set whether arrow scrolling will animate its transition. 


    smoothScrollingEnabled - whether arrow scrolling will animate its transition 

*android.widget.HorizontalScrollView.shouldDelayChildPressedState()*

public boolean shouldDelayChildPressedState()





*android.widget.HorizontalScrollView.smoothScrollBy(int,int)*

public final void smoothScrollBy(
  int dx,
  int dy)

Like (|android.view.View|) , but scroll smoothly instead of immediately. 


    dx - the number of pixels to scroll by on the X axis 
    dy - the number of pixels to scroll by on the Y axis 

*android.widget.HorizontalScrollView.smoothScrollTo(int,int)*

public final void smoothScrollTo(
  int x,
  int y)

Like (|android.widget.HorizontalScrollView|) , but scroll smoothly instead of 
immediately. 


    x - the position where to scroll on the X axis 
    y - the position where to scroll on the Y axis 


