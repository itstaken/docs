*android.widget.AdapterView* *AdapterView* An AdapterView is a view whose childr

public abstract class AdapterView<T extends android.widget.Adapter>
  extends    |android.view.ViewGroup|

|android.widget.AdapterView_Description|
|android.widget.AdapterView_Fields|
|android.widget.AdapterView_Constructors|
|android.widget.AdapterView_Methods|

================================================================================

*android.widget.AdapterView_Fields*
|int_android.widget.AdapterView.INVALID_POSITION|
|long_android.widget.AdapterView.INVALID_ROW_ID|
|int_android.widget.AdapterView.ITEM_VIEW_TYPE_HEADER_OR_FOOTER|
|int_android.widget.AdapterView.ITEM_VIEW_TYPE_IGNORE|

*android.widget.AdapterView_Constructors*
|android.widget.AdapterView(Context)|
|android.widget.AdapterView(Context,AttributeSet)|
|android.widget.AdapterView(Context,AttributeSet,int)|

*android.widget.AdapterView_Methods*
|android.widget.AdapterView.addView(View)|This method is not supported and thro
|android.widget.AdapterView.addView(View,int)|This method is not supported and 
|android.widget.AdapterView.addView(View,int,ViewGroup.LayoutParams)|This metho
|android.widget.AdapterView.addView(View,ViewGroup.LayoutParams)|This method is
|android.widget.AdapterView.canAnimate()|
|android.widget.AdapterView.dispatchPopulateAccessibilityEvent(AccessibilityEvent)|
|android.widget.AdapterView.dispatchRestoreInstanceState(SparseArray<Parcelable>)|
|android.widget.AdapterView.dispatchSaveInstanceState(SparseArray<Parcelable>)|
|android.widget.AdapterView.getAdapter()|Returns the adapter currently associat
|android.widget.AdapterView.getCount()|
|android.widget.AdapterView.getEmptyView()|When the current adapter is empty, t
|android.widget.AdapterView.getFirstVisiblePosition()|Returns the position with
|android.widget.AdapterView.getItemAtPosition(int)|Gets the data associated wit
|android.widget.AdapterView.getItemIdAtPosition(int)|
|android.widget.AdapterView.getLastVisiblePosition()|Returns the position withi
|android.widget.AdapterView.getOnItemClickListener()|
|android.widget.AdapterView.getOnItemLongClickListener()|
|android.widget.AdapterView.getOnItemSelectedListener()|
|android.widget.AdapterView.getPositionForView(View)|Get the position within th
|android.widget.AdapterView.getSelectedItem()|
|android.widget.AdapterView.getSelectedItemId()|
|android.widget.AdapterView.getSelectedItemPosition()|Return the position of th
|android.widget.AdapterView.getSelectedView()|
|android.widget.AdapterView.onDetachedFromWindow()|
|android.widget.AdapterView.onInitializeAccessibilityEvent(AccessibilityEvent)|
|android.widget.AdapterView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)|
|android.widget.AdapterView.onLayout(boolean,int,int,int,int)|
|android.widget.AdapterView.onRequestSendAccessibilityEvent(View,AccessibilityEvent)|
|android.widget.AdapterView.performItemClick(View,int,long)|Call the OnItemClic
|android.widget.AdapterView.removeAllViews()|This method is not supported and t
|android.widget.AdapterView.removeView(View)|This method is not supported and t
|android.widget.AdapterView.removeViewAt(int)|This method is not supported and 
|android.widget.AdapterView.setAdapter(T)|Sets the adapter that provides the da
|android.widget.AdapterView.setEmptyView(View)|Sets the view to show if the ada
|android.widget.AdapterView.setFocusable(boolean)|
|android.widget.AdapterView.setFocusableInTouchMode(boolean)|
|android.widget.AdapterView.setOnClickListener(View.OnClickListener)|
|android.widget.AdapterView.setOnItemClickListener(AdapterView.OnItemClickListener)|
|android.widget.AdapterView.setOnItemLongClickListener(AdapterView.OnItemLongClickListener)|
|android.widget.AdapterView.setOnItemSelectedListener(AdapterView.OnItemSelectedListener)|
|android.widget.AdapterView.setSelection(int)|Sets the currently selected item.

*android.widget.AdapterView_Description*

An AdapterView is a view whose children are determined by an 
(|android.widget.Adapter|) . 

See (|android.widget.ListView|) , (|android.widget.GridView|) , 
(|android.widget.Spinner|) and (|android.widget.Gallery|) for commonly used 
subclasses of AdapterView. 

Developer Guides For more information about using AdapterView, read the <a 
href="guide/topics/ui/binding.html">Binding to Data with AdapterView developer 
guide. 



*int_android.widget.AdapterView.INVALID_POSITION*

Represents an invalid position. All valid positions are in the range 0 to 1 
less than the number of items in the current adapter. 


*long_android.widget.AdapterView.INVALID_ROW_ID*

Represents an empty or invalid row id 


*int_android.widget.AdapterView.ITEM_VIEW_TYPE_HEADER_OR_FOOTER*

The item view type returned by (|android.widget.Adapter|) when the item is a 
header or footer. 


*int_android.widget.AdapterView.ITEM_VIEW_TYPE_IGNORE*

The item view type returned by (|android.widget.Adapter|) when the adapter does 
not want the item's view recycled. 



*android.widget.AdapterView(Context)*

public AdapterView(android.content.Context context)




*android.widget.AdapterView(Context,AttributeSet)*

public AdapterView(
  android.content.Context context,
  android.util.AttributeSet attrs)




*android.widget.AdapterView(Context,AttributeSet,int)*

public AdapterView(
  android.content.Context context,
  android.util.AttributeSet attrs,
  int defStyle)




*android.widget.AdapterView.addView(View)*

public void addView(android.view.View child)

This method is not supported and throws an UnsupportedOperationException when 
called. 


    child - Ignored. 

*android.widget.AdapterView.addView(View,int)*

public void addView(
  android.view.View child,
  int index)

This method is not supported and throws an UnsupportedOperationException when 
called. 


    child - Ignored. 
    index - Ignored. 

*android.widget.AdapterView.addView(View,int,ViewGroup.LayoutParams)*

public void addView(
  android.view.View child,
  int index,
  android.view.ViewGroup.LayoutParams params)

This method is not supported and throws an UnsupportedOperationException when 
called. 


    child - Ignored. 
    index - Ignored. 
    params - Ignored. 

*android.widget.AdapterView.addView(View,ViewGroup.LayoutParams)*

public void addView(
  android.view.View child,
  android.view.ViewGroup.LayoutParams params)

This method is not supported and throws an UnsupportedOperationException when 
called. 


    child - Ignored. 
    params - Ignored. 

*android.widget.AdapterView.canAnimate()*

protected boolean canAnimate()





*android.widget.AdapterView.dispatchPopulateAccessibilityEvent(AccessibilityEvent)*

public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent event)





*android.widget.AdapterView.dispatchRestoreInstanceState(SparseArray<Parcelable>)*

protected void dispatchRestoreInstanceState(android.util.SparseArray<android.os.Parcelable> container)

Override to prevent thawing of any views created by the adapter. 



*android.widget.AdapterView.dispatchSaveInstanceState(SparseArray<Parcelable>)*

protected void dispatchSaveInstanceState(android.util.SparseArray<android.os.Parcelable> container)

Override to prevent freezing of any views created by the adapter. 



*android.widget.AdapterView.getAdapter()*

public abstract |T| getAdapter()

Returns the adapter currently associated with this widget. 



    Returns: The adapter used to provide this view's content. 

*android.widget.AdapterView.getCount()*

public int getCount()





    Returns: The number of items owned by the Adapter associated with this AdapterView. 
             (This is the number of data items, which may be larger than the 
             number of visible views.) 

*android.widget.AdapterView.getEmptyView()*

public |android.view.View| getEmptyView()

When the current adapter is empty, the AdapterView can display a special view 
call the empty view. The empty view is used to provide feedback to the user 
that no data is available in this AdapterView. 



    Returns: The view to show if the adapter is empty. 

*android.widget.AdapterView.getFirstVisiblePosition()*

public int getFirstVisiblePosition()

Returns the position within the adapter's data set for the first item displayed 
on screen. 



    Returns: The position within the adapter's data set 

*android.widget.AdapterView.getItemAtPosition(int)*

public |java.lang.Object| getItemAtPosition(int position)

Gets the data associated with the specified position in the list. 


    position - Which data to get 

    Returns: The data associated with the specified position in the list 

*android.widget.AdapterView.getItemIdAtPosition(int)*

public long getItemIdAtPosition(int position)





*android.widget.AdapterView.getLastVisiblePosition()*

public int getLastVisiblePosition()

Returns the position within the adapter's data set for the last item displayed 
on screen. 



    Returns: The position within the adapter's data set 

*android.widget.AdapterView.getOnItemClickListener()*

public final |android.widget.AdapterView.OnItemClickListener| getOnItemClickListener()





    Returns: The callback to be invoked with an item in this AdapterView has been clicked, 
             or null id no callback has been set. 

*android.widget.AdapterView.getOnItemLongClickListener()*

public final |android.widget.AdapterView.OnItemLongClickListener| getOnItemLongClickListener()





    Returns: The callback to be invoked with an item in this AdapterView has been clicked 
             and held, or null id no callback as been set. 

*android.widget.AdapterView.getOnItemSelectedListener()*

public final |android.widget.AdapterView.OnItemSelectedListener| getOnItemSelectedListener()





*android.widget.AdapterView.getPositionForView(View)*

public int getPositionForView(android.view.View view)

Get the position within the adapter's data set for the view, where view is a an 
adapter item or a descendant of an adapter item. 


    view - an adapter item, or a descendant of an adapter item. This must be visible in 
       this AdapterView at the time of the call. 

    Returns: the position within the adapter's data set of the view, or {@link 
             #INVALID_POSITION} if the view does not correspond to a list item 
             (or it is not currently visible). 

*android.widget.AdapterView.getSelectedItem()*

public |java.lang.Object| getSelectedItem()





    Returns: The data corresponding to the currently selected item, or null if there is 
             nothing selected. 

*android.widget.AdapterView.getSelectedItemId()*

public long getSelectedItemId()





    Returns: The id corresponding to the currently selected item, or {@link #INVALID_ROW_ID} 
             if nothing is selected. 

*android.widget.AdapterView.getSelectedItemPosition()*

public int getSelectedItemPosition()

Return the position of the currently selected item within the adapter's data 
set 



    Returns: int Position (starting at 0), or {@link #INVALID_POSITION} if there is nothing 
             selected. 

*android.widget.AdapterView.getSelectedView()*

public abstract |android.view.View| getSelectedView()





    Returns: The view corresponding to the currently selected item, or null if nothing is 
             selected 

*android.widget.AdapterView.onDetachedFromWindow()*

protected void onDetachedFromWindow()





*android.widget.AdapterView.onInitializeAccessibilityEvent(AccessibilityEvent)*

public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent event)





*android.widget.AdapterView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)*

public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo info)





*android.widget.AdapterView.onLayout(boolean,int,int,int,int)*

protected void onLayout(
  boolean changed,
  int left,
  int top,
  int right,
  int bottom)





*android.widget.AdapterView.onRequestSendAccessibilityEvent(View,AccessibilityEvent)*

public boolean onRequestSendAccessibilityEvent(
  android.view.View child,
  android.view.accessibility.AccessibilityEvent event)





*android.widget.AdapterView.performItemClick(View,int,long)*

public boolean performItemClick(
  android.view.View view,
  int position,
  long id)

Call the OnItemClickListener, if it is defined. Performs all normal actions 
associated with clicking: reporting accessibility event, playing a sound, etc. 


    view - The view within the AdapterView that was clicked. 
    position - The position of the view in the adapter. 
    id - The row id of the item that was clicked. 

    Returns: True if there was an assigned OnItemClickListener that was called, false 
             otherwise is returned. 

*android.widget.AdapterView.removeAllViews()*

public void removeAllViews()

This method is not supported and throws an UnsupportedOperationException when 
called. 



*android.widget.AdapterView.removeView(View)*

public void removeView(android.view.View child)

This method is not supported and throws an UnsupportedOperationException when 
called. 


    child - Ignored. 

*android.widget.AdapterView.removeViewAt(int)*

public void removeViewAt(int index)

This method is not supported and throws an UnsupportedOperationException when 
called. 


    index - Ignored. 

*android.widget.AdapterView.setAdapter(T)*

public abstract void setAdapter(T extends android.widget.Adapter adapter)

Sets the adapter that provides the data and the views to represent the data in 
this widget. 


    adapter - The adapter to use to create this view's content. 

*android.widget.AdapterView.setEmptyView(View)*

public void setEmptyView(android.view.View emptyView)

Sets the view to show if the adapter is empty 



*android.widget.AdapterView.setFocusable(boolean)*

public void setFocusable(boolean focusable)





*android.widget.AdapterView.setFocusableInTouchMode(boolean)*

public void setFocusableInTouchMode(boolean focusable)





*android.widget.AdapterView.setOnClickListener(View.OnClickListener)*

public void setOnClickListener(android.view.View.OnClickListener l)





*android.widget.AdapterView.setOnItemClickListener(AdapterView.OnItemClickListener)*

public void setOnItemClickListener(android.widget.AdapterView.OnItemClickListener listener)

Register a callback to be invoked when an item in this AdapterView has been 
clicked. 


    listener - The callback that will be invoked. 

*android.widget.AdapterView.setOnItemLongClickListener(AdapterView.OnItemLongClickListener)*

public void setOnItemLongClickListener(android.widget.AdapterView.OnItemLongClickListener listener)

Register a callback to be invoked when an item in this AdapterView has been 
clicked and held 


    listener - The callback that will run 

*android.widget.AdapterView.setOnItemSelectedListener(AdapterView.OnItemSelectedListener)*

public void setOnItemSelectedListener(android.widget.AdapterView.OnItemSelectedListener listener)

Register a callback to be invoked when an item in this AdapterView has been 
selected. 


    listener - The callback that will run 

*android.widget.AdapterView.setSelection(int)*

public abstract void setSelection(int position)

Sets the currently selected item. To support accessibility subclasses that 
override this method must invoke the overriden super method first. 


    position - Index (starting at 0) of the data item to be selected. 


