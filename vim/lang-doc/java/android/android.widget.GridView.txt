*android.widget.GridView* *GridView* A view that shows items in two-dimensional 

public class GridView
  extends    |android.widget.AbsListView|

|android.widget.GridView_Description|
|android.widget.GridView_Fields|
|android.widget.GridView_Constructors|
|android.widget.GridView_Methods|

================================================================================

*android.widget.GridView_Fields*
|int_android.widget.GridView.AUTO_FIT|
|int_android.widget.GridView.NO_STRETCH|
|int_android.widget.GridView.STRETCH_COLUMN_WIDTH|
|int_android.widget.GridView.STRETCH_SPACING|
|int_android.widget.GridView.STRETCH_SPACING_UNIFORM|

*android.widget.GridView_Constructors*
|android.widget.GridView(Context)|
|android.widget.GridView(Context,AttributeSet)|
|android.widget.GridView(Context,AttributeSet,int)|

*android.widget.GridView_Methods*
|android.widget.GridView.attachLayoutAnimationParameters(View,ViewGroup.LayoutParams,int,int)|
|android.widget.GridView.computeVerticalScrollExtent()|
|android.widget.GridView.computeVerticalScrollOffset()|
|android.widget.GridView.computeVerticalScrollRange()|
|android.widget.GridView.getAdapter()|
|android.widget.GridView.getColumnWidth()|Return the width of a column in the g
|android.widget.GridView.getGravity()|Describes how the child views are horizon
|android.widget.GridView.getHorizontalSpacing()|Returns the amount of horizonta
|android.widget.GridView.getNumColumns()|Get the number of columns in the grid.
|android.widget.GridView.getRequestedColumnWidth()|Return the requested width o
|android.widget.GridView.getRequestedHorizontalSpacing()|Returns the requested 
|android.widget.GridView.getStretchMode()|
|android.widget.GridView.getVerticalSpacing()|Returns the amount of vertical sp
|android.widget.GridView.layoutChildren()|
|android.widget.GridView.onFocusChanged(boolean,int,Rect)|
|android.widget.GridView.onInitializeAccessibilityEvent(AccessibilityEvent)|
|android.widget.GridView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)|
|android.widget.GridView.onInitializeAccessibilityNodeInfoForItem(View,int,AccessibilityNodeInfo)|
|android.widget.GridView.onKeyDown(int,KeyEvent)|
|android.widget.GridView.onKeyMultiple(int,int,KeyEvent)|
|android.widget.GridView.onKeyUp(int,KeyEvent)|
|android.widget.GridView.onMeasure(int,int)|
|android.widget.GridView.setAdapter(ListAdapter)|Sets the data behind this Grid
|android.widget.GridView.setColumnWidth(int)|Set the width of columns in the gr
|android.widget.GridView.setGravity(int)|Set the gravity for this grid.
|android.widget.GridView.setHorizontalSpacing(int)|Set the amount of horizontal
|android.widget.GridView.setNumColumns(int)|Set the number of columns in the gr
|android.widget.GridView.setRemoteViewsAdapter(Intent)|Sets up this AbsListView
|android.widget.GridView.setSelection(int)|Sets the currently selected item
|android.widget.GridView.setStretchMode(int)|Control how items are stretched to
|android.widget.GridView.setVerticalSpacing(int)|Set the amount of vertical (y)
|android.widget.GridView.smoothScrollByOffset(int)|Smoothly scroll to the speci
|android.widget.GridView.smoothScrollToPosition(int)|Smoothly scroll to the spe

*android.widget.GridView_Description*

A view that shows items in two-dimensional scrolling grid. The items in the 
grid come from the (|android.widget.ListAdapter|) associated with this view. 

See the <a href="guide/topics/ui/layout/gridview.html">Grid View guide. 



*int_android.widget.GridView.AUTO_FIT*

Creates as many columns as can fit on screen. 


*int_android.widget.GridView.NO_STRETCH*

Disables stretching. 


*int_android.widget.GridView.STRETCH_COLUMN_WIDTH*

Stretches columns. 


*int_android.widget.GridView.STRETCH_SPACING*

Stretches the spacing between columns. 


*int_android.widget.GridView.STRETCH_SPACING_UNIFORM*

Stretches the spacing between columns. The spacing is uniform. 



*android.widget.GridView(Context)*

public GridView(android.content.Context context)




*android.widget.GridView(Context,AttributeSet)*

public GridView(
  android.content.Context context,
  android.util.AttributeSet attrs)




*android.widget.GridView(Context,AttributeSet,int)*

public GridView(
  android.content.Context context,
  android.util.AttributeSet attrs,
  int defStyle)




*android.widget.GridView.attachLayoutAnimationParameters(View,ViewGroup.LayoutParams,int,int)*

protected void attachLayoutAnimationParameters(
  android.view.View child,
  android.view.ViewGroup.LayoutParams params,
  int index,
  int count)





*android.widget.GridView.computeVerticalScrollExtent()*

protected int computeVerticalScrollExtent()





*android.widget.GridView.computeVerticalScrollOffset()*

protected int computeVerticalScrollOffset()





*android.widget.GridView.computeVerticalScrollRange()*

protected int computeVerticalScrollRange()





*android.widget.GridView.getAdapter()*

public |android.widget.ListAdapter| getAdapter()





*android.widget.GridView.getColumnWidth()*

public int getColumnWidth()

Return the width of a column in the grid. 

This may not be valid yet if a layout is pending. 



    Returns: The column width in pixels 

*android.widget.GridView.getGravity()*

public int getGravity()

Describes how the child views are horizontally aligned. Defaults to 
Gravity.LEFT 



    Returns: the gravity that will be applied to this grid's children 

*android.widget.GridView.getHorizontalSpacing()*

public int getHorizontalSpacing()

Returns the amount of horizontal spacing currently used between each item in 
the grid. 

This is only accurate for the current layout. If (|android.widget.GridView|) 
has been called but layout is not yet complete, this method may return a stale 
value. To get the horizontal spacing that was explicitly requested use 
(|android.widget.GridView|) . 



    Returns: Current horizontal spacing between each item in pixels 

*android.widget.GridView.getNumColumns()*

public int getNumColumns()

Get the number of columns in the grid. Returns (|android.widget.GridView|) if 
the Grid has never been laid out. 



*android.widget.GridView.getRequestedColumnWidth()*

public int getRequestedColumnWidth()

Return the requested width of a column in the grid. 

This may not be the actual column width used. Use (|android.widget.GridView|) 
to retrieve the current real width of a column. 



    Returns: The requested column width in pixels 

*android.widget.GridView.getRequestedHorizontalSpacing()*

public int getRequestedHorizontalSpacing()

Returns the requested amount of horizontal spacing between each item in the 
grid. 

The value returned may have been supplied during inflation as part of a style, 
the default GridView style, or by a call to (|android.widget.GridView|) . If 
layout is not yet complete or if GridView calculated a different horizontal 
spacing from what was requested, this may return a different value from 
(|android.widget.GridView|) . 



    Returns: The currently requested horizontal spacing between items, in pixels 

*android.widget.GridView.getStretchMode()*

public int getStretchMode()





*android.widget.GridView.getVerticalSpacing()*

public int getVerticalSpacing()

Returns the amount of vertical spacing between each item in the grid. 



    Returns: The vertical spacing between items in pixels 

*android.widget.GridView.layoutChildren()*

protected void layoutChildren()





*android.widget.GridView.onFocusChanged(boolean,int,Rect)*

protected void onFocusChanged(
  boolean gainFocus,
  int direction,
  Rect previouslyFocusedRect)





*android.widget.GridView.onInitializeAccessibilityEvent(AccessibilityEvent)*

public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent event)





*android.widget.GridView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)*

public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo info)





*android.widget.GridView.onInitializeAccessibilityNodeInfoForItem(View,int,AccessibilityNodeInfo)*

public void onInitializeAccessibilityNodeInfoForItem(
  android.view.View view,
  int position,
  android.view.accessibility.AccessibilityNodeInfo info)





*android.widget.GridView.onKeyDown(int,KeyEvent)*

public boolean onKeyDown(
  int keyCode,
  android.view.KeyEvent event)





*android.widget.GridView.onKeyMultiple(int,int,KeyEvent)*

public boolean onKeyMultiple(
  int keyCode,
  int repeatCount,
  android.view.KeyEvent event)





*android.widget.GridView.onKeyUp(int,KeyEvent)*

public boolean onKeyUp(
  int keyCode,
  android.view.KeyEvent event)





*android.widget.GridView.onMeasure(int,int)*

protected void onMeasure(
  int widthMeasureSpec,
  int heightMeasureSpec)





*android.widget.GridView.setAdapter(ListAdapter)*

public void setAdapter(android.widget.ListAdapter adapter)

Sets the data behind this GridView. 


    adapter - the adapter providing the grid's data 

*android.widget.GridView.setColumnWidth(int)*

public void setColumnWidth(int columnWidth)

Set the width of columns in the grid. 


    columnWidth - The column width, in pixels. 

*android.widget.GridView.setGravity(int)*

public void setGravity(int gravity)

Set the gravity for this grid. Gravity describes how the child views are 
horizontally aligned. Defaults to Gravity.LEFT 


    gravity - the gravity to apply to this grid's children 

*android.widget.GridView.setHorizontalSpacing(int)*

public void setHorizontalSpacing(int horizontalSpacing)

Set the amount of horizontal (x) spacing to place between each item in the 
grid. 


    horizontalSpacing - The amount of horizontal space between items, in pixels. 

*android.widget.GridView.setNumColumns(int)*

public void setNumColumns(int numColumns)

Set the number of columns in the grid 


    numColumns - The desired number of columns. 

*android.widget.GridView.setRemoteViewsAdapter(Intent)*

public void setRemoteViewsAdapter(android.content.Intent intent)

Sets up this AbsListView to use a remote views adapter which connects to a 
RemoteViewsService through the specified intent. 


    intent - the intent used to identify the RemoteViewsService for the adapter to connect 
       to. 

*android.widget.GridView.setSelection(int)*

public void setSelection(int position)

Sets the currently selected item 


    position - Index (starting at 0) of the data item to be selected. 

If in touch mode, the item will not be selected but it will still be positioned 
       appropriately. 

*android.widget.GridView.setStretchMode(int)*

public void setStretchMode(int stretchMode)

Control how items are stretched to fill their space. 


    stretchMode - Either {@link #NO_STRETCH}, {@link #STRETCH_SPACING}, {@link 
       #STRETCH_SPACING_UNIFORM}, or {@link #STRETCH_COLUMN_WIDTH}. 

*android.widget.GridView.setVerticalSpacing(int)*

public void setVerticalSpacing(int verticalSpacing)

Set the amount of vertical (y) spacing to place between each item in the grid. 


    verticalSpacing - The amount of vertical space between items, in pixels. 

*android.widget.GridView.smoothScrollByOffset(int)*

public void smoothScrollByOffset(int offset)

Smoothly scroll to the specified adapter position offset. The view will scroll 
such that the indicated position is displayed. 


    offset - The amount to offset from the adapter position to scroll to. 

*android.widget.GridView.smoothScrollToPosition(int)*

public void smoothScrollToPosition(int position)

Smoothly scroll to the specified adapter position. The view will scroll such 
that the indicated position is displayed. 


    position - Scroll to this adapter position. 


