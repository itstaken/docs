*android.os.Environment* *Environment* Provides access to environment variables.

public class Environment
  extends    |java.lang.Object|

|android.os.Environment_Description|
|android.os.Environment_Fields|
|android.os.Environment_Constructors|
|android.os.Environment_Methods|

================================================================================

*android.os.Environment_Fields*
|java.lang.String_android.os.Environment.DIR_ANDROID|
|java.lang.String_android.os.Environment.DIRECTORY_ALARMS|
|java.lang.String_android.os.Environment.DIRECTORY_ANDROID|
|java.lang.String_android.os.Environment.DIRECTORY_DCIM|
|java.lang.String_android.os.Environment.DIRECTORY_DOCUMENTS|
|java.lang.String_android.os.Environment.DIRECTORY_DOWNLOADS|
|java.lang.String_android.os.Environment.DIRECTORY_MOVIES|
|java.lang.String_android.os.Environment.DIRECTORY_MUSIC|
|java.lang.String_android.os.Environment.DIRECTORY_NOTIFICATIONS|
|java.lang.String_android.os.Environment.DIRECTORY_PICTURES|
|java.lang.String_android.os.Environment.DIRECTORY_PODCASTS|
|java.lang.String_android.os.Environment.DIRECTORY_RINGTONES|
|java.lang.String_android.os.Environment.MEDIA_BAD_REMOVAL|
|java.lang.String_android.os.Environment.MEDIA_CHECKING|
|java.lang.String_android.os.Environment.MEDIA_MOUNTED|
|java.lang.String_android.os.Environment.MEDIA_MOUNTED_READ_ONLY|
|java.lang.String_android.os.Environment.MEDIA_NOFS|
|java.lang.String_android.os.Environment.MEDIA_REMOVED|
|java.lang.String_android.os.Environment.MEDIA_SHARED|
|java.lang.String_android.os.Environment.MEDIA_UNKNOWN|
|java.lang.String_android.os.Environment.MEDIA_UNMOUNTABLE|
|java.lang.String_android.os.Environment.MEDIA_UNMOUNTED|

*android.os.Environment_Constructors*
|android.os.Environment()|

*android.os.Environment_Methods*
|android.os.Environment.buildExternalStorageAndroidDataDirs()|Returns the path 
|android.os.Environment.buildExternalStorageAppCacheDirs(String)|Generates the 
|android.os.Environment.buildExternalStorageAppDataDirs(String)|Generates the r
|android.os.Environment.buildExternalStorageAppFilesDirs(String)|Generates the 
|android.os.Environment.buildExternalStorageAppMediaDirs(String)|Generates the 
|android.os.Environment.buildExternalStorageAppObbDirs(String)|Generates the ra
|android.os.Environment.buildPath(File,String...)|Append path segments to given
|android.os.Environment.buildPaths(File[],String...)|Append path segments to ea
|android.os.Environment.getDataDirectory()|Return the user data directory.
|android.os.Environment.getDownloadCacheDirectory()|Return the download/cache c
|android.os.Environment.getEmulatedStorageObbSource()|
|android.os.Environment.getEmulatedStorageSource(int)|
|android.os.Environment.getExternalStorageDirectory()|Return the primary extern
|android.os.Environment.getExternalStoragePublicDirectory(String)|Get a top-lev
|android.os.Environment.getExternalStorageState()|Returns the current state of 
|android.os.Environment.getLegacyExternalStorageDirectory()|
|android.os.Environment.getLegacyExternalStorageObbDirectory()|
|android.os.Environment.getMediaStorageDirectory()|Return directory used for in
|android.os.Environment.getRootDirectory()|Gets the Android root directory.
|android.os.Environment.getSecureDataDirectory()|Gets the data directory for se
|android.os.Environment.getStorageState(File)|Returns the current state of the 
|android.os.Environment.getSystemSecureDirectory()|Gets the system directory av
|android.os.Environment.getUserSystemDirectory(int)|Return the system directory
|android.os.Environment.initForCurrentUser()|
|android.os.Environment.isEncryptedFilesystemEnabled()|Returns whether the Encr
|android.os.Environment.isExternalStorageEmulated()|Returns whether the device 
|android.os.Environment.isExternalStorageRemovable()|Returns whether the primar
|android.os.Environment.maybeTranslateEmulatedPathToInternal(File)|If the given
|android.os.Environment.setUserRequired(boolean)|

*android.os.Environment_Description*

Provides access to environment variables. 



*java.lang.String_android.os.Environment.DIR_ANDROID*




*java.lang.String_android.os.Environment.DIRECTORY_ALARMS*

Standard directory in which to place any audio files that should be in the list 
of alarms that the user can select (not as regular music). This may be combined 
with (|android.os.Environment|) , (|android.os.Environment|) , 
(|android.os.Environment|) , and (|android.os.Environment|) as a series of 
directories to categories a particular audio file as more than one type. 


*java.lang.String_android.os.Environment.DIRECTORY_ANDROID*




*java.lang.String_android.os.Environment.DIRECTORY_DCIM*

The traditional location for pictures and videos when mounting the device as a 
camera. Note that this is primarily a convention for the top-level public 
directory, as this convention makes no sense elsewhere. 


*java.lang.String_android.os.Environment.DIRECTORY_DOCUMENTS*

Standard directory in which to place documents that have been created by the 
user. 


*java.lang.String_android.os.Environment.DIRECTORY_DOWNLOADS*

Standard directory in which to place files that have been downloaded by the 
user. Note that this is primarily a convention for the top-level public 
directory, you are free to download files anywhere in your own private 
directories. Also note that though the constant here is named 
DIRECTORY_DOWNLOADS (plural), the actual file name is non-plural for backwards 
compatibility reasons. 


*java.lang.String_android.os.Environment.DIRECTORY_MOVIES*

Standard directory in which to place movies that are available to the user. 
Note that this is primarily a convention for the top-level public directory, as 
the media scanner will find and collect movies in any directory. 


*java.lang.String_android.os.Environment.DIRECTORY_MUSIC*

Standard directory in which to place any audio files that should be in the 
regular list of music for the user. This may be combined with 
(|android.os.Environment|) , (|android.os.Environment|) , 
(|android.os.Environment|) , and (|android.os.Environment|) as a series of 
directories to categories a particular audio file as more than one type. 


*java.lang.String_android.os.Environment.DIRECTORY_NOTIFICATIONS*

Standard directory in which to place any audio files that should be in the list 
of notifications that the user can select (not as regular music). This may be 
combined with (|android.os.Environment|) , (|android.os.Environment|) , 
(|android.os.Environment|) , and (|android.os.Environment|) as a series of 
directories to categories a particular audio file as more than one type. 


*java.lang.String_android.os.Environment.DIRECTORY_PICTURES*

Standard directory in which to place pictures that are available to the user. 
Note that this is primarily a convention for the top-level public directory, as 
the media scanner will find and collect pictures in any directory. 


*java.lang.String_android.os.Environment.DIRECTORY_PODCASTS*

Standard directory in which to place any audio files that should be in the list 
of podcasts that the user can select (not as regular music). This may be 
combined with (|android.os.Environment|) , (|android.os.Environment|) , 
(|android.os.Environment|) , and (|android.os.Environment|) as a series of 
directories to categories a particular audio file as more than one type. 


*java.lang.String_android.os.Environment.DIRECTORY_RINGTONES*

Standard directory in which to place any audio files that should be in the list 
of ringtones that the user can select (not as regular music). This may be 
combined with (|android.os.Environment|) , (|android.os.Environment|) , 
(|android.os.Environment|) , and (|android.os.Environment|) as a series of 
directories to categories a particular audio file as more than one type. 


*java.lang.String_android.os.Environment.MEDIA_BAD_REMOVAL*

Storage state if the media was removed before it was unmounted. 


*java.lang.String_android.os.Environment.MEDIA_CHECKING*

Storage state if the media is present and being disk-checked. 


*java.lang.String_android.os.Environment.MEDIA_MOUNTED*

Storage state if the media is present and mounted at its mount point with 
read/write access. 


*java.lang.String_android.os.Environment.MEDIA_MOUNTED_READ_ONLY*

Storage state if the media is present and mounted at its mount point with 
read-only access. 


*java.lang.String_android.os.Environment.MEDIA_NOFS*

Storage state if the media is present but is blank or is using an unsupported 
filesystem. 


*java.lang.String_android.os.Environment.MEDIA_REMOVED*

Storage state if the media is not present. 


*java.lang.String_android.os.Environment.MEDIA_SHARED*

Storage state if the media is present not mounted, and shared via USB mass 
storage. 


*java.lang.String_android.os.Environment.MEDIA_UNKNOWN*

Unknown storage state, such as when a path isn't backed by known storage media. 


*java.lang.String_android.os.Environment.MEDIA_UNMOUNTABLE*

Storage state if the media is present but cannot be mounted. Typically this 
happens if the file system on the media is corrupted. 


*java.lang.String_android.os.Environment.MEDIA_UNMOUNTED*

Storage state if the media is present but not mounted. 



*android.os.Environment()*

public Environment()




*android.os.Environment.buildExternalStorageAndroidDataDirs()*

public static |java.io.File|[] buildExternalStorageAndroidDataDirs()

Returns the path for android-specific data on the SD card. 



*android.os.Environment.buildExternalStorageAppCacheDirs(String)*

public static |java.io.File|[] buildExternalStorageAppCacheDirs(java.lang.String packageName)

Generates the path to an application's cache. 



*android.os.Environment.buildExternalStorageAppDataDirs(String)*

public static |java.io.File|[] buildExternalStorageAppDataDirs(java.lang.String packageName)

Generates the raw path to an application's data 



*android.os.Environment.buildExternalStorageAppFilesDirs(String)*

public static |java.io.File|[] buildExternalStorageAppFilesDirs(java.lang.String packageName)

Generates the path to an application's files. 



*android.os.Environment.buildExternalStorageAppMediaDirs(String)*

public static |java.io.File|[] buildExternalStorageAppMediaDirs(java.lang.String packageName)

Generates the raw path to an application's media 



*android.os.Environment.buildExternalStorageAppObbDirs(String)*

public static |java.io.File|[] buildExternalStorageAppObbDirs(java.lang.String packageName)

Generates the raw path to an application's OBB files 



*android.os.Environment.buildPath(File,String...)*

public static |java.io.File| buildPath(
  java.io.File base,
  java.lang.String[] segments)

Append path segments to given base path, returning result. 



*android.os.Environment.buildPaths(File[],String...)*

public static |java.io.File|[] buildPaths(
  java.io.File[] base,
  java.lang.String[] segments)

Append path segments to each given base path, returning result. 



*android.os.Environment.getDataDirectory()*

public static |java.io.File| getDataDirectory()

Return the user data directory. 



*android.os.Environment.getDownloadCacheDirectory()*

public static |java.io.File| getDownloadCacheDirectory()

Return the download/cache content directory. 



*android.os.Environment.getEmulatedStorageObbSource()*

public static |java.io.File| getEmulatedStorageObbSource()





*android.os.Environment.getEmulatedStorageSource(int)*

public static |java.io.File| getEmulatedStorageSource(int userId)





*android.os.Environment.getExternalStorageDirectory()*

public static |java.io.File| getExternalStorageDirectory()

Return the primary external storage directory. This directory may not currently 
be accessible if it has been mounted by the user on their computer, has been 
removed from the device, or some other problem has happened. You can determine 
its current state with (|android.os.Environment|) . 

Note: don't be confused by the word "external" here. This directory can better 
be thought as media/shared storage. It is a filesystem that can hold a 
relatively large amount of data and that is shared across all applications 
(does not enforce permissions). Traditionally this is an SD card, but it may 
also be implemented as built-in storage in a device that is distinct from the 
protected internal storage and can be mounted as a filesystem on a computer. 

On devices with multiple users (as described by (|android.os.UserManager|) ), 
each user has their own isolated external storage. Applications only have 
access to the external storage for the user they're running as. 

In devices with multiple "external" storage directories, this directory 
represents the "primary" external storage that the user will interact with. 
Access to secondary storage is available through 

Applications should not directly use this top-level directory, in order to 
avoid polluting the user's root namespace. Any files that are private to the 
application should be placed in a directory returned by 
Context.getExternalFilesDir(|android.content.Context|) , which the system will 
take care of deleting if the application is uninstalled. Other shared files 
should be placed in one of the directories returned by 
(|android.os.Environment|) . 

Writing to this path requires the (|android.Manifest.permission|) permission, 
and starting in read access requires the (|android.Manifest.permission|) 
permission, which is automatically granted if you hold the write permission. 

Starting in (|android.os.Build.VERSION_CODES|) , if your application only needs 
to store internal data, consider using (|android.content.Context|) or 
(|android.content.Context|) , which require no permissions to read or write. 

This path may change between platform versions, so applications should only 
persist relative paths. 

Here is an example of typical code to monitor the state of external storage: 
development/samples/ApiDemos/src/com/example/android/apis/content/ExternalStorage.java
monitor_storage 



*android.os.Environment.getExternalStoragePublicDirectory(String)*

public static |java.io.File| getExternalStoragePublicDirectory(java.lang.String type)

Get a top-level public external storage directory for placing files of a 
particular type. This is where the user will typically place and manage their 
own files, so you should be careful about what you put here to ensure you don't 
erase their files or get in the way of their own organization. 

On devices with multiple users (as described by (|android.os.UserManager|) ), 
each user has their own isolated external storage. Applications only have 
access to the external storage for the user they're running as. 

Here is an example of typical code to manipulate a picture on the public 
external 
storage:development/samples/ApiDemos/src/com/example/android/apis/content/ExternalStorage.java
public_picture 


    type - The type of storage directory to return. Should be one of {@link 
       #DIRECTORY_MUSIC}, {@link #DIRECTORY_PODCASTS}, {@link 
       #DIRECTORY_RINGTONES}, {@link #DIRECTORY_ALARMS}, {@link 
       #DIRECTORY_NOTIFICATIONS}, {@link #DIRECTORY_PICTURES}, {@link 
       #DIRECTORY_MOVIES}, {@link #DIRECTORY_DOWNLOADS}, or {@link 
       #DIRECTORY_DCIM}. May not be null. 

    Returns: Returns the File path for the directory. Note that this directory may not yet 
             exist, so you must make sure it exists before using it such as 
             with {@link File#mkdirs File.mkdirs()}. 

*android.os.Environment.getExternalStorageState()*

public static |java.lang.String| getExternalStorageState()

Returns the current state of the primary "external" storage device. 



    Returns: one of {@link #MEDIA_UNKNOWN}, {@link #MEDIA_REMOVED}, {@link 
             #MEDIA_UNMOUNTED}, {@link #MEDIA_CHECKING}, {@link #MEDIA_NOFS}, 
             {@link #MEDIA_MOUNTED}, {@link #MEDIA_MOUNTED_READ_ONLY}, {@link 
             #MEDIA_SHARED}, {@link #MEDIA_BAD_REMOVAL}, or {@link 
             #MEDIA_UNMOUNTABLE}. 

*android.os.Environment.getLegacyExternalStorageDirectory()*

public static |java.io.File| getLegacyExternalStorageDirectory()





*android.os.Environment.getLegacyExternalStorageObbDirectory()*

public static |java.io.File| getLegacyExternalStorageObbDirectory()





*android.os.Environment.getMediaStorageDirectory()*

public static |java.io.File| getMediaStorageDirectory()

Return directory used for internal media storage, which is protected by 
(|android.Manifest.permission|) . 



*android.os.Environment.getRootDirectory()*

public static |java.io.File| getRootDirectory()

Gets the Android root directory. 



*android.os.Environment.getSecureDataDirectory()*

public static |java.io.File| getSecureDataDirectory()

Gets the data directory for secure storage. If Encrypted File system is 
enabled, it returns an encrypted directory (/data/secure). Otherwise, it 
returns the unencrypted /data directory. 



    Returns: File object representing the data directory for secure storage. 

*android.os.Environment.getStorageState(File)*

public static |java.lang.String| getStorageState(java.io.File path)

Returns the current state of the storage device that provides the given path. 



    Returns: one of {@link #MEDIA_UNKNOWN}, {@link #MEDIA_REMOVED}, {@link 
             #MEDIA_UNMOUNTED}, {@link #MEDIA_CHECKING}, {@link #MEDIA_NOFS}, 
             {@link #MEDIA_MOUNTED}, {@link #MEDIA_MOUNTED_READ_ONLY}, {@link 
             #MEDIA_SHARED}, {@link #MEDIA_BAD_REMOVAL}, or {@link 
             #MEDIA_UNMOUNTABLE}. 

*android.os.Environment.getSystemSecureDirectory()*

public static |java.io.File| getSystemSecureDirectory()

Gets the system directory available for secure storage. If Encrypted File 
system is enabled, it returns an encrypted directory (/data/secure/system). 
Otherwise, it returns the unencrypted /data/system directory. 



    Returns: File object representing the secure storage system directory. 

*android.os.Environment.getUserSystemDirectory(int)*

public static |java.io.File| getUserSystemDirectory(int userId)

Return the system directory for a user. This is for use by system services to 
store files relating to the user. This directory will be automatically deleted 
when the user is removed. 



*android.os.Environment.initForCurrentUser()*

public static void initForCurrentUser()





*android.os.Environment.isEncryptedFilesystemEnabled()*

public static boolean isEncryptedFilesystemEnabled()

Returns whether the Encrypted File System feature is enabled on the device or 
not. 



    Returns: true if Encrypted File System feature is enabled, false if disabled. 

*android.os.Environment.isExternalStorageEmulated()*

public static boolean isExternalStorageEmulated()

Returns whether the device has an external storage device which is emulated. If 
true, the device does not have real external storage, and the directory 
returned by (|android.os.Environment|) will be allocated using a portion of the 
internal storage system. 

Certain system services, such as the package manager, use this to determine 
where to install an application. 

Emulated external storage may also be encrypted - see 
(|android.app.admin.DevicePolicyManager|) for additional details. 



*android.os.Environment.isExternalStorageRemovable()*

public static boolean isExternalStorageRemovable()

Returns whether the primary "external" storage device is removable. If true is 
returned, this device is for example an SD card that the user can remove. If 
false is returned, the storage is built into the device and can not be 
physically removed. 

See (|android.os.Environment|) for more information. 



*android.os.Environment.maybeTranslateEmulatedPathToInternal(File)*

public static |java.io.File| maybeTranslateEmulatedPathToInternal(java.io.File path)

If the given path exists on emulated external storage, return the translated 
backing path hosted on internal storage. This bypasses any emulation later, 
improving performance. This is only suitable for read-only access. 

Returns original path if given path doesn't meet these criteria. Callers must 
hold (|android.Manifest.permission|) permission. 



*android.os.Environment.setUserRequired(boolean)*

public static void setUserRequired(boolean userRequired)






