*android.view.KeyCharacterMap* *KeyCharacterMap* Describes the keys provided by 

public class KeyCharacterMap
  extends    |java.lang.Object|
  implements |android.os.Parcelable|

|android.view.KeyCharacterMap_Description|
|android.view.KeyCharacterMap_Fields|
|android.view.KeyCharacterMap_Constructors|
|android.view.KeyCharacterMap_Methods|

================================================================================

*android.view.KeyCharacterMap_Fields*
|int_android.view.KeyCharacterMap.ALPHA|
|int_android.view.KeyCharacterMap.BUILT_IN_KEYBOARD|
|int_android.view.KeyCharacterMap.COMBINING_ACCENT|
|int_android.view.KeyCharacterMap.COMBINING_ACCENT_MASK|
|android.os.Parcelable.Creator<android.view.KeyCharacterMap>_android.view.KeyCharacterMap.CREATOR|
|int_android.view.KeyCharacterMap.FULL|
|char_android.view.KeyCharacterMap.HEX_INPUT|
|int_android.view.KeyCharacterMap.MODIFIER_BEHAVIOR_CHORDED|
|int_android.view.KeyCharacterMap.MODIFIER_BEHAVIOR_CHORDED_OR_TOGGLED|
|int_android.view.KeyCharacterMap.NUMERIC|
|char_android.view.KeyCharacterMap.PICKER_DIALOG_INPUT|
|int_android.view.KeyCharacterMap.PREDICTIVE|
|int_android.view.KeyCharacterMap.SPECIAL_FUNCTION|
|int_android.view.KeyCharacterMap.VIRTUAL_KEYBOARD|

*android.view.KeyCharacterMap_Methods*
|android.view.KeyCharacterMap.describeContents()|
|android.view.KeyCharacterMap.deviceHasKey(int)|Queries the framework about whe
|android.view.KeyCharacterMap.deviceHasKeys(int[])|Queries the framework about 
|android.view.KeyCharacterMap.finalize()|
|android.view.KeyCharacterMap.get(int,int)|Gets the Unicode character generated
|android.view.KeyCharacterMap.getDeadChar(int,int)|Get the character that is pr
|android.view.KeyCharacterMap.getDisplayLabel(int)|Gets the primary character f
|android.view.KeyCharacterMap.getEvents(char[])|Get an array of KeyEvent object
|android.view.KeyCharacterMap.getFallbackAction(int,int)|Gets the fallback acti
|android.view.KeyCharacterMap.getKeyboardType()|Gets the keyboard type.
|android.view.KeyCharacterMap.getKeyData(int,KeyCharacterMap.KeyData)|Get the c
|android.view.KeyCharacterMap.getMatch(int,char[])|Gets the first character in 
|android.view.KeyCharacterMap.getMatch(int,char[],int)|Gets the first character
|android.view.KeyCharacterMap.getModifierBehavior()|Gets a constant that descri
|android.view.KeyCharacterMap.getNumber(int)|Gets the number or symbol associat
|android.view.KeyCharacterMap.isPrintingKey(int)|Returns true if the specified 
|android.view.KeyCharacterMap.load(int)|Loads the key character maps for the ke
|android.view.KeyCharacterMap.writeToParcel(Parcel,int)|

*android.view.KeyCharacterMap_Description*

Describes the keys provided by a keyboard device and their associated labels. 



*int_android.view.KeyCharacterMap.ALPHA*

A keyboard with all the letters, and maybe some numbers. 

An alphabetic keyboard supports text entry directly but may have a condensed 
layout with a small form factor. In contrast to a full 
keyboard(|android.view.KeyCharacterMap|) , some symbols may only be accessible 
using special on-screen character pickers. In addition, to improve typing speed 
and accuracy, the framework provides special affordances for alphabetic 
keyboards such as auto-capitalization and toggled / locked shift and alt keys. 

This type of keyboard is generally designed for thumb typing. 


*int_android.view.KeyCharacterMap.BUILT_IN_KEYBOARD*

The id of the device's primary built in keyboard is always 0. 


*int_android.view.KeyCharacterMap.COMBINING_ACCENT*




*int_android.view.KeyCharacterMap.COMBINING_ACCENT_MASK*

Mask the return value from (|android.view.KeyCharacterMap|) with this value to 
get a printable representation of the accent character of a "dead key." 


*android.os.Parcelable.Creator<android.view.KeyCharacterMap>_android.view.KeyCharacterMap.CREATOR*




*int_android.view.KeyCharacterMap.FULL*

A full PC-style keyboard. 

A full keyboard behaves like a PC keyboard. All symbols are accessed directly 
by pressing keys on the keyboard without on-screen support or affordances such 
as auto-capitalization. 

This type of keyboard is generally designed for full two hand typing. 


*char_android.view.KeyCharacterMap.HEX_INPUT*

This private-use character is used to trigger Unicode character input by hex 
digits. 


*int_android.view.KeyCharacterMap.MODIFIER_BEHAVIOR_CHORDED*

Modifier keys may be chorded with character keys. 


*int_android.view.KeyCharacterMap.MODIFIER_BEHAVIOR_CHORDED_OR_TOGGLED*

Modifier keys may be chorded with character keys or they may toggle into 
latched or locked states when pressed independently. 


*int_android.view.KeyCharacterMap.NUMERIC*

A numeric (12-key) keyboard. 

A numeric keyboard supports text entry using a multi-tap approach. It may be 
necessary to tap a key multiple times to generate the desired letter or symbol. 

This type of keyboard is generally designed for thumb typing. 


*char_android.view.KeyCharacterMap.PICKER_DIALOG_INPUT*

This private-use character is used to bring up a character picker for 
miscellaneous symbols. 


*int_android.view.KeyCharacterMap.PREDICTIVE*

A keyboard with all the letters, but with more than one letter per key. 

This type of keyboard is generally designed for thumb typing. 


*int_android.view.KeyCharacterMap.SPECIAL_FUNCTION*

A keyboard that is only used to control special functions rather than for 
typing. 

A special function keyboard consists only of non-printing keys such as HOME and 
POWER that are not actually used for typing. 


*int_android.view.KeyCharacterMap.VIRTUAL_KEYBOARD*

The id of a generic virtual keyboard with a full layout that can be used to 
synthesize key events. Typically used with (|android.view.KeyCharacterMap|) . 



*android.view.KeyCharacterMap.describeContents()*

public int describeContents()





*android.view.KeyCharacterMap.deviceHasKey(int)*

public static boolean deviceHasKey(int keyCode)

Queries the framework about whether any physical keys exist on the any keyboard 
attached to the device that are capable of producing the given key code. 


    keyCode - The key code to query. 

    Returns: True if at least one attached keyboard supports the specified key code. 

*android.view.KeyCharacterMap.deviceHasKeys(int[])*

public static boolean[] deviceHasKeys(int[] keyCodes)

Queries the framework about whether any physical keys exist on the any keyboard 
attached to the device that are capable of producing the given array of key 
codes. 


    keyCodes - The array of key codes to query. 

    Returns: A new array of the same size as the key codes array whose elements are set to 
             true if at least one attached keyboard supports the corresponding 
             key code at the same index in the key codes array. 

*android.view.KeyCharacterMap.finalize()*

protected void finalize()
  throws |java.lang.Throwable|
         




*android.view.KeyCharacterMap.get(int,int)*

public int get(
  int keyCode,
  int metaState)

Gets the Unicode character generated by the specified key and meta key state 
combination. 

Returns the Unicode character that the specified key would produce when the 
specified meta bits (see (|android.text.method.MetaKeyKeyListener|) ) were 
active. 

Returns 0 if the key is not one that is used to type Unicode characters. 

If the return value has bit (|android.view.KeyCharacterMap|) set, the key is a 
"dead key" that should be combined with another to actually produce a character 
-- see (|android.view.KeyCharacterMap|) -- after masking with 
(|android.view.KeyCharacterMap|) . 


    keyCode - The key code. 
    metaState - The meta key modifier state. 

    Returns: The associated character or combining accent, or 0 if none. 

*android.view.KeyCharacterMap.getDeadChar(int,int)*

public static int getDeadChar(
  int accent,
  int c)

Get the character that is produced by combining the dead key producing accent 
with the key producing character c. For example, getDeadChar('`', 'e') returns 
. getDeadChar('^', ' ') returns '^' and getDeadChar('^', '^') returns '^'. 


    accent - The accent character. eg. '`' 
    c - The basic character. 

    Returns: The combined character, or 0 if the characters cannot be combined. 

*android.view.KeyCharacterMap.getDisplayLabel(int)*

public char getDisplayLabel(int keyCode)

Gets the primary character for this key. In other words, the label that is 
physically printed on it. 


    keyCode - The key code. 

    Returns: The display label character, or 0 if none (eg. for non-printing keys). 

*android.view.KeyCharacterMap.getEvents(char[])*

public |android.view.KeyEvent|[] getEvents(char[] chars)

Get an array of KeyEvent objects that if put into the input stream could 
plausibly generate the provided sequence of characters. It is not guaranteed 
that the sequence is the only way to generate these events or that it is 
optimal. 

This function is primarily offered for instrumentation and testing purposes. It 
may fail to map characters to key codes. In particular, the key character map 
for the built-in keyboard(|android.view.KeyCharacterMap|) device id may be 
empty. Consider using the key character map associated with the virtual 
keyboard(|android.view.KeyCharacterMap|) device id instead. 

For robust text entry, do not use this function. Instead construct a 
(|android.view.KeyEvent|) with action code (|android.view.KeyEvent|) that 
contains the desired string using (|android.view.KeyEvent|) . 


    chars - The sequence of characters to generate. 

    Returns: An array of {@link KeyEvent} objects, or null if the given char array can not 
             be generated using the current key character map. 

*android.view.KeyCharacterMap.getFallbackAction(int,int)*

public |android.view.KeyCharacterMap.FallbackAction| getFallbackAction(
  int keyCode,
  int metaState)

Gets the fallback action to perform if the application does not handle the 
specified key. 

When an application does not handle a particular key, the system may translate 
the key to an alternate fallback key (specified in the fallback action) and 
dispatch it to the application. The event containing the fallback key is 
flagged with (|android.view.KeyEvent|) . 


    keyCode - The key code. 
    metaState - The meta key modifier state. 

    Returns: The fallback action, or null if none. Remember to recycle the fallback action. 

*android.view.KeyCharacterMap.getKeyboardType()*

public int getKeyboardType()

Gets the keyboard type. Returns (|android.view.KeyCharacterMap|) , 
(|android.view.KeyCharacterMap|) , (|android.view.KeyCharacterMap|) , 
(|android.view.KeyCharacterMap|) or (|android.view.KeyCharacterMap|) . 

Different keyboard types have different semantics. Refer to the documentation 
associated with the keyboard type constants for details. 



    Returns: The keyboard type. 

*android.view.KeyCharacterMap.getKeyData(int,KeyCharacterMap.KeyData)*

public boolean getKeyData(
  int keyCode,
  android.view.KeyCharacterMap.KeyData results)

Get the character conversion data for a given key code. 

    Deprecated: instead use {@link KeyCharacterMap#getDisplayLabel(int)},
 {@link KeyCharacterMap#getNumber(int)} or {@link KeyCharacterMap#get(int, int)}.

    keyCode - The keyCode to query. 
    results - A {@link KeyData} instance that will be filled with the results. 

    Returns: True if the key was mapped. If the key was not mapped, results is not modified. 

*android.view.KeyCharacterMap.getMatch(int,char[])*

public char getMatch(
  int keyCode,
  char[] chars)

Gets the first character in the character array that can be generated by the 
specified key code. 

This is a convenience function that returns the same value as getMatch(keyCode, 
chars, 0)(|android.view.KeyCharacterMap|) . 


    keyCode - The keycode. 
    chars - The array of matching characters to consider. 

    Returns: The matching associated character, or 0 if none. 

*android.view.KeyCharacterMap.getMatch(int,char[],int)*

public char getMatch(
  int keyCode,
  char[] chars,
  int metaState)

Gets the first character in the character array that can be generated by the 
specified key code. If there are multiple choices, prefers the one that would 
be generated with the specified meta key modifier state. 


    keyCode - The key code. 
    chars - The array of matching characters to consider. 
    metaState - The preferred meta key modifier state. 

    Returns: The matching associated character, or 0 if none. 

*android.view.KeyCharacterMap.getModifierBehavior()*

public int getModifierBehavior()

Gets a constant that describes the behavior of this keyboard's modifier keys 
such as (|android.view.KeyEvent|) . 

Currently there are two behaviors that may be combined: 

Chorded behavior: When the modifier key is pressed together with one or more 
character keys, the keyboard inserts the modified keys and then resets the 
modifier state when the modifier key is released. Toggled behavior: When the 
modifier key is pressed and released on its own it first toggles into a latched 
state. When latched, the modifier will apply to next character key that is 
pressed and will then reset itself to the initial state. If the modifier is 
already latched and the modifier key is pressed and release on its own again, 
then it toggles into a locked state. When locked, the modifier will apply to 
all subsequent character keys that are pressed until unlocked by pressing the 
modifier key on its own one more time to reset it to the initial state. Toggled 
behavior is useful for small profile keyboards designed for thumb typing. 

This function currently returns (|android.view.KeyCharacterMap|) when the 
keyboard type(|android.view.KeyCharacterMap|) is 
(|android.view.KeyCharacterMap|) or (|android.view.KeyCharacterMap|) and 
(|android.view.KeyCharacterMap|) otherwise. In the future, the function may 
also take into account global keyboard accessibility settings, other user 
preferences, or new device capabilities. 



    Returns: The modifier behavior for this keyboard. 

*android.view.KeyCharacterMap.getNumber(int)*

public char getNumber(int keyCode)

Gets the number or symbol associated with the key. 

The character value is returned, not the numeric value. If the key is not a 
number, but is a symbol, the symbol is retuned. 

This method is intended to to support dial pads and other numeric or symbolic 
entry on keyboards where certain keys serve dual function as alphabetic and 
symbolic keys. This method returns the number or symbol associated with the key 
independent of whether the user has pressed the required modifier. 

For example, on one particular keyboard the keys on the top QWERTY row generate 
numbers when ALT is pressed such that ALT-Q maps to '1'. So for that keyboard 
when (|android.view.KeyCharacterMap|) is called with (|android.view.KeyEvent|) 
it returns '1' so that the user can type numbers without pressing ALT when it 
makes sense. 


    keyCode - The key code. 

    Returns: The associated numeric or symbolic character, or 0 if none. 

*android.view.KeyCharacterMap.isPrintingKey(int)*

public boolean isPrintingKey(int keyCode)

Returns true if the specified key produces a glyph. 


    keyCode - The key code. 

    Returns: True if the key is a printing key. 

*android.view.KeyCharacterMap.load(int)*

public static |android.view.KeyCharacterMap| load(int deviceId)

Loads the key character maps for the keyboard with the specified device id. 


    deviceId - The device id of the keyboard. 

    Returns: The associated key character map. 

*android.view.KeyCharacterMap.writeToParcel(Parcel,int)*

public void writeToParcel(
  android.os.Parcel out,
  int flags)






