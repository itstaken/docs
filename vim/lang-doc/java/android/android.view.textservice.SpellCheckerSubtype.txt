*android.view.textservice.SpellCheckerSubtype* *SpellCheckerSubtype* This class 

public final class SpellCheckerSubtype
  extends    |java.lang.Object|
  implements |android.os.Parcelable|

|android.view.textservice.SpellCheckerSubtype_Description|
|android.view.textservice.SpellCheckerSubtype_Fields|
|android.view.textservice.SpellCheckerSubtype_Constructors|
|android.view.textservice.SpellCheckerSubtype_Methods|

================================================================================

*android.view.textservice.SpellCheckerSubtype_Fields*
|android.os.Parcelable.Creator<android.view.textservice.SpellCheckerSubtype>_android.view.textservice.SpellCheckerSubtype.CREATOR|

*android.view.textservice.SpellCheckerSubtype_Constructors*
|android.view.textservice.SpellCheckerSubtype(int,String,String)|Constructor

*android.view.textservice.SpellCheckerSubtype_Methods*
|android.view.textservice.SpellCheckerSubtype.constructLocaleFromString(String)|
|android.view.textservice.SpellCheckerSubtype.containsExtraValueKey(String)|The
|android.view.textservice.SpellCheckerSubtype.describeContents()|
|android.view.textservice.SpellCheckerSubtype.equals(Object)|
|android.view.textservice.SpellCheckerSubtype.getDisplayName(Context,String,ApplicationInfo)|
|android.view.textservice.SpellCheckerSubtype.getExtraValue()|
|android.view.textservice.SpellCheckerSubtype.getExtraValueOf(String)|The strin
|android.view.textservice.SpellCheckerSubtype.getLocale()|
|android.view.textservice.SpellCheckerSubtype.getNameResId()|
|android.view.textservice.SpellCheckerSubtype.hashCode()|
|android.view.textservice.SpellCheckerSubtype.sort(Context,int,SpellCheckerInfo,List<SpellCheckerSubtype>)|
|android.view.textservice.SpellCheckerSubtype.writeToParcel(Parcel,int)|

*android.view.textservice.SpellCheckerSubtype_Description*

This class is used to specify meta information of a subtype contained in a 
spell checker. Subtype can describe locale (e.g. en_US, fr_FR...) used for 
settings. 



*android.os.Parcelable.Creator<android.view.textservice.SpellCheckerSubtype>_android.view.textservice.SpellCheckerSubtype.CREATOR*





*android.view.textservice.SpellCheckerSubtype(int,String,String)*

public SpellCheckerSubtype(
  int nameId,
  java.lang.String locale,
  java.lang.String extraValue)

Constructor 

    nameId - The name of the subtype 
    locale - The locale supported by the subtype 
    extraValue - The extra value of the subtype 

*android.view.textservice.SpellCheckerSubtype.constructLocaleFromString(String)*

public static |java.util.Locale| constructLocaleFromString(java.lang.String localeStr)





*android.view.textservice.SpellCheckerSubtype.containsExtraValueKey(String)*

public boolean containsExtraValueKey(java.lang.String key)

The string of ExtraValue in subtype should be defined as follows: example: 
key0,key1=value1,key2,key3,key4=value4 


    key - the key of extra value 

    Returns: the subtype contains specified the extra value 

*android.view.textservice.SpellCheckerSubtype.describeContents()*

public int describeContents()





*android.view.textservice.SpellCheckerSubtype.equals(Object)*

public boolean equals(java.lang.Object o)





*android.view.textservice.SpellCheckerSubtype.getDisplayName(Context,String,ApplicationInfo)*

public |java.lang.CharSequence| getDisplayName(
  android.content.Context context,
  java.lang.String packageName,
  android.content.pm.ApplicationInfo appInfo)




    context - Context will be used for getting Locale and PackageManager. 
    packageName - The package name of the spell checker 
    appInfo - The application info of the spell checker 

    Returns: a display name for this subtype. The string resource of the label 
             (mSubtypeNameResId) can have only one %s in it. If there is, the 
             %s part will be replaced with the locale's display name by the 
             formatter. If there is not, this method simply returns the string 
             specified by mSubtypeNameResId. If mSubtypeNameResId is not 
             specified (== 0), it's up to the framework to generate an 
             appropriate display name. 

*android.view.textservice.SpellCheckerSubtype.getExtraValue()*

public |java.lang.String| getExtraValue()





    Returns: the extra value of the subtype 

*android.view.textservice.SpellCheckerSubtype.getExtraValueOf(String)*

public |java.lang.String| getExtraValueOf(java.lang.String key)

The string of ExtraValue in subtype should be defined as follows: example: 
key0,key1=value1,key2,key3,key4=value4 


    key - the key of extra value 

    Returns: the value of the specified key 

*android.view.textservice.SpellCheckerSubtype.getLocale()*

public |java.lang.String| getLocale()





    Returns: the locale of the subtype 

*android.view.textservice.SpellCheckerSubtype.getNameResId()*

public int getNameResId()





    Returns: the name of the subtype 

*android.view.textservice.SpellCheckerSubtype.hashCode()*

public int hashCode()





*android.view.textservice.SpellCheckerSubtype.sort(Context,int,SpellCheckerInfo,List<SpellCheckerSubtype>)*

public static |java.util.List|<SpellCheckerSubtype> sort(
  android.content.Context context,
  int flags,
  android.view.textservice.SpellCheckerInfo sci,
  java.util.List<android.view.textservice.SpellCheckerSubtype> subtypeList)

Sort the list of subtypes 


    context - Context will be used for getting localized strings 
    flags - Flags for the sort order 
    sci - SpellCheckerInfo of which subtypes are subject to be sorted 
    subtypeList - List which will be sorted 

    Returns: Sorted list of subtypes 

*android.view.textservice.SpellCheckerSubtype.writeToParcel(Parcel,int)*

public void writeToParcel(
  android.os.Parcel dest,
  int parcelableFlags)






