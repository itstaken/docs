*android.app.DialogFragment* *DialogFragment* A fragment that displays a dialog 

public class DialogFragment
  extends    |android.app.Fragment|
  implements |android.content.DialogInterface.OnCancelListener|
             |android.content.DialogInterface.OnDismissListener|

|android.app.DialogFragment_Description|
|android.app.DialogFragment_Fields|
|android.app.DialogFragment_Constructors|
|android.app.DialogFragment_Methods|

================================================================================

*android.app.DialogFragment_Fields*
|int_android.app.DialogFragment.STYLE_NO_FRAME|
|int_android.app.DialogFragment.STYLE_NO_INPUT|
|int_android.app.DialogFragment.STYLE_NO_TITLE|
|int_android.app.DialogFragment.STYLE_NORMAL|

*android.app.DialogFragment_Constructors*
|android.app.DialogFragment()|

*android.app.DialogFragment_Methods*
|android.app.DialogFragment.dismiss()|Dismiss the fragment and its dialog.
|android.app.DialogFragment.dismissAllowingStateLoss()|Version of#dismiss()that
|android.app.DialogFragment.dump(String,FileDescriptor,PrintWriter,String[])|
|android.app.DialogFragment.getDialog()|
|android.app.DialogFragment.getLayoutInflater(Bundle)|
|android.app.DialogFragment.getShowsDialog()|Return the current value of#setSho
|android.app.DialogFragment.getTheme()|
|android.app.DialogFragment.isCancelable()|Return the current value of#setCance
|android.app.DialogFragment.onActivityCreated(Bundle)|
|android.app.DialogFragment.onAttach(Activity)|
|android.app.DialogFragment.onCancel(DialogInterface)|
|android.app.DialogFragment.onCreate(Bundle)|
|android.app.DialogFragment.onCreateDialog(Bundle)|Override to build your own c
|android.app.DialogFragment.onDestroyView()|Remove dialog.
|android.app.DialogFragment.onDetach()|
|android.app.DialogFragment.onDismiss(DialogInterface)|
|android.app.DialogFragment.onSaveInstanceState(Bundle)|
|android.app.DialogFragment.onStart()|
|android.app.DialogFragment.onStop()|
|android.app.DialogFragment.setCancelable(boolean)|Control whether the shown Di
|android.app.DialogFragment.setShowsDialog(boolean)|Controls whether this fragm
|android.app.DialogFragment.setStyle(int,int)|Call to customize the basic appea
|android.app.DialogFragment.show(FragmentManager,String)|Display the dialog, ad
|android.app.DialogFragment.show(FragmentTransaction,String)|Display the dialog

*android.app.DialogFragment_Description*

A fragment that displays a dialog window, floating on top of its activity's 
window. This fragment contains a Dialog object, which it displays as 
appropriate based on the fragment's state. Control of the dialog (deciding when 
to show, hide, dismiss it) should be done through the API here, not with direct 
calls on the dialog. 

Implementations should override this class and implement 
(|android.app.DialogFragment|) to supply the content of the dialog. 
Alternatively, they can override (|android.app.DialogFragment|) to create an 
entirely custom dialog, such as an AlertDialog, with its own content. 

Topics covered here: 

Lifecycle Basic Dialog Alert Dialog Selecting Between Dialog or Embedding 

Lifecycle 

DialogFragment does various things to keep the fragment's lifecycle driving it, 
instead of the Dialog. Note that dialogs are generally autonomous entities -- 
they are their own window, receiving their own input events, and often deciding 
on their own when to disappear (by receiving a back key event or the user 
clicking on a button). 

DialogFragment needs to ensure that what is happening with the Fragment and 
Dialog states remains consistent. To do this, it watches for dismiss events 
from the dialog and takes care of removing its own state when they happen. This 
means you should use (|android.app.DialogFragment|) or 
(|android.app.DialogFragment|) to add an instance of DialogFragment to your UI, 
as these keep track of how DialogFragment should remove itself when the dialog 
is dismissed. 

Basic Dialog 

The simplest use of DialogFragment is as a floating container for the 
fragment's view hierarchy. A simple implementation may look like 
this:development/samples/ApiDemos/src/com/example/android/apis/app/FragmentDialog.java
dialogAn example showDialog() method on the Activity could 
be:development/samples/ApiDemos/src/com/example/android/apis/app/FragmentDialog.java
add_dialogThis removes any currently shown dialog, creates a new DialogFragment 
with an argument, and shows it as a new state on the back stack. When the 
transaction is popped, the current DialogFragment and its Dialog will be 
destroyed, and the previous one (if any) re-shown. Note that in this case 
DialogFragment will take care of popping the transaction of the Dialog is 
dismissed separately from it. 

Alert Dialog 

Instead of (or in addition to) implementing (|android.app.DialogFragment|) to 
generate the view hierarchy inside of a dialog, you may implement 
(|android.app.DialogFragment|) to create your own custom Dialog object. 

This is most useful for creating an (|android.app.AlertDialog|) , allowing you 
to display standard alerts to the user that are managed by a fragment. A simple 
example implementation of this 
is:development/samples/ApiDemos/src/com/example/android/apis/app/FragmentAlertDialog.java
dialogThe activity creating this fragment may have the following methods to 
show the dialog and receive results from 
it:development/samples/ApiDemos/src/com/example/android/apis/app/FragmentAlertDialog.java
activityNote that in this case the fragment is not placed on the back stack, it 
is just added as an indefinitely running fragment. Because dialogs normally are 
modal, this will still operate as a back stack, since the dialog will capture 
user input until it is dismissed. When it is dismissed, DialogFragment will 
take care of removing itself from its fragment manager. 

Selecting Between Dialog or Embedding 

A DialogFragment can still optionally be used as a normal fragment, if desired. 
This is useful if you have a fragment that in some cases should be shown as a 
dialog and others embedded in a larger UI. This behavior will normally be 
automatically selected for you based on how you are using the fragment, but can 
be customized with (|android.app.DialogFragment|) . 

For example, here is a simple dialog 
fragment:development/samples/ApiDemos/src/com/example/android/apis/app/FragmentDialogOrActivity.java
dialogAn instance of this fragment can be created and shown as a 
dialog:development/samples/ApiDemos/src/com/example/android/apis/app/FragmentDialogOrActivity.java
show_dialogIt can also be added as content in a view 
hierarchy:development/samples/ApiDemos/src/com/example/android/apis/app/FragmentDialogOrActivity.java
embed 



*int_android.app.DialogFragment.STYLE_NO_FRAME*

Style for (|android.app.DialogFragment|) : don't draw any frame at all; the 
view hierarchy returned by (|android.app.DialogFragment|) is entirely 
responsible for drawing the dialog. 


*int_android.app.DialogFragment.STYLE_NO_INPUT*

Style for (|android.app.DialogFragment|) : like (|android.app.DialogFragment|) 
, but also disables all input to the dialog. The user can not touch it, and its 
window will not receive input focus. 


*int_android.app.DialogFragment.STYLE_NO_TITLE*

Style for (|android.app.DialogFragment|) : don't include a title area. 


*int_android.app.DialogFragment.STYLE_NORMAL*

Style for (|android.app.DialogFragment|) : a basic, normal dialog. 



*android.app.DialogFragment()*

public DialogFragment()




*android.app.DialogFragment.dismiss()*

public void dismiss()

Dismiss the fragment and its dialog. If the fragment was added to the back 
stack, all back stack state up to and including this entry will be popped. 
Otherwise, a new transaction will be committed to remove the fragment. 



*android.app.DialogFragment.dismissAllowingStateLoss()*

public void dismissAllowingStateLoss()

Version of (|android.app.DialogFragment|) that uses 
FragmentTransaction.commitAllowingStateLoss()(|android.app.FragmentTransaction|)
. See linked documentation for further details. 



*android.app.DialogFragment.dump(String,FileDescriptor,PrintWriter,String[])*

public void dump(
  java.lang.String prefix,
  java.io.FileDescriptor fd,
  java.io.PrintWriter writer,
  java.lang.String[] args)





*android.app.DialogFragment.getDialog()*

public |android.app.Dialog| getDialog()





*android.app.DialogFragment.getLayoutInflater(Bundle)*

public |android.view.LayoutInflater| getLayoutInflater(android.os.Bundle savedInstanceState)





*android.app.DialogFragment.getShowsDialog()*

public boolean getShowsDialog()

Return the current value of (|android.app.DialogFragment|) . 



*android.app.DialogFragment.getTheme()*

public int getTheme()





*android.app.DialogFragment.isCancelable()*

public boolean isCancelable()

Return the current value of (|android.app.DialogFragment|) . 



*android.app.DialogFragment.onActivityCreated(Bundle)*

public void onActivityCreated(android.os.Bundle savedInstanceState)





*android.app.DialogFragment.onAttach(Activity)*

public void onAttach(android.app.Activity activity)





*android.app.DialogFragment.onCancel(DialogInterface)*

public void onCancel(android.content.DialogInterface dialog)





*android.app.DialogFragment.onCreate(Bundle)*

public void onCreate(android.os.Bundle savedInstanceState)





*android.app.DialogFragment.onCreateDialog(Bundle)*

public |android.app.Dialog| onCreateDialog(android.os.Bundle savedInstanceState)

Override to build your own custom Dialog container. This is typically used to 
show an AlertDialog instead of a generic Dialog; when doing so, 
(|android.app.DialogFragment|) does not need to be implemented since the 
AlertDialog takes care of its own content. 

This method will be called after (|android.app.DialogFragment|) and before 
(|android.app.DialogFragment|) . The default implementation simply instantiates 
and returns a (|android.app.Dialog|) class. 

Note: DialogFragment own the Dialog.setOnCancelListener(|android.app.Dialog|) 
and Dialog.setOnDismissListener(|android.app.Dialog|) callbacks. You must not 
set them yourself. To find out about these events, override 
(|android.app.DialogFragment|) and (|android.app.DialogFragment|) . 


    savedInstanceState - The last saved instance state of the Fragment, or null if this is a freshly 
       created Fragment. 

    Returns: Return a new Dialog instance to be displayed by the Fragment. 

*android.app.DialogFragment.onDestroyView()*

public void onDestroyView()

Remove dialog. 



*android.app.DialogFragment.onDetach()*

public void onDetach()





*android.app.DialogFragment.onDismiss(DialogInterface)*

public void onDismiss(android.content.DialogInterface dialog)





*android.app.DialogFragment.onSaveInstanceState(Bundle)*

public void onSaveInstanceState(android.os.Bundle outState)





*android.app.DialogFragment.onStart()*

public void onStart()





*android.app.DialogFragment.onStop()*

public void onStop()





*android.app.DialogFragment.setCancelable(boolean)*

public void setCancelable(boolean cancelable)

Control whether the shown Dialog is cancelable. Use this instead of directly 
calling Dialog.setCancelable(boolean)(|android.app.Dialog|) , because 
DialogFragment needs to change its behavior based on this. 


    cancelable - If true, the dialog is cancelable. The default is true. 

*android.app.DialogFragment.setShowsDialog(boolean)*

public void setShowsDialog(boolean showsDialog)

Controls whether this fragment should be shown in a dialog. If not set, no 
Dialog will be created in (|android.app.DialogFragment|) , and the fragment's 
view hierarchy will thus not be added to it. This allows you to instead use it 
as a normal fragment (embedded inside of its activity). 

This is normally set for you based on whether the fragment is associated with a 
container view ID passed to FragmentTransaction.add(int, 
Fragment)(|android.app.FragmentTransaction|) . If the fragment was added with a 
container, setShowsDialog will be initialized to false; otherwise, it will be 
true. 


    showsDialog - If true, the fragment will be displayed in a Dialog. If false, no Dialog will 
       be created and the fragment's view hierarchly left undisturbed. 

*android.app.DialogFragment.setStyle(int,int)*

public void setStyle(
  int style,
  int theme)

Call to customize the basic appearance and behavior of the fragment's dialog. 
This can be used for some common dialog behaviors, taking care of selecting 
flags, theme, and other options for you. The same effect can be achieve by 
manually setting Dialog and Window attributes yourself. Calling this after the 
fragment's Dialog is created will have no effect. 


    style - Selects a standard style: may be {@link #STYLE_NORMAL}, {@link 
       #STYLE_NO_TITLE}, {@link #STYLE_NO_FRAME}, or {@link #STYLE_NO_INPUT}. 
    theme - Optional custom theme. If 0, an appropriate theme (based on the style) will be 
       selected for you. 

*android.app.DialogFragment.show(FragmentManager,String)*

public void show(
  android.app.FragmentManager manager,
  java.lang.String tag)

Display the dialog, adding the fragment to the given FragmentManager. This is a 
convenience for explicitly creating a transaction, adding the fragment to it 
with the given tag, and committing it. This does not add the transaction to the 
back stack. When the fragment is dismissed, a new transaction will be executed 
to remove it from the activity. 


    manager - The FragmentManager this fragment will be added to. 
    tag - The tag for this fragment, as per {@link FragmentTransaction#add(Fragment, 
       String) FragmentTransaction.add}. 

*android.app.DialogFragment.show(FragmentTransaction,String)*

public int show(
  android.app.FragmentTransaction transaction,
  java.lang.String tag)

Display the dialog, adding the fragment using an existing transaction and then 
committing the transaction. 


    transaction - An existing transaction in which to add the fragment. 
    tag - The tag for this fragment, as per {@link FragmentTransaction#add(Fragment, 
       String) FragmentTransaction.add}. 

    Returns: Returns the identifier of the committed transaction, as per {@link 
             FragmentTransaction#commit() FragmentTransaction.commit()}. 


