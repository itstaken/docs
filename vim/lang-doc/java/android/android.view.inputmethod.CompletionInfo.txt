*android.view.inputmethod.CompletionInfo* *CompletionInfo* Information about a s

public final class CompletionInfo
  extends    |java.lang.Object|
  implements |android.os.Parcelable|

|android.view.inputmethod.CompletionInfo_Description|
|android.view.inputmethod.CompletionInfo_Fields|
|android.view.inputmethod.CompletionInfo_Constructors|
|android.view.inputmethod.CompletionInfo_Methods|

================================================================================

*android.view.inputmethod.CompletionInfo_Fields*
|android.os.Parcelable.Creator<android.view.inputmethod.CompletionInfo>_android.view.inputmethod.CompletionInfo.CREATOR|

*android.view.inputmethod.CompletionInfo_Constructors*
|android.view.inputmethod.CompletionInfo(long,int,CharSequence)|Create a simple
|android.view.inputmethod.CompletionInfo(long,int,CharSequence,CharSequence)|Cr

*android.view.inputmethod.CompletionInfo_Methods*
|android.view.inputmethod.CompletionInfo.describeContents()|
|android.view.inputmethod.CompletionInfo.getId()|Return the abstract identifier
|android.view.inputmethod.CompletionInfo.getLabel()|Return the user-visible lab
|android.view.inputmethod.CompletionInfo.getPosition()|Return the original posi
|android.view.inputmethod.CompletionInfo.getText()|Return the actual text assoc
|android.view.inputmethod.CompletionInfo.toString()|
|android.view.inputmethod.CompletionInfo.writeToParcel(Parcel,int)|Used to pack

*android.view.inputmethod.CompletionInfo_Description*

Information about a single text completion that an editor has reported to an 
input method. 

This class encapsulates a completion offered by an application that wants it to 
be presented to the user by the IME. Usually, apps present their completions 
directly in a scrolling list for example (UI developers will usually use or 
extend (|android.widget.AutoCompleteTextView|) to implement this). However, in 
some cases, the editor may not be visible, as in the case in extract mode where 
the IME has taken over the full screen. In this case, the editor can choose to 
send their completions to the IME for display. 

Most applications who want to send completions to an IME should use 
(|android.widget.AutoCompleteTextView|) as this class makes this process easy. 
In this case, the application would not have to deal directly with this class. 

An application who implements its own editor and wants direct control over this 
would create an array of CompletionInfo objects, and send it to the IME using 
(|android.view.inputmethod.InputMethodManager|) . The IME would present the 
completions however they see fit, and call back to the editor through 
(|android.view.inputmethod.InputConnection|) . The application can then pick up 
the commit event by overriding (|android.widget.TextView|) . 



*android.os.Parcelable.Creator<android.view.inputmethod.CompletionInfo>_android.view.inputmethod.CompletionInfo.CREATOR*

Used to make this class parcelable. 



*android.view.inputmethod.CompletionInfo(long,int,CharSequence)*

public CompletionInfo(
  long id,
  int index,
  java.lang.CharSequence text)

Create a simple completion with just text, no label. 

    id - An id that get passed as is (to the editor's discretion) 
    index - An index that get passed as is. Typically this is the index in the list of 
       completions inside the editor. 
    text - The text that should be inserted into the editor when this completion is 
       chosen. 

*android.view.inputmethod.CompletionInfo(long,int,CharSequence,CharSequence)*

public CompletionInfo(
  long id,
  int index,
  java.lang.CharSequence text,
  java.lang.CharSequence label)

Create a full completion with both text and label. The text is what will get 
inserted into the editor, while the label is what the IME should display. If 
they are the same, use the version of the constructor without a `label' 
argument. 

    id - An id that get passed as is (to the editor's discretion) 
    index - An index that get passed as is. Typically this is the index in the list of 
       completions inside the editor. 
    text - The text that should be inserted into the editor when this completion is 
       chosen. 
    label - The text that the IME should be showing among the completions list. 

*android.view.inputmethod.CompletionInfo.describeContents()*

public int describeContents()





*android.view.inputmethod.CompletionInfo.getId()*

public long getId()

Return the abstract identifier for this completion, typically corresponding to 
the id associated with it in the original adapter. 



*android.view.inputmethod.CompletionInfo.getLabel()*

public |java.lang.CharSequence| getLabel()

Return the user-visible label for the completion, or null if the plain text 
should be shown. If non-null, this will be what the user sees as the completion 
option instead of the actual text. 



*android.view.inputmethod.CompletionInfo.getPosition()*

public int getPosition()

Return the original position of this completion, typically corresponding to its 
position in the original adapter. 



*android.view.inputmethod.CompletionInfo.getText()*

public |java.lang.CharSequence| getText()

Return the actual text associated with this completion. This is the real text 
that will be inserted into the editor if the user selects it. 



*android.view.inputmethod.CompletionInfo.toString()*

public |java.lang.String| toString()





*android.view.inputmethod.CompletionInfo.writeToParcel(Parcel,int)*

public void writeToParcel(
  android.os.Parcel dest,
  int flags)

Used to package this object into a (|android.os.Parcel|) . 


    dest - The {@link Parcel} to be written. 
    flags - The flags used for parceling. 


