*android.webkit.WebSettings* *WebSettings* Manages settings state for a WebView.

public abstract class WebSettings
  extends    |java.lang.Object|

|android.webkit.WebSettings_Description|
|android.webkit.WebSettings_Fields|
|android.webkit.WebSettings_Constructors|
|android.webkit.WebSettings_Methods|

================================================================================

*android.webkit.WebSettings_Fields*
|int_android.webkit.WebSettings.LOAD_CACHE_ELSE_NETWORK|
|int_android.webkit.WebSettings.LOAD_CACHE_ONLY|
|int_android.webkit.WebSettings.LOAD_DEFAULT|
|int_android.webkit.WebSettings.LOAD_NO_CACHE|
|int_android.webkit.WebSettings.LOAD_NORMAL|

*android.webkit.WebSettings_Constructors*
|android.webkit.WebSettings()|Hidden constructor to prevent clients from creati

*android.webkit.WebSettings_Methods*
|android.webkit.WebSettings.enableSmoothTransition()|Gets whether the WebView e
|android.webkit.WebSettings.getAllowContentAccess()|Gets whether this WebView s
|android.webkit.WebSettings.getAllowFileAccess()|Gets whether this WebView supp
|android.webkit.WebSettings.getAllowFileAccessFromFileURLs()|Gets whether JavaS
|android.webkit.WebSettings.getAllowUniversalAccessFromFileURLs()|Gets whether 
|android.webkit.WebSettings.getBlockNetworkImage()|Gets whether the WebView doe
|android.webkit.WebSettings.getBlockNetworkLoads()|Gets whether the WebView doe
|android.webkit.WebSettings.getBuiltInZoomControls()|Gets whether the zoom mech
|android.webkit.WebSettings.getCacheMode()|Gets the current setting for overrid
|android.webkit.WebSettings.getCursiveFontFamily()|Gets the cursive font family
|android.webkit.WebSettings.getDatabaseEnabled()|Gets whether the database stor
|android.webkit.WebSettings.getDatabasePath()|Gets the path to where database s
|android.webkit.WebSettings.getDefaultFixedFontSize()|Gets the default fixed fo
|android.webkit.WebSettings.getDefaultFontSize()|Gets the default font size.
|android.webkit.WebSettings.getDefaultTextEncodingName()|Gets the default text 
|android.webkit.WebSettings.getDefaultUserAgent(Context)|Returns the default Us
|android.webkit.WebSettings.getDefaultZoom()|Gets the default zoom density of t
|android.webkit.WebSettings.getDisplayZoomControls()|Gets whether the WebView d
|android.webkit.WebSettings.getDomStorageEnabled()|Gets whether the DOM Storage
|android.webkit.WebSettings.getFantasyFontFamily()|Gets the fantasy font family
|android.webkit.WebSettings.getFixedFontFamily()|Gets the fixed font family nam
|android.webkit.WebSettings.getJavaScriptCanOpenWindowsAutomatically()|Gets whe
|android.webkit.WebSettings.getJavaScriptEnabled()|Gets whether JavaScript is e
|android.webkit.WebSettings.getLayoutAlgorithm()|Gets the current layout algori
|android.webkit.WebSettings.getLightTouchEnabled()|Gets whether light touches a
|android.webkit.WebSettings.getLoadsImagesAutomatically()|Gets whether the WebV
|android.webkit.WebSettings.getLoadWithOverviewMode()|Gets whether this WebView
|android.webkit.WebSettings.getMediaPlaybackRequiresUserGesture()|Gets whether 
|android.webkit.WebSettings.getMinimumFontSize()|Gets the minimum font size.
|android.webkit.WebSettings.getMinimumLogicalFontSize()|Gets the minimum logica
|android.webkit.WebSettings.getNavDump()|Gets whether dumping the navigation ca
|android.webkit.WebSettings.getPluginsEnabled()|Gets whether plugins are enable
|android.webkit.WebSettings.getPluginsPath()|Gets the directory that contains t
|android.webkit.WebSettings.getPluginState()|Gets the current state regarding w
|android.webkit.WebSettings.getSansSerifFontFamily()|Gets the sans-serif font f
|android.webkit.WebSettings.getSaveFormData()|Gets whether the WebView saves fo
|android.webkit.WebSettings.getSavePassword()|Gets whether the WebView saves pa
|android.webkit.WebSettings.getSerifFontFamily()|Gets the serif font family nam
|android.webkit.WebSettings.getStandardFontFamily()|Gets the standard font fami
|android.webkit.WebSettings.getTextSize()|Gets the text size of the page.
|android.webkit.WebSettings.getTextZoom()|Gets the text zoom of the page in per
|android.webkit.WebSettings.getUseDoubleTree()|Controlled a rendering optimizat
|android.webkit.WebSettings.getUserAgent()|Gets the user-agent as an integer co
|android.webkit.WebSettings.getUserAgentString()|Gets the WebView's user-agent 
|android.webkit.WebSettings.getUseWebViewBackgroundForOverscrollBackground()|Ge
|android.webkit.WebSettings.getUseWideViewPort()|Gets whether the WebView suppo
|android.webkit.WebSettings.setAllowContentAccess(boolean)|Enables or disables 
|android.webkit.WebSettings.setAllowFileAccess(boolean)|Enables or disables fil
|android.webkit.WebSettings.setAllowFileAccessFromFileURLs(boolean)|Sets whethe
|android.webkit.WebSettings.setAllowUniversalAccessFromFileURLs(boolean)|Sets w
|android.webkit.WebSettings.setAppCacheEnabled(boolean)|Sets whether the Applic
|android.webkit.WebSettings.setAppCacheMaxSize(long)|Sets the maximum size for 
|android.webkit.WebSettings.setAppCachePath(String)|Sets the path to the Applic
|android.webkit.WebSettings.setBlockNetworkImage(boolean)|Sets whether the WebV
|android.webkit.WebSettings.setBlockNetworkLoads(boolean)|Sets whether the WebV
|android.webkit.WebSettings.setBuiltInZoomControls(boolean)|Sets whether the We
|android.webkit.WebSettings.setCacheMode(int)|Overrides the way the cache is us
|android.webkit.WebSettings.setCursiveFontFamily(String)|Sets the cursive font 
|android.webkit.WebSettings.setDatabaseEnabled(boolean)|Sets whether the databa
|android.webkit.WebSettings.setDatabasePath(String)|Sets the path to where data
|android.webkit.WebSettings.setDefaultFixedFontSize(int)|Sets the default fixed
|android.webkit.WebSettings.setDefaultFontSize(int)|Sets the default font size.
|android.webkit.WebSettings.setDefaultTextEncodingName(String)|Sets the default
|android.webkit.WebSettings.setDefaultZoom(WebSettings.ZoomDensity)|Sets the de
|android.webkit.WebSettings.setDisplayZoomControls(boolean)|Sets whether the We
|android.webkit.WebSettings.setDomStorageEnabled(boolean)|Sets whether the DOM 
|android.webkit.WebSettings.setEnableSmoothTransition(boolean)|Sets whether the
|android.webkit.WebSettings.setFantasyFontFamily(String)|Sets the fantasy font 
|android.webkit.WebSettings.setFixedFontFamily(String)|Sets the fixed font fami
|android.webkit.WebSettings.setGeolocationDatabasePath(String)|Sets the path wh
|android.webkit.WebSettings.setGeolocationEnabled(boolean)|Sets whether Geoloca
|android.webkit.WebSettings.setJavaScriptCanOpenWindowsAutomatically(boolean)|T
|android.webkit.WebSettings.setJavaScriptEnabled(boolean)|Tells the WebView to 
|android.webkit.WebSettings.setLayoutAlgorithm(WebSettings.LayoutAlgorithm)|Set
|android.webkit.WebSettings.setLightTouchEnabled(boolean)|Enables using light t
|android.webkit.WebSettings.setLoadsImagesAutomatically(boolean)|Sets whether t
|android.webkit.WebSettings.setLoadWithOverviewMode(boolean)|Sets whether the W
|android.webkit.WebSettings.setMediaPlaybackRequiresUserGesture(boolean)|Sets w
|android.webkit.WebSettings.setMinimumFontSize(int)|Sets the minimum font size.
|android.webkit.WebSettings.setMinimumLogicalFontSize(int)|Sets the minimum log
|android.webkit.WebSettings.setNavDump(boolean)|Enables dumping the pages navig
|android.webkit.WebSettings.setNeedInitialFocus(boolean)|Tells the WebView whet
|android.webkit.WebSettings.setPluginsEnabled(boolean)|Sets whether the WebView
|android.webkit.WebSettings.setPluginsPath(String)|Sets a custom path to plugin
|android.webkit.WebSettings.setPluginState(WebSettings.PluginState)|Tells the W
|android.webkit.WebSettings.setRenderPriority(WebSettings.RenderPriority)|Sets 
|android.webkit.WebSettings.setSansSerifFontFamily(String)|Sets the sans-serif 
|android.webkit.WebSettings.setSaveFormData(boolean)|Sets whether the WebView s
|android.webkit.WebSettings.setSavePassword(boolean)|Sets whether the WebView s
|android.webkit.WebSettings.setSerifFontFamily(String)|Sets the serif font fami
|android.webkit.WebSettings.setStandardFontFamily(String)|Sets the standard fon
|android.webkit.WebSettings.setSupportMultipleWindows(boolean)|Sets whether the
|android.webkit.WebSettings.setSupportZoom(boolean)|Sets whether the WebView sh
|android.webkit.WebSettings.setTextSize(WebSettings.TextSize)|Sets the text siz
|android.webkit.WebSettings.setTextZoom(int)|Sets the text zoom of the page in 
|android.webkit.WebSettings.setUseDoubleTree(boolean)|Controlled a rendering op
|android.webkit.WebSettings.setUserAgent(int)|Sets the user-agent string using 
|android.webkit.WebSettings.setUserAgentString(String)|Sets the WebView's user-
|android.webkit.WebSettings.setUseWebViewBackgroundForOverscrollBackground(boolean)|
|android.webkit.WebSettings.setUseWideViewPort(boolean)|Sets whether the WebVie
|android.webkit.WebSettings.supportMultipleWindows()|Gets whether the WebView s
|android.webkit.WebSettings.supportZoom()|Gets whether the WebView supports zoo

*android.webkit.WebSettings_Description*

Manages settings state for a WebView. When a WebView is first created, it 
obtains a set of default settings. These default settings will be returned from 
any getter call. A WebSettings object obtained from WebView.getSettings() is 
tied to the life of the WebView. If a WebView has been destroyed, any method 
call on WebSettings will throw an IllegalStateException. 



*int_android.webkit.WebSettings.LOAD_CACHE_ELSE_NETWORK*

Use cached resources when they are available, even if they have expired. 
Otherwise load resources from the network. Use with 
(|android.webkit.WebSettings|) . 


*int_android.webkit.WebSettings.LOAD_CACHE_ONLY*

Don't use the network, load from the cache. Use with 
(|android.webkit.WebSettings|) . 


*int_android.webkit.WebSettings.LOAD_DEFAULT*

Default cache usage mode. If the navigation type doesn't impose any specific 
behavior, use cached resources when they are available and not expired, 
otherwise load resources from the network. Use with 
(|android.webkit.WebSettings|) . 


*int_android.webkit.WebSettings.LOAD_NO_CACHE*

Don't use the cache, load from the network. Use with 
(|android.webkit.WebSettings|) . 


*int_android.webkit.WebSettings.LOAD_NORMAL*

Normal cache usage mode. Use with (|android.webkit.WebSettings|) . 



*android.webkit.WebSettings()*

protected WebSettings()

Hidden constructor to prevent clients from creating a new settings instance or 
deriving the class. 


*android.webkit.WebSettings.enableSmoothTransition()*

public boolean enableSmoothTransition()

Gets whether the WebView enables smooth transition while panning or zooming. 

    Deprecated: This method is now obsolete, and will become a no-op in future.


*android.webkit.WebSettings.getAllowContentAccess()*

public boolean getAllowContentAccess()

Gets whether this WebView supports content URL access. 



*android.webkit.WebSettings.getAllowFileAccess()*

public boolean getAllowFileAccess()

Gets whether this WebView supports file access. 



*android.webkit.WebSettings.getAllowFileAccessFromFileURLs()*

public abstract boolean getAllowFileAccessFromFileURLs()

Gets whether JavaScript running in the context of a file scheme URL can access 
content from other file scheme URLs. 



    Returns: whether JavaScript running in the context of a file scheme URL can access 
             content from other file scheme URLs 

*android.webkit.WebSettings.getAllowUniversalAccessFromFileURLs()*

public abstract boolean getAllowUniversalAccessFromFileURLs()

Gets whether JavaScript running in the context of a file scheme URL can access 
content from any origin. This includes access to content from other file scheme 
URLs. 



    Returns: whether JavaScript running in the context of a file scheme URL can access 
             content from any origin 

*android.webkit.WebSettings.getBlockNetworkImage()*

public synchronized boolean getBlockNetworkImage()

Gets whether the WebView does not load image resources from the network. 



    Returns: true if the WebView does not load image resources from the network 

*android.webkit.WebSettings.getBlockNetworkLoads()*

public synchronized boolean getBlockNetworkLoads()

Gets whether the WebView does not load any resources from the network. 



    Returns: true if the WebView does not load any resources from the network 

*android.webkit.WebSettings.getBuiltInZoomControls()*

public boolean getBuiltInZoomControls()

Gets whether the zoom mechanisms built into WebView are being used. 



    Returns: true if the zoom mechanisms built into WebView are being used 

*android.webkit.WebSettings.getCacheMode()*

public int getCacheMode()

Gets the current setting for overriding the cache mode. 



    Returns: the current setting for overriding the cache mode 

*android.webkit.WebSettings.getCursiveFontFamily()*

public synchronized |java.lang.String| getCursiveFontFamily()

Gets the cursive font family name. 



    Returns: the cursive font family name as a string 

*android.webkit.WebSettings.getDatabaseEnabled()*

public synchronized boolean getDatabaseEnabled()

Gets whether the database storage API is enabled. 



    Returns: true if the database storage API is enabled 

*android.webkit.WebSettings.getDatabasePath()*

public synchronized |java.lang.String| getDatabasePath()

Gets the path to where database storage API databases are saved. 

    Deprecated: Database paths are managed by the implementation this method is obsolete.


    Returns: the String path to the database storage API databases 

*android.webkit.WebSettings.getDefaultFixedFontSize()*

public synchronized int getDefaultFixedFontSize()

Gets the default fixed font size. 



    Returns: a non-negative integer between 1 and 72 

*android.webkit.WebSettings.getDefaultFontSize()*

public synchronized int getDefaultFontSize()

Gets the default font size. 



    Returns: a non-negative integer between 1 and 72 

*android.webkit.WebSettings.getDefaultTextEncodingName()*

public synchronized |java.lang.String| getDefaultTextEncodingName()

Gets the default text encoding name. 



    Returns: the default text encoding name as a string 

*android.webkit.WebSettings.getDefaultUserAgent(Context)*

public static |java.lang.String| getDefaultUserAgent(android.content.Context context)

Returns the default User-Agent used by a WebView. An instance of WebView could 
use a different User-Agent if a call is made to (|android.webkit.WebSettings|) 
. 


    context - a Context object used to access application assets 

*android.webkit.WebSettings.getDefaultZoom()*

public |android.webkit.WebSettings.ZoomDensity| getDefaultZoom()

Gets the default zoom density of the page. This should be called from the UI 
thread. 

This setting is not recommended for use in new applications. 

    Deprecated: Will only return the default value.


    Returns: the zoom density 

*android.webkit.WebSettings.getDisplayZoomControls()*

public boolean getDisplayZoomControls()

Gets whether the WebView displays on-screen zoom controls when using the 
built-in zoom mechanisms. 



    Returns: true if the WebView displays on-screen zoom controls when using the built-in 
             zoom mechanisms 

*android.webkit.WebSettings.getDomStorageEnabled()*

public synchronized boolean getDomStorageEnabled()

Gets whether the DOM Storage APIs are enabled. 



    Returns: true if the DOM Storage APIs are enabled 

*android.webkit.WebSettings.getFantasyFontFamily()*

public synchronized |java.lang.String| getFantasyFontFamily()

Gets the fantasy font family name. 



    Returns: the fantasy font family name as a string 

*android.webkit.WebSettings.getFixedFontFamily()*

public synchronized |java.lang.String| getFixedFontFamily()

Gets the fixed font family name. 



    Returns: the fixed font family name as a string 

*android.webkit.WebSettings.getJavaScriptCanOpenWindowsAutomatically()*

public synchronized boolean getJavaScriptCanOpenWindowsAutomatically()

Gets whether JavaScript can open windows automatically. 



    Returns: true if JavaScript can open windows automatically during window.open() 

*android.webkit.WebSettings.getJavaScriptEnabled()*

public synchronized boolean getJavaScriptEnabled()

Gets whether JavaScript is enabled. 



    Returns: true if JavaScript is enabled 

*android.webkit.WebSettings.getLayoutAlgorithm()*

public synchronized |android.webkit.WebSettings.LayoutAlgorithm| getLayoutAlgorithm()

Gets the current layout algorithm. 



    Returns: the layout algorithm in use, as a {@link LayoutAlgorithm} value 

*android.webkit.WebSettings.getLightTouchEnabled()*

public boolean getLightTouchEnabled()

Gets whether light touches are enabled. 

    Deprecated: This setting is obsolete.


*android.webkit.WebSettings.getLoadsImagesAutomatically()*

public synchronized boolean getLoadsImagesAutomatically()

Gets whether the WebView loads image resources. This includes images embedded 
using the data URI scheme. 



    Returns: true if the WebView loads image resources 

*android.webkit.WebSettings.getLoadWithOverviewMode()*

public boolean getLoadWithOverviewMode()

Gets whether this WebView loads pages in overview mode. 



    Returns: whether this WebView loads pages in overview mode 

*android.webkit.WebSettings.getMediaPlaybackRequiresUserGesture()*

public boolean getMediaPlaybackRequiresUserGesture()

Gets whether the WebView requires a user gesture to play media. 



    Returns: true if the WebView requires a user gesture to play media 

*android.webkit.WebSettings.getMinimumFontSize()*

public synchronized int getMinimumFontSize()

Gets the minimum font size. 



    Returns: a non-negative integer between 1 and 72 

*android.webkit.WebSettings.getMinimumLogicalFontSize()*

public synchronized int getMinimumLogicalFontSize()

Gets the minimum logical font size. 



    Returns: a non-negative integer between 1 and 72 

*android.webkit.WebSettings.getNavDump()*

public boolean getNavDump()

Gets whether dumping the navigation cache is enabled. 

    Deprecated: This method is now obsolete.


    Returns: whether dumping the navigation cache is enabled 

*android.webkit.WebSettings.getPluginsEnabled()*

public synchronized boolean getPluginsEnabled()

Gets whether plugins are enabled. 

    Deprecated: This method has been replaced by {@link #getPluginState}


    Returns: true if plugins are enabled 

*android.webkit.WebSettings.getPluginsPath()*

public synchronized |java.lang.String| getPluginsPath()

Gets the directory that contains the plugin libraries. This method is obsolete 
since each plugin is now loaded from its own package. 

    Deprecated: This method is no longer used as plugins are loaded from
 their own APK via the system's package manager.


    Returns: an empty string 

*android.webkit.WebSettings.getPluginState()*

public synchronized |android.webkit.WebSettings.PluginState| getPluginState()

Gets the current state regarding whether plugins are enabled. 

    Deprecated: Plugins will not be supported in future, and should not be used.


    Returns: the plugin state as a {@link PluginState} value 

*android.webkit.WebSettings.getSansSerifFontFamily()*

public synchronized |java.lang.String| getSansSerifFontFamily()

Gets the sans-serif font family name. 



    Returns: the sans-serif font family name as a string 

*android.webkit.WebSettings.getSaveFormData()*

public boolean getSaveFormData()

Gets whether the WebView saves form data. 



    Returns: whether the WebView saves form data 

*android.webkit.WebSettings.getSavePassword()*

public boolean getSavePassword()

Gets whether the WebView saves passwords. 

    Deprecated: Saving passwords in WebView will not be supported in future versions.


    Returns: whether the WebView saves passwords 

*android.webkit.WebSettings.getSerifFontFamily()*

public synchronized |java.lang.String| getSerifFontFamily()

Gets the serif font family name. The default is "serif". 



    Returns: the serif font family name as a string 

*android.webkit.WebSettings.getStandardFontFamily()*

public synchronized |java.lang.String| getStandardFontFamily()

Gets the standard font family name. 



    Returns: the standard font family name as a string 

*android.webkit.WebSettings.getTextSize()*

public synchronized |android.webkit.WebSettings.TextSize| getTextSize()

Gets the text size of the page. If the text size was previously specified in 
percent using (|android.webkit.WebSettings|) , this will return the closest 
matching (|android.webkit.WebSettings.TextSize|) . 

    Deprecated: Use {@link #getTextZoom} instead.


    Returns: the text size as a {@link TextSize} value 

*android.webkit.WebSettings.getTextZoom()*

public synchronized int getTextZoom()

Gets the text zoom of the page in percent. 



    Returns: the text zoom of the page in percent 

*android.webkit.WebSettings.getUseDoubleTree()*

public synchronized boolean getUseDoubleTree()

Controlled a rendering optimization that is no longer present. Setting it now 
has no effect. 

    Deprecated: This setting now has no effect.


*android.webkit.WebSettings.getUserAgent()*

public synchronized int getUserAgent()

Gets the user-agent as an integer code. 

-1 means the WebView is using a custom user-agent string set with 
(|android.webkit.WebSettings|) 0 means the WebView should use an Android 
user-agent string 1 means the WebView should use a desktop user-agent string 

    Deprecated: Please use {@link #getUserAgentString} instead.


    Returns: the integer code for the user-agent string 

*android.webkit.WebSettings.getUserAgentString()*

public synchronized |java.lang.String| getUserAgentString()

Gets the WebView's user-agent string. 



    Returns: the WebView's user-agent string 

*android.webkit.WebSettings.getUseWebViewBackgroundForOverscrollBackground()*

public boolean getUseWebViewBackgroundForOverscrollBackground()

Gets whether this WebView uses WebView's background instead of internal pattern 
for over scroll background. 

    Deprecated: This method is now obsolete.


*android.webkit.WebSettings.getUseWideViewPort()*

public synchronized boolean getUseWideViewPort()

Gets whether the WebView supports the viewport HTML meta tag or will use a wide 
viewport. 



    Returns: true if the WebView supports the viewport meta tag 

*android.webkit.WebSettings.setAllowContentAccess(boolean)*

public void setAllowContentAccess(boolean allow)

Enables or disables content URL access within WebView. Content URL access 
allows WebView to load content from a content provider installed in the system. 
The default is enabled. 



*android.webkit.WebSettings.setAllowFileAccess(boolean)*

public void setAllowFileAccess(boolean allow)

Enables or disables file access within WebView. File access is enabled by 
default. Note that this enables or disables file system access only. Assets and 
resources are still accessible using file:///android_asset and 
file:///android_res. 



*android.webkit.WebSettings.setAllowFileAccessFromFileURLs(boolean)*

public abstract void setAllowFileAccessFromFileURLs(boolean flag)

Sets whether JavaScript running in the context of a file scheme URL should be 
allowed to access content from other file scheme URLs. To enable the most 
restrictive, and therefore secure policy, this setting should be disabled. Note 
that the value of this setting is ignored if the value of 
(|android.webkit.WebSettings|) is true. Note too, that this setting affects 
only JavaScript access to file scheme resources. Other access to such 
resources, for example, from image HTML elements, is unaffected. 

The default value is true for API level (|android.os.Build.VERSION_CODES|) and 
below, and false for API level (|android.os.Build.VERSION_CODES|) and above. 


    flag - whether JavaScript running in the context of a file scheme URL should be 
       allowed to access content from other file scheme URLs 

*android.webkit.WebSettings.setAllowUniversalAccessFromFileURLs(boolean)*

public abstract void setAllowUniversalAccessFromFileURLs(boolean flag)

Sets whether JavaScript running in the context of a file scheme URL should be 
allowed to access content from any origin. This includes access to content from 
other file scheme URLs. See (|android.webkit.WebSettings|) . To enable the most 
restrictive, and therefore secure policy, this setting should be disabled. Note 
that this setting affects only JavaScript access to file scheme resources. 
Other access to such resources, for example, from image HTML elements, is 
unaffected. 

The default value is true for API level (|android.os.Build.VERSION_CODES|) and 
below, and false for API level (|android.os.Build.VERSION_CODES|) and above. 


    flag - whether JavaScript running in the context of a file scheme URL should be 
       allowed to access content from any origin 

*android.webkit.WebSettings.setAppCacheEnabled(boolean)*

public synchronized void setAppCacheEnabled(boolean flag)

Sets whether the Application Caches API should be enabled. The default is 
false. Note that in order for the Application Caches API to be enabled, a valid 
database path must also be supplied to (|android.webkit.WebSettings|) . 


    flag - true if the WebView should enable Application Caches 

*android.webkit.WebSettings.setAppCacheMaxSize(long)*

public synchronized void setAppCacheMaxSize(long appCacheMaxSize)

Sets the maximum size for the Application Cache content. The passed size will 
be rounded to the nearest value that the database can support, so this should 
be viewed as a guide, not a hard limit. Setting the size to a value less than 
current database size does not cause the database to be trimmed. The default 
size is (|java.lang.Long|) . It is recommended to leave the maximum size set to 
the default value. 

    Deprecated: In future quota will be managed automatically.

    appCacheMaxSize - the maximum size in bytes 

*android.webkit.WebSettings.setAppCachePath(String)*

public synchronized void setAppCachePath(java.lang.String appCachePath)

Sets the path to the Application Caches files. In order for the Application 
Caches API to be enabled, this method must be called with a path to which the 
application can write. This method should only be called once: repeated calls 
are ignored. 


    appCachePath - a String path to the directory containing Application Caches files. 

*android.webkit.WebSettings.setBlockNetworkImage(boolean)*

public synchronized void setBlockNetworkImage(boolean flag)

Sets whether the WebView should not load image resources from the network 
(resources accessed via http and https URI schemes). Note that this method has 
no effect unless (|android.webkit.WebSettings|) returns true. Also note that 
disabling all network loads using (|android.webkit.WebSettings|) will also 
prevent network images from loading, even if this flag is set to false. When 
the value of this setting is changed from true to false, network images 
resources referenced by content currently displayed by the WebView are fetched 
automatically. The default is false. 


    flag - whether the WebView should not load image resources from the network 

*android.webkit.WebSettings.setBlockNetworkLoads(boolean)*

public synchronized void setBlockNetworkLoads(boolean flag)

Sets whether the WebView should not load resources from the network. Use 
(|android.webkit.WebSettings|) to only avoid loading image resources. Note that 
if the value of this setting is changed from true to false, network resources 
referenced by content currently displayed by the WebView are not fetched until 
(|android.webkit.WebView|) is called. If the application does not have the 
(|android.Manifest.permission|) permission, attempts to set a value of false 
will cause a (|java.lang.SecurityException|) to be thrown. The default value is 
false if the application has the (|android.Manifest.permission|) permission, 
otherwise it is true. 


    flag - whether the WebView should not load any resources from the network 

*android.webkit.WebSettings.setBuiltInZoomControls(boolean)*

public void setBuiltInZoomControls(boolean enabled)

Sets whether the WebView should use its built-in zoom mechanisms. The built-in 
zoom mechanisms comprise on-screen zoom controls, which are displayed over the 
WebView's content, and the use of a pinch gesture to control zooming. Whether 
or not these on-screen controls are displayed can be set with 
(|android.webkit.WebSettings|) . The default is false. 

The built-in mechanisms are the only currently supported zoom mechanisms, so it 
is recommended that this setting is always enabled. 


    enabled - whether the WebView should use its built-in zoom mechanisms 

*android.webkit.WebSettings.setCacheMode(int)*

public void setCacheMode(int mode)

Overrides the way the cache is used. The way the cache is used is based on the 
navigation type. For a normal page load, the cache is checked and content is 
re-validated as needed. When navigating back, content is not revalidated, 
instead the content is just retrieved from the cache. This method allows the 
client to override this behavior by specifying one of 
(|android.webkit.WebSettings|) , (|android.webkit.WebSettings|) , 
(|android.webkit.WebSettings|) or (|android.webkit.WebSettings|) . The default 
value is (|android.webkit.WebSettings|) . 


    mode - the mode to use 

*android.webkit.WebSettings.setCursiveFontFamily(String)*

public synchronized void setCursiveFontFamily(java.lang.String font)

Sets the cursive font family name. The default is "cursive". 


    font - a font family name 

*android.webkit.WebSettings.setDatabaseEnabled(boolean)*

public synchronized void setDatabaseEnabled(boolean flag)

Sets whether the database storage API is enabled. The default value is false. 
See also (|android.webkit.WebSettings|) for how to correctly set up the 
database storage API. 

This setting is global in effect, across all WebView instances in a process. 
Note you should only modify this setting prior to making any WebView page load 
within a given process, as the WebView implementation may ignore changes to 
this setting after that point. 


    flag - true if the WebView should use the database storage API 

*android.webkit.WebSettings.setDatabasePath(String)*

public synchronized void setDatabasePath(java.lang.String databasePath)

Sets the path to where database storage API databases should be saved. In order 
for the database storage API to function correctly, this method must be called 
with a path to which the application can write. This method should only be 
called once: repeated calls are ignored. 

    Deprecated: Database paths are managed by the implementation and calling this method
             will have no effect.

    databasePath - a path to the directory where databases should be saved. 

*android.webkit.WebSettings.setDefaultFixedFontSize(int)*

public synchronized void setDefaultFixedFontSize(int size)

Sets the default fixed font size. The default is 16. 


    size - a non-negative integer between 1 and 72. Any number outside the specified range 
       will be pinned. 

*android.webkit.WebSettings.setDefaultFontSize(int)*

public synchronized void setDefaultFontSize(int size)

Sets the default font size. The default is 16. 


    size - a non-negative integer between 1 and 72. Any number outside the specified range 
       will be pinned. 

*android.webkit.WebSettings.setDefaultTextEncodingName(String)*

public synchronized void setDefaultTextEncodingName(java.lang.String encoding)

Sets the default text encoding name to use when decoding html pages. The 
default is "Latin-1". 


    encoding - the text encoding name 

*android.webkit.WebSettings.setDefaultZoom(WebSettings.ZoomDensity)*

public void setDefaultZoom(android.webkit.WebSettings.ZoomDensity zoom)

Sets the default zoom density of the page. This must be called from the UI 
thread. The default is (|android.webkit.WebSettings.ZoomDensity|) . 

This setting is not recommended for use in new applications. If the WebView is 
utilized to display mobile-oriented pages, the desired effect can be achieved 
by adjusting 'width' and 'initial-scale' attributes of page's 'meta viewport' 
tag. For pages lacking the tag, (|android.webkit.WebView|) and 
(|android.webkit.WebSettings|) can be used. 

    Deprecated: This method is no longer supported, see the function documentation for
             recommended alternatives.

    zoom - the zoom density 

*android.webkit.WebSettings.setDisplayZoomControls(boolean)*

public void setDisplayZoomControls(boolean enabled)

Sets whether the WebView should display on-screen zoom controls when using the 
built-in zoom mechanisms. See (|android.webkit.WebSettings|) . The default is 
true. 


    enabled - whether the WebView should display on-screen zoom controls 

*android.webkit.WebSettings.setDomStorageEnabled(boolean)*

public synchronized void setDomStorageEnabled(boolean flag)

Sets whether the DOM storage API is enabled. The default value is false. 


    flag - true if the WebView should use the DOM storage API 

*android.webkit.WebSettings.setEnableSmoothTransition(boolean)*

public void setEnableSmoothTransition(boolean enable)

Sets whether the WebView will enable smooth transition while panning or zooming 
or while the window hosting the WebView does not have focus. If it is true, 
WebView will choose a solution to maximize the performance. e.g. the WebView's 
content may not be updated during the transition. If it is false, WebView will 
keep its fidelity. The default value is false. 

    Deprecated: This method is now obsolete, and will become a no-op in future.


*android.webkit.WebSettings.setFantasyFontFamily(String)*

public synchronized void setFantasyFontFamily(java.lang.String font)

Sets the fantasy font family name. The default is "fantasy". 


    font - a font family name 

*android.webkit.WebSettings.setFixedFontFamily(String)*

public synchronized void setFixedFontFamily(java.lang.String font)

Sets the fixed font family name. The default is "monospace". 


    font - a font family name 

*android.webkit.WebSettings.setGeolocationDatabasePath(String)*

public synchronized void setGeolocationDatabasePath(java.lang.String databasePath)

Sets the path where the Geolocation databases should be saved. In order for 
Geolocation permissions and cached positions to be persisted, this method must 
be called with a path to which the application can write. 


    databasePath - a path to the directory where databases should be saved. 

*android.webkit.WebSettings.setGeolocationEnabled(boolean)*

public synchronized void setGeolocationEnabled(boolean flag)

Sets whether Geolocation is enabled. The default is true. 

Please note that in order for the Geolocation API to be usable by a page in the 
WebView, the following requirements must be met: 

an application must have permission to access the device location, see 
(|android.Manifest.permission|) , (|android.Manifest.permission|) ; an 
application must provide an implementation of the 
(|android.webkit.WebChromeClient|) callback to receive notifications that a 
page is requesting access to location via the JavaScript Geolocation API. 

As an option, it is possible to store previous locations and web origin 
permissions in a database. See (|android.webkit.WebSettings|) . 


    flag - whether Geolocation should be enabled 

*android.webkit.WebSettings.setJavaScriptCanOpenWindowsAutomatically(boolean)*

public synchronized void setJavaScriptCanOpenWindowsAutomatically(boolean flag)

Tells JavaScript to open windows automatically. This applies to the JavaScript 
function window.open(). The default is false. 


    flag - true if JavaScript can open windows automatically 

*android.webkit.WebSettings.setJavaScriptEnabled(boolean)*

public synchronized void setJavaScriptEnabled(boolean flag)

Tells the WebView to enable JavaScript execution. The default is false. 


    flag - true if the WebView should execute JavaScript 

*android.webkit.WebSettings.setLayoutAlgorithm(WebSettings.LayoutAlgorithm)*

public synchronized void setLayoutAlgorithm(android.webkit.WebSettings.LayoutAlgorithm l)

Sets the underlying layout algorithm. This will cause a relayout of the 
WebView. The default is (|android.webkit.WebSettings.LayoutAlgorithm|) . 


    l - the layout algorithm to use, as a {@link LayoutAlgorithm} value 

*android.webkit.WebSettings.setLightTouchEnabled(boolean)*

public void setLightTouchEnabled(boolean enabled)

Enables using light touches to make a selection and activate mouseovers. 

    Deprecated: From {@link android.os.Build.VERSION_CODES#JELLY_BEAN} this
             setting is obsolete and has no effect.


*android.webkit.WebSettings.setLoadsImagesAutomatically(boolean)*

public synchronized void setLoadsImagesAutomatically(boolean flag)

Sets whether the WebView should load image resources. Note that this method 
controls loading of all images, including those embedded using the data URI 
scheme. Use (|android.webkit.WebSettings|) to control loading only of images 
specified using network URI schemes. Note that if the value of this setting is 
changed from false to true, all images resources referenced by content 
currently displayed by the WebView are loaded automatically. The default is 
true. 


    flag - whether the WebView should load image resources 

*android.webkit.WebSettings.setLoadWithOverviewMode(boolean)*

public void setLoadWithOverviewMode(boolean overview)

Sets whether the WebView loads pages in overview mode, that is, zooms out the 
content to fit on screen by width. This setting is taken into account when the 
content width is greater than the width of the WebView control, for example, 
when (|android.webkit.WebSettings|) is enabled. The default is false. 



*android.webkit.WebSettings.setMediaPlaybackRequiresUserGesture(boolean)*

public void setMediaPlaybackRequiresUserGesture(boolean require)

Sets whether the WebView requires a user gesture to play media. The default is 
true. 


    require - whether the WebView requires a user gesture to play media 

*android.webkit.WebSettings.setMinimumFontSize(int)*

public synchronized void setMinimumFontSize(int size)

Sets the minimum font size. The default is 8. 


    size - a non-negative integer between 1 and 72. Any number outside the specified range 
       will be pinned. 

*android.webkit.WebSettings.setMinimumLogicalFontSize(int)*

public synchronized void setMinimumLogicalFontSize(int size)

Sets the minimum logical font size. The default is 8. 


    size - a non-negative integer between 1 and 72. Any number outside the specified range 
       will be pinned. 

*android.webkit.WebSettings.setNavDump(boolean)*

public void setNavDump(boolean enabled)

Enables dumping the pages navigation cache to a text file. The default is 
false. 

    Deprecated: This method is now obsolete.


*android.webkit.WebSettings.setNeedInitialFocus(boolean)*

public void setNeedInitialFocus(boolean flag)

Tells the WebView whether it needs to set a node to have focus when 
(|android.webkit.WebView|) is called. The default value is true. 


    flag - whether the WebView needs to set a node 

*android.webkit.WebSettings.setPluginsEnabled(boolean)*

public synchronized void setPluginsEnabled(boolean flag)

Sets whether the WebView should enable plugins. The default is false. 

    Deprecated: This method has been deprecated in favor of
             {@link #setPluginState}

    flag - true if plugins should be enabled 

*android.webkit.WebSettings.setPluginsPath(String)*

public synchronized void setPluginsPath(java.lang.String pluginsPath)

Sets a custom path to plugins used by the WebView. This method is obsolete 
since each plugin is now loaded from its own package. 

    Deprecated: This method is no longer used as plugins are loaded from
             their own APK via the system's package manager.

    pluginsPath - a String path to the directory containing plugins 

*android.webkit.WebSettings.setPluginState(WebSettings.PluginState)*

public synchronized void setPluginState(android.webkit.WebSettings.PluginState state)

Tells the WebView to enable, disable, or have plugins on demand. On demand mode 
means that if a plugin exists that can handle the embedded content, a 
placeholder icon will be shown instead of the plugin. When the placeholder is 
clicked, the plugin will be enabled. The default is 
(|android.webkit.WebSettings.PluginState|) . 

    Deprecated: Plugins will not be supported in future, and should not be used.

    state - a PluginState value 

*android.webkit.WebSettings.setRenderPriority(WebSettings.RenderPriority)*

public synchronized void setRenderPriority(android.webkit.WebSettings.RenderPriority priority)

Sets the priority of the Render thread. Unlike the other settings, this one 
only needs to be called once per process. The default value is 
(|android.webkit.WebSettings.RenderPriority|) . 

    Deprecated: It is not recommended to adjust thread priorities, and this will
             not be supported in future versions.

    priority - the priority 

*android.webkit.WebSettings.setSansSerifFontFamily(String)*

public synchronized void setSansSerifFontFamily(java.lang.String font)

Sets the sans-serif font family name. The default is "sans-serif". 


    font - a font family name 

*android.webkit.WebSettings.setSaveFormData(boolean)*

public void setSaveFormData(boolean save)

Sets whether the WebView should save form data. The default is true. 



*android.webkit.WebSettings.setSavePassword(boolean)*

public void setSavePassword(boolean save)

Sets whether the WebView should save passwords. The default is true. 

    Deprecated: Saving passwords in WebView will not be supported in future versions.


*android.webkit.WebSettings.setSerifFontFamily(String)*

public synchronized void setSerifFontFamily(java.lang.String font)

Sets the serif font family name. The default is "sans-serif". 


    font - a font family name 

*android.webkit.WebSettings.setStandardFontFamily(String)*

public synchronized void setStandardFontFamily(java.lang.String font)

Sets the standard font family name. The default is "sans-serif". 


    font - a font family name 

*android.webkit.WebSettings.setSupportMultipleWindows(boolean)*

public synchronized void setSupportMultipleWindows(boolean support)

Sets whether the WebView whether supports multiple windows. If set to true, 
(|android.webkit.WebChromeClient|) must be implemented by the host application. 
The default is false. 


    support - whether to suport multiple windows 

*android.webkit.WebSettings.setSupportZoom(boolean)*

public void setSupportZoom(boolean support)

Sets whether the WebView should support zooming using its on-screen zoom 
controls and gestures. The particular zoom mechanisms that should be used can 
be set with (|android.webkit.WebSettings|) . This setting does not affect 
zooming performed using the (|android.webkit.WebView|) and 
(|android.webkit.WebView|) methods. The default is true. 


    support - whether the WebView should support zoom 

*android.webkit.WebSettings.setTextSize(WebSettings.TextSize)*

public synchronized void setTextSize(android.webkit.WebSettings.TextSize t)

Sets the text size of the page. The default is 
(|android.webkit.WebSettings.TextSize|) . 

    Deprecated: Use {@link #setTextZoom} instead.

    t - the text size as a {@link TextSize} value 

*android.webkit.WebSettings.setTextZoom(int)*

public synchronized void setTextZoom(int textZoom)

Sets the text zoom of the page in percent. The default is 100. 


    textZoom - the text zoom in percent 

*android.webkit.WebSettings.setUseDoubleTree(boolean)*

public synchronized void setUseDoubleTree(boolean use)

Controlled a rendering optimization that is no longer present. Setting it now 
has no effect. 

    Deprecated: This setting now has no effect.


*android.webkit.WebSettings.setUserAgent(int)*

public synchronized void setUserAgent(int ua)

Sets the user-agent string using an integer code. 

0 means the WebView should use an Android user-agent string 1 means the WebView 
should use a desktop user-agent string 

Other values are ignored. The default is an Android user-agent string, i.e. 
code value 0. 

    Deprecated: Please use {@link #setUserAgentString} instead.

    ua - the integer code for the user-agent string 

*android.webkit.WebSettings.setUserAgentString(String)*

public synchronized void setUserAgentString(java.lang.String ua)

Sets the WebView's user-agent string. If the string is null or empty, the 
system default value will be used. 



*android.webkit.WebSettings.setUseWebViewBackgroundForOverscrollBackground(boolean)*

public void setUseWebViewBackgroundForOverscrollBackground(boolean view)

Sets whether the WebView uses its background for over scroll background. If 
true, it will use the WebView's background. If false, it will use an internal 
pattern. Default is true. 

    Deprecated: This method is now obsolete.


*android.webkit.WebSettings.setUseWideViewPort(boolean)*

public synchronized void setUseWideViewPort(boolean use)

Sets whether the WebView should enable support for the viewport HTML meta tag 
or should use a wide viewport. When the value of the setting is false, the 
layout width is always set to the width of the WebView control in 
device-independent (CSS) pixels. When the value is true and the page contains 
the viewport meta tag, the value of the width specified in the tag is used. If 
the page does not contain the tag or does not provide a width, then a wide 
viewport will be used. 


    use - whether to enable support for the viewport meta tag 

*android.webkit.WebSettings.supportMultipleWindows()*

public synchronized boolean supportMultipleWindows()

Gets whether the WebView supports multiple windows. 



    Returns: true if the WebView supports multiple windows 

*android.webkit.WebSettings.supportZoom()*

public boolean supportZoom()

Gets whether the WebView supports zoom. 



    Returns: true if the WebView supports zoom 


