*android.content.SyncResult* *SyncResult* This class is used to communicate the 

public final class SyncResult
  extends    |java.lang.Object|
  implements |android.os.Parcelable|

|android.content.SyncResult_Description|
|android.content.SyncResult_Fields|
|android.content.SyncResult_Constructors|
|android.content.SyncResult_Methods|

================================================================================

*android.content.SyncResult_Fields*
|android.content.SyncResult_android.content.SyncResult.ALREADY_IN_PROGRESS|
|android.os.Parcelable.Creator<android.content.SyncResult>_android.content.SyncResult.CREATOR|
|boolean_android.content.SyncResult.databaseError|
|long_android.content.SyncResult.delayUntil|
|boolean_android.content.SyncResult.fullSyncRequested|
|boolean_android.content.SyncResult.moreRecordsToGet|
|boolean_android.content.SyncResult.partialSyncUnavailable|
|android.content.SyncStats_android.content.SyncResult.stats|
|boolean_android.content.SyncResult.syncAlreadyInProgress|
|boolean_android.content.SyncResult.tooManyDeletions|
|boolean_android.content.SyncResult.tooManyRetries|

*android.content.SyncResult_Constructors*
|android.content.SyncResult()|Create a "clean" SyncResult.

*android.content.SyncResult_Methods*
|android.content.SyncResult.clear()|Clears the SyncResult to a clean state.
|android.content.SyncResult.describeContents()|
|android.content.SyncResult.hasError()|A convenience method for determining of 
|android.content.SyncResult.hasHardError()|Convenience method for determining i
|android.content.SyncResult.hasSoftError()|Convenience method for determining i
|android.content.SyncResult.madeSomeProgress()|Convenience method for determini
|android.content.SyncResult.toDebugString()|Generates a debugging string indica
|android.content.SyncResult.toString()|
|android.content.SyncResult.writeToParcel(Parcel,int)|

*android.content.SyncResult_Description*

This class is used to communicate the results of a sync operation to the 
SyncManager. Based on the values here the SyncManager will determine the 
disposition of the sync and whether or not a new sync operation needs to be 
scheduled in the future. 



*android.content.SyncResult_android.content.SyncResult.ALREADY_IN_PROGRESS*

This instance of a SyncResult is returned by the SyncAdapter in response to a 
sync request when a sync is already underway. The SyncManager will reschedule 
the sync request to try again later. 


*android.os.Parcelable.Creator<android.content.SyncResult>_android.content.SyncResult.CREATOR*




*boolean_android.content.SyncResult.databaseError*

Used to indicate that the SyncAdapter experienced a hard error due to an error 
it received from interacting with the storage layer. The SyncManager will 
record that the sync request failed and it will not reschedule the request. 


*long_android.content.SyncResult.delayUntil*

Used to indicate to the SyncManager that future sync requests that match the 
request's Account and authority should be delayed at least this many seconds. 


*boolean_android.content.SyncResult.fullSyncRequested*

If set the SyncManager will request an immediate sync with the same Account and 
authority (but empty extras Bundle) as was used in the sync request. 


*boolean_android.content.SyncResult.moreRecordsToGet*

This field is ignored by the SyncManager. 


*boolean_android.content.SyncResult.partialSyncUnavailable*

This field is ignored by the SyncManager. 


*android.content.SyncStats_android.content.SyncResult.stats*

Used to hold extras statistics about the sync operation. Some of these indicate 
that the sync request resulted in a hard or soft error, others are for purely 
informational purposes. 


*boolean_android.content.SyncResult.syncAlreadyInProgress*

Used to indicate that the SyncAdapter is already performing a sync operation, 
though not necessarily for the requested account and authority and that it 
wasn't able to process this request. The SyncManager will reschedule the 
request to run later. 


*boolean_android.content.SyncResult.tooManyDeletions*

Used to indicate that the SyncAdapter determined that it would need to issue 
too many delete operations to the server in order to satisfy the request (as 
defined by the SyncAdapter). The SyncManager will record that the sync request 
failed and will cause a System Notification to be created asking the user what 
they want to do about this. It will give the user a chance to choose between 
(1) go ahead even with those deletes, (2) revert the deletes, or (3) take no 
action. If the user decides (1) or (2) the SyncManager will issue another sync 
request with either (|android.content.ContentResolver|) or 
(|android.content.ContentResolver|) set in the extras. It is then up to the 
SyncAdapter to decide how to honor that request. 


*boolean_android.content.SyncResult.tooManyRetries*

Used to indicate that the SyncAdapter experienced a hard error due to trying 
the same operation too many times (as defined by the SyncAdapter). The 
SyncManager will record that the sync request failed and it will not reschedule 
the request. 



*android.content.SyncResult()*

public SyncResult()

Create a "clean" SyncResult. If this is returned without any changes then the 
SyncManager will consider the sync to have completed successfully. The various 
fields can be set by the SyncAdapter in order to give the SyncManager more 
information as to the disposition of the sync. 

The errors are classified into two broad categories: hard errors and soft 
errors. Soft errors are retried with exponential backoff. Hard errors are not 
retried (except when the hard error is for a 
(|android.content.ContentResolver|) request, in which the request is retryed 
without the (|android.content.ContentResolver|) extra set). The SyncManager 
checks the type of error by calling (|android.content.SyncResult|) and 
(|android.content.SyncResult|) . If both are true then the SyncManager treats 
it as a hard error, not a soft error. 


*android.content.SyncResult.clear()*

public void clear()

Clears the SyncResult to a clean state. Throws an 
(|java.lang.UnsupportedOperationException|) if this is called when 
(|android.content.SyncResult|) is set. 



*android.content.SyncResult.describeContents()*

public int describeContents()





*android.content.SyncResult.hasError()*

public boolean hasError()

A convenience method for determining of the SyncResult indicates that an error 
occurred. 



    Returns: true if either a soft or hard error occurred 

*android.content.SyncResult.hasHardError()*

public boolean hasHardError()

Convenience method for determining if the SyncResult indicates that a hard 
error occurred. See (|android.content.SyncResult|) for an explanation of what 
the SyncManager does when it sees a hard error. 

A hard error is indicated when any of the following is true: 

(|android.content.SyncStats|) > 0 (|android.content.SyncStats|) > 0 
(|android.content.SyncStats|) > 0 (|android.content.SyncResult|) 
(|android.content.SyncResult|) (|android.content.SyncResult|) 



    Returns: true if a hard error is indicated 

*android.content.SyncResult.hasSoftError()*

public boolean hasSoftError()

Convenience method for determining if the SyncResult indicates that a soft 
error occurred. See (|android.content.SyncResult|) for an explanation of what 
the SyncManager does when it sees a soft error. 

A soft error is indicated when any of the following is true: 

(|android.content.SyncStats|) > 0 (|android.content.SyncResult|) 



    Returns: true if a soft error is indicated 

*android.content.SyncResult.madeSomeProgress()*

public boolean madeSomeProgress()

Convenience method for determining if the Sync should be rescheduled after 
failing for some reason. 



    Returns: true if the SyncManager should reschedule this sync. 

*android.content.SyncResult.toDebugString()*

public |java.lang.String| toDebugString()

Generates a debugging string indicating the status. The string consist of a 
sequence of code letter followed by the count. Code letters are f - 
fullSyncRequested, r - partialSyncUnavailable, X - hardError, e - 
numParseExceptions, c - numConflictDetectedExceptions, a - numAuthExceptions, D 
- tooManyDeletions, R - tooManyRetries, b - databaseError, x - softError, l - 
syncAlreadyInProgress, I - numIoExceptions 



    Returns: debugging string. 

*android.content.SyncResult.toString()*

public |java.lang.String| toString()





*android.content.SyncResult.writeToParcel(Parcel,int)*

public void writeToParcel(
  android.os.Parcel parcel,
  int flags)






