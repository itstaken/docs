*android.net.MobileDataStateTracker* *MobileDataStateTracker* Track the state of

public class MobileDataStateTracker
  extends    |android.net.BaseNetworkStateTracker|

|android.net.MobileDataStateTracker_Description|
|android.net.MobileDataStateTracker_Fields|
|android.net.MobileDataStateTracker_Constructors|
|android.net.MobileDataStateTracker_Methods|

================================================================================

*android.net.MobileDataStateTracker_Fields*
|boolean_android.net.MobileDataStateTracker.mPolicyDataEnabled|
|boolean_android.net.MobileDataStateTracker.mUserDataEnabled|

*android.net.MobileDataStateTracker_Constructors*
|android.net.MobileDataStateTracker(int,String)|Create a new MobileDataStateTra

*android.net.MobileDataStateTracker_Methods*
|android.net.MobileDataStateTracker.addStackedLink(LinkProperties)|
|android.net.MobileDataStateTracker.captivePortalCheckComplete()|
|android.net.MobileDataStateTracker.captivePortalCheckCompleted(boolean)|
|android.net.MobileDataStateTracker.defaultRouteSet(boolean)|
|android.net.MobileDataStateTracker.enableMobileProvisioning(String)|Inform DCT
|android.net.MobileDataStateTracker.getLinkCapabilities()|
|android.net.MobileDataStateTracker.getLinkProperties()|
|android.net.MobileDataStateTracker.getLinkQualityInfo()|
|android.net.MobileDataStateTracker.getNetworkInfo()|
|android.net.MobileDataStateTracker.getTcpBufferSizesPropName()|Return the syst
|android.net.MobileDataStateTracker.isAvailable()|Report whether data connectiv
|android.net.MobileDataStateTracker.isDefaultRouteSet()|
|android.net.MobileDataStateTracker.isPrivateDnsRouteSet()|
|android.net.MobileDataStateTracker.isProvisioningNetwork()|Return if this netw
|android.net.MobileDataStateTracker.isReady()|
|android.net.MobileDataStateTracker.isTeardownRequested()|
|android.net.MobileDataStateTracker.networkTypeToApnType(int)|
|android.net.MobileDataStateTracker.privateDnsRouteSet(boolean)|
|android.net.MobileDataStateTracker.reconnect()|Re-enable mobile data connectiv
|android.net.MobileDataStateTracker.releaseWakeLock()|This is not implemented.
|android.net.MobileDataStateTracker.removeStackedLink(LinkProperties)|
|android.net.MobileDataStateTracker.setDependencyMet(boolean)|carrier dependenc
|android.net.MobileDataStateTracker.setEnableFailFastMobileData(int)|Eanble/dis
|android.net.MobileDataStateTracker.setPolicyDataEnable(boolean)|
|android.net.MobileDataStateTracker.setRadio(boolean)|Turn on or off the mobile
|android.net.MobileDataStateTracker.setTeardownRequested(boolean)|
|android.net.MobileDataStateTracker.setUserDataEnable(boolean)|
|android.net.MobileDataStateTracker.startMonitoring(Context,Handler)|Begin moni
|android.net.MobileDataStateTracker.startSampling(SamplingDataTracker.SamplingSnapshot)|
|android.net.MobileDataStateTracker.stopSampling(SamplingDataTracker.SamplingSnapshot)|
|android.net.MobileDataStateTracker.supplyMessenger(Messenger)|
|android.net.MobileDataStateTracker.teardown()|Tear down mobile data connectivi
|android.net.MobileDataStateTracker.toString()|

*android.net.MobileDataStateTracker_Description*

Track the state of mobile data connectivity. This is done by receiving 
broadcast intents from the Phone process whenever the state of data 
connectivity changes. 



*boolean_android.net.MobileDataStateTracker.mPolicyDataEnabled*




*boolean_android.net.MobileDataStateTracker.mUserDataEnabled*





*android.net.MobileDataStateTracker(int,String)*

public MobileDataStateTracker(
  int netType,
  java.lang.String tag)

Create a new MobileDataStateTracker 

    netType - the ConnectivityManager network type 
    tag - the name of this network 

*android.net.MobileDataStateTracker.addStackedLink(LinkProperties)*

public void addStackedLink(android.net.LinkProperties link)





*android.net.MobileDataStateTracker.captivePortalCheckComplete()*

public void captivePortalCheckComplete()





*android.net.MobileDataStateTracker.captivePortalCheckCompleted(boolean)*

public void captivePortalCheckCompleted(boolean isCaptivePortal)





*android.net.MobileDataStateTracker.defaultRouteSet(boolean)*

public void defaultRouteSet(boolean enabled)





*android.net.MobileDataStateTracker.enableMobileProvisioning(String)*

public void enableMobileProvisioning(java.lang.String url)

Inform DCT mobile provisioning has started, it ends when provisioning 
completes. 



*android.net.MobileDataStateTracker.getLinkCapabilities()*

public |android.net.LinkCapabilities| getLinkCapabilities()





*android.net.MobileDataStateTracker.getLinkProperties()*

public |android.net.LinkProperties| getLinkProperties()





*android.net.MobileDataStateTracker.getLinkQualityInfo()*

public |android.net.LinkQualityInfo| getLinkQualityInfo()





*android.net.MobileDataStateTracker.getNetworkInfo()*

public |android.net.NetworkInfo| getNetworkInfo()





*android.net.MobileDataStateTracker.getTcpBufferSizesPropName()*

public |java.lang.String| getTcpBufferSizesPropName()

Return the system properties name associated with the tcp buffer sizes for this 
network. 



*android.net.MobileDataStateTracker.isAvailable()*

public boolean isAvailable()

Report whether data connectivity is possible. 



*android.net.MobileDataStateTracker.isDefaultRouteSet()*

public boolean isDefaultRouteSet()





*android.net.MobileDataStateTracker.isPrivateDnsRouteSet()*

public boolean isPrivateDnsRouteSet()





*android.net.MobileDataStateTracker.isProvisioningNetwork()*

public boolean isProvisioningNetwork()

Return if this network is the provisioning network. Valid only if connected. 


    met - 

*android.net.MobileDataStateTracker.isReady()*

public boolean isReady()





    Returns: true if this is ready to operate 

*android.net.MobileDataStateTracker.isTeardownRequested()*

public boolean isTeardownRequested()





*android.net.MobileDataStateTracker.networkTypeToApnType(int)*

public static |java.lang.String| networkTypeToApnType(int netType)





*android.net.MobileDataStateTracker.privateDnsRouteSet(boolean)*

public void privateDnsRouteSet(boolean enabled)





*android.net.MobileDataStateTracker.reconnect()*

public boolean reconnect()

Re-enable mobile data connectivity after a 
(|android.net.MobileDataStateTracker|) . TODO - make async and always get a 
notification? 



*android.net.MobileDataStateTracker.releaseWakeLock()*

public void releaseWakeLock()

This is not implemented. 



*android.net.MobileDataStateTracker.removeStackedLink(LinkProperties)*

public void removeStackedLink(android.net.LinkProperties link)





*android.net.MobileDataStateTracker.setDependencyMet(boolean)*

public void setDependencyMet(boolean met)

carrier dependency is met/unmet 


    met - 

*android.net.MobileDataStateTracker.setEnableFailFastMobileData(int)*

public void setEnableFailFastMobileData(int enabled)

Eanble/disable FailFast 


    enabled - is DctConstants.ENABLED/DISABLED 

*android.net.MobileDataStateTracker.setPolicyDataEnable(boolean)*

public void setPolicyDataEnable(boolean enabled)





*android.net.MobileDataStateTracker.setRadio(boolean)*

public boolean setRadio(boolean turnOn)

Turn on or off the mobile radio. No connectivity will be possible while the 
radio is off. The operation is a no-op if the radio is already in the desired 
state. 


    turnOn - {@code true} if the radio should be turned on, {@code false} if 

*android.net.MobileDataStateTracker.setTeardownRequested(boolean)*

public void setTeardownRequested(boolean isRequested)





*android.net.MobileDataStateTracker.setUserDataEnable(boolean)*

public void setUserDataEnable(boolean enabled)





*android.net.MobileDataStateTracker.startMonitoring(Context,Handler)*

public void startMonitoring(
  android.content.Context context,
  android.os.Handler target)

Begin monitoring data connectivity. 


    context - is the current Android context 
    target - is the Hander to which to return the events. 

*android.net.MobileDataStateTracker.startSampling(SamplingDataTracker.SamplingSnapshot)*

public void startSampling(android.net.SamplingDataTracker.SamplingSnapshot s)





*android.net.MobileDataStateTracker.stopSampling(SamplingDataTracker.SamplingSnapshot)*

public void stopSampling(android.net.SamplingDataTracker.SamplingSnapshot s)





*android.net.MobileDataStateTracker.supplyMessenger(Messenger)*

public void supplyMessenger(android.os.Messenger messenger)





*android.net.MobileDataStateTracker.teardown()*

public boolean teardown()

Tear down mobile data connectivity, i.e., disable the ability to create mobile 
data connections. TODO - make async and return nothing? 



*android.net.MobileDataStateTracker.toString()*

public |java.lang.String| toString()






