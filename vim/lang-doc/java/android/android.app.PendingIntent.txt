*android.app.PendingIntent* *PendingIntent* A description of an Intent and targe

public final class PendingIntent
  extends    |java.lang.Object|
  implements |android.os.Parcelable|

|android.app.PendingIntent_Description|
|android.app.PendingIntent_Fields|
|android.app.PendingIntent_Constructors|
|android.app.PendingIntent_Methods|

================================================================================

*android.app.PendingIntent_Fields*
|android.os.Parcelable.Creator<android.app.PendingIntent>_android.app.PendingIntent.CREATOR|
|int_android.app.PendingIntent.FLAG_CANCEL_CURRENT|
|int_android.app.PendingIntent.FLAG_NO_CREATE|
|int_android.app.PendingIntent.FLAG_ONE_SHOT|
|int_android.app.PendingIntent.FLAG_UPDATE_CURRENT|

*android.app.PendingIntent_Methods*
|android.app.PendingIntent.cancel()|Cancel a currently active PendingIntent.
|android.app.PendingIntent.describeContents()|
|android.app.PendingIntent.equals(Object)|Comparison operator on two PendingInt
|android.app.PendingIntent.getActivities(Context,int,Intent[],int)|Like#getActi
|android.app.PendingIntent.getActivities(Context,int,Intent[],int,Bundle)|Like#
|android.app.PendingIntent.getActivitiesAsUser(Context,int,Intent[],int,Bundle,UserHandle)|
|android.app.PendingIntent.getActivity(Context,int,Intent,int)|Retrieve a Pendi
|android.app.PendingIntent.getActivity(Context,int,Intent,int,Bundle)|Retrieve 
|android.app.PendingIntent.getActivityAsUser(Context,int,Intent,int,Bundle,UserHandle)|
|android.app.PendingIntent.getBroadcast(Context,int,Intent,int)|Retrieve a Pend
|android.app.PendingIntent.getBroadcastAsUser(Context,int,Intent,int,UserHandle)|
|android.app.PendingIntent.getCreatorPackage()|Return the package name of the a
|android.app.PendingIntent.getCreatorUid()|Return the uid of the application th
|android.app.PendingIntent.getCreatorUserHandle()|Return the user handle of the
|android.app.PendingIntent.getIntent()|
|android.app.PendingIntent.getIntentSender()|Retrieve a IntentSender object tha
|android.app.PendingIntent.getService(Context,int,Intent,int)|Retrieve a Pendin
|android.app.PendingIntent.getTarget()|
|android.app.PendingIntent.getTargetPackage()|
|android.app.PendingIntent.hashCode()|
|android.app.PendingIntent.isActivity()|
|android.app.PendingIntent.isTargetedToPackage()|
|android.app.PendingIntent.readPendingIntentOrNullFromParcel(Parcel)|Convenienc
|android.app.PendingIntent.send()|Perform the operation associated with this Pe
|android.app.PendingIntent.send(Context,int,Intent)|Perform the operation assoc
|android.app.PendingIntent.send(Context,int,Intent,PendingIntent.OnFinished,Handler)|
|android.app.PendingIntent.send(Context,int,Intent,PendingIntent.OnFinished,Handler,String)|
|android.app.PendingIntent.send(int)|Perform the operation associated with this
|android.app.PendingIntent.send(int,PendingIntent.OnFinished,Handler)|Perform t
|android.app.PendingIntent.toString()|
|android.app.PendingIntent.writePendingIntentOrNullToParcel(PendingIntent,Parcel)|
|android.app.PendingIntent.writeToParcel(Parcel,int)|

*android.app.PendingIntent_Description*

A description of an Intent and target action to perform with it. Instances of 
this class are created with (|android.app.PendingIntent|) , 
(|android.app.PendingIntent|) , (|android.app.PendingIntent|) , and 
(|android.app.PendingIntent|) ; the returned object can be handed to other 
applications so that they can perform the action you described on your behalf 
at a later time. 

By giving a PendingIntent to another application, you are granting it the right 
to perform the operation you have specified as if the other application was 
yourself (with the same permissions and identity). As such, you should be 
careful about how you build the PendingIntent: almost always, for example, the 
base Intent you supply should have the component name explicitly set to one of 
your own components, to ensure it is ultimately sent there and nowhere else. 

A PendingIntent itself is simply a reference to a token maintained by the 
system describing the original data used to retrieve it. This means that, even 
if its owning application's process is killed, the PendingIntent itself will 
remain usable from other processes that have been given it. If the creating 
application later re-retrieves the same kind of PendingIntent (same operation, 
same Intent action, data, categories, and components, and same flags), it will 
receive a PendingIntent representing the same token if that is still valid, and 
can thus call (|android.app.PendingIntent|) to remove it. 

Because of this behavior, it is important to know when two Intents are 
considered to be the same for purposes of retrieving a PendingIntent. A common 
mistake people make is to create multiple PendingIntent objects with Intents 
that only vary in their "extra" contents, expecting to get a different 
PendingIntent each time. This does not happen. The parts of the Intent that are 
used for matching are the same ones defined by 
Intent.filterEquals(|android.content.Intent|) . If you use two Intent objects 
that are equivalent as per Intent.filterEquals(|android.content.Intent|) , then 
you will get the same PendingIntent for both of them. 

There are two typical ways to deal with this. 

If you truly need multiple distinct PendingIntent objects active at the same 
time (such as to use as two notifications that are both shown at the same 
time), then you will need to ensure there is something that is different about 
them to associate them with different PendingIntents. This may be any of the 
Intent attributes considered by Intent.filterEquals(|android.content.Intent|) , 
or different request code integers supplied to (|android.app.PendingIntent|) , 
(|android.app.PendingIntent|) , (|android.app.PendingIntent|) , or 
(|android.app.PendingIntent|) . 

If you only need one PendingIntent active at a time for any of the Intents you 
will use, then you can alternatively use the flags 
(|android.app.PendingIntent|) or (|android.app.PendingIntent|) to either cancel 
or modify whatever current PendingIntent is associated with the Intent you are 
supplying. 



*android.os.Parcelable.Creator<android.app.PendingIntent>_android.app.PendingIntent.CREATOR*




*int_android.app.PendingIntent.FLAG_CANCEL_CURRENT*

Flag for use with (|android.app.PendingIntent|) , (|android.app.PendingIntent|) 
, and (|android.app.PendingIntent|) : if the described PendingIntent already 
exists, the current one is canceled before generating a new one. You can use 
this to retrieve a new PendingIntent when you are only changing the extra data 
in the Intent; by canceling the previous pending intent, this ensures that only 
entities given the new data will be able to launch it. If this assurance is not 
an issue, consider (|android.app.PendingIntent|) . 


*int_android.app.PendingIntent.FLAG_NO_CREATE*

Flag for use with (|android.app.PendingIntent|) , (|android.app.PendingIntent|) 
, and (|android.app.PendingIntent|) : if the described PendingIntent does not 
already exist, then simply return null instead of creating it. 


*int_android.app.PendingIntent.FLAG_ONE_SHOT*

Flag for use with (|android.app.PendingIntent|) , (|android.app.PendingIntent|) 
, and (|android.app.PendingIntent|) : this PendingIntent can only be used once. 
If set, after (|android.app.PendingIntent|) is called on it, it will be 
automatically canceled for you and any future attempt to send through it will 
fail. 


*int_android.app.PendingIntent.FLAG_UPDATE_CURRENT*

Flag for use with (|android.app.PendingIntent|) , (|android.app.PendingIntent|) 
, and (|android.app.PendingIntent|) : if the described PendingIntent already 
exists, then keep it but its replace its extra data with what is in this new 
Intent. This can be used if you are creating intents where only the extras 
change, and don't care that any entities that received your previous 
PendingIntent will be able to launch it with your new extras even if they are 
not explicitly given to it. 



*android.app.PendingIntent.cancel()*

public void cancel()

Cancel a currently active PendingIntent. Only the original application owning a 
PendingIntent can cancel it. 



*android.app.PendingIntent.describeContents()*

public int describeContents()





*android.app.PendingIntent.equals(Object)*

public boolean equals(java.lang.Object otherObj)

Comparison operator on two PendingIntent objects, such that true is returned 
then they both represent the same operation from the same package. This allows 
you to use (|android.app.PendingIntent|) , (|android.app.PendingIntent|) , or 
(|android.app.PendingIntent|) multiple times (even across a process being 
killed), resulting in different PendingIntent objects but whose equals() method 
identifies them as being the same operation. 



*android.app.PendingIntent.getActivities(Context,int,Intent[],int)*

public static |android.app.PendingIntent| getActivities(
  android.content.Context context,
  int requestCode,
  android.content.Intent[] intents,
  int flags)

Like (|android.app.PendingIntent|) , but allows an array of Intents to be 
supplied. The last Intent in the array is taken as the primary key for the 
PendingIntent, like the single Intent given to (|android.app.PendingIntent|) . 
Upon sending the resulting PendingIntent, all of the Intents are started in the 
same way as they would be by passing them to (|android.content.Context|) . 

The first intent in the array will be started outside of the context of an 
existing activity, so you must use the 
Intent.FLAG_ACTIVITY_NEW_TASK(|android.content.Intent|) launch flag in the 
Intent. (Activities after the first in the array are started in the context of 
the previous activity in the array, so FLAG_ACTIVITY_NEW_TASK is not needed nor 
desired for them.) 

The last intent in the array represents the key for the PendingIntent. In other 
words, it is the significant element for matching (as done with the single 
intent given to (|android.app.PendingIntent|) , its content will be the subject 
of replacement by (|android.app.PendingIntent|) and 
(|android.app.PendingIntent|) , etc. This is because it is the most specific of 
the supplied intents, and the UI the user actually sees when the intents are 
started. 

For security reasons, the (|android.content.Intent|) objects you supply here 
should almost always be explicit intents, that is specify an explicit component 
to be delivered to through (|android.content.Intent|) Intent.setClass 


    context - The Context in which this PendingIntent should start the activity. 
    requestCode - Private request code for the sender 
    intents - Array of Intents of the activities to be launched. 
    flags - May be {@link #FLAG_ONE_SHOT}, {@link #FLAG_NO_CREATE}, {@link 
       #FLAG_CANCEL_CURRENT}, {@link #FLAG_UPDATE_CURRENT}, or any of the flags 
       as supported by {@link Intent#fillIn Intent.fillIn()} to control which 
       unspecified parts of the intent that can be supplied when the actual 
       send happens. 

    Returns: Returns an existing or new PendingIntent matching the given parameters. May 
             return null only if {@link #FLAG_NO_CREATE} has been supplied. 

*android.app.PendingIntent.getActivities(Context,int,Intent[],int,Bundle)*

public static |android.app.PendingIntent| getActivities(
  android.content.Context context,
  int requestCode,
  android.content.Intent[] intents,
  int flags,
  android.os.Bundle options)

Like (|android.app.PendingIntent|) , but allows an array of Intents to be 
supplied. The last Intent in the array is taken as the primary key for the 
PendingIntent, like the single Intent given to (|android.app.PendingIntent|) . 
Upon sending the resulting PendingIntent, all of the Intents are started in the 
same way as they would be by passing them to (|android.content.Context|) . 

The first intent in the array will be started outside of the context of an 
existing activity, so you must use the 
Intent.FLAG_ACTIVITY_NEW_TASK(|android.content.Intent|) launch flag in the 
Intent. (Activities after the first in the array are started in the context of 
the previous activity in the array, so FLAG_ACTIVITY_NEW_TASK is not needed nor 
desired for them.) 

The last intent in the array represents the key for the PendingIntent. In other 
words, it is the significant element for matching (as done with the single 
intent given to (|android.app.PendingIntent|) , its content will be the subject 
of replacement by (|android.app.PendingIntent|) and 
(|android.app.PendingIntent|) , etc. This is because it is the most specific of 
the supplied intents, and the UI the user actually sees when the intents are 
started. 

For security reasons, the (|android.content.Intent|) objects you supply here 
should almost always be explicit intents, that is specify an explicit component 
to be delivered to through (|android.content.Intent|) Intent.setClass 


    context - The Context in which this PendingIntent should start the activity. 
    requestCode - Private request code for the sender 
    intents - Array of Intents of the activities to be launched. 
    flags - May be {@link #FLAG_ONE_SHOT}, {@link #FLAG_NO_CREATE}, {@link 
       #FLAG_CANCEL_CURRENT}, {@link #FLAG_UPDATE_CURRENT}, or any of the flags 
       as supported by {@link Intent#fillIn Intent.fillIn()} to control which 
       unspecified parts of the intent that can be supplied when the actual 
       send happens. 

    Returns: Returns an existing or new PendingIntent matching the given parameters. May 
             return null only if {@link #FLAG_NO_CREATE} has been supplied. 

*android.app.PendingIntent.getActivitiesAsUser(Context,int,Intent[],int,Bundle,UserHandle)*

public static |android.app.PendingIntent| getActivitiesAsUser(
  android.content.Context context,
  int requestCode,
  android.content.Intent[] intents,
  int flags,
  android.os.Bundle options,
  android.os.UserHandle user)





*android.app.PendingIntent.getActivity(Context,int,Intent,int)*

public static |android.app.PendingIntent| getActivity(
  android.content.Context context,
  int requestCode,
  android.content.Intent intent,
  int flags)

Retrieve a PendingIntent that will start a new activity, like calling 
Context.startActivity(Intent)(|android.content.Context|) . Note that the 
activity will be started outside of the context of an existing activity, so you 
must use the Intent.FLAG_ACTIVITY_NEW_TASK(|android.content.Intent|) launch 
flag in the Intent. 

For security reasons, the (|android.content.Intent|) you supply here should 
almost always be an explicit intent, that is specify an explicit component to 
be delivered to through (|android.content.Intent|) Intent.setClass 


    context - The Context in which this PendingIntent should start the activity. 
    requestCode - Private request code for the sender 
    intent - Intent of the activity to be launched. 
    flags - May be {@link #FLAG_ONE_SHOT}, {@link #FLAG_NO_CREATE}, {@link 
       #FLAG_CANCEL_CURRENT}, {@link #FLAG_UPDATE_CURRENT}, or any of the flags 
       as supported by {@link Intent#fillIn Intent.fillIn()} to control which 
       unspecified parts of the intent that can be supplied when the actual 
       send happens. 

    Returns: Returns an existing or new PendingIntent matching the given parameters. May 
             return null only if {@link #FLAG_NO_CREATE} has been supplied. 

*android.app.PendingIntent.getActivity(Context,int,Intent,int,Bundle)*

public static |android.app.PendingIntent| getActivity(
  android.content.Context context,
  int requestCode,
  android.content.Intent intent,
  int flags,
  android.os.Bundle options)

Retrieve a PendingIntent that will start a new activity, like calling 
Context.startActivity(Intent)(|android.content.Context|) . Note that the 
activity will be started outside of the context of an existing activity, so you 
must use the Intent.FLAG_ACTIVITY_NEW_TASK(|android.content.Intent|) launch 
flag in the Intent. 

For security reasons, the (|android.content.Intent|) you supply here should 
almost always be an explicit intent, that is specify an explicit component to 
be delivered to through (|android.content.Intent|) Intent.setClass 


    context - The Context in which this PendingIntent should start the activity. 
    requestCode - Private request code for the sender 
    intent - Intent of the activity to be launched. 
    flags - May be {@link #FLAG_ONE_SHOT}, {@link #FLAG_NO_CREATE}, {@link 
       #FLAG_CANCEL_CURRENT}, {@link #FLAG_UPDATE_CURRENT}, or any of the flags 
       as supported by {@link Intent#fillIn Intent.fillIn()} to control which 
       unspecified parts of the intent that can be supplied when the actual 
       send happens. 
    options - Additional options for how the Activity should be started. May be null if there 
       are no options. 

    Returns: Returns an existing or new PendingIntent matching the given parameters. May 
             return null only if {@link #FLAG_NO_CREATE} has been supplied. 

*android.app.PendingIntent.getActivityAsUser(Context,int,Intent,int,Bundle,UserHandle)*

public static |android.app.PendingIntent| getActivityAsUser(
  android.content.Context context,
  int requestCode,
  android.content.Intent intent,
  int flags,
  android.os.Bundle options,
  android.os.UserHandle user)





*android.app.PendingIntent.getBroadcast(Context,int,Intent,int)*

public static |android.app.PendingIntent| getBroadcast(
  android.content.Context context,
  int requestCode,
  android.content.Intent intent,
  int flags)

Retrieve a PendingIntent that will perform a broadcast, like calling 
Context.sendBroadcast()(|android.content.Context|) . 

For security reasons, the (|android.content.Intent|) you supply here should 
almost always be an explicit intent, that is specify an explicit component to 
be delivered to through (|android.content.Intent|) Intent.setClass 


    context - The Context in which this PendingIntent should perform the broadcast. 
    requestCode - Private request code for the sender 
    intent - The Intent to be broadcast. 
    flags - May be {@link #FLAG_ONE_SHOT}, {@link #FLAG_NO_CREATE}, {@link 
       #FLAG_CANCEL_CURRENT}, {@link #FLAG_UPDATE_CURRENT}, or any of the flags 
       as supported by {@link Intent#fillIn Intent.fillIn()} to control which 
       unspecified parts of the intent that can be supplied when the actual 
       send happens. 

    Returns: Returns an existing or new PendingIntent matching the given parameters. May 
             return null only if {@link #FLAG_NO_CREATE} has been supplied. 

*android.app.PendingIntent.getBroadcastAsUser(Context,int,Intent,int,UserHandle)*

public static |android.app.PendingIntent| getBroadcastAsUser(
  android.content.Context context,
  int requestCode,
  android.content.Intent intent,
  int flags,
  android.os.UserHandle userHandle)





*android.app.PendingIntent.getCreatorPackage()*

public |java.lang.String| getCreatorPackage()

Return the package name of the application that created this PendingIntent, 
that is the identity under which you will actually be sending the Intent. The 
returned string is supplied by the system, so that an application can not spoof 
its package. 

Be careful about how you use this. All this tells you is who created the 
PendingIntent. It does not tell you who handed the PendingIntent to you: that 
is, PendingIntent objects are intended to be passed between applications, so 
the PendingIntent you receive from an application could actually be one it 
received from another application, meaning the result you get here will 
identify the original application. Because of this, you should only use this 
information to identify who you expect to be interacting with through a 
(|android.app.PendingIntent|) call, not who gave you the PendingIntent. 



    Returns: The package name of the PendingIntent, or null if there is none associated with 
             it. 

*android.app.PendingIntent.getCreatorUid()*

public int getCreatorUid()

Return the uid of the application that created this PendingIntent, that is the 
identity under which you will actually be sending the Intent. The returned 
integer is supplied by the system, so that an application can not spoof its 
uid. 

Be careful about how you use this. All this tells you is who created the 
PendingIntent. It does not tell you who handed the PendingIntent to you: that 
is, PendingIntent objects are intended to be passed between applications, so 
the PendingIntent you receive from an application could actually be one it 
received from another application, meaning the result you get here will 
identify the original application. Because of this, you should only use this 
information to identify who you expect to be interacting with through a 
(|android.app.PendingIntent|) call, not who gave you the PendingIntent. 



    Returns: The uid of the PendingIntent, or -1 if there is none associated with it. 

*android.app.PendingIntent.getCreatorUserHandle()*

public |android.os.UserHandle| getCreatorUserHandle()

Return the user handle of the application that created this PendingIntent, that 
is the user under which you will actually be sending the Intent. The returned 
UserHandle is supplied by the system, so that an application can not spoof its 
user. See Process.myUserHandle()(|android.os.Process|) for more explanation of 
user handles. 

Be careful about how you use this. All this tells you is who created the 
PendingIntent. It does not tell you who handed the PendingIntent to you: that 
is, PendingIntent objects are intended to be passed between applications, so 
the PendingIntent you receive from an application could actually be one it 
received from another application, meaning the result you get here will 
identify the original application. Because of this, you should only use this 
information to identify who you expect to be interacting with through a 
(|android.app.PendingIntent|) call, not who gave you the PendingIntent. 



    Returns: The user handle of the PendingIntent, or null if there is none associated with 
             it. 

*android.app.PendingIntent.getIntent()*

public |android.content.Intent| getIntent()





*android.app.PendingIntent.getIntentSender()*

public |android.content.IntentSender| getIntentSender()

Retrieve a IntentSender object that wraps the existing sender of the 
PendingIntent 



    Returns: Returns a IntentSender object that wraps the sender of PendingIntent 

*android.app.PendingIntent.getService(Context,int,Intent,int)*

public static |android.app.PendingIntent| getService(
  android.content.Context context,
  int requestCode,
  android.content.Intent intent,
  int flags)

Retrieve a PendingIntent that will start a service, like calling 
Context.startService()(|android.content.Context|) . The start arguments given 
to the service will come from the extras of the Intent. 

For security reasons, the (|android.content.Intent|) you supply here should 
almost always be an explicit intent, that is specify an explicit component to 
be delivered to through (|android.content.Intent|) Intent.setClass 


    context - The Context in which this PendingIntent should start the service. 
    requestCode - Private request code for the sender 
    intent - An Intent describing the service to be started. 
    flags - May be {@link #FLAG_ONE_SHOT}, {@link #FLAG_NO_CREATE}, {@link 
       #FLAG_CANCEL_CURRENT}, {@link #FLAG_UPDATE_CURRENT}, or any of the flags 
       as supported by {@link Intent#fillIn Intent.fillIn()} to control which 
       unspecified parts of the intent that can be supplied when the actual 
       send happens. 

    Returns: Returns an existing or new PendingIntent matching the given parameters. May 
             return null only if {@link #FLAG_NO_CREATE} has been supplied. 

*android.app.PendingIntent.getTarget()*

public IIntentSender getTarget()





*android.app.PendingIntent.getTargetPackage()*

public |java.lang.String| getTargetPackage()



    Deprecated: Renamed to {@link #getCreatorPackage()}.


*android.app.PendingIntent.hashCode()*

public int hashCode()





*android.app.PendingIntent.isActivity()*

public boolean isActivity()





*android.app.PendingIntent.isTargetedToPackage()*

public boolean isTargetedToPackage()





*android.app.PendingIntent.readPendingIntentOrNullFromParcel(Parcel)*

public static |android.app.PendingIntent| readPendingIntentOrNullFromParcel(android.os.Parcel in)

Convenience function for reading either a Messenger or null pointer from a 
Parcel. You must have previously written the Messenger with 
(|android.app.PendingIntent|) . 


    in - The Parcel containing the written Messenger. 

    Returns: Returns the Messenger read from the Parcel, or null if null had been written. 

*android.app.PendingIntent.send()*

public void send()
  throws |android.app.PendingIntent.CanceledException|
         
Perform the operation associated with this PendingIntent. 



*android.app.PendingIntent.send(Context,int,Intent)*

public void send(
  android.content.Context context,
  int code,
  android.content.Intent intent)
  throws |android.app.PendingIntent.CanceledException|
         
Perform the operation associated with this PendingIntent, allowing the caller 
to specify information about the Intent to use. 


    context - The Context of the caller. 
    code - Result code to supply back to the PendingIntent's target. 
    intent - Additional Intent data. See {@link Intent#fillIn Intent.fillIn()} for 
       information on how this is applied to the original Intent. 

*android.app.PendingIntent.send(Context,int,Intent,PendingIntent.OnFinished,Handler)*

public void send(
  android.content.Context context,
  int code,
  android.content.Intent intent,
  android.app.PendingIntent.OnFinished onFinished,
  android.os.Handler handler)
  throws |android.app.PendingIntent.CanceledException|
         
Perform the operation associated with this PendingIntent, allowing the caller 
to specify information about the Intent to use and be notified when the send 
has completed. 

For the intent parameter, a PendingIntent often has restrictions on which 
fields can be supplied here, based on how the PendingIntent was retrieved in 
(|android.app.PendingIntent|) , (|android.app.PendingIntent|) , or 
(|android.app.PendingIntent|) . 


    context - The Context of the caller. This may be null if intent is also null. 
    code - Result code to supply back to the PendingIntent's target. 
    intent - Additional Intent data. See {@link Intent#fillIn Intent.fillIn()} for 
       information on how this is applied to the original Intent. Use null to 
       not modify the original Intent. 
    onFinished - The object to call back on when the send has completed, or null for no 
       callback. 
    handler - Handler identifying the thread on which the callback should happen. If null, 
       the callback will happen from the thread pool of the process. 

*android.app.PendingIntent.send(Context,int,Intent,PendingIntent.OnFinished,Handler,String)*

public void send(
  android.content.Context context,
  int code,
  android.content.Intent intent,
  android.app.PendingIntent.OnFinished onFinished,
  android.os.Handler handler,
  java.lang.String requiredPermission)
  throws |android.app.PendingIntent.CanceledException|
         
Perform the operation associated with this PendingIntent, allowing the caller 
to specify information about the Intent to use and be notified when the send 
has completed. 

For the intent parameter, a PendingIntent often has restrictions on which 
fields can be supplied here, based on how the PendingIntent was retrieved in 
(|android.app.PendingIntent|) , (|android.app.PendingIntent|) , or 
(|android.app.PendingIntent|) . 


    context - The Context of the caller. This may be null if intent is also null. 
    code - Result code to supply back to the PendingIntent's target. 
    intent - Additional Intent data. See {@link Intent#fillIn Intent.fillIn()} for 
       information on how this is applied to the original Intent. Use null to 
       not modify the original Intent. 
    onFinished - The object to call back on when the send has completed, or null for no 
       callback. 
    handler - Handler identifying the thread on which the callback should happen. If null, 
       the callback will happen from the thread pool of the process. 
    requiredPermission - Name of permission that a recipient of the PendingIntent is required to hold. 
       This is only valid for broadcast intents, and corresponds to the 
       permission argument in {@link Context#sendBroadcast(Intent, String) 
       Context.sendOrderedBroadcast(Intent, String)}. If null, no permission is 
       required. 

*android.app.PendingIntent.send(int)*

public void send(int code)
  throws |android.app.PendingIntent.CanceledException|
         
Perform the operation associated with this PendingIntent. 


    code - Result code to supply back to the PendingIntent's target. 

*android.app.PendingIntent.send(int,PendingIntent.OnFinished,Handler)*

public void send(
  int code,
  android.app.PendingIntent.OnFinished onFinished,
  android.os.Handler handler)
  throws |android.app.PendingIntent.CanceledException|
         
Perform the operation associated with this PendingIntent, allowing the caller 
to be notified when the send has completed. 


    code - Result code to supply back to the PendingIntent's target. 
    onFinished - The object to call back on when the send has completed, or null for no 
       callback. 
    handler - Handler identifying the thread on which the callback should happen. If null, 
       the callback will happen from the thread pool of the process. 

*android.app.PendingIntent.toString()*

public |java.lang.String| toString()





*android.app.PendingIntent.writePendingIntentOrNullToParcel(PendingIntent,Parcel)*

public static void writePendingIntentOrNullToParcel(
  android.app.PendingIntent sender,
  android.os.Parcel out)

Convenience function for writing either a PendingIntent or null pointer to a 
Parcel. You must use this with (|android.app.PendingIntent|) for later reading 
it. 


    sender - The PendingIntent to write, or null. 
    out - Where to write the PendingIntent. 

*android.app.PendingIntent.writeToParcel(Parcel,int)*

public void writeToParcel(
  android.os.Parcel out,
  int flags)






