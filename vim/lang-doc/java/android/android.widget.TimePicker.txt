*android.widget.TimePicker* *TimePicker* A view for selecting the time of day, i

public class TimePicker
  extends    |android.widget.FrameLayout|

|android.widget.TimePicker_Description|
|android.widget.TimePicker_Fields|
|android.widget.TimePicker_Constructors|
|android.widget.TimePicker_Methods|

================================================================================

*android.widget.TimePicker_Constructors*
|android.widget.TimePicker(Context)|
|android.widget.TimePicker(Context,AttributeSet)|
|android.widget.TimePicker(Context,AttributeSet,int)|

*android.widget.TimePicker_Methods*
|android.widget.TimePicker.dispatchPopulateAccessibilityEvent(AccessibilityEvent)|
|android.widget.TimePicker.getBaseline()|
|android.widget.TimePicker.getCurrentHour()|
|android.widget.TimePicker.getCurrentMinute()|
|android.widget.TimePicker.is24HourView()|
|android.widget.TimePicker.isEnabled()|
|android.widget.TimePicker.onConfigurationChanged(Configuration)|
|android.widget.TimePicker.onInitializeAccessibilityEvent(AccessibilityEvent)|
|android.widget.TimePicker.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)|
|android.widget.TimePicker.onPopulateAccessibilityEvent(AccessibilityEvent)|
|android.widget.TimePicker.onRestoreInstanceState(Parcelable)|
|android.widget.TimePicker.onSaveInstanceState()|
|android.widget.TimePicker.setCurrentHour(Integer)|Set the current hour.
|android.widget.TimePicker.setCurrentMinute(Integer)|Set the current minute (0-
|android.widget.TimePicker.setEnabled(boolean)|
|android.widget.TimePicker.setIs24HourView(Boolean)|Set whether in 24 hour or A
|android.widget.TimePicker.setOnTimeChangedListener(TimePicker.OnTimeChangedListener)|

*android.widget.TimePicker_Description*

A view for selecting the time of day, in either 24 hour or AM/PM mode. The 
hour, each minute digit, and AM/PM (if applicable) can be conrolled by vertical 
spinners. The hour can be entered by keyboard input. Entering in two digit 
hours can be accomplished by hitting two digits within a timeout of about a 
second (e.g. '1' then '2' to select 12). The minutes can be entered by entering 
single digits. Under AM/PM mode, the user can hit 'a', 'A", 'p' or 'P' to pick. 
For a dialog using this view, see (|android.app.TimePickerDialog|) . 

See the <a href="guide/topics/ui/controls/pickers.html">Pickers guide. 



*android.widget.TimePicker(Context)*

public TimePicker(android.content.Context context)




*android.widget.TimePicker(Context,AttributeSet)*

public TimePicker(
  android.content.Context context,
  android.util.AttributeSet attrs)




*android.widget.TimePicker(Context,AttributeSet,int)*

public TimePicker(
  android.content.Context context,
  android.util.AttributeSet attrs,
  int defStyle)




*android.widget.TimePicker.dispatchPopulateAccessibilityEvent(AccessibilityEvent)*

public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent event)





*android.widget.TimePicker.getBaseline()*

public int getBaseline()





*android.widget.TimePicker.getCurrentHour()*

public |java.lang.Integer| getCurrentHour()





    Returns: The current hour in the range (0-23). 

*android.widget.TimePicker.getCurrentMinute()*

public |java.lang.Integer| getCurrentMinute()





    Returns: The current minute. 

*android.widget.TimePicker.is24HourView()*

public boolean is24HourView()





    Returns: true if this is in 24 hour view else false. 

*android.widget.TimePicker.isEnabled()*

public boolean isEnabled()





*android.widget.TimePicker.onConfigurationChanged(Configuration)*

protected void onConfigurationChanged(android.content.res.Configuration newConfig)





*android.widget.TimePicker.onInitializeAccessibilityEvent(AccessibilityEvent)*

public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent event)





*android.widget.TimePicker.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)*

public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo info)





*android.widget.TimePicker.onPopulateAccessibilityEvent(AccessibilityEvent)*

public void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent event)





*android.widget.TimePicker.onRestoreInstanceState(Parcelable)*

protected void onRestoreInstanceState(android.os.Parcelable state)





*android.widget.TimePicker.onSaveInstanceState()*

protected |android.os.Parcelable| onSaveInstanceState()





*android.widget.TimePicker.setCurrentHour(Integer)*

public void setCurrentHour(java.lang.Integer currentHour)

Set the current hour. 



*android.widget.TimePicker.setCurrentMinute(Integer)*

public void setCurrentMinute(java.lang.Integer currentMinute)

Set the current minute (0-59). 



*android.widget.TimePicker.setEnabled(boolean)*

public void setEnabled(boolean enabled)





*android.widget.TimePicker.setIs24HourView(Boolean)*

public void setIs24HourView(java.lang.Boolean is24HourView)

Set whether in 24 hour or AM/PM mode. 


    is24HourView - True = 24 hour mode. False = AM/PM. 

*android.widget.TimePicker.setOnTimeChangedListener(TimePicker.OnTimeChangedListener)*

public void setOnTimeChangedListener(android.widget.TimePicker.OnTimeChangedListener onTimeChangedListener)

Set the callback that indicates the time has been adjusted by the user. 


    onTimeChangedListener - the callback, should not be null. 


