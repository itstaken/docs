*android.accounts.AccountManager* *AccountManager* This class provides access to

public class AccountManager
  extends    |java.lang.Object|

|android.accounts.AccountManager_Description|
|android.accounts.AccountManager_Fields|
|android.accounts.AccountManager_Constructors|
|android.accounts.AccountManager_Methods|

================================================================================

*android.accounts.AccountManager_Fields*
|java.lang.String_android.accounts.AccountManager.ACTION_AUTHENTICATOR_INTENT|
|java.lang.String_android.accounts.AccountManager.AUTHENTICATOR_ATTRIBUTES_NAME|
|java.lang.String_android.accounts.AccountManager.AUTHENTICATOR_META_DATA_NAME|
|int_android.accounts.AccountManager.ERROR_CODE_BAD_ARGUMENTS|
|int_android.accounts.AccountManager.ERROR_CODE_BAD_AUTHENTICATION|
|int_android.accounts.AccountManager.ERROR_CODE_BAD_REQUEST|
|int_android.accounts.AccountManager.ERROR_CODE_CANCELED|
|int_android.accounts.AccountManager.ERROR_CODE_INVALID_RESPONSE|
|int_android.accounts.AccountManager.ERROR_CODE_NETWORK_ERROR|
|int_android.accounts.AccountManager.ERROR_CODE_REMOTE_EXCEPTION|
|int_android.accounts.AccountManager.ERROR_CODE_UNSUPPORTED_OPERATION|
|int_android.accounts.AccountManager.ERROR_CODE_USER_RESTRICTED|
|java.lang.String_android.accounts.AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE|
|java.lang.String_android.accounts.AccountManager.KEY_ACCOUNT_MANAGER_RESPONSE|
|java.lang.String_android.accounts.AccountManager.KEY_ACCOUNT_NAME|
|java.lang.String_android.accounts.AccountManager.KEY_ACCOUNT_TYPE|
|java.lang.String_android.accounts.AccountManager.KEY_ACCOUNTS|
|java.lang.String_android.accounts.AccountManager.KEY_ANDROID_PACKAGE_NAME|
|java.lang.String_android.accounts.AccountManager.KEY_AUTH_FAILED_MESSAGE|
|java.lang.String_android.accounts.AccountManager.KEY_AUTH_TOKEN_LABEL|
|java.lang.String_android.accounts.AccountManager.KEY_AUTHENTICATOR_TYPES|
|java.lang.String_android.accounts.AccountManager.KEY_AUTHTOKEN|
|java.lang.String_android.accounts.AccountManager.KEY_BOOLEAN_RESULT|
|java.lang.String_android.accounts.AccountManager.KEY_CALLER_PID|
|java.lang.String_android.accounts.AccountManager.KEY_CALLER_UID|
|java.lang.String_android.accounts.AccountManager.KEY_ERROR_CODE|
|java.lang.String_android.accounts.AccountManager.KEY_ERROR_MESSAGE|
|java.lang.String_android.accounts.AccountManager.KEY_INTENT|
|java.lang.String_android.accounts.AccountManager.KEY_NOTIFY_ON_FAILURE|
|java.lang.String_android.accounts.AccountManager.KEY_PASSWORD|
|java.lang.String_android.accounts.AccountManager.KEY_USERDATA|
|java.lang.String_android.accounts.AccountManager.LOGIN_ACCOUNTS_CHANGED_ACTION|

*android.accounts.AccountManager_Constructors*
|android.accounts.AccountManager(Context,IAccountManager)|
|android.accounts.AccountManager(Context,IAccountManager,Handler)|

*android.accounts.AccountManager_Methods*
|android.accounts.AccountManager.addAccount(String,String,String[],Bundle,Activity,AccountManagerCallback<Bundle>,Handler)|
|android.accounts.AccountManager.addAccountExplicitly(Account,String,Bundle)|Ad
|android.accounts.AccountManager.addOnAccountsUpdatedListener(OnAccountsUpdateListener,Handler,boolean)|
|android.accounts.AccountManager.addSharedAccount(Account,UserHandle)|Adds a sh
|android.accounts.AccountManager.blockingGetAuthToken(Account,String,boolean)|T
|android.accounts.AccountManager.clearPassword(Account)|Forgets a saved passwor
|android.accounts.AccountManager.confirmCredentials(Account,Bundle,Activity,AccountManagerCallback<Bundle>,Handler)|
|android.accounts.AccountManager.confirmCredentialsAsUser(Account,Bundle,Activity,AccountManagerCallback<Bundle>,Handler,UserHandle)|
|android.accounts.AccountManager.editProperties(String,Activity,AccountManagerCallback<Bundle>,Handler)|
|android.accounts.AccountManager.get(Context)|Gets an AccountManager instance a
|android.accounts.AccountManager.getAccounts()|Lists all accounts of any type r
|android.accounts.AccountManager.getAccountsByType(String)|Lists all accounts o
|android.accounts.AccountManager.getAccountsByTypeAndFeatures(String,String[],AccountManagerCallback<Account[]>,Handler)|
|android.accounts.AccountManager.getAccountsByTypeAsUser(String,UserHandle)|
|android.accounts.AccountManager.getAccountsByTypeForPackage(String,String)|Ret
|android.accounts.AccountManager.getAccountsForPackage(String,int)|
|android.accounts.AccountManager.getAuthenticatorTypes()|Lists the currently re
|android.accounts.AccountManager.getAuthToken(Account,String,boolean,AccountManagerCallback<Bundle>,Handler)|
|android.accounts.AccountManager.getAuthToken(Account,String,Bundle,Activity,AccountManagerCallback<Bundle>,Handler)|
|android.accounts.AccountManager.getAuthToken(Account,String,Bundle,boolean,AccountManagerCallback<Bundle>,Handler)|
|android.accounts.AccountManager.getAuthTokenByFeatures(String,String,String[],Activity,Bundle,Bundle,AccountManagerCallback<Bundle>,Handler)|
|android.accounts.AccountManager.getAuthTokenLabel(String,String,AccountManagerCallback<String>,Handler)|
|android.accounts.AccountManager.getPassword(Account)|Gets the saved password a
|android.accounts.AccountManager.getSharedAccounts(UserHandle)|
|android.accounts.AccountManager.getUserData(Account,String)|Gets the user data
|android.accounts.AccountManager.hasFeatures(Account,String[],AccountManagerCallback<Boolean>,Handler)|
|android.accounts.AccountManager.invalidateAuthToken(String,String)|Removes an 
|android.accounts.AccountManager.newChooseAccountIntent(Account,ArrayList<Account>,String[],boolean,String,String,String[],Bundle)|
|android.accounts.AccountManager.peekAuthToken(Account,String)|Gets an auth tok
|android.accounts.AccountManager.removeAccount(Account,AccountManagerCallback<Boolean>,Handler)|
|android.accounts.AccountManager.removeOnAccountsUpdatedListener(OnAccountsUpdateListener)|
|android.accounts.AccountManager.removeSharedAccount(Account,UserHandle)|
|android.accounts.AccountManager.sanitizeResult(Bundle)|
|android.accounts.AccountManager.setAuthToken(Account,String,String)|Adds an au
|android.accounts.AccountManager.setPassword(Account,String)|Sets or forgets a 
|android.accounts.AccountManager.setUserData(Account,String,String)|Sets one us
|android.accounts.AccountManager.updateAppPermission(Account,String,int,boolean)|
|android.accounts.AccountManager.updateCredentials(Account,String,Bundle,Activity,AccountManagerCallback<Bundle>,Handler)|

*android.accounts.AccountManager_Description*

This class provides access to a centralized registry of the user's online 
accounts. The user enters credentials (username and password) once per account, 
granting applications access to online resources with "one-click" approval. 

Different online services have different ways of handling accounts and 
authentication, so the account manager uses pluggable authenticator modules for 
different account types. Authenticators (which may be written by third parties) 
handle the actual details of validating account credentials and storing account 
information. For example, Google, Facebook, and Microsoft Exchange each have 
their own authenticator. 

Many servers support some notion of an authentication token, which can be used 
to authenticate a request to the server without sending the user's actual 
password. (Auth tokens are normally created with a separate request which does 
include the user's credentials.) AccountManager can generate auth tokens for 
applications, so the application doesn't need to handle passwords directly. 
Auth tokens are normally reusable and cached by AccountManager, but must be 
refreshed periodically. It's the responsibility of applications to invalidate 
auth tokens when they stop working so the AccountManager knows it needs to 
regenerate them. 

Applications accessing a server normally go through these steps: 

Get an instance of AccountManager using (|android.accounts.AccountManager|) . 

List the available accounts using (|android.accounts.AccountManager|) or 
(|android.accounts.AccountManager|) . Normally applications will only be 
interested in accounts with one particular type, which identifies the 
authenticator. Account features are used to identify particular account 
subtypes and capabilities. Both the account type and features are 
authenticator-specific strings, and must be known by the application in 
coordination with its preferred authenticators. 

Select one or more of the available accounts, possibly by asking the user for 
their preference. If no suitable accounts are available, 
(|android.accounts.AccountManager|) may be called to prompt the user to create 
an account of the appropriate type. 

Important: If the application is using a previously remembered account 
selection, it must make sure the account is still in the list of accounts 
returned by (|android.accounts.AccountManager|) . Requesting an auth token for 
an account no longer on the device results in an undefined failure. 

Request an auth token for the selected account(s) using one of the 
(|android.accounts.AccountManager|) methods or related helpers. Refer to the 
description of each method for exact usage and error handling details. 

Make the request using the auth token. The form of the auth token, the format 
of the request, and the protocol used are all specific to the service you are 
accessing. The application may use whatever network and protocol libraries are 
useful. 

Important: If the request fails with an authentication error, it could be that 
a cached auth token is stale and no longer honored by the server. The 
application must call (|android.accounts.AccountManager|) to remove the token 
from the cache, otherwise requests will continue failing! After invalidating 
the auth token, immediately go back to the "Request an auth token" step above. 
If the process fails the second time, then it can be treated as a "genuine" 
authentication failure and the user notified or other appropriate actions 
taken. 

Some AccountManager methods may need to interact with the user to prompt for 
credentials, present options, or ask the user to add an account. The caller may 
choose whether to allow AccountManager to directly launch the necessary user 
interface and wait for the user, or to return an Intent which the caller may 
use to launch the interface, or (in some cases) to install a notification which 
the user can select at any time to launch the interface. To have AccountManager 
launch the interface directly, the caller must supply the current foreground 
(|android.app.Activity|) context. 

Many AccountManager methods take (|android.accounts.AccountManagerCallback|) 
and (|android.os.Handler|) as parameters. These methods return immediately and 
run asynchronously. If a callback is provided then 
(|android.accounts.AccountManagerCallback|) will be invoked on the Handler's 
thread when the request completes, successfully or not. The result is retrieved 
by calling (|android.accounts.AccountManagerFuture|) on the 
(|android.accounts.AccountManagerFuture|) returned by the method (and also 
passed to the callback). This method waits for the operation to complete (if 
necessary) and either returns the result or throws an exception if an error 
occurred during the operation. To make the request synchronously, call 
(|android.accounts.AccountManagerFuture|) immediately on receiving the future 
from the method; no callback need be supplied. 

Requests which may block, including (|android.accounts.AccountManagerFuture|) , 
must never be called on the application's main event thread. These operations 
throw (|java.lang.IllegalStateException|) if they are used on the main thread. 



*java.lang.String_android.accounts.AccountManager.ACTION_AUTHENTICATOR_INTENT*




*java.lang.String_android.accounts.AccountManager.AUTHENTICATOR_ATTRIBUTES_NAME*




*java.lang.String_android.accounts.AccountManager.AUTHENTICATOR_META_DATA_NAME*




*int_android.accounts.AccountManager.ERROR_CODE_BAD_ARGUMENTS*




*int_android.accounts.AccountManager.ERROR_CODE_BAD_AUTHENTICATION*




*int_android.accounts.AccountManager.ERROR_CODE_BAD_REQUEST*




*int_android.accounts.AccountManager.ERROR_CODE_CANCELED*




*int_android.accounts.AccountManager.ERROR_CODE_INVALID_RESPONSE*




*int_android.accounts.AccountManager.ERROR_CODE_NETWORK_ERROR*




*int_android.accounts.AccountManager.ERROR_CODE_REMOTE_EXCEPTION*




*int_android.accounts.AccountManager.ERROR_CODE_UNSUPPORTED_OPERATION*




*int_android.accounts.AccountManager.ERROR_CODE_USER_RESTRICTED*




*java.lang.String_android.accounts.AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE*




*java.lang.String_android.accounts.AccountManager.KEY_ACCOUNT_MANAGER_RESPONSE*




*java.lang.String_android.accounts.AccountManager.KEY_ACCOUNT_NAME*

Bundle key used for the (|java.lang.String|) account name in results from 
methods which return information about a particular account. 


*java.lang.String_android.accounts.AccountManager.KEY_ACCOUNT_TYPE*

Bundle key used for the (|java.lang.String|) account type in results from 
methods which return information about a particular account. 


*java.lang.String_android.accounts.AccountManager.KEY_ACCOUNTS*




*java.lang.String_android.accounts.AccountManager.KEY_ANDROID_PACKAGE_NAME*

The Android package of the caller will be set in the options bundle by the 
(|android.accounts.AccountManager|) and will be passed to the 
AccountManagerService and to the AccountAuthenticators. The uid of the caller 
will be known by the AccountManagerService as well as the AccountAuthenticators 
so they will be able to verify that the package is consistent with the uid (a 
uid might be shared by many packages). 


*java.lang.String_android.accounts.AccountManager.KEY_AUTH_FAILED_MESSAGE*




*java.lang.String_android.accounts.AccountManager.KEY_AUTH_TOKEN_LABEL*




*java.lang.String_android.accounts.AccountManager.KEY_AUTHENTICATOR_TYPES*




*java.lang.String_android.accounts.AccountManager.KEY_AUTHTOKEN*

Bundle key used for the auth token value in results from 
(|android.accounts.AccountManager|) and friends. 


*java.lang.String_android.accounts.AccountManager.KEY_BOOLEAN_RESULT*




*java.lang.String_android.accounts.AccountManager.KEY_CALLER_PID*




*java.lang.String_android.accounts.AccountManager.KEY_CALLER_UID*

Authenticators using 'customTokens' option will also get the UID of the caller 


*java.lang.String_android.accounts.AccountManager.KEY_ERROR_CODE*




*java.lang.String_android.accounts.AccountManager.KEY_ERROR_MESSAGE*




*java.lang.String_android.accounts.AccountManager.KEY_INTENT*

Bundle key used for an (|android.content.Intent|) in results from methods that 
may require the caller to interact with the user. The Intent can be used to 
start the corresponding user interface activity. 


*java.lang.String_android.accounts.AccountManager.KEY_NOTIFY_ON_FAILURE*

Boolean, if set and 'customTokens' the authenticator is responsible for 
notifications. 


*java.lang.String_android.accounts.AccountManager.KEY_PASSWORD*

Bundle key used to supply the password directly in options to 
(|android.accounts.AccountManager|) , rather than prompting the user with the 
standard password prompt. 


*java.lang.String_android.accounts.AccountManager.KEY_USERDATA*




*java.lang.String_android.accounts.AccountManager.LOGIN_ACCOUNTS_CHANGED_ACTION*

Action sent as a broadcast Intent by the AccountsService when accounts are 
added, accounts are removed, or an account's credentials (saved password, etc) 
are changed. 



*android.accounts.AccountManager(Context,IAccountManager)*

public AccountManager(
  android.content.Context context,
  IAccountManager service)




*android.accounts.AccountManager(Context,IAccountManager,Handler)*

public AccountManager(
  android.content.Context context,
  IAccountManager service,
  android.os.Handler handler)




*android.accounts.AccountManager.addAccount(String,String,String[],Bundle,Activity,AccountManagerCallback<Bundle>,Handler)*

public |android.accounts.AccountManagerFuture|<Bundle> addAccount(
  java.lang.String accountType,
  java.lang.String authTokenType,
  java.lang.String[] requiredFeatures,
  android.os.Bundle addAccountOptions,
  android.app.Activity activity,
  android.accounts.AccountManagerCallback<android.os.Bundle> callback,
  android.os.Handler handler)

Asks the user to add an account of a specified type. The authenticator for this 
account type processes this request with the appropriate user interface. If the 
user does elect to create a new account, the account name is returned. 

This method may be called from any thread, but the returned 
(|android.accounts.AccountManagerFuture|) must not be used on the main thread. 

This method requires the caller to hold the permission 
(|android.Manifest.permission|) . 


    accountType - The type of account to add; must not be null 
    authTokenType - The type of auth token (see {@link #getAuthToken}) this account will need to be 
       able to generate, null for none 
    requiredFeatures - The features (see {@link #hasFeatures}) this account must have, null for none 
    addAccountOptions - Authenticator-specific options for the request, may be null or empty 
    activity - The {@link Activity} context to use for launching a new authenticator-defined 
       sub-Activity to prompt the user to create an account; used only to call 
       startActivity(); if null, the prompt will not be launched directly, but 
       the necessary {@link Intent} will be returned to the caller instead 
    callback - Callback to invoke when the request completes, null for no callback 
    handler - {@link Handler} identifying the callback thread, null for the main thread 

    Returns: An {@link AccountManagerFuture} which resolves to a Bundle with these fields if 
             activity was specified and an account was created: 

{@link #KEY_ACCOUNT_NAME} - the name of the account created {@link 
             #KEY_ACCOUNT_TYPE} - the type of the account 

If no activity was specified, the returned Bundle contains only {@link 
             #KEY_INTENT} with the {@link Intent} needed to launch the actual 
             account creation process. If an error occurred, {@link 
             AccountManagerFuture#getResult()} throws: 

{@link AuthenticatorException} if no authenticator was registered for this 
             account type or the authenticator failed to respond {@link 
             OperationCanceledException} if the operation was canceled for any 
             reason, including the user canceling the creation process {@link 
             IOException} if the authenticator experienced an I/O problem 
             creating a new account, usually because of network trouble 

*android.accounts.AccountManager.addAccountExplicitly(Account,String,Bundle)*

public boolean addAccountExplicitly(
  android.accounts.Account account,
  java.lang.String password,
  android.os.Bundle userdata)

Adds an account directly to the AccountManager. Normally used by sign-up 
wizards associated with authenticators, not directly by applications. 

It is safe to call this method from the main thread. 

This method requires the caller to hold the permission 
(|android.Manifest.permission|) and to have the same UID as the added account's 
authenticator. 


    account - The {@link Account} to add 
    password - The password to associate with the account, null for none 
    userdata - String values to use for the account's userdata, null for none 

    Returns: True if the account was successfully added, false if the account already 
             exists, the account is null, or another error occurs. 

*android.accounts.AccountManager.addOnAccountsUpdatedListener(OnAccountsUpdateListener,Handler,boolean)*

public void addOnAccountsUpdatedListener(
  android.accounts.OnAccountsUpdateListener listener,
  android.os.Handler handler,
  boolean updateImmediately)

Adds an (|android.accounts.OnAccountsUpdateListener|) to this instance of the 
(|android.accounts.AccountManager|) . This listener will be notified whenever 
the list of accounts on the device changes. 

As long as this listener is present, the AccountManager instance will not be 
garbage-collected, and neither will the (|android.content.Context|) used to 
retrieve it, which may be a large Activity instance. To avoid memory leaks, you 
must remove this listener before then. Normally listeners are added in an 
Activity or Service's (|android.app.Activity|) and removed in 
(|android.app.Activity|) . 

It is safe to call this method from the main thread. 

This method requires the caller to hold the permission 
(|android.Manifest.permission|) . 


    listener - The listener to send notifications to 
    handler - {@link Handler} identifying the thread to use for notifications, null for the 
       main thread 
    updateImmediately - If true, the listener will be invoked (on the handler thread) right away with 
       the current account list 

*android.accounts.AccountManager.addSharedAccount(Account,UserHandle)*

public boolean addSharedAccount(
  android.accounts.Account account,
  android.os.UserHandle user)

Adds a shared account from the primary user to a secondary user. Adding the 
shared account doesn't take effect immediately. When the target user starts up, 
any pending shared accounts are attempted to be copied to the target user from 
the primary via calls to the authenticator. 


    account - the account to share 
    user - the target user 

    Returns: 

*android.accounts.AccountManager.blockingGetAuthToken(Account,String,boolean)*

public |java.lang.String| blockingGetAuthToken(
  android.accounts.Account account,
  java.lang.String authTokenType,
  boolean notifyAuthFailure)
  throws |android.accounts.AuthenticatorException|
         |java.io.IOException|
         |android.accounts.OperationCanceledException|
         
This convenience helper synchronously gets an auth token with 
(|android.accounts.AccountManager|) . 

This method may block while a network request completes, and must never be made 
from the main thread. 

This method requires the caller to hold the permission 
(|android.Manifest.permission|) . 


    account - The account to fetch an auth token for 
    authTokenType - The auth token type, see {@link #getAuthToken getAuthToken()} 
    notifyAuthFailure - If true, display a notification and return null if authentication fails; if 
       false, prompt and wait for the user to re-enter correct credentials 
       before returning 

    Returns: An auth token of the specified type for this account, or null if authentication 
             fails or none can be fetched. 

*android.accounts.AccountManager.clearPassword(Account)*

public void clearPassword(android.accounts.Account account)

Forgets a saved password. This erases the local copy of the password; it does 
not change the user's account password on the server. Has the same effect as 
setPassword(account, null) but requires fewer permissions, and may be used by 
applications or management interfaces to "sign out" from an account. 

It is safe to call this method from the main thread. 

This method requires the caller to hold the permission 
(|android.Manifest.permission|) 


    account - The account whose password to clear 

*android.accounts.AccountManager.confirmCredentials(Account,Bundle,Activity,AccountManagerCallback<Bundle>,Handler)*

public |android.accounts.AccountManagerFuture|<Bundle> confirmCredentials(
  android.accounts.Account account,
  android.os.Bundle options,
  android.app.Activity activity,
  android.accounts.AccountManagerCallback<android.os.Bundle> callback,
  android.os.Handler handler)

Confirms that the user knows the password for an account to make extra sure 
they are the owner of the account. The user-entered password can be supplied 
directly, otherwise the authenticator for this account type prompts the user 
with the appropriate interface. This method is intended for applications which 
want extra assurance; for example, the phone lock screen uses this to let the 
user unlock the phone with an account password if they forget the lock pattern. 

If the user-entered password matches a saved password for this account, the 
request is considered valid; otherwise the authenticator verifies the password 
(usually by contacting the server). 

This method may be called from any thread, but the returned 
(|android.accounts.AccountManagerFuture|) must not be used on the main thread. 

This method requires the caller to hold the permission 
(|android.Manifest.permission|) . 


    account - The account to confirm password knowledge for 
    options - Authenticator-specific options for the request; if the {@link #KEY_PASSWORD} 
       string field is present, the authenticator may use it directly rather 
       than prompting the user; may be null or empty 
    activity - The {@link Activity} context to use for launching a new authenticator-defined 
       sub-Activity to prompt the user to enter a password; used only to call 
       startActivity(); if null, the prompt will not be launched directly, but 
       the necessary {@link Intent} will be returned to the caller instead 
    callback - Callback to invoke when the request completes, null for no callback 
    handler - {@link Handler} identifying the callback thread, null for the main thread 

    Returns: An {@link AccountManagerFuture} which resolves to a Bundle with these fields if 
             activity or password was supplied and the account was successfully 
             verified: 

{@link #KEY_ACCOUNT_NAME} - the name of the account created {@link 
             #KEY_ACCOUNT_TYPE} - the type of the account {@link 
             #KEY_BOOLEAN_RESULT} - true to indicate success 

If no activity or password was specified, the returned Bundle contains only 
             {@link #KEY_INTENT} with the {@link Intent} needed to launch the 
             password prompt. If an error occurred, {@link 
             AccountManagerFuture#getResult()} throws: 

{@link AuthenticatorException} if the authenticator failed to respond {@link 
             OperationCanceledException} if the operation was canceled for any 
             reason, including the user canceling the password prompt {@link 
             IOException} if the authenticator experienced an I/O problem 
             verifying the password, usually because of network trouble 

*android.accounts.AccountManager.confirmCredentialsAsUser(Account,Bundle,Activity,AccountManagerCallback<Bundle>,Handler,UserHandle)*

public |android.accounts.AccountManagerFuture|<Bundle> confirmCredentialsAsUser(
  android.accounts.Account account,
  android.os.Bundle options,
  android.app.Activity activity,
  android.accounts.AccountManagerCallback<android.os.Bundle> callback,
  android.os.Handler handler,
  android.os.UserHandle userHandle)





*android.accounts.AccountManager.editProperties(String,Activity,AccountManagerCallback<Bundle>,Handler)*

public |android.accounts.AccountManagerFuture|<Bundle> editProperties(
  java.lang.String accountType,
  android.app.Activity activity,
  android.accounts.AccountManagerCallback<android.os.Bundle> callback,
  android.os.Handler handler)

Offers the user an opportunity to change an authenticator's settings. These 
properties are for the authenticator in general, not a particular account. Not 
all authenticators support this method. 

This method may be called from any thread, but the returned 
(|android.accounts.AccountManagerFuture|) must not be used on the main thread. 

This method requires the caller to hold the permission 
(|android.Manifest.permission|) . 


    accountType - The account type associated with the authenticator to adjust 
    activity - The {@link Activity} context to use for launching a new authenticator-defined 
       sub-Activity to adjust authenticator settings; used only to call 
       startActivity(); if null, the settings dialog will not be launched 
       directly, but the necessary {@link Intent} will be returned to the 
       caller instead 
    callback - Callback to invoke when the request completes, null for no callback 
    handler - {@link Handler} identifying the callback thread, null for the main thread 

    Returns: An {@link AccountManagerFuture} which resolves to a Bundle which is empty if 
             properties were edited successfully, or if no activity was 
             specified, contains only {@link #KEY_INTENT} needed to launch the 
             authenticator's settings dialog. If an error occurred, {@link 
             AccountManagerFuture#getResult()} throws: 

{@link AuthenticatorException} if no authenticator was registered for this 
             account type or the authenticator failed to respond {@link 
             OperationCanceledException} if the operation was canceled for any 
             reason, including the user canceling the settings dialog {@link 
             IOException} if the authenticator experienced an I/O problem 
             updating settings, usually because of network trouble 

*android.accounts.AccountManager.get(Context)*

public static |android.accounts.AccountManager| get(android.content.Context context)

Gets an AccountManager instance associated with a Context. The 
(|android.content.Context|) will be used as long as the AccountManager is 
active, so make sure to use a (|android.content.Context|) whose lifetime is 
commensurate with any listeners registered to 
(|android.accounts.AccountManager|) or similar methods. 

It is safe to call this method from the main thread. 

No permission is required to call this method. 


    context - The {@link Context} to use when necessary 

    Returns: An {@link AccountManager} instance 

*android.accounts.AccountManager.getAccounts()*

public |android.accounts.Account|[] getAccounts()

Lists all accounts of any type registered on the device. Equivalent to 
getAccountsByType(null). 

It is safe to call this method from the main thread. 

This method requires the caller to hold the permission 
(|android.Manifest.permission|) . 



    Returns: An array of {@link Account}, one for each account. Empty (never null) if no 
             accounts have been added. 

*android.accounts.AccountManager.getAccountsByType(String)*

public |android.accounts.Account|[] getAccountsByType(java.lang.String type)

Lists all accounts of a particular type. The account type is a string token 
corresponding to the authenticator and useful domain of the account. For 
example, there are types corresponding to Google and Facebook. The exact string 
token to use will be published somewhere associated with the authenticator in 
question. 

It is safe to call this method from the main thread. 

This method requires the caller to hold the permission 
(|android.Manifest.permission|) . 


    type - The type of accounts to return, null to retrieve all accounts 

    Returns: An array of {@link Account}, one per matching account. Empty (never null) if no 
             accounts of the specified type have been added. 

*android.accounts.AccountManager.getAccountsByTypeAndFeatures(String,String[],AccountManagerCallback<Account[]>,Handler)*

public |android.accounts.AccountManagerFuture|<Account[]> getAccountsByTypeAndFeatures(
  java.lang.String type,
  java.lang.String[] features,
  android.accounts.AccountManagerCallback<android.accounts.Account[]> callback,
  android.os.Handler handler)

Lists all accounts of a type which have certain features. The account type 
identifies the authenticator (see (|android.accounts.AccountManager|) ). 
Account features are authenticator-specific string tokens identifying boolean 
account properties (see (|android.accounts.AccountManager|) ). 

Unlike (|android.accounts.AccountManager|) , this method calls the 
authenticator, which may contact the server or do other work to check account 
features, so the method returns an (|android.accounts.AccountManagerFuture|) . 

This method may be called from any thread, but the returned 
(|android.accounts.AccountManagerFuture|) must not be used on the main thread. 

This method requires the caller to hold the permission 
(|android.Manifest.permission|) . 


    type - The type of accounts to return, must not be null 
    features - An array of the account features to require, may be null or empty 
    callback - Callback to invoke when the request completes, null for no callback 
    handler - {@link Handler} identifying the callback thread, null for the main thread 

    Returns: An {@link AccountManagerFuture} which resolves to an array of {@link Account}, 
             one per account of the specified type which matches the requested 
             features. 

*android.accounts.AccountManager.getAccountsByTypeAsUser(String,UserHandle)*

public |android.accounts.Account|[] getAccountsByTypeAsUser(
  java.lang.String type,
  android.os.UserHandle userHandle)





*android.accounts.AccountManager.getAccountsByTypeForPackage(String,String)*

public |android.accounts.Account|[] getAccountsByTypeForPackage(
  java.lang.String type,
  java.lang.String packageName)

Returns the accounts visible to the specified package, in an environment where 
some apps are not authorized to view all accounts. This method can only be 
called by system apps. 


    type - The type of accounts to return, null to retrieve all accounts 
    packageName - The package name of the app for which the accounts are to be returned 

    Returns: An array of {@link Account}, one per matching account. Empty (never null) if no 
             accounts of the specified type have been added. 

*android.accounts.AccountManager.getAccountsForPackage(String,int)*

public |android.accounts.Account|[] getAccountsForPackage(
  java.lang.String packageName,
  int uid)




    packageName - package name of the calling app. 
    uid - the uid of the calling app. 

    Returns: the accounts that are available to this package and user. 

*android.accounts.AccountManager.getAuthenticatorTypes()*

public |android.accounts.AuthenticatorDescription|[] getAuthenticatorTypes()

Lists the currently registered authenticators. 

It is safe to call this method from the main thread. 

No permission is required to call this method. 



    Returns: An array of {@link AuthenticatorDescription} for every authenticator known to 
             the AccountManager service. Empty (never null) if no 
             authenticators are known. 

*android.accounts.AccountManager.getAuthToken(Account,String,boolean,AccountManagerCallback<Bundle>,Handler)*

public |android.accounts.AccountManagerFuture|<Bundle> getAuthToken(
  android.accounts.Account account,
  java.lang.String authTokenType,
  boolean notifyAuthFailure,
  android.accounts.AccountManagerCallback<android.os.Bundle> callback,
  android.os.Handler handler)

Gets an auth token of the specified type for a particular account, optionally 
raising a notification if the user must enter credentials. This method is 
intended for background tasks and services where the user should not be 
immediately interrupted with a password prompt. 

If a previously generated auth token is cached for this account and type, then 
it is returned. Otherwise, if a saved password is available, it is sent to the 
server to generate a new auth token. Otherwise, an (|android.content.Intent|) 
is returned which, when started, will prompt the user for a password. If the 
notifyAuthFailure parameter is set, a status bar notification is also created 
with the same Intent, alerting the user that they need to enter a password at 
some point. 

In that case, you may need to wait until the user responds, which could take 
hours or days or forever. When the user does respond and supply a new password, 
the account manager will broadcast the (|android.accounts.AccountManager|) 
Intent, which applications can use to try again. 

If notifyAuthFailure is not set, it is the application's responsibility to 
launch the returned Intent at some point. Either way, the result from this call 
will not wait for user action. 

Some authenticators have auth token types, whose value is 
authenticator-dependent. Some services use different token types to access 
different functionality -- for example, Google uses different auth tokens to 
access Gmail and Google Calendar for the same account. 

This method may be called from any thread, but the returned 
(|android.accounts.AccountManagerFuture|) must not be used on the main thread. 

This method requires the caller to hold the permission 
(|android.Manifest.permission|) . 

    Deprecated: use {@link #getAuthToken(Account, String, android.os.Bundle,
 boolean, AccountManagerCallback, android.os.Handler)} instead

    account - The account to fetch an auth token for 
    authTokenType - The auth token type, an authenticator-dependent string token, must not be null 
    notifyAuthFailure - True to add a notification to prompt the user for a password if necessary, 
       false to leave that to the caller 
    callback - Callback to invoke when the request completes, null for no callback 
    handler - {@link Handler} identifying the callback thread, null for the main thread 

    Returns: An {@link AccountManagerFuture} which resolves to a Bundle with at least the 
             following fields on success: 

{@link #KEY_ACCOUNT_NAME} - the name of the account you supplied {@link 
             #KEY_ACCOUNT_TYPE} - the type of the account {@link 
             #KEY_AUTHTOKEN} - the auth token you wanted 

(Other authenticator-specific values may be returned.) If the user must enter 
             credentials, the returned Bundle contains only {@link #KEY_INTENT} 
             with the {@link Intent} needed to launch a prompt. 

If an error occurred, {@link AccountManagerFuture#getResult()} throws: 

{@link AuthenticatorException} if the authenticator failed to respond {@link 
             OperationCanceledException} if the operation is canceled for any 
             reason, incluidng the user canceling a credential request {@link 
             IOException} if the authenticator experienced an I/O problem 
             creating a new auth token, usually because of network trouble 

If the account is no longer present on the device, the return value is 
             authenticator-dependent. The caller should verify the validity of 
             the account before requesting an auth token. 

*android.accounts.AccountManager.getAuthToken(Account,String,Bundle,Activity,AccountManagerCallback<Bundle>,Handler)*

public |android.accounts.AccountManagerFuture|<Bundle> getAuthToken(
  android.accounts.Account account,
  java.lang.String authTokenType,
  android.os.Bundle options,
  android.app.Activity activity,
  android.accounts.AccountManagerCallback<android.os.Bundle> callback,
  android.os.Handler handler)

Gets an auth token of the specified type for a particular account, prompting 
the user for credentials if necessary. This method is intended for applications 
running in the foreground where it makes sense to ask the user directly for a 
password. 

If a previously generated auth token is cached for this account and type, then 
it is returned. Otherwise, if a saved password is available, it is sent to the 
server to generate a new auth token. Otherwise, the user is prompted to enter a 
password. 

Some authenticators have auth token types, whose value is 
authenticator-dependent. Some services use different token types to access 
different functionality -- for example, Google uses different auth tokens to 
access Gmail and Google Calendar for the same account. 

This method may be called from any thread, but the returned 
(|android.accounts.AccountManagerFuture|) must not be used on the main thread. 

This method requires the caller to hold the permission 
(|android.Manifest.permission|) . 


    account - The account to fetch an auth token for 
    authTokenType - The auth token type, an authenticator-dependent string token, must not be null 
    options - Authenticator-specific options for the request, may be null or empty 
    activity - The {@link Activity} context to use for launching a new authenticator-defined 
       sub-Activity to prompt the user for a password if necessary; used only 
       to call startActivity(); must not be null. 
    callback - Callback to invoke when the request completes, null for no callback 
    handler - {@link Handler} identifying the callback thread, null for the main thread 

    Returns: An {@link AccountManagerFuture} which resolves to a Bundle with at least the 
             following fields: 

{@link #KEY_ACCOUNT_NAME} - the name of the account you supplied {@link 
             #KEY_ACCOUNT_TYPE} - the type of the account {@link 
             #KEY_AUTHTOKEN} - the auth token you wanted 

(Other authenticator-specific values may be returned.) If an auth token could 
             not be fetched, {@link AccountManagerFuture#getResult()} throws: 

{@link AuthenticatorException} if the authenticator failed to respond {@link 
             OperationCanceledException} if the operation is canceled for any 
             reason, incluidng the user canceling a credential request {@link 
             IOException} if the authenticator experienced an I/O problem 
             creating a new auth token, usually because of network trouble 

If the account is no longer present on the device, the return value is 
             authenticator-dependent. The caller should verify the validity of 
             the account before requesting an auth token. 

*android.accounts.AccountManager.getAuthToken(Account,String,Bundle,boolean,AccountManagerCallback<Bundle>,Handler)*

public |android.accounts.AccountManagerFuture|<Bundle> getAuthToken(
  android.accounts.Account account,
  java.lang.String authTokenType,
  android.os.Bundle options,
  boolean notifyAuthFailure,
  android.accounts.AccountManagerCallback<android.os.Bundle> callback,
  android.os.Handler handler)

Gets an auth token of the specified type for a particular account, optionally 
raising a notification if the user must enter credentials. This method is 
intended for background tasks and services where the user should not be 
immediately interrupted with a password prompt. 

If a previously generated auth token is cached for this account and type, then 
it is returned. Otherwise, if a saved password is available, it is sent to the 
server to generate a new auth token. Otherwise, an (|android.content.Intent|) 
is returned which, when started, will prompt the user for a password. If the 
notifyAuthFailure parameter is set, a status bar notification is also created 
with the same Intent, alerting the user that they need to enter a password at 
some point. 

In that case, you may need to wait until the user responds, which could take 
hours or days or forever. When the user does respond and supply a new password, 
the account manager will broadcast the (|android.accounts.AccountManager|) 
Intent, which applications can use to try again. 

If notifyAuthFailure is not set, it is the application's responsibility to 
launch the returned Intent at some point. Either way, the result from this call 
will not wait for user action. 

Some authenticators have auth token types, whose value is 
authenticator-dependent. Some services use different token types to access 
different functionality -- for example, Google uses different auth tokens to 
access Gmail and Google Calendar for the same account. 

This method may be called from any thread, but the returned 
(|android.accounts.AccountManagerFuture|) must not be used on the main thread. 

This method requires the caller to hold the permission 
(|android.Manifest.permission|) . 


    account - The account to fetch an auth token for 
    authTokenType - The auth token type, an authenticator-dependent string token, must not be null 
    options - Authenticator-specific options for the request, may be null or empty 
    notifyAuthFailure - True to add a notification to prompt the user for a password if necessary, 
       false to leave that to the caller 
    callback - Callback to invoke when the request completes, null for no callback 
    handler - {@link Handler} identifying the callback thread, null for the main thread 

    Returns: An {@link AccountManagerFuture} which resolves to a Bundle with at least the 
             following fields on success: 

{@link #KEY_ACCOUNT_NAME} - the name of the account you supplied {@link 
             #KEY_ACCOUNT_TYPE} - the type of the account {@link 
             #KEY_AUTHTOKEN} - the auth token you wanted 

(Other authenticator-specific values may be returned.) If the user must enter 
             credentials, the returned Bundle contains only {@link #KEY_INTENT} 
             with the {@link Intent} needed to launch a prompt. 

If an error occurred, {@link AccountManagerFuture#getResult()} throws: 

{@link AuthenticatorException} if the authenticator failed to respond {@link 
             OperationCanceledException} if the operation is canceled for any 
             reason, incluidng the user canceling a credential request {@link 
             IOException} if the authenticator experienced an I/O problem 
             creating a new auth token, usually because of network trouble 

If the account is no longer present on the device, the return value is 
             authenticator-dependent. The caller should verify the validity of 
             the account before requesting an auth token. 

*android.accounts.AccountManager.getAuthTokenByFeatures(String,String,String[],Activity,Bundle,Bundle,AccountManagerCallback<Bundle>,Handler)*

public |android.accounts.AccountManagerFuture|<Bundle> getAuthTokenByFeatures(
  java.lang.String accountType,
  java.lang.String authTokenType,
  java.lang.String[] features,
  android.app.Activity activity,
  android.os.Bundle addAccountOptions,
  android.os.Bundle getAuthTokenOptions,
  android.accounts.AccountManagerCallback<android.os.Bundle> callback,
  android.os.Handler handler)

This convenience helper combines the functionality of 
(|android.accounts.AccountManager|) , (|android.accounts.AccountManager|) , and 
(|android.accounts.AccountManager|) . 

This method gets a list of the accounts matching the specified type and feature 
set; if there is exactly one, it is used; if there are more than one, the user 
is prompted to pick one; if there are none, the user is prompted to add one. 
Finally, an auth token is acquired for the chosen account. 

This method may be called from any thread, but the returned 
(|android.accounts.AccountManagerFuture|) must not be used on the main thread. 

This method requires the caller to hold the permission 
(|android.Manifest.permission|) . 


    accountType - The account type required (see {@link #getAccountsByType}), must not be null 
    authTokenType - The desired auth token type (see {@link #getAuthToken}), must not be null 
    features - Required features for the account (see {@link #getAccountsByTypeAndFeatures}), 
       may be null or empty 
    activity - The {@link Activity} context to use for launching new sub-Activities to prompt 
       to add an account, select an account, and/or enter a password, as 
       necessary; used only to call startActivity(); should not be null 
    addAccountOptions - Authenticator-specific options to use for adding new accounts; may be null or 
       empty 
    getAuthTokenOptions - Authenticator-specific options to use for getting auth tokens; may be null or 
       empty 
    callback - Callback to invoke when the request completes, null for no callback 
    handler - {@link Handler} identifying the callback thread, null for the main thread 

    Returns: An {@link AccountManagerFuture} which resolves to a Bundle with at least the 
             following fields: 

{@link #KEY_ACCOUNT_NAME} - the name of the account {@link #KEY_ACCOUNT_TYPE} - 
             the type of the account {@link #KEY_AUTHTOKEN} - the auth token 
             you wanted 

If an error occurred, {@link AccountManagerFuture#getResult()} throws: 

{@link AuthenticatorException} if no authenticator was registered for this 
             account type or the authenticator failed to respond {@link 
             OperationCanceledException} if the operation was canceled for any 
             reason, including the user canceling any operation {@link 
             IOException} if the authenticator experienced an I/O problem 
             updating settings, usually because of network trouble 

*android.accounts.AccountManager.getAuthTokenLabel(String,String,AccountManagerCallback<String>,Handler)*

public |android.accounts.AccountManagerFuture|<String> getAuthTokenLabel(
  java.lang.String accountType,
  java.lang.String authTokenType,
  android.accounts.AccountManagerCallback<java.lang.String> callback,
  android.os.Handler handler)

Get the user-friendly label associated with an authenticator's auth token. 


    accountType - the type of the authenticator. must not be null. 
    authTokenType - the token type. must not be null. 
    callback - callback to invoke when the result is available. may be null. 
    handler - the handler on which to invoke the callback, or null for the main thread 

    Returns: a future containing the label string 

*android.accounts.AccountManager.getPassword(Account)*

public |java.lang.String| getPassword(android.accounts.Account account)

Gets the saved password associated with the account. This is intended for 
authenticators and related code; applications should get an auth token instead. 

It is safe to call this method from the main thread. 

This method requires the caller to hold the permission 
(|android.Manifest.permission|) and to have the same UID as the account's 
authenticator. 


    account - The account to query for a password 

    Returns: The account's password, null if none or if the account doesn't exist 

*android.accounts.AccountManager.getSharedAccounts(UserHandle)*

public |android.accounts.Account|[] getSharedAccounts(android.os.UserHandle user)




    user - 

    Returns: 

*android.accounts.AccountManager.getUserData(Account,String)*

public |java.lang.String| getUserData(
  android.accounts.Account account,
  java.lang.String key)

Gets the user data named by "key" associated with the account. This is intended 
for authenticators and related code to store arbitrary metadata along with 
accounts. The meaning of the keys and values is up to the authenticator for the 
account. 

It is safe to call this method from the main thread. 

This method requires the caller to hold the permission 
(|android.Manifest.permission|) and to have the same UID as the account's 
authenticator. 


    account - The account to query for user data 

    Returns: The user data, null if the account or key doesn't exist 

*android.accounts.AccountManager.hasFeatures(Account,String[],AccountManagerCallback<Boolean>,Handler)*

public |android.accounts.AccountManagerFuture|<Boolean> hasFeatures(
  android.accounts.Account account,
  java.lang.String[] features,
  android.accounts.AccountManagerCallback<java.lang.Boolean> callback,
  android.os.Handler handler)

Finds out whether a particular account has all the specified features. Account 
features are authenticator-specific string tokens identifying boolean account 
properties. For example, features are used to tell whether Google accounts have 
a particular service (such as Google Calendar or Google Talk) enabled. The 
feature names and their meanings are published somewhere associated with the 
authenticator in question. 

This method may be called from any thread, but the returned 
(|android.accounts.AccountManagerFuture|) must not be used on the main thread. 

This method requires the caller to hold the permission 
(|android.Manifest.permission|) . 


    account - The {@link Account} to test 
    features - An array of the account features to check 
    callback - Callback to invoke when the request completes, null for no callback 
    handler - {@link Handler} identifying the callback thread, null for the main thread 

    Returns: An {@link AccountManagerFuture} which resolves to a Boolean, true if the 
             account exists and has all of the specified features. 

*android.accounts.AccountManager.invalidateAuthToken(String,String)*

public void invalidateAuthToken(
  java.lang.String accountType,
  java.lang.String authToken)

Removes an auth token from the AccountManager's cache. Does nothing if the auth 
token is not currently in the cache. Applications must call this method when 
the auth token is found to have expired or otherwise become invalid for 
authenticating requests. The AccountManager does not validate or expire cached 
auth tokens otherwise. 

It is safe to call this method from the main thread. 

This method requires the caller to hold the permission 
(|android.Manifest.permission|) or (|android.Manifest.permission|) 


    accountType - The account type of the auth token to invalidate, must not be null 
    authToken - The auth token to invalidate, may be null 

*android.accounts.AccountManager.newChooseAccountIntent(Account,ArrayList<Account>,String[],boolean,String,String,String[],Bundle)*

public static |android.content.Intent| newChooseAccountIntent(
  android.accounts.Account selectedAccount,
  java.util.ArrayList<android.accounts.Account> allowableAccounts,
  java.lang.String[] allowableAccountTypes,
  boolean alwaysPromptForAccount,
  java.lang.String descriptionOverrideText,
  java.lang.String addAccountAuthTokenType,
  java.lang.String[] addAccountRequiredFeatures,
  android.os.Bundle addAccountOptions)

Returns an intent to an (|android.app.Activity|) that prompts the user to 
choose from a list of accounts. The caller will then typically start the 
activity by calling startActivityForResult(intent, ...);. 

On success the activity returns a Bundle with the account name and type 
specified using keys (|android.accounts.AccountManager|) and 
(|android.accounts.AccountManager|) . 

The most common case is to call this with one account type, e.g.: 

newChooseAccountIntent(null, null, new String[]{"com.google"}, false, null, 
null, null, null); 


    selectedAccount - if specified, indicates that the {@link Account} is the currently selected one, 
       according to the caller's definition of selected. 
    allowableAccounts - an optional {@link ArrayList} of accounts that are allowed to be shown. If not 
       specified then this field will not limit the displayed accounts. 
    allowableAccountTypes - an optional string array of account types. These are used both to filter the 
       shown accounts and to filter the list of account types that are shown 
       when adding an account. 
    alwaysPromptForAccount - if set the account chooser screen is always shown, otherwise it is only shown 
       when there is more than one account from which to choose 
    descriptionOverrideText - if non-null this string is used as the description in the accounts chooser 
       screen rather than the default 
    addAccountAuthTokenType - this string is passed as the {@link #addAccount} authTokenType parameter 
    addAccountRequiredFeatures - this string array is passed as the {@link #addAccount} requiredFeatures 
       parameter 
    addAccountOptions - This {@link Bundle} is passed as the {@link #addAccount} options parameter 

    Returns: an {@link Intent} that can be used to launch the ChooseAccount activity flow. 

*android.accounts.AccountManager.peekAuthToken(Account,String)*

public |java.lang.String| peekAuthToken(
  android.accounts.Account account,
  java.lang.String authTokenType)

Gets an auth token from the AccountManager's cache. If no auth token is cached 
for this account, null will be returned -- a new auth token will not be 
generated, and the server will not be contacted. Intended for use by the 
authenticator, not directly by applications. 

It is safe to call this method from the main thread. 

This method requires the caller to hold the permission 
(|android.Manifest.permission|) and to have the same UID as the account's 
authenticator. 


    account - The account to fetch an auth token for 
    authTokenType - The type of auth token to fetch, see {#getAuthToken} 

    Returns: The cached auth token for this account and type, or null if no auth token is 
             cached or the account does not exist. 

*android.accounts.AccountManager.removeAccount(Account,AccountManagerCallback<Boolean>,Handler)*

public |android.accounts.AccountManagerFuture|<Boolean> removeAccount(
  android.accounts.Account account,
  android.accounts.AccountManagerCallback<java.lang.Boolean> callback,
  android.os.Handler handler)

Removes an account from the AccountManager. Does nothing if the account does 
not exist. Does not delete the account from the server. The authenticator may 
have its own policies preventing account deletion, in which case the account 
will not be deleted. 

This method may be called from any thread, but the returned 
(|android.accounts.AccountManagerFuture|) must not be used on the main thread. 

This method requires the caller to hold the permission 
(|android.Manifest.permission|) . 


    account - The {@link Account} to remove 
    callback - Callback to invoke when the request completes, null for no callback 
    handler - {@link Handler} identifying the callback thread, null for the main thread 

    Returns: An {@link AccountManagerFuture} which resolves to a Boolean, true if the 
             account has been successfully removed, false if the authenticator 
             forbids deleting this account. 

*android.accounts.AccountManager.removeOnAccountsUpdatedListener(OnAccountsUpdateListener)*

public void removeOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener listener)

Removes an (|android.accounts.OnAccountsUpdateListener|) previously registered 
with (|android.accounts.AccountManager|) . The listener will no longer receive 
notifications of account changes. 

It is safe to call this method from the main thread. 

No permission is required to call this method. 


    listener - The previously added listener to remove 

*android.accounts.AccountManager.removeSharedAccount(Account,UserHandle)*

public boolean removeSharedAccount(
  android.accounts.Account account,
  android.os.UserHandle user)




    account - the account to remove 
    user - the user to remove the account from 

    Returns: 

*android.accounts.AccountManager.sanitizeResult(Bundle)*

public static |android.os.Bundle| sanitizeResult(android.os.Bundle result)





*android.accounts.AccountManager.setAuthToken(Account,String,String)*

public void setAuthToken(
  android.accounts.Account account,
  java.lang.String authTokenType,
  java.lang.String authToken)

Adds an auth token to the AccountManager cache for an account. If the account 
does not exist then this call has no effect. Replaces any previous auth token 
for this account and auth token type. Intended for use by the authenticator, 
not directly by applications. 

It is safe to call this method from the main thread. 

This method requires the caller to hold the permission 
(|android.Manifest.permission|) and to have the same UID as the account's 
authenticator. 


    account - The account to set an auth token for 
    authTokenType - The type of the auth token, see {#getAuthToken} 
    authToken - The auth token to add to the cache 

*android.accounts.AccountManager.setPassword(Account,String)*

public void setPassword(
  android.accounts.Account account,
  java.lang.String password)

Sets or forgets a saved password. This modifies the local copy of the password 
used to automatically authenticate the user; it does not change the user's 
account password on the server. Intended for use by the authenticator, not 
directly by applications. 

It is safe to call this method from the main thread. 

This method requires the caller to hold the permission 
(|android.Manifest.permission|) and have the same UID as the account's 
authenticator. 


    account - The account to set a password for 
    password - The password to set, null to clear the password 

*android.accounts.AccountManager.setUserData(Account,String,String)*

public void setUserData(
  android.accounts.Account account,
  java.lang.String key,
  java.lang.String value)

Sets one userdata key for an account. Intended by use for the authenticator to 
stash state for itself, not directly by applications. The meaning of the keys 
and values is up to the authenticator. 

It is safe to call this method from the main thread. 

This method requires the caller to hold the permission 
(|android.Manifest.permission|) and to have the same UID as the account's 
authenticator. 


    account - The account to set the userdata for 
    key - The userdata key to set. Must not be null 
    value - The value to set, null to clear this userdata key 

*android.accounts.AccountManager.updateAppPermission(Account,String,int,boolean)*

public void updateAppPermission(
  android.accounts.Account account,
  java.lang.String authTokenType,
  int uid,
  boolean value)

Change whether or not an app (identified by its uid) is allowed to retrieve an 
authToken for an account. 

This is only meant to be used by system activities and is not in the SDK. 


    account - The account whose permissions are being modified 
    authTokenType - The type of token whose permissions are being modified 
    uid - The uid that identifies the app which is being granted or revoked permission. 
    value - true is permission is being granted, false for revoked 

*android.accounts.AccountManager.updateCredentials(Account,String,Bundle,Activity,AccountManagerCallback<Bundle>,Handler)*

public |android.accounts.AccountManagerFuture|<Bundle> updateCredentials(
  android.accounts.Account account,
  java.lang.String authTokenType,
  android.os.Bundle options,
  android.app.Activity activity,
  android.accounts.AccountManagerCallback<android.os.Bundle> callback,
  android.os.Handler handler)

Asks the user to enter a new password for an account, updating the saved 
credentials for the account. Normally this happens automatically when the 
server rejects credentials during an auth token fetch, but this can be invoked 
directly to ensure we have the correct credentials stored. 

This method may be called from any thread, but the returned 
(|android.accounts.AccountManagerFuture|) must not be used on the main thread. 

This method requires the caller to hold the permission 
(|android.Manifest.permission|) . 


    account - The account to update credentials for 
    authTokenType - The credentials entered must allow an auth token of this type to be created 
       (but no actual auth token is returned); may be null 
    options - Authenticator-specific options for the request; may be null or empty 
    activity - The {@link Activity} context to use for launching a new authenticator-defined 
       sub-Activity to prompt the user to enter a password; used only to call 
       startActivity(); if null, the prompt will not be launched directly, but 
       the necessary {@link Intent} will be returned to the caller instead 
    callback - Callback to invoke when the request completes, null for no callback 
    handler - {@link Handler} identifying the callback thread, null for the main thread 

    Returns: An {@link AccountManagerFuture} which resolves to a Bundle with these fields if 
             an activity was supplied and the account credentials were 
             successfully updated: 

{@link #KEY_ACCOUNT_NAME} - the name of the account created {@link 
             #KEY_ACCOUNT_TYPE} - the type of the account 

If no activity was specified, the returned Bundle contains only {@link 
             #KEY_INTENT} with the {@link Intent} needed to launch the password 
             prompt. If an error occurred, {@link 
             AccountManagerFuture#getResult()} throws: 

{@link AuthenticatorException} if the authenticator failed to respond {@link 
             OperationCanceledException} if the operation was canceled for any 
             reason, including the user canceling the password prompt {@link 
             IOException} if the authenticator experienced an I/O problem 
             verifying the password, usually because of network trouble 


