*android.text.format.DateFormat* *DateFormat* Utility class for producing string

public class DateFormat
  extends    |java.lang.Object|

|android.text.format.DateFormat_Description|
|android.text.format.DateFormat_Fields|
|android.text.format.DateFormat_Constructors|
|android.text.format.DateFormat_Methods|

================================================================================

*android.text.format.DateFormat_Fields*
|char_android.text.format.DateFormat.AM_PM|
|char_android.text.format.DateFormat.CAPITAL_AM_PM|
|char_android.text.format.DateFormat.DATE|
|char_android.text.format.DateFormat.DAY|
|char_android.text.format.DateFormat.HOUR|
|char_android.text.format.DateFormat.HOUR_OF_DAY|
|char_android.text.format.DateFormat.MINUTE|
|char_android.text.format.DateFormat.MONTH|
|char_android.text.format.DateFormat.QUOTE|
|char_android.text.format.DateFormat.SECONDS|
|char_android.text.format.DateFormat.STANDALONE_MONTH|
|char_android.text.format.DateFormat.TIME_ZONE|
|char_android.text.format.DateFormat.YEAR|

*android.text.format.DateFormat_Constructors*
|android.text.format.DateFormat()|

*android.text.format.DateFormat_Methods*
|android.text.format.DateFormat.format(CharSequence,Calendar)|Given a format st
|android.text.format.DateFormat.format(CharSequence,Date)|Given a format string
|android.text.format.DateFormat.format(CharSequence,long)|Given a format string
|android.text.format.DateFormat.getBestDateTimePattern(Locale,String)|Returns t
|android.text.format.DateFormat.getDateFormat(Context)|Returns ajava.text.DateF
|android.text.format.DateFormat.getDateFormatForSetting(Context,String)|Returns
|android.text.format.DateFormat.getDateFormatOrder(Context)|Gets the current da
|android.text.format.DateFormat.getLongDateFormat(Context)|Returns ajava.text.D
|android.text.format.DateFormat.getMediumDateFormat(Context)|Returns ajava.text
|android.text.format.DateFormat.getTimeFormat(Context)|Returns ajava.text.DateF
|android.text.format.DateFormat.getTimeFormatString(Context)|Returns a String p
|android.text.format.DateFormat.hasDesignator(CharSequence,char)|Test if a form
|android.text.format.DateFormat.hasSeconds(CharSequence)|Indicates whether the 
|android.text.format.DateFormat.is24HourFormat(Context)|Returns true if user pr

*android.text.format.DateFormat_Description*

Utility class for producing strings with formatted date/time. 

Most callers should avoid supplying their own format strings to this 
class'formatmethods and rely on the correctly localized ones supplied by the 
system. This class' factory methods return appropriately-localized 
(|java.text.DateFormat|) instances, suitable for both formatting and parsing 
dates. For the canonical documentation of format strings, see 
(|java.text.SimpleDateFormat|) . 

In cases where the system does not provide a suitable pattern, this class 
offers the (|android.text.format.DateFormat|) method. 

Theformatmethods in this class implement a subset of Unicode UTS #35 patterns. 
The subset currently supported by this class includes the following format 
characters:acdEHhLKkLMmsyz. Up to API level 17, onlyadEhkMmszywere supported. 
Note that this class incorrectly implementskas if it wereHfor backwards 
compatibility. 

See (|java.text.SimpleDateFormat|) for more documentation about patterns, or if 
you need a more complete or correct implementation. Note that the 
non-formatmethods in this class are implemented bySimpleDateFormat. 



*char_android.text.format.DateFormat.AM_PM*




*char_android.text.format.DateFormat.CAPITAL_AM_PM*




*char_android.text.format.DateFormat.DATE*




*char_android.text.format.DateFormat.DAY*




*char_android.text.format.DateFormat.HOUR*




*char_android.text.format.DateFormat.HOUR_OF_DAY*




*char_android.text.format.DateFormat.MINUTE*




*char_android.text.format.DateFormat.MONTH*




*char_android.text.format.DateFormat.QUOTE*




*char_android.text.format.DateFormat.SECONDS*




*char_android.text.format.DateFormat.STANDALONE_MONTH*




*char_android.text.format.DateFormat.TIME_ZONE*




*char_android.text.format.DateFormat.YEAR*





*android.text.format.DateFormat()*

public DateFormat()




*android.text.format.DateFormat.format(CharSequence,Calendar)*

public static |java.lang.CharSequence| format(
  java.lang.CharSequence inFormat,
  java.util.Calendar inDate)

Given a format string and a (|java.util.Calendar|) object, returns a 
CharSequence containing the requested date. 


    inFormat - the format string, as described in {@link android.text.format.DateFormat} 
    inDate - the date to format 

    Returns: a {@link CharSequence} containing the requested text 

*android.text.format.DateFormat.format(CharSequence,Date)*

public static |java.lang.CharSequence| format(
  java.lang.CharSequence inFormat,
  java.util.Date inDate)

Given a format string and a (|java.util.Date|) object, returns a CharSequence 
containing the requested date. 


    inFormat - the format string, as described in {@link android.text.format.DateFormat} 
    inDate - the date to format 

    Returns: a {@link CharSequence} containing the requested text 

*android.text.format.DateFormat.format(CharSequence,long)*

public static |java.lang.CharSequence| format(
  java.lang.CharSequence inFormat,
  long inTimeInMillis)

Given a format string and a time in milliseconds since Jan 1, 1970 GMT, returns 
a CharSequence containing the requested date. 


    inFormat - the format string, as described in {@link android.text.format.DateFormat} 
    inTimeInMillis - in milliseconds since Jan 1, 1970 GMT 

    Returns: a {@link CharSequence} containing the requested text 

*android.text.format.DateFormat.getBestDateTimePattern(Locale,String)*

public static |java.lang.String| getBestDateTimePattern(
  java.util.Locale locale,
  java.lang.String skeleton)

Returns the best possible localized form of the given skeleton for the given 
locale. A skeleton is similar to, and uses the same format characters as, a 
Unicode UTS #35 pattern. 

One difference is that order is irrelevant. For example, "MMMMd" will return 
"MMMM d" in theen_USlocale, but "d. MMMM" in thede_CHlocale. 

Note also in that second example that the necessary punctuation for German was 
added. For the same input ines_ES, we'd have even more extra text: "d 'de' 
MMMM". 

This method will automatically correct for grammatical necessity. Given the 
same "MMMMd" input, this method will return "d LLLL" in thefa_IRlocale, where 
stand-alone months are necessary. Lengths are preserved where meaningful, so 
"Md" would give a different result to "MMMd", say, except in a locale such 
asja_JPwhere there is only one length of month. 

This method will only return patterns that are in CLDR, and is useful whenever 
you know what elements you want in your format string but don't want to make 
your code specific to any one locale. 


    locale - the locale into which the skeleton should be localized 
    skeleton - a skeleton as described above 

    Returns: a string pattern suitable for use with {@link java.text.SimpleDateFormat}. 

*android.text.format.DateFormat.getDateFormat(Context)*

public static |java.text.DateFormat| getDateFormat(android.content.Context context)

Returns a (|java.text.DateFormat|) object that can format the date in short 
form (such as 12/31/1999) according to the current locale and the user's 
date-order preference. 


    context - the application context 

    Returns: the {@link java.text.DateFormat} object that properly formats the date. 

*android.text.format.DateFormat.getDateFormatForSetting(Context,String)*

public static |java.text.DateFormat| getDateFormatForSetting(
  android.content.Context context,
  java.lang.String value)

Returns a (|java.text.DateFormat|) object to format the date as if the date 
format setting were set to value, including null to use the locale's default 
format. 


    context - the application context 
    value - the date format setting string to interpret for the current locale 

*android.text.format.DateFormat.getDateFormatOrder(Context)*

public static char[] getDateFormatOrder(android.content.Context context)

Gets the current date format stored as a char array. The array will contain 3 
elements ( (|android.text.format.DateFormat|) , 
(|android.text.format.DateFormat|) , and (|android.text.format.DateFormat|) ) 
in the order specified by the user's format preference. Note that this order is 
only appropriate for all-numeric dates; spelled-out (MEDIUM and LONG) dates 
will generally contain other punctuation, spaces, or words, not just the day, 
month, and year, and not necessarily in the same order returned here. 



*android.text.format.DateFormat.getLongDateFormat(Context)*

public static |java.text.DateFormat| getLongDateFormat(android.content.Context context)

Returns a (|java.text.DateFormat|) object that can format the date in long form 
(such asMonday, January 3, 2000) for the current locale. 


    context - the application context 

    Returns: the {@link java.text.DateFormat} object that formats the date in long form. 

*android.text.format.DateFormat.getMediumDateFormat(Context)*

public static |java.text.DateFormat| getMediumDateFormat(android.content.Context context)

Returns a (|java.text.DateFormat|) object that can format the date in medium 
form (such asJan 3, 2000) for the current locale. 


    context - the application context 

    Returns: the {@link java.text.DateFormat} object that formats the date in long form. 

*android.text.format.DateFormat.getTimeFormat(Context)*

public static |java.text.DateFormat| getTimeFormat(android.content.Context context)

Returns a (|java.text.DateFormat|) object that can format the time according to 
the current locale and the user's 12-/24-hour clock preference. 


    context - the application context 

    Returns: the {@link java.text.DateFormat} object that properly formats the time. 

*android.text.format.DateFormat.getTimeFormatString(Context)*

public static |java.lang.String| getTimeFormatString(android.content.Context context)

Returns a String pattern that can be used to format the time according to the 
current locale and the user's 12-/24-hour clock preference. 


    context - the application context 

*android.text.format.DateFormat.hasDesignator(CharSequence,char)*

public static boolean hasDesignator(
  java.lang.CharSequence inFormat,
  char designator)

Test if a format string contains the given designator. Always returnsfalseif 
the input format isnull. 



*android.text.format.DateFormat.hasSeconds(CharSequence)*

public static boolean hasSeconds(java.lang.CharSequence inFormat)

Indicates whether the specified format string contains seconds. 

Always returns false if the input format is null. 


    inFormat - the format string, as described in {@link android.text.format.DateFormat} 

    Returns: true if the format string contains {@link #SECONDS}, false otherwise 

*android.text.format.DateFormat.is24HourFormat(Context)*

public static boolean is24HourFormat(android.content.Context context)

Returns true if user preference is set to 24-hour format. 


    context - the context to use for the content resolver 

    Returns: true if 24 hour time format is selected, false otherwise. 


