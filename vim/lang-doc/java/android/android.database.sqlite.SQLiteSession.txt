*android.database.sqlite.SQLiteSession* *SQLiteSession* Provides a single client

public final class SQLiteSession
  extends    |java.lang.Object|

|android.database.sqlite.SQLiteSession_Description|
|android.database.sqlite.SQLiteSession_Fields|
|android.database.sqlite.SQLiteSession_Constructors|
|android.database.sqlite.SQLiteSession_Methods|

================================================================================

*android.database.sqlite.SQLiteSession_Fields*
|int_android.database.sqlite.SQLiteSession.TRANSACTION_MODE_DEFERRED|
|int_android.database.sqlite.SQLiteSession.TRANSACTION_MODE_EXCLUSIVE|
|int_android.database.sqlite.SQLiteSession.TRANSACTION_MODE_IMMEDIATE|

*android.database.sqlite.SQLiteSession_Constructors*
|android.database.sqlite.SQLiteSession(SQLiteConnectionPool)|Creates a session 

*android.database.sqlite.SQLiteSession_Methods*
|android.database.sqlite.SQLiteSession.beginTransaction(int,SQLiteTransactionListener,int,CancellationSignal)|
|android.database.sqlite.SQLiteSession.endTransaction(CancellationSignal)|Ends 
|android.database.sqlite.SQLiteSession.execute(String,Object[],int,CancellationSignal)|
|android.database.sqlite.SQLiteSession.executeForBlobFileDescriptor(String,Object[],int,CancellationSignal)|
|android.database.sqlite.SQLiteSession.executeForChangedRowCount(String,Object[],int,CancellationSignal)|
|android.database.sqlite.SQLiteSession.executeForCursorWindow(String,Object[],CursorWindow,int,int,boolean,int,CancellationSignal)|
|android.database.sqlite.SQLiteSession.executeForLastInsertedRowId(String,Object[],int,CancellationSignal)|
|android.database.sqlite.SQLiteSession.executeForLong(String,Object[],int,CancellationSignal)|
|android.database.sqlite.SQLiteSession.executeForString(String,Object[],int,CancellationSignal)|
|android.database.sqlite.SQLiteSession.hasConnection()|Returns true if the sess
|android.database.sqlite.SQLiteSession.hasNestedTransaction()|Returns true if t
|android.database.sqlite.SQLiteSession.hasTransaction()|Returns true if the ses
|android.database.sqlite.SQLiteSession.prepare(String,int,CancellationSignal,SQLiteStatementInfo)|
|android.database.sqlite.SQLiteSession.setTransactionSuccessful()|Marks the cur
|android.database.sqlite.SQLiteSession.yieldTransaction(long,boolean,CancellationSignal)|

*android.database.sqlite.SQLiteSession_Description*

Provides a single client the ability to use a database. 

About database sessions 

Database access is always performed using a session. The session manages the 
lifecycle of transactions and database connections. 

Sessions can be used to perform both read-only and read-write operations. There 
is some advantage to knowing when a session is being used for read-only 
purposes because the connection pool can optimize the use of the available 
connections to permit multiple read-only operations to execute in parallel 
whereas read-write operations may need to be serialized. 

When Write Ahead Logging (WAL) is enabled, the database can execute 
simultaneous read-only and read-write transactions, provided that at most one 
read-write transaction is performed at a time. When WAL is not enabled, 
read-only transactions can execute in parallel but read-write transactions are 
mutually exclusive. 

Ownership and concurrency guarantees 

Session objects are not thread-safe. In fact, session objects are thread-bound. 
The (|android.database.sqlite.SQLiteDatabase|) uses a thread-local variable to 
associate a session with each thread for the use of that thread alone. 
Consequently, each thread has its own session object and therefore its own 
transaction state independent of other threads. 

A thread has at most one session per database. This constraint ensures that a 
thread can never use more than one database connection at a time for a given 
database. As the number of available database connections is limited, if a 
single thread tried to acquire multiple connections for the same database at 
the same time, it might deadlock. Therefore we allow there to be only one 
session (so, at most one connection) per thread per database. 

Transactions 

There are two kinds of transaction: implicit transactions and explicit 
transactions. 

An implicit transaction is created whenever a database operation is requested 
and there is no explicit transaction currently in progress. An implicit 
transaction only lasts for the duration of the database operation in question 
and then it is ended. If the database operation was successful, then its 
changes are committed. 

An explicit transaction is started by calling 
(|android.database.sqlite.SQLiteSession|) and specifying the desired 
transaction mode. Once an explicit transaction has begun, all subsequent 
database operations will be performed as part of that transaction. To end an 
explicit transaction, first call (|android.database.sqlite.SQLiteSession|) if 
the transaction was successful, then call 
(|android.database.sqlite.SQLiteSession|) . If the transaction was marked 
successful, its changes will be committed, otherwise they will be rolled back. 

Explicit transactions can also be nested. A nested explicit transaction is 
started with (|android.database.sqlite.SQLiteSession|) , marked successful with 
(|android.database.sqlite.SQLiteSession|) and ended with 
(|android.database.sqlite.SQLiteSession|) . If any nested transaction is not 
marked successful, then the entire transaction including all of its nested 
transactions will be rolled back when the outermost transaction is ended. 

To improve concurrency, an explicit transaction can be yielded by calling 
(|android.database.sqlite.SQLiteSession|) . If there is contention for use of 
the database, then yielding ends the current transaction, commits its changes, 
releases the database connection for use by another session for a little while, 
and starts a new transaction with the same properties as the original one. 
Changes committed by (|android.database.sqlite.SQLiteSession|) cannot be rolled 
back. 

When a transaction is started, the client can provide a 
(|android.database.sqlite.SQLiteTransactionListener|) to listen for 
notifications of transaction-related events. 

Recommended usage: 

// First, begin the transaction. 
session.beginTransaction(SQLiteSession.TRANSACTION_MODE_DEFERRED, 0); try { // 
Then do stuff... session.execute("INSERT INTO ...", null, 0); 

// As the very last step before ending the transaction, mark it successful. 
session.setTransactionSuccessful(); } finally { // Finally, end the 
transaction. // This statement will commit the transaction if it was marked 
successful or // roll it back otherwise. session.endTransaction(); } 



Database connections 

A (|android.database.sqlite.SQLiteDatabase|) can have multiple active sessions 
at the same time. Each session acquires and releases connections to the 
database as needed to perform each requested database transaction. If all 
connections are in use, then database transactions on some sessions will block 
until a connection becomes available. 

The session acquires a single database connection only for the duration of a 
single (implicit or explicit) database transaction, then releases it. This 
characteristic allows a small pool of database connections to be shared 
efficiently by multiple sessions as long as they are not all trying to perform 
database transactions at the same time. 

Responsiveness 

Because there are a limited number of database connections and the session 
holds a database connection for the entire duration of a database transaction, 
it is important to keep transactions short. This is especially important for 
read-write transactions since they may block other transactions from executing. 
Consider calling (|android.database.sqlite.SQLiteSession|) periodically during 
long-running transactions. 

Another important consideration is that transactions that take too long to run 
may cause the application UI to become unresponsive. Even if the transaction is 
executed in a background thread, the user will get bored and frustrated if the 
application shows no data for several seconds while a transaction runs. 

Guidelines: 

Do not perform database transactions on the UI thread. Keep database 
transactions as short as possible. Simple queries often run faster than complex 
queries. Measure the performance of your database transactions. Consider what 
will happen when the size of the data set grows. A query that works well on 100 
rows may struggle with 10,000. 

Reentrance 

This class must tolerate reentrant execution of SQLite operations because 
triggers may call custom SQLite functions that perform additional queries. 



*int_android.database.sqlite.SQLiteSession.TRANSACTION_MODE_DEFERRED*

Transaction mode: Deferred. 

In a deferred transaction, no locks are acquired on the database until the 
first operation is performed. If the first operation is read-only, then a 
SHARED lock is acquired, otherwise a RESERVED lock is acquired. 

While holding a SHARED lock, this session is only allowed to read but other 
sessions are allowed to read or write. While holding a RESERVED lock, this 
session is allowed to read or write but other sessions are only allowed to 
read. 

Because the lock is only acquired when needed in a deferred transaction, it is 
possible for another session to write to the database first before this session 
has a chance to do anything. 

Corresponds to the SQLite BEGIN DEFERRED transaction mode. 


*int_android.database.sqlite.SQLiteSession.TRANSACTION_MODE_EXCLUSIVE*

Transaction mode: Exclusive. 

When an exclusive transaction begins, the session acquires an EXCLUSIVE lock. 

While holding an EXCLUSIVE lock, this session is allowed to read or write but 
no other sessions are allowed to access the database. 

Corresponds to the SQLite BEGIN EXCLUSIVE transaction mode. 


*int_android.database.sqlite.SQLiteSession.TRANSACTION_MODE_IMMEDIATE*

Transaction mode: Immediate. 

When an immediate transaction begins, the session acquires a RESERVED lock. 

While holding a RESERVED lock, this session is allowed to read or write but 
other sessions are only allowed to read. 

Corresponds to the SQLite BEGIN IMMEDIATE transaction mode. 



*android.database.sqlite.SQLiteSession(SQLiteConnectionPool)*

public SQLiteSession(android.database.sqlite.SQLiteConnectionPool connectionPool)

Creates a session bound to the specified connection pool. 

    connectionPool - The connection pool. 

*android.database.sqlite.SQLiteSession.beginTransaction(int,SQLiteTransactionListener,int,CancellationSignal)*

public void beginTransaction(
  int transactionMode,
  android.database.sqlite.SQLiteTransactionListener transactionListener,
  int connectionFlags,
  android.os.CancellationSignal cancellationSignal)

Begins a transaction. 

Transactions may nest. If the transaction is not in progress, then a database 
connection is obtained and a new transaction is started. Otherwise, a nested 
transaction is started. 

Each call to (|android.database.sqlite.SQLiteSession|) must be matched exactly 
by a call to (|android.database.sqlite.SQLiteSession|) . To mark a transaction 
as successful, call (|android.database.sqlite.SQLiteSession|) before calling 
(|android.database.sqlite.SQLiteSession|) . If the transaction is not 
successful, or if any of its nested transactions were not successful, then the 
entire transaction will be rolled back when the outermost transaction is ended. 


    transactionMode - The transaction mode. One of: {@link #TRANSACTION_MODE_DEFERRED}, {@link 
       #TRANSACTION_MODE_IMMEDIATE}, or {@link #TRANSACTION_MODE_EXCLUSIVE}. 
       Ignored when creating a nested transaction. 
    transactionListener - The transaction listener, or null if none. 
    connectionFlags - The connection flags to use if a connection must be acquired by this operation. 
       Refer to {@link SQLiteConnectionPool}. 
    cancellationSignal - A signal to cancel the operation in progress, or null if none. 

*android.database.sqlite.SQLiteSession.endTransaction(CancellationSignal)*

public void endTransaction(android.os.CancellationSignal cancellationSignal)

Ends the current transaction and commits or rolls back changes. 

If this is the outermost transaction (not nested within any other transaction), 
then the changes are committed if (|android.database.sqlite.SQLiteSession|) was 
called or rolled back otherwise. 

This method must be called exactly once for each call to 
(|android.database.sqlite.SQLiteSession|) . 


    cancellationSignal - A signal to cancel the operation in progress, or null if none. 

*android.database.sqlite.SQLiteSession.execute(String,Object[],int,CancellationSignal)*

public void execute(
  java.lang.String sql,
  java.lang.Object[] bindArgs,
  int connectionFlags,
  android.os.CancellationSignal cancellationSignal)

Executes a statement that does not return a result. 


    sql - The SQL statement to execute. 
    bindArgs - The arguments to bind, or null if none. 
    connectionFlags - The connection flags to use if a connection must be acquired by this operation. 
       Refer to {@link SQLiteConnectionPool}. 
    cancellationSignal - A signal to cancel the operation in progress, or null if none. 

*android.database.sqlite.SQLiteSession.executeForBlobFileDescriptor(String,Object[],int,CancellationSignal)*

public |android.os.ParcelFileDescriptor| executeForBlobFileDescriptor(
  java.lang.String sql,
  java.lang.Object[] bindArgs,
  int connectionFlags,
  android.os.CancellationSignal cancellationSignal)

Executes a statement that returns a single BLOB result as a file descriptor to 
a shared memory region. 


    sql - The SQL statement to execute. 
    bindArgs - The arguments to bind, or null if none. 
    connectionFlags - The connection flags to use if a connection must be acquired by this operation. 
       Refer to {@link SQLiteConnectionPool}. 
    cancellationSignal - A signal to cancel the operation in progress, or null if none. 

    Returns: The file descriptor for a shared memory region that contains the value of the 
             first column in the first row of the result set as a BLOB, or null 
             if none. 

*android.database.sqlite.SQLiteSession.executeForChangedRowCount(String,Object[],int,CancellationSignal)*

public int executeForChangedRowCount(
  java.lang.String sql,
  java.lang.Object[] bindArgs,
  int connectionFlags,
  android.os.CancellationSignal cancellationSignal)

Executes a statement that returns a count of the number of rows that were 
changed. Use for UPDATE or DELETE SQL statements. 


    sql - The SQL statement to execute. 
    bindArgs - The arguments to bind, or null if none. 
    connectionFlags - The connection flags to use if a connection must be acquired by this operation. 
       Refer to {@link SQLiteConnectionPool}. 
    cancellationSignal - A signal to cancel the operation in progress, or null if none. 

    Returns: The number of rows that were changed. 

*android.database.sqlite.SQLiteSession.executeForCursorWindow(String,Object[],CursorWindow,int,int,boolean,int,CancellationSignal)*

public int executeForCursorWindow(
  java.lang.String sql,
  java.lang.Object[] bindArgs,
  android.database.CursorWindow window,
  int startPos,
  int requiredPos,
  boolean countAllRows,
  int connectionFlags,
  android.os.CancellationSignal cancellationSignal)

Executes a statement and populates the specified 
(|android.database.CursorWindow|) with a range of results. Returns the number 
of rows that were counted during query execution. 


    sql - The SQL statement to execute. 
    bindArgs - The arguments to bind, or null if none. 
    window - The cursor window to clear and fill. 
    startPos - The start position for filling the window. 
    requiredPos - The position of a row that MUST be in the window. If it won't fit, then the 
       query should discard part of what it filled so that it does. Must be 
       greater than or equal to startPos. 
    countAllRows - True to count all rows that the query would return regagless of whether they 
       fit in the window. 
    connectionFlags - The connection flags to use if a connection must be acquired by this operation. 
       Refer to {@link SQLiteConnectionPool}. 
    cancellationSignal - A signal to cancel the operation in progress, or null if none. 

    Returns: The number of rows that were counted during query execution. Might not be all 
             rows in the result set unless countAllRows is true. 

*android.database.sqlite.SQLiteSession.executeForLastInsertedRowId(String,Object[],int,CancellationSignal)*

public long executeForLastInsertedRowId(
  java.lang.String sql,
  java.lang.Object[] bindArgs,
  int connectionFlags,
  android.os.CancellationSignal cancellationSignal)

Executes a statement that returns the row id of the last row inserted by the 
statement. Use for INSERT SQL statements. 


    sql - The SQL statement to execute. 
    bindArgs - The arguments to bind, or null if none. 
    connectionFlags - The connection flags to use if a connection must be acquired by this operation. 
       Refer to {@link SQLiteConnectionPool}. 
    cancellationSignal - A signal to cancel the operation in progress, or null if none. 

    Returns: The row id of the last row that was inserted, or 0 if none. 

*android.database.sqlite.SQLiteSession.executeForLong(String,Object[],int,CancellationSignal)*

public long executeForLong(
  java.lang.String sql,
  java.lang.Object[] bindArgs,
  int connectionFlags,
  android.os.CancellationSignal cancellationSignal)

Executes a statement that returns a single long result. 


    sql - The SQL statement to execute. 
    bindArgs - The arguments to bind, or null if none. 
    connectionFlags - The connection flags to use if a connection must be acquired by this operation. 
       Refer to {@link SQLiteConnectionPool}. 
    cancellationSignal - A signal to cancel the operation in progress, or null if none. 

    Returns: The value of the first column in the first row of the result set as a long, or 
             zero if none. 

*android.database.sqlite.SQLiteSession.executeForString(String,Object[],int,CancellationSignal)*

public |java.lang.String| executeForString(
  java.lang.String sql,
  java.lang.Object[] bindArgs,
  int connectionFlags,
  android.os.CancellationSignal cancellationSignal)

Executes a statement that returns a single (|java.lang.String|) result. 


    sql - The SQL statement to execute. 
    bindArgs - The arguments to bind, or null if none. 
    connectionFlags - The connection flags to use if a connection must be acquired by this operation. 
       Refer to {@link SQLiteConnectionPool}. 
    cancellationSignal - A signal to cancel the operation in progress, or null if none. 

    Returns: The value of the first column in the first row of the result set as a String, 
             or null if none. 

*android.database.sqlite.SQLiteSession.hasConnection()*

public boolean hasConnection()

Returns true if the session has an active database connection. 



    Returns: True if the session has an active database connection. 

*android.database.sqlite.SQLiteSession.hasNestedTransaction()*

public boolean hasNestedTransaction()

Returns true if the session has a nested transaction in progress. 



    Returns: True if the session has a nested transaction in progress. 

*android.database.sqlite.SQLiteSession.hasTransaction()*

public boolean hasTransaction()

Returns true if the session has a transaction in progress. 



    Returns: True if the session has a transaction in progress. 

*android.database.sqlite.SQLiteSession.prepare(String,int,CancellationSignal,SQLiteStatementInfo)*

public void prepare(
  java.lang.String sql,
  int connectionFlags,
  android.os.CancellationSignal cancellationSignal,
  android.database.sqlite.SQLiteStatementInfo outStatementInfo)

Prepares a statement for execution but does not bind its parameters or execute 
it. 

This method can be used to check for syntax errors during compilation prior to 
execution of the statement. If theoutStatementInfoargument is not null, the 
provided (|android.database.sqlite.SQLiteStatementInfo|) object is populated 
with information about the statement. 

A prepared statement makes no reference to the arguments that may eventually be 
bound to it, consequently it it possible to cache certain prepared statements 
such as SELECT or INSERT/UPDATE statements. If the statement is cacheable, then 
it will be stored in the cache for later and reused if possible. 


    sql - The SQL statement to prepare. 
    connectionFlags - The connection flags to use if a connection must be acquired by this operation. 
       Refer to {@link SQLiteConnectionPool}. 
    cancellationSignal - A signal to cancel the operation in progress, or null if none. 
    outStatementInfo - The {@link SQLiteStatementInfo} object to populate with information about the 
       statement, or null if none. 

*android.database.sqlite.SQLiteSession.setTransactionSuccessful()*

public void setTransactionSuccessful()

Marks the current transaction as having completed successfully. 

This method can be called at most once between 
(|android.database.sqlite.SQLiteSession|) and 
(|android.database.sqlite.SQLiteSession|) to indicate that the changes made by 
the transaction should be committed. If this method is not called, the changes 
will be rolled back when the transaction is ended. 



*android.database.sqlite.SQLiteSession.yieldTransaction(long,boolean,CancellationSignal)*

public boolean yieldTransaction(
  long sleepAfterYieldDelayMillis,
  boolean throwIfUnsafe,
  android.os.CancellationSignal cancellationSignal)

Temporarily ends a transaction to let other threads have use of the database. 
Begins a new transaction after a specified delay. 

If there are other threads waiting to acquire connections, then the current 
transaction is committed and the database connection is released. After a short 
delay, a new transaction is started. 

The transaction is assumed to be successful so far. Do not call 
(|android.database.sqlite.SQLiteSession|) before calling this method. This 
method will fail if the transaction has already been marked successful. 

The changes that were committed by a yield cannot be rolled back later. 

Before this method was called, there must already have been a transaction in 
progress. When this method returns, there will still be a transaction in 
progress, either the same one as before or a new one if the transaction was 
actually yielded. 

This method should not be called when there is a nested transaction in progress 
because it is not possible to yield a nested transaction. If throwIfNested is 
true, then attempting to yield a nested transaction will throw 
(|java.lang.IllegalStateException|) , otherwise the method will return false in 
that case. 

If there is no nested transaction in progress but a previous nested transaction 
failed, then the transaction is not yielded (because it must be rolled back) 
and this method returns false. 


    sleepAfterYieldDelayMillis - A delay time to wait after yielding the database connection to allow other 
       threads some time to run. If the value is less than or equal to zero, 
       there will be no additional delay beyond the time it will take to begin 
       a new transaction. 
    throwIfUnsafe - If true, then instead of returning false when no transaction is in progress, a 
       nested transaction is in progress, or when the transaction has already 
       been marked successful, throws {@link IllegalStateException}. 
    cancellationSignal - A signal to cancel the operation in progress, or null if none. 

    Returns: True if the transaction was actually yielded. 


