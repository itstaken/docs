*android.net.sip.SipManager* *SipManager* 

public class SipManager
  extends    |java.lang.Object|

|android.net.sip.SipManager_Description|
|android.net.sip.SipManager_Fields|
|android.net.sip.SipManager_Constructors|
|android.net.sip.SipManager_Methods|

================================================================================

*android.net.sip.SipManager_Fields*
|java.lang.String_android.net.sip.SipManager.EXTRA_CALL_ID|
|java.lang.String_android.net.sip.SipManager.EXTRA_OFFER_SD|
|int_android.net.sip.SipManager.INCOMING_CALL_RESULT_CODE|

*android.net.sip.SipManager_Methods*
|android.net.sip.SipManager.close(String)|
|android.net.sip.SipManager.createSipSession(SipProfile,SipSession.Listener)|
|android.net.sip.SipManager.getCallId(Intent)|
|android.net.sip.SipManager.getOfferSessionDescription(Intent)|
|android.net.sip.SipManager.getSessionFor(Intent)|
|android.net.sip.SipManager.isApiSupported(Context)|
|android.net.sip.SipManager.isIncomingCallIntent(Intent)|
|android.net.sip.SipManager.isOpened(String)|
|android.net.sip.SipManager.isRegistered(String)|
|android.net.sip.SipManager.isSipWifiOnly(Context)|
|android.net.sip.SipManager.isVoipSupported(Context)|
|android.net.sip.SipManager.makeAudioCall(SipProfile,SipProfile,SipAudioCall.Listener,int)|
|android.net.sip.SipManager.makeAudioCall(String,String,SipAudioCall.Listener,int)|
|android.net.sip.SipManager.newInstance(Context)|
|android.net.sip.SipManager.open(SipProfile)|
|android.net.sip.SipManager.open(SipProfile,PendingIntent,SipRegistrationListener)|
|android.net.sip.SipManager.register(SipProfile,int,SipRegistrationListener)|
|android.net.sip.SipManager.setRegistrationListener(String,SipRegistrationListener)|
|android.net.sip.SipManager.takeAudioCall(Intent,SipAudioCall.Listener)|
|android.net.sip.SipManager.unregister(SipProfile,SipRegistrationListener)|

*android.net.sip.SipManager_Description*





*java.lang.String_android.net.sip.SipManager.EXTRA_CALL_ID*




*java.lang.String_android.net.sip.SipManager.EXTRA_OFFER_SD*




*int_android.net.sip.SipManager.INCOMING_CALL_RESULT_CODE*





*android.net.sip.SipManager.close(String)*

public void close(java.lang.String localProfileUri)
  throws |android.net.sip.SipException|
         




*android.net.sip.SipManager.createSipSession(SipProfile,SipSession.Listener)*

public |android.net.sip.SipSession| createSipSession(
  android.net.sip.SipProfile localProfile,
  android.net.sip.SipSession.Listener listener)
  throws |android.net.sip.SipException|
         




*android.net.sip.SipManager.getCallId(Intent)*

public static |java.lang.String| getCallId(android.content.Intent incomingCallIntent)





*android.net.sip.SipManager.getOfferSessionDescription(Intent)*

public static |java.lang.String| getOfferSessionDescription(android.content.Intent incomingCallIntent)





*android.net.sip.SipManager.getSessionFor(Intent)*

public |android.net.sip.SipSession| getSessionFor(android.content.Intent incomingCallIntent)
  throws |android.net.sip.SipException|
         




*android.net.sip.SipManager.isApiSupported(Context)*

public static boolean isApiSupported(android.content.Context context)





*android.net.sip.SipManager.isIncomingCallIntent(Intent)*

public static boolean isIncomingCallIntent(android.content.Intent intent)





*android.net.sip.SipManager.isOpened(String)*

public boolean isOpened(java.lang.String localProfileUri)
  throws |android.net.sip.SipException|
         




*android.net.sip.SipManager.isRegistered(String)*

public boolean isRegistered(java.lang.String localProfileUri)
  throws |android.net.sip.SipException|
         




*android.net.sip.SipManager.isSipWifiOnly(Context)*

public static boolean isSipWifiOnly(android.content.Context context)





*android.net.sip.SipManager.isVoipSupported(Context)*

public static boolean isVoipSupported(android.content.Context context)





*android.net.sip.SipManager.makeAudioCall(SipProfile,SipProfile,SipAudioCall.Listener,int)*

public |android.net.sip.SipAudioCall| makeAudioCall(
  android.net.sip.SipProfile localProfile,
  android.net.sip.SipProfile peerProfile,
  android.net.sip.SipAudioCall.Listener listener,
  int timeout)
  throws |android.net.sip.SipException|
         




*android.net.sip.SipManager.makeAudioCall(String,String,SipAudioCall.Listener,int)*

public |android.net.sip.SipAudioCall| makeAudioCall(
  java.lang.String localProfileUri,
  java.lang.String peerProfileUri,
  android.net.sip.SipAudioCall.Listener listener,
  int timeout)
  throws |android.net.sip.SipException|
         




*android.net.sip.SipManager.newInstance(Context)*

public static |android.net.sip.SipManager| newInstance(android.content.Context context)





*android.net.sip.SipManager.open(SipProfile)*

public void open(android.net.sip.SipProfile localProfile)
  throws |android.net.sip.SipException|
         




*android.net.sip.SipManager.open(SipProfile,PendingIntent,SipRegistrationListener)*

public void open(
  android.net.sip.SipProfile localProfile,
  android.app.PendingIntent incomingCallPendingIntent,
  android.net.sip.SipRegistrationListener listener)
  throws |android.net.sip.SipException|
         




*android.net.sip.SipManager.register(SipProfile,int,SipRegistrationListener)*

public void register(
  android.net.sip.SipProfile localProfile,
  int expiryTime,
  android.net.sip.SipRegistrationListener listener)
  throws |android.net.sip.SipException|
         




*android.net.sip.SipManager.setRegistrationListener(String,SipRegistrationListener)*

public void setRegistrationListener(
  java.lang.String localProfileUri,
  android.net.sip.SipRegistrationListener listener)
  throws |android.net.sip.SipException|
         




*android.net.sip.SipManager.takeAudioCall(Intent,SipAudioCall.Listener)*

public |android.net.sip.SipAudioCall| takeAudioCall(
  android.content.Intent incomingCallIntent,
  android.net.sip.SipAudioCall.Listener listener)
  throws |android.net.sip.SipException|
         




*android.net.sip.SipManager.unregister(SipProfile,SipRegistrationListener)*

public void unregister(
  android.net.sip.SipProfile localProfile,
  android.net.sip.SipRegistrationListener listener)
  throws |android.net.sip.SipException|
         





