*android.view.WindowManagerGlobal* *WindowManagerGlobal* Provides low-level comm

public final class WindowManagerGlobal
  extends    |java.lang.Object|

|android.view.WindowManagerGlobal_Description|
|android.view.WindowManagerGlobal_Fields|
|android.view.WindowManagerGlobal_Constructors|
|android.view.WindowManagerGlobal_Methods|

================================================================================

*android.view.WindowManagerGlobal_Fields*
|int_android.view.WindowManagerGlobal.ADD_APP_EXITING|
|int_android.view.WindowManagerGlobal.ADD_BAD_APP_TOKEN|
|int_android.view.WindowManagerGlobal.ADD_BAD_SUBWINDOW_TOKEN|
|int_android.view.WindowManagerGlobal.ADD_DUPLICATE_ADD|
|int_android.view.WindowManagerGlobal.ADD_FLAG_APP_VISIBLE|
|int_android.view.WindowManagerGlobal.ADD_FLAG_IN_TOUCH_MODE|
|int_android.view.WindowManagerGlobal.ADD_INVALID_DISPLAY|
|int_android.view.WindowManagerGlobal.ADD_MULTIPLE_SINGLETON|
|int_android.view.WindowManagerGlobal.ADD_NOT_APP_TOKEN|
|int_android.view.WindowManagerGlobal.ADD_OKAY|
|int_android.view.WindowManagerGlobal.ADD_PERMISSION_DENIED|
|int_android.view.WindowManagerGlobal.ADD_STARTING_NOT_NEEDED|
|int_android.view.WindowManagerGlobal.RELAYOUT_DEFER_SURFACE_DESTROY|
|int_android.view.WindowManagerGlobal.RELAYOUT_INSETS_PENDING|
|int_android.view.WindowManagerGlobal.RELAYOUT_RES_ANIMATING|
|int_android.view.WindowManagerGlobal.RELAYOUT_RES_FIRST_TIME|
|int_android.view.WindowManagerGlobal.RELAYOUT_RES_IN_TOUCH_MODE|
|int_android.view.WindowManagerGlobal.RELAYOUT_RES_SURFACE_CHANGED|

*android.view.WindowManagerGlobal_Methods*
|android.view.WindowManagerGlobal.addView(View,ViewGroup.LayoutParams,Display,Window)|
|android.view.WindowManagerGlobal.changeCanvasOpacity(IBinder,boolean)|
|android.view.WindowManagerGlobal.closeAll(IBinder,String,String)|
|android.view.WindowManagerGlobal.dumpGfxInfo(FileDescriptor)|
|android.view.WindowManagerGlobal.endTrimMemory()|
|android.view.WindowManagerGlobal.getInstance()|
|android.view.WindowManagerGlobal.getRootView(String)|
|android.view.WindowManagerGlobal.getViewRootNames()|
|android.view.WindowManagerGlobal.getWindowManagerService()|
|android.view.WindowManagerGlobal.getWindowSession()|
|android.view.WindowManagerGlobal.peekWindowSession()|
|android.view.WindowManagerGlobal.removeView(View,boolean)|
|android.view.WindowManagerGlobal.reportNewConfiguration(Configuration)|
|android.view.WindowManagerGlobal.setStoppedState(IBinder,boolean)|
|android.view.WindowManagerGlobal.startTrimMemory(int)|
|android.view.WindowManagerGlobal.trimLocalMemory()|
|android.view.WindowManagerGlobal.updateViewLayout(View,ViewGroup.LayoutParams)|

*android.view.WindowManagerGlobal_Description*

Provides low-level communication with the system window manager for operations 
that are not associated with any particular context. 

This class is only used internally to implement global functions where the 
caller already knows the display and relevant compatibility information for the 
operation. For most purposes, you should use (|android.view.WindowManager|) 
instead since it is bound to a context. 



*int_android.view.WindowManagerGlobal.ADD_APP_EXITING*




*int_android.view.WindowManagerGlobal.ADD_BAD_APP_TOKEN*




*int_android.view.WindowManagerGlobal.ADD_BAD_SUBWINDOW_TOKEN*




*int_android.view.WindowManagerGlobal.ADD_DUPLICATE_ADD*




*int_android.view.WindowManagerGlobal.ADD_FLAG_APP_VISIBLE*




*int_android.view.WindowManagerGlobal.ADD_FLAG_IN_TOUCH_MODE*




*int_android.view.WindowManagerGlobal.ADD_INVALID_DISPLAY*




*int_android.view.WindowManagerGlobal.ADD_MULTIPLE_SINGLETON*




*int_android.view.WindowManagerGlobal.ADD_NOT_APP_TOKEN*




*int_android.view.WindowManagerGlobal.ADD_OKAY*




*int_android.view.WindowManagerGlobal.ADD_PERMISSION_DENIED*




*int_android.view.WindowManagerGlobal.ADD_STARTING_NOT_NEEDED*




*int_android.view.WindowManagerGlobal.RELAYOUT_DEFER_SURFACE_DESTROY*

Flag for relayout: the client may be currently using the current surface, so if 
it is to be destroyed as a part of the relayout the destroy must be deferred 
until later. The client will call performDeferredDestroy() when it is okay. 


*int_android.view.WindowManagerGlobal.RELAYOUT_INSETS_PENDING*

Flag for relayout: the client will be later giving internal insets; as a 
result, the window will not impact other window layouts until the insets are 
given. 


*int_android.view.WindowManagerGlobal.RELAYOUT_RES_ANIMATING*

The window manager is currently animating. It will call IWindow.doneAnimating() 
when done. 


*int_android.view.WindowManagerGlobal.RELAYOUT_RES_FIRST_TIME*

This is the first time the window is being drawn, so the client must call 
drawingFinished() when done 


*int_android.view.WindowManagerGlobal.RELAYOUT_RES_IN_TOUCH_MODE*

The user is navigating with keys (not the touch screen), so navigational focus 
should be shown. 


*int_android.view.WindowManagerGlobal.RELAYOUT_RES_SURFACE_CHANGED*

The window manager has changed the surface from the last call. 



*android.view.WindowManagerGlobal.addView(View,ViewGroup.LayoutParams,Display,Window)*

public void addView(
  android.view.View view,
  android.view.ViewGroup.LayoutParams params,
  android.view.Display display,
  android.view.Window parentWindow)





*android.view.WindowManagerGlobal.changeCanvasOpacity(IBinder,boolean)*

public void changeCanvasOpacity(
  android.os.IBinder token,
  boolean opaque)





*android.view.WindowManagerGlobal.closeAll(IBinder,String,String)*

public void closeAll(
  android.os.IBinder token,
  java.lang.String who,
  java.lang.String what)





*android.view.WindowManagerGlobal.dumpGfxInfo(FileDescriptor)*

public void dumpGfxInfo(java.io.FileDescriptor fd)





*android.view.WindowManagerGlobal.endTrimMemory()*

public void endTrimMemory()





*android.view.WindowManagerGlobal.getInstance()*

public static |android.view.WindowManagerGlobal| getInstance()





*android.view.WindowManagerGlobal.getRootView(String)*

public |android.view.View| getRootView(java.lang.String name)





*android.view.WindowManagerGlobal.getViewRootNames()*

public |java.lang.String|[] getViewRootNames()





*android.view.WindowManagerGlobal.getWindowManagerService()*

public static IWindowManager getWindowManagerService()





*android.view.WindowManagerGlobal.getWindowSession()*

public static IWindowSession getWindowSession()





*android.view.WindowManagerGlobal.peekWindowSession()*

public static IWindowSession peekWindowSession()





*android.view.WindowManagerGlobal.removeView(View,boolean)*

public void removeView(
  android.view.View view,
  boolean immediate)





*android.view.WindowManagerGlobal.reportNewConfiguration(Configuration)*

public void reportNewConfiguration(android.content.res.Configuration config)





*android.view.WindowManagerGlobal.setStoppedState(IBinder,boolean)*

public void setStoppedState(
  android.os.IBinder token,
  boolean stopped)





*android.view.WindowManagerGlobal.startTrimMemory(int)*

public void startTrimMemory(int level)





*android.view.WindowManagerGlobal.trimLocalMemory()*

public void trimLocalMemory()





*android.view.WindowManagerGlobal.updateViewLayout(View,ViewGroup.LayoutParams)*

public void updateViewLayout(
  android.view.View view,
  android.view.ViewGroup.LayoutParams params)






