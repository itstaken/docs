*android.os.Process* *Process* Tools for managing OS processes.

public class Process
  extends    |java.lang.Object|

|android.os.Process_Description|
|android.os.Process_Fields|
|android.os.Process_Constructors|
|android.os.Process_Methods|

================================================================================

*android.os.Process_Fields*
|java.lang.String_android.os.Process.ANDROID_SHARED_MEDIA|
|int_android.os.Process.BLUETOOTH_UID|
|int_android.os.Process.DRM_UID|
|int_android.os.Process.FIRST_APPLICATION_UID|
|int_android.os.Process.FIRST_ISOLATED_UID|
|int_android.os.Process.FIRST_SHARED_APPLICATION_GID|
|java.lang.String_android.os.Process.GOOGLE_SHARED_APP_CONTENT|
|int_android.os.Process.LAST_APPLICATION_UID|
|int_android.os.Process.LAST_ISOLATED_UID|
|int_android.os.Process.LAST_SHARED_APPLICATION_GID|
|int_android.os.Process.LOG_UID|
|int_android.os.Process.MEDIA_RW_GID|
|int_android.os.Process.MEDIA_UID|
|int_android.os.Process.NFC_UID|
|int_android.os.Process.PACKAGE_INFO_GID|
|int_android.os.Process.PHONE_UID|
|int_android.os.Process.PROC_COMBINE|
|int_android.os.Process.PROC_OUT_FLOAT|
|int_android.os.Process.PROC_OUT_LONG|
|int_android.os.Process.PROC_OUT_STRING|
|int_android.os.Process.PROC_PARENS|
|int_android.os.Process.PROC_QUOTES|
|int_android.os.Process.PROC_SPACE_TERM|
|int_android.os.Process.PROC_TAB_TERM|
|int_android.os.Process.PROC_TERM_MASK|
|int_android.os.Process.PROC_ZERO_TERM|
|int_android.os.Process.SCHED_BATCH|
|int_android.os.Process.SCHED_FIFO|
|int_android.os.Process.SCHED_IDLE|
|int_android.os.Process.SCHED_OTHER|
|int_android.os.Process.SCHED_RR|
|int_android.os.Process.SHELL_UID|
|int_android.os.Process.SIGNAL_KILL|
|int_android.os.Process.SIGNAL_QUIT|
|int_android.os.Process.SIGNAL_USR1|
|int_android.os.Process.SYSTEM_UID|
|int_android.os.Process.THREAD_GROUP_AUDIO_APP|
|int_android.os.Process.THREAD_GROUP_AUDIO_SYS|
|int_android.os.Process.THREAD_GROUP_BG_NONINTERACTIVE|
|int_android.os.Process.THREAD_GROUP_DEFAULT|
|int_android.os.Process.THREAD_GROUP_SYSTEM|
|int_android.os.Process.THREAD_PRIORITY_AUDIO|
|int_android.os.Process.THREAD_PRIORITY_BACKGROUND|
|int_android.os.Process.THREAD_PRIORITY_DEFAULT|
|int_android.os.Process.THREAD_PRIORITY_DISPLAY|
|int_android.os.Process.THREAD_PRIORITY_FOREGROUND|
|int_android.os.Process.THREAD_PRIORITY_LESS_FAVORABLE|
|int_android.os.Process.THREAD_PRIORITY_LOWEST|
|int_android.os.Process.THREAD_PRIORITY_MORE_FAVORABLE|
|int_android.os.Process.THREAD_PRIORITY_URGENT_AUDIO|
|int_android.os.Process.THREAD_PRIORITY_URGENT_DISPLAY|
|int_android.os.Process.VPN_UID|
|int_android.os.Process.WIFI_UID|

*android.os.Process_Constructors*
|android.os.Process()|

*android.os.Process_Methods*
|android.os.Process.getElapsedCpuTime()|Returns elapsed milliseconds of the tim
|android.os.Process.getFreeMemory()|
|android.os.Process.getGidForName(String)|Returns the GID assigned to a particu
|android.os.Process.getParentPid(int)|Returns the parent process id for a curre
|android.os.Process.getPids(String,int[])|
|android.os.Process.getPidsForCommands(String[])|
|android.os.Process.getProcessGroup(int)|Return the scheduling group of request
|android.os.Process.getPss(int)|Gets the total Pss value for a given process, i
|android.os.Process.getThreadGroupLeader(int)|Returns the thread group leader i
|android.os.Process.getThreadPriority(int)|Return the current priority of a thr
|android.os.Process.getTotalMemory()|
|android.os.Process.getUidForName(String)|Returns the UID assigned to a particu
|android.os.Process.getUidForPid(int)|Returns a uid for a currently running pro
|android.os.Process.isIsolated()|Returns whether the current process is in an i
|android.os.Process.killProcess(int)|Kill the process with the given PID.
|android.os.Process.killProcessQuiet(int)|
|android.os.Process.myPid()|Returns the identifier of this process, which can b
|android.os.Process.myPpid()|Returns the identifier of this process' parent.
|android.os.Process.myTid()|Returns the identifier of the calling thread, which
|android.os.Process.myUid()|Returns the identifier of this process's uid.
|android.os.Process.myUserHandle()|Returns this process's user handle.
|android.os.Process.parseProcLine(byte[],int,int,int[],String[],long[],float[])|
|android.os.Process.readProcFile(String,int[],String[],long[],float[])|
|android.os.Process.readProcLines(String,String[],long[])|
|android.os.Process.sendSignal(int,int)|Send a signal to the given process.
|android.os.Process.sendSignalQuiet(int,int)|
|android.os.Process.setArgV0(String)|Change this process's argv[0] parameter.
|android.os.Process.setCanSelfBackground(boolean)|Call with 'false' to cause fu
|android.os.Process.setGid(int)|
|android.os.Process.setOomAdj(int,int)|Set the out-of-memory badness adjustment
|android.os.Process.setProcessGroup(int,int)|Sets the scheduling group for a pr
|android.os.Process.setSwappiness(int,boolean)|Adjust the swappiness level for 
|android.os.Process.setThreadGroup(int,int)|Sets the scheduling group for a thr
|android.os.Process.setThreadPriority(int)|Set the priority of the calling thre
|android.os.Process.setThreadPriority(int,int)|Set the priority of a thread, ba
|android.os.Process.setThreadScheduler(int,int,int)|Set the scheduling policy a
|android.os.Process.setUid(int)|
|android.os.Process.start(String,String,int,int,int[],int,int,int,String,String[])|
|android.os.Process.supportsProcesses()|Determine whether the current environme

*android.os.Process_Description*

Tools for managing OS processes. 



*java.lang.String_android.os.Process.ANDROID_SHARED_MEDIA*

Name of a process for running the platform's media services. 


*int_android.os.Process.BLUETOOTH_UID*

Defines the UID/GID for the Bluetooth service process. 


*int_android.os.Process.DRM_UID*

Defines the UID/GID for the DRM process. 


*int_android.os.Process.FIRST_APPLICATION_UID*

Defines the start of a range of UIDs (and GIDs), going from this number to 
(|android.os.Process|) that are reserved for assigning to applications. 


*int_android.os.Process.FIRST_ISOLATED_UID*

First uid used for fully isolated sandboxed processes (with no permissions of 
their own) 


*int_android.os.Process.FIRST_SHARED_APPLICATION_GID*

First gid for applications to share resources. Used when forward-locking is 
enabled but all UserHandles need to be able to read the resources. 


*java.lang.String_android.os.Process.GOOGLE_SHARED_APP_CONTENT*

Name of the process that Google content providers can share. 


*int_android.os.Process.LAST_APPLICATION_UID*

Last of application-specific UIDs starting at (|android.os.Process|) . 


*int_android.os.Process.LAST_ISOLATED_UID*

Last uid used for fully isolated sandboxed processes (with no permissions of 
their own) 


*int_android.os.Process.LAST_SHARED_APPLICATION_GID*

Last gid for applications to share resources. Used when forward-locking is 
enabled but all UserHandles need to be able to read the resources. 


*int_android.os.Process.LOG_UID*

Defines the UID/GID for the log group. 


*int_android.os.Process.MEDIA_RW_GID*

Defines the GID for the group that allows write access to the internal media 
storage. 


*int_android.os.Process.MEDIA_UID*

Defines the UID/GID for the mediaserver process. 


*int_android.os.Process.NFC_UID*

Defines the UID/GID for the NFC service process. 


*int_android.os.Process.PACKAGE_INFO_GID*

Access to installed package details 


*int_android.os.Process.PHONE_UID*

Defines the UID/GID under which the telephony code runs. 


*int_android.os.Process.PROC_COMBINE*




*int_android.os.Process.PROC_OUT_FLOAT*




*int_android.os.Process.PROC_OUT_LONG*




*int_android.os.Process.PROC_OUT_STRING*




*int_android.os.Process.PROC_PARENS*




*int_android.os.Process.PROC_QUOTES*




*int_android.os.Process.PROC_SPACE_TERM*




*int_android.os.Process.PROC_TAB_TERM*




*int_android.os.Process.PROC_TERM_MASK*




*int_android.os.Process.PROC_ZERO_TERM*




*int_android.os.Process.SCHED_BATCH*

Batch scheduling policy 


*int_android.os.Process.SCHED_FIFO*

First-In First-Out scheduling policy 


*int_android.os.Process.SCHED_IDLE*

Idle scheduling policy 


*int_android.os.Process.SCHED_OTHER*

Default scheduling policy 


*int_android.os.Process.SCHED_RR*

Round-Robin scheduling policy 


*int_android.os.Process.SHELL_UID*

Defines the UID/GID for the user shell. 


*int_android.os.Process.SIGNAL_KILL*




*int_android.os.Process.SIGNAL_QUIT*




*int_android.os.Process.SIGNAL_USR1*




*int_android.os.Process.SYSTEM_UID*

Defines the UID/GID under which system code runs. 


*int_android.os.Process.THREAD_GROUP_AUDIO_APP*

Application audio thread group. 


*int_android.os.Process.THREAD_GROUP_AUDIO_SYS*

System audio thread group. 


*int_android.os.Process.THREAD_GROUP_BG_NONINTERACTIVE*

Background thread group - All threads in this group are scheduled with a 
reduced share of the CPU. Value is same as constant SP_BACKGROUND of enum 
SchedPolicy. FIXME rename to THREAD_GROUP_BACKGROUND. 


*int_android.os.Process.THREAD_GROUP_DEFAULT*

Default thread group - has meaning with setProcessGroup() only, cannot be used 
with setThreadGroup(). When used with setProcessGroup(), the group of each 
thread in the process is conditionally changed based on that thread's current 
priority, as follows: threads with priority numerically less than 
THREAD_PRIORITY_BACKGROUND are moved to foreground thread group. All other 
threads are left unchanged. 


*int_android.os.Process.THREAD_GROUP_SYSTEM*

System thread group. 


*int_android.os.Process.THREAD_PRIORITY_AUDIO*

Standard priority of audio threads. Applications can not normally change to 
this priority. Use with (|android.os.Process|) and (|android.os.Process|) , not 
with the normal (|java.lang.Thread|) class. 


*int_android.os.Process.THREAD_PRIORITY_BACKGROUND*

Standard priority background threads. This gives your thread a slightly lower 
than normal priority, so that it will have less chance of impacting the 
responsiveness of the user interface. Use with (|android.os.Process|) and 
(|android.os.Process|) , not with the normal (|java.lang.Thread|) class. 


*int_android.os.Process.THREAD_PRIORITY_DEFAULT*

Standard priority of application threads. Use with (|android.os.Process|) and 
(|android.os.Process|) , not with the normal (|java.lang.Thread|) class. 


*int_android.os.Process.THREAD_PRIORITY_DISPLAY*

Standard priority of system display threads, involved in updating the user 
interface. Applications can not normally change to this priority. Use with 
(|android.os.Process|) and (|android.os.Process|) , not with the normal 
(|java.lang.Thread|) class. 


*int_android.os.Process.THREAD_PRIORITY_FOREGROUND*

Standard priority of threads that are currently running a user interface that 
the user is interacting with. Applications can not normally change to this 
priority; the system will automatically adjust your application threads as the 
user moves through the UI. Use with (|android.os.Process|) and 
(|android.os.Process|) , not with the normal (|java.lang.Thread|) class. 


*int_android.os.Process.THREAD_PRIORITY_LESS_FAVORABLE*

Minimum increment to make a priority less favorable. 


*int_android.os.Process.THREAD_PRIORITY_LOWEST*

Lowest available thread priority. Only for those who really, really don't want 
to run if anything else is happening. Use with (|android.os.Process|) and 
(|android.os.Process|) , not with the normal (|java.lang.Thread|) class. 


*int_android.os.Process.THREAD_PRIORITY_MORE_FAVORABLE*

Minimum increment to make a priority more favorable. 


*int_android.os.Process.THREAD_PRIORITY_URGENT_AUDIO*

Standard priority of the most important audio threads. Applications can not 
normally change to this priority. Use with (|android.os.Process|) and 
(|android.os.Process|) , not with the normal (|java.lang.Thread|) class. 


*int_android.os.Process.THREAD_PRIORITY_URGENT_DISPLAY*

Standard priority of the most important display threads, for compositing the 
screen and retrieving input events. Applications can not normally change to 
this priority. Use with (|android.os.Process|) and (|android.os.Process|) , not 
with the normal (|java.lang.Thread|) class. 


*int_android.os.Process.VPN_UID*

Defines the UID/GID for the group that controls VPN services. 


*int_android.os.Process.WIFI_UID*

Defines the UID/GID for the WIFI supplicant process. 



*android.os.Process()*

public Process()




*android.os.Process.getElapsedCpuTime()*

public static final native long getElapsedCpuTime()

Returns elapsed milliseconds of the time this process has run. 



    Returns: Returns the number of milliseconds this process has return. 

*android.os.Process.getFreeMemory()*

public static final native long getFreeMemory()





*android.os.Process.getGidForName(String)*

public static final native int getGidForName(java.lang.String name)

Returns the GID assigned to a particular user name, or -1 if there is none. If 
the given string consists of only numbers, it is converted directly to a gid. 



*android.os.Process.getParentPid(int)*

public static final int getParentPid(int pid)

Returns the parent process id for a currently running process. 


    pid - the process id 

    Returns: the parent process id of the process, or -1 if the process is not running. 

*android.os.Process.getPids(String,int[])*

public static final native int[] getPids(
  java.lang.String path,
  int[] lastArray)





*android.os.Process.getPidsForCommands(String[])*

public static final native int[] getPidsForCommands(java.lang.String[] cmds)





*android.os.Process.getProcessGroup(int)*

public static final native int getProcessGroup(int pid)
  throws |java.lang.IllegalArgumentException|
         |java.lang.SecurityException|
         
Return the scheduling group of requested process. 



*android.os.Process.getPss(int)*

public static final native long getPss(int pid)

Gets the total Pss value for a given process, in bytes. 


    pid - the process to the Pss for 

    Returns: the total Pss value for the given process in bytes, or -1 if the value cannot 
             be determined 

*android.os.Process.getThreadGroupLeader(int)*

public static final int getThreadGroupLeader(int tid)

Returns the thread group leader id for a currently running thread. 


    tid - the thread id 

    Returns: the thread group leader id of the thread, or -1 if the thread is not running. 
             This is same as what getpid(2) would return if called by tid. 

*android.os.Process.getThreadPriority(int)*

public static final native int getThreadPriority(int tid)
  throws |java.lang.IllegalArgumentException|
         
Return the current priority of a thread, based on Linux priorities. 


    tid - The identifier of the thread/process to change. 

    Returns: Returns the current priority, as a Linux priority level, from -20 for highest 
             scheduling priority to 19 for lowest scheduling priority. 

*android.os.Process.getTotalMemory()*

public static final native long getTotalMemory()





*android.os.Process.getUidForName(String)*

public static final native int getUidForName(java.lang.String name)

Returns the UID assigned to a particular user name, or -1 if there is none. If 
the given string consists of only numbers, it is converted directly to a uid. 



*android.os.Process.getUidForPid(int)*

public static final int getUidForPid(int pid)

Returns a uid for a currently running process. 


    pid - the process id 

    Returns: the uid of the process, or -1 if the process is not running. 

*android.os.Process.isIsolated()*

public static final boolean isIsolated()

Returns whether the current process is in an isolated sandbox. 



*android.os.Process.killProcess(int)*

public static final void killProcess(int pid)

Kill the process with the given PID. Note that, though this API allows us to 
request to kill any process based on its PID, the kernel will still impose 
standard restrictions on which PIDs you are actually able to kill. Typically 
this means only the process running the caller's packages/application and any 
additional processes created by that app; packages sharing a common UID will 
also be able to kill each other's processes. 



*android.os.Process.killProcessQuiet(int)*

public static final void killProcessQuiet(int pid)





*android.os.Process.myPid()*

public static final int myPid()

Returns the identifier of this process, which can be used with 
(|android.os.Process|) and (|android.os.Process|) . 



*android.os.Process.myPpid()*

public static final int myPpid()

Returns the identifier of this process' parent. 



*android.os.Process.myTid()*

public static final int myTid()

Returns the identifier of the calling thread, which be used with 
(|android.os.Process|) . 



*android.os.Process.myUid()*

public static final int myUid()

Returns the identifier of this process's uid. This is the kernel uid that the 
process is running under, which is the identity of its app-specific sandbox. It 
is different from (|android.os.Process|) in that a uid identifies a specific 
app sandbox in a specific user. 



*android.os.Process.myUserHandle()*

public static final |android.os.UserHandle| myUserHandle()

Returns this process's user handle. This is the user the process is running 
under. It is distinct from (|android.os.Process|) in that a particular user 
will have multiple distinct apps running under it each with their own uid. 



*android.os.Process.parseProcLine(byte[],int,int,int[],String[],long[],float[])*

public static final native boolean parseProcLine(
  byte[] buffer,
  int startIndex,
  int endIndex,
  int[] format,
  java.lang.String[] outStrings,
  long[] outLongs,
  float[] outFloats)





*android.os.Process.readProcFile(String,int[],String[],long[],float[])*

public static final native boolean readProcFile(
  java.lang.String file,
  int[] format,
  java.lang.String[] outStrings,
  long[] outLongs,
  float[] outFloats)





*android.os.Process.readProcLines(String,String[],long[])*

public static final native void readProcLines(
  java.lang.String path,
  java.lang.String[] reqFields,
  long[] outSizes)





*android.os.Process.sendSignal(int,int)*

public static final native void sendSignal(
  int pid,
  int signal)

Send a signal to the given process. 


    pid - The pid of the target process. 
    signal - The signal to send. 

*android.os.Process.sendSignalQuiet(int,int)*

public static final native void sendSignalQuiet(
  int pid,
  int signal)





*android.os.Process.setArgV0(String)*

public static final native void setArgV0(java.lang.String text)

Change this process's argv[0] parameter. This can be useful to show more 
descriptive information in things like the 'ps' command. 


    text - The new name of this process. 

{@hide} 

*android.os.Process.setCanSelfBackground(boolean)*

public static final native void setCanSelfBackground(boolean backgroundOk)

Call with 'false' to cause future calls to (|android.os.Process|) to throw an 
exception if passed a background-level thread priority. This is only effective 
if the JNI layer is built with GUARD_THREAD_PRIORITY defined to 1. 



*android.os.Process.setGid(int)*

public static final native int setGid(int uid)





*android.os.Process.setOomAdj(int,int)*

public static final native boolean setOomAdj(
  int pid,
  int amt)

Set the out-of-memory badness adjustment for a process. 


    pid - The process identifier to set. 
    amt - Adjustment value -- linux allows -16 to +15. 

    Returns: Returns true if the underlying system supports this feature, else false. 



*android.os.Process.setProcessGroup(int,int)*

public static final native void setProcessGroup(
  int pid,
  int group)
  throws |java.lang.IllegalArgumentException|
         |java.lang.SecurityException|
         
Sets the scheduling group for a process and all child threads 


    pid - The identifier of the process to change. 
    group - The target group for this process from THREAD_GROUP_*. 

*android.os.Process.setSwappiness(int,boolean)*

public static final native boolean setSwappiness(
  int pid,
  boolean is_increased)

Adjust the swappiness level for a process. 


    pid - The process identifier to set. 
    is_increased - Whether swappiness should be increased or default. 

    Returns: Returns true if the underlying system supports this feature, else false. 



*android.os.Process.setThreadGroup(int,int)*

public static final native void setThreadGroup(
  int tid,
  int group)
  throws |java.lang.IllegalArgumentException|
         |java.lang.SecurityException|
         
Sets the scheduling group for a thread. 


    tid - The identifier of the thread to change. 
    group - The target group for this thread from THREAD_GROUP_*. 

*android.os.Process.setThreadPriority(int)*

public static final native void setThreadPriority(int priority)
  throws |java.lang.IllegalArgumentException|
         |java.lang.SecurityException|
         
Set the priority of the calling thread, based on Linux priorities. See 
(|android.os.Process|) for more information. 


    priority - A Linux priority level, from -20 for highest scheduling priority to 19 for 
       lowest scheduling priority. 

*android.os.Process.setThreadPriority(int,int)*

public static final native void setThreadPriority(
  int tid,
  int priority)
  throws |java.lang.IllegalArgumentException|
         |java.lang.SecurityException|
         
Set the priority of a thread, based on Linux priorities. 


    tid - The identifier of the thread/process to change. 
    priority - A Linux priority level, from -20 for highest scheduling priority to 19 for 
       lowest scheduling priority. 

*android.os.Process.setThreadScheduler(int,int,int)*

public static final native void setThreadScheduler(
  int tid,
  int policy,
  int priority)
  throws |java.lang.IllegalArgumentException|
         
Set the scheduling policy and priority of a thread, based on Linux. 


    tid - The identifier of the thread/process to change. 
    policy - A Linux scheduling policy such as SCHED_OTHER etc. 
    priority - A Linux priority level in a range appropriate for the given policy. 

*android.os.Process.setUid(int)*

public static final native int setUid(int uid)





*android.os.Process.start(String,String,int,int,int[],int,int,int,String,String[])*

public static final |android.os.Process.ProcessStartResult| start(
  java.lang.String processClass,
  java.lang.String niceName,
  int uid,
  int gid,
  int[] gids,
  int debugFlags,
  int mountExternal,
  int targetSdkVersion,
  java.lang.String seInfo,
  java.lang.String[] zygoteArgs)

Start a new process. 

If processes are enabled, a new process is created and the static main() 
function of a processClass is executed there. The process will continue running 
after this function returns. 

If processes are not enabled, a new thread in the caller's process is created 
and main() of processClass called there. 

The niceName parameter, if not an empty string, is a custom name to give to the 
process instead of using processClass. This allows you to make easily 
identifyable processes even if you are using the same base processClass to 
start them. 


    processClass - The class to use as the process's main entry point. 
    niceName - A more readable name to use for the process. 
    uid - The user-id under which the process will run. 
    gid - The group-id under which the process will run. 
    gids - Additional group-ids associated with the process. 
    debugFlags - Additional flags. 
    targetSdkVersion - The target SDK version for the app. 
    seInfo - null-ok SE Android information for the new process. 
    zygoteArgs - Additional arguments to supply to the zygote process. 

    Returns: An object that describes the result of the attempt to start the process. 

*android.os.Process.supportsProcesses()*

public static final boolean supportsProcesses()

Determine whether the current environment supports multiple processes. 

    Deprecated: This method always returns true.  Do not use.


    Returns: Returns true if the system can run in multiple processes, else false if 
             everything is running in a single process. 


