*android.database.DatabaseUtils* *DatabaseUtils* Static utility methods for deal

public class DatabaseUtils
  extends    |java.lang.Object|

|android.database.DatabaseUtils_Description|
|android.database.DatabaseUtils_Fields|
|android.database.DatabaseUtils_Constructors|
|android.database.DatabaseUtils_Methods|

================================================================================

*android.database.DatabaseUtils_Fields*
|int_android.database.DatabaseUtils.STATEMENT_ABORT|
|int_android.database.DatabaseUtils.STATEMENT_ATTACH|
|int_android.database.DatabaseUtils.STATEMENT_BEGIN|
|int_android.database.DatabaseUtils.STATEMENT_COMMIT|
|int_android.database.DatabaseUtils.STATEMENT_DDL|
|int_android.database.DatabaseUtils.STATEMENT_OTHER|
|int_android.database.DatabaseUtils.STATEMENT_PRAGMA|
|int_android.database.DatabaseUtils.STATEMENT_SELECT|
|int_android.database.DatabaseUtils.STATEMENT_UNPREPARED|
|int_android.database.DatabaseUtils.STATEMENT_UPDATE|

*android.database.DatabaseUtils_Constructors*
|android.database.DatabaseUtils()|

*android.database.DatabaseUtils_Methods*
|android.database.DatabaseUtils.appendEscapedSQLString(StringBuilder,String)|Ap
|android.database.DatabaseUtils.appendSelectionArgs(String[],String[])|Appends 
|android.database.DatabaseUtils.appendValueToSql(StringBuilder,Object)|Appends 
|android.database.DatabaseUtils.bindObjectToProgram(SQLiteProgram,int,Object)|B
|android.database.DatabaseUtils.blobFileDescriptorForQuery(SQLiteDatabase,String,String[])|
|android.database.DatabaseUtils.blobFileDescriptorForQuery(SQLiteStatement,String[])|
|android.database.DatabaseUtils.concatenateWhere(String,String)|Concatenates tw
|android.database.DatabaseUtils.createDbFromSqlStatements(Context,String,int,String)|
|android.database.DatabaseUtils.cursorDoubleToContentValues(Cursor,String,ContentValues,String)|
|android.database.DatabaseUtils.cursorDoubleToContentValuesIfPresent(Cursor,ContentValues,String)|
|android.database.DatabaseUtils.cursorDoubleToCursorValues(Cursor,String,ContentValues)|
|android.database.DatabaseUtils.cursorFillWindow(Cursor,int,CursorWindow)|Fills
|android.database.DatabaseUtils.cursorFloatToContentValuesIfPresent(Cursor,ContentValues,String)|
|android.database.DatabaseUtils.cursorIntToContentValues(Cursor,String,ContentValues)|
|android.database.DatabaseUtils.cursorIntToContentValues(Cursor,String,ContentValues,String)|
|android.database.DatabaseUtils.cursorIntToContentValuesIfPresent(Cursor,ContentValues,String)|
|android.database.DatabaseUtils.cursorLongToContentValues(Cursor,String,ContentValues)|
|android.database.DatabaseUtils.cursorLongToContentValues(Cursor,String,ContentValues,String)|
|android.database.DatabaseUtils.cursorLongToContentValuesIfPresent(Cursor,ContentValues,String)|
|android.database.DatabaseUtils.cursorPickFillWindowStartPosition(int,int)|Pick
|android.database.DatabaseUtils.cursorRowToContentValues(Cursor,ContentValues)|
|android.database.DatabaseUtils.cursorShortToContentValuesIfPresent(Cursor,ContentValues,String)|
|android.database.DatabaseUtils.cursorStringToContentValues(Cursor,String,ContentValues)|
|android.database.DatabaseUtils.cursorStringToContentValues(Cursor,String,ContentValues,String)|
|android.database.DatabaseUtils.cursorStringToContentValuesIfPresent(Cursor,ContentValues,String)|
|android.database.DatabaseUtils.cursorStringToInsertHelper(Cursor,String,DatabaseUtils.InsertHelper,int)|
|android.database.DatabaseUtils.dumpCurrentRow(Cursor)|Prints the contents of a
|android.database.DatabaseUtils.dumpCurrentRow(Cursor,PrintStream)|Prints the c
|android.database.DatabaseUtils.dumpCurrentRow(Cursor,StringBuilder)|Prints the
|android.database.DatabaseUtils.dumpCurrentRowToString(Cursor)|Dump the content
|android.database.DatabaseUtils.dumpCursor(Cursor)|Prints the contents of a Cur
|android.database.DatabaseUtils.dumpCursor(Cursor,PrintStream)|Prints the conte
|android.database.DatabaseUtils.dumpCursor(Cursor,StringBuilder)|Prints the con
|android.database.DatabaseUtils.dumpCursorToString(Cursor)|Prints the contents 
|android.database.DatabaseUtils.findRowIdColumnIndex(String[])|Returns column i
|android.database.DatabaseUtils.getCollationKey(String)|return the collation ke
|android.database.DatabaseUtils.getHexCollationKey(String)|return the collation
|android.database.DatabaseUtils.getSqlStatementType(String)|Returns one of the 
|android.database.DatabaseUtils.getTypeOfObject(Object)|Returns data type of th
|android.database.DatabaseUtils.longForQuery(SQLiteDatabase,String,String[])|Ut
|android.database.DatabaseUtils.longForQuery(SQLiteStatement,String[])|Utility 
|android.database.DatabaseUtils.queryIsEmpty(SQLiteDatabase,String)|Query the t
|android.database.DatabaseUtils.queryNumEntries(SQLiteDatabase,String)|Query th
|android.database.DatabaseUtils.queryNumEntries(SQLiteDatabase,String,String)|Q
|android.database.DatabaseUtils.queryNumEntries(SQLiteDatabase,String,String,String[])|
|android.database.DatabaseUtils.readExceptionFromParcel(Parcel)|Special functio
|android.database.DatabaseUtils.readExceptionWithFileNotFoundExceptionFromParcel(Parcel)|
|android.database.DatabaseUtils.readExceptionWithOperationApplicationExceptionFromParcel(Parcel)|
|android.database.DatabaseUtils.sqlEscapeString(String)|SQL-escape a string.
|android.database.DatabaseUtils.stringForQuery(SQLiteDatabase,String,String[])|
|android.database.DatabaseUtils.stringForQuery(SQLiteStatement,String[])|Utilit
|android.database.DatabaseUtils.writeExceptionToParcel(Parcel,Exception)|Specia

*android.database.DatabaseUtils_Description*

Static utility methods for dealing with databases and 
(|android.database.Cursor|) s. 



*int_android.database.DatabaseUtils.STATEMENT_ABORT*

One of the values returned by (|android.database.DatabaseUtils|) . 


*int_android.database.DatabaseUtils.STATEMENT_ATTACH*

One of the values returned by (|android.database.DatabaseUtils|) . 


*int_android.database.DatabaseUtils.STATEMENT_BEGIN*

One of the values returned by (|android.database.DatabaseUtils|) . 


*int_android.database.DatabaseUtils.STATEMENT_COMMIT*

One of the values returned by (|android.database.DatabaseUtils|) . 


*int_android.database.DatabaseUtils.STATEMENT_DDL*

One of the values returned by (|android.database.DatabaseUtils|) . 


*int_android.database.DatabaseUtils.STATEMENT_OTHER*

One of the values returned by (|android.database.DatabaseUtils|) . 


*int_android.database.DatabaseUtils.STATEMENT_PRAGMA*

One of the values returned by (|android.database.DatabaseUtils|) . 


*int_android.database.DatabaseUtils.STATEMENT_SELECT*

One of the values returned by (|android.database.DatabaseUtils|) . 


*int_android.database.DatabaseUtils.STATEMENT_UNPREPARED*

One of the values returned by (|android.database.DatabaseUtils|) . 


*int_android.database.DatabaseUtils.STATEMENT_UPDATE*

One of the values returned by (|android.database.DatabaseUtils|) . 



*android.database.DatabaseUtils()*

public DatabaseUtils()




*android.database.DatabaseUtils.appendEscapedSQLString(StringBuilder,String)*

public static void appendEscapedSQLString(
  java.lang.StringBuilder sb,
  java.lang.String sqlString)

Appends an SQL string to the given StringBuilder, including the opening and 
closing single quotes. Any single quotes internal to sqlString will be escaped. 

This method is deprecated because we want to encourage everyone to use the "?" 
binding form. However, when implementing a ContentProvider, one may want to add 
WHERE clauses that were not provided by the caller. Since "?" is a positional 
form, using it in this case could break the caller because the indexes would be 
shifted to accomodate the ContentProvider's internal bindings. In that case, it 
may be necessary to construct a WHERE clause manually. This method is useful 
for those cases. 


    sb - the StringBuilder that the SQL string will be appended to 
    sqlString - the raw string to be appended, which may contain single quotes 

*android.database.DatabaseUtils.appendSelectionArgs(String[],String[])*

public static |java.lang.String|[] appendSelectionArgs(
  java.lang.String[] originalValues,
  java.lang.String[] newValues)

Appends one set of selection args to another. This is useful when adding a 
selection argument to a user provided set. 



*android.database.DatabaseUtils.appendValueToSql(StringBuilder,Object)*

public static final void appendValueToSql(
  java.lang.StringBuilder sql,
  java.lang.Object value)

Appends an Object to an SQL string with the proper escaping, etc. 



*android.database.DatabaseUtils.bindObjectToProgram(SQLiteProgram,int,Object)*

public static void bindObjectToProgram(
  android.database.sqlite.SQLiteProgram prog,
  int index,
  java.lang.Object value)

Binds the given Object to the given SQLiteProgram using the proper typing. For 
example, bind numbers as longs/doubles, and everything else as a string by call 
toString() on it. 


    prog - the program to bind the object to 
    index - the 1-based index to bind at 
    value - the value to bind 

*android.database.DatabaseUtils.blobFileDescriptorForQuery(SQLiteDatabase,String,String[])*

public static |android.os.ParcelFileDescriptor| blobFileDescriptorForQuery(
  android.database.sqlite.SQLiteDatabase db,
  java.lang.String query,
  java.lang.String[] selectionArgs)

Utility method to run the query on the db and return the blob value in the 
first column of the first row. 



    Returns: A read-only file descriptor for a copy of the blob value. 

*android.database.DatabaseUtils.blobFileDescriptorForQuery(SQLiteStatement,String[])*

public static |android.os.ParcelFileDescriptor| blobFileDescriptorForQuery(
  android.database.sqlite.SQLiteStatement prog,
  java.lang.String[] selectionArgs)

Utility method to run the pre-compiled query and return the blob value in the 
first column of the first row. 



    Returns: A read-only file descriptor for a copy of the blob value. 

*android.database.DatabaseUtils.concatenateWhere(String,String)*

public static |java.lang.String| concatenateWhere(
  java.lang.String a,
  java.lang.String b)

Concatenates two SQL WHERE clauses, handling empty or null values. 



*android.database.DatabaseUtils.createDbFromSqlStatements(Context,String,int,String)*

public static void createDbFromSqlStatements(
  android.content.Context context,
  java.lang.String dbName,
  int dbVersion,
  java.lang.String sqlStatements)

Creates a db and populates it with the sql statements in sqlStatements. 


    context - the context to use to create the db 
    dbName - the name of the db to create 
    dbVersion - the version to set on the db 
    sqlStatements - the statements to use to populate the db. This should be a single string of the 
       form returned by sqlite3's .dump command (statements separated by 
       semicolons) 

*android.database.DatabaseUtils.cursorDoubleToContentValues(Cursor,String,ContentValues,String)*

public static void cursorDoubleToContentValues(
  android.database.Cursor cursor,
  java.lang.String field,
  android.content.ContentValues values,
  java.lang.String key)

Reads a Double out of a field in a Cursor and writes it to a Map. 


    cursor - The cursor to read from 
    field - The REAL field to read 
    values - The {@link ContentValues} to put the value into 
    key - The key to store the value with in the map 

*android.database.DatabaseUtils.cursorDoubleToContentValuesIfPresent(Cursor,ContentValues,String)*

public static void cursorDoubleToContentValuesIfPresent(
  android.database.Cursor cursor,
  android.content.ContentValues values,
  java.lang.String column)

Reads a Double out of a column in a Cursor and writes it to a ContentValues. 
Adds nothing to the ContentValues if the column isn't present or if its value 
is null. 


    cursor - The cursor to read from 
    column - The column to read 
    values - The {@link ContentValues} to put the value into 

*android.database.DatabaseUtils.cursorDoubleToCursorValues(Cursor,String,ContentValues)*

public static void cursorDoubleToCursorValues(
  android.database.Cursor cursor,
  java.lang.String field,
  android.content.ContentValues values)

Reads a Double out of a field in a Cursor and writes it to a Map. 


    cursor - The cursor to read from 
    field - The REAL field to read 
    values - The {@link ContentValues} to put the value into 

*android.database.DatabaseUtils.cursorFillWindow(Cursor,int,CursorWindow)*

public static void cursorFillWindow(
  android.database.Cursor cursor,
  int position,
  android.database.CursorWindow window)

Fills the specified cursor window by iterating over the contents of the cursor. 
The window is filled until the cursor is exhausted or the window runs out of 
space. 

The original position of the cursor is left unchanged by this operation. 


    cursor - The cursor that contains the data to put in the window. 
    position - The start position for filling the window. 
    window - The window to fill. 

*android.database.DatabaseUtils.cursorFloatToContentValuesIfPresent(Cursor,ContentValues,String)*

public static void cursorFloatToContentValuesIfPresent(
  android.database.Cursor cursor,
  android.content.ContentValues values,
  java.lang.String column)

Reads a Float out of a column in a Cursor and writes it to a ContentValues. 
Adds nothing to the ContentValues if the column isn't present or if its value 
is null. 


    cursor - The cursor to read from 
    column - The column to read 
    values - The {@link ContentValues} to put the value into 

*android.database.DatabaseUtils.cursorIntToContentValues(Cursor,String,ContentValues)*

public static void cursorIntToContentValues(
  android.database.Cursor cursor,
  java.lang.String field,
  android.content.ContentValues values)

Reads an Integer out of a field in a Cursor and writes it to a Map. 


    cursor - The cursor to read from 
    field - The INTEGER field to read 
    values - The {@link ContentValues} to put the value into, with the field as the key 

*android.database.DatabaseUtils.cursorIntToContentValues(Cursor,String,ContentValues,String)*

public static void cursorIntToContentValues(
  android.database.Cursor cursor,
  java.lang.String field,
  android.content.ContentValues values,
  java.lang.String key)

Reads a Integer out of a field in a Cursor and writes it to a Map. 


    cursor - The cursor to read from 
    field - The INTEGER field to read 
    values - The {@link ContentValues} to put the value into, with the field as the key 
    key - The key to store the value with in the map 

*android.database.DatabaseUtils.cursorIntToContentValuesIfPresent(Cursor,ContentValues,String)*

public static void cursorIntToContentValuesIfPresent(
  android.database.Cursor cursor,
  android.content.ContentValues values,
  java.lang.String column)

Reads a Integer out of a column in a Cursor and writes it to a ContentValues. 
Adds nothing to the ContentValues if the column isn't present or if its value 
is null. 


    cursor - The cursor to read from 
    column - The column to read 
    values - The {@link ContentValues} to put the value into 

*android.database.DatabaseUtils.cursorLongToContentValues(Cursor,String,ContentValues)*

public static void cursorLongToContentValues(
  android.database.Cursor cursor,
  java.lang.String field,
  android.content.ContentValues values)

Reads a Long out of a field in a Cursor and writes it to a Map. 


    cursor - The cursor to read from 
    field - The INTEGER field to read 
    values - The {@link ContentValues} to put the value into, with the field as the key 

*android.database.DatabaseUtils.cursorLongToContentValues(Cursor,String,ContentValues,String)*

public static void cursorLongToContentValues(
  android.database.Cursor cursor,
  java.lang.String field,
  android.content.ContentValues values,
  java.lang.String key)

Reads a Long out of a field in a Cursor and writes it to a Map. 


    cursor - The cursor to read from 
    field - The INTEGER field to read 
    values - The {@link ContentValues} to put the value into 
    key - The key to store the value with in the map 

*android.database.DatabaseUtils.cursorLongToContentValuesIfPresent(Cursor,ContentValues,String)*

public static void cursorLongToContentValuesIfPresent(
  android.database.Cursor cursor,
  android.content.ContentValues values,
  java.lang.String column)

Reads a Long out of a column in a Cursor and writes it to a ContentValues. Adds 
nothing to the ContentValues if the column isn't present or if its value is 
null. 


    cursor - The cursor to read from 
    column - The column to read 
    values - The {@link ContentValues} to put the value into 

*android.database.DatabaseUtils.cursorPickFillWindowStartPosition(int,int)*

public static int cursorPickFillWindowStartPosition(
  int cursorPosition,
  int cursorWindowCapacity)

Picks a start position for (|android.database.Cursor|) such that the window 
will contain the requested row and a useful range of rows around it. 

When the data set is too large to fit in a cursor window, seeking the cursor 
can become a very expensive operation since we have to run the query again when 
we move outside the bounds of the current window. 

We try to choose a start position for the cursor window such that 1/3 of the 
window's capacity is used to hold rows before the requested position and 2/3 of 
the window's capacity is used to hold rows after the requested position. 


    cursorPosition - The row index of the row we want to get. 
    cursorWindowCapacity - The estimated number of rows that can fit in a cursor window, or 0 if unknown. 

    Returns: The recommended start position, always less than or equal to the requested row. 

*android.database.DatabaseUtils.cursorRowToContentValues(Cursor,ContentValues)*

public static void cursorRowToContentValues(
  android.database.Cursor cursor,
  android.content.ContentValues values)

Read the entire contents of a cursor row and store them in a ContentValues. 


    cursor - the cursor to read from. 
    values - the {@link ContentValues} to put the row into. 

*android.database.DatabaseUtils.cursorShortToContentValuesIfPresent(Cursor,ContentValues,String)*

public static void cursorShortToContentValuesIfPresent(
  android.database.Cursor cursor,
  android.content.ContentValues values,
  java.lang.String column)

Reads a Short out of a column in a Cursor and writes it to a ContentValues. 
Adds nothing to the ContentValues if the column isn't present or if its value 
is null. 


    cursor - The cursor to read from 
    column - The column to read 
    values - The {@link ContentValues} to put the value into 

*android.database.DatabaseUtils.cursorStringToContentValues(Cursor,String,ContentValues)*

public static void cursorStringToContentValues(
  android.database.Cursor cursor,
  java.lang.String field,
  android.content.ContentValues values)

Reads a String out of a field in a Cursor and writes it to a Map. 


    cursor - The cursor to read from 
    field - The TEXT field to read 
    values - The {@link ContentValues} to put the value into, with the field as the key 

*android.database.DatabaseUtils.cursorStringToContentValues(Cursor,String,ContentValues,String)*

public static void cursorStringToContentValues(
  android.database.Cursor cursor,
  java.lang.String field,
  android.content.ContentValues values,
  java.lang.String key)

Reads a String out of a field in a Cursor and writes it to a Map. 


    cursor - The cursor to read from 
    field - The TEXT field to read 
    values - The {@link ContentValues} to put the value into, with the field as the key 
    key - The key to store the value with in the map 

*android.database.DatabaseUtils.cursorStringToContentValuesIfPresent(Cursor,ContentValues,String)*

public static void cursorStringToContentValuesIfPresent(
  android.database.Cursor cursor,
  android.content.ContentValues values,
  java.lang.String column)

Reads a String out of a column in a Cursor and writes it to a ContentValues. 
Adds nothing to the ContentValues if the column isn't present or if its value 
is null. 


    cursor - The cursor to read from 
    column - The column to read 
    values - The {@link ContentValues} to put the value into 

*android.database.DatabaseUtils.cursorStringToInsertHelper(Cursor,String,DatabaseUtils.InsertHelper,int)*

public static void cursorStringToInsertHelper(
  android.database.Cursor cursor,
  java.lang.String field,
  android.database.DatabaseUtils.InsertHelper inserter,
  int index)

Reads a String out of a field in a Cursor and writes it to an InsertHelper. 


    cursor - The cursor to read from 
    field - The TEXT field to read 
    inserter - The InsertHelper to bind into 
    index - the index of the bind entry in the InsertHelper 

*android.database.DatabaseUtils.dumpCurrentRow(Cursor)*

public static void dumpCurrentRow(android.database.Cursor cursor)

Prints the contents of a Cursor's current row to System.out. 


    cursor - the cursor to print from 

*android.database.DatabaseUtils.dumpCurrentRow(Cursor,PrintStream)*

public static void dumpCurrentRow(
  android.database.Cursor cursor,
  java.io.PrintStream stream)

Prints the contents of a Cursor's current row to a PrintSteam. 


    cursor - the cursor to print 
    stream - the stream to print to 

*android.database.DatabaseUtils.dumpCurrentRow(Cursor,StringBuilder)*

public static void dumpCurrentRow(
  android.database.Cursor cursor,
  java.lang.StringBuilder sb)

Prints the contents of a Cursor's current row to a StringBuilder. 


    cursor - the cursor to print 
    sb - the StringBuilder to print to 

*android.database.DatabaseUtils.dumpCurrentRowToString(Cursor)*

public static |java.lang.String| dumpCurrentRowToString(android.database.Cursor cursor)

Dump the contents of a Cursor's current row to a String. 


    cursor - the cursor to print 

    Returns: a String that contains the dumped cursor row 

*android.database.DatabaseUtils.dumpCursor(Cursor)*

public static void dumpCursor(android.database.Cursor cursor)

Prints the contents of a Cursor to System.out. The position is restored after 
printing. 


    cursor - the cursor to print 

*android.database.DatabaseUtils.dumpCursor(Cursor,PrintStream)*

public static void dumpCursor(
  android.database.Cursor cursor,
  java.io.PrintStream stream)

Prints the contents of a Cursor to a PrintSteam. The position is restored after 
printing. 


    cursor - the cursor to print 
    stream - the stream to print to 

*android.database.DatabaseUtils.dumpCursor(Cursor,StringBuilder)*

public static void dumpCursor(
  android.database.Cursor cursor,
  java.lang.StringBuilder sb)

Prints the contents of a Cursor to a StringBuilder. The position is restored 
after printing. 


    cursor - the cursor to print 
    sb - the StringBuilder to print to 

*android.database.DatabaseUtils.dumpCursorToString(Cursor)*

public static |java.lang.String| dumpCursorToString(android.database.Cursor cursor)

Prints the contents of a Cursor to a String. The position is restored after 
printing. 


    cursor - the cursor to print 

    Returns: a String that contains the dumped cursor 

*android.database.DatabaseUtils.findRowIdColumnIndex(String[])*

public static int findRowIdColumnIndex(java.lang.String[] columnNames)

Returns column index of "_id" column, or -1 if not found. 



*android.database.DatabaseUtils.getCollationKey(String)*

public static |java.lang.String| getCollationKey(java.lang.String name)

return the collation key 


    name - 

    Returns: the collation key 

*android.database.DatabaseUtils.getHexCollationKey(String)*

public static |java.lang.String| getHexCollationKey(java.lang.String name)

return the collation key in hex format 


    name - 

    Returns: the collation key in hex format 

*android.database.DatabaseUtils.getSqlStatementType(String)*

public static int getSqlStatementType(java.lang.String sql)

Returns one of the following which represent the type of the given SQL 
statement. 

(|android.database.DatabaseUtils|) (|android.database.DatabaseUtils|) 
(|android.database.DatabaseUtils|) (|android.database.DatabaseUtils|) 
(|android.database.DatabaseUtils|) (|android.database.DatabaseUtils|) 
(|android.database.DatabaseUtils|) 


    sql - the SQL statement whose type is returned by this method 

    Returns: one of the values listed above 

*android.database.DatabaseUtils.getTypeOfObject(Object)*

public static int getTypeOfObject(java.lang.Object obj)

Returns data type of the given object's value. 

Returned values are 

(|android.database.Cursor|) (|android.database.Cursor|) 
(|android.database.Cursor|) (|android.database.Cursor|) 
(|android.database.Cursor|) 


    obj - the object whose value type is to be returned 

    Returns: object value type 

*android.database.DatabaseUtils.longForQuery(SQLiteDatabase,String,String[])*

public static long longForQuery(
  android.database.sqlite.SQLiteDatabase db,
  java.lang.String query,
  java.lang.String[] selectionArgs)

Utility method to run the query on the db and return the value in the first 
column of the first row. 



*android.database.DatabaseUtils.longForQuery(SQLiteStatement,String[])*

public static long longForQuery(
  android.database.sqlite.SQLiteStatement prog,
  java.lang.String[] selectionArgs)

Utility method to run the pre-compiled query and return the value in the first 
column of the first row. 



*android.database.DatabaseUtils.queryIsEmpty(SQLiteDatabase,String)*

public static boolean queryIsEmpty(
  android.database.sqlite.SQLiteDatabase db,
  java.lang.String table)

Query the table to check whether a table is empty or not 


    db - the database the table is in 
    table - the name of the table to query 

    Returns: True if the table is empty 

*android.database.DatabaseUtils.queryNumEntries(SQLiteDatabase,String)*

public static long queryNumEntries(
  android.database.sqlite.SQLiteDatabase db,
  java.lang.String table)

Query the table for the number of rows in the table. 


    db - the database the table is in 
    table - the name of the table to query 

    Returns: the number of rows in the table 

*android.database.DatabaseUtils.queryNumEntries(SQLiteDatabase,String,String)*

public static long queryNumEntries(
  android.database.sqlite.SQLiteDatabase db,
  java.lang.String table,
  java.lang.String selection)

Query the table for the number of rows in the table. 


    db - the database the table is in 
    table - the name of the table to query 
    selection - A filter declaring which rows to return, formatted as an SQL WHERE clause 
       (excluding the WHERE itself). Passing null will count all rows for the 
       given table 

    Returns: the number of rows in the table filtered by the selection 

*android.database.DatabaseUtils.queryNumEntries(SQLiteDatabase,String,String,String[])*

public static long queryNumEntries(
  android.database.sqlite.SQLiteDatabase db,
  java.lang.String table,
  java.lang.String selection,
  java.lang.String[] selectionArgs)

Query the table for the number of rows in the table. 


    db - the database the table is in 
    table - the name of the table to query 
    selection - A filter declaring which rows to return, formatted as an SQL WHERE clause 
       (excluding the WHERE itself). Passing null will count all rows for the 
       given table 
    selectionArgs - You may include ?s in selection, which will be replaced by the values from 
       selectionArgs, in order that they appear in the selection. The values 
       will be bound as Strings. 

    Returns: the number of rows in the table filtered by the selection 

*android.database.DatabaseUtils.readExceptionFromParcel(Parcel)*

public static final void readExceptionFromParcel(android.os.Parcel reply)

Special function for reading an exception result from the header of a parcel, 
to be used after receiving the result of a transaction. This will throw the 
exception for you if it had been written to the Parcel, otherwise return and 
let you read the normal result data from the Parcel. 


    reply - Parcel to read from 

*android.database.DatabaseUtils.readExceptionWithFileNotFoundExceptionFromParcel(Parcel)*

public static void readExceptionWithFileNotFoundExceptionFromParcel(android.os.Parcel reply)
  throws |java.io.FileNotFoundException|
         




*android.database.DatabaseUtils.readExceptionWithOperationApplicationExceptionFromParcel(Parcel)*

public static void readExceptionWithOperationApplicationExceptionFromParcel(android.os.Parcel reply)
  throws |android.content.OperationApplicationException|
         




*android.database.DatabaseUtils.sqlEscapeString(String)*

public static |java.lang.String| sqlEscapeString(java.lang.String value)

SQL-escape a string. 



*android.database.DatabaseUtils.stringForQuery(SQLiteDatabase,String,String[])*

public static |java.lang.String| stringForQuery(
  android.database.sqlite.SQLiteDatabase db,
  java.lang.String query,
  java.lang.String[] selectionArgs)

Utility method to run the query on the db and return the value in the first 
column of the first row. 



*android.database.DatabaseUtils.stringForQuery(SQLiteStatement,String[])*

public static |java.lang.String| stringForQuery(
  android.database.sqlite.SQLiteStatement prog,
  java.lang.String[] selectionArgs)

Utility method to run the pre-compiled query and return the value in the first 
column of the first row. 



*android.database.DatabaseUtils.writeExceptionToParcel(Parcel,Exception)*

public static final void writeExceptionToParcel(
  android.os.Parcel reply,
  java.lang.Exception e)

Special function for writing an exception result at the header of a parcel, to 
be used when returning an exception from a transaction. exception will be 
re-thrown by the function in another process 


    reply - Parcel to write to 
    e - The Exception to be written. 


