*android.content.res.Configuration* *Configuration* This class describes all dev

public final class Configuration
  extends    |java.lang.Object|
  implements |android.os.Parcelable|
             |java.lang.Comparable|

|android.content.res.Configuration_Description|
|android.content.res.Configuration_Fields|
|android.content.res.Configuration_Constructors|
|android.content.res.Configuration_Methods|

================================================================================

*android.content.res.Configuration_Fields*
|int_android.content.res.Configuration.compatScreenHeightDp|
|int_android.content.res.Configuration.compatScreenWidthDp|
|int_android.content.res.Configuration.compatSmallestScreenWidthDp|
|android.os.Parcelable.Creator<android.content.res.Configuration>_android.content.res.Configuration.CREATOR|
|int_android.content.res.Configuration.DENSITY_DPI_UNDEFINED|
|int_android.content.res.Configuration.densityDpi|
|android.content.res.Configuration_android.content.res.Configuration.EMPTY|
|float_android.content.res.Configuration.fontScale|
|int_android.content.res.Configuration.hardKeyboardHidden|
|int_android.content.res.Configuration.HARDKEYBOARDHIDDEN_NO|
|int_android.content.res.Configuration.HARDKEYBOARDHIDDEN_UNDEFINED|
|int_android.content.res.Configuration.HARDKEYBOARDHIDDEN_YES|
|int_android.content.res.Configuration.keyboard|
|int_android.content.res.Configuration.KEYBOARD_12KEY|
|int_android.content.res.Configuration.KEYBOARD_NOKEYS|
|int_android.content.res.Configuration.KEYBOARD_QWERTY|
|int_android.content.res.Configuration.KEYBOARD_UNDEFINED|
|int_android.content.res.Configuration.keyboardHidden|
|int_android.content.res.Configuration.KEYBOARDHIDDEN_NO|
|int_android.content.res.Configuration.KEYBOARDHIDDEN_SOFT|
|int_android.content.res.Configuration.KEYBOARDHIDDEN_UNDEFINED|
|int_android.content.res.Configuration.KEYBOARDHIDDEN_YES|
|java.util.Locale_android.content.res.Configuration.locale|
|int_android.content.res.Configuration.mcc|
|int_android.content.res.Configuration.mnc|
|int_android.content.res.Configuration.MNC_ZERO|
|int_android.content.res.Configuration.NATIVE_CONFIG_DENSITY|
|int_android.content.res.Configuration.NATIVE_CONFIG_KEYBOARD|
|int_android.content.res.Configuration.NATIVE_CONFIG_KEYBOARD_HIDDEN|
|int_android.content.res.Configuration.NATIVE_CONFIG_LAYOUTDIR|
|int_android.content.res.Configuration.NATIVE_CONFIG_LOCALE|
|int_android.content.res.Configuration.NATIVE_CONFIG_MCC|
|int_android.content.res.Configuration.NATIVE_CONFIG_MNC|
|int_android.content.res.Configuration.NATIVE_CONFIG_NAVIGATION|
|int_android.content.res.Configuration.NATIVE_CONFIG_ORIENTATION|
|int_android.content.res.Configuration.NATIVE_CONFIG_SCREEN_LAYOUT|
|int_android.content.res.Configuration.NATIVE_CONFIG_SCREEN_SIZE|
|int_android.content.res.Configuration.NATIVE_CONFIG_SMALLEST_SCREEN_SIZE|
|int_android.content.res.Configuration.NATIVE_CONFIG_TOUCHSCREEN|
|int_android.content.res.Configuration.NATIVE_CONFIG_UI_MODE|
|int_android.content.res.Configuration.NATIVE_CONFIG_VERSION|
|int_android.content.res.Configuration.navigation|
|int_android.content.res.Configuration.NAVIGATION_DPAD|
|int_android.content.res.Configuration.NAVIGATION_NONAV|
|int_android.content.res.Configuration.NAVIGATION_TRACKBALL|
|int_android.content.res.Configuration.NAVIGATION_UNDEFINED|
|int_android.content.res.Configuration.NAVIGATION_WHEEL|
|int_android.content.res.Configuration.navigationHidden|
|int_android.content.res.Configuration.NAVIGATIONHIDDEN_NO|
|int_android.content.res.Configuration.NAVIGATIONHIDDEN_UNDEFINED|
|int_android.content.res.Configuration.NAVIGATIONHIDDEN_YES|
|int_android.content.res.Configuration.orientation|
|int_android.content.res.Configuration.ORIENTATION_LANDSCAPE|
|int_android.content.res.Configuration.ORIENTATION_PORTRAIT|
|int_android.content.res.Configuration.ORIENTATION_SQUARE|
|int_android.content.res.Configuration.ORIENTATION_UNDEFINED|
|int_android.content.res.Configuration.SCREEN_HEIGHT_DP_UNDEFINED|
|int_android.content.res.Configuration.SCREEN_WIDTH_DP_UNDEFINED|
|int_android.content.res.Configuration.screenHeightDp|
|int_android.content.res.Configuration.screenLayout|
|int_android.content.res.Configuration.SCREENLAYOUT_COMPAT_NEEDED|
|int_android.content.res.Configuration.SCREENLAYOUT_LAYOUTDIR_LTR|
|int_android.content.res.Configuration.SCREENLAYOUT_LAYOUTDIR_MASK|
|int_android.content.res.Configuration.SCREENLAYOUT_LAYOUTDIR_RTL|
|int_android.content.res.Configuration.SCREENLAYOUT_LAYOUTDIR_SHIFT|
|int_android.content.res.Configuration.SCREENLAYOUT_LAYOUTDIR_UNDEFINED|
|int_android.content.res.Configuration.SCREENLAYOUT_LONG_MASK|
|int_android.content.res.Configuration.SCREENLAYOUT_LONG_NO|
|int_android.content.res.Configuration.SCREENLAYOUT_LONG_UNDEFINED|
|int_android.content.res.Configuration.SCREENLAYOUT_LONG_YES|
|int_android.content.res.Configuration.SCREENLAYOUT_SIZE_LARGE|
|int_android.content.res.Configuration.SCREENLAYOUT_SIZE_MASK|
|int_android.content.res.Configuration.SCREENLAYOUT_SIZE_NORMAL|
|int_android.content.res.Configuration.SCREENLAYOUT_SIZE_SMALL|
|int_android.content.res.Configuration.SCREENLAYOUT_SIZE_UNDEFINED|
|int_android.content.res.Configuration.SCREENLAYOUT_SIZE_XLARGE|
|int_android.content.res.Configuration.SCREENLAYOUT_UNDEFINED|
|int_android.content.res.Configuration.screenWidthDp|
|int_android.content.res.Configuration.seq|
|int_android.content.res.Configuration.SMALLEST_SCREEN_WIDTH_DP_UNDEFINED|
|int_android.content.res.Configuration.smallestScreenWidthDp|
|int_android.content.res.Configuration.touchscreen|
|int_android.content.res.Configuration.TOUCHSCREEN_FINGER|
|int_android.content.res.Configuration.TOUCHSCREEN_NOTOUCH|
|int_android.content.res.Configuration.TOUCHSCREEN_STYLUS|
|int_android.content.res.Configuration.TOUCHSCREEN_UNDEFINED|
|int_android.content.res.Configuration.UI_MODE_NIGHT_MASK|
|int_android.content.res.Configuration.UI_MODE_NIGHT_NO|
|int_android.content.res.Configuration.UI_MODE_NIGHT_UNDEFINED|
|int_android.content.res.Configuration.UI_MODE_NIGHT_YES|
|int_android.content.res.Configuration.UI_MODE_TYPE_APPLIANCE|
|int_android.content.res.Configuration.UI_MODE_TYPE_CAR|
|int_android.content.res.Configuration.UI_MODE_TYPE_DESK|
|int_android.content.res.Configuration.UI_MODE_TYPE_MASK|
|int_android.content.res.Configuration.UI_MODE_TYPE_NORMAL|
|int_android.content.res.Configuration.UI_MODE_TYPE_TELEVISION|
|int_android.content.res.Configuration.UI_MODE_TYPE_UNDEFINED|
|int_android.content.res.Configuration.uiMode|
|boolean_android.content.res.Configuration.userSetLocale|

*android.content.res.Configuration_Constructors*
|android.content.res.Configuration()|Construct an invalid Configuration.
|android.content.res.Configuration(Configuration)|Makes a deep copy suitable fo

*android.content.res.Configuration_Methods*
|android.content.res.Configuration.compareTo(Configuration)|
|android.content.res.Configuration.describeContents()|Parcelable methods
|android.content.res.Configuration.diff(Configuration)|Return a bit mask of the
|android.content.res.Configuration.equals(Configuration)|
|android.content.res.Configuration.equals(Object)|
|android.content.res.Configuration.getLayoutDirection()|Return the layout direc
|android.content.res.Configuration.hashCode()|
|android.content.res.Configuration.isLayoutSizeAtLeast(int)|Check if the Config
|android.content.res.Configuration.isOtherSeqNewer(Configuration)|
|android.content.res.Configuration.makeDefault()|
|android.content.res.Configuration.needNewResources(int,int)|Determine if a new
|android.content.res.Configuration.readFromParcel(Parcel)|
|android.content.res.Configuration.reduceScreenLayout(int,int,int)|
|android.content.res.Configuration.resetScreenLayout(int)|
|android.content.res.Configuration.setLayoutDirection(Locale)|Set the layout di
|android.content.res.Configuration.setLocale(Locale)|Set the locale.
|android.content.res.Configuration.setTo(Configuration)|
|android.content.res.Configuration.setToDefaults()|Set this object to the syste
|android.content.res.Configuration.toString()|
|android.content.res.Configuration.updateFrom(Configuration)|Copy the fields fr
|android.content.res.Configuration.writeToParcel(Parcel,int)|

*android.content.res.Configuration_Description*

This class describes all device configuration information that can impact the 
resources the application retrieves. This includes both user-specified 
configuration options (locale and scaling) as well as device configurations 
(such as input modes, screen size and screen orientation). You can acquire this 
object from (|android.content.res.Resources|) , using 
(|android.content.res.Resources|) . Thus, from an activity, you can get it by 
chaining the request with (|android.app.Activity|) : 

Configuration config = getResources().getConfiguration(); 



*int_android.content.res.Configuration.compatScreenHeightDp*




*int_android.content.res.Configuration.compatScreenWidthDp*




*int_android.content.res.Configuration.compatSmallestScreenWidthDp*




*android.os.Parcelable.Creator<android.content.res.Configuration>_android.content.res.Configuration.CREATOR*




*int_android.content.res.Configuration.DENSITY_DPI_UNDEFINED*

Default value for (|android.content.res.Configuration|) indicating that no 
width has been specified. 


*int_android.content.res.Configuration.densityDpi*

The target screen density being rendered to, corresponding to <a 
href="guide/topics/resources/providing-resources.html#DensityQualifier">density 
resource qualifier. Set to (|android.content.res.Configuration|) if no density 
is specified. 


*android.content.res.Configuration_android.content.res.Configuration.EMPTY*




*float_android.content.res.Configuration.fontScale*

Current user preference for the scaling factor for fonts, relative to the base 
density scaling. 


*int_android.content.res.Configuration.hardKeyboardHidden*

A flag indicating whether the hard keyboard has been hidden. This will be set 
on a device with a mechanism to hide the keyboard from the user, when that 
mechanism is closed. One of: (|android.content.res.Configuration|) , 
(|android.content.res.Configuration|) . 


*int_android.content.res.Configuration.HARDKEYBOARDHIDDEN_NO*

Constant for (|android.content.res.Configuration|) , value corresponding to the 
physical keyboard being exposed. 


*int_android.content.res.Configuration.HARDKEYBOARDHIDDEN_UNDEFINED*

Constant for (|android.content.res.Configuration|) : a value indicating that no 
value has been set. 


*int_android.content.res.Configuration.HARDKEYBOARDHIDDEN_YES*

Constant for (|android.content.res.Configuration|) , value corresponding to the 
physical keyboard being hidden. 


*int_android.content.res.Configuration.keyboard*

The kind of keyboard attached to the device. One of: 
(|android.content.res.Configuration|) , (|android.content.res.Configuration|) , 
(|android.content.res.Configuration|) . 


*int_android.content.res.Configuration.KEYBOARD_12KEY*

Constant for (|android.content.res.Configuration|) , value corresponding to the 
<a href="guide/topics/resources/providing-resources.html#ImeQualifier">12key 
resource qualifier. 


*int_android.content.res.Configuration.KEYBOARD_NOKEYS*

Constant for (|android.content.res.Configuration|) , value corresponding to the 
<a href="guide/topics/resources/providing-resources.html#ImeQualifier">nokeys 
resource qualifier. 


*int_android.content.res.Configuration.KEYBOARD_QWERTY*

Constant for (|android.content.res.Configuration|) , value corresponding to the 
<a href="guide/topics/resources/providing-resources.html#ImeQualifier">qwerty 
resource qualifier. 


*int_android.content.res.Configuration.KEYBOARD_UNDEFINED*

Constant for (|android.content.res.Configuration|) : a value indicating that no 
value has been set. 


*int_android.content.res.Configuration.keyboardHidden*

A flag indicating whether any keyboard is available. Unlike 
(|android.content.res.Configuration|) , this also takes into account a soft 
keyboard, so if the hard keyboard is hidden but there is soft keyboard 
available, it will be set to NO. Value is one of: 
(|android.content.res.Configuration|) , (|android.content.res.Configuration|) . 


*int_android.content.res.Configuration.KEYBOARDHIDDEN_NO*

Constant for (|android.content.res.Configuration|) , value corresponding to the 
<a 
href="guide/topics/resources/providing-resources.html#KeyboardAvailQualifier">keysexposed
resource qualifier. 


*int_android.content.res.Configuration.KEYBOARDHIDDEN_SOFT*

Constant matching actual resource implementation. 


*int_android.content.res.Configuration.KEYBOARDHIDDEN_UNDEFINED*

Constant for (|android.content.res.Configuration|) : a value indicating that no 
value has been set. 


*int_android.content.res.Configuration.KEYBOARDHIDDEN_YES*

Constant for (|android.content.res.Configuration|) , value corresponding to the 
<a 
href="guide/topics/resources/providing-resources.html#KeyboardAvailQualifier">keyshidden
resource qualifier. 


*java.util.Locale_android.content.res.Configuration.locale*

Current user preference for the locale, corresponding to <a 
href="guide/topics/resources/providing-resources.html#LocaleQualifier">locale 
resource qualifier. 


*int_android.content.res.Configuration.mcc*

IMSI MCC (Mobile Country Code), corresponding to <a 
href="guide/topics/resources/providing-resources.html#MccQualifier">mcc 
resource qualifier. 0 if undefined. 


*int_android.content.res.Configuration.mnc*

IMSI MNC (Mobile Network Code), corresponding to <a 
href="guide/topics/resources/providing-resources.html#MccQualifier">mnc 
resource qualifier. 0 if undefined. Note that the actual MNC may be 0; in order 
to check for this use the (|android.content.res.Configuration|) symbol. 


*int_android.content.res.Configuration.MNC_ZERO*

Constant used to to represent MNC (Mobile Network Code) zero. 0 cannot be used, 
since it is used to represent an undefined MNC. 


*int_android.content.res.Configuration.NATIVE_CONFIG_DENSITY*




*int_android.content.res.Configuration.NATIVE_CONFIG_KEYBOARD*




*int_android.content.res.Configuration.NATIVE_CONFIG_KEYBOARD_HIDDEN*




*int_android.content.res.Configuration.NATIVE_CONFIG_LAYOUTDIR*




*int_android.content.res.Configuration.NATIVE_CONFIG_LOCALE*




*int_android.content.res.Configuration.NATIVE_CONFIG_MCC*




*int_android.content.res.Configuration.NATIVE_CONFIG_MNC*




*int_android.content.res.Configuration.NATIVE_CONFIG_NAVIGATION*




*int_android.content.res.Configuration.NATIVE_CONFIG_ORIENTATION*




*int_android.content.res.Configuration.NATIVE_CONFIG_SCREEN_LAYOUT*




*int_android.content.res.Configuration.NATIVE_CONFIG_SCREEN_SIZE*




*int_android.content.res.Configuration.NATIVE_CONFIG_SMALLEST_SCREEN_SIZE*




*int_android.content.res.Configuration.NATIVE_CONFIG_TOUCHSCREEN*




*int_android.content.res.Configuration.NATIVE_CONFIG_UI_MODE*




*int_android.content.res.Configuration.NATIVE_CONFIG_VERSION*




*int_android.content.res.Configuration.navigation*

The kind of navigation method available on the device. One of: 
(|android.content.res.Configuration|) , (|android.content.res.Configuration|) , 
(|android.content.res.Configuration|) , (|android.content.res.Configuration|) . 


*int_android.content.res.Configuration.NAVIGATION_DPAD*

Constant for (|android.content.res.Configuration|) , value corresponding to the 
<a 
href="guide/topics/resources/providing-resources.html#NavigationQualifier">dpad 
resource qualifier. 


*int_android.content.res.Configuration.NAVIGATION_NONAV*

Constant for (|android.content.res.Configuration|) , value corresponding to the 
<a 
href="guide/topics/resources/providing-resources.html#NavigationQualifier">nonav
resource qualifier. 


*int_android.content.res.Configuration.NAVIGATION_TRACKBALL*

Constant for (|android.content.res.Configuration|) , value corresponding to the 
<a 
href="guide/topics/resources/providing-resources.html#NavigationQualifier">trackball
resource qualifier. 


*int_android.content.res.Configuration.NAVIGATION_UNDEFINED*

Constant for (|android.content.res.Configuration|) : a value indicating that no 
value has been set. 


*int_android.content.res.Configuration.NAVIGATION_WHEEL*

Constant for (|android.content.res.Configuration|) , value corresponding to the 
<a 
href="guide/topics/resources/providing-resources.html#NavigationQualifier">wheel
resource qualifier. 


*int_android.content.res.Configuration.navigationHidden*

A flag indicating whether any 5-way or DPAD navigation available. This will be 
set on a device with a mechanism to hide the navigation controls from the user, 
when that mechanism is closed. One of: (|android.content.res.Configuration|) , 
(|android.content.res.Configuration|) . 


*int_android.content.res.Configuration.NAVIGATIONHIDDEN_NO*

Constant for (|android.content.res.Configuration|) , value corresponding to the 
<a 
href="guide/topics/resources/providing-resources.html#NavAvailQualifier">navexposed
resource qualifier. 


*int_android.content.res.Configuration.NAVIGATIONHIDDEN_UNDEFINED*

Constant for (|android.content.res.Configuration|) : a value indicating that no 
value has been set. 


*int_android.content.res.Configuration.NAVIGATIONHIDDEN_YES*

Constant for (|android.content.res.Configuration|) , value corresponding to the 
<a 
href="guide/topics/resources/providing-resources.html#NavAvailQualifier">navhidden
resource qualifier. 


*int_android.content.res.Configuration.orientation*

Overall orientation of the screen. May be one of 
(|android.content.res.Configuration|) , (|android.content.res.Configuration|) . 


*int_android.content.res.Configuration.ORIENTATION_LANDSCAPE*

Constant for (|android.content.res.Configuration|) , value corresponding to the 
<a 
href="guide/topics/resources/providing-resources.html#OrientationQualifier">land
resource qualifier. 


*int_android.content.res.Configuration.ORIENTATION_PORTRAIT*

Constant for (|android.content.res.Configuration|) , value corresponding to the 
<a 
href="guide/topics/resources/providing-resources.html#OrientationQualifier">port
resource qualifier. 


*int_android.content.res.Configuration.ORIENTATION_SQUARE*




*int_android.content.res.Configuration.ORIENTATION_UNDEFINED*

Constant for (|android.content.res.Configuration|) : a value indicating that no 
value has been set. 


*int_android.content.res.Configuration.SCREEN_HEIGHT_DP_UNDEFINED*

Default value for (|android.content.res.Configuration|) indicating that no 
width has been specified. 


*int_android.content.res.Configuration.SCREEN_WIDTH_DP_UNDEFINED*

Default value for (|android.content.res.Configuration|) indicating that no 
width has been specified. 


*int_android.content.res.Configuration.screenHeightDp*

The current height of the available screen space, in dp units, corresponding to 
<a 
href="guide/topics/resources/providing-resources.html#ScreenHeightQualifier">screen
height resource qualifier. Set to (|android.content.res.Configuration|) if no 
height is specified. 


*int_android.content.res.Configuration.screenLayout*

Bit mask of overall layout of the screen. Currently there are two fields: The 
(|android.content.res.Configuration|) bits define the overall size of the 
screen. They may be one of (|android.content.res.Configuration|) , 
(|android.content.res.Configuration|) , (|android.content.res.Configuration|) , 
or (|android.content.res.Configuration|) . 

The (|android.content.res.Configuration|) defines whether the screen is 
wider/taller than normal. They may be one of 
(|android.content.res.Configuration|) or (|android.content.res.Configuration|) 
. 

The (|android.content.res.Configuration|) defines whether the screen layout is 
either LTR or RTL. They may be one of (|android.content.res.Configuration|) or 
(|android.content.res.Configuration|) . 

See <a href="guide/practices/screens_support.html">Supporting Multiple Screens 
for more information. 


*int_android.content.res.Configuration.SCREENLAYOUT_COMPAT_NEEDED*

Special flag we generate to indicate that the screen layout requires us to use 
a compatibility mode for apps that are not modern layout aware. 


*int_android.content.res.Configuration.SCREENLAYOUT_LAYOUTDIR_LTR*

Constant for (|android.content.res.Configuration|) : a 
(|android.content.res.Configuration|) value indicating that a layout dir has 
been set to LTR. 


*int_android.content.res.Configuration.SCREENLAYOUT_LAYOUTDIR_MASK*

Constant for (|android.content.res.Configuration|) : bits that encode the 
layout direction. 


*int_android.content.res.Configuration.SCREENLAYOUT_LAYOUTDIR_RTL*

Constant for (|android.content.res.Configuration|) : a 
(|android.content.res.Configuration|) value indicating that a layout dir has 
been set to RTL. 


*int_android.content.res.Configuration.SCREENLAYOUT_LAYOUTDIR_SHIFT*

Constant for (|android.content.res.Configuration|) : bits shift to get the 
layout direction. 


*int_android.content.res.Configuration.SCREENLAYOUT_LAYOUTDIR_UNDEFINED*

Constant for (|android.content.res.Configuration|) : a 
(|android.content.res.Configuration|) value indicating that no layout dir has 
been set. 


*int_android.content.res.Configuration.SCREENLAYOUT_LONG_MASK*

Constant for (|android.content.res.Configuration|) : bits that encode the 
aspect ratio. 


*int_android.content.res.Configuration.SCREENLAYOUT_LONG_NO*

Constant for (|android.content.res.Configuration|) : a 
(|android.content.res.Configuration|) value that corresponds to the <a 
href="guide/topics/resources/providing-resources.html#ScreenAspectQualifier">notlong
resource qualifier. 


*int_android.content.res.Configuration.SCREENLAYOUT_LONG_UNDEFINED*

Constant for (|android.content.res.Configuration|) : a 
(|android.content.res.Configuration|) value indicating that no size has been 
set. 


*int_android.content.res.Configuration.SCREENLAYOUT_LONG_YES*

Constant for (|android.content.res.Configuration|) : a 
(|android.content.res.Configuration|) value that corresponds to the <a 
href="guide/topics/resources/providing-resources.html#ScreenAspectQualifier">long
resource qualifier. 


*int_android.content.res.Configuration.SCREENLAYOUT_SIZE_LARGE*

Constant for (|android.content.res.Configuration|) : a 
(|android.content.res.Configuration|) value indicating the screen is at least 
approximately 480x640 dp units, corresponds to the <a 
href="guide/topics/resources/providing-resources.html#ScreenSizeQualifier">large
resource qualifier. See <a 
href="guide/practices/screens_support.html">Supporting Multiple Screens for 
more information. 


*int_android.content.res.Configuration.SCREENLAYOUT_SIZE_MASK*

Constant for (|android.content.res.Configuration|) : bits that encode the size. 


*int_android.content.res.Configuration.SCREENLAYOUT_SIZE_NORMAL*

Constant for (|android.content.res.Configuration|) : a 
(|android.content.res.Configuration|) value indicating the screen is at least 
approximately 320x470 dp units, corresponds to the <a 
href="guide/topics/resources/providing-resources.html#ScreenSizeQualifier">normal
resource qualifier. See <a 
href="guide/practices/screens_support.html">Supporting Multiple Screens for 
more information. 


*int_android.content.res.Configuration.SCREENLAYOUT_SIZE_SMALL*

Constant for (|android.content.res.Configuration|) : a 
(|android.content.res.Configuration|) value indicating the screen is at least 
approximately 320x426 dp units, corresponds to the <a 
href="guide/topics/resources/providing-resources.html#ScreenSizeQualifier">small
resource qualifier. See <a 
href="guide/practices/screens_support.html">Supporting Multiple Screens for 
more information. 


*int_android.content.res.Configuration.SCREENLAYOUT_SIZE_UNDEFINED*

Constant for (|android.content.res.Configuration|) : a 
(|android.content.res.Configuration|) value indicating that no size has been 
set. 


*int_android.content.res.Configuration.SCREENLAYOUT_SIZE_XLARGE*

Constant for (|android.content.res.Configuration|) : a 
(|android.content.res.Configuration|) value indicating the screen is at least 
approximately 720x960 dp units, corresponds to the <a 
href="guide/topics/resources/providing-resources.html#ScreenSizeQualifier">xlarge
resource qualifier. See <a 
href="guide/practices/screens_support.html">Supporting Multiple Screens for 
more information. 


*int_android.content.res.Configuration.SCREENLAYOUT_UNDEFINED*

Constant for (|android.content.res.Configuration|) : a value indicating that 
screenLayout is undefined 


*int_android.content.res.Configuration.screenWidthDp*

The current width of the available screen space, in dp units, corresponding to 
<a 
href="guide/topics/resources/providing-resources.html#ScreenWidthQualifier">screen
width resource qualifier. Set to (|android.content.res.Configuration|) if no 
width is specified. 


*int_android.content.res.Configuration.seq*




*int_android.content.res.Configuration.SMALLEST_SCREEN_WIDTH_DP_UNDEFINED*

Default value for (|android.content.res.Configuration|) indicating that no 
width has been specified. 


*int_android.content.res.Configuration.smallestScreenWidthDp*

The smallest screen size an application will see in normal operation, 
corresponding to <a 
href="guide/topics/resources/providing-resources.html#SmallestScreenWidthQualifier">smallest
screen width resource qualifier. This is the smallest value of both 
screenWidthDp and screenHeightDp in both portrait and landscape. Set to 
(|android.content.res.Configuration|) if no width is specified. 


*int_android.content.res.Configuration.touchscreen*

The kind of touch screen attached to the device. One of: 
(|android.content.res.Configuration|) , (|android.content.res.Configuration|) . 


*int_android.content.res.Configuration.TOUCHSCREEN_FINGER*

Constant for (|android.content.res.Configuration|) , value corresponding to the 
<a 
href="guide/topics/resources/providing-resources.html#TouchscreenQualifier">finger
resource qualifier. 


*int_android.content.res.Configuration.TOUCHSCREEN_NOTOUCH*

Constant for (|android.content.res.Configuration|) , value corresponding to the 
<a 
href="guide/topics/resources/providing-resources.html#TouchscreenQualifier">notouch
resource qualifier. 


*int_android.content.res.Configuration.TOUCHSCREEN_STYLUS*




*int_android.content.res.Configuration.TOUCHSCREEN_UNDEFINED*

Constant for (|android.content.res.Configuration|) : a value indicating that no 
value has been set. 


*int_android.content.res.Configuration.UI_MODE_NIGHT_MASK*

Constant for (|android.content.res.Configuration|) : bits that encode the night 
mode. 


*int_android.content.res.Configuration.UI_MODE_NIGHT_NO*

Constant for (|android.content.res.Configuration|) : a 
(|android.content.res.Configuration|) value that corresponds to the <a 
href="guide/topics/resources/providing-resources.html#NightQualifier">notnight 
resource qualifier. 


*int_android.content.res.Configuration.UI_MODE_NIGHT_UNDEFINED*

Constant for (|android.content.res.Configuration|) : a 
(|android.content.res.Configuration|) value indicating that no mode type has 
been set. 


*int_android.content.res.Configuration.UI_MODE_NIGHT_YES*

Constant for (|android.content.res.Configuration|) : a 
(|android.content.res.Configuration|) value that corresponds to the <a 
href="guide/topics/resources/providing-resources.html#NightQualifier">night 
resource qualifier. 


*int_android.content.res.Configuration.UI_MODE_TYPE_APPLIANCE*

Constant for (|android.content.res.Configuration|) : a 
(|android.content.res.Configuration|) value that corresponds to the <a 
href="guide/topics/resources/providing-resources.html#UiModeQualifier">appliance
resource qualifier. 


*int_android.content.res.Configuration.UI_MODE_TYPE_CAR*

Constant for (|android.content.res.Configuration|) : a 
(|android.content.res.Configuration|) value that corresponds to the <a 
href="guide/topics/resources/providing-resources.html#UiModeQualifier">car 
resource qualifier. 


*int_android.content.res.Configuration.UI_MODE_TYPE_DESK*

Constant for (|android.content.res.Configuration|) : a 
(|android.content.res.Configuration|) value that corresponds to the <a 
href="guide/topics/resources/providing-resources.html#UiModeQualifier">desk 
resource qualifier. 


*int_android.content.res.Configuration.UI_MODE_TYPE_MASK*

Constant for (|android.content.res.Configuration|) : bits that encode the mode 
type. 


*int_android.content.res.Configuration.UI_MODE_TYPE_NORMAL*

Constant for (|android.content.res.Configuration|) : a 
(|android.content.res.Configuration|) value that corresponds to <a 
href="guide/topics/resources/providing-resources.html#UiModeQualifier">no UI 
mode resource qualifier specified. 


*int_android.content.res.Configuration.UI_MODE_TYPE_TELEVISION*

Constant for (|android.content.res.Configuration|) : a 
(|android.content.res.Configuration|) value that corresponds to the <a 
href="guide/topics/resources/providing-resources.html#UiModeQualifier">television
resource qualifier. 


*int_android.content.res.Configuration.UI_MODE_TYPE_UNDEFINED*

Constant for (|android.content.res.Configuration|) : a 
(|android.content.res.Configuration|) value indicating that no mode type has 
been set. 


*int_android.content.res.Configuration.uiMode*

Bit mask of the ui mode. Currently there are two fields: The 
(|android.content.res.Configuration|) bits define the overall ui mode of the 
device. They may be one of (|android.content.res.Configuration|) , 
(|android.content.res.Configuration|) , (|android.content.res.Configuration|) , 
(|android.content.res.Configuration|) , (|android.content.res.Configuration|) , 
or (|android.content.res.Configuration|) . 

The (|android.content.res.Configuration|) defines whether the screen is in a 
special mode. They may be one of (|android.content.res.Configuration|) , 
(|android.content.res.Configuration|) or (|android.content.res.Configuration|) 
. 


*boolean_android.content.res.Configuration.userSetLocale*

Locale should persist on setting. This is hidden because it is really 
questionable whether this is the right way to expose the functionality. 



*android.content.res.Configuration()*

public Configuration()

Construct an invalid Configuration. You must call 
(|android.content.res.Configuration|) for this object to be valid. 


*android.content.res.Configuration(Configuration)*

public Configuration(android.content.res.Configuration o)

Makes a deep copy suitable for modification. 


*android.content.res.Configuration.compareTo(Configuration)*

public int compareTo(android.content.res.Configuration that)





*android.content.res.Configuration.describeContents()*

public int describeContents()

Parcelable methods 



*android.content.res.Configuration.diff(Configuration)*

public int diff(android.content.res.Configuration delta)

Return a bit mask of the differences between this Configuration object and the 
given one. Does not change the values of either. Any undefined fields in delta 
are ignored. 



    Returns: Returns a bit mask indicating which configuration values has changed, 
             containing any combination of {@link 
             android.content.pm.ActivityInfo#CONFIG_FONT_SCALE 
             PackageManager.ActivityInfo.CONFIG_FONT_SCALE}, {@link 
             android.content.pm.ActivityInfo#CONFIG_MCC 
             PackageManager.ActivityInfo.CONFIG_MCC}, {@link 
             android.content.pm.ActivityInfo#CONFIG_MNC 
             PackageManager.ActivityInfo.CONFIG_MNC}, {@link 
             android.content.pm.ActivityInfo#CONFIG_LOCALE 
             PackageManager.ActivityInfo.CONFIG_LOCALE}, {@link 
             android.content.pm.ActivityInfo#CONFIG_TOUCHSCREEN 
             PackageManager.ActivityInfo.CONFIG_TOUCHSCREEN}, {@link 
             android.content.pm.ActivityInfo#CONFIG_KEYBOARD 
             PackageManager.ActivityInfo.CONFIG_KEYBOARD}, {@link 
             android.content.pm.ActivityInfo#CONFIG_NAVIGATION 
             PackageManager.ActivityInfo.CONFIG_NAVIGATION}, {@link 
             android.content.pm.ActivityInfo#CONFIG_ORIENTATION 
             PackageManager.ActivityInfo.CONFIG_ORIENTATION}, {@link 
             android.content.pm.ActivityInfo#CONFIG_SCREEN_LAYOUT 
             PackageManager.ActivityInfo.CONFIG_SCREEN_LAYOUT}, or {@link 
             android.content.pm.ActivityInfo#CONFIG_SCREEN_SIZE 
             PackageManager.ActivityInfo.CONFIG_SCREEN_SIZE}, or {@link 
             android.content.pm.ActivityInfo#CONFIG_SMALLEST_SCREEN_SIZE 
             PackageManager.ActivityInfo.CONFIG_SMALLEST_SCREEN_SIZE}. {@link 
             android.content.pm.ActivityInfo#CONFIG_LAYOUT_DIRECTION 
             PackageManager.ActivityInfo.CONFIG_LAYOUT_DIRECTION}. 

*android.content.res.Configuration.equals(Configuration)*

public boolean equals(android.content.res.Configuration that)





*android.content.res.Configuration.equals(Object)*

public boolean equals(java.lang.Object that)





*android.content.res.Configuration.getLayoutDirection()*

public int getLayoutDirection()

Return the layout direction. Will be either (|android.view.View|) or 
(|android.view.View|) . 



    Returns: Returns {@link View#LAYOUT_DIRECTION_RTL} if the configuration is {@link 
             #SCREENLAYOUT_LAYOUTDIR_RTL}, otherwise {@link 
             View#LAYOUT_DIRECTION_LTR}. 

*android.content.res.Configuration.hashCode()*

public int hashCode()





*android.content.res.Configuration.isLayoutSizeAtLeast(int)*

public boolean isLayoutSizeAtLeast(int size)

Check if the Configuration's current (|android.content.res.Configuration|) is 
at least the given size. 


    size - The desired size, either {@link #SCREENLAYOUT_SIZE_SMALL}, {@link 
       #SCREENLAYOUT_SIZE_NORMAL}, {@link #SCREENLAYOUT_SIZE_LARGE}, or {@link 
       #SCREENLAYOUT_SIZE_XLARGE}. 

    Returns: Returns true if the current screen layout size is at least the given size. 

*android.content.res.Configuration.isOtherSeqNewer(Configuration)*

public boolean isOtherSeqNewer(android.content.res.Configuration other)





*android.content.res.Configuration.makeDefault()*

public void makeDefault()





*android.content.res.Configuration.needNewResources(int,int)*

public static boolean needNewResources(
  int configChanges,
  int interestingChanges)

Determine if a new resource needs to be loaded from the bit set of 
configuration changes returned by (|android.content.res.Configuration|) . 


    configChanges - The mask of changes configurations as returned by {@link 
       #updateFrom(Configuration)}. 
    interestingChanges - The configuration changes that the resource can handled, as given in {@link 
       android.util.TypedValue#changingConfigurations}. 

    Returns: Return true if the resource needs to be loaded, else false. 

*android.content.res.Configuration.readFromParcel(Parcel)*

public void readFromParcel(android.os.Parcel source)





*android.content.res.Configuration.reduceScreenLayout(int,int,int)*

public static int reduceScreenLayout(
  int curLayout,
  int longSizeDp,
  int shortSizeDp)





*android.content.res.Configuration.resetScreenLayout(int)*

public static int resetScreenLayout(int curLayout)





*android.content.res.Configuration.setLayoutDirection(Locale)*

public void setLayoutDirection(java.util.Locale locale)

Set the layout direction from the Locale. 


    locale - The Locale. If null will set the layout direction to {@link 
       View#LAYOUT_DIRECTION_LTR}. If not null will set it to the layout 
       direction corresponding to the Locale. 

*android.content.res.Configuration.setLocale(Locale)*

public void setLocale(java.util.Locale loc)

Set the locale. This is the preferred way for setting up the locale (instead of 
using the direct accessor). This will also set the userLocale and layout 
direction according to the locale. 


    loc - The locale. Can be null. 

*android.content.res.Configuration.setTo(Configuration)*

public void setTo(android.content.res.Configuration o)





*android.content.res.Configuration.setToDefaults()*

public void setToDefaults()

Set this object to the system defaults. 



*android.content.res.Configuration.toString()*

public |java.lang.String| toString()





*android.content.res.Configuration.updateFrom(Configuration)*

public int updateFrom(android.content.res.Configuration delta)

Copy the fields from delta into this Configuration object, keeping track of 
which ones have changed. Any undefined fields in delta are ignored and not 
copied in to the current Configuration. 



    Returns: Returns a bit mask of the changed fields, as per {@link #diff}. 

*android.content.res.Configuration.writeToParcel(Parcel,int)*

public void writeToParcel(
  android.os.Parcel dest,
  int flags)






