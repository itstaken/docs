*android.os.Build.VERSION_CODES* *Build.VERSION_CODES* Enumeration of the curren

public static class Build.VERSION_CODES
  extends    |java.lang.Object|

|android.os.Build.VERSION_CODES_Description|
|android.os.Build.VERSION_CODES_Fields|
|android.os.Build.VERSION_CODES_Constructors|
|android.os.Build.VERSION_CODES_Methods|

================================================================================

*android.os.Build.VERSION_CODES_Fields*
|int_android.os.Build.VERSION_CODES.BASE|
|int_android.os.Build.VERSION_CODES.BASE_1_1|
|int_android.os.Build.VERSION_CODES.CUPCAKE|
|int_android.os.Build.VERSION_CODES.CUR_DEVELOPMENT|
|int_android.os.Build.VERSION_CODES.DONUT|
|int_android.os.Build.VERSION_CODES.ECLAIR|
|int_android.os.Build.VERSION_CODES.ECLAIR_0_1|
|int_android.os.Build.VERSION_CODES.ECLAIR_MR1|
|int_android.os.Build.VERSION_CODES.FROYO|
|int_android.os.Build.VERSION_CODES.GINGERBREAD|
|int_android.os.Build.VERSION_CODES.GINGERBREAD_MR1|
|int_android.os.Build.VERSION_CODES.HONEYCOMB|
|int_android.os.Build.VERSION_CODES.HONEYCOMB_MR1|
|int_android.os.Build.VERSION_CODES.HONEYCOMB_MR2|
|int_android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH|
|int_android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1|
|int_android.os.Build.VERSION_CODES.JELLY_BEAN|
|int_android.os.Build.VERSION_CODES.JELLY_BEAN_MR1|
|int_android.os.Build.VERSION_CODES.JELLY_BEAN_MR2|
|int_android.os.Build.VERSION_CODES.KITKAT|

*android.os.Build.VERSION_CODES_Constructors*
|android.os.Build.VERSION_CODES()|

*android.os.Build.VERSION_CODES_Description*

Enumeration of the currently known SDK version codes. These are the values that 
can be found in (|android.os.Build.VERSION|) . Version numbers increment 
monotonically with each official platform release. 



*int_android.os.Build.VERSION_CODES.BASE*

October 2008: The original, first, version of Android. Yay! 


*int_android.os.Build.VERSION_CODES.BASE_1_1*

February 2009: First Android update, officially called 1.1. 


*int_android.os.Build.VERSION_CODES.CUPCAKE*

May 2009: Android 1.5. 


*int_android.os.Build.VERSION_CODES.CUR_DEVELOPMENT*

Magic version number for a current development build, which has not yet turned 
into an official release. 


*int_android.os.Build.VERSION_CODES.DONUT*

September 2009: Android 1.6. 

Applications targeting this or a later release will get these new changes in 
behavior: 

They must explicitly request the (|android.Manifest.permission|) permission to 
be able to modify the contents of the SD card. (Apps targeting earlier versions 
will always request the permission.) They must explicitly request the 
(|android.Manifest.permission|) permission to be able to be able to retrieve 
phone state info. (Apps targeting earlier versions will always request the 
permission.) They are assumed to support different screen densities and sizes. 
(Apps targeting earlier versions are assumed to only support medium density 
normal size screens unless otherwise indicated). They can still explicitly 
specify screen support either way with the supports-screens manifest tag. 
(|android.widget.TabHost|) will use the new dark tab background design. 


*int_android.os.Build.VERSION_CODES.ECLAIR*

November 2009: Android 2.0 

Applications targeting this or a later release will get these new changes in 
behavior: 

The Service.onStartCommand(|android.app.Service|) function will return the new 
(|android.app.Service|) behavior instead of the old compatibility 
(|android.app.Service|) . The (|android.app.Activity|) class will now execute 
back key presses on the key up instead of key down, to be able to detect 
canceled presses from virtual keys. The (|android.widget.TabWidget|) class will 
use a new color scheme for tabs. In the new scheme, the foreground tab has a 
medium gray background the background tabs have a dark gray background. 


*int_android.os.Build.VERSION_CODES.ECLAIR_0_1*

December 2009: Android 2.0.1 


*int_android.os.Build.VERSION_CODES.ECLAIR_MR1*

January 2010: Android 2.1 


*int_android.os.Build.VERSION_CODES.FROYO*

June 2010: Android 2.2 


*int_android.os.Build.VERSION_CODES.GINGERBREAD*

November 2010: Android 2.3 

Applications targeting this or a later release will get these new changes in 
behavior: 

The application's notification icons will be shown on the new dark status bar 
background, so must be visible in this situation. 


*int_android.os.Build.VERSION_CODES.GINGERBREAD_MR1*

February 2011: Android 2.3.3. 


*int_android.os.Build.VERSION_CODES.HONEYCOMB*

February 2011: Android 3.0. 

Applications targeting this or a later release will get these new changes in 
behavior: 

The default theme for applications is now dark holographic: (|android.R.style|) 
. On large screen devices that do not have a physical menu button, the soft 
(compatibility) menu is disabled. The activity lifecycle has changed slightly 
as per (|android.app.Activity|) . An application will crash if it does not call 
through to the super implementation of its 
Activity.onPause()(|android.app.Activity|) method. When an application requires 
a permission to access one of its components (activity, receiver, service, 
provider), this permission is no longer enforced when the application wants to 
access its own component. This means it can require a permission on a component 
that it does not itself hold and still access that component. 
Context.getSharedPreferences()(|android.content.Context|) will not 
automatically reload the preferences if they have changed on storage, unless 
(|android.content.Context|) is used. (|android.view.ViewGroup|) will default to 
true. (|android.view.WindowManager.LayoutParams|) is enabled by default on 
windows. PopupWindow.isSplitTouchEnabled()(|android.widget.PopupWindow|) will 
return true by default. (|android.widget.GridView|) and 
(|android.widget.ListView|) will use View.setActivated(|android.view.View|) for 
selected items if they do not implement (|android.widget.Checkable|) . 
(|android.widget.Scroller|) will be constructed with "flywheel" behavior 
enabled by default. 


*int_android.os.Build.VERSION_CODES.HONEYCOMB_MR1*

May 2011: Android 3.1. 


*int_android.os.Build.VERSION_CODES.HONEYCOMB_MR2*

June 2011: Android 3.2. 

Update to Honeycomb MR1 to support 7 inch tablets, improve screen compatibility 
mode, etc. 

As of this version, applications that don't say whether they support XLARGE 
screens will be assumed to do so only if they target 
(|android.os.Build.VERSION_CODES|) or later; it had been 
(|android.os.Build.VERSION_CODES|) or later. Applications that don't support a 
screen size at least as large as the current screen will provide the user with 
a UI to switch them in to screen size compatibility mode. 

This version introduces new screen size resource qualifiers based on the screen 
size in dp: see (|android.content.res.Configuration|) , 
(|android.content.res.Configuration|) , and 
(|android.content.res.Configuration|) . Supplying these in <supports-screens> 
as per (|android.content.pm.ApplicationInfo|) , 
(|android.content.pm.ApplicationInfo|) , and 
(|android.content.pm.ApplicationInfo|) is preferred over the older screen size 
buckets and for older devices the appropriate buckets will be inferred from 
them. 

Applications targeting this or a later release will get these new changes in 
behavior: 

New (|android.content.pm.PackageManager|) and 
(|android.content.pm.PackageManager|) features were introduced in this release. 
Applications that target previous platform versions are assumed to require both 
portrait and landscape support in the device; when targeting Honeycomb MR1 or 
greater the application is responsible for specifying any specific orientation 
it requires. (|android.os.AsyncTask|) will use the serial executor by default 
when calling (|android.os.AsyncTask|) . 
ActivityInfo.configChanges(|android.content.pm.ActivityInfo|) will have the 
(|android.content.pm.ActivityInfo|) and (|android.content.pm.ActivityInfo|) 
bits set; these need to be cleared for older applications because some 
developers have done absolute comparisons against this value instead of 
correctly masking the bits they are interested in. 


*int_android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH*

October 2011: Android 4.0. 

Applications targeting this or a later release will get these new changes in 
behavior: 

For devices without a dedicated menu key, the software compatibility menu key 
will not be shown even on phones. By targeting Ice Cream Sandwich or later, 
your UI must always have its own menu UI affordance if needed, on both tablets 
and phones. The ActionBar will take care of this for you. 2d drawing hardware 
acceleration is now turned on by default. You can use 
android:hardwareAccelerated(|android.R.attr|) to turn it off if needed, 
although this is strongly discouraged since it will result in poor performance 
on larger screen devices. The default theme for applications is now the "device 
default" theme: (|android.R.style|) . This may be the holo dark theme or a 
different dark theme defined by the specific device. The (|android.R.style|) 
family must not be modified for a device to be considered compatible. 
Applications that explicitly request a theme from the Holo family will be 
guaranteed that these themes will not change character within the same platform 
version. Applications that wish to blend in with the device should use a theme 
from the (|android.R.style|) family. Managed cursors can now throw an exception 
if you directly close the cursor yourself without stopping the management of 
it; previously failures would be silently ignored. The fadingEdge attribute on 
views will be ignored (fading edges is no longer a standard part of the UI). A 
new requiresFadingEdge attribute allows applications to still force fading 
edges on for special cases. Context.bindService()(|android.content.Context|) 
will not automatically add in (|android.content.Context|) . App Widgets will 
have standard padding automatically added around them, rather than relying on 
the padding being baked into the widget itself. An exception will be thrown if 
you try to change the type of a window after it has been added to the window 
manager. Previously this would result in random incorrect behavior. 
(|android.view.animation.AnimationSet|) will parse out the duration, 
fillBefore, fillAfter, repeatMode, and startOffset XML attributes that are 
defined. ActionBar.setHomeButtonEnabled()(|android.app.ActionBar|) is false by 
default. 


*int_android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1*

December 2011: Android 4.0.3. 


*int_android.os.Build.VERSION_CODES.JELLY_BEAN*

June 2012: Android 4.1. 

Applications targeting this or a later release will get these new changes in 
behavior: 

You must explicitly request the (|android.Manifest.permission|) and/or 
(|android.Manifest.permission|) permissions; access to the call log is no 
longer implicitly provided through (|android.Manifest.permission|) and 
(|android.Manifest.permission|) . (|android.widget.RemoteViews|) will throw an 
exception if setting an onClick handler for views being generated by a 
(|android.widget.RemoteViewsService|) for a collection container; previously 
this just resulted in a warning log message. New (|android.app.ActionBar|) 
policy for embedded tabs: embedded tabs are now always stacked in the action 
bar when in portrait mode, regardless of the size of the screen. 
WebSettings.setAllowFileAccessFromFileURLs(|android.webkit.WebSettings|) and 
WebSettings.setAllowUniversalAccessFromFileURLs(|android.webkit.WebSettings|) 
default to false. Calls to 
PackageManager.setComponentEnabledSetting(|android.content.pm.PackageManager|) 
will now throw an IllegalArgumentException if the given component class name 
does not exist in the application's manifest. 
NfcAdapter.setNdefPushMessage(|android.nfc.NfcAdapter|) , 
NfcAdapter.setNdefPushMessageCallback(|android.nfc.NfcAdapter|) and 
NfcAdapter.setOnNdefPushCompleteCallback(|android.nfc.NfcAdapter|) will throw 
IllegalStateException if called after the Activity has been destroyed. 
Accessibility services must require the new (|android.Manifest.permission|) 
permission or they will not be available for use. 
AccessibilityServiceInfo.FLAG_INCLUDE_NOT_IMPORTANT_VIEWS(|android.accessibilityservice.AccessibilityServiceInfo|)
must be set for unimportant views to be included in queries. 


*int_android.os.Build.VERSION_CODES.JELLY_BEAN_MR1*

Android 4.2: Moar jelly beans! 

Applications targeting this or a later release will get these new changes in 
behavior: 

Content Providers: The default value ofandroid:exportedis nowfalse. See <a 
href="guide/topics/manifest/provider-element.html#exported"> the 
android:exported section in the provider documentation for more details. 
View.getLayoutDirection()(|android.view.View|) can return different values than 
(|android.view.View|) based on the locale etc. 
WebView.addJavascriptInterface(|android.webkit.WebView|) requires explicit 
annotations on methods for them to be accessible from Javascript. 


*int_android.os.Build.VERSION_CODES.JELLY_BEAN_MR2*

Android 4.3: Jelly Bean MR2, the revenge of the beans. 


*int_android.os.Build.VERSION_CODES.KITKAT*

Android 4.4: KitKat, another tasty treat. 

Applications targeting this or a later release will get these new changes in 
behavior: 

The default result of {android.preference.PreferenceActivity#isValidFragment 
PreferenceActivity.isValueFragment} becomes false instead of true. In 
(|android.webkit.WebView|) , apps targeting earlier versions will have JS URLs 
evaluated directly and any result of the evaluation will not replace the 
current page content. Apps targetting KITKAT or later that load a JS URL will 
have the result of that URL replace the content of the current page 
AlarmManager.set(|android.app.AlarmManager|) becomes interpreted as an inexact 
value, to give the system more flexibility in scheduling alarms. 
Context.getSharedPreferences(|android.content.Context|) no longer allows a null 
name. (|android.widget.RelativeLayout|) changes to compute wrapped content 
margins correctly. (|android.app.ActionBar|) 's window content overlay is 
allowed to be drawn. The (|android.Manifest.permission|) permission is now 
always enforced. Access to package-specific external storage directories 
belonging to the calling app no longer requires the 
(|android.Manifest.permission|) or (|android.Manifest.permission|) permissions. 



*android.os.Build.VERSION_CODES()*

public Build.VERSION_CODES()




