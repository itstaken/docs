*android.app.IntentService* *IntentService* IntentService is a base class forSer

public abstract class IntentService
  extends    |android.app.Service|

|android.app.IntentService_Description|
|android.app.IntentService_Fields|
|android.app.IntentService_Constructors|
|android.app.IntentService_Methods|

================================================================================

*android.app.IntentService_Constructors*
|android.app.IntentService(String)|Creates an IntentService.

*android.app.IntentService_Methods*
|android.app.IntentService.onBind(Intent)|Unless you provide binding for your s
|android.app.IntentService.onCreate()|
|android.app.IntentService.onDestroy()|
|android.app.IntentService.onHandleIntent(Intent)|This method is invoked on the
|android.app.IntentService.onStart(Intent,int)|
|android.app.IntentService.onStartCommand(Intent,int,int)|You should not overri
|android.app.IntentService.setIntentRedelivery(boolean)|Sets intent redelivery 

*android.app.IntentService_Description*

IntentService is a base class for (|android.app.Service|) s that handle 
asynchronous requests (expressed as (|android.content.Intent|) s) on demand. 
Clients send requests through (|android.content.Context|) calls; the service is 
started as needed, handles each Intent in turn using a worker thread, and stops 
itself when it runs out of work. 

This "work queue processor" pattern is commonly used to offload tasks from an 
application's main thread. The IntentService class exists to simplify this 
pattern and take care of the mechanics. To use it, extend IntentService and 
implement (|android.app.IntentService|) . IntentService will receive the 
Intents, launch a worker thread, and stop the service as appropriate. 

All requests are handled on a single worker thread -- they may take as long as 
necessary (and will not block the application's main loop), but only one 
request will be processed at a time. 

Developer Guides For a detailed discussion about how to create services, read 
the <a href="guide/topics/fundamentals/services.html">Services developer guide. 



*android.app.IntentService(String)*

public IntentService(java.lang.String name)

Creates an IntentService. Invoked by your subclass's constructor. 

    name - Used to name the worker thread, important only for debugging. 

*android.app.IntentService.onBind(Intent)*

public |android.os.IBinder| onBind(android.content.Intent intent)

Unless you provide binding for your service, you don't need to implement this 
method, because the default implementation returns null. 



*android.app.IntentService.onCreate()*

public void onCreate()





*android.app.IntentService.onDestroy()*

public void onDestroy()





*android.app.IntentService.onHandleIntent(Intent)*

protected abstract void onHandleIntent(android.content.Intent intent)

This method is invoked on the worker thread with a request to process. Only one 
Intent is processed at a time, but the processing happens on a worker thread 
that runs independently from other application logic. So, if this code takes a 
long time, it will hold up other requests to the same IntentService, but it 
will not hold up anything else. When all requests have been handled, the 
IntentService stops itself, so you should not call 
(|android.app.IntentService|) . 


    intent - The value passed to {@link android.content.Context#startService(Intent)}. 

*android.app.IntentService.onStart(Intent,int)*

public void onStart(
  android.content.Intent intent,
  int startId)





*android.app.IntentService.onStartCommand(Intent,int,int)*

public int onStartCommand(
  android.content.Intent intent,
  int flags,
  int startId)

You should not override this method for your IntentService. Instead, override 
(|android.app.IntentService|) , which the system calls when the IntentService 
receives a start request. 



*android.app.IntentService.setIntentRedelivery(boolean)*

public void setIntentRedelivery(boolean enabled)

Sets intent redelivery preferences. Usually called from the constructor with 
your preferred semantics. 

If enabled is true, (|android.app.IntentService|) will return 
(|android.app.Service|) , so if this process dies before 
(|android.app.IntentService|) returns, the process will be restarted and the 
intent redelivered. If multiple Intents have been sent, only the most recent 
one is guaranteed to be redelivered. 

If enabled is false (the default), (|android.app.IntentService|) will return 
(|android.app.Service|) , and if the process dies, the Intent dies along with 
it. 




