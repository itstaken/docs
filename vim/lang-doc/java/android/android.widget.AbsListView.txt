*android.widget.AbsListView* *AbsListView* Base class that can be used to implem

public abstract class AbsListView
  extends    |android.widget.AdapterView|
  implements |android.text.TextWatcher|
             |android.view.ViewTreeObserver.OnGlobalLayoutListener|
             |android.widget.Filter.FilterListener|
             |android.view.ViewTreeObserver.OnTouchModeChangeListener|
             |android.widget.RemoteViewsAdapter.RemoteAdapterConnectionCallback|

|android.widget.AbsListView_Description|
|android.widget.AbsListView_Fields|
|android.widget.AbsListView_Constructors|
|android.widget.AbsListView_Methods|

================================================================================

*android.widget.AbsListView_Fields*
|int_android.widget.AbsListView.CHOICE_MODE_MULTIPLE|
|int_android.widget.AbsListView.CHOICE_MODE_MULTIPLE_MODAL|
|int_android.widget.AbsListView.CHOICE_MODE_NONE|
|int_android.widget.AbsListView.CHOICE_MODE_SINGLE|
|int_android.widget.AbsListView.TRANSCRIPT_MODE_ALWAYS_SCROLL|
|int_android.widget.AbsListView.TRANSCRIPT_MODE_DISABLED|
|int_android.widget.AbsListView.TRANSCRIPT_MODE_NORMAL|

*android.widget.AbsListView_Constructors*
|android.widget.AbsListView(Context)|
|android.widget.AbsListView(Context,AttributeSet)|
|android.widget.AbsListView(Context,AttributeSet,int)|

*android.widget.AbsListView_Methods*
|android.widget.AbsListView.addTouchables(ArrayList<View>)|
|android.widget.AbsListView.afterTextChanged(Editable)|For our text watcher tha
|android.widget.AbsListView.beforeTextChanged(CharSequence,int,int,int)|For our
|android.widget.AbsListView.canScrollList(int)|Check if the items in the list c
|android.widget.AbsListView.checkInputConnectionProxy(View)|For filtering we pr
|android.widget.AbsListView.checkLayoutParams(ViewGroup.LayoutParams)|
|android.widget.AbsListView.clearChoices()|Clear any choices previously set
|android.widget.AbsListView.clearTextFilter()|Clear the text filter.
|android.widget.AbsListView.computeVerticalScrollExtent()|
|android.widget.AbsListView.computeVerticalScrollOffset()|
|android.widget.AbsListView.computeVerticalScrollRange()|
|android.widget.AbsListView.deferNotifyDataSetChanged()|This defers a notifyDat
|android.widget.AbsListView.dispatchDraw(Canvas)|
|android.widget.AbsListView.dispatchSetPressed(boolean)|
|android.widget.AbsListView.draw(Canvas)|
|android.widget.AbsListView.drawableStateChanged()|
|android.widget.AbsListView.findViewByAccessibilityIdTraversal(int)|
|android.widget.AbsListView.generateDefaultLayoutParams()|
|android.widget.AbsListView.generateLayoutParams(AttributeSet)|
|android.widget.AbsListView.generateLayoutParams(ViewGroup.LayoutParams)|
|android.widget.AbsListView.getBottomFadingEdgeStrength()|
|android.widget.AbsListView.getBottomPaddingOffset()|
|android.widget.AbsListView.getCacheColorHint()|When set to a non-zero value, t
|android.widget.AbsListView.getCheckedItemCount()|Returns the number of items c
|android.widget.AbsListView.getCheckedItemIds()|Returns the set of checked item
|android.widget.AbsListView.getCheckedItemPosition()|Returns the currently chec
|android.widget.AbsListView.getCheckedItemPositions()|Returns the set of checke
|android.widget.AbsListView.getChoiceMode()|
|android.widget.AbsListView.getContextMenuInfo()|
|android.widget.AbsListView.getFocusedRect(Rect)|
|android.widget.AbsListView.getLeftPaddingOffset()|
|android.widget.AbsListView.getListPaddingBottom()|List padding is the maximum 
|android.widget.AbsListView.getListPaddingLeft()|List padding is the maximum of
|android.widget.AbsListView.getListPaddingRight()|List padding is the maximum o
|android.widget.AbsListView.getListPaddingTop()|List padding is the maximum of 
|android.widget.AbsListView.getRightPaddingOffset()|
|android.widget.AbsListView.getSelectedView()|
|android.widget.AbsListView.getSelector()|Returns the selectorandroid.graphics.
|android.widget.AbsListView.getSolidColor()|
|android.widget.AbsListView.getTextFilter()|Returns the list's text filter, if 
|android.widget.AbsListView.getTopFadingEdgeStrength()|
|android.widget.AbsListView.getTopPaddingOffset()|
|android.widget.AbsListView.getTranscriptMode()|Returns the current transcript 
|android.widget.AbsListView.getVerticalScrollbarWidth()|
|android.widget.AbsListView.handleDataChanged()|
|android.widget.AbsListView.hasTextFilter()|Returns if the ListView currently h
|android.widget.AbsListView.invalidateViews()|Causes all the views to be rebuil
|android.widget.AbsListView.isFastScrollAlwaysVisible()|Returns true if the fas
|android.widget.AbsListView.isFastScrollEnabled()|Returns true if the fast scro
|android.widget.AbsListView.isInFilterMode()|
|android.widget.AbsListView.isItemChecked(int)|Returns the checked state of the
|android.widget.AbsListView.isPaddingOffsetRequired()|
|android.widget.AbsListView.isScrollingCacheEnabled()|Indicates whether the chi
|android.widget.AbsListView.isSmoothScrollbarEnabled()|Returns the current stat
|android.widget.AbsListView.isStackFromBottom()|Indicates whether the content o
|android.widget.AbsListView.isTextFilterEnabled()|Indicates whether type filter
|android.widget.AbsListView.isVerticalScrollBarHidden()|If fast scroll is enabl
|android.widget.AbsListView.jumpDrawablesToCurrentState()|
|android.widget.AbsListView.layoutChildren()|Subclasses must override this meth
|android.widget.AbsListView.onAttachedToWindow()|
|android.widget.AbsListView.onCancelPendingInputEvents()|
|android.widget.AbsListView.onCreateDrawableState(int)|
|android.widget.AbsListView.onCreateInputConnection(EditorInfo)|Return an Input
|android.widget.AbsListView.onDetachedFromWindow()|
|android.widget.AbsListView.onDisplayHint(int)|
|android.widget.AbsListView.onFilterComplete(int)|
|android.widget.AbsListView.onFocusChanged(boolean,int,Rect)|
|android.widget.AbsListView.onGenericMotionEvent(MotionEvent)|
|android.widget.AbsListView.onGlobalLayout()|
|android.widget.AbsListView.onInitializeAccessibilityEvent(AccessibilityEvent)|
|android.widget.AbsListView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)|
|android.widget.AbsListView.onInitializeAccessibilityNodeInfoForItem(View,int,AccessibilityNodeInfo)|
|android.widget.AbsListView.onInterceptHoverEvent(MotionEvent)|
|android.widget.AbsListView.onInterceptTouchEvent(MotionEvent)|
|android.widget.AbsListView.onKeyDown(int,KeyEvent)|
|android.widget.AbsListView.onKeyUp(int,KeyEvent)|
|android.widget.AbsListView.onLayout(boolean,int,int,int,int)|Subclasses should
|android.widget.AbsListView.onMeasure(int,int)|
|android.widget.AbsListView.onOverScrolled(int,int,boolean,boolean)|
|android.widget.AbsListView.onRemoteAdapterConnected()|Called back when the ada
|android.widget.AbsListView.onRemoteAdapterDisconnected()|Called back when the 
|android.widget.AbsListView.onRestoreInstanceState(Parcelable)|
|android.widget.AbsListView.onRtlPropertiesChanged(int)|
|android.widget.AbsListView.onSaveInstanceState()|
|android.widget.AbsListView.onSizeChanged(int,int,int,int)|
|android.widget.AbsListView.onTextChanged(CharSequence,int,int,int)|For our tex
|android.widget.AbsListView.onTouchEvent(MotionEvent)|
|android.widget.AbsListView.onTouchModeChanged(boolean)|
|android.widget.AbsListView.onWindowFocusChanged(boolean)|
|android.widget.AbsListView.performAccessibilityAction(int,Bundle)|
|android.widget.AbsListView.performItemClick(View,int,long)|
|android.widget.AbsListView.pointToPosition(int,int)|Maps a point to a position
|android.widget.AbsListView.pointToRowId(int,int)|Maps a point to a the rowId o
|android.widget.AbsListView.reclaimViews(List<View>)|Move all views (excluding 
|android.widget.AbsListView.requestDisallowInterceptTouchEvent(boolean)|
|android.widget.AbsListView.requestLayout()|
|android.widget.AbsListView.scrollListBy(int)|Scrolls the list items within the
|android.widget.AbsListView.sendAccessibilityEvent(int)|
|android.widget.AbsListView.setAdapter(ListAdapter)|
|android.widget.AbsListView.setCacheColorHint(int)|When set to a non-zero value
|android.widget.AbsListView.setChoiceMode(int)|Defines the choice behavior for 
|android.widget.AbsListView.setDrawSelectorOnTop(boolean)|Controls whether the 
|android.widget.AbsListView.setFastScrollAlwaysVisible(boolean)|Set whether or 
|android.widget.AbsListView.setFastScrollEnabled(boolean)|Specifies whether fas
|android.widget.AbsListView.setFilterText(String)|Sets the initial value for th
|android.widget.AbsListView.setFrame(int,int,int,int)|
|android.widget.AbsListView.setFriction(float)|The amount of friction applied t
|android.widget.AbsListView.setItemChecked(int,boolean)|Sets the checked state 
|android.widget.AbsListView.setMultiChoiceModeListener(AbsListView.MultiChoiceModeListener)|
|android.widget.AbsListView.setOnScrollListener(AbsListView.OnScrollListener)|S
|android.widget.AbsListView.setOverScrollEffectPadding(int,int)|
|android.widget.AbsListView.setOverScrollMode(int)|
|android.widget.AbsListView.setRecyclerListener(AbsListView.RecyclerListener)|S
|android.widget.AbsListView.setRemoteViewsAdapter(Intent)|Sets up this AbsListV
|android.widget.AbsListView.setRemoteViewsOnClickHandler(RemoteViews.OnClickHandler)|
|android.widget.AbsListView.setScrollBarStyle(int)|
|android.widget.AbsListView.setScrollIndicators(View,View)|
|android.widget.AbsListView.setScrollingCacheEnabled(boolean)|Enables or disabl
|android.widget.AbsListView.setSelector(Drawable)|
|android.widget.AbsListView.setSelector(int)|Set a Drawable that should be used
|android.widget.AbsListView.setSmoothScrollbarEnabled(boolean)|When smooth scro
|android.widget.AbsListView.setStackFromBottom(boolean)|When stack from bottom 
|android.widget.AbsListView.setTextFilterEnabled(boolean)|Enables or disables t
|android.widget.AbsListView.setTranscriptMode(int)|Puts the list or grid into t
|android.widget.AbsListView.setVelocityScale(float)|Sets a scale factor for the
|android.widget.AbsListView.setVerticalScrollbarPosition(int)|
|android.widget.AbsListView.showContextMenu(float,float,int)|
|android.widget.AbsListView.showContextMenuForChild(View)|
|android.widget.AbsListView.smoothScrollBy(int,int)|Smoothly scroll by distance
|android.widget.AbsListView.smoothScrollToPosition(int)|Smoothly scroll to the 
|android.widget.AbsListView.smoothScrollToPosition(int,int)|Smoothly scroll to 
|android.widget.AbsListView.smoothScrollToPositionFromTop(int,int)|Smoothly scr
|android.widget.AbsListView.smoothScrollToPositionFromTop(int,int,int)|Smoothly
|android.widget.AbsListView.verifyDrawable(Drawable)|

*android.widget.AbsListView_Description*

Base class that can be used to implement virtualized lists of items. A list 
does not have a spatial definition here. For instance, subclases of this class 
can display the content of the list in a grid, in a carousel, as stack, etc. 



*int_android.widget.AbsListView.CHOICE_MODE_MULTIPLE*

The list allows multiple choices 


*int_android.widget.AbsListView.CHOICE_MODE_MULTIPLE_MODAL*

The list allows multiple choices in a modal selection mode 


*int_android.widget.AbsListView.CHOICE_MODE_NONE*

Normal list that does not indicate choices 


*int_android.widget.AbsListView.CHOICE_MODE_SINGLE*

The list allows up to one choice 


*int_android.widget.AbsListView.TRANSCRIPT_MODE_ALWAYS_SCROLL*

The list will automatically scroll to the bottom, no matter what items are 
currently visible. 


*int_android.widget.AbsListView.TRANSCRIPT_MODE_DISABLED*

Disables the transcript mode. 


*int_android.widget.AbsListView.TRANSCRIPT_MODE_NORMAL*

The list will automatically scroll to the bottom when a data set change 
notification is received and only if the last item is already visible on 
screen. 



*android.widget.AbsListView(Context)*

public AbsListView(android.content.Context context)




*android.widget.AbsListView(Context,AttributeSet)*

public AbsListView(
  android.content.Context context,
  android.util.AttributeSet attrs)




*android.widget.AbsListView(Context,AttributeSet,int)*

public AbsListView(
  android.content.Context context,
  android.util.AttributeSet attrs,
  int defStyle)




*android.widget.AbsListView.addTouchables(ArrayList<View>)*

public void addTouchables(java.util.ArrayList<android.view.View> views)





*android.widget.AbsListView.afterTextChanged(Editable)*

public void afterTextChanged(android.text.Editable s)

For our text watcher that is associated with the text filter. Does nothing. 



*android.widget.AbsListView.beforeTextChanged(CharSequence,int,int,int)*

public void beforeTextChanged(
  java.lang.CharSequence s,
  int start,
  int count,
  int after)

For our text watcher that is associated with the text filter. Does nothing. 



*android.widget.AbsListView.canScrollList(int)*

public boolean canScrollList(int direction)

Check if the items in the list can be scrolled in a certain direction. 


    direction - Negative to check scrolling up, positive to check scrolling down. 

    Returns: true if the list can be scrolled in the specified direction, false otherwise. 

*android.widget.AbsListView.checkInputConnectionProxy(View)*

public boolean checkInputConnectionProxy(android.view.View view)

For filtering we proxy an input connection to an internal text editor, and this 
allows the proxying to happen. 



*android.widget.AbsListView.checkLayoutParams(ViewGroup.LayoutParams)*

protected boolean checkLayoutParams(android.view.ViewGroup.LayoutParams p)





*android.widget.AbsListView.clearChoices()*

public void clearChoices()

Clear any choices previously set 



*android.widget.AbsListView.clearTextFilter()*

public void clearTextFilter()

Clear the text filter. 



*android.widget.AbsListView.computeVerticalScrollExtent()*

protected int computeVerticalScrollExtent()





*android.widget.AbsListView.computeVerticalScrollOffset()*

protected int computeVerticalScrollOffset()





*android.widget.AbsListView.computeVerticalScrollRange()*

protected int computeVerticalScrollRange()





*android.widget.AbsListView.deferNotifyDataSetChanged()*

public void deferNotifyDataSetChanged()

This defers a notifyDataSetChanged on the pending RemoteViewsAdapter if it has 
not connected yet. 



*android.widget.AbsListView.dispatchDraw(Canvas)*

protected void dispatchDraw(Canvas canvas)





*android.widget.AbsListView.dispatchSetPressed(boolean)*

protected void dispatchSetPressed(boolean pressed)





*android.widget.AbsListView.draw(Canvas)*

public void draw(Canvas canvas)





*android.widget.AbsListView.drawableStateChanged()*

protected void drawableStateChanged()





*android.widget.AbsListView.findViewByAccessibilityIdTraversal(int)*

public |android.view.View| findViewByAccessibilityIdTraversal(int accessibilityId)





*android.widget.AbsListView.generateDefaultLayoutParams()*

protected |android.view.ViewGroup.LayoutParams| generateDefaultLayoutParams()





*android.widget.AbsListView.generateLayoutParams(AttributeSet)*

public |android.widget.AbsListView.LayoutParams| generateLayoutParams(android.util.AttributeSet attrs)





*android.widget.AbsListView.generateLayoutParams(ViewGroup.LayoutParams)*

protected |android.view.ViewGroup.LayoutParams| generateLayoutParams(android.view.ViewGroup.LayoutParams p)





*android.widget.AbsListView.getBottomFadingEdgeStrength()*

protected float getBottomFadingEdgeStrength()





*android.widget.AbsListView.getBottomPaddingOffset()*

protected int getBottomPaddingOffset()





*android.widget.AbsListView.getCacheColorHint()*

public int getCacheColorHint()

When set to a non-zero value, the cache color hint indicates that this list is 
always drawn on top of a solid, single-color, opaque background 



    Returns: The cache color hint 

*android.widget.AbsListView.getCheckedItemCount()*

public int getCheckedItemCount()

Returns the number of items currently selected. This will only be valid if the 
choice mode is not (|android.widget.AbsListView|) (default). 

To determine the specific items that are currently selected, use one of the 
getChecked* methods. 



    Returns: The number of items currently selected 

*android.widget.AbsListView.getCheckedItemIds()*

public long[] getCheckedItemIds()

Returns the set of checked items ids. The result is only valid if the choice 
mode has not been set to (|android.widget.AbsListView|) and the adapter has 
stable IDs. ( (|android.widget.ListAdapter|) ==true) 



    Returns: A new array which contains the id of each checked item in the list. 

*android.widget.AbsListView.getCheckedItemPosition()*

public int getCheckedItemPosition()

Returns the currently checked item. The result is only valid if the choice mode 
has been set to (|android.widget.AbsListView|) . 



    Returns: The position of the currently checked item or {@link #INVALID_POSITION} if 
             nothing is selected 

*android.widget.AbsListView.getCheckedItemPositions()*

public |android.util.SparseBooleanArray| getCheckedItemPositions()

Returns the set of checked items in the list. The result is only valid if the 
choice mode has not been set to (|android.widget.AbsListView|) . 



    Returns: A SparseBooleanArray which will return true for each call to get(int position) 
             where position is a checked position in the list and false 
             otherwise, or null if the choice mode is set to {@link 
             #CHOICE_MODE_NONE}. 

*android.widget.AbsListView.getChoiceMode()*

public int getChoiceMode()





    Returns: The current choice mode 

*android.widget.AbsListView.getContextMenuInfo()*

protected |android.view.ContextMenu.ContextMenuInfo| getContextMenuInfo()





*android.widget.AbsListView.getFocusedRect(Rect)*

public void getFocusedRect(Rect r)





*android.widget.AbsListView.getLeftPaddingOffset()*

protected int getLeftPaddingOffset()





*android.widget.AbsListView.getListPaddingBottom()*

public int getListPaddingBottom()

List padding is the maximum of the normal view's padding and the padding of the 
selector. 



    Returns: The bottom list padding. 

*android.widget.AbsListView.getListPaddingLeft()*

public int getListPaddingLeft()

List padding is the maximum of the normal view's padding and the padding of the 
selector. 



    Returns: The left list padding. 

*android.widget.AbsListView.getListPaddingRight()*

public int getListPaddingRight()

List padding is the maximum of the normal view's padding and the padding of the 
selector. 



    Returns: The right list padding. 

*android.widget.AbsListView.getListPaddingTop()*

public int getListPaddingTop()

List padding is the maximum of the normal view's padding and the padding of the 
selector. 



    Returns: The top list padding. 

*android.widget.AbsListView.getRightPaddingOffset()*

protected int getRightPaddingOffset()





*android.widget.AbsListView.getSelectedView()*

public |android.view.View| getSelectedView()





*android.widget.AbsListView.getSelector()*

public Drawable getSelector()

Returns the selector (|android.graphics.drawable.Drawable|) that is used to 
draw the selection in the list. 



    Returns: the drawable used to display the selector 

*android.widget.AbsListView.getSolidColor()*

public int getSolidColor()





*android.widget.AbsListView.getTextFilter()*

public |java.lang.CharSequence| getTextFilter()

Returns the list's text filter, if available. 



    Returns: the list's text filter or null if filtering isn't enabled 

*android.widget.AbsListView.getTopFadingEdgeStrength()*

protected float getTopFadingEdgeStrength()





*android.widget.AbsListView.getTopPaddingOffset()*

protected int getTopPaddingOffset()





*android.widget.AbsListView.getTranscriptMode()*

public int getTranscriptMode()

Returns the current transcript mode. 



    Returns: {@link #TRANSCRIPT_MODE_DISABLED}, {@link #TRANSCRIPT_MODE_NORMAL} or {@link 
             #TRANSCRIPT_MODE_ALWAYS_SCROLL} 

*android.widget.AbsListView.getVerticalScrollbarWidth()*

public int getVerticalScrollbarWidth()





*android.widget.AbsListView.handleDataChanged()*

protected void handleDataChanged()





*android.widget.AbsListView.hasTextFilter()*

public boolean hasTextFilter()

Returns if the ListView currently has a text filter. 



*android.widget.AbsListView.invalidateViews()*

public void invalidateViews()

Causes all the views to be rebuilt and redrawn. 



*android.widget.AbsListView.isFastScrollAlwaysVisible()*

public boolean isFastScrollAlwaysVisible()

Returns true if the fast scroller is set to always show on this view. 



    Returns: true if the fast scroller will always show 

*android.widget.AbsListView.isFastScrollEnabled()*

public boolean isFastScrollEnabled()

Returns true if the fast scroller is enabled. 



    Returns: true if fast scroll is enabled, false otherwise 

*android.widget.AbsListView.isInFilterMode()*

protected boolean isInFilterMode()





*android.widget.AbsListView.isItemChecked(int)*

public boolean isItemChecked(int position)

Returns the checked state of the specified position. The result is only valid 
if the choice mode has been set to (|android.widget.AbsListView|) or 
(|android.widget.AbsListView|) . 


    position - The item whose checked state to return 

    Returns: The item's checked state or false if choice mode is invalid 

*android.widget.AbsListView.isPaddingOffsetRequired()*

protected boolean isPaddingOffsetRequired()





*android.widget.AbsListView.isScrollingCacheEnabled()*

public boolean isScrollingCacheEnabled()

Indicates whether the children's drawing cache is used during a scroll. By 
default, the drawing cache is enabled but this will consume more memory. 



    Returns: true if the scrolling cache is enabled, false otherwise 

*android.widget.AbsListView.isSmoothScrollbarEnabled()*

public boolean isSmoothScrollbarEnabled()

Returns the current state of the fast scroll feature. 



    Returns: True if smooth scrollbar is enabled is enabled, false otherwise. 

*android.widget.AbsListView.isStackFromBottom()*

public boolean isStackFromBottom()

Indicates whether the content of this view is pinned to, or stacked from, the 
bottom edge. 



    Returns: true if the content is stacked from the bottom edge, false otherwise 

*android.widget.AbsListView.isTextFilterEnabled()*

public boolean isTextFilterEnabled()

Indicates whether type filtering is enabled for this view 



    Returns: true if type filtering is enabled, false otherwise 

*android.widget.AbsListView.isVerticalScrollBarHidden()*

protected boolean isVerticalScrollBarHidden()

If fast scroll is enabled, then don't draw the vertical scrollbar. 



*android.widget.AbsListView.jumpDrawablesToCurrentState()*

public void jumpDrawablesToCurrentState()





*android.widget.AbsListView.layoutChildren()*

protected void layoutChildren()

Subclasses must override this method to layout their children. 



*android.widget.AbsListView.onAttachedToWindow()*

protected void onAttachedToWindow()





*android.widget.AbsListView.onCancelPendingInputEvents()*

public void onCancelPendingInputEvents()





*android.widget.AbsListView.onCreateDrawableState(int)*

protected int[] onCreateDrawableState(int extraSpace)





*android.widget.AbsListView.onCreateInputConnection(EditorInfo)*

public |android.view.inputmethod.InputConnection| onCreateInputConnection(android.view.inputmethod.EditorInfo outAttrs)

Return an InputConnection for editing of the filter text. 



*android.widget.AbsListView.onDetachedFromWindow()*

protected void onDetachedFromWindow()





*android.widget.AbsListView.onDisplayHint(int)*

protected void onDisplayHint(int hint)





*android.widget.AbsListView.onFilterComplete(int)*

public void onFilterComplete(int count)





*android.widget.AbsListView.onFocusChanged(boolean,int,Rect)*

protected void onFocusChanged(
  boolean gainFocus,
  int direction,
  Rect previouslyFocusedRect)





*android.widget.AbsListView.onGenericMotionEvent(MotionEvent)*

public boolean onGenericMotionEvent(android.view.MotionEvent event)





*android.widget.AbsListView.onGlobalLayout()*

public void onGlobalLayout()





*android.widget.AbsListView.onInitializeAccessibilityEvent(AccessibilityEvent)*

public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent event)





*android.widget.AbsListView.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)*

public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo info)





*android.widget.AbsListView.onInitializeAccessibilityNodeInfoForItem(View,int,AccessibilityNodeInfo)*

public void onInitializeAccessibilityNodeInfoForItem(
  android.view.View view,
  int position,
  android.view.accessibility.AccessibilityNodeInfo info)

Initializes an (|android.view.accessibility.AccessibilityNodeInfo|) with 
information about a particular item in the list. 


    view - View representing the list item. 
    position - Position of the list item within the adapter. 
    info - Node info to populate. 

*android.widget.AbsListView.onInterceptHoverEvent(MotionEvent)*

public boolean onInterceptHoverEvent(android.view.MotionEvent event)





*android.widget.AbsListView.onInterceptTouchEvent(MotionEvent)*

public boolean onInterceptTouchEvent(android.view.MotionEvent ev)





*android.widget.AbsListView.onKeyDown(int,KeyEvent)*

public boolean onKeyDown(
  int keyCode,
  android.view.KeyEvent event)





*android.widget.AbsListView.onKeyUp(int,KeyEvent)*

public boolean onKeyUp(
  int keyCode,
  android.view.KeyEvent event)





*android.widget.AbsListView.onLayout(boolean,int,int,int,int)*

protected void onLayout(
  boolean changed,
  int l,
  int t,
  int r,
  int b)

Subclasses should NOT override this method but (|android.widget.AbsListView|) 
instead. 



*android.widget.AbsListView.onMeasure(int,int)*

protected void onMeasure(
  int widthMeasureSpec,
  int heightMeasureSpec)





*android.widget.AbsListView.onOverScrolled(int,int,boolean,boolean)*

protected void onOverScrolled(
  int scrollX,
  int scrollY,
  boolean clampedX,
  boolean clampedY)





*android.widget.AbsListView.onRemoteAdapterConnected()*

public boolean onRemoteAdapterConnected()

Called back when the adapter connects to the RemoteViewsService. 



*android.widget.AbsListView.onRemoteAdapterDisconnected()*

public void onRemoteAdapterDisconnected()

Called back when the adapter disconnects from the RemoteViewsService. 



*android.widget.AbsListView.onRestoreInstanceState(Parcelable)*

public void onRestoreInstanceState(android.os.Parcelable state)





*android.widget.AbsListView.onRtlPropertiesChanged(int)*

public void onRtlPropertiesChanged(int layoutDirection)





*android.widget.AbsListView.onSaveInstanceState()*

public |android.os.Parcelable| onSaveInstanceState()





*android.widget.AbsListView.onSizeChanged(int,int,int,int)*

protected void onSizeChanged(
  int w,
  int h,
  int oldw,
  int oldh)





*android.widget.AbsListView.onTextChanged(CharSequence,int,int,int)*

public void onTextChanged(
  java.lang.CharSequence s,
  int start,
  int before,
  int count)

For our text watcher that is associated with the text filter. Performs the 
actual filtering as the text changes, and takes care of hiding and showing the 
popup displaying the currently entered filter text. 



*android.widget.AbsListView.onTouchEvent(MotionEvent)*

public boolean onTouchEvent(android.view.MotionEvent ev)





*android.widget.AbsListView.onTouchModeChanged(boolean)*

public void onTouchModeChanged(boolean isInTouchMode)





*android.widget.AbsListView.onWindowFocusChanged(boolean)*

public void onWindowFocusChanged(boolean hasWindowFocus)





*android.widget.AbsListView.performAccessibilityAction(int,Bundle)*

public boolean performAccessibilityAction(
  int action,
  android.os.Bundle arguments)





*android.widget.AbsListView.performItemClick(View,int,long)*

public boolean performItemClick(
  android.view.View view,
  int position,
  long id)





*android.widget.AbsListView.pointToPosition(int,int)*

public int pointToPosition(
  int x,
  int y)

Maps a point to a position in the list. 


    x - X in local coordinate 
    y - Y in local coordinate 

    Returns: The position of the item which contains the specified point, or {@link 
             #INVALID_POSITION} if the point does not intersect an item. 

*android.widget.AbsListView.pointToRowId(int,int)*

public long pointToRowId(
  int x,
  int y)

Maps a point to a the rowId of the item which intersects that point. 


    x - X in local coordinate 
    y - Y in local coordinate 

    Returns: The rowId of the item which contains the specified point, or {@link 
             #INVALID_ROW_ID} if the point does not intersect an item. 

*android.widget.AbsListView.reclaimViews(List<View>)*

public void reclaimViews(java.util.List<android.view.View> views)

Move all views (excluding headers and footers) held by this AbsListView into 
the supplied List. This includes views displayed on the screen as well as views 
stored in AbsListView's internal view recycler. 


    views - A list into which to put the reclaimed views 

*android.widget.AbsListView.requestDisallowInterceptTouchEvent(boolean)*

public void requestDisallowInterceptTouchEvent(boolean disallowIntercept)





*android.widget.AbsListView.requestLayout()*

public void requestLayout()





*android.widget.AbsListView.scrollListBy(int)*

public void scrollListBy(int y)

Scrolls the list items within the view by a specified number of pixels. 


    y - the amount of pixels to scroll by vertically 

*android.widget.AbsListView.sendAccessibilityEvent(int)*

public void sendAccessibilityEvent(int eventType)





*android.widget.AbsListView.setAdapter(ListAdapter)*

public void setAdapter(android.widget.ListAdapter adapter)





*android.widget.AbsListView.setCacheColorHint(int)*

public void setCacheColorHint(int color)

When set to a non-zero value, the cache color hint indicates that this list is 
always drawn on top of a solid, single-color, opaque background. 

Zero means that what's behind this object is translucent (non solid) or is not 
made of a single color. This hint will not affect any existing background 
drawable set on this view ( typically set via (|android.widget.AbsListView|) ). 


    color - The background color 

*android.widget.AbsListView.setChoiceMode(int)*

public void setChoiceMode(int choiceMode)

Defines the choice behavior for the List. By default, Lists do not have any 
choice behavior ( (|android.widget.AbsListView|) ). By setting the choiceMode 
to (|android.widget.AbsListView|) , the List allows up to one item to be in a 
chosen state. By setting the choiceMode to (|android.widget.AbsListView|) , the 
list allows any number of items to be chosen. 


    choiceMode - One of {@link #CHOICE_MODE_NONE}, {@link #CHOICE_MODE_SINGLE}, or {@link 
       #CHOICE_MODE_MULTIPLE} 

*android.widget.AbsListView.setDrawSelectorOnTop(boolean)*

public void setDrawSelectorOnTop(boolean onTop)

Controls whether the selection highlight drawable should be drawn on top of the 
item or behind it. 


    onTop - If true, the selector will be drawn on the item it is highlighting. The default 
       is false. 

*android.widget.AbsListView.setFastScrollAlwaysVisible(boolean)*

public void setFastScrollAlwaysVisible(boolean alwaysShow)

Set whether or not the fast scroller should always be shown in place of the 
standard scroll bars. This will enable fast scrolling if it is not already 
enabled. 

Fast scrollers shown in this way will not fade out and will be a permanent 
fixture within the list. This is best combined with an inset scroll bar style 
to ensure the scroll bar does not overlap content. 


    alwaysShow - true if the fast scroller should always be displayed, false otherwise 

*android.widget.AbsListView.setFastScrollEnabled(boolean)*

public void setFastScrollEnabled(boolean enabled)

Specifies whether fast scrolling is enabled or disabled. 

When fast scrolling is enabled, the user can quickly scroll through lists by 
dragging the fast scroll thumb. 

If the adapter backing this list implements (|android.widget.SectionIndexer|) , 
the fast scroller will display section header previews as the user scrolls. 
Additionally, the user will be able to quickly jump between sections by tapping 
along the length of the scroll bar. 


    enabled - true to enable fast scrolling, false otherwise 

*android.widget.AbsListView.setFilterText(String)*

public void setFilterText(java.lang.String filterText)

Sets the initial value for the text filter. 


    filterText - The text to use for the filter. 

*android.widget.AbsListView.setFrame(int,int,int,int)*

protected boolean setFrame(
  int left,
  int top,
  int right,
  int bottom)





*android.widget.AbsListView.setFriction(float)*

public void setFriction(float friction)

The amount of friction applied to flings. The default value is 
(|android.view.ViewConfiguration|) . 



*android.widget.AbsListView.setItemChecked(int,boolean)*

public void setItemChecked(
  int position,
  boolean value)

Sets the checked state of the specified position. The is only valid if the 
choice mode has been set to (|android.widget.AbsListView|) or 
(|android.widget.AbsListView|) . 


    position - The item whose checked state is to be checked 
    value - The new checked state for the item 

*android.widget.AbsListView.setMultiChoiceModeListener(AbsListView.MultiChoiceModeListener)*

public void setMultiChoiceModeListener(android.widget.AbsListView.MultiChoiceModeListener listener)

Set a (|android.widget.AbsListView.MultiChoiceModeListener|) that will manage 
the lifecycle of the selection (|android.view.ActionMode|) . Only used when the 
choice mode is set to (|android.widget.AbsListView|) . 


    listener - Listener that will manage the selection mode 

*android.widget.AbsListView.setOnScrollListener(AbsListView.OnScrollListener)*

public void setOnScrollListener(android.widget.AbsListView.OnScrollListener l)

Set the listener that will receive notifications every time the list scrolls. 


    l - the scroll listener 

*android.widget.AbsListView.setOverScrollEffectPadding(int,int)*

public void setOverScrollEffectPadding(
  int leftPadding,
  int rightPadding)





*android.widget.AbsListView.setOverScrollMode(int)*

public void setOverScrollMode(int mode)





*android.widget.AbsListView.setRecyclerListener(AbsListView.RecyclerListener)*

public void setRecyclerListener(android.widget.AbsListView.RecyclerListener listener)

Sets the recycler listener to be notified whenever a View is set aside in the 
recycler for later reuse. This listener can be used to free resources 
associated to the View. 


    listener - The recycler listener to be notified of views set aside in the recycler. 

*android.widget.AbsListView.setRemoteViewsAdapter(Intent)*

public void setRemoteViewsAdapter(android.content.Intent intent)

Sets up this AbsListView to use a remote views adapter which connects to a 
RemoteViewsService through the specified intent. 


    intent - the intent used to identify the RemoteViewsService for the adapter to connect 
       to. 

*android.widget.AbsListView.setRemoteViewsOnClickHandler(RemoteViews.OnClickHandler)*

public void setRemoteViewsOnClickHandler(android.widget.RemoteViews.OnClickHandler handler)

Sets up the onClickHandler to be used by the RemoteViewsAdapter when inflating 
RemoteViews 


    handler - The OnClickHandler to use when inflating RemoteViews. 

*android.widget.AbsListView.setScrollBarStyle(int)*

public void setScrollBarStyle(int style)





*android.widget.AbsListView.setScrollIndicators(View,View)*

public void setScrollIndicators(
  android.view.View up,
  android.view.View down)





*android.widget.AbsListView.setScrollingCacheEnabled(boolean)*

public void setScrollingCacheEnabled(boolean enabled)

Enables or disables the children's drawing cache during a scroll. By default, 
the drawing cache is enabled but this will use more memory. 

When the scrolling cache is enabled, the caches are kept after the first 
scrolling. You can manually clear the cache by calling 
(|android.view.ViewGroup|) . 


    enabled - true to enable the scroll cache, false otherwise 

*android.widget.AbsListView.setSelector(Drawable)*

public void setSelector(Drawable sel)





*android.widget.AbsListView.setSelector(int)*

public void setSelector(int resID)

Set a Drawable that should be used to highlight the currently selected item. 


    resID - A Drawable resource to use as the selection highlight. 

*android.widget.AbsListView.setSmoothScrollbarEnabled(boolean)*

public void setSmoothScrollbarEnabled(boolean enabled)

When smooth scrollbar is enabled, the position and size of the scrollbar thumb 
is computed based on the number of visible pixels in the visible items. This 
however assumes that all list items have the same height. If you use a list in 
which items have different heights, the scrollbar will change appearance as the 
user scrolls through the list. To avoid this issue, you need to disable this 
property. 

When smooth scrollbar is disabled, the position and size of the scrollbar thumb 
is based solely on the number of items in the adapter and the position of the 
visible items inside the adapter. This provides a stable scrollbar as the user 
navigates through a list of items with varying heights. 


    enabled - Whether or not to enable smooth scrollbar. 

*android.widget.AbsListView.setStackFromBottom(boolean)*

public void setStackFromBottom(boolean stackFromBottom)

When stack from bottom is set to true, the list fills its content starting from 
the bottom of the view. 


    stackFromBottom - true to pin the view's content to the bottom edge, false to pin the view's 
       content to the top edge 

*android.widget.AbsListView.setTextFilterEnabled(boolean)*

public void setTextFilterEnabled(boolean textFilterEnabled)

Enables or disables the type filter window. If enabled, typing when this view 
has focus will filter the children to match the users input. Note that the 
(|android.widget.Adapter|) used by this view must implement the 
(|android.widget.Filterable|) interface. 


    textFilterEnabled - true to enable type filtering, false otherwise 

*android.widget.AbsListView.setTranscriptMode(int)*

public void setTranscriptMode(int mode)

Puts the list or grid into transcript mode. In this mode the list or grid will 
always scroll to the bottom to show new items. 


    mode - the transcript mode to set 

*android.widget.AbsListView.setVelocityScale(float)*

public void setVelocityScale(float scale)

Sets a scale factor for the fling velocity. The initial scale factor is 1.0. 


    scale - The scale factor to multiply the velocity by. 

*android.widget.AbsListView.setVerticalScrollbarPosition(int)*

public void setVerticalScrollbarPosition(int position)





*android.widget.AbsListView.showContextMenu(float,float,int)*

public boolean showContextMenu(
  float x,
  float y,
  int metaState)





*android.widget.AbsListView.showContextMenuForChild(View)*

public boolean showContextMenuForChild(android.view.View originalView)





*android.widget.AbsListView.smoothScrollBy(int,int)*

public void smoothScrollBy(
  int distance,
  int duration)

Smoothly scroll by distance pixels over duration milliseconds. 


    distance - Distance to scroll in pixels. 
    duration - Duration of the scroll animation in milliseconds. 

*android.widget.AbsListView.smoothScrollToPosition(int)*

public void smoothScrollToPosition(int position)

Smoothly scroll to the specified adapter position. The view will scroll such 
that the indicated position is displayed. 


    position - Scroll to this adapter position. 

*android.widget.AbsListView.smoothScrollToPosition(int,int)*

public void smoothScrollToPosition(
  int position,
  int boundPosition)

Smoothly scroll to the specified adapter position. The view will scroll such 
that the indicated position is displayed, but it will stop early if scrolling 
further would scroll boundPosition out of view. 


    position - Scroll to this adapter position. 
    boundPosition - Do not scroll if it would move this adapter position out of view. 

*android.widget.AbsListView.smoothScrollToPositionFromTop(int,int)*

public void smoothScrollToPositionFromTop(
  int position,
  int offset)

Smoothly scroll to the specified adapter position. The view will scroll such 
that the indicated position is displayed offset pixels from the top edge of the 
view. If this is impossible, (e.g. the offset would scroll the first or last 
item beyond the boundaries of the list) it will get as close as possible. 


    position - Position to scroll to 
    offset - Desired distance in pixels of position from the top of the view when scrolling 
       is finished 

*android.widget.AbsListView.smoothScrollToPositionFromTop(int,int,int)*

public void smoothScrollToPositionFromTop(
  int position,
  int offset,
  int duration)

Smoothly scroll to the specified adapter position. The view will scroll such 
that the indicated position is displayed offset pixels from the top edge of the 
view. If this is impossible, (e.g. the offset would scroll the first or last 
item beyond the boundaries of the list) it will get as close as possible. The 
scroll will take duration milliseconds to complete. 


    position - Position to scroll to 
    offset - Desired distance in pixels of position from the top of the view when scrolling 
       is finished 
    duration - Number of milliseconds to use for the scroll 

*android.widget.AbsListView.verifyDrawable(Drawable)*

public boolean verifyDrawable(Drawable dr)






