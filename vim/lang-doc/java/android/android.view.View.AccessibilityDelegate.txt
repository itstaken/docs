*android.view.View.AccessibilityDelegate* *View.AccessibilityDelegate* 
 This cl

public static class View.AccessibilityDelegate
  extends    |java.lang.Object|

|android.view.View.AccessibilityDelegate_Description|
|android.view.View.AccessibilityDelegate_Fields|
|android.view.View.AccessibilityDelegate_Constructors|
|android.view.View.AccessibilityDelegate_Methods|

================================================================================

*android.view.View.AccessibilityDelegate_Constructors*
|android.view.View.AccessibilityDelegate()|

*android.view.View.AccessibilityDelegate_Methods*
|android.view.View.AccessibilityDelegate.createAccessibilityNodeInfo(View)|Retu
|android.view.View.AccessibilityDelegate.dispatchPopulateAccessibilityEvent(View,AccessibilityEvent)|
|android.view.View.AccessibilityDelegate.getAccessibilityNodeProvider(View)|Get
|android.view.View.AccessibilityDelegate.onInitializeAccessibilityEvent(View,AccessibilityEvent)|
|android.view.View.AccessibilityDelegate.onInitializeAccessibilityNodeInfo(View,AccessibilityNodeInfo)|
|android.view.View.AccessibilityDelegate.onPopulateAccessibilityEvent(View,AccessibilityEvent)|
|android.view.View.AccessibilityDelegate.onRequestSendAccessibilityEvent(ViewGroup,View,AccessibilityEvent)|
|android.view.View.AccessibilityDelegate.performAccessibilityAction(View,int,Bundle)|
|android.view.View.AccessibilityDelegate.sendAccessibilityEvent(View,int)|Sends
|android.view.View.AccessibilityDelegate.sendAccessibilityEventUnchecked(View,AccessibilityEvent)|

*android.view.View.AccessibilityDelegate_Description*

This class represents a delegate that can be registered in a 
(|android.view.View|) to enhance accessibility support via composition rather 
via inheritance. It is specifically targeted to widget developers that extend 
basic View classes i.e. classes in package android.view, that would like their 
applications to be backwards compatible. 

Developer Guides For more information about making applications accessible, 
read the <a href="guide/topics/ui/accessibility/index.html">Accessibility 
developer guide. 

A scenario in which a developer would like to use an accessibility delegate is 
overriding a method introduced in a later API version then the minimal API 
version supported by the application. For example, the method 
(|android.view.View|) is not available in API version 4 when the accessibility 
APIs were first introduced. If a developer would like his application to run on 
API version 4 devices (assuming all other APIs used by the application are 
version 4 or lower) and take advantage of this method, instead of overriding 
the method which would break the application's backwards compatibility, he can 
override the corresponding method in this delegate and register the delegate in 
the target View if the API version of the system is high enough i.e. the API 
version is same or higher to the API version that introduced 
(|android.view.View|) . 

Here is an example implementation: 



if (Build.VERSION.SDK_INT >= 14) { // If the API version is equal of higher 
than the version in // which onInitializeAccessibilityNodeInfo was introduced 
we // register a delegate with a customized implementation. View view = 
findViewById(R.id.view_id); view.setAccessibilityDelegate(new 
AccessibilityDelegate() { public void onInitializeAccessibilityNodeInfo(View 
host, AccessibilityNodeInfo info) { // Let the default implementation populate 
the info. super.onInitializeAccessibilityNodeInfo(host, info); // Set some 
other information. info.setEnabled(host.isEnabled()); } }); } 

This delegate contains methods that correspond to the accessibility methods in 
View. If a delegate has been specified the implementation in View hands off 
handling to the corresponding method in this delegate. The default 
implementation the delegate methods behaves exactly as the corresponding method 
in View for the case of no accessibility delegate been set. Hence, to customize 
the behavior of a View method, clients can override only the corresponding 
delegate method without altering the behavior of the rest accessibility related 
methods of the host view. 



*android.view.View.AccessibilityDelegate()*

public View.AccessibilityDelegate()




*android.view.View.AccessibilityDelegate.createAccessibilityNodeInfo(View)*

public |android.view.accessibility.AccessibilityNodeInfo| createAccessibilityNodeInfo(android.view.View host)

Returns an (|android.view.accessibility.AccessibilityNodeInfo|) representing 
the host view from the point of view of an 
(|android.accessibilityservice.AccessibilityService|) . This method is 
responsible for obtaining an accessibility node info from a pool of reusable 
instances and calling (|android.view.View.AccessibilityDelegate|) on the host 
view to initialize the former. 

Note: The client is responsible for recycling the obtained instance by calling 
(|android.view.accessibility.AccessibilityNodeInfo|) to minimize object 
creation. 

The default implementation behaves as 
View#createAccessibilityNodeInfo()(|android.view.View|) for the case of no 
accessibility delegate been set. 



    Returns: A populated {@link AccessibilityNodeInfo}. 

*android.view.View.AccessibilityDelegate.dispatchPopulateAccessibilityEvent(View,AccessibilityEvent)*

public boolean dispatchPopulateAccessibilityEvent(
  android.view.View host,
  android.view.accessibility.AccessibilityEvent event)

Dispatches an (|android.view.accessibility.AccessibilityEvent|) to the host 
(|android.view.View|) first and then to its children for adding their text 
content to the event. 

The default implementation behaves as 
View#dispatchPopulateAccessibilityEvent(AccessibilityEvent)(|android.view.View|)
for the case of no accessibility delegate been set. 


    host - The View hosting the delegate. 
    event - The event. 

    Returns: True if the event population was completed. 

*android.view.View.AccessibilityDelegate.getAccessibilityNodeProvider(View)*

public |android.view.accessibility.AccessibilityNodeProvider| getAccessibilityNodeProvider(android.view.View host)

Gets the provider for managing a virtual view hierarchy rooted at this View and 
reported to (|android.accessibilityservice.AccessibilityService|) s that 
explore the window content. 

The default implementation behaves as 
View#getAccessibilityNodeProvider()(|android.view.View|) for the case of no 
accessibility delegate been set. 



    Returns: The provider. 

*android.view.View.AccessibilityDelegate.onInitializeAccessibilityEvent(View,AccessibilityEvent)*

public void onInitializeAccessibilityEvent(
  android.view.View host,
  android.view.accessibility.AccessibilityEvent event)

Initializes an (|android.view.accessibility.AccessibilityEvent|) with 
information about the the host View which is the event source. 

The default implementation behaves as 
View#onInitializeAccessibilityEvent(AccessibilityEvent)(|android.view.View|) 
for the case of no accessibility delegate been set. 


    host - The View hosting the delegate. 
    event - The event to initialize. 

*android.view.View.AccessibilityDelegate.onInitializeAccessibilityNodeInfo(View,AccessibilityNodeInfo)*

public void onInitializeAccessibilityNodeInfo(
  android.view.View host,
  android.view.accessibility.AccessibilityNodeInfo info)

Initializes an (|android.view.accessibility.AccessibilityNodeInfo|) with 
information about the host view. 

The default implementation behaves as 
View#onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)(|android.view.View|)
for the case of no accessibility delegate been set. 


    host - The View hosting the delegate. 
    info - The instance to initialize. 

*android.view.View.AccessibilityDelegate.onPopulateAccessibilityEvent(View,AccessibilityEvent)*

public void onPopulateAccessibilityEvent(
  android.view.View host,
  android.view.accessibility.AccessibilityEvent event)

Gives a chance to the host View to populate the accessibility event with its 
text content. 

The default implementation behaves as 
View#onPopulateAccessibilityEvent(AccessibilityEvent)(|android.view.View|) for 
the case of no accessibility delegate been set. 


    host - The View hosting the delegate. 
    event - The accessibility event which to populate. 

*android.view.View.AccessibilityDelegate.onRequestSendAccessibilityEvent(ViewGroup,View,AccessibilityEvent)*

public boolean onRequestSendAccessibilityEvent(
  android.view.ViewGroup host,
  android.view.View child,
  android.view.accessibility.AccessibilityEvent event)

Called when a child of the host View has requested sending an 
(|android.view.accessibility.AccessibilityEvent|) and gives an opportunity to 
the parent (the host) to augment the event. 

The default implementation behaves as 
ViewGroup#onRequestSendAccessibilityEvent(View, 
AccessibilityEvent)(|android.view.ViewGroup|) for the case of no accessibility 
delegate been set. 


    host - The View hosting the delegate. 
    child - The child which requests sending the event. 
    event - The event to be sent. 

    Returns: True if the event should be sent 

*android.view.View.AccessibilityDelegate.performAccessibilityAction(View,int,Bundle)*

public boolean performAccessibilityAction(
  android.view.View host,
  int action,
  android.os.Bundle args)

Performs the specified accessibility action on the view. For possible 
accessibility actions look at 
(|android.view.accessibility.AccessibilityNodeInfo|) . 

The default implementation behaves as View#performAccessibilityAction(int, 
Bundle)(|android.view.View|) for the case of no accessibility delegate been 
set. 


    action - The action to perform. 

    Returns: Whether the action was performed. 

*android.view.View.AccessibilityDelegate.sendAccessibilityEvent(View,int)*

public void sendAccessibilityEvent(
  android.view.View host,
  int eventType)

Sends an accessibility event of the given type. If accessibility is not enabled 
this method has no effect. 

The default implementation behaves as 
View#sendAccessibilityEvent(int)(|android.view.View|) for the case of no 
accessibility delegate been set. 


    host - The View hosting the delegate. 
    eventType - The type of the event to send. 

*android.view.View.AccessibilityDelegate.sendAccessibilityEventUnchecked(View,AccessibilityEvent)*

public void sendAccessibilityEventUnchecked(
  android.view.View host,
  android.view.accessibility.AccessibilityEvent event)

Sends an accessibility event. This method behaves exactly as 
(|android.view.View.AccessibilityDelegate|) but takes as an argument an empty 
(|android.view.accessibility.AccessibilityEvent|) and does not perform a check 
whether accessibility is enabled. 

The default implementation behaves as 
View#sendAccessibilityEventUnchecked(AccessibilityEvent)(|android.view.View|) 
for the case of no accessibility delegate been set. 


    host - The View hosting the delegate. 
    event - The event to send. 


