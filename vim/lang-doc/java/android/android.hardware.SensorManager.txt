*android.hardware.SensorManager* *SensorManager* 
 SensorManager lets you access

public abstract class SensorManager
  extends    |java.lang.Object|

|android.hardware.SensorManager_Description|
|android.hardware.SensorManager_Fields|
|android.hardware.SensorManager_Constructors|
|android.hardware.SensorManager_Methods|

================================================================================

*android.hardware.SensorManager_Fields*
|int_android.hardware.SensorManager.AXIS_MINUS_X|
|int_android.hardware.SensorManager.AXIS_MINUS_Y|
|int_android.hardware.SensorManager.AXIS_MINUS_Z|
|int_android.hardware.SensorManager.AXIS_X|
|int_android.hardware.SensorManager.AXIS_Y|
|int_android.hardware.SensorManager.AXIS_Z|
|int_android.hardware.SensorManager.DATA_X|
|int_android.hardware.SensorManager.DATA_Y|
|int_android.hardware.SensorManager.DATA_Z|
|float_android.hardware.SensorManager.GRAVITY_DEATH_STAR_I|
|float_android.hardware.SensorManager.GRAVITY_EARTH|
|float_android.hardware.SensorManager.GRAVITY_JUPITER|
|float_android.hardware.SensorManager.GRAVITY_MARS|
|float_android.hardware.SensorManager.GRAVITY_MERCURY|
|float_android.hardware.SensorManager.GRAVITY_MOON|
|float_android.hardware.SensorManager.GRAVITY_NEPTUNE|
|float_android.hardware.SensorManager.GRAVITY_PLUTO|
|float_android.hardware.SensorManager.GRAVITY_SATURN|
|float_android.hardware.SensorManager.GRAVITY_SUN|
|float_android.hardware.SensorManager.GRAVITY_THE_ISLAND|
|float_android.hardware.SensorManager.GRAVITY_URANUS|
|float_android.hardware.SensorManager.GRAVITY_VENUS|
|float_android.hardware.SensorManager.LIGHT_CLOUDY|
|float_android.hardware.SensorManager.LIGHT_FULLMOON|
|float_android.hardware.SensorManager.LIGHT_NO_MOON|
|float_android.hardware.SensorManager.LIGHT_OVERCAST|
|float_android.hardware.SensorManager.LIGHT_SHADE|
|float_android.hardware.SensorManager.LIGHT_SUNLIGHT|
|float_android.hardware.SensorManager.LIGHT_SUNLIGHT_MAX|
|float_android.hardware.SensorManager.LIGHT_SUNRISE|
|float_android.hardware.SensorManager.MAGNETIC_FIELD_EARTH_MAX|
|float_android.hardware.SensorManager.MAGNETIC_FIELD_EARTH_MIN|
|float_android.hardware.SensorManager.PRESSURE_STANDARD_ATMOSPHERE|
|int_android.hardware.SensorManager.RAW_DATA_INDEX|
|int_android.hardware.SensorManager.RAW_DATA_X|
|int_android.hardware.SensorManager.RAW_DATA_Y|
|int_android.hardware.SensorManager.RAW_DATA_Z|
|int_android.hardware.SensorManager.SENSOR_ACCELEROMETER|
|int_android.hardware.SensorManager.SENSOR_ALL|
|int_android.hardware.SensorManager.SENSOR_DELAY_FASTEST|
|int_android.hardware.SensorManager.SENSOR_DELAY_GAME|
|int_android.hardware.SensorManager.SENSOR_DELAY_NORMAL|
|int_android.hardware.SensorManager.SENSOR_DELAY_UI|
|int_android.hardware.SensorManager.SENSOR_LIGHT|
|int_android.hardware.SensorManager.SENSOR_MAGNETIC_FIELD|
|int_android.hardware.SensorManager.SENSOR_MAX|
|int_android.hardware.SensorManager.SENSOR_MIN|
|int_android.hardware.SensorManager.SENSOR_ORIENTATION|
|int_android.hardware.SensorManager.SENSOR_ORIENTATION_RAW|
|int_android.hardware.SensorManager.SENSOR_PROXIMITY|
|int_android.hardware.SensorManager.SENSOR_STATUS_ACCURACY_HIGH|
|int_android.hardware.SensorManager.SENSOR_STATUS_ACCURACY_LOW|
|int_android.hardware.SensorManager.SENSOR_STATUS_ACCURACY_MEDIUM|
|int_android.hardware.SensorManager.SENSOR_STATUS_UNRELIABLE|
|int_android.hardware.SensorManager.SENSOR_TEMPERATURE|
|int_android.hardware.SensorManager.SENSOR_TRICORDER|
|float_android.hardware.SensorManager.STANDARD_GRAVITY|
|java.lang.String_android.hardware.SensorManager.TAG|

*android.hardware.SensorManager_Constructors*
|android.hardware.SensorManager()|

*android.hardware.SensorManager_Methods*
|android.hardware.SensorManager.cancelTriggerSensor(TriggerEventListener,Sensor)|
|android.hardware.SensorManager.cancelTriggerSensorImpl(TriggerEventListener,Sensor,boolean)|
|android.hardware.SensorManager.flush(SensorEventListener)|Flushes the batch FI
|android.hardware.SensorManager.flushImpl(SensorEventListener)|
|android.hardware.SensorManager.getAltitude(float,float)|Computes the Altitude 
|android.hardware.SensorManager.getAngleChange(float[],float[],float[])|Helper 
|android.hardware.SensorManager.getDefaultSensor(int)|Use this method to get th
|android.hardware.SensorManager.getFullSensorList()|Gets the full list of senso
|android.hardware.SensorManager.getInclination(float[])|Computes the geomagneti
|android.hardware.SensorManager.getOrientation(float[],float[])|Computes the de
|android.hardware.SensorManager.getQuaternionFromVector(float[],float[])|Helper
|android.hardware.SensorManager.getRotationMatrix(float[],float[],float[],float[])|
|android.hardware.SensorManager.getRotationMatrixFromVector(float[],float[])|He
|android.hardware.SensorManager.getSensorList(int)|Use this method to get the l
|android.hardware.SensorManager.getSensors()|
|android.hardware.SensorManager.registerListener(SensorEventListener,Sensor,int)|
|android.hardware.SensorManager.registerListener(SensorEventListener,Sensor,int,Handler)|
|android.hardware.SensorManager.registerListener(SensorEventListener,Sensor,int,int)|
|android.hardware.SensorManager.registerListener(SensorEventListener,Sensor,int,int,Handler)|
|android.hardware.SensorManager.registerListener(SensorListener,int)|Registers 
|android.hardware.SensorManager.registerListener(SensorListener,int,int)|Regist
|android.hardware.SensorManager.registerListenerImpl(SensorEventListener,Sensor,int,Handler,int,int)|
|android.hardware.SensorManager.remapCoordinateSystem(float[],int,int,float[])|
|android.hardware.SensorManager.requestTriggerSensor(TriggerEventListener,Sensor)|
|android.hardware.SensorManager.requestTriggerSensorImpl(TriggerEventListener,Sensor)|
|android.hardware.SensorManager.unregisterListener(SensorEventListener)|Unregis
|android.hardware.SensorManager.unregisterListener(SensorEventListener,Sensor)|
|android.hardware.SensorManager.unregisterListener(SensorListener)|Unregisters 
|android.hardware.SensorManager.unregisterListener(SensorListener,int)|Unregist
|android.hardware.SensorManager.unregisterListenerImpl(SensorEventListener,Sensor)|

*android.hardware.SensorManager_Description*

SensorManager lets you access the device's sensors(|android.hardware.Sensor|) . 
Get an instance of this class by calling 
Context.getSystemService()(|android.content.Context|) with the argument 
(|android.content.Context|) . 

Always make sure to disable sensors you don't need, especially when your 
activity is paused. Failing to do so can drain the battery in just a few hours. 
Note that the system will not disable sensors automatically when the screen 
turns off. 

Note: Don't use this mechanism with a Trigger Sensor, have a look at 
(|android.hardware.TriggerEventListener|) . (|android.hardware.Sensor|) is an 
example of a trigger sensor. 

public class SensorActivity extends Activity, implements SensorEventListener { 
private final SensorManager mSensorManager; private final Sensor 
mAccelerometer; 

public SensorActivity() { mSensorManager = 
(SensorManager)getSystemService(SENSOR_SERVICE); mAccelerometer = 
mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER); } 

protected void onResume() { super.onResume(); 
mSensorManager.registerListener(this, mAccelerometer, 
SensorManager.SENSOR_DELAY_NORMAL); } 

protected void onPause() { super.onPause(); 
mSensorManager.unregisterListener(this); } 

public void onAccuracyChanged(Sensor sensor, int accuracy) { } 

public void onSensorChanged(SensorEvent event) { } } 



*int_android.hardware.SensorManager.AXIS_MINUS_X*

see (|android.hardware.SensorManager|) 


*int_android.hardware.SensorManager.AXIS_MINUS_Y*

see (|android.hardware.SensorManager|) 


*int_android.hardware.SensorManager.AXIS_MINUS_Z*

see (|android.hardware.SensorManager|) 


*int_android.hardware.SensorManager.AXIS_X*

see (|android.hardware.SensorManager|) 


*int_android.hardware.SensorManager.AXIS_Y*

see (|android.hardware.SensorManager|) 


*int_android.hardware.SensorManager.AXIS_Z*

see (|android.hardware.SensorManager|) 


*int_android.hardware.SensorManager.DATA_X*

Index of the X value in the array returned by 
(|android.hardware.SensorListener|) 


*int_android.hardware.SensorManager.DATA_Y*

Index of the Y value in the array returned by 
(|android.hardware.SensorListener|) 


*int_android.hardware.SensorManager.DATA_Z*

Index of the Z value in the array returned by 
(|android.hardware.SensorListener|) 


*float_android.hardware.SensorManager.GRAVITY_DEATH_STAR_I*

Gravity (estimate) on the first Death Star in Empire units (m/s^2) 


*float_android.hardware.SensorManager.GRAVITY_EARTH*

Earth's gravity in SI units (m/s^2) 


*float_android.hardware.SensorManager.GRAVITY_JUPITER*

Jupiter's gravity in SI units (m/s^2) 


*float_android.hardware.SensorManager.GRAVITY_MARS*

Mars' gravity in SI units (m/s^2) 


*float_android.hardware.SensorManager.GRAVITY_MERCURY*

Mercury's gravity in SI units (m/s^2) 


*float_android.hardware.SensorManager.GRAVITY_MOON*

The Moon's gravity in SI units (m/s^2) 


*float_android.hardware.SensorManager.GRAVITY_NEPTUNE*

Neptune's gravity in SI units (m/s^2) 


*float_android.hardware.SensorManager.GRAVITY_PLUTO*

Pluto's gravity in SI units (m/s^2) 


*float_android.hardware.SensorManager.GRAVITY_SATURN*

Saturn's gravity in SI units (m/s^2) 


*float_android.hardware.SensorManager.GRAVITY_SUN*

Sun's gravity in SI units (m/s^2) 


*float_android.hardware.SensorManager.GRAVITY_THE_ISLAND*

Gravity on the island 


*float_android.hardware.SensorManager.GRAVITY_URANUS*

Uranus' gravity in SI units (m/s^2) 


*float_android.hardware.SensorManager.GRAVITY_VENUS*

Venus' gravity in SI units (m/s^2) 


*float_android.hardware.SensorManager.LIGHT_CLOUDY*

luminance under a cloudy sky in lux 


*float_android.hardware.SensorManager.LIGHT_FULLMOON*

luminance at night with full moon in lux 


*float_android.hardware.SensorManager.LIGHT_NO_MOON*

luminance at night with no moon in lux 


*float_android.hardware.SensorManager.LIGHT_OVERCAST*

luminance under an overcast sky in lux 


*float_android.hardware.SensorManager.LIGHT_SHADE*

luminance in shade in lux 


*float_android.hardware.SensorManager.LIGHT_SUNLIGHT*

luminance of sunlight in lux 


*float_android.hardware.SensorManager.LIGHT_SUNLIGHT_MAX*

Maximum luminance of sunlight in lux 


*float_android.hardware.SensorManager.LIGHT_SUNRISE*

luminance at sunrise in lux 


*float_android.hardware.SensorManager.MAGNETIC_FIELD_EARTH_MAX*

Maximum magnetic field on Earth's surface 


*float_android.hardware.SensorManager.MAGNETIC_FIELD_EARTH_MIN*

Minimum magnetic field on Earth's surface 


*float_android.hardware.SensorManager.PRESSURE_STANDARD_ATMOSPHERE*

Standard atmosphere, or average sea-level pressure in hPa (millibar) 


*int_android.hardware.SensorManager.RAW_DATA_INDEX*

Offset to the untransformed values in the array returned by 
(|android.hardware.SensorListener|) 


*int_android.hardware.SensorManager.RAW_DATA_X*

Index of the untransformed X value in the array returned by 
(|android.hardware.SensorListener|) 


*int_android.hardware.SensorManager.RAW_DATA_Y*

Index of the untransformed Y value in the array returned by 
(|android.hardware.SensorListener|) 


*int_android.hardware.SensorManager.RAW_DATA_Z*

Index of the untransformed Z value in the array returned by 
(|android.hardware.SensorListener|) 


*int_android.hardware.SensorManager.SENSOR_ACCELEROMETER*

A constant describing an accelerometer. See 
SensorListener(|android.hardware.SensorListener|) for more details. 


*int_android.hardware.SensorManager.SENSOR_ALL*

A constant that includes all sensors 


*int_android.hardware.SensorManager.SENSOR_DELAY_FASTEST*

get sensor data as fast as possible 


*int_android.hardware.SensorManager.SENSOR_DELAY_GAME*

rate suitable for games 


*int_android.hardware.SensorManager.SENSOR_DELAY_NORMAL*

rate (default) suitable for screen orientation changes 


*int_android.hardware.SensorManager.SENSOR_DELAY_UI*

rate suitable for the user interface 


*int_android.hardware.SensorManager.SENSOR_LIGHT*

A constant describing an ambient light sensor See 
SensorListener(|android.hardware.SensorListener|) for more details. 


*int_android.hardware.SensorManager.SENSOR_MAGNETIC_FIELD*

A constant describing a magnetic sensor See 
SensorListener(|android.hardware.SensorListener|) for more details. 


*int_android.hardware.SensorManager.SENSOR_MAX*

Largest sensor ID 


*int_android.hardware.SensorManager.SENSOR_MIN*

Smallest sensor ID 


*int_android.hardware.SensorManager.SENSOR_ORIENTATION*

A constant describing an orientation sensor. See 
SensorListener(|android.hardware.SensorListener|) for more details. 


*int_android.hardware.SensorManager.SENSOR_ORIENTATION_RAW*

A constant describing an orientation sensor. See 
SensorListener(|android.hardware.SensorListener|) for more details. 


*int_android.hardware.SensorManager.SENSOR_PROXIMITY*

A constant describing a proximity sensor See 
SensorListener(|android.hardware.SensorListener|) for more details. 


*int_android.hardware.SensorManager.SENSOR_STATUS_ACCURACY_HIGH*

This sensor is reporting data with maximum accuracy 


*int_android.hardware.SensorManager.SENSOR_STATUS_ACCURACY_LOW*

This sensor is reporting data with low accuracy, calibration with the 
environment is needed 


*int_android.hardware.SensorManager.SENSOR_STATUS_ACCURACY_MEDIUM*

This sensor is reporting data with an average level of accuracy, calibration 
with the environment may improve the readings 


*int_android.hardware.SensorManager.SENSOR_STATUS_UNRELIABLE*

The values returned by this sensor cannot be trusted, calibration is needed or 
the environment doesn't allow readings 


*int_android.hardware.SensorManager.SENSOR_TEMPERATURE*

A constant describing a temperature sensor See 
SensorListener(|android.hardware.SensorListener|) for more details. 


*int_android.hardware.SensorManager.SENSOR_TRICORDER*

A constant describing a Tricorder See 
SensorListener(|android.hardware.SensorListener|) for more details. 


*float_android.hardware.SensorManager.STANDARD_GRAVITY*

Standard gravity (g) on Earth. This value is equivalent to 1G 


*java.lang.String_android.hardware.SensorManager.TAG*





*android.hardware.SensorManager()*

public SensorManager()




*android.hardware.SensorManager.cancelTriggerSensor(TriggerEventListener,Sensor)*

public boolean cancelTriggerSensor(
  android.hardware.TriggerEventListener listener,
  android.hardware.Sensor sensor)

Cancels receiving trigger events for a trigger sensor. 

Note that a Trigger sensor will be auto disabled if 
(|android.hardware.TriggerEventListener|) has triggered. This method is 
provided in case the user wants to explicitly cancel the request to receive 
trigger events. 


    listener - The listener on which the {@link TriggerEventListener#onTrigger(TriggerEvent)} 
       is delivered.It should be the same as the one used in {@link 
       #requestTriggerSensor(TriggerEventListener, Sensor)} 
    sensor - The sensor for which the trigger request should be canceled. If null, it 
       cancels receiving trigger for all sensors associated with the listener. 

    Returns: true if successfully canceled. 

*android.hardware.SensorManager.cancelTriggerSensorImpl(TriggerEventListener,Sensor,boolean)*

protected abstract boolean cancelTriggerSensorImpl(
  android.hardware.TriggerEventListener listener,
  android.hardware.Sensor sensor,
  boolean disable)





*android.hardware.SensorManager.flush(SensorEventListener)*

public boolean flush(android.hardware.SensorEventListener listener)

Flushes the batch FIFO of all the sensors registered for this listener. If 
there are events in the FIFO of the sensor, they are returned as if the batch 
timeout in the FIFO of the sensors had expired. Events are returned in the 
usual way through the SensorEventListener. This call doesn't affect the batch 
timeout for this sensor. This call is asynchronous and returns immediately. 
onFlushCompleted(|android.hardware.SensorEventListener2|) is called after all 
the events in the batch at the time of calling this method have been delivered 
successfully. If the hardware doesn't support flush, it still returns true and 
a trivial flush complete event is sent after the current event for all the 
clients registered for this sensor. 


    listener - A {@link android.hardware.SensorEventListener SensorEventListener} object which 
       was previously used in a registerListener call. 

    Returns: true if the flush is initiated successfully on all the sensors registered for 
             this listener, false if no sensor is previously registered for 
             this listener or flush on one of the sensors fails. 

*android.hardware.SensorManager.flushImpl(SensorEventListener)*

protected abstract boolean flushImpl(android.hardware.SensorEventListener listener)





*android.hardware.SensorManager.getAltitude(float,float)*

public static float getAltitude(
  float p0,
  float p)

Computes the Altitude in meters from the atmospheric pressure and the pressure 
at sea level. 

Typically the atmospheric pressure is read from a (|android.hardware.Sensor|) 
sensor. The pressure at sea level must be known, usually it can be retrieved 
from airport databases in the vicinity. If unknown, you can use 
(|android.hardware.SensorManager|) as an approximation, but absolute altitudes 
won't be accurate. 

To calculate altitude differences, you must calculate the difference between 
the altitudes at both points. If you don't know the altitude as sea level, you 
can use (|android.hardware.SensorManager|) instead, which will give good 
results considering the range of pressure typically involved. 



float altitude_difference = 
getAltitude(SensorManager.PRESSURE_STANDARD_ATMOSPHERE, pressure_at_point2) - 
getAltitude(SensorManager.PRESSURE_STANDARD_ATMOSPHERE, pressure_at_point1); 




    p0 - pressure at sea level 
    p - atmospheric pressure 

    Returns: Altitude in meters 

*android.hardware.SensorManager.getAngleChange(float[],float[],float[])*

public static void getAngleChange(
  float[] angleChange,
  float[] R,
  float[] prevR)

Helper function to compute the angle change between two rotation matrices. 
Given a current rotation matrix (R) and a previous rotation matrix (prevR) 
computes the rotation around the z,x, and y axes which transforms prevR to R. 
outputs a 3 element vector containing the z,x, and y angle change at indexes 0, 
1, and 2 respectively. Each input matrix is either as a 3x3 or 4x4 row-major 
matrix depending on the length of the passed array: If the array length is 9, 
then the array elements represent this matrix 

/ R[ 0] R[ 1] R[ 2] \ | R[ 3] R[ 4] R[ 5] | \ R[ 6] R[ 7] R[ 8] / 

If the array length is 16, then the array elements represent this matrix 

/ R[ 0] R[ 1] R[ 2] R[ 3] \ | R[ 4] R[ 5] R[ 6] R[ 7] | | R[ 8] R[ 9] R[10] 
R[11] | \ R[12] R[13] R[14] R[15] / 


    R - current rotation matrix 
    prevR - previous rotation matrix 
    angleChange - an an array of floats (z, x, and y) in which the angle change is stored 

*android.hardware.SensorManager.getDefaultSensor(int)*

public |android.hardware.Sensor| getDefaultSensor(int type)

Use this method to get the default sensor for a given type. Note that the 
returned sensor could be a composite sensor, and its data could be averaged or 
filtered. If you need to access the raw sensors use 
getSensorList(|android.hardware.SensorManager|) . 


    type - of sensors requested 

    Returns: the default sensors matching the asked type. 

*android.hardware.SensorManager.getFullSensorList()*

protected abstract |java.util.List|<Sensor> getFullSensorList()

Gets the full list of sensors that are available. 



*android.hardware.SensorManager.getInclination(float[])*

public static float getInclination(float[] I)

Computes the geomagnetic inclination angle in radians from the inclination 
matrix I returned by (|android.hardware.SensorManager|) . 


    I - inclination matrix see {@link #getRotationMatrix}. 

    Returns: The geomagnetic inclination angle in radians. 

*android.hardware.SensorManager.getOrientation(float[],float[])*

public static float[] getOrientation(
  float[] R,
  float[] values)

Computes the device's orientation based on the rotation matrix. 

When it returns, the array values is filled with the result: 

values[0]: azimuth, rotation around the Z axis. values[1]: pitch, rotation 
around the X axis. values[2]: roll, rotation around the Y axis. 

The reference coordinate-system used is different from the world 
coordinate-system defined for the rotation matrix: 

X is defined as the vector product Y.Z (It is tangential to the ground at the 
device's current location and roughly points West). Y is tangential to the 
ground at the device's current location and points towards the magnetic North 
Pole. Z points towards the center of the Earth and is perpendicular to the 
ground. 





All three angles above are in radians and positive in the counter-clockwise 
direction. 


    R - rotation matrix see {@link #getRotationMatrix}. 
    values - an array of 3 floats to hold the result. 

    Returns: The array values passed as argument. 

*android.hardware.SensorManager.getQuaternionFromVector(float[],float[])*

public static void getQuaternionFromVector(
  float[] Q,
  float[] rv)

Helper function to convert a rotation vector to a normalized quaternion. Given 
a rotation vector (presumably from a ROTATION_VECTOR sensor), returns a 
normalized quaternion in the array Q. The quaternion is stored as [w, x, y, z] 


    rv - the rotation vector to convert 
    Q - an array of floats in which to store the computed quaternion 

*android.hardware.SensorManager.getRotationMatrix(float[],float[],float[],float[])*

public static boolean getRotationMatrix(
  float[] R,
  float[] I,
  float[] gravity,
  float[] geomagnetic)

Computes the inclination matrix I as well as the rotation matrix R transforming 
a vector from the device coordinate system to the world's coordinate system 
which is defined as a direct orthonormal basis, where: 

X is defined as the vector product Y.Z (It is tangential to the ground at the 
device's current location and roughly points East). Y is tangential to the 
ground at the device's current location and points towards the magnetic North 
Pole. Z points towards the sky and is perpendicular to the ground. 







By definition: 

[0 0 g] = R * gravity (g = magnitude of gravity) 

[0 m 0] = I * R * geomagnetic (m = magnitude of geomagnetic field) 

R is the identity matrix when the device is aligned with the world's coordinate 
system, that is, when the device's X axis points toward East, the Y axis points 
to the North Pole and the device is facing the sky. 

I is a rotation matrix transforming the geomagnetic vector into the same 
coordinate space as gravity (the world's coordinate space). I is a simple 
rotation around the X axis. The inclination angle in radians can be computed 
with (|android.hardware.SensorManager|) . 

Each matrix is returned either as a 3x3 or 4x4 row-major matrix depending on 
the length of the passed array: 

If the array length is 16: 



/ M[ 0] M[ 1] M[ 2] M[ 3] \ | M[ 4] M[ 5] M[ 6] M[ 7] | | M[ 8] M[ 9] M[10] 
M[11] | \ M[12] M[13] M[14] M[15] / 

This matrix is ready to be used by OpenGL ES's glLoadMatrixf(float[], 
int)(|javax.microedition.khronos.opengles.GL10|) . 

Note that because OpenGL matrices are column-major matrices you must transpose 
the matrix before using it. However, since the matrix is a rotation matrix, its 
transpose is also its inverse, conveniently, it is often the inverse of the 
rotation that is needed for rendering; it can therefore be used with OpenGL ES 
directly. 

Also note that the returned matrices always have this form: 



/ M[ 0] M[ 1] M[ 2] 0 \ | M[ 4] M[ 5] M[ 6] 0 | | M[ 8] M[ 9] M[10] 0 | \ 0 0 0 
1 / 

If the array length is 9: 



/ M[ 0] M[ 1] M[ 2] \ | M[ 3] M[ 4] M[ 5] | \ M[ 6] M[ 7] M[ 8] / 



The inverse of each matrix can be computed easily by taking its transpose. 

The matrices returned by this function are meaningful only when the device is 
not free-falling and it is not close to the magnetic north. If the device is 
accelerating, or placed into a strong magnetic field, the returned matrices may 
be inaccurate. 


    R - is an array of 9 floats holding the rotation matrix R when this function 
       returns. R can be null. 
    I - is an array of 9 floats holding the rotation matrix I when this function 
       returns. I can be null. 
    gravity - is an array of 3 floats containing the gravity vector expressed in the device's 
       coordinate. You can simply use the {@link 
       android.hardware.SensorEvent#values values} returned by a {@link 
       android.hardware.SensorEvent SensorEvent} of a {@link 
       android.hardware.Sensor Sensor} of type {@link 
       android.hardware.Sensor#TYPE_ACCELEROMETER TYPE_ACCELEROMETER}. 
    geomagnetic - is an array of 3 floats containing the geomagnetic vector expressed in the 
       device's coordinate. You can simply use the {@link 
       android.hardware.SensorEvent#values values} returned by a {@link 
       android.hardware.SensorEvent SensorEvent} of a {@link 
       android.hardware.Sensor Sensor} of type {@link 
       android.hardware.Sensor#TYPE_MAGNETIC_FIELD TYPE_MAGNETIC_FIELD}. 

    Returns: true on success, false on failure (for instance, if the device is in free 
             fall). On failure the output matrices are not modified. 

*android.hardware.SensorManager.getRotationMatrixFromVector(float[],float[])*

public static void getRotationMatrixFromVector(
  float[] R,
  float[] rotationVector)

Helper function to convert a rotation vector to a rotation matrix. Given a 
rotation vector (presumably from a ROTATION_VECTOR sensor), returns a 9 or 16 
element rotation matrix in the array R. R must have length 9 or 16. If R.length 
== 9, the following matrix is returned: 

/ R[ 0] R[ 1] R[ 2] \ | R[ 3] R[ 4] R[ 5] | \ R[ 6] R[ 7] R[ 8] / 

If R.length == 16, the following matrix is returned: 

/ R[ 0] R[ 1] R[ 2] 0 \ | R[ 4] R[ 5] R[ 6] 0 | | R[ 8] R[ 9] R[10] 0 | \ 0 0 0 
1 / 


    rotationVector - the rotation vector to convert 
    R - an array of floats in which to store the rotation matrix 

*android.hardware.SensorManager.getSensorList(int)*

public |java.util.List|<Sensor> getSensorList(int type)

Use this method to get the list of available sensors of a certain type. Make 
multiple calls to get sensors of different types or use 
Sensor.TYPE_ALL(|android.hardware.Sensor|) to get all the sensors. 


    type - of sensors requested 

    Returns: a list of sensors matching the asked type. 

*android.hardware.SensorManager.getSensors()*

public int getSensors()



    Deprecated: This method is deprecated, use
             {@link SensorManager#getSensorList(int)} instead


    Returns: available sensors. 

*android.hardware.SensorManager.registerListener(SensorEventListener,Sensor,int)*

public boolean registerListener(
  android.hardware.SensorEventListener listener,
  android.hardware.Sensor sensor,
  int rateUs)

Registers a SensorEventListener(|android.hardware.SensorEventListener|) for the 
given sensor. 

Note: Don't use this method with a one shot trigger sensor such as 
(|android.hardware.Sensor|) . Use (|android.hardware.SensorManager|) instead. 


    listener - A {@link android.hardware.SensorEventListener SensorEventListener} object. 
    sensor - The {@link android.hardware.Sensor Sensor} to register to. 
    rateUs - The rate {@link android.hardware.SensorEvent sensor events} are delivered at. 
       This is only a hint to the system. Events may be received faster or 
       slower than the specified rate. Usually events are received faster. The 
       value must be one of {@link #SENSOR_DELAY_NORMAL}, {@link 
       #SENSOR_DELAY_UI}, {@link #SENSOR_DELAY_GAME}, or {@link 
       #SENSOR_DELAY_FASTEST} or, the desired delay between events in 
       microseconds. Specifying the delay in microseconds only works from 
       Android 2.3 (API level 9) onwards. For earlier releases, you must use 
       one of the {@code SENSOR_DELAY_*} constants. 

    Returns: true if the sensor is supported and successfully enabled. 

*android.hardware.SensorManager.registerListener(SensorEventListener,Sensor,int,Handler)*

public boolean registerListener(
  android.hardware.SensorEventListener listener,
  android.hardware.Sensor sensor,
  int rateUs,
  android.os.Handler handler)

Registers a SensorEventListener(|android.hardware.SensorEventListener|) for the 
given sensor. Events are delivered in continuous mode as soon as they are 
available. To reduce the battery usage, use (|android.hardware.SensorManager|) 
which enables batch mode for the sensor. 

Note: Don't use this method with a one shot trigger sensor such as 
(|android.hardware.Sensor|) . Use (|android.hardware.SensorManager|) instead. 


    listener - A {@link android.hardware.SensorEventListener SensorEventListener} object. 
    sensor - The {@link android.hardware.Sensor Sensor} to register to. 
    rateUs - The rate {@link android.hardware.SensorEvent sensor events} are delivered at. 
       This is only a hint to the system. Events may be received faster or 
       slower than the specified rate. Usually events are received faster. The 
       value must be one of {@link #SENSOR_DELAY_NORMAL}, {@link 
       #SENSOR_DELAY_UI}, {@link #SENSOR_DELAY_GAME}, or {@link 
       #SENSOR_DELAY_FASTEST}. or, the desired delay between events in 
       microseconds. Specifying the delay in microseconds only works from 
       Android 2.3 (API level 9) onwards. For earlier releases, you must use 
       one of the {@code SENSOR_DELAY_*} constants. 
    handler - The {@link android.os.Handler Handler} the {@link android.hardware.SensorEvent 
       sensor events} will be delivered to. 

    Returns: true if the sensor is supported and successfully enabled. 

*android.hardware.SensorManager.registerListener(SensorEventListener,Sensor,int,int)*

public boolean registerListener(
  android.hardware.SensorEventListener listener,
  android.hardware.Sensor sensor,
  int rateUs,
  int maxBatchReportLatencyUs)

Enables batch mode for a sensor with the given rate and maxBatchReportLatency. 
If the underlying hardware does not support batch mode, this defaults to 
(|android.hardware.SensorManager|) and other parameters are ignored. In 
non-batch mode, all sensor events must be reported as soon as they are 
detected. While in batch mode, sensor events do not need to be reported as soon 
as they are detected. They can be temporarily stored in batches and reported in 
batches, as long as no event is delayed by more than "maxBatchReportLatency" 
microseconds. That is, all events since the previous batch are recorded and 
returned all at once. This allows to reduce the amount of interrupts sent to 
the SoC, and allows the SoC to switch to a lower power state (Idle) while the 
sensor is capturing and batching data. 

Registering to a sensor in batch mode will not prevent the SoC from going to 
suspend mode. In this case, the sensor will continue to gather events and store 
it in a hardware FIFO. If the FIFO gets full before the AP wakes up again, some 
events will be lost, as the older events get overwritten by new events in the 
hardware FIFO. This can be avoided by holding a wake lock. If the application 
holds a wake lock, the SoC will not go to suspend mode, so no events will be 
lost, as the events will be reported before the FIFO gets full. 

Batching is always best effort. If a different application requests updates in 
continuous mode, this application will also get events in continuous mode. 
Batch mode updates can be unregistered by calling 
(|android.hardware.SensorManager|) . 



Note: Don't use this method with a one shot trigger sensor such as 
(|android.hardware.Sensor|) . Use (|android.hardware.SensorManager|) instead. 


    listener - A {@link android.hardware.SensorEventListener SensorEventListener} object that 
       will receive the sensor events. If the application is interested in 
       receiving flush complete notifications, it should register with {@link 
       android.hardware.SensorEventListener SensorEventListener2} instead. 
    sensor - The {@link android.hardware.Sensor Sensor} to register to. 
    rateUs - The desired delay between two consecutive events in microseconds. This is only 
       a hint to the system. Events may be received faster or slower than the 
       specified rate. Usually events are received faster. Can be one of {@link 
       #SENSOR_DELAY_NORMAL}, {@link #SENSOR_DELAY_UI}, {@link 
       #SENSOR_DELAY_GAME}, {@link #SENSOR_DELAY_FASTEST} or the delay in 
       microseconds. 
    maxBatchReportLatencyUs - An event in the batch can be delayed by at most maxBatchReportLatency 
       microseconds. More events can be batched if this value is large. If this 
       is set to zero, batch mode is disabled and events are delivered in 
       continuous mode as soon as they are available which is equivalent to 
       calling {@link #registerListener(SensorEventListener, Sensor, int)}. 

    Returns: true if batch mode is successfully enabled for this sensor, false otherwise. 

*android.hardware.SensorManager.registerListener(SensorEventListener,Sensor,int,int,Handler)*

public boolean registerListener(
  android.hardware.SensorEventListener listener,
  android.hardware.Sensor sensor,
  int rateUs,
  int maxBatchReportLatencyUs,
  android.os.Handler handler)

Enables batch mode for a sensor with the given rate and maxBatchReportLatency. 


    listener - A {@link android.hardware.SensorEventListener SensorEventListener} object that 
       will receive the sensor events. If the application is interested in 
       receiving flush complete notifications, it should register with {@link 
       android.hardware.SensorEventListener SensorEventListener2} instead. 
    sensor - The {@link android.hardware.Sensor Sensor} to register to. 
    rateUs - The desired delay between two consecutive events in microseconds. This is only 
       a hint to the system. Events may be received faster or slower than the 
       specified rate. Usually events are received faster. Can be one of {@link 
       #SENSOR_DELAY_NORMAL}, {@link #SENSOR_DELAY_UI}, {@link 
       #SENSOR_DELAY_GAME}, {@link #SENSOR_DELAY_FASTEST} or the delay in 
       microseconds. 
    maxBatchReportLatencyUs - An event in the batch can be delayed by at most maxBatchReportLatency 
       microseconds. More events can be batched if this value is large. If this 
       is set to zero, batch mode is disabled and events are delivered in 
       continuous mode as soon as they are available which is equivalent to 
       calling {@link #registerListener(SensorEventListener, Sensor, int)}. 
    handler - The {@link android.os.Handler Handler} the {@link android.hardware.SensorEvent 
       sensor events} will be delivered to. 

    Returns: true if batch mode is successfully enabled for this sensor, false otherwise. 

*android.hardware.SensorManager.registerListener(SensorListener,int)*

public boolean registerListener(
  android.hardware.SensorListener listener,
  int sensors)

Registers a listener for given sensors. 

    Deprecated: This method is deprecated, use
             {@link SensorManager#registerListener(SensorEventListener, Sensor, int)}
             instead.

    listener - sensor listener object 
    sensors - a bit masks of the sensors to register to 

    Returns: true if the sensor is supported and successfully enabled 

*android.hardware.SensorManager.registerListener(SensorListener,int,int)*

public boolean registerListener(
  android.hardware.SensorListener listener,
  int sensors,
  int rate)

Registers a SensorListener for given sensors. 

    Deprecated: This method is deprecated, use
             {@link SensorManager#registerListener(SensorEventListener, Sensor, int)}
             instead.

    listener - sensor listener object 
    sensors - a bit masks of the sensors to register to 
    rate - rate of events. This is only a hint to the system. events may be received 
       faster or slower than the specified rate. Usually events are received 
       faster. The value must be one of {@link #SENSOR_DELAY_NORMAL}, {@link 
       #SENSOR_DELAY_UI}, {@link #SENSOR_DELAY_GAME}, or {@link 
       #SENSOR_DELAY_FASTEST}. 

    Returns: true if the sensor is supported and successfully enabled 

*android.hardware.SensorManager.registerListenerImpl(SensorEventListener,Sensor,int,Handler,int,int)*

protected abstract boolean registerListenerImpl(
  android.hardware.SensorEventListener listener,
  android.hardware.Sensor sensor,
  int delayUs,
  android.os.Handler handler,
  int maxBatchReportLatencyUs,
  int reservedFlags)





*android.hardware.SensorManager.remapCoordinateSystem(float[],int,int,float[])*

public static boolean remapCoordinateSystem(
  float[] inR,
  int X,
  int Y,
  float[] outR)

Rotates the supplied rotation matrix so it is expressed in a different 
coordinate system. This is typically used when an application needs to compute 
the three orientation angles of the device (see 
(|android.hardware.SensorManager|) ) in a different coordinate system. 

When the rotation matrix is used for drawing (for instance with OpenGL ES), it 
usually doesn't need to be transformed by this function, unless the screen is 
physically rotated, in which case you can use 
Display.getRotation()(|android.view.Display|) to retrieve the current rotation 
of the screen. Note that because the user is generally free to rotate their 
screen, you often should consider the rotation in deciding the parameters to 
use here. 

Examples: 

Using the camera (Y axis along the camera's axis) for an augmented reality 
application where the rotation angles are needed: 



remapCoordinateSystem(inR, AXIS_X, AXIS_Z, outR); 



Using the device as a mechanical compass when rotation is 
Surface.ROTATION_90(|android.view.Surface|) : 



remapCoordinateSystem(inR, AXIS_Y, AXIS_MINUS_X, outR); 



Beware of the above example. This call is needed only to account for a rotation 
from its natural orientation when calculating the rotation angles (see 
(|android.hardware.SensorManager|) ). If the rotation matrix is also used for 
rendering, it may not need to be transformed, for instance if your 
Activity(|android.app.Activity|) is running in landscape mode. 

Since the resulting coordinate system is orthonormal, only two axes need to be 
specified. 


    inR - the rotation matrix to be transformed. Usually it is the matrix returned by 
       {@link #getRotationMatrix}. 
    X - defines on which world axis and direction the X axis of the device is mapped. 
    Y - defines on which world axis and direction the Y axis of the device is mapped. 
    outR - the transformed rotation matrix. inR and outR can be the same array, but it is 
       not recommended for performance reason. 

    Returns: true on success. false if the input parameters are incorrect, for instance if X 
             and Y define the same axis. Or if inR and outR don't have the same 
             length. 

*android.hardware.SensorManager.requestTriggerSensor(TriggerEventListener,Sensor)*

public boolean requestTriggerSensor(
  android.hardware.TriggerEventListener listener,
  android.hardware.Sensor sensor)

Requests receiving trigger events for a trigger sensor. 

When the sensor detects a trigger event condition, such as significant motion 
in the case of the (|android.hardware.Sensor|) , the provided trigger listener 
will be invoked once and then its request to receive trigger events will be 
canceled. To continue receiving trigger events, the application must request to 
receive trigger events again. 


    listener - The listener on which the {@link TriggerEventListener#onTrigger(TriggerEvent)} 
       will be delivered. 
    sensor - The sensor to be enabled. 

    Returns: true if the sensor was successfully enabled. 

*android.hardware.SensorManager.requestTriggerSensorImpl(TriggerEventListener,Sensor)*

protected abstract boolean requestTriggerSensorImpl(
  android.hardware.TriggerEventListener listener,
  android.hardware.Sensor sensor)





*android.hardware.SensorManager.unregisterListener(SensorEventListener)*

public void unregisterListener(android.hardware.SensorEventListener listener)

Unregisters a listener for all sensors. 


    listener - a SensorListener object 

*android.hardware.SensorManager.unregisterListener(SensorEventListener,Sensor)*

public void unregisterListener(
  android.hardware.SensorEventListener listener,
  android.hardware.Sensor sensor)

Unregisters a listener for the sensors with which it is registered. 

Note: Don't use this method with a one shot trigger sensor such as 
(|android.hardware.Sensor|) . Use (|android.hardware.SensorManager|) instead. 


    listener - a SensorEventListener object 
    sensor - the sensor to unregister from 

*android.hardware.SensorManager.unregisterListener(SensorListener)*

public void unregisterListener(android.hardware.SensorListener listener)

Unregisters a listener for all sensors. 

    Deprecated: This method is deprecated, use
             {@link SensorManager#unregisterListener(SensorEventListener)}
             instead.

    listener - a SensorListener object 

*android.hardware.SensorManager.unregisterListener(SensorListener,int)*

public void unregisterListener(
  android.hardware.SensorListener listener,
  int sensors)

Unregisters a listener for the sensors with which it is registered. 

    Deprecated: This method is deprecated, use
             {@link SensorManager#unregisterListener(SensorEventListener, Sensor)}
             instead.

    listener - a SensorListener object 
    sensors - a bit masks of the sensors to unregister from 

*android.hardware.SensorManager.unregisterListenerImpl(SensorEventListener,Sensor)*

protected abstract void unregisterListenerImpl(
  android.hardware.SensorEventListener listener,
  android.hardware.Sensor sensor)






