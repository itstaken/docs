*android.app.ActivityManager* *ActivityManager* Interact with the overall activi

public class ActivityManager
  extends    |java.lang.Object|

|android.app.ActivityManager_Description|
|android.app.ActivityManager_Fields|
|android.app.ActivityManager_Constructors|
|android.app.ActivityManager_Methods|

================================================================================

*android.app.ActivityManager_Fields*
|int_android.app.ActivityManager.BROADCAST_STICKY_CANT_HAVE_PERMISSION|
|int_android.app.ActivityManager.BROADCAST_SUCCESS|
|int_android.app.ActivityManager.COMPAT_MODE_ALWAYS|
|int_android.app.ActivityManager.COMPAT_MODE_DISABLED|
|int_android.app.ActivityManager.COMPAT_MODE_ENABLED|
|int_android.app.ActivityManager.COMPAT_MODE_NEVER|
|int_android.app.ActivityManager.COMPAT_MODE_TOGGLE|
|int_android.app.ActivityManager.COMPAT_MODE_UNKNOWN|
|int_android.app.ActivityManager.INTENT_SENDER_ACTIVITY|
|int_android.app.ActivityManager.INTENT_SENDER_ACTIVITY_RESULT|
|int_android.app.ActivityManager.INTENT_SENDER_BROADCAST|
|int_android.app.ActivityManager.INTENT_SENDER_SERVICE|
|java.lang.String_android.app.ActivityManager.META_HOME_ALTERNATE|
|int_android.app.ActivityManager.MOVE_TASK_NO_USER_ACTION|
|int_android.app.ActivityManager.MOVE_TASK_WITH_HOME|
|int_android.app.ActivityManager.PROCESS_STATE_BACKUP|
|int_android.app.ActivityManager.PROCESS_STATE_CACHED_ACTIVITY|
|int_android.app.ActivityManager.PROCESS_STATE_CACHED_ACTIVITY_CLIENT|
|int_android.app.ActivityManager.PROCESS_STATE_CACHED_EMPTY|
|int_android.app.ActivityManager.PROCESS_STATE_HEAVY_WEIGHT|
|int_android.app.ActivityManager.PROCESS_STATE_HOME|
|int_android.app.ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND|
|int_android.app.ActivityManager.PROCESS_STATE_IMPORTANT_FOREGROUND|
|int_android.app.ActivityManager.PROCESS_STATE_LAST_ACTIVITY|
|int_android.app.ActivityManager.PROCESS_STATE_PERSISTENT|
|int_android.app.ActivityManager.PROCESS_STATE_PERSISTENT_UI|
|int_android.app.ActivityManager.PROCESS_STATE_RECEIVER|
|int_android.app.ActivityManager.PROCESS_STATE_SERVICE|
|int_android.app.ActivityManager.PROCESS_STATE_TOP|
|int_android.app.ActivityManager.RECENT_IGNORE_UNAVAILABLE|
|int_android.app.ActivityManager.RECENT_WITH_EXCLUDED|
|int_android.app.ActivityManager.REMOVE_TASK_KILL_PROCESS|
|int_android.app.ActivityManager.START_CANCELED|
|int_android.app.ActivityManager.START_CLASS_NOT_FOUND|
|int_android.app.ActivityManager.START_DELIVERED_TO_TOP|
|int_android.app.ActivityManager.START_FLAG_AUTO_STOP_PROFILER|
|int_android.app.ActivityManager.START_FLAG_DEBUG|
|int_android.app.ActivityManager.START_FLAG_ONLY_IF_NEEDED|
|int_android.app.ActivityManager.START_FLAG_OPENGL_TRACES|
|int_android.app.ActivityManager.START_FORWARD_AND_REQUEST_CONFLICT|
|int_android.app.ActivityManager.START_INTENT_NOT_RESOLVED|
|int_android.app.ActivityManager.START_NOT_ACTIVITY|
|int_android.app.ActivityManager.START_PERMISSION_DENIED|
|int_android.app.ActivityManager.START_RETURN_INTENT_TO_CALLER|
|int_android.app.ActivityManager.START_SUCCESS|
|int_android.app.ActivityManager.START_SWITCHES_CANCELED|
|int_android.app.ActivityManager.START_TASK_TO_FRONT|
|int_android.app.ActivityManager.USER_OP_IS_CURRENT|
|int_android.app.ActivityManager.USER_OP_SUCCESS|
|int_android.app.ActivityManager.USER_OP_UNKNOWN_USER|

*android.app.ActivityManager_Methods*
|android.app.ActivityManager.checkComponentPermission(String,int,int,boolean)|
|android.app.ActivityManager.checkUidPermission(String,int)|
|android.app.ActivityManager.clearApplicationUserData()|Permits an application 
|android.app.ActivityManager.clearApplicationUserData(String,IPackageDataObserver)|
|android.app.ActivityManager.dumpPackageState(FileDescriptor,String)|Perform a 
|android.app.ActivityManager.dumpPackageStateStatic(FileDescriptor,String)|
|android.app.ActivityManager.forceStopPackage(String)|Have the system perform a
|android.app.ActivityManager.getAllPackageLaunchCounts()|Returns the launch cou
|android.app.ActivityManager.getAllPackageUsageStats()|Returns the usage statis
|android.app.ActivityManager.getCurrentUser()|
|android.app.ActivityManager.getDeviceConfigurationInfo()|Get the device config
|android.app.ActivityManager.getFrontActivityScreenCompatMode()|
|android.app.ActivityManager.getLargeMemoryClass()|Return the approximate per-a
|android.app.ActivityManager.getLauncherLargeIconDensity()|Get the preferred de
|android.app.ActivityManager.getLauncherLargeIconSize()|Get the preferred launc
|android.app.ActivityManager.getMemoryClass()|Return the approximate per-applic
|android.app.ActivityManager.getMemoryInfo(ActivityManager.MemoryInfo)|Return g
|android.app.ActivityManager.getMyMemoryState(ActivityManager.RunningAppProcessInfo)|
|android.app.ActivityManager.getPackageAskScreenCompat(String)|
|android.app.ActivityManager.getPackageScreenCompatMode(String)|
|android.app.ActivityManager.getProcessesInErrorState()|Returns a list of any p
|android.app.ActivityManager.getProcessMemoryInfo(int[])|Return information abo
|android.app.ActivityManager.getRecentTasks(int,int)|Return a list of the tasks
|android.app.ActivityManager.getRecentTasksForUser(int,int,int)|Same as#getRece
|android.app.ActivityManager.getRunningAppProcesses()|Returns a list of applica
|android.app.ActivityManager.getRunningExternalApplications()|Returns a list of
|android.app.ActivityManager.getRunningServiceControlPanel(ComponentName)|Retur
|android.app.ActivityManager.getRunningServices(int)|Return a list of the servi
|android.app.ActivityManager.getRunningTasks(int)|Return a list of the tasks th
|android.app.ActivityManager.getRunningTasks(int,int,IThumbnailReceiver)|Return
|android.app.ActivityManager.getTaskThumbnails(int)|
|android.app.ActivityManager.getTaskTopThumbnail(int)|
|android.app.ActivityManager.handleIncomingUser(int,int,int,boolean,boolean,String,String)|
|android.app.ActivityManager.isHighEndGfx()|Used by persistent processes to det
|android.app.ActivityManager.isLowRamDevice()|Returns true if this is a low-RAM
|android.app.ActivityManager.isLowRamDeviceStatic()|
|android.app.ActivityManager.isRunningInTestHarness()|Returns "true" if device 
|android.app.ActivityManager.isUserAMonkey()|Returns "true" if the user interfa
|android.app.ActivityManager.isUserRunning(int)|Return whether the given user i
|android.app.ActivityManager.killBackgroundProcesses(String)|Have the system im
|android.app.ActivityManager.moveTaskToFront(int,int)|Equivalent to calling#mov
|android.app.ActivityManager.moveTaskToFront(int,int,Bundle)|Ask that the task 
|android.app.ActivityManager.removeSubTask(int,int)|Remove some end of a task's
|android.app.ActivityManager.removeTask(int,int)|Completely remove the given ta
|android.app.ActivityManager.restartPackage(String)|
|android.app.ActivityManager.setFrontActivityScreenCompatMode(int)|
|android.app.ActivityManager.setPackageAskScreenCompat(String,boolean)|
|android.app.ActivityManager.setPackageScreenCompatMode(String,int)|
|android.app.ActivityManager.staticGetLargeMemoryClass()|
|android.app.ActivityManager.staticGetMemoryClass()|
|android.app.ActivityManager.switchUser(int)|

*android.app.ActivityManager_Description*

Interact with the overall activities running in the system. 



*int_android.app.ActivityManager.BROADCAST_STICKY_CANT_HAVE_PERMISSION*

Result for IActivityManaqer.broadcastIntent: attempt to broadcast a sticky 
intent without appropriate permission. 


*int_android.app.ActivityManager.BROADCAST_SUCCESS*

Result for IActivityManaqer.broadcastIntent: success! 


*int_android.app.ActivityManager.COMPAT_MODE_ALWAYS*

Screen compatibility mode: the application most always run in compatibility 
mode. 


*int_android.app.ActivityManager.COMPAT_MODE_DISABLED*

Screen compatibility mode: the application currently has compatibility mode 
disabled. 


*int_android.app.ActivityManager.COMPAT_MODE_ENABLED*

Screen compatibility mode: the application currently has compatibility mode 
enabled. 


*int_android.app.ActivityManager.COMPAT_MODE_NEVER*

Screen compatibility mode: the application can never run in compatibility mode. 


*int_android.app.ActivityManager.COMPAT_MODE_TOGGLE*

Screen compatibility mode: request to toggle the application's compatibility 
mode. 


*int_android.app.ActivityManager.COMPAT_MODE_UNKNOWN*

Screen compatibility mode: unknown. 


*int_android.app.ActivityManager.INTENT_SENDER_ACTIVITY*

Type for IActivityManaqer.getIntentSender: this PendingIntent is for a 
startActivity operation. 


*int_android.app.ActivityManager.INTENT_SENDER_ACTIVITY_RESULT*

Type for IActivityManaqer.getIntentSender: this PendingIntent is for an 
activity result operation. 


*int_android.app.ActivityManager.INTENT_SENDER_BROADCAST*

Type for IActivityManaqer.getIntentSender: this PendingIntent is for a 
sendBroadcast operation. 


*int_android.app.ActivityManager.INTENT_SENDER_SERVICE*

Type for IActivityManaqer.getIntentSender: this PendingIntent is for a 
startService operation. 


*java.lang.String_android.app.ActivityManager.META_HOME_ALTERNATE*

<a href="guide/topics/manifest/meta-data-element.html"><meta-data> name for a 
'home' Activity that declares a package that is to be uninstalled in lieu of 
the declaring one. The package named here must be signed with the same 
certificate as the one declaring the<meta-data>. 


*int_android.app.ActivityManager.MOVE_TASK_NO_USER_ACTION*

Flag for (|android.app.ActivityManager|) : don't count this as a 
user-instigated action, so the current activity will not receive a hint that 
the user is leaving. 


*int_android.app.ActivityManager.MOVE_TASK_WITH_HOME*

Flag for (|android.app.ActivityManager|) : also move the "home" activity along 
with the task, so it is positioned immediately behind the task. 


*int_android.app.ActivityManager.PROCESS_STATE_BACKUP*




*int_android.app.ActivityManager.PROCESS_STATE_CACHED_ACTIVITY*




*int_android.app.ActivityManager.PROCESS_STATE_CACHED_ACTIVITY_CLIENT*




*int_android.app.ActivityManager.PROCESS_STATE_CACHED_EMPTY*




*int_android.app.ActivityManager.PROCESS_STATE_HEAVY_WEIGHT*




*int_android.app.ActivityManager.PROCESS_STATE_HOME*




*int_android.app.ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND*




*int_android.app.ActivityManager.PROCESS_STATE_IMPORTANT_FOREGROUND*




*int_android.app.ActivityManager.PROCESS_STATE_LAST_ACTIVITY*




*int_android.app.ActivityManager.PROCESS_STATE_PERSISTENT*




*int_android.app.ActivityManager.PROCESS_STATE_PERSISTENT_UI*




*int_android.app.ActivityManager.PROCESS_STATE_RECEIVER*




*int_android.app.ActivityManager.PROCESS_STATE_SERVICE*




*int_android.app.ActivityManager.PROCESS_STATE_TOP*




*int_android.app.ActivityManager.RECENT_IGNORE_UNAVAILABLE*

Provides a list that does not contain any recent tasks that currently are not 
available to the user. 


*int_android.app.ActivityManager.RECENT_WITH_EXCLUDED*

Flag for use with (|android.app.ActivityManager|) : return all tasks, even 
those that have set their (|android.content.Intent|) flag. 


*int_android.app.ActivityManager.REMOVE_TASK_KILL_PROCESS*

If set, the process of the root activity of the task will be killed as part of 
removing the task. 


*int_android.app.ActivityManager.START_CANCELED*

Result for IActivityManager.startActivity: an error where the start had to be 
canceled. 


*int_android.app.ActivityManager.START_CLASS_NOT_FOUND*

Result for IActivityManager.startActivity: an error where the requested class 
is not found. 


*int_android.app.ActivityManager.START_DELIVERED_TO_TOP*

Result for IActivityManaqer.startActivity: activity wasn't really started, but 
the given Intent was given to the existing top activity. 


*int_android.app.ActivityManager.START_FLAG_AUTO_STOP_PROFILER*

Flag for IActivityManaqer.startActivity: if the app is being launched for 
profiling, automatically stop the profiler once done. 


*int_android.app.ActivityManager.START_FLAG_DEBUG*

Flag for IActivityManaqer.startActivity: launch the app for debugging. 


*int_android.app.ActivityManager.START_FLAG_ONLY_IF_NEEDED*

Flag for IActivityManaqer.startActivity: do special start mode where a new 
activity is launched only if it is needed. 


*int_android.app.ActivityManager.START_FLAG_OPENGL_TRACES*

Flag for IActivityManaqer.startActivity: launch the app for OpenGL tracing. 


*int_android.app.ActivityManager.START_FORWARD_AND_REQUEST_CONFLICT*

Result for IActivityManager.startActivity: an error where the caller has 
requested both to forward a result and to receive a result. 


*int_android.app.ActivityManager.START_INTENT_NOT_RESOLVED*

Result for IActivityManager.startActivity: an error where the given Intent 
could not be resolved to an activity. 


*int_android.app.ActivityManager.START_NOT_ACTIVITY*

Result for IActivityManager.startActivity: an error where the thing being 
started is not an activity. 


*int_android.app.ActivityManager.START_PERMISSION_DENIED*

Result for IActivityManager.startActivity: an error where the caller does not 
have permission to start the activity. 


*int_android.app.ActivityManager.START_RETURN_INTENT_TO_CALLER*

Result for IActivityManaqer.startActivity: the caller asked that the Intent not 
be executed if it is the recipient, and that is indeed the case. 


*int_android.app.ActivityManager.START_SUCCESS*

Result for IActivityManaqer.startActivity: the activity was started 
successfully as normal. 


*int_android.app.ActivityManager.START_SWITCHES_CANCELED*

Result for IActivityManaqer.startActivity: request was canceled because app 
switches are temporarily canceled to ensure the user's last request (such as 
pressing home) is performed. 


*int_android.app.ActivityManager.START_TASK_TO_FRONT*

Result for IActivityManaqer.startActivity: activity wasn't really started, but 
a task was simply brought to the foreground. 


*int_android.app.ActivityManager.USER_OP_IS_CURRENT*




*int_android.app.ActivityManager.USER_OP_SUCCESS*




*int_android.app.ActivityManager.USER_OP_UNKNOWN_USER*





*android.app.ActivityManager.checkComponentPermission(String,int,int,boolean)*

public static int checkComponentPermission(
  java.lang.String permission,
  int uid,
  int owningUid,
  boolean exported)





*android.app.ActivityManager.checkUidPermission(String,int)*

public static int checkUidPermission(
  java.lang.String permission,
  int uid)





*android.app.ActivityManager.clearApplicationUserData()*

public boolean clearApplicationUserData()

Permits an application to erase its own data from disk. This is equivalent to 
the user choosing to clear the app's data from within the device settings UI. 
It erases all dynamic data associated with the app -- its private data and data 
in its private area on external storage -- but does not remove the installed 
application itself, nor any OBB files. 



    Returns: {@code true} if the application successfully requested that the application's 
             data be erased; {@code false} otherwise. 

*android.app.ActivityManager.clearApplicationUserData(String,IPackageDataObserver)*

public boolean clearApplicationUserData(
  java.lang.String packageName,
  IPackageDataObserver observer)





*android.app.ActivityManager.dumpPackageState(FileDescriptor,String)*

public void dumpPackageState(
  java.io.FileDescriptor fd,
  java.lang.String packageName)

Perform a system dump of various state associated with the given application 
package name. This call blocks while the dump is being performed, so should not 
be done on a UI thread. The data will be written to the given file descriptor 
as text. An application must hold the (|android.Manifest.permission|) 
permission to make this call. 


    fd - The file descriptor that the dump should be written to. The file descriptor is 
       not closed by this function; the caller continues to own it. 
    packageName - The name of the package that is to be dumped. 

*android.app.ActivityManager.dumpPackageStateStatic(FileDescriptor,String)*

public static void dumpPackageStateStatic(
  java.io.FileDescriptor fd,
  java.lang.String packageName)





*android.app.ActivityManager.forceStopPackage(String)*

public void forceStopPackage(java.lang.String packageName)

Have the system perform a force stop of everything associated with the given 
application package. All processes that share its uid will be killed, all 
services it has running stopped, all activities removed, etc. In addition, a 
(|android.content.Intent|) broadcast will be sent, so that any of its 
registered alarms can be stopped, notifications removed, etc. 

You must hold the permission (|android.Manifest.permission|) to be able to call 
this method. 


    packageName - The name of the package to be stopped. 

*android.app.ActivityManager.getAllPackageLaunchCounts()*

public |java.util.Map|<String,Integer> getAllPackageLaunchCounts()

Returns the launch count of each installed package. 



*android.app.ActivityManager.getAllPackageUsageStats()*

public |com.android.internal.os.PkgUsageStats|[] getAllPackageUsageStats()

Returns the usage statistics of each installed package. 



*android.app.ActivityManager.getCurrentUser()*

public static int getCurrentUser()





*android.app.ActivityManager.getDeviceConfigurationInfo()*

public |android.content.pm.ConfigurationInfo| getDeviceConfigurationInfo()

Get the device configuration attributes. 



*android.app.ActivityManager.getFrontActivityScreenCompatMode()*

public int getFrontActivityScreenCompatMode()





*android.app.ActivityManager.getLargeMemoryClass()*

public int getLargeMemoryClass()

Return the approximate per-application memory class of the current device when 
an application is running with a large heap. This is the space available for 
memory-intensive applications; most applications should not need this amount of 
memory, and should instead stay with the (|android.app.ActivityManager|) limit. 
The returned value is in megabytes. This may be the same size as 
(|android.app.ActivityManager|) on memory constrained devices, or it may be 
significantly larger on devices with a large amount of available RAM. 

The is the size of the application's Dalvik heap if it has specified 
android:largeHeap="true" in its manifest. 



*android.app.ActivityManager.getLauncherLargeIconDensity()*

public int getLauncherLargeIconDensity()

Get the preferred density of icons for the launcher. This is used when custom 
drawables are created (e.g., for shortcuts). 



    Returns: density in terms of DPI 

*android.app.ActivityManager.getLauncherLargeIconSize()*

public int getLauncherLargeIconSize()

Get the preferred launcher icon size. This is used when custom drawables are 
created (e.g., for shortcuts). 



    Returns: dimensions of square icons in terms of pixels 

*android.app.ActivityManager.getMemoryClass()*

public int getMemoryClass()

Return the approximate per-application memory class of the current device. This 
gives you an idea of how hard a memory limit you should impose on your 
application to let the overall system work best. The returned value is in 
megabytes; the baseline Android memory class is 16 (which happens to be the 
Java heap limit of those devices); some device with more memory may return 24 
or even higher numbers. 



*android.app.ActivityManager.getMemoryInfo(ActivityManager.MemoryInfo)*

public void getMemoryInfo(android.app.ActivityManager.MemoryInfo outInfo)

Return general information about the memory state of the system. This can be 
used to help decide how to manage your own memory, though note that polling is 
not recommended and 
ComponentCallbacks2.onTrimMemory(int)(|android.content.ComponentCallbacks2|) is 
the preferred way to do this. Also see (|android.app.ActivityManager|) for how 
to retrieve the current trim level of your process as needed, which gives a 
better hint for how to manage its memory. 



*android.app.ActivityManager.getMyMemoryState(ActivityManager.RunningAppProcessInfo)*

public static void getMyMemoryState(android.app.ActivityManager.RunningAppProcessInfo outState)

Return global memory state information for the calling process. This does not 
fill in all fields of the (|android.app.ActivityManager.RunningAppProcessInfo|) 
. The only fields that will be filled in are 
(|android.app.ActivityManager.RunningAppProcessInfo|) , 
(|android.app.ActivityManager.RunningAppProcessInfo|) , 
(|android.app.ActivityManager.RunningAppProcessInfo|) , 
(|android.app.ActivityManager.RunningAppProcessInfo|) , 
(|android.app.ActivityManager.RunningAppProcessInfo|) , and 
(|android.app.ActivityManager.RunningAppProcessInfo|) . 



*android.app.ActivityManager.getPackageAskScreenCompat(String)*

public boolean getPackageAskScreenCompat(java.lang.String packageName)





*android.app.ActivityManager.getPackageScreenCompatMode(String)*

public int getPackageScreenCompatMode(java.lang.String packageName)





*android.app.ActivityManager.getProcessesInErrorState()*

public |java.util.List|<ProcessErrorStateInfo> getProcessesInErrorState()

Returns a list of any processes that are currently in an error condition. The 
result will be null if all processes are running properly at this time. 



    Returns: Returns a list of ProcessErrorStateInfo records, or null if there are no 
             current error conditions (it will not return an empty list). This 
             list ordering is not specified. 

*android.app.ActivityManager.getProcessMemoryInfo(int[])*

public |android.os.Debug.MemoryInfo|[] getProcessMemoryInfo(int[] pids)

Return information about the memory usage of one or more processes. 

Note: this method is only intended for debugging or building a user-facing 
process management UI. 


    pids - The pids of the processes whose memory usage is to be retrieved. 

    Returns: Returns an array of memory information, one for each requested pid. 

*android.app.ActivityManager.getRecentTasks(int,int)*

public |java.util.List|<RecentTaskInfo> getRecentTasks(
  int maxNum,
  int flags)
  throws |java.lang.SecurityException|
         
Return a list of the tasks that the user has recently launched, with the most 
recent being first and older ones after in order. 

Note: this method is only intended for debugging and presenting task management 
user interfaces. This should never be used for core logic in an application, 
such as deciding between different behaviors based on the information found 
here. Such uses are not supported, and will likely break in the future. For 
example, if multiple applications can be actively running at the same time, 
assumptions made about the meaning of the data here for purposes of control 
flow will be incorrect. 


    maxNum - The maximum number of entries to return in the list. The actual number returned 
       may be smaller, depending on how many tasks the user has started and the 
       maximum number the system can remember. 
    flags - Information about what to return. May be any combination of {@link 
       #RECENT_WITH_EXCLUDED} and {@link #RECENT_IGNORE_UNAVAILABLE}. 

    Returns: Returns a list of RecentTaskInfo records describing each of the recent tasks. 

*android.app.ActivityManager.getRecentTasksForUser(int,int,int)*

public |java.util.List|<RecentTaskInfo> getRecentTasksForUser(
  int maxNum,
  int flags,
  int userId)
  throws |java.lang.SecurityException|
         
Same as (|android.app.ActivityManager|) but returns the recent tasks for a 
specific user. It requires holding the (|android.Manifest.permission|) 
permission. 


    maxNum - The maximum number of entries to return in the list. The actual number returned 
       may be smaller, depending on how many tasks the user has started and the 
       maximum number the system can remember. 
    flags - Information about what to return. May be any combination of {@link 
       #RECENT_WITH_EXCLUDED} and {@link #RECENT_IGNORE_UNAVAILABLE}. 

    Returns: Returns a list of RecentTaskInfo records describing each of the recent tasks. 

*android.app.ActivityManager.getRunningAppProcesses()*

public |java.util.List|<RunningAppProcessInfo> getRunningAppProcesses()

Returns a list of application processes that are running on the device. 

Note: this method is only intended for debugging or building a user-facing 
process management UI. 



    Returns: Returns a list of RunningAppProcessInfo records, or null if there are no 
             running processes (it will not return an empty list). This list 
             ordering is not specified. 

*android.app.ActivityManager.getRunningExternalApplications()*

public |java.util.List|<ApplicationInfo> getRunningExternalApplications()

Returns a list of application processes installed on external media that are 
running on the device. 

Note: this method is only intended for debugging or building a user-facing 
process management UI. 



    Returns: Returns a list of ApplicationInfo records, or null if none This list ordering 
             is not specified. 

*android.app.ActivityManager.getRunningServiceControlPanel(ComponentName)*

public |android.app.PendingIntent| getRunningServiceControlPanel(android.content.ComponentName service)
  throws |java.lang.SecurityException|
         
Returns a PendingIntent you can start to show a control panel for the given 
running service. If the service does not have a control panel, null is 
returned. 



*android.app.ActivityManager.getRunningServices(int)*

public |java.util.List|<RunningServiceInfo> getRunningServices(int maxNum)
  throws |java.lang.SecurityException|
         
Return a list of the services that are currently running. 

Note: this method is only intended for debugging or implementing service 
management type user interfaces. 


    maxNum - The maximum number of entries to return in the list. The actual number returned 
       may be smaller, depending on how many services are running. 

    Returns: Returns a list of RunningServiceInfo records describing each of the running 
             tasks. 

*android.app.ActivityManager.getRunningTasks(int)*

public |java.util.List|<RunningTaskInfo> getRunningTasks(int maxNum)
  throws |java.lang.SecurityException|
         
Return a list of the tasks that are currently running, with the most recent 
being first and older ones after in order. Note that "running" does not mean 
any of the task's code is currently loaded or activity -- the task may have 
been frozen by the system, so that it can be restarted in its previous state 
when next brought to the foreground. 

Note: this method is only intended for debugging and presenting task management 
user interfaces. This should never be used for core logic in an application, 
such as deciding between different behaviors based on the information found 
here. Such uses are not supported, and will likely break in the future. For 
example, if multiple applications can be actively running at the same time, 
assumptions made about the meaning of the data here for purposes of control 
flow will be incorrect. 


    maxNum - The maximum number of entries to return in the list. The actual number returned 
       may be smaller, depending on how many tasks the user has started. 

    Returns: Returns a list of RunningTaskInfo records describing each of the running tasks. 

*android.app.ActivityManager.getRunningTasks(int,int,IThumbnailReceiver)*

public |java.util.List|<RunningTaskInfo> getRunningTasks(
  int maxNum,
  int flags,
  IThumbnailReceiver receiver)
  throws |java.lang.SecurityException|
         
Return a list of the tasks that are currently running, with the most recent 
being first and older ones after in order. Note that "running" does not mean 
any of the task's code is currently loaded or activity -- the task may have 
been frozen by the system, so that it can be restarted in its previous state 
when next brought to the foreground. 


    maxNum - The maximum number of entries to return in the list. The actual number returned 
       may be smaller, depending on how many tasks the user has started. 
    flags - Optional flags 
    receiver - Optional receiver for delayed thumbnails 

    Returns: Returns a list of RunningTaskInfo records describing each of the running tasks. 

Some thumbnails may not be available at the time of this call. The optional 
             receiver may be used to receive those thumbnails. 

*android.app.ActivityManager.getTaskThumbnails(int)*

public |android.app.ActivityManager.TaskThumbnails| getTaskThumbnails(int id)
  throws |java.lang.SecurityException|
         




*android.app.ActivityManager.getTaskTopThumbnail(int)*

public Bitmap getTaskTopThumbnail(int id)
  throws |java.lang.SecurityException|
         




*android.app.ActivityManager.handleIncomingUser(int,int,int,boolean,boolean,String,String)*

public static int handleIncomingUser(
  int callingPid,
  int callingUid,
  int userId,
  boolean allowAll,
  boolean requireFull,
  java.lang.String name,
  java.lang.String callerPackage)




    callingPid - The pid of the incoming call, as per Binder.getCallingPid(). 
    callingUid - The uid of the incoming call, as per Binder.getCallingUid(). 
    userId - The user id argument supplied by the caller -- this is the user they want to 
       run as. 
    allowAll - If true, we will allow USER_ALL. This means you must be prepared to get a 
       USER_ALL returned and deal with it correctly. If false, an exception 
       will be thrown if USER_ALL is supplied. 
    requireFull - If true, the caller must hold {@link 
       android.Manifest.permission#INTERACT_ACROSS_USERS_FULL} to be able to 
       run as a different user than their current process; otherwise they must 
       hold {@link android.Manifest.permission#INTERACT_ACROSS_USERS}. 
    name - Optional textual name of the incoming call; only for generating error messages. 
    callerPackage - Optional package name of caller; only for error messages. 

    Returns: Returns the user ID that the call should run as. Will always be a concrete user 
             number, unless allowAll is true in which case it could also be 
             USER_ALL. 

*android.app.ActivityManager.isHighEndGfx()*

public static boolean isHighEndGfx()

Used by persistent processes to determine if they are running on a higher-end 
device so should be okay using hardware drawing acceleration (which tends to 
consume a lot more RAM). 



*android.app.ActivityManager.isLowRamDevice()*

public boolean isLowRamDevice()

Returns true if this is a low-RAM device. Exactly whether a device is low-RAM 
is ultimately up to the device configuration, but currently it generally means 
something in the class of a 512MB device with about a 800x480 or less screen. 
This is mostly intended to be used by apps to determine whether they should 
turn off certain features that require more RAM. 



*android.app.ActivityManager.isLowRamDeviceStatic()*

public static boolean isLowRamDeviceStatic()





*android.app.ActivityManager.isRunningInTestHarness()*

public static boolean isRunningInTestHarness()

Returns "true" if device is running in a test harness. 



*android.app.ActivityManager.isUserAMonkey()*

public static boolean isUserAMonkey()

Returns "true" if the user interface is currently being messed with by a 
monkey. 



*android.app.ActivityManager.isUserRunning(int)*

public boolean isUserRunning(int userid)

Return whether the given user is actively running. This means that the user is 
in the "started" state, not "stopped" -- it is currently allowed to run code 
through scheduled alarms, receiving broadcasts, etc. A started user may be 
either the current foreground user or a background user; the result here does 
not distinguish between the two. 


    userid - the user's id. Zero indicates the default user. 

*android.app.ActivityManager.killBackgroundProcesses(String)*

public void killBackgroundProcesses(java.lang.String packageName)

Have the system immediately kill all background processes associated with the 
given package. This is the same as the kernel killing those processes to 
reclaim memory; the system will take care of restarting these processes in the 
future as needed. 

You must hold the permission (|android.Manifest.permission|) to be able to call 
this method. 


    packageName - The name of the package whose processes are to be killed. 

*android.app.ActivityManager.moveTaskToFront(int,int)*

public void moveTaskToFront(
  int taskId,
  int flags)

Equivalent to calling (|android.app.ActivityManager|) with a null options 
argument. 


    taskId - The identifier of the task to be moved, as found in {@link RunningTaskInfo} or 
       {@link RecentTaskInfo}. 
    flags - Additional operational flags, 0 or more of {@link #MOVE_TASK_WITH_HOME}, {@link 
       #MOVE_TASK_NO_USER_ACTION}. 

*android.app.ActivityManager.moveTaskToFront(int,int,Bundle)*

public void moveTaskToFront(
  int taskId,
  int flags,
  android.os.Bundle options)

Ask that the task associated with a given task ID be moved to the front of the 
stack, so it is now visible to the user. Requires that the caller hold 
permission (|android.Manifest.permission|) or a SecurityException will be 
thrown. 


    taskId - The identifier of the task to be moved, as found in {@link RunningTaskInfo} or 
       {@link RecentTaskInfo}. 
    flags - Additional operational flags, 0 or more of {@link #MOVE_TASK_WITH_HOME}, {@link 
       #MOVE_TASK_NO_USER_ACTION}. 
    options - Additional options for the operation, either null or as per {@link 
       Context#startActivity(Intent, android.os.Bundle) 
       Context.startActivity(Intent, Bundle)}. 

*android.app.ActivityManager.removeSubTask(int,int)*

public boolean removeSubTask(
  int taskId,
  int subTaskIndex)
  throws |java.lang.SecurityException|
         
Remove some end of a task's activity stack that is not part of the main 
application. The selected activities will be finished, so they are no longer 
part of the main task. 


    taskId - The identifier of the task. 
    subTaskIndex - The number of the sub-task; this corresponds to the index of the thumbnail 
       returned by {@link #getTaskThumbnails(int)}. 

    Returns: Returns true if the sub-task was found and was removed. 

*android.app.ActivityManager.removeTask(int,int)*

public boolean removeTask(
  int taskId,
  int flags)
  throws |java.lang.SecurityException|
         
Completely remove the given task. 


    taskId - Identifier of the task to be removed. 
    flags - Additional operational flags. May be 0 or {@link #REMOVE_TASK_KILL_PROCESS}. 

    Returns: Returns true if the given task was found and removed. 

*android.app.ActivityManager.restartPackage(String)*

public void restartPackage(java.lang.String packageName)



    Deprecated: This is now just a wrapper for
 {@link #killBackgroundProcesses(String)}; the previous behavior here
 is no longer available to applications because it allows them to
 break other applications by removing their alarms, stopping their
 services, etc.


*android.app.ActivityManager.setFrontActivityScreenCompatMode(int)*

public void setFrontActivityScreenCompatMode(int mode)





*android.app.ActivityManager.setPackageAskScreenCompat(String,boolean)*

public void setPackageAskScreenCompat(
  java.lang.String packageName,
  boolean ask)





*android.app.ActivityManager.setPackageScreenCompatMode(String,int)*

public void setPackageScreenCompatMode(
  java.lang.String packageName,
  int mode)





*android.app.ActivityManager.staticGetLargeMemoryClass()*

public static int staticGetLargeMemoryClass()





*android.app.ActivityManager.staticGetMemoryClass()*

public static int staticGetMemoryClass()





*android.app.ActivityManager.switchUser(int)*

public boolean switchUser(int userid)




    userid - the user's id. Zero indicates the default user 


