*android.hardware.camera2.CaptureResult* *CaptureResult* The results of a single

public final class CaptureResult
  extends    |android.hardware.camera2.CameraMetadata|

|android.hardware.camera2.CaptureResult_Description|
|android.hardware.camera2.CaptureResult_Fields|
|android.hardware.camera2.CaptureResult_Constructors|
|android.hardware.camera2.CaptureResult_Methods|

================================================================================

*android.hardware.camera2.CaptureResult_Fields*
|android.hardware.camera2.CameraMetadata.Key<java.lang.Boolean>_android.hardware.camera2.CaptureResult.BLACK_LEVEL_LOCK|
|android.hardware.camera2.CameraMetadata.Key<float[]>_android.hardware.camera2.CaptureResult.COLOR_CORRECTION_GAINS|
|android.hardware.camera2.CameraMetadata.Key<android.hardware.camera2.Rational[]>_android.hardware.camera2.CaptureResult.COLOR_CORRECTION_TRANSFORM|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.CONTROL_AE_PRECAPTURE_ID|
|android.hardware.camera2.CameraMetadata.Key<int[]>_android.hardware.camera2.CaptureResult.CONTROL_AE_REGIONS|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.CONTROL_AE_STATE|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.CONTROL_AF_MODE|
|android.hardware.camera2.CameraMetadata.Key<int[]>_android.hardware.camera2.CaptureResult.CONTROL_AF_REGIONS|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.CONTROL_AF_STATE|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.CONTROL_AF_TRIGGER_ID|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.CONTROL_AWB_MODE|
|android.hardware.camera2.CameraMetadata.Key<int[]>_android.hardware.camera2.CaptureResult.CONTROL_AWB_REGIONS|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.CONTROL_AWB_STATE|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.CONTROL_MODE|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.EDGE_MODE|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.FLASH_MODE|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.FLASH_STATE|
|android.hardware.camera2.CameraMetadata.Key<double[]>_android.hardware.camera2.CaptureResult.JPEG_GPS_COORDINATES|
|android.hardware.camera2.CameraMetadata.Key<java.lang.String>_android.hardware.camera2.CaptureResult.JPEG_GPS_PROCESSING_METHOD|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Long>_android.hardware.camera2.CaptureResult.JPEG_GPS_TIMESTAMP|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.JPEG_ORIENTATION|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Byte>_android.hardware.camera2.CaptureResult.JPEG_QUALITY|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Byte>_android.hardware.camera2.CaptureResult.JPEG_THUMBNAIL_QUALITY|
|android.hardware.camera2.CameraMetadata.Key<android.hardware.camera2.Size>_android.hardware.camera2.CaptureResult.JPEG_THUMBNAIL_SIZE|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Boolean>_android.hardware.camera2.CaptureResult.LED_TRANSMIT|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Float>_android.hardware.camera2.CaptureResult.LENS_APERTURE|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Float>_android.hardware.camera2.CaptureResult.LENS_FILTER_DENSITY|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Float>_android.hardware.camera2.CaptureResult.LENS_FOCAL_LENGTH|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Float>_android.hardware.camera2.CaptureResult.LENS_FOCUS_DISTANCE|
|android.hardware.camera2.CameraMetadata.Key<float[]>_android.hardware.camera2.CaptureResult.LENS_FOCUS_RANGE|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.LENS_OPTICAL_STABILIZATION_MODE|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.LENS_STATE|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.NOISE_REDUCTION_MODE|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Boolean>_android.hardware.camera2.CaptureResult.QUIRKS_PARTIAL_RESULT|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.REQUEST_FRAME_COUNT|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.REQUEST_ID|
|android.hardware.camera2.CameraMetadata.Key<android.graphics.Rect>_android.hardware.camera2.CaptureResult.SCALER_CROP_REGION|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Long>_android.hardware.camera2.CaptureResult.SENSOR_EXPOSURE_TIME|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Long>_android.hardware.camera2.CaptureResult.SENSOR_FRAME_DURATION|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.SENSOR_SENSITIVITY|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Float>_android.hardware.camera2.CaptureResult.SENSOR_TEMPERATURE|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Long>_android.hardware.camera2.CaptureResult.SENSOR_TIMESTAMP|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.STATISTICS_FACE_DETECT_MODE|
|android.hardware.camera2.CameraMetadata.Key<int[]>_android.hardware.camera2.CaptureResult.STATISTICS_FACE_IDS|
|android.hardware.camera2.CameraMetadata.Key<int[]>_android.hardware.camera2.CaptureResult.STATISTICS_FACE_LANDMARKS|
|android.hardware.camera2.CameraMetadata.Key<android.graphics.Rect[]>_android.hardware.camera2.CaptureResult.STATISTICS_FACE_RECTANGLES|
|android.hardware.camera2.CameraMetadata.Key<byte[]>_android.hardware.camera2.CaptureResult.STATISTICS_FACE_SCORES|
|android.hardware.camera2.CameraMetadata.Key<android.hardware.camera2.Face[]>_android.hardware.camera2.CaptureResult.STATISTICS_FACES|
|android.hardware.camera2.CameraMetadata.Key<float[]>_android.hardware.camera2.CaptureResult.STATISTICS_LENS_SHADING_MAP|
|android.hardware.camera2.CameraMetadata.Key<float[]>_android.hardware.camera2.CaptureResult.STATISTICS_PREDICTED_COLOR_GAINS|
|android.hardware.camera2.CameraMetadata.Key<android.hardware.camera2.Rational[]>_android.hardware.camera2.CaptureResult.STATISTICS_PREDICTED_COLOR_TRANSFORM|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.STATISTICS_SCENE_FLICKER|
|android.hardware.camera2.CameraMetadata.Key<float[]>_android.hardware.camera2.CaptureResult.TONEMAP_CURVE_BLUE|
|android.hardware.camera2.CameraMetadata.Key<float[]>_android.hardware.camera2.CaptureResult.TONEMAP_CURVE_GREEN|
|android.hardware.camera2.CameraMetadata.Key<float[]>_android.hardware.camera2.CaptureResult.TONEMAP_CURVE_RED|
|android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.TONEMAP_MODE|

*android.hardware.camera2.CaptureResult_Constructors*
|android.hardware.camera2.CaptureResult(CameraMetadataNative,CaptureRequest,int)|

*android.hardware.camera2.CaptureResult_Methods*
|android.hardware.camera2.CaptureResult.get(CameraMetadata.Key<T>)|
|android.hardware.camera2.CaptureResult.getFrameNumber()|Get the frame number a
|android.hardware.camera2.CaptureResult.getRequest()|Get the request associated
|android.hardware.camera2.CaptureResult.getSequenceId()|The sequence ID for thi

*android.hardware.camera2.CaptureResult_Description*

The results of a single image capture from the image sensor. 

Contains the final configuration for the capture hardware (sensor, lens, 
flash), the processing pipeline, the control algorithms, and the output 
buffers. 

CaptureResults are produced by a (|android.hardware.camera2.CameraDevice|) 
after processing a (|android.hardware.camera2.CaptureRequest|) . All properties 
listed for capture requests can also be queried on the capture result, to 
determine the final values used for capture. The result also includes 
additional metadata about the state of the camera device during the capture. 



*android.hardware.camera2.CameraMetadata.Key<java.lang.Boolean>_android.hardware.camera2.CaptureResult.BLACK_LEVEL_LOCK*

Whether black-level compensation is locked to its current values, or is free to 
vary 

When set to ON, the values used for black-level compensation must not change 
until the lock is set to OFF 

Since changes to certain capture parameters (such as exposure time) may require 
resetting of black level compensation, the HAL must report whether setting the 
black level lock was successful in the output result metadata. 

The black level locking must happen at the sensor, and not at the ISP. If for 
some reason black level locking is no longer legal (for example, the analog 
gain has changed, which forces black levels to be recalculated), then the HAL 
is free to override this request (and it must report 'OFF' when this does 
happen) until the next time locking is legal again. 


*android.hardware.camera2.CameraMetadata.Key<float[]>_android.hardware.camera2.CaptureResult.COLOR_CORRECTION_GAINS*

Gains applying to Bayer color channels for white-balance 

The 4-channel white-balance gains are defined in the order of [R G_even G_odd 
B], where G_even is the gain for green pixels on even rows of the output, and 
G_odd is the gain for greenpixels on the odd rows. if a HAL does not support a 
separate gain for even/odd green channels, it should use the G_even value,and 
write G_odd equal to G_even in the output result metadata. 

This array is either set by HAL when the request android.colorCorrection.mode 
is not TRANSFORM_MATRIX, or directly by the application in the request when the 
android.colorCorrection.mode is TRANSFORM_MATRIX. 

The ouput should be the gains actually applied by the HAL to the current frame. 


*android.hardware.camera2.CameraMetadata.Key<android.hardware.camera2.Rational[]>_android.hardware.camera2.CaptureResult.COLOR_CORRECTION_TRANSFORM*

A color transform matrix to use to transform from sensor RGB color space to 
output linear sRGB color space 

This matrix is either set by HAL when the request android.colorCorrection.mode 
is not TRANSFORM_MATRIX, or directly by the application in the request when the 
android.colorCorrection.mode is TRANSFORM_MATRIX. 

In the latter case, the HAL may round the matrix to account for precision 
issues; the final rounded matrix should be reported back in this matrix result 
metadata. 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.CONTROL_AE_PRECAPTURE_ID*

The ID sent with the latest CAMERA2_TRIGGER_PRECAPTURE_METERING call 

Must be 0 if no CAMERA2_TRIGGER_PRECAPTURE_METERING trigger received yet by 
HAL. Always updated even if AE algorithm ignores the trigger 


*android.hardware.camera2.CameraMetadata.Key<int[]>_android.hardware.camera2.CaptureResult.CONTROL_AE_REGIONS*

List of areas to use for metering 

Each area is a rectangle plus weight: xmin, ymin, xmax, ymax, weight. The 
rectangle is defined inclusive of the specified coordinates. 

The coordinate system is based on the active pixel array, with (0,0) being the 
top-left pixel in the active pixel array, and 
(android.sensor.info.activeArraySize.width - 1, 
android.sensor.info.activeArraySize.height - 1) being the bottom-right pixel in 
the active pixel array. The weight should be nonnegative. 

If all regions have 0 weight, then no specific metering area needs to be used 
by the HAL. If the metering region is outside the current 
android.scaler.cropRegion, the HAL should ignore the sections outside the 
region and output the used sections in the frame metadata 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.CONTROL_AE_STATE*

Current state of AE algorithm 

Whenever the AE algorithm state changes, a MSG_AUTOEXPOSURE notification must 
be send if a notification callback is registered. 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.CONTROL_AF_MODE*

Whether AF is currently enabled, and what mode it is set to 


*android.hardware.camera2.CameraMetadata.Key<int[]>_android.hardware.camera2.CaptureResult.CONTROL_AF_REGIONS*

List of areas to use for focus estimation 

Each area is a rectangle plus weight: xmin, ymin, xmax, ymax, weight. The 
rectangle is defined inclusive of the specified coordinates. 

The coordinate system is based on the active pixel array, with (0,0) being the 
top-left pixel in the active pixel array, and 
(android.sensor.info.activeArraySize.width - 1, 
android.sensor.info.activeArraySize.height - 1) being the bottom-right pixel in 
the active pixel array. The weight should be nonnegative. 

If all regions have 0 weight, then no specific focus area needs to be used by 
the HAL. If the focusing region is outside the current 
android.scaler.cropRegion, the HAL should ignore the sections outside the 
region and output the used sections in the frame metadata 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.CONTROL_AF_STATE*

Current state of AF algorithm 

Whenever the AF algorithm state changes, a MSG_AUTOFOCUS notification must be 
send if a notification callback is registered. 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.CONTROL_AF_TRIGGER_ID*

The ID sent with the latest CAMERA2_TRIGGER_AUTOFOCUS call 

Must be 0 if no CAMERA2_TRIGGER_AUTOFOCUS trigger received yet by HAL. Always 
updated even if AF algorithm ignores the trigger 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.CONTROL_AWB_MODE*

Whether AWB is currently setting the color transform fields, and what its 
illumination target is 

[BC - AWB lock,AWB modes] 


*android.hardware.camera2.CameraMetadata.Key<int[]>_android.hardware.camera2.CaptureResult.CONTROL_AWB_REGIONS*

List of areas to use for illuminant estimation 

Only used in AUTO mode. 

Each area is a rectangle plus weight: xmin, ymin, xmax, ymax, weight. The 
rectangle is defined inclusive of the specified coordinates. 

The coordinate system is based on the active pixel array, with (0,0) being the 
top-left pixel in the active pixel array, and 
(android.sensor.info.activeArraySize.width - 1, 
android.sensor.info.activeArraySize.height - 1) being the bottom-right pixel in 
the active pixel array. The weight should be nonnegative. 

If all regions have 0 weight, then no specific metering area needs to be used 
by the HAL. If the metering region is outside the current 
android.scaler.cropRegion, the HAL should ignore the sections outside the 
region and output the used sections in the frame metadata 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.CONTROL_AWB_STATE*

Current state of AWB algorithm 

Whenever the AWB algorithm state changes, a MSG_AUTOWHITEBALANCE notification 
must be send if a notification callback is registered. 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.CONTROL_MODE*

Overall mode of 3A control routines 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.EDGE_MODE*

Operation mode for edge enhancement 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.FLASH_MODE*

Select flash operation mode 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.FLASH_STATE*

Current state of the flash unit 


*android.hardware.camera2.CameraMetadata.Key<double[]>_android.hardware.camera2.CaptureResult.JPEG_GPS_COORDINATES*

GPS coordinates to include in output JPEG EXIF 


*android.hardware.camera2.CameraMetadata.Key<java.lang.String>_android.hardware.camera2.CaptureResult.JPEG_GPS_PROCESSING_METHOD*

32 characters describing GPS algorithm to include in EXIF 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Long>_android.hardware.camera2.CaptureResult.JPEG_GPS_TIMESTAMP*

Time GPS fix was made to include in EXIF 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.JPEG_ORIENTATION*

Orientation of JPEG image to write 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Byte>_android.hardware.camera2.CaptureResult.JPEG_QUALITY*

Compression quality of the final JPEG image 

85-95 is typical usage range 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Byte>_android.hardware.camera2.CaptureResult.JPEG_THUMBNAIL_QUALITY*

Compression quality of JPEG thumbnail 


*android.hardware.camera2.CameraMetadata.Key<android.hardware.camera2.Size>_android.hardware.camera2.CaptureResult.JPEG_THUMBNAIL_SIZE*

Resolution of embedded JPEG thumbnail 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Boolean>_android.hardware.camera2.CaptureResult.LED_TRANSMIT*

This LED is nominally used to indicate to the user that the camera is powered 
on and may be streaming images back to the Application Processor. In certain 
rare circumstances, the OS may disable this when video is processed locally and 
not transmitted to any untrusted applications. 

In particular, the LED *must* always be on when the data could be transmitted 
off the device. The LED *should* always be on whenever data is stored locally 
on the device. 

The LED *may* be off if a trusted application is using the data that doesn't 
violate the above rules. 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Float>_android.hardware.camera2.CaptureResult.LENS_APERTURE*

Size of the lens aperture 

Will not be supported on most devices. Can only pick from supported list 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Float>_android.hardware.camera2.CaptureResult.LENS_FILTER_DENSITY*

State of lens neutral density filter(s) 

Will not be supported on most devices. Can only pick from supported list 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Float>_android.hardware.camera2.CaptureResult.LENS_FOCAL_LENGTH*

Lens optical zoom setting 

Will not be supported on most devices. 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Float>_android.hardware.camera2.CaptureResult.LENS_FOCUS_DISTANCE*

Distance to plane of sharpest focus, measured from frontmost surface of the 
lens 

Should be zero for fixed-focus cameras 


*android.hardware.camera2.CameraMetadata.Key<float[]>_android.hardware.camera2.CaptureResult.LENS_FOCUS_RANGE*

The range of scene distances that are in sharp focus (depth of field) 

If variable focus not supported, can still report fixed depth of field range 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.LENS_OPTICAL_STABILIZATION_MODE*

Whether optical image stabilization is enabled. 

Will not be supported on most devices. 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.LENS_STATE*

Current lens status 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.NOISE_REDUCTION_MODE*

Mode of operation for the noise reduction algorithm 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Boolean>_android.hardware.camera2.CaptureResult.QUIRKS_PARTIAL_RESULT*

Whether a result given to the framework is the final one for the capture, or 
only a partial that contains a subset of the full set of dynamic metadata 
values. 

The entries in the result metadata buffers for a single capture may not 
overlap, except for this entry. The FINAL buffers must retain FIFO ordering 
relative to the requests that generate them, so the FINAL buffer for frame 3 
must always be sent to the framework after the FINAL buffer for frame 2, and 
before the FINAL buffer for frame 4. PARTIAL buffers may be returned in any 
order relative to other frames, but all PARTIAL buffers for a given capture 
must arrive before the FINAL buffer for that capture. This entry may only be 
used by the HAL if quirks.usePartialResult is set to 1. 

Optional - This value may be null on some devices. 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.REQUEST_FRAME_COUNT*

A frame counter set by the framework. This value monotonically increases with 
every new result (that is, each new result has a unique frameCount value). 

Reset on release() 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.REQUEST_ID*

An application-specified ID for the current request. Must be maintained 
unchanged in output frame 


*android.hardware.camera2.CameraMetadata.Key<android.graphics.Rect>_android.hardware.camera2.CaptureResult.SCALER_CROP_REGION*

(x, y, width, height). 

A rectangle with the top-level corner of (x,y) and size (width, height). The 
region of the sensor that is used for output. Each stream must use this 
rectangle to produce its output, cropping to a smaller region if necessary to 
maintain the stream's aspect ratio. 

HAL2.x uses only (x, y, width) 

Any additional per-stream cropping must be done to maximize the final pixel 
area of the stream. 

For example, if the crop region is set to a 4:3 aspect ratio, then 4:3 streams 
should use the exact crop region. 16:9 streams should further crop vertically 
(letterbox). 

Conversely, if the crop region is set to a 16:9, then 4:3 outputs should crop 
horizontally (pillarbox), and 16:9 streams should match exactly. These 
additional crops must be centered within the crop region. 

The output streams must maintain square pixels at all times, no matter what the 
relative aspect ratios of the crop region and the stream are. Negative values 
for corner are allowed for raw output if full pixel array is larger than active 
pixel array. Width and height may be rounded to nearest larger supportable 
width, especially for raw output, where only a few fixed scales may be 
possible. The width and height of the crop region cannot be set to be smaller 
than floor( activeArraySize.width / android.scaler.maxDigitalZoom ) and floor( 
activeArraySize.height / android.scaler.maxDigitalZoom), respectively. 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Long>_android.hardware.camera2.CaptureResult.SENSOR_EXPOSURE_TIME*

Duration each pixel is exposed to light. 

If the sensor can't expose this exact duration, it should shorten the duration 
exposed to the nearest possible value (rather than expose longer). 

1/10000 - 30 sec range. No bulb mode 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Long>_android.hardware.camera2.CaptureResult.SENSOR_FRAME_DURATION*

Duration from start of frame exposure to start of next frame exposure 

Exposure time has priority, so duration is set to max(duration, exposure time + 
overhead) 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.SENSOR_SENSITIVITY*

Gain applied to image data. Must be implemented through analog gain only if set 
to values below 'maximum analog sensitivity'. 

If the sensor can't apply this exact gain, it should lessen the gain to the 
nearest possible value (rather than gain more). 

ISO 12232:2006 REI method 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Float>_android.hardware.camera2.CaptureResult.SENSOR_TEMPERATURE*

The temperature of the sensor, sampled at the time exposure began for this 
frame. 

The thermal diode being queried should be inside the sensor PCB, or somewhere 
close to it. 

Optional - This value may be null on some devices. 

HARDWARE_LEVEL_FULL(|android.hardware.camera2.CameraCharacteristics|) - Present 
on all devices that report being FULL level hardware devices in the 
HARDWARE_LEVEL(|android.hardware.camera2.CameraCharacteristics|) key. 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Long>_android.hardware.camera2.CaptureResult.SENSOR_TIMESTAMP*

Time at start of exposure of first row 

Monotonic, should be synced to other timestamps in system 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.STATISTICS_FACE_DETECT_MODE*

State of the face detector unit 

Whether face detection is enabled, and whether it should output just the basic 
fields or the full set of fields. Value must be one of the 
android.statistics.info.availableFaceDetectModes. 


*android.hardware.camera2.CameraMetadata.Key<int[]>_android.hardware.camera2.CaptureResult.STATISTICS_FACE_IDS*

List of unique IDs for detected faces 

Only available if faceDetectMode == FULL 


*android.hardware.camera2.CameraMetadata.Key<int[]>_android.hardware.camera2.CaptureResult.STATISTICS_FACE_LANDMARKS*

List of landmarks for detected faces 

Only available if faceDetectMode == FULL 


*android.hardware.camera2.CameraMetadata.Key<android.graphics.Rect[]>_android.hardware.camera2.CaptureResult.STATISTICS_FACE_RECTANGLES*

List of the bounding rectangles for detected faces 

Only available if faceDetectMode != OFF 


*android.hardware.camera2.CameraMetadata.Key<byte[]>_android.hardware.camera2.CaptureResult.STATISTICS_FACE_SCORES*

List of the face confidence scores for detected faces 

Only available if faceDetectMode != OFF. The value should be meaningful (for 
example, setting 100 at all times is illegal). 


*android.hardware.camera2.CameraMetadata.Key<android.hardware.camera2.Face[]>_android.hardware.camera2.CaptureResult.STATISTICS_FACES*

List of the Faces(|android.hardware.camera2.Face|) detected through camera face 
detection in this result. 

Only available if (|android.hardware.camera2.CaptureResult|) != 
OFF(|android.hardware.camera2.CameraMetadata|) . 


*android.hardware.camera2.CameraMetadata.Key<float[]>_android.hardware.camera2.CaptureResult.STATISTICS_LENS_SHADING_MAP*

A low-resolution map of lens shading, per color channel 

Assume bilinear interpolation of map. The least shaded section of the image 
should have a gain factor of 1; all other sections should have gains above 1. 
the map should be on the order of 30-40 rows, and must be smaller than 64x64. 

When android.colorCorrection.mode = TRANSFORM_MATRIX, the map must take into 
account the colorCorrection settings. 


*android.hardware.camera2.CameraMetadata.Key<float[]>_android.hardware.camera2.CaptureResult.STATISTICS_PREDICTED_COLOR_GAINS*

The best-fit color channel gains calculated by the HAL's statistics units for 
the current output frame 

This may be different than the gains used for this frame, since statistics 
processing on data from a new frame typically completes after the transform has 
already been applied to that frame. 

The 4 channel gains are defined in Bayer domain, see 
android.colorCorrection.gains for details. 

This value should always be calculated by the AWB block, regardless of the 
android.control.* current values. 


*android.hardware.camera2.CameraMetadata.Key<android.hardware.camera2.Rational[]>_android.hardware.camera2.CaptureResult.STATISTICS_PREDICTED_COLOR_TRANSFORM*

The best-fit color transform matrix estimate calculated by the HAL's statistics 
units for the current output frame 

The HAL must provide the estimate from its statistics unit on the white balance 
transforms to use for the next frame. These are the values the HAL believes are 
the best fit for the current output frame. This may be different than the 
transform used for this frame, since statistics processing on data from a new 
frame typically completes after the transform has already been applied to that 
frame. 

These estimates must be provided for all frames, even if capture settings and 
color transforms are set by the application. 

This value should always be calculated by the AWB block, regardless of the 
android.control.* current values. 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.STATISTICS_SCENE_FLICKER*

The HAL estimated scene illumination lighting frequency 

Report NONE if there doesn't appear to be flickering illumination 


*android.hardware.camera2.CameraMetadata.Key<float[]>_android.hardware.camera2.CaptureResult.TONEMAP_CURVE_BLUE*

Table mapping blue input values to output values 

Tonemapping / contrast / gamma curve for the blue channel, to use when 
android.tonemap.mode is CONTRAST_CURVE. 

See android.tonemap.curveRed for more details. 


*android.hardware.camera2.CameraMetadata.Key<float[]>_android.hardware.camera2.CaptureResult.TONEMAP_CURVE_GREEN*

Table mapping green input values to output values 

Tonemapping / contrast / gamma curve for the green channel, to use when 
android.tonemap.mode is CONTRAST_CURVE. 

See android.tonemap.curveRed for more details. 


*android.hardware.camera2.CameraMetadata.Key<float[]>_android.hardware.camera2.CaptureResult.TONEMAP_CURVE_RED*

Table mapping red input values to output values 

Tonemapping / contrast / gamma curve for the red channel, to use when 
android.tonemap.mode is CONTRAST_CURVE. 

Since the input and output ranges may vary depending on the camera pipeline, 
the input and output pixel values are represented by normalized floating-point 
values between 0 and 1, with 0 == black and 1 == white. 

The curve should be linearly interpolated between the defined points. The 
points will be listed in increasing order of P_IN. For example, if the array 
is: [0.0, 0.0, 0.3, 0.5, 1.0, 1.0], then the input->output mapping for a few 
sample points would be: 0 -> 0, 0.15 -> 0.25, 0.3 -> 0.5, 0.5 -> 0.64 


*android.hardware.camera2.CameraMetadata.Key<java.lang.Integer>_android.hardware.camera2.CaptureResult.TONEMAP_MODE*





*android.hardware.camera2.CaptureResult(CameraMetadataNative,CaptureRequest,int)*

public CaptureResult(
  android.hardware.camera2.impl.CameraMetadataNative results,
  android.hardware.camera2.CaptureRequest parent,
  int sequenceId)

Takes ownership of the passed-in properties object 


*android.hardware.camera2.CaptureResult.get(CameraMetadata.Key<T>)*

public |T| get(android.hardware.camera2.CameraMetadata.Key<T> key)





*android.hardware.camera2.CaptureResult.getFrameNumber()*

public int getFrameNumber()

Get the frame number associated with this result. 

Whenever a request has been processed, regardless of failure or success, it 
gets a unique frame number assigned to its future result/failure. 

This value monotonically increments, starting with 0, for every new result or 
failure; and the scope is the lifetime of the 
(|android.hardware.camera2.CameraDevice|) . 



    Returns: int frame number 

*android.hardware.camera2.CaptureResult.getRequest()*

public |android.hardware.camera2.CaptureRequest| getRequest()

Get the request associated with this result. 

Whenever a request is successfully captured, with 
(|android.hardware.camera2.CameraDevice.CaptureListener|) , 
theresult'sgetRequest()will return thatrequest. 

In particular, 

cameraDevice.capture(someRequest, new CaptureListener() {@Override void 
onCaptureCompleted(CaptureRequest myRequest, CaptureResult myResult) { 
assert(myResult.getRequest.equals(myRequest) == true); } }; 





    Returns: The request associated with this result. Never {@code null}. 

*android.hardware.camera2.CaptureResult.getSequenceId()*

public int getSequenceId()

The sequence ID for this failure that was returned by the 
(|android.hardware.camera2.CameraDevice|) family of functions. 

The sequence ID is a unique monotonically increasing value starting from 0, 
incremented every time a new group of requests is submitted to the 
CameraDevice. 



    Returns: int The ID for the sequence of requests that this capture result is a part of 


