*android.content.pm.ApplicationInfo* *ApplicationInfo* Information you can retri

public class ApplicationInfo
  extends    |android.content.pm.PackageItemInfo|
  implements |android.os.Parcelable|

|android.content.pm.ApplicationInfo_Description|
|android.content.pm.ApplicationInfo_Fields|
|android.content.pm.ApplicationInfo_Constructors|
|android.content.pm.ApplicationInfo_Methods|

================================================================================

*android.content.pm.ApplicationInfo_Fields*
|java.lang.String_android.content.pm.ApplicationInfo.backupAgentName|
|java.lang.String_android.content.pm.ApplicationInfo.className|
|int_android.content.pm.ApplicationInfo.compatibleWidthLimitDp|
|android.os.Parcelable.Creator<android.content.pm.ApplicationInfo>_android.content.pm.ApplicationInfo.CREATOR|
|java.lang.String_android.content.pm.ApplicationInfo.dataDir|
|int_android.content.pm.ApplicationInfo.descriptionRes|
|boolean_android.content.pm.ApplicationInfo.enabled|
|int_android.content.pm.ApplicationInfo.enabledSetting|
|int_android.content.pm.ApplicationInfo.FLAG_ALLOW_BACKUP|
|int_android.content.pm.ApplicationInfo.FLAG_ALLOW_CLEAR_USER_DATA|
|int_android.content.pm.ApplicationInfo.FLAG_ALLOW_TASK_REPARENTING|
|int_android.content.pm.ApplicationInfo.FLAG_BLOCKED|
|int_android.content.pm.ApplicationInfo.FLAG_CANT_SAVE_STATE|
|int_android.content.pm.ApplicationInfo.FLAG_DEBUGGABLE|
|int_android.content.pm.ApplicationInfo.FLAG_EXTERNAL_STORAGE|
|int_android.content.pm.ApplicationInfo.FLAG_FACTORY_TEST|
|int_android.content.pm.ApplicationInfo.FLAG_FORWARD_LOCK|
|int_android.content.pm.ApplicationInfo.FLAG_HAS_CODE|
|int_android.content.pm.ApplicationInfo.FLAG_INSTALLED|
|int_android.content.pm.ApplicationInfo.FLAG_IS_DATA_ONLY|
|int_android.content.pm.ApplicationInfo.FLAG_KILL_AFTER_RESTORE|
|int_android.content.pm.ApplicationInfo.FLAG_LARGE_HEAP|
|int_android.content.pm.ApplicationInfo.FLAG_PERSISTENT|
|int_android.content.pm.ApplicationInfo.FLAG_PRIVILEGED|
|int_android.content.pm.ApplicationInfo.FLAG_RESIZEABLE_FOR_SCREENS|
|int_android.content.pm.ApplicationInfo.FLAG_RESTORE_ANY_VERSION|
|int_android.content.pm.ApplicationInfo.FLAG_STOPPED|
|int_android.content.pm.ApplicationInfo.FLAG_SUPPORTS_LARGE_SCREENS|
|int_android.content.pm.ApplicationInfo.FLAG_SUPPORTS_NORMAL_SCREENS|
|int_android.content.pm.ApplicationInfo.FLAG_SUPPORTS_RTL|
|int_android.content.pm.ApplicationInfo.FLAG_SUPPORTS_SCREEN_DENSITIES|
|int_android.content.pm.ApplicationInfo.FLAG_SUPPORTS_SMALL_SCREENS|
|int_android.content.pm.ApplicationInfo.FLAG_SUPPORTS_XLARGE_SCREENS|
|int_android.content.pm.ApplicationInfo.FLAG_SYSTEM|
|int_android.content.pm.ApplicationInfo.FLAG_TEST_ONLY|
|int_android.content.pm.ApplicationInfo.FLAG_UPDATED_SYSTEM_APP|
|int_android.content.pm.ApplicationInfo.FLAG_VM_SAFE_MODE|
|int_android.content.pm.ApplicationInfo.flags|
|int_android.content.pm.ApplicationInfo.installLocation|
|int_android.content.pm.ApplicationInfo.largestWidthLimitDp|
|java.lang.String_android.content.pm.ApplicationInfo.manageSpaceActivityName|
|java.lang.String_android.content.pm.ApplicationInfo.nativeLibraryDir|
|java.lang.String_android.content.pm.ApplicationInfo.permission|
|java.lang.String_android.content.pm.ApplicationInfo.processName|
|java.lang.String_android.content.pm.ApplicationInfo.publicSourceDir|
|int_android.content.pm.ApplicationInfo.requiresSmallestWidthDp|
|java.lang.String[]_android.content.pm.ApplicationInfo.resourceDirs|
|java.lang.String_android.content.pm.ApplicationInfo.seinfo|
|java.lang.String[]_android.content.pm.ApplicationInfo.sharedLibraryFiles|
|java.lang.String_android.content.pm.ApplicationInfo.sourceDir|
|int_android.content.pm.ApplicationInfo.targetSdkVersion|
|java.lang.String_android.content.pm.ApplicationInfo.taskAffinity|
|int_android.content.pm.ApplicationInfo.theme|
|int_android.content.pm.ApplicationInfo.uid|
|int_android.content.pm.ApplicationInfo.uiOptions|

*android.content.pm.ApplicationInfo_Constructors*
|android.content.pm.ApplicationInfo()|
|android.content.pm.ApplicationInfo(ApplicationInfo)|

*android.content.pm.ApplicationInfo_Methods*
|android.content.pm.ApplicationInfo.describeContents()|
|android.content.pm.ApplicationInfo.disableCompatibilityMode()|Disable compatib
|android.content.pm.ApplicationInfo.dump(Printer,String)|
|android.content.pm.ApplicationInfo.getApplicationInfo()|
|android.content.pm.ApplicationInfo.hasRtlSupport()|
|android.content.pm.ApplicationInfo.loadDefaultIcon(PackageManager)|
|android.content.pm.ApplicationInfo.loadDescription(PackageManager)|Retrieve th
|android.content.pm.ApplicationInfo.toString()|
|android.content.pm.ApplicationInfo.writeToParcel(Parcel,int)|

*android.content.pm.ApplicationInfo_Description*

Information you can retrieve about a particular application. This corresponds 
to information collected from the AndroidManifest.xml's <application> tag. 



*java.lang.String_android.content.pm.ApplicationInfo.backupAgentName*

Class implementing the Application's backup functionality. From the 
"backupAgent" attribute. This is an optional attribute and will be null if the 
application does not specify it in its manifest. 

If android:allowBackup is set to false, this attribute is ignored. 


*java.lang.String_android.content.pm.ApplicationInfo.className*

Class implementing the Application object. From the "class" attribute. 


*int_android.content.pm.ApplicationInfo.compatibleWidthLimitDp*

The maximum smallest screen width the application is designed for. If 0, 
nothing has been specified. Comes from 
android:compatibleWidthLimitDp(|android.R.styleable|) attribute of the 
<supports-screens> tag. 


*android.os.Parcelable.Creator<android.content.pm.ApplicationInfo>_android.content.pm.ApplicationInfo.CREATOR*




*java.lang.String_android.content.pm.ApplicationInfo.dataDir*

Full path to a directory assigned to the package for its persistent data. 


*int_android.content.pm.ApplicationInfo.descriptionRes*

A style resource identifier (in the package's resources) of the description of 
an application. From the "description" attribute or, if not set, 0. 


*boolean_android.content.pm.ApplicationInfo.enabled*

When false, indicates that all components within this application are 
considered disabled, regardless of their individually set enabled status. 


*int_android.content.pm.ApplicationInfo.enabledSetting*

For convenient access to the current enabled setting of this app. 


*int_android.content.pm.ApplicationInfo.FLAG_ALLOW_BACKUP*

Value for (|android.content.pm.ApplicationInfo|) : set to false if the 
application does not wish to permit any OS-driven backups of its data; true 
otherwise. 

Comes from the android:allowBackup(|android.R.styleable|) attribute of the 
<application> tag. 


*int_android.content.pm.ApplicationInfo.FLAG_ALLOW_CLEAR_USER_DATA*

Value for (|android.content.pm.ApplicationInfo|) : default value for the 
corresponding ActivityInfo flag. Comes from 
android:allowClearUserData(|android.R.styleable|) of the <application> tag. 


*int_android.content.pm.ApplicationInfo.FLAG_ALLOW_TASK_REPARENTING*

Value for (|android.content.pm.ApplicationInfo|) : default value for the 
corresponding ActivityInfo flag. Comes from 
android:allowTaskReparenting(|android.R.styleable|) of the <application> tag. 


*int_android.content.pm.ApplicationInfo.FLAG_BLOCKED*

Value for (|android.content.pm.ApplicationInfo|) : true if the application is 
blocked via restrictions and for most purposes is considered as not installed. 


*int_android.content.pm.ApplicationInfo.FLAG_CANT_SAVE_STATE*

Value for (|android.content.pm.ApplicationInfo|) : set to true if the 
application has reported that it is heavy-weight, and thus can not participate 
in the normal application lifecycle. 

Comes from the android:cantSaveState(|android.R.styleable|) attribute of the 
<application> tag. 


*int_android.content.pm.ApplicationInfo.FLAG_DEBUGGABLE*

Value for (|android.content.pm.ApplicationInfo|) : set to true if this 
application would like to allow debugging of its code, even when installed on a 
non-development system. Comes from android:debuggable(|android.R.styleable|) of 
the <application> tag. 


*int_android.content.pm.ApplicationInfo.FLAG_EXTERNAL_STORAGE*

Value for (|android.content.pm.ApplicationInfo|) : Set to true if the 
application is currently installed on external/removable/unprotected storage. 
Such applications may not be available if their storage is not currently 
mounted. When the storage it is on is not available, it will look like the 
application has been uninstalled (its .apk is no longer available) but its 
persistent data is not removed. 


*int_android.content.pm.ApplicationInfo.FLAG_FACTORY_TEST*

Value for (|android.content.pm.ApplicationInfo|) : set to true if this 
application holds the (|android.Manifest.permission|) permission and the device 
is running in factory test mode. 


*int_android.content.pm.ApplicationInfo.FLAG_FORWARD_LOCK*

Value for (|android.content.pm.ApplicationInfo|) : Set to true if the 
application has been installed using the forward lock option. 

NOTE: DO NOT CHANGE THIS VALUE! It is saved in packages.xml. 


*int_android.content.pm.ApplicationInfo.FLAG_HAS_CODE*

Value for (|android.content.pm.ApplicationInfo|) : set to true if this 
application has code associated with it. Comes from 
android:hasCode(|android.R.styleable|) of the <application> tag. 


*int_android.content.pm.ApplicationInfo.FLAG_INSTALLED*

Value for (|android.content.pm.ApplicationInfo|) : true if the application is 
currently installed for the calling user. 


*int_android.content.pm.ApplicationInfo.FLAG_IS_DATA_ONLY*

Value for (|android.content.pm.ApplicationInfo|) : true if the application only 
has its data installed; the application package itself does not currently exist 
on the device. 


*int_android.content.pm.ApplicationInfo.FLAG_KILL_AFTER_RESTORE*

Value for (|android.content.pm.ApplicationInfo|) : set to false if the 
application must be kept in memory following a full-system restore operation; 
true otherwise. Ordinarily, during a full system restore operation each 
application is shut down following execution of its agent's onRestore() method. 
Setting this attribute to false prevents this. Most applications will not need 
to set this attribute. 

If android:allowBackup(|android.R.styleable|) is set to false or no 
android:backupAgent(|android.R.styleable|) is specified, this flag will be 
ignored. 

Comes from the android:killAfterRestore(|android.R.styleable|) attribute of the 
<application> tag. 


*int_android.content.pm.ApplicationInfo.FLAG_LARGE_HEAP*

Value for (|android.content.pm.ApplicationInfo|) : true when the application 
has requested a large heap for its processes. Corresponds to 
android:largeHeap(|android.R.styleable|) . 


*int_android.content.pm.ApplicationInfo.FLAG_PERSISTENT*

Value for (|android.content.pm.ApplicationInfo|) : set to true if this 
application is persistent. Comes from android:persistent(|android.R.styleable|) 
of the <application> tag. 


*int_android.content.pm.ApplicationInfo.FLAG_PRIVILEGED*

Value for (|android.content.pm.ApplicationInfo|) : set totrueif the application 
is permitted to hold privileged permissions. 


*int_android.content.pm.ApplicationInfo.FLAG_RESIZEABLE_FOR_SCREENS*

Value for (|android.content.pm.ApplicationInfo|) : true when the application 
knows how to adjust its UI for different screen sizes. Corresponds to 
android:resizeable(|android.R.styleable|) . 


*int_android.content.pm.ApplicationInfo.FLAG_RESTORE_ANY_VERSION*

Value for (|android.content.pm.ApplicationInfo|) : Set to true if the 
application's backup agent claims to be able to handle restore data even "from 
the future," i.e. from versions of the application with a versionCode greater 
than the one currently installed on the device. Use with caution! By default 
this attribute is false and the Backup Manager will ensure that data from 
"future" versions of the application are never supplied during a restore 
operation. 

If android:allowBackup(|android.R.styleable|) is set to false or no 
android:backupAgent(|android.R.styleable|) is specified, this flag will be 
ignored. 

Comes from the android:restoreAnyVersion(|android.R.styleable|) attribute of 
the <application> tag. 


*int_android.content.pm.ApplicationInfo.FLAG_STOPPED*

Value for (|android.content.pm.ApplicationInfo|) : true if this application's 
package is in the stopped state. 


*int_android.content.pm.ApplicationInfo.FLAG_SUPPORTS_LARGE_SCREENS*

Value for (|android.content.pm.ApplicationInfo|) : true when the application's 
window can be increased in size for larger screens. Corresponds to 
android:largeScreens(|android.R.styleable|) . 


*int_android.content.pm.ApplicationInfo.FLAG_SUPPORTS_NORMAL_SCREENS*

Value for (|android.content.pm.ApplicationInfo|) : true when the application's 
window can be displayed on normal screens. Corresponds to 
android:normalScreens(|android.R.styleable|) . 


*int_android.content.pm.ApplicationInfo.FLAG_SUPPORTS_RTL*

Value for (|android.content.pm.ApplicationInfo|) : true when the application is 
willing to support RTL (right to left). All activities will inherit this value. 

Set from the (|android.R.attr|) attribute in the activity's manifest. 

Default value is false (no support for RTL). 


*int_android.content.pm.ApplicationInfo.FLAG_SUPPORTS_SCREEN_DENSITIES*

Value for (|android.content.pm.ApplicationInfo|) : true when the application 
knows how to accomodate different screen densities. Corresponds to 
android:anyDensity(|android.R.styleable|) . 


*int_android.content.pm.ApplicationInfo.FLAG_SUPPORTS_SMALL_SCREENS*

Value for (|android.content.pm.ApplicationInfo|) : true when the application's 
window can be reduced in size for smaller screens. Corresponds to 
android:smallScreens(|android.R.styleable|) . 


*int_android.content.pm.ApplicationInfo.FLAG_SUPPORTS_XLARGE_SCREENS*

Value for (|android.content.pm.ApplicationInfo|) : true when the application's 
window can be increased in size for extra large screens. Corresponds to 
android:xlargeScreens(|android.R.styleable|) . 


*int_android.content.pm.ApplicationInfo.FLAG_SYSTEM*

Value for (|android.content.pm.ApplicationInfo|) : if set, this application is 
installed in the device's system image. 


*int_android.content.pm.ApplicationInfo.FLAG_TEST_ONLY*

Value for (|android.content.pm.ApplicationInfo|) : this is set of the 
application has specified android:testOnly(|android.R.styleable|) to be true. 


*int_android.content.pm.ApplicationInfo.FLAG_UPDATED_SYSTEM_APP*

Value for (|android.content.pm.ApplicationInfo|) : this is set if this 
application has been install as an update to a built-in system application. 


*int_android.content.pm.ApplicationInfo.FLAG_VM_SAFE_MODE*

Value for (|android.content.pm.ApplicationInfo|) : set to true if this 
application would like to request the VM to operate under the safe mode. Comes 
from android:vmSafeMode(|android.R.styleable|) of the <application> tag. 


*int_android.content.pm.ApplicationInfo.flags*

Flags associated with the application. Any combination of 
(|android.content.pm.ApplicationInfo|) , (|android.content.pm.ApplicationInfo|) 
, (|android.content.pm.ApplicationInfo|) , 
(|android.content.pm.ApplicationInfo|) , (|android.content.pm.ApplicationInfo|) 
, and (|android.content.pm.ApplicationInfo|) 
(|android.content.pm.ApplicationInfo|) , (|android.content.pm.ApplicationInfo|) 
, (|android.content.pm.ApplicationInfo|) , 
(|android.content.pm.ApplicationInfo|) , (|android.content.pm.ApplicationInfo|) 
, (|android.content.pm.ApplicationInfo|) , 
(|android.content.pm.ApplicationInfo|) , (|android.content.pm.ApplicationInfo|) 
, (|android.content.pm.ApplicationInfo|) , 
(|android.content.pm.ApplicationInfo|) , (|android.content.pm.ApplicationInfo|) 
. 


*int_android.content.pm.ApplicationInfo.installLocation*

For convenient access to package's install location. 


*int_android.content.pm.ApplicationInfo.largestWidthLimitDp*

The maximum smallest screen width the application will work on. If 0, nothing 
has been specified. Comes from 
android:largestWidthLimitDp(|android.R.styleable|) attribute of the 
<supports-screens> tag. 


*java.lang.String_android.content.pm.ApplicationInfo.manageSpaceActivityName*

Class implementing the Application's manage space functionality. From the 
"manageSpaceActivity" attribute. This is an optional attribute and will be null 
if applications don't specify it in their manifest 


*java.lang.String_android.content.pm.ApplicationInfo.nativeLibraryDir*

Full path to the directory where native JNI libraries are stored. 


*java.lang.String_android.content.pm.ApplicationInfo.permission*

Optional name of a permission required to be able to access this application's 
components. From the "permission" attribute. 


*java.lang.String_android.content.pm.ApplicationInfo.processName*

The name of the process this application should run in. From the "process" 
attribute or, if not set, the same as packageName. 


*java.lang.String_android.content.pm.ApplicationInfo.publicSourceDir*

Full path to the location of the publicly available parts of this package (i.e. 
the primary resource package and manifest). For non-forward-locked apps this 
will be the same as {@link #sourceDir). 


*int_android.content.pm.ApplicationInfo.requiresSmallestWidthDp*

The required smallest screen width the application can run on. If 0, nothing 
has been specified. Comes from 
android:requiresSmallestWidthDp(|android.R.styleable|) attribute of the 
<supports-screens> tag. 


*java.lang.String[]_android.content.pm.ApplicationInfo.resourceDirs*

Full paths to the locations of extra resource packages this application uses. 
This field is only used if there are extra resource packages, otherwise it is 
null. 


*java.lang.String_android.content.pm.ApplicationInfo.seinfo*

String retrieved from the seinfo tag found in selinux policy. This value is 
useful in setting an SELinux security context on the process as well as its 
data directory. 


*java.lang.String[]_android.content.pm.ApplicationInfo.sharedLibraryFiles*

Paths to all shared libraries this application is linked against. This field is 
only set if the 
PackageManager.GET_SHARED_LIBRARY_FILES(|android.content.pm.PackageManager|) 
flag was used when retrieving the structure. 


*java.lang.String_android.content.pm.ApplicationInfo.sourceDir*

Full path to the location of this package. 


*int_android.content.pm.ApplicationInfo.targetSdkVersion*

The minimum SDK version this application targets. It may run on earlier 
versions, but it knows how to work with any new behavior added at this version. 
Will be (|android.os.Build.VERSION_CODES|) if this is a development build and 
the app is targeting that. You should compare that this number is >= the SDK 
version number at which your behavior was introduced. 


*java.lang.String_android.content.pm.ApplicationInfo.taskAffinity*

Default task affinity of all activities in this application. See 
(|android.content.pm.ActivityInfo|) for more information. This comes from the 
"taskAffinity" attribute. 


*int_android.content.pm.ApplicationInfo.theme*

A style resource identifier (in the package's resources) of the default visual 
theme of the application. From the "theme" attribute or, if not set, 0. 


*int_android.content.pm.ApplicationInfo.uid*

The kernel user-ID that has been assigned to this application; currently this 
is not a unique ID (multiple applications can have the same uid). 


*int_android.content.pm.ApplicationInfo.uiOptions*

The default extra UI options for activities in this application. Set from the 
(|android.R.attr|) attribute in the activity's manifest. 



*android.content.pm.ApplicationInfo()*

public ApplicationInfo()




*android.content.pm.ApplicationInfo(ApplicationInfo)*

public ApplicationInfo(android.content.pm.ApplicationInfo orig)




*android.content.pm.ApplicationInfo.describeContents()*

public int describeContents()





*android.content.pm.ApplicationInfo.disableCompatibilityMode()*

public void disableCompatibilityMode()

Disable compatibility mode 



*android.content.pm.ApplicationInfo.dump(Printer,String)*

public void dump(
  android.util.Printer pw,
  java.lang.String prefix)





*android.content.pm.ApplicationInfo.getApplicationInfo()*

protected |android.content.pm.ApplicationInfo| getApplicationInfo()





*android.content.pm.ApplicationInfo.hasRtlSupport()*

public boolean hasRtlSupport()





    Returns: true if "supportsRtl" has been set to true in the AndroidManifest 

*android.content.pm.ApplicationInfo.loadDefaultIcon(PackageManager)*

protected Drawable loadDefaultIcon(android.content.pm.PackageManager pm)





*android.content.pm.ApplicationInfo.loadDescription(PackageManager)*

public |java.lang.CharSequence| loadDescription(android.content.pm.PackageManager pm)

Retrieve the textual description of the application. This will call back on the 
given PackageManager to load the description from the application. 


    pm - A PackageManager from which the label can be loaded; usually the PackageManager 
       from which you originally retrieved this item. 

    Returns: Returns a CharSequence containing the application's description. If there is no 
             description, null is returned. 

*android.content.pm.ApplicationInfo.toString()*

public |java.lang.String| toString()





*android.content.pm.ApplicationInfo.writeToParcel(Parcel,int)*

public void writeToParcel(
  android.os.Parcel dest,
  int parcelableFlags)






