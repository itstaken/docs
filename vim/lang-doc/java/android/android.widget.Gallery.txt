*android.widget.Gallery* *Gallery* A view that shows items in a center-locked, h

public class Gallery
  extends    |android.widget.AbsSpinner|
  implements |android.view.GestureDetector.OnGestureListener|

|android.widget.Gallery_Description|
|android.widget.Gallery_Fields|
|android.widget.Gallery_Constructors|
|android.widget.Gallery_Methods|

================================================================================

*android.widget.Gallery_Constructors*
|android.widget.Gallery(Context)|
|android.widget.Gallery(Context,AttributeSet)|
|android.widget.Gallery(Context,AttributeSet,int)|

*android.widget.Gallery_Methods*
|android.widget.Gallery.checkLayoutParams(ViewGroup.LayoutParams)|
|android.widget.Gallery.computeHorizontalScrollExtent()|
|android.widget.Gallery.computeHorizontalScrollOffset()|
|android.widget.Gallery.computeHorizontalScrollRange()|
|android.widget.Gallery.dispatchKeyEvent(KeyEvent)|
|android.widget.Gallery.dispatchSetPressed(boolean)|
|android.widget.Gallery.dispatchSetSelected(boolean)|
|android.widget.Gallery.generateDefaultLayoutParams()|
|android.widget.Gallery.generateLayoutParams(AttributeSet)|
|android.widget.Gallery.generateLayoutParams(ViewGroup.LayoutParams)|
|android.widget.Gallery.getChildDrawingOrder(int,int)|
|android.widget.Gallery.getChildStaticTransformation(View,Transformation)|
|android.widget.Gallery.getContextMenuInfo()|
|android.widget.Gallery.onDown(MotionEvent)|
|android.widget.Gallery.onFling(MotionEvent,MotionEvent,float,float)|
|android.widget.Gallery.onFocusChanged(boolean,int,Rect)|
|android.widget.Gallery.onInitializeAccessibilityEvent(AccessibilityEvent)|
|android.widget.Gallery.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)|
|android.widget.Gallery.onKeyDown(int,KeyEvent)|Handles left, right, and clicki
|android.widget.Gallery.onKeyUp(int,KeyEvent)|
|android.widget.Gallery.onLayout(boolean,int,int,int,int)|
|android.widget.Gallery.onLongPress(MotionEvent)|
|android.widget.Gallery.onScroll(MotionEvent,MotionEvent,float,float)|
|android.widget.Gallery.onShowPress(MotionEvent)|
|android.widget.Gallery.onSingleTapUp(MotionEvent)|
|android.widget.Gallery.onTouchEvent(MotionEvent)|
|android.widget.Gallery.performAccessibilityAction(int,Bundle)|
|android.widget.Gallery.setAnimationDuration(int)|Sets how long the transition 
|android.widget.Gallery.setCallbackDuringFling(boolean)|Whether or not to callb
|android.widget.Gallery.setCallbackOnUnselectedItemClick(boolean)|Whether or no
|android.widget.Gallery.setGravity(int)|Describes how the child views are align
|android.widget.Gallery.setSpacing(int)|Sets the spacing between items in a Gal
|android.widget.Gallery.setUnselectedAlpha(float)|Sets the alpha of items that 
|android.widget.Gallery.showContextMenu()|
|android.widget.Gallery.showContextMenuForChild(View)|

*android.widget.Gallery_Description*

A view that shows items in a center-locked, horizontally scrolling list. 

The default values for the Gallery assume you will be using 
(|android.R.styleable|) as the background for each View given to the Gallery 
from the Adapter. If you are not doing this, you may need to adjust some 
Gallery properties, such as the spacing. 

Views given to the Gallery should use (|android.widget.Gallery.LayoutParams|) 
as their layout parameters type. 


  Deprecated: This widget is no longer supported. Other horizontally scrolling
 widgets include {@link HorizontalScrollView} and {@link android.support.v4.view.ViewPager}
 from the support library.

*android.widget.Gallery(Context)*

public Gallery(android.content.Context context)




*android.widget.Gallery(Context,AttributeSet)*

public Gallery(
  android.content.Context context,
  android.util.AttributeSet attrs)




*android.widget.Gallery(Context,AttributeSet,int)*

public Gallery(
  android.content.Context context,
  android.util.AttributeSet attrs,
  int defStyle)




*android.widget.Gallery.checkLayoutParams(ViewGroup.LayoutParams)*

protected boolean checkLayoutParams(android.view.ViewGroup.LayoutParams p)





*android.widget.Gallery.computeHorizontalScrollExtent()*

protected int computeHorizontalScrollExtent()





*android.widget.Gallery.computeHorizontalScrollOffset()*

protected int computeHorizontalScrollOffset()





*android.widget.Gallery.computeHorizontalScrollRange()*

protected int computeHorizontalScrollRange()





*android.widget.Gallery.dispatchKeyEvent(KeyEvent)*

public boolean dispatchKeyEvent(android.view.KeyEvent event)





*android.widget.Gallery.dispatchSetPressed(boolean)*

protected void dispatchSetPressed(boolean pressed)





*android.widget.Gallery.dispatchSetSelected(boolean)*

public void dispatchSetSelected(boolean selected)





*android.widget.Gallery.generateDefaultLayoutParams()*

protected |android.view.ViewGroup.LayoutParams| generateDefaultLayoutParams()





*android.widget.Gallery.generateLayoutParams(AttributeSet)*

public |android.view.ViewGroup.LayoutParams| generateLayoutParams(android.util.AttributeSet attrs)





*android.widget.Gallery.generateLayoutParams(ViewGroup.LayoutParams)*

protected |android.view.ViewGroup.LayoutParams| generateLayoutParams(android.view.ViewGroup.LayoutParams p)





*android.widget.Gallery.getChildDrawingOrder(int,int)*

protected int getChildDrawingOrder(
  int childCount,
  int i)





*android.widget.Gallery.getChildStaticTransformation(View,Transformation)*

protected boolean getChildStaticTransformation(
  android.view.View child,
  android.view.animation.Transformation t)





*android.widget.Gallery.getContextMenuInfo()*

protected |android.view.ContextMenu.ContextMenuInfo| getContextMenuInfo()





*android.widget.Gallery.onDown(MotionEvent)*

public boolean onDown(android.view.MotionEvent e)





*android.widget.Gallery.onFling(MotionEvent,MotionEvent,float,float)*

public boolean onFling(
  android.view.MotionEvent e1,
  android.view.MotionEvent e2,
  float velocityX,
  float velocityY)





*android.widget.Gallery.onFocusChanged(boolean,int,Rect)*

protected void onFocusChanged(
  boolean gainFocus,
  int direction,
  Rect previouslyFocusedRect)





*android.widget.Gallery.onInitializeAccessibilityEvent(AccessibilityEvent)*

public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent event)





*android.widget.Gallery.onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo)*

public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo info)





*android.widget.Gallery.onKeyDown(int,KeyEvent)*

public boolean onKeyDown(
  int keyCode,
  android.view.KeyEvent event)

Handles left, right, and clicking 



*android.widget.Gallery.onKeyUp(int,KeyEvent)*

public boolean onKeyUp(
  int keyCode,
  android.view.KeyEvent event)





*android.widget.Gallery.onLayout(boolean,int,int,int,int)*

protected void onLayout(
  boolean changed,
  int l,
  int t,
  int r,
  int b)





*android.widget.Gallery.onLongPress(MotionEvent)*

public void onLongPress(android.view.MotionEvent e)





*android.widget.Gallery.onScroll(MotionEvent,MotionEvent,float,float)*

public boolean onScroll(
  android.view.MotionEvent e1,
  android.view.MotionEvent e2,
  float distanceX,
  float distanceY)





*android.widget.Gallery.onShowPress(MotionEvent)*

public void onShowPress(android.view.MotionEvent e)





*android.widget.Gallery.onSingleTapUp(MotionEvent)*

public boolean onSingleTapUp(android.view.MotionEvent e)





*android.widget.Gallery.onTouchEvent(MotionEvent)*

public boolean onTouchEvent(android.view.MotionEvent event)





*android.widget.Gallery.performAccessibilityAction(int,Bundle)*

public boolean performAccessibilityAction(
  int action,
  android.os.Bundle arguments)





*android.widget.Gallery.setAnimationDuration(int)*

public void setAnimationDuration(int animationDurationMillis)

Sets how long the transition animation should run when a child view changes 
position. Only relevant if animation is turned on. 


    animationDurationMillis - The duration of the transition, in milliseconds. 

*android.widget.Gallery.setCallbackDuringFling(boolean)*

public void setCallbackDuringFling(boolean shouldCallback)

Whether or not to callback on any (|android.widget.Gallery|) while the items 
are being flinged. If false, only the final selected item will cause the 
callback. If true, all items between the first and the final will cause 
callbacks. 


    shouldCallback - Whether or not to callback on the listener while the items are being flinged. 

*android.widget.Gallery.setCallbackOnUnselectedItemClick(boolean)*

public void setCallbackOnUnselectedItemClick(boolean shouldCallback)

Whether or not to callback when an item that is not selected is clicked. If 
false, the item will become selected (and re-centered). If true, the 
(|android.widget.Gallery|) will get the callback. 


    shouldCallback - Whether or not to callback on the listener when a item that is not selected is 
       clicked. 

*android.widget.Gallery.setGravity(int)*

public void setGravity(int gravity)

Describes how the child views are aligned. 


    gravity - 

*android.widget.Gallery.setSpacing(int)*

public void setSpacing(int spacing)

Sets the spacing between items in a Gallery 


    spacing - The spacing in pixels between items in the Gallery 

*android.widget.Gallery.setUnselectedAlpha(float)*

public void setUnselectedAlpha(float unselectedAlpha)

Sets the alpha of items that are not selected in the Gallery. 


    unselectedAlpha - the alpha for the items that are not selected. 

*android.widget.Gallery.showContextMenu()*

public boolean showContextMenu()





*android.widget.Gallery.showContextMenuForChild(View)*

public boolean showContextMenuForChild(android.view.View originalView)






