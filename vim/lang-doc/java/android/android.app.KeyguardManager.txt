*android.app.KeyguardManager* *KeyguardManager* Class that can be used to lock a

public class KeyguardManager
  extends    |java.lang.Object|

|android.app.KeyguardManager_Description|
|android.app.KeyguardManager_Fields|
|android.app.KeyguardManager_Constructors|
|android.app.KeyguardManager_Methods|

================================================================================

*android.app.KeyguardManager_Methods*
|android.app.KeyguardManager.exitKeyguardSecurely(KeyguardManager.OnKeyguardExitResult)|
|android.app.KeyguardManager.inKeyguardRestrictedInputMode()|If keyguard screen
|android.app.KeyguardManager.isKeyguardLocked()|Return whether the keyguard is 
|android.app.KeyguardManager.isKeyguardSecure()|Return whether the keyguard req
|android.app.KeyguardManager.newKeyguardLock(String)|

*android.app.KeyguardManager_Description*

Class that can be used to lock and unlock the keyboard. Get an instance of this 
class by calling (|android.content.Context|) with argument 
(|android.content.Context|) . The actual class to control the keyboard locking 
is (|android.app.KeyguardManager.KeyguardLock|) . 



*android.app.KeyguardManager.exitKeyguardSecurely(KeyguardManager.OnKeyguardExitResult)*

public void exitKeyguardSecurely(android.app.KeyguardManager.OnKeyguardExitResult callback)



    Deprecated: Use {@link android.view.WindowManager.LayoutParams#FLAG_DISMISS_KEYGUARD}
 and/or {@link android.view.WindowManager.LayoutParams#FLAG_SHOW_WHEN_LOCKED}
 instead; this allows you to seamlessly hide the keyguard as your application
 moves in and out of the foreground and does not require that any special
 permissions be requested.

 Exit the keyguard securely.  The use case for this api is that, after
 disabling the keyguard, your app, which was granted permission to
 disable the keyguard and show a limited amount of information deemed
 safe without the user getting past the keyguard, needs to navigate to
 something that is not safe to view without getting past the keyguard.

 This will, if the keyguard is secure, bring up the unlock screen of
 the keyguard.

 <p>This method requires the caller to hold the permission
 {@link android.Manifest.permission#DISABLE_KEYGUARD}.

    callback - Let's you know whether the operation was succesful and it is safe to launch 
       anything that would normally be considered safe once the user has gotten 
       past the keyguard. 

*android.app.KeyguardManager.inKeyguardRestrictedInputMode()*

public boolean inKeyguardRestrictedInputMode()

If keyguard screen is showing or in restricted key input mode (i.e. in keyguard 
password emergency screen). When in such mode, certain keys, such as the Home 
key and the right soft keys, don't work. 



    Returns: true if in keyguard restricted input mode. 

*android.app.KeyguardManager.isKeyguardLocked()*

public boolean isKeyguardLocked()

Return whether the keyguard is currently locked. 



    Returns: true if keyguard is locked. 

*android.app.KeyguardManager.isKeyguardSecure()*

public boolean isKeyguardSecure()

Return whether the keyguard requires a password to unlock. 



    Returns: true if keyguard is secure. 

*android.app.KeyguardManager.newKeyguardLock(String)*

public |android.app.KeyguardManager.KeyguardLock| newKeyguardLock(java.lang.String tag)



    Deprecated: Use {@link android.view.WindowManager.LayoutParams#FLAG_DISMISS_KEYGUARD}
 and/or {@link android.view.WindowManager.LayoutParams#FLAG_SHOW_WHEN_LOCKED}
 instead; this allows you to seamlessly hide the keyguard as your application
 moves in and out of the foreground and does not require that any special
 permissions be requested.

 Enables you to lock or unlock the keyboard. Get an instance of this class by
 calling {@link android.content.Context#getSystemService(java.lang.String) Context.getSystemService()}. 
 This class is wrapped by {@link android.app.KeyguardManager KeyguardManager}.

    tag - A tag that informally identifies who you are (for debugging who is disabling he 
       keyguard). 

    Returns: A {@link KeyguardLock} handle to use to disable and reenable the keyguard. 


