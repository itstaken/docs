*javax.crypto.spec.RC2ParameterSpec* *RC2ParameterSpec* This class specifies the

public class RC2ParameterSpec
  extends    |java.lang.Object|
  implements |java.security.spec.AlgorithmParameterSpec|

|javax.crypto.spec.RC2ParameterSpec_Description|
|javax.crypto.spec.RC2ParameterSpec_Fields|
|javax.crypto.spec.RC2ParameterSpec_Constructors|
|javax.crypto.spec.RC2ParameterSpec_Methods|

================================================================================

*javax.crypto.spec.RC2ParameterSpec_Constructors*
|javax.crypto.spec.RC2ParameterSpec(int)|Constructs a parameter set for RC2 fro
|javax.crypto.spec.RC2ParameterSpec(int,byte[])|Constructs a parameter set for 
|javax.crypto.spec.RC2ParameterSpec(int,byte[],int)|Constructs a parameter set 

*javax.crypto.spec.RC2ParameterSpec_Methods*
|javax.crypto.spec.RC2ParameterSpec.equals(Object)|Tests for equality between t
|javax.crypto.spec.RC2ParameterSpec.getEffectiveKeyBits()|Returns the effective
|javax.crypto.spec.RC2ParameterSpec.getIV()|Returns the IV or null if this para
|javax.crypto.spec.RC2ParameterSpec.hashCode()|Calculates a hash code value for

*javax.crypto.spec.RC2ParameterSpec_Description*

This class specifies the parameters used with the RC2 algorithm. 

The parameters consist of an effective key size and optionally an 8-byte 
initialization vector (IV) (only in feedback mode). 

This class can be used to initialize a Cipher object that implements the RC2 
algorithm. 



*javax.crypto.spec.RC2ParameterSpec(int)*

public RC2ParameterSpec(int effectiveKeyBits)

Constructs a parameter set for RC2 from the given effective key size (in bits). 

    effectiveKeyBits - the effective key size in bits. 

*javax.crypto.spec.RC2ParameterSpec(int,byte[])*

public RC2ParameterSpec(
  int effectiveKeyBits,
  byte[] iv)

Constructs a parameter set for RC2 from the given effective key size (in bits) 
and an 8-byte IV. 

The bytes that constitute the IV are those between iv[0] and iv[7] inclusive. 

    effectiveKeyBits - the effective key size in bits. 
    iv - the buffer with the 8-byte IV. The first 8 bytes of the buffer are copied to 
       protect against subsequent modification. 

*javax.crypto.spec.RC2ParameterSpec(int,byte[],int)*

public RC2ParameterSpec(
  int effectiveKeyBits,
  byte[] iv,
  int offset)

Constructs a parameter set for RC2 from the given effective key size (in bits) 
and IV. 

The IV is taken from iv, starting at offset inclusive. The bytes that 
constitute the IV are those between iv[offset] and iv[offset+7] inclusive. 

    effectiveKeyBits - the effective key size in bits. 
    iv - the buffer with the IV. The first 8 bytes of the buffer beginning at offset 
       inclusive are copied to protect against subsequent modification. 
    offset - the offset in iv where the 8-byte IV starts. 

*javax.crypto.spec.RC2ParameterSpec.equals(Object)*

public boolean equals(java.lang.Object obj)

Tests for equality between the specified object and this object. Two 
RC2ParameterSpec objects are considered equal if their effective key sizes and 
IVs are equal. (Two IV references are considered equal if both are null.) 


    obj - the object to test for equality with this object. 

    Returns: true if the objects are considered equal, false if obj is null or otherwise. 

*javax.crypto.spec.RC2ParameterSpec.getEffectiveKeyBits()*

public int getEffectiveKeyBits()

Returns the effective key size in bits. 



    Returns: the effective key size in bits. 

*javax.crypto.spec.RC2ParameterSpec.getIV()*

public byte[] getIV()

Returns the IV or null if this parameter set does not contain an IV. 



    Returns: the IV or null if this parameter set does not contain an IV. Returns a new 
             array each time this method is called. 

*javax.crypto.spec.RC2ParameterSpec.hashCode()*

public int hashCode()

Calculates a hash code value for the object. Objects that are equal will also 
have the same hashcode. 




