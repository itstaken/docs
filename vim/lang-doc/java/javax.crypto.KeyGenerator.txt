*javax.crypto.KeyGenerator* *KeyGenerator* This class provides the functionality

public class KeyGenerator
  extends    |java.lang.Object|

|javax.crypto.KeyGenerator_Description|
|javax.crypto.KeyGenerator_Fields|
|javax.crypto.KeyGenerator_Constructors|
|javax.crypto.KeyGenerator_Methods|

================================================================================

*javax.crypto.KeyGenerator_Constructors*
|javax.crypto.KeyGenerator(KeyGeneratorSpi,Provider,String)|Creates a KeyGenera

*javax.crypto.KeyGenerator_Methods*
|javax.crypto.KeyGenerator.generateKey()|Generates a secret key.
|javax.crypto.KeyGenerator.getAlgorithm()|Returns the algorithm name of this Ke
|javax.crypto.KeyGenerator.getInstance(String)|Returns a KeyGenerator object th
|javax.crypto.KeyGenerator.getInstance(String,Provider)|Returns a KeyGenerator 
|javax.crypto.KeyGenerator.getInstance(String,String)|Returns a KeyGenerator ob
|javax.crypto.KeyGenerator.getProvider()|Returns the provider of this KeyGenera
|javax.crypto.KeyGenerator.init(AlgorithmParameterSpec)|Initializes this key ge
|javax.crypto.KeyGenerator.init(AlgorithmParameterSpec,SecureRandom)|Initialize
|javax.crypto.KeyGenerator.init(int)|Initializes this key generator for a certa
|javax.crypto.KeyGenerator.init(int,SecureRandom)|Initializes this key generato
|javax.crypto.KeyGenerator.init(SecureRandom)|Initializes this key generator.

*javax.crypto.KeyGenerator_Description*

This class provides the functionality of a secret (symmetric) key generator. 

Key generators are constructed using one of the getInstance class methods of 
this class. 

KeyGenerator objects are reusable, i.e., after a key has been generated, the 
same KeyGenerator object can be re-used to generate further keys. 

There are two ways to generate a key: in an algorithm-independent manner, and 
in an algorithm-specific manner. The only difference between the two is the 
initialization of the object: 

Algorithm-Independent Initialization All key generators share the concepts of a 
keysize and a source of randomness. There is an 
init(|javax.crypto.KeyGenerator|) method in this KeyGenerator class that takes 
these two universally shared types of arguments. There is also one that takes 
just a keysize argument, and uses the SecureRandom implementation of the 
highest-priority installed provider as the source of randomness (or a 
system-provided source of randomness if none of the installed providers supply 
a SecureRandom implementation), and one that takes just a source of randomness. 

Since no other parameters are specified when you call the above 
algorithm-independent init methods, it is up to the provider what to do about 
the algorithm-specific parameters (if any) to be associated with each of the 
keys. 

Algorithm-Specific Initialization For situations where a set of 
algorithm-specific parameters already exists, there are two 
init(|javax.crypto.KeyGenerator|) methods that have an AlgorithmParameterSpec 
argument. One also has a SecureRandom argument, while the other uses the 
SecureRandom implementation of the highest-priority installed provider as the 
source of randomness (or a system-provided source of randomness if none of the 
installed providers supply a SecureRandom implementation). 

In case the client does not explicitly initialize the KeyGenerator (via a call 
to an init method), each provider must supply (and document) a default 
initialization. 

Every implementation of the Java platform is required to support the following 
standard KeyGenerator algorithms with the keysizes in parentheses: 

AES (128) DES (56) DESede (168) HmacSHA1 HmacSHA256 

These algorithms are described in the <a href= 
"/../technotes/guides/security/StandardNames.html#KeyGenerator"> KeyGenerator 
section of the Java Cryptography Architecture Standard Algorithm Name 
Documentation. Consult the release documentation for your implementation to see 
if any other algorithms are supported. 



*javax.crypto.KeyGenerator(KeyGeneratorSpi,Provider,String)*

protected KeyGenerator(
  javax.crypto.KeyGeneratorSpi keyGenSpi,
  java.security.Provider provider,
  java.lang.String algorithm)

Creates a KeyGenerator object. 

    keyGenSpi - the delegate 
    provider - the provider 
    algorithm - the algorithm 

*javax.crypto.KeyGenerator.generateKey()*

public final |javax.crypto.SecretKey| generateKey()

Generates a secret key. 



    Returns: 

*javax.crypto.KeyGenerator.getAlgorithm()*

public final |java.lang.String| getAlgorithm()

Returns the algorithm name of this KeyGenerator object. 

This is the same name that was specified in one of the getInstance calls that 
created this KeyGenerator object. 



    Returns: the algorithm name of this KeyGenerator object. 

*javax.crypto.KeyGenerator.getInstance(String)*

public static final |javax.crypto.KeyGenerator| getInstance(java.lang.String algorithm)
  throws |java.security.NoSuchAlgorithmException|
         
Returns a KeyGenerator object that generates secret keys for the specified 
algorithm. 

This method traverses the list of registered security Providers, starting with 
the most preferred Provider. A new KeyGenerator object encapsulating the 
KeyGeneratorSpi implementation from the first Provider that supports the 
specified algorithm is returned. 

Note that the list of registered providers may be retrieved via the 
Security.getProviders()(|java.security.Security|) method. 


    algorithm - the standard name of the requested key algorithm. See the KeyGenerator section 
       in the Java Cryptography Architecture Standard Algorithm Name 
       Documentation for information about standard algorithm names. 

    Returns: the new KeyGenerator object. 

*javax.crypto.KeyGenerator.getInstance(String,Provider)*

public static final |javax.crypto.KeyGenerator| getInstance(
  java.lang.String algorithm,
  java.security.Provider provider)
  throws |java.security.NoSuchAlgorithmException|
         
Returns a KeyGenerator object that generates secret keys for the specified 
algorithm. 

A new KeyGenerator object encapsulating the KeyGeneratorSpi implementation from 
the specified Provider object is returned. Note that the specified Provider 
object does not have to be registered in the provider list. 


    algorithm - the standard name of the requested key algorithm. See the KeyGenerator section 
       in the Java Cryptography Architecture Standard Algorithm Name 
       Documentation for information about standard algorithm names. 
    provider - the provider. 

    Returns: the new KeyGenerator object. 

*javax.crypto.KeyGenerator.getInstance(String,String)*

public static final |javax.crypto.KeyGenerator| getInstance(
  java.lang.String algorithm,
  java.lang.String provider)
  throws |java.security.NoSuchAlgorithmException|
         |java.security.NoSuchProviderException|
         
Returns a KeyGenerator object that generates secret keys for the specified 
algorithm. 

A new KeyGenerator object encapsulating the KeyGeneratorSpi implementation from 
the specified provider is returned. The specified provider must be registered 
in the security provider list. 

Note that the list of registered providers may be retrieved via the 
Security.getProviders()(|java.security.Security|) method. 


    algorithm - the standard name of the requested key algorithm. See the KeyGenerator section 
       in the Java Cryptography Architecture Standard Algorithm Name 
       Documentation for information about standard algorithm names. 
    provider - the name of the provider. 

    Returns: the new KeyGenerator object. 

*javax.crypto.KeyGenerator.getProvider()*

public final |java.security.Provider| getProvider()

Returns the provider of this KeyGenerator object. 



    Returns: the provider of this KeyGenerator object 

*javax.crypto.KeyGenerator.init(AlgorithmParameterSpec)*

public final void init(java.security.spec.AlgorithmParameterSpec params)
  throws |java.security.InvalidAlgorithmParameterException|
         
Initializes this key generator with the specified parameter set. 

If this key generator requires any random bytes, it will get them using the 
<code>SecureRandom</code>(|java.security.SecureRandom|) implementation of the 
highest-priority installed provider as the source of randomness. (If none of 
the installed providers supply an implementation of SecureRandom, a 
system-provided source of randomness will be used.) 


    params - the key generation parameters 

*javax.crypto.KeyGenerator.init(AlgorithmParameterSpec,SecureRandom)*

public final void init(
  java.security.spec.AlgorithmParameterSpec params,
  java.security.SecureRandom random)
  throws |java.security.InvalidAlgorithmParameterException|
         
Initializes this key generator with the specified parameter set and a 
user-provided source of randomness. 


    params - the key generation parameters 
    random - the source of randomness for this key generator 

*javax.crypto.KeyGenerator.init(int)*

public final void init(int keysize)

Initializes this key generator for a certain keysize. 

If this key generator requires any random bytes, it will get them using the 
<code>SecureRandom</code>(|java.security.SecureRandom|) implementation of the 
highest-priority installed provider as the source of randomness. (If none of 
the installed providers supply an implementation of SecureRandom, a 
system-provided source of randomness will be used.) 


    keysize - the keysize. This is an algorithm-specific metric, specified in number of bits. 

*javax.crypto.KeyGenerator.init(int,SecureRandom)*

public final void init(
  int keysize,
  java.security.SecureRandom random)

Initializes this key generator for a certain keysize, using a user-provided 
source of randomness. 


    keysize - the keysize. This is an algorithm-specific metric, specified in number of bits. 
    random - the source of randomness for this key generator 

*javax.crypto.KeyGenerator.init(SecureRandom)*

public final void init(java.security.SecureRandom random)

Initializes this key generator. 


    random - the source of randomness for this generator 


