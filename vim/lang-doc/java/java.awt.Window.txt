*java.awt.Window* *Window* A Window object is a top-level window with no borders

public class Window
  extends    |java.awt.Container|
  implements |javax.accessibility.Accessible|

|java.awt.Window_Description|
|java.awt.Window_Fields|
|java.awt.Window_Constructors|
|java.awt.Window_Methods|

================================================================================

*java.awt.Window_Constructors*
|java.awt.Window(Frame)|Constructs a new, initially invisible window with the s
|java.awt.Window(Window)|Constructs a new, initially invisible window with the 
|java.awt.Window(Window,GraphicsConfiguration)|Constructs a new, initially invi

*java.awt.Window_Methods*
|java.awt.Window.addNotify()|Makes this Window displayable by creating the conn
|java.awt.Window.addPropertyChangeListener(PropertyChangeListener)|Adds a Prope
|java.awt.Window.addPropertyChangeListener(String,PropertyChangeListener)|Adds 
|java.awt.Window.addWindowFocusListener(WindowFocusListener)|Adds the specified
|java.awt.Window.addWindowListener(WindowListener)|Adds the specified window li
|java.awt.Window.addWindowStateListener(WindowStateListener)|Adds the specified
|java.awt.Window.applyResourceBundle(ResourceBundle)|
|java.awt.Window.applyResourceBundle(String)|
|java.awt.Window.createBufferStrategy(int)|Creates a new strategy for multi-buf
|java.awt.Window.createBufferStrategy(int,BufferCapabilities)|Creates a new str
|java.awt.Window.dispose()|Releases all of the native screen resources used by 
|java.awt.Window.getAccessibleContext()|Gets the AccessibleContext associated w
|java.awt.Window.getBackground()|Gets the background color of this window.
|java.awt.Window.getBufferStrategy()|Returns the BufferStrategy used by this co
|java.awt.Window.getFocusableWindowState()|Returns whether this Window can beco
|java.awt.Window.getFocusCycleRootAncestor()|Always returns null because Window
|java.awt.Window.getFocusOwner()|Returns the child Component of this Window tha
|java.awt.Window.getFocusTraversalKeys(int)|Gets a focus traversal key for this
|java.awt.Window.getIconImages()|Returns the sequence of images to be displayed
|java.awt.Window.getInputContext()|Gets the input context for this window.
|java.awt.Window.getListeners(Class<T>)|Returns an array of all the objects cur
|java.awt.Window.getLocale()|Gets the Locale object that is associated  with th
|java.awt.Window.getModalExclusionType()|Returns the modal exclusion type of th
|java.awt.Window.getMostRecentFocusOwner()|Returns the child Component of this 
|java.awt.Window.getOpacity()|Returns the opacity of the window.
|java.awt.Window.getOwnedWindows()|Return an array containing all the windows t
|java.awt.Window.getOwner()|Returns the owner of this window.
|java.awt.Window.getOwnerlessWindows()|Returns an array of allWindows created b
|java.awt.Window.getShape()|Returns the shape of the window.
|java.awt.Window.getToolkit()|Returns the toolkit of this frame.
|java.awt.Window.getType()|Returns the type of the window.
|java.awt.Window.getWarningString()|Gets the warning string that is displayed w
|java.awt.Window.getWindowFocusListeners()|Returns an array of all the window f
|java.awt.Window.getWindowListeners()|Returns an array of all the window listen
|java.awt.Window.getWindows()|Returns an array of allWindows, both owned and ow
|java.awt.Window.getWindowStateListeners()|Returns an array of all the window s
|java.awt.Window.hide()|Hide this Window, its subcomponents, and all of its own
|java.awt.Window.isActive()|Returns whether this Window is active.
|java.awt.Window.isAlwaysOnTop()|Returns whether this window is an always-on-to
|java.awt.Window.isAlwaysOnTopSupported()|Returns whether the always-on-top mod
|java.awt.Window.isAutoRequestFocus()|Returns whether this window should receiv
|java.awt.Window.isFocusableWindow()|Returns whether this Window can become the
|java.awt.Window.isFocusCycleRoot()|Always returns true because all Windows mus
|java.awt.Window.isFocused()|Returns whether this Window is focused.
|java.awt.Window.isLocationByPlatform()|Returns true if this Window will appear
|java.awt.Window.isOpaque()|Indicates if the window is currently opaque.
|java.awt.Window.isShowing()|Checks if this Window is showing on screen.
|java.awt.Window.isValidateRoot()|Indicates if this container is a validate roo
|java.awt.Window.pack()|Causes this Window to be sized to fit the preferred siz
|java.awt.Window.paint(Graphics)|
|java.awt.Window.postEvent(Event)|
|java.awt.Window.processEvent(AWTEvent)|Processes events on this window.
|java.awt.Window.processWindowEvent(WindowEvent)|Processes window events occurr
|java.awt.Window.processWindowFocusEvent(WindowEvent)|Processes window focus ev
|java.awt.Window.processWindowStateEvent(WindowEvent)|Processes window state ev
|java.awt.Window.removeNotify()|
|java.awt.Window.removeWindowFocusListener(WindowFocusListener)|Removes the spe
|java.awt.Window.removeWindowListener(WindowListener)|Removes the specified win
|java.awt.Window.removeWindowStateListener(WindowStateListener)|Removes the spe
|java.awt.Window.reshape(int,int,int,int)|
|java.awt.Window.setAlwaysOnTop(boolean)|Sets whether this window should always
|java.awt.Window.setAutoRequestFocus(boolean)|Sets whether this window should r
|java.awt.Window.setBackground(Color)|Sets the background color of this window.
|java.awt.Window.setBounds(int,int,int,int)|
|java.awt.Window.setBounds(Rectangle)|
|java.awt.Window.setCursor(Cursor)|Set the cursor image to a specified cursor.
|java.awt.Window.setFocusableWindowState(boolean)|Sets whether this Window can 
|java.awt.Window.setFocusCycleRoot(boolean)|Does nothing because Windows must a
|java.awt.Window.setIconImage(Image)|Sets the image to be displayed as the icon
|java.awt.Window.setIconImages(List<?extendsImage>)|Sets the sequence of images
|java.awt.Window.setLocation(int,int)|
|java.awt.Window.setLocation(Point)|
|java.awt.Window.setLocationByPlatform(boolean)|Sets whether this Window should
|java.awt.Window.setLocationRelativeTo(Component)|Sets the location of the wind
|java.awt.Window.setMinimumSize(Dimension)|Sets the minimum size of this window
|java.awt.Window.setModalExclusionType(Dialog.ModalExclusionType)|Specifies the
|java.awt.Window.setOpacity(float)|Sets the opacity of the window.
|java.awt.Window.setShape(Shape)|Sets the shape of the window.
|java.awt.Window.setSize(Dimension)|
|java.awt.Window.setSize(int,int)|
|java.awt.Window.setType(Window.Type)|Sets the type of the window.
|java.awt.Window.setVisible(boolean)|Shows or hides thisWindowdepending on the 
|java.awt.Window.show()|Makes the Window visible.
|java.awt.Window.toBack()|If this Window is visible, sends this Window to the b
|java.awt.Window.toFront()|If this Window is visible, brings this Window to the

*java.awt.Window_Description*

A Window object is a top-level window with no borders and no menubar. The 
default layout for a window is BorderLayout. 

A window must have either a frame, dialog, or another window defined as its 
owner when it's constructed. 

In a multi-screen environment, you can create a Window on a different screen 
device by constructing the Window with (|java.awt.Window|) . The 
GraphicsConfiguration object is one of the GraphicsConfiguration objects of the 
target screen device. 

In a virtual device multi-screen environment in which the desktop area could 
span multiple physical screen devices, the bounds of all configurations are 
relative to the virtual device coordinate system. The origin of the 
virtual-coordinate system is at the upper left-hand corner of the primary 
physical screen. Depending on the location of the primary screen in the virtual 
device, negative coordinates are possible, as shown in the following figure. 



In such an environment, when calling setLocation, you must pass a virtual 
coordinate to this method. Similarly, calling getLocationOnScreen on a Window 
returns virtual device coordinates. Call the getBounds method of a 
GraphicsConfiguration to find its origin in the virtual coordinate system. 

The following code sets the location of a Window at (10, 10) relative to the 
origin of the physical screen of the corresponding GraphicsConfiguration. If 
the bounds of the GraphicsConfiguration is not taken into account, the Window 
location would be set at (10, 10) relative to the virtual-coordinate system and 
would appear on the primary physical screen, which might be different from the 
physical screen of the specified GraphicsConfiguration. 



Window w = new Window(Window owner, GraphicsConfiguration gc); Rectangle bounds 
= gc.getBounds(); w.setLocation(10 + bounds.x, 10 + bounds.y); 

Note: the location and size of top-level windows (including Windows, Frames, 
and Dialogs) are under the control of the desktop's window management system. 
Calls to setLocation, setSize, and setBounds are requests (not directives) 
which are forwarded to the window management system. Every effort will be made 
to honor such requests. However, in some cases the window management system may 
ignore such requests, or modify the requested geometry in order to place and 
size the Window in a way that more closely matches the desktop settings. 

Due to the asynchronous nature of native event handling, the results returned 
by getBounds, getLocation, getLocationOnScreen, and getSize might not reflect 
the actual geometry of the Window on screen until the last request has been 
processed. During the processing of subsequent requests these values might 
change accordingly while the window management system fulfills the requests. 

An application may set the size and location of an invisibleWindowarbitrarily, 
but the window management system may subsequently change its size and/or 
location when theWindowis made visible. One or moreComponentEvents will be 
generated to indicate the new geometry. 

Windows are capable of generating the following WindowEvents: WindowOpened, 
WindowClosed, WindowGainedFocus, WindowLostFocus. 



*java.awt.Window(Frame)*

public Window(java.awt.Frame owner)

Constructs a new, initially invisible window with the specified Frame as its 
owner. The window will not be focusable unless its owner is showing on the 
screen. 

If there is a security manager, this method first calls the security manager's 
checkTopLevelWindow method with this as its argument to determine whether or 
not the window must be displayed with a warning banner. 

    owner - the Frame to act as owner or null if this window has no owner 

*java.awt.Window(Window)*

public Window(java.awt.Window owner)

Constructs a new, initially invisible window with the specified Window as its 
owner. This window will not be focusable unless its nearest owning Frame or 
Dialog is showing on the screen. 

If there is a security manager, this method first calls the security manager's 
checkTopLevelWindow method with this as its argument to determine whether or 
not the window must be displayed with a warning banner. 

    owner - the Window to act as owner or null if this window has no owner 

*java.awt.Window(Window,GraphicsConfiguration)*

public Window(
  java.awt.Window owner,
  java.awt.GraphicsConfiguration gc)

Constructs a new, initially invisible window with the specified owner Window 
and a GraphicsConfiguration of a screen device. The Window will not be 
focusable unless its nearest owning Frame or Dialog is showing on the screen. 

If there is a security manager, this method first calls the security manager's 
checkTopLevelWindow method with this as its argument to determine whether or 
not the window must be displayed with a warning banner. 

    owner - the window to act as owner or null if this window has no owner 
    gc - the GraphicsConfiguration of the target screen device; if gc is null, the 
       system default GraphicsConfiguration is assumed 

*java.awt.Window.addNotify()*

public void addNotify()

Makes this Window displayable by creating the connection to its native screen 
resource. This method is called internally by the toolkit and should not be 
called directly by programs. 



*java.awt.Window.addPropertyChangeListener(PropertyChangeListener)*

public void addPropertyChangeListener(java.beans.PropertyChangeListener listener)

Adds a PropertyChangeListener to the listener list. The listener is registered 
for all bound properties of this class, including the following: 

this Window's font ("font") this Window's background color ("background") this 
Window's foreground color ("foreground") this Window's focusability 
("focusable") this Window's focus traversal keys enabled state 
("focusTraversalKeysEnabled") this Window's Set of FORWARD_TRAVERSAL_KEYS 
("forwardFocusTraversalKeys") this Window's Set of BACKWARD_TRAVERSAL_KEYS 
("backwardFocusTraversalKeys") this Window's Set of UP_CYCLE_TRAVERSAL_KEYS 
("upCycleFocusTraversalKeys") this Window's Set of DOWN_CYCLE_TRAVERSAL_KEYS 
("downCycleFocusTraversalKeys") this Window's focus traversal policy 
("focusTraversalPolicy") 

this Window's focusable Window state ("focusableWindowState") 

this Window's always-on-top state("alwaysOnTop") 

Note that if this Window is inheriting a bound property, then no event will be 
fired in response to a change in the inherited property. 

If listener is null, no exception is thrown and no action is performed. 


    listener - the PropertyChangeListener to be added 

*java.awt.Window.addPropertyChangeListener(String,PropertyChangeListener)*

public void addPropertyChangeListener(
  java.lang.String propertyName,
  java.beans.PropertyChangeListener listener)

Adds a PropertyChangeListener to the listener list for a specific property. The 
specified property may be user-defined, or one of the following: 

this Window's font ("font") this Window's background color ("background") this 
Window's foreground color ("foreground") this Window's focusability 
("focusable") this Window's focus traversal keys enabled state 
("focusTraversalKeysEnabled") this Window's Set of FORWARD_TRAVERSAL_KEYS 
("forwardFocusTraversalKeys") this Window's Set of BACKWARD_TRAVERSAL_KEYS 
("backwardFocusTraversalKeys") this Window's Set of UP_CYCLE_TRAVERSAL_KEYS 
("upCycleFocusTraversalKeys") this Window's Set of DOWN_CYCLE_TRAVERSAL_KEYS 
("downCycleFocusTraversalKeys") this Window's focus traversal policy 
("focusTraversalPolicy") 

this Window's focusable Window state ("focusableWindowState") 

this Window's always-on-top state("alwaysOnTop") 

Note that if this Window is inheriting a bound property, then no event will be 
fired in response to a change in the inherited property. 

If listener is null, no exception is thrown and no action is performed. 


    propertyName - one of the property names listed above 
    listener - the PropertyChangeListener to be added 

*java.awt.Window.addWindowFocusListener(WindowFocusListener)*

public synchronized void addWindowFocusListener(java.awt.event.WindowFocusListener l)

Adds the specified window focus listener to receive window events from this 
window. If l is null, no exception is thrown and no action is performed. Refer 
to AWT Threading Issues for details on AWT's threading model. 


    l - the window focus listener 

*java.awt.Window.addWindowListener(WindowListener)*

public synchronized void addWindowListener(java.awt.event.WindowListener l)

Adds the specified window listener to receive window events from this window. 
If l is null, no exception is thrown and no action is performed. Refer to AWT 
Threading Issues for details on AWT's threading model. 


    l - the window listener 

*java.awt.Window.addWindowStateListener(WindowStateListener)*

public synchronized void addWindowStateListener(java.awt.event.WindowStateListener l)

Adds the specified window state listener to receive window events from this 
window. If l is null, no exception is thrown and no action is performed. Refer 
to AWT Threading Issues for details on AWT's threading model. 


    l - the window state listener 

*java.awt.Window.applyResourceBundle(ResourceBundle)*

public void applyResourceBundle(java.util.ResourceBundle rb)



    Deprecated: As of J2SE 1.4, replaced by
 {@link Component#applyComponentOrientation Component.applyComponentOrientation}.


*java.awt.Window.applyResourceBundle(String)*

public void applyResourceBundle(java.lang.String rbName)



    Deprecated: As of J2SE 1.4, replaced by
 {@link Component#applyComponentOrientation Component.applyComponentOrientation}.


*java.awt.Window.createBufferStrategy(int)*

public void createBufferStrategy(int numBuffers)

Creates a new strategy for multi-buffering on this component. Multi-buffering 
is useful for rendering performance. This method attempts to create the best 
strategy available with the number of buffers supplied. It will always create a 
BufferStrategy with that number of buffers. A page-flipping strategy is 
attempted first, then a blitting strategy using accelerated buffers. Finally, 
an unaccelerated blitting strategy is used. 

Each time this method is called, the existing buffer strategy for this 
component is discarded. 


    numBuffers - number of buffers to create 

*java.awt.Window.createBufferStrategy(int,BufferCapabilities)*

public void createBufferStrategy(
  int numBuffers,
  java.awt.BufferCapabilities caps)
  throws |java.awt.AWTException|
         
Creates a new strategy for multi-buffering on this component with the required 
buffer capabilities. This is useful, for example, if only accelerated memory or 
page flipping is desired (as specified by the buffer capabilities). 

Each time this method is called, the existing buffer strategy for this 
component is discarded. 


    numBuffers - number of buffers to create, including the front buffer 
    caps - the required capabilities for creating the buffer strategy; cannot be null 

*java.awt.Window.dispose()*

public void dispose()

Releases all of the native screen resources used by this Window, its 
subcomponents, and all of its owned children. That is, the resources for these 
Components will be destroyed, any memory they consume will be returned to the 
OS, and they will be marked as undisplayable. 

The Window and its subcomponents can be made displayable again by rebuilding 
the native resources with a subsequent call to pack or show. The states of the 
recreated Window and its subcomponents will be identical to the states of these 
objects at the point where the Window was disposed (not accounting for 
additional modifications between those actions). 

Note: When the last displayable window within the Java virtual machine (VM) is 
disposed of, the VM may terminate. See AWT Threading Issues for more 
information. 



*java.awt.Window.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext associated with this Window. For windows, the 
AccessibleContext takes the form of an AccessibleAWTWindow. A new 
AccessibleAWTWindow instance is created if necessary. 



    Returns: an AccessibleAWTWindow that serves as the AccessibleContext of this Window 

*java.awt.Window.getBackground()*

public |java.awt.Color| getBackground()

Gets the background color of this window. 

Note that the alpha component of the returned color indicates whether the 
window is in the non-opaque (per-pixel translucent) mode. 



    Returns: this component's background color 

*java.awt.Window.getBufferStrategy()*

public |java.awt.image.BufferStrategy| getBufferStrategy()

Returns the BufferStrategy used by this component. This method will return null 
if a BufferStrategy has not yet been created or has been disposed. 



    Returns: the buffer strategy used by this component 

*java.awt.Window.getFocusableWindowState()*

public boolean getFocusableWindowState()

Returns whether this Window can become the focused Window if it meets the other 
requirements outlined in isFocusableWindow. If this method returns false, then 
isFocusableWindow will return false as well. If this method returns true, then 
isFocusableWindow may return true or false depending upon the other 
requirements which must be met in order for a Window to be focusable. 

By default, all Windows have a focusable Window state of true. 



    Returns: whether this Window can be the focused Window 

*java.awt.Window.getFocusCycleRootAncestor()*

public final |java.awt.Container| getFocusCycleRootAncestor()

Always returns null because Windows have no ancestors; they represent the top 
of the Component hierarchy. 



    Returns: 

*java.awt.Window.getFocusOwner()*

public |java.awt.Component| getFocusOwner()

Returns the child Component of this Window that has focus if this Window is 
focused; returns null otherwise. 



    Returns: the child Component with focus, or null if this Window is not focused 

*java.awt.Window.getFocusTraversalKeys(int)*

public |java.util.Set|<AWTKeyStroke> getFocusTraversalKeys(int id)

Gets a focus traversal key for this Window. (See setFocusTraversalKeys for a 
full description of each key.) 

If the traversal key has not been explicitly set for this Window, then this 
Window's parent's traversal key is returned. If the traversal key has not been 
explicitly set for any of this Window's ancestors, then the current 
KeyboardFocusManager's default traversal key is returned. 


    id - one of KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, 
       KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, 
       KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS, or 
       KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS 

    Returns: the AWTKeyStroke for the specified key 

*java.awt.Window.getIconImages()*

public |java.util.List|<Image> getIconImages()

Returns the sequence of images to be displayed as the icon for this window. 

This method returns a copy of the internally stored list, so all operations on 
the returned object will not affect the window's behavior. 



    Returns: the copy of icon images' list for this window, or empty list if this window 
             doesn't have icon images. 

*java.awt.Window.getInputContext()*

public |java.awt.im.InputContext| getInputContext()

Gets the input context for this window. A window always has an input context, 
which is shared by subcomponents unless they create and set their own. 



*java.awt.Window.getListeners(Class<T>)*

public |T|[] getListeners(java.lang.Class<T> listenerType)

Returns an array of all the objects currently registered as FooListeners upon 
this Window. FooListeners are registered using the addFooListener method. 



You can specify the listenerType argument with a class literal, such as 
FooListener.class. For example, you can query a Window w for its window 
listeners with the following code: 

WindowListener[] wls = 
(WindowListener[])(w.getListeners(WindowListener.class)); 

If no such listeners exist, this method returns an empty array. 


    listenerType - the type of listeners requested; this parameter should specify an interface 
       that descends from java.util.EventListener 

    Returns: an array of all objects registered as FooListeners on this window, or an empty 
             array if no such listeners have been added 

*java.awt.Window.getLocale()*

public |java.util.Locale| getLocale()

Gets the Locale object that is associated with this window, if the locale has 
been set. If no locale has been set, then the default locale is returned. 



    Returns: the locale that is set for this window. 

*java.awt.Window.getModalExclusionType()*

public |java.awt.Dialog.ModalExclusionType| getModalExclusionType()

Returns the modal exclusion type of this window. 



    Returns: the modal exclusion type of this window 

*java.awt.Window.getMostRecentFocusOwner()*

public |java.awt.Component| getMostRecentFocusOwner()

Returns the child Component of this Window that will receive the focus when 
this Window is focused. If this Window is currently focused, this method 
returns the same Component as getFocusOwner(). If this Window is not focused, 
then the child Component that most recently requested focus will be returned. 
If no child Component has ever requested focus, and this is a focusable Window, 
then this Window's initial focusable Component is returned. If no child 
Component has ever requested focus, and this is a non-focusable Window, null is 
returned. 



    Returns: the child Component that will receive focus when this Window is focused 

*java.awt.Window.getOpacity()*

public float getOpacity()

Returns the opacity of the window. 



    Returns: the opacity of the window 

*java.awt.Window.getOwnedWindows()*

public |java.awt.Window|[] getOwnedWindows()

Return an array containing all the windows this window currently owns. 



*java.awt.Window.getOwner()*

public |java.awt.Window| getOwner()

Returns the owner of this window. 



*java.awt.Window.getOwnerlessWindows()*

public static |java.awt.Window|[] getOwnerlessWindows()

Returns an array of allWindows created by this application that have no owner. 
They includeFrames and ownerlessDialogs andWindows. If called from an applet, 
the array includes only theWindows accessible by that applet. 

Warning: this method may return system created windows, such as a print dialog. 
Applications should not assume the existence of these dialogs, nor should an 
application assume anything about these dialogs such as component positions, 
LayoutManagers or serialization. 



*java.awt.Window.getShape()*

public |java.awt.Shape| getShape()

Returns the shape of the window. 

The value returned by this method may not be the same as previously set 
withsetShape(shape), but it is guaranteed to represent the same shape. 



    Returns: the shape of the window or {@code null} if no shape is specified for the window 

*java.awt.Window.getToolkit()*

public |java.awt.Toolkit| getToolkit()

Returns the toolkit of this frame. 



    Returns: the toolkit of this window. 

*java.awt.Window.getType()*

public |java.awt.Window.Type| getType()

Returns the type of the window. 



*java.awt.Window.getWarningString()*

public final |java.lang.String| getWarningString()

Gets the warning string that is displayed with this window. If this window is 
insecure, the warning string is displayed somewhere in the visible area of the 
window. A window is insecure if there is a security manager, and the security 
manager's checkTopLevelWindow method returns false when this window is passed 
to it as an argument. 

If the window is secure, then getWarningString returns null. If the window is 
insecure, this method checks for the system property awt.appletWarning and 
returns the string value of that property. 



    Returns: the warning string for this window. 

*java.awt.Window.getWindowFocusListeners()*

public synchronized |java.awt.event.WindowFocusListener|[] getWindowFocusListeners()

Returns an array of all the window focus listeners registered on this window. 



    Returns: all of this window's WindowFocusListeners or an empty array if no window focus 
             listeners are currently registered 

*java.awt.Window.getWindowListeners()*

public synchronized |java.awt.event.WindowListener|[] getWindowListeners()

Returns an array of all the window listeners registered on this window. 



    Returns: all of this window's WindowListeners or an empty array if no window listeners 
             are currently registered 

*java.awt.Window.getWindows()*

public static |java.awt.Window|[] getWindows()

Returns an array of allWindows, both owned and ownerless, created by this 
application. If called from an applet, the array includes only theWindows 
accessible by that applet. 

Warning: this method may return system created windows, such as a print dialog. 
Applications should not assume the existence of these dialogs, nor should an 
application assume anything about these dialogs such as component positions, 
LayoutManagers or serialization. 



*java.awt.Window.getWindowStateListeners()*

public synchronized |java.awt.event.WindowStateListener|[] getWindowStateListeners()

Returns an array of all the window state listeners registered on this window. 



    Returns: all of this window's WindowStateListeners or an empty array if no window state 
             listeners are currently registered 

*java.awt.Window.hide()*

public void hide()

Hide this Window, its subcomponents, and all of its owned children. The Window 
and its subcomponents can be made visible again with a call toshow. 

    Deprecated: As of JDK version 1.5, replaced by
 {@link #setVisible(boolean)}.


*java.awt.Window.isActive()*

public boolean isActive()

Returns whether this Window is active. Only a Frame or a Dialog may be active. 
The native windowing system may denote the active Window or its children with 
special decorations, such as a highlighted title bar. The active Window is 
always either the focused Window, or the first Frame or Dialog that is an owner 
of the focused Window. 



    Returns: whether this is the active Window. 

*java.awt.Window.isAlwaysOnTop()*

public final boolean isAlwaysOnTop()

Returns whether this window is an always-on-top window. 



    Returns: true, if the window is in always-on-top state, false otherwise 

*java.awt.Window.isAlwaysOnTopSupported()*

public boolean isAlwaysOnTopSupported()

Returns whether the always-on-top mode is supported for this window. Some 
platforms may not support always-on-top windows, some may support only some 
kinds of top-level windows; for example, a platform may not support 
always-on-top modal dialogs. 



    Returns: true, if the always-on-top mode is supported by the toolkit and for this 
             window, false, if always-on-top mode is not supported for this 
             window or toolkit doesn't support always-on-top windows. 

*java.awt.Window.isAutoRequestFocus()*

public boolean isAutoRequestFocus()

Returns whether this window should receive focus on subsequently being shown 
(with a call to setVisible(true)(|java.awt.Window|) ), or being moved to the 
front (with a call to (|java.awt.Window|) ). 

By default, the window hasautoRequestFocusvalue oftrue. 



    Returns: {@code autoRequestFocus} value 

*java.awt.Window.isFocusableWindow()*

public final boolean isFocusableWindow()

Returns whether this Window can become the focused Window, that is, whether 
this Window or any of its subcomponents can become the focus owner. For a Frame 
or Dialog to be focusable, its focusable Window state must be set to true. For 
a Window which is not a Frame or Dialog to be focusable, its focusable Window 
state must be set to true, its nearest owning Frame or Dialog must be showing 
on the screen, and it must contain at least one Component in its focus 
traversal cycle. If any of these conditions is not met, then neither this 
Window nor any of its subcomponents can become the focus owner. 



    Returns: true if this Window can be the focused Window; false otherwise 

*java.awt.Window.isFocusCycleRoot()*

public final boolean isFocusCycleRoot()

Always returns true because all Windows must be roots of a focus traversal 
cycle. 



    Returns: 

*java.awt.Window.isFocused()*

public boolean isFocused()

Returns whether this Window is focused. If there exists a focus owner, the 
focused Window is the Window that is, or contains, that focus owner. If there 
is no focus owner, then no Window is focused. 

If the focused Window is a Frame or a Dialog it is also the active Window. 
Otherwise, the active Window is the first Frame or Dialog that is an owner of 
the focused Window. 



    Returns: whether this is the focused Window. 

*java.awt.Window.isLocationByPlatform()*

public boolean isLocationByPlatform()

Returns true if this Window will appear at the default location for the native 
windowing system the next time this Window is made visible. This method always 
returns false if the Window is showing on the screen. 



    Returns: whether this Window will appear at the default location 

*java.awt.Window.isOpaque()*

public boolean isOpaque()

Indicates if the window is currently opaque. 

The method returnsfalseif the background color of the window is notnulland the 
alpha component of the color is less than1.0f. The method returnstrueotherwise. 



    Returns: {@code true} if the window is opaque, {@code false} otherwise 

*java.awt.Window.isShowing()*

public boolean isShowing()

Checks if this Window is showing on screen. 



*java.awt.Window.isValidateRoot()*

public boolean isValidateRoot()

Indicates if this container is a validate root. Windowobjects are the validate 
roots, and, therefore, they override this method to returntrue. 



    Returns: 

*java.awt.Window.pack()*

public void pack()

Causes this Window to be sized to fit the preferred size and layouts of its 
subcomponents. The resulting width and height of the window are automatically 
enlarged if either of dimensions is less than the minimum size as specified by 
the previous call to thesetMinimumSizemethod. 

If the window and/or its owner are not displayable yet, both of them are made 
displayable before calculating the preferred size. The Window is validated 
after its size is being calculated. 



*java.awt.Window.paint(Graphics)*

public void paint(java.awt.Graphics g)





*java.awt.Window.postEvent(Event)*

public boolean postEvent(java.awt.Event e)



    Deprecated: As of JDK version 1.1
 replaced by <code>dispatchEvent(AWTEvent)</code>.


*java.awt.Window.processEvent(AWTEvent)*

protected void processEvent(java.awt.AWTEvent e)

Processes events on this window. If the event is an WindowEvent, it invokes the 
processWindowEvent method, else it invokes its superclass's processEvent. Note 
that if the event parameter is null the behavior is unspecified and may result 
in an exception. 


    e - the event 

*java.awt.Window.processWindowEvent(WindowEvent)*

protected void processWindowEvent(java.awt.event.WindowEvent e)

Processes window events occurring on this window by dispatching them to any 
registered WindowListener objects. NOTE: This method will not be called unless 
window events are enabled for this component; this happens when one of the 
following occurs: 

A WindowListener object is registered via addWindowListener Window events are 
enabled via enableEvents 

Note that if the event parameter is null the behavior is unspecified and may 
result in an exception. 


    e - the window event 

*java.awt.Window.processWindowFocusEvent(WindowEvent)*

protected void processWindowFocusEvent(java.awt.event.WindowEvent e)

Processes window focus event occuring on this window by dispatching them to any 
registered WindowFocusListener objects. NOTE: this method will not be called 
unless window focus events are enabled for this window. This happens when one 
of the following occurs: 

a WindowFocusListener is registered via addWindowFocusListener Window focus 
events are enabled via enableEvents 

Note that if the event parameter is null the behavior is unspecified and may 
result in an exception. 


    e - the window focus event 

*java.awt.Window.processWindowStateEvent(WindowEvent)*

protected void processWindowStateEvent(java.awt.event.WindowEvent e)

Processes window state event occuring on this window by dispatching them to any 
registered WindowStateListener objects. NOTE: this method will not be called 
unless window state events are enabled for this window. This happens when one 
of the following occurs: 

a WindowStateListener is registered via addWindowStateListener window state 
events are enabled via enableEvents 

Note that if the event parameter is null the behavior is unspecified and may 
result in an exception. 


    e - the window state event 

*java.awt.Window.removeNotify()*

public void removeNotify()





*java.awt.Window.removeWindowFocusListener(WindowFocusListener)*

public synchronized void removeWindowFocusListener(java.awt.event.WindowFocusListener l)

Removes the specified window focus listener so that it no longer receives 
window events from this window. If l is null, no exception is thrown and no 
action is performed. Refer to AWT Threading Issues for details on AWT's 
threading model. 


    l - the window focus listener 

*java.awt.Window.removeWindowListener(WindowListener)*

public synchronized void removeWindowListener(java.awt.event.WindowListener l)

Removes the specified window listener so that it no longer receives window 
events from this window. If l is null, no exception is thrown and no action is 
performed. Refer to AWT Threading Issues for details on AWT's threading model. 


    l - the window listener 

*java.awt.Window.removeWindowStateListener(WindowStateListener)*

public synchronized void removeWindowStateListener(java.awt.event.WindowStateListener l)

Removes the specified window state listener so that it no longer receives 
window events from this window. If l is null, no exception is thrown and no 
action is performed. Refer to AWT Threading Issues for details on AWT's 
threading model. 


    l - the window state listener 

*java.awt.Window.reshape(int,int,int,int)*

public void reshape(
  int x,
  int y,
  int width,
  int height)



    Deprecated: As of JDK version 1.1,
 replaced by <code>setBounds(int, int, int, int)</code>.


*java.awt.Window.setAlwaysOnTop(boolean)*

public final void setAlwaysOnTop(boolean alwaysOnTop)
  throws |java.lang.SecurityException|
         
Sets whether this window should always be above other windows. If there are 
multiple always-on-top windows, their relative order is unspecified and 
platform dependent. 

If some other window is already always-on-top then the relative order between 
these windows is unspecified (depends on platform). No window can be brought to 
be over the always-on-top window except maybe another always-on-top window. 

All windows owned by an always-on-top window inherit this state and 
automatically become always-on-top. If a window ceases to be always-on-top, the 
windows that it owns will no longer be always-on-top. When an always-on-top 
window is sent toBack(|java.awt.Window|) , its always-on-top state is set to 
false. 

When this method is called on a window with a value of true, and the window is 
visible and the platform supports always-on-top for this window, the window is 
immediately brought forward, "sticking" it in the top-most position. If the 
window isn`t currently visible, this method sets the always-on-top state to 
true but does not bring the window forward. When the window is later shown, it 
will be always-on-top. 

When this method is called on a window with a value of false the always-on-top 
state is set to normal. The window remains in the top-most position but it`s 
z-order can be changed as for any other window. Calling this method with a 
value of false on a window that has a normal state has no effect. Setting the 
always-on-top state to false has no effect on the relative z-order of the 
windows if there are no other always-on-top windows. 

Note: some platforms might not support always-on-top windows. To detect if 
always-on-top windows are supported by the current platform, use 
(|java.awt.Toolkit|) and (|java.awt.Window|) . If always-on-top mode isn't 
supported by the toolkit or for this window, calling this method has no effect. 

If a SecurityManager is installed, the calling thread must be granted the 
AWTPermission "setWindowAlwaysOnTop" in order to set the value of this 
property. If this permission is not granted, this method will throw a 
SecurityException, and the current value of the property will be left 
unchanged. 


    alwaysOnTop - true if the window should always be above other windows 

*java.awt.Window.setAutoRequestFocus(boolean)*

public void setAutoRequestFocus(boolean autoRequestFocus)

Sets whether this window should receive focus on subsequently being shown (with 
a call to setVisible(true)(|java.awt.Window|) ), or being moved to the front 
(with a call to (|java.awt.Window|) ). 

Note that setVisible(true)(|java.awt.Window|) may be called indirectly (e.g. 
when showing an owner of the window makes the window to be shown). 
(|java.awt.Window|) may also be called indirectly (e.g. when 
setVisible(true)(|java.awt.Window|) is called on already visible window). In 
all such cases this property takes effect as well. 

The value of the property is not inherited by owned windows. 


    autoRequestFocus - whether this window should be focused on subsequently being shown or being 
       moved to the front 

*java.awt.Window.setBackground(Color)*

public void setBackground(java.awt.Color bgColor)

Sets the background color of this window. 

If the windowing system supports the 
PERPIXEL_TRANSLUCENT(|java.awt.GraphicsDevice.WindowTranslucency|) 
tranclucency, the alpha component of the given background color may effect the 
mode of operation for this window: it indicates whether this window must be 
opaque (alpha equals1.0f) or per-pixel translucent (alpha is less than1.0f). If 
the given background color isnull, the window is considered completely opaque. 

All the following conditions must be met to enable the per-pixel transparency 
mode for this window: 

The PERPIXEL_TRANSLUCENT(|java.awt.GraphicsDevice.WindowTranslucency|) 
translucency must be supported by the graphics device where this window is 
located The window must be undecorated (see (|java.awt.Frame|) and 
(|java.awt.Dialog|) ) The window must not be in full-screen mode (see 
(|java.awt.GraphicsDevice|) ) 

If the alpha component of the requested background color is less than1.0f, and 
any of the above conditions are not met, the background color of this window 
will not change, the alpha component of the given background color will not 
affect the mode of operation for this window, and either 
theUnsupportedOperationExceptionorIllegalComponentStateExceptionwill be thrown. 

When the window is per-pixel translucent, the drawing sub-system respects the 
alpha value of each individual pixel. If a pixel gets painted with the alpha 
color component equal to zero, it becomes visually transparent. If the alpha of 
the pixel is equal to 1.0f, the pixel is fully opaque. Interim values of the 
alpha color component make the pixel semi-transparent. In this mode, the 
background of the window gets painted with the alpha value of the given 
background color. If the alpha value of the argument of this method is equal 
to0, the background is not painted at all. 

The actual level of translucency of a given pixel also depends on window 
opacity (see (|java.awt.Window|) ), as well as the current shape of this window 
(see (|java.awt.Window|) ). 

Note that painting a pixel with the alpha value of0may or may not disable the 
mouse event handling on this pixel. This is a platform-dependent behavior. To 
make sure the mouse events do not get dispatched to a particular pixel, the 
pixel must be excluded from the shape of the window. 

Enabling the per-pixel translucency mode may change the graphics configuration 
of this window due to the native platform requirements. 


    bgColor - the color to become this window's background color. 

*java.awt.Window.setBounds(int,int,int,int)*

public void setBounds(
  int x,
  int y,
  int width,
  int height)

Thewidthorheightvalues are automatically enlarged if either is less than the 
minimum size as specified by previous call tosetMinimumSize. 

The method changes the geometry-related data. Therefore, the native windowing 
system may ignore such requests, or it may modify the requested data, so that 
theWindowobject is placed and sized in a way that corresponds closely to the 
desktop settings. 



*java.awt.Window.setBounds(Rectangle)*

public void setBounds(java.awt.Rectangle r)

Ther.widthorr.heightvalues will be automatically enlarged if either is less 
than the minimum size as specified by previous call tosetMinimumSize. 

The method changes the geometry-related data. Therefore, the native windowing 
system may ignore such requests, or it may modify the requested data, so that 
theWindowobject is placed and sized in a way that corresponds closely to the 
desktop settings. 



*java.awt.Window.setCursor(Cursor)*

public void setCursor(java.awt.Cursor cursor)

Set the cursor image to a specified cursor. 

The method may have no visual effect if the Java platform implementation and/or 
the native system do not support changing the mouse cursor shape. 


    cursor - One of the constants defined by the Cursor class. If this parameter is null 
       then the cursor for this window will be set to the type 
       Cursor.DEFAULT_CURSOR. 

*java.awt.Window.setFocusableWindowState(boolean)*

public void setFocusableWindowState(boolean focusableWindowState)

Sets whether this Window can become the focused Window if it meets the other 
requirements outlined in isFocusableWindow. If this Window's focusable Window 
state is set to false, then isFocusableWindow will return false. If this 
Window's focusable Window state is set to true, then isFocusableWindow may 
return true or false depending upon the other requirements which must be met in 
order for a Window to be focusable. 

Setting a Window's focusability state to false is the standard mechanism for an 
application to identify to the AWT a Window which will be used as a floating 
palette or toolbar, and thus should be a non-focusable Window. 

Setting the focusability state on a visible Window can have a delayed effect on 
some platforms the actual change may happen only when the Window becomes hidden 
and then visible again. To ensure consistent behavior across platforms, set the 
Window's focusable state when the Window is invisible and then show it. 


    focusableWindowState - whether this Window can be the focused Window 

*java.awt.Window.setFocusCycleRoot(boolean)*

public final void setFocusCycleRoot(boolean focusCycleRoot)

Does nothing because Windows must always be roots of a focus traversal cycle. 
The passed-in value is ignored. 


    focusCycleRoot - this value is ignored 

*java.awt.Window.setIconImage(Image)*

public void setIconImage(java.awt.Image image)

Sets the image to be displayed as the icon for this window. 

This method can be used instead of setIconImages()(|java.awt.Window|) to 
specify a single image as a window's icon. 

The following statement: 

setIconImage(image); 

is equivalent to: 

ArrayList<Image> imageList = new ArrayList<Image>(); imageList.add(image); 
setIconImages(imageList); 

Note : Native windowing systems may use different images of differing 
dimensions to represent a window, depending on the context (e.g. window 
decoration, window list, taskbar, etc.). They could also use just a single 
image for all contexts or no image at all. 


    image - the icon image to be displayed. 

*java.awt.Window.setIconImages(List<?extendsImage>)*

public synchronized void setIconImages(java.util.List<? extends java.awt.Image> icons)

Sets the sequence of images to be displayed as the icon for this window. 
Subsequent calls togetIconImageswill always return a copy of theiconslist. 

Depending on the platform capabilities one or several images of different 
dimensions will be used as the window's icon. 

Theiconslist is scanned for the images of most appropriate dimensions from the 
beginning. If the list contains several images of the same size, the first will 
be used. 

Ownerless windows with no icon specified use platfrom-default icon. The icon of 
an owned window may be inherited from the owner unless explicitly overridden. 
Setting the icon tonullor empty list restores the default behavior. 

Note : Native windowing systems may use different images of differing 
dimensions to represent a window, depending on the context (e.g. window 
decoration, window list, taskbar, etc.). They could also use just a single 
image for all contexts or no image at all. 


    icons - the list of icon images to be displayed. 

*java.awt.Window.setLocation(int,int)*

public void setLocation(
  int x,
  int y)

The method changes the geometry-related data. Therefore, the native windowing 
system may ignore such requests, or it may modify the requested data, so that 
theWindowobject is placed and sized in a way that corresponds closely to the 
desktop settings. 



*java.awt.Window.setLocation(Point)*

public void setLocation(java.awt.Point p)

The method changes the geometry-related data. Therefore, the native windowing 
system may ignore such requests, or it may modify the requested data, so that 
theWindowobject is placed and sized in a way that corresponds closely to the 
desktop settings. 



*java.awt.Window.setLocationByPlatform(boolean)*

public void setLocationByPlatform(boolean locationByPlatform)

Sets whether this Window should appear at the default location for the native 
windowing system or at the current location (returned by getLocation) the next 
time the Window is made visible. This behavior resembles a native window shown 
without programmatically setting its location. Most windowing systems cascade 
windows if their locations are not explicitly set. The actual location is 
determined once the window is shown on the screen. 

This behavior can also be enabled by setting the System Property 
"java.awt.Window.locationByPlatform" to "true", though calls to this method 
take precedence. 

Calls to setVisible, setLocation and setBounds after calling 
setLocationByPlatform clear this property of the Window. 

For example, after the following code is executed: 

setLocationByPlatform(true); setVisible(true); boolean flag = 
isLocationByPlatform(); 

The window will be shown at platform's default location and flag will be false. 

In the following sample: 

setLocationByPlatform(true); setLocation(10, 10); boolean flag = 
isLocationByPlatform(); setVisible(true); 

The window will be shown at (10, 10) and flag will be false. 


    locationByPlatform - true if this Window should appear at the default location, false if at the 
       current location 

*java.awt.Window.setLocationRelativeTo(Component)*

public void setLocationRelativeTo(java.awt.Component c)

Sets the location of the window relative to the specified component according 
to the following scenarios. 

The target screen mentioned below is a screen to which the window should be 
placed after the setLocationRelativeTo method is called. 

If the component isnull, or theGraphicsConfigurationassociated with this 
component isnull, the window is placed in the center of the screen. The center 
point can be obtained with the 
GraphicsEnvironment.getCenterPoint(|java.awt.GraphicsEnvironment|) method. If 
the component is notnull, but it is not currently showing, the window is placed 
in the center of the target screen defined by 
theGraphicsConfigurationassociated with this component. If the component is 
notnulland is shown on the screen, then the window is located in such a way 
that the center of the window coincides with the center of the component. 

If the screens configuration does not allow the window to be moved from one 
screen to another, then the window is only placed at the location determined 
according to the above conditions and itsGraphicsConfigurationis not changed. 

Note: If the lower edge of the window is out of the screen, then the window is 
placed to the side of the Component that is closest to the center of the 
screen. So if the component is on the right part of the screen, the window is 
placed to its left, and vice versa. 

If after the window location has been calculated, the upper, left, or right 
edge of the window is out of the screen, then the window is located in such a 
way that the upper, left, or right edge of the window coincides with the 
corresponding edge of the screen. If both left and right edges of the window 
are out of the screen, the window is placed at the left side of the screen. The 
similar placement will occur if both top and bottom edges are out of the 
screen. In that case, the window is placed at the top side of the screen. 

The method changes the geometry-related data. Therefore, the native windowing 
system may ignore such requests, or it may modify the requested data, so that 
theWindowobject is placed and sized in a way that corresponds closely to the 
desktop settings. 


    c - the component in relation to which the window's location is determined 

*java.awt.Window.setMinimumSize(Dimension)*

public void setMinimumSize(java.awt.Dimension minimumSize)

Sets the minimum size of this window to a constant value. Subsequent calls 
togetMinimumSizewill always return this value. If current window's size is less 
thanminimumSizethe size of the window is automatically enlarged to honor the 
minimum size. 

If thesetSizeorsetBoundsmethods are called afterwards with a width or height 
less than that was specified by thesetMinimumSizemethod the window is 
automatically enlarged to meet theminimumSizevalue. TheminimumSizevalue also 
affects the behaviour of thepackmethod. 

The default behavior is restored by setting the minimum size parameter to 
thenullvalue. 

Resizing operation may be restricted if the user tries to resize window below 
theminimumSizevalue. This behaviour is platform-dependent. 


    minimumSize - the new minimum size of this window 

*java.awt.Window.setModalExclusionType(Dialog.ModalExclusionType)*

public void setModalExclusionType(java.awt.Dialog.ModalExclusionType exclusionType)

Specifies the modal exclusion type for this window. If a window is modal 
excluded, it is not blocked by some modal dialogs. See 
Dialog.ModalExclusionType(|java.awt.Dialog.ModalExclusionType|) for possible 
modal exclusion types. 

If the given type is not supported, NO_EXCLUDE is used. 

Note: changing the modal exclusion type for a visible window may have no effect 
until it is hidden and then shown again. 


    exclusionType - the modal exclusion type for this window; a null value is equivivalent to 
       {@link Dialog.ModalExclusionType#NO_EXCLUDE NO_EXCLUDE} 

*java.awt.Window.setOpacity(float)*

public void setOpacity(float opacity)

Sets the opacity of the window. 

The opacity value is in the range [0..1]. Note that setting the opacity level 
of 0 may or may not disable the mouse event handling on this window. This is a 
platform-dependent behavior. 

The following conditions must be met in order to set the opacity value less 
than1.0f: 

The TRANSLUCENT(|java.awt.GraphicsDevice.WindowTranslucency|) translucency must 
be supported by the underlying system The window must be undecorated (see 
(|java.awt.Frame|) and (|java.awt.Dialog|) ) The window must not be in 
full-screen mode (see (|java.awt.GraphicsDevice|) ) 

If the requested opacity value is less than1.0f, and any of the above 
conditions are not met, the window opacity will not change, and 
theIllegalComponentStateExceptionwill be thrown. 

The translucency levels of individual pixels may also be effected by the alpha 
component of their color (see (|java.awt.Window|) ) and the current shape of 
this window (see (|java.awt.Window|) ). 


    opacity - the opacity level to set to the window 

*java.awt.Window.setShape(Shape)*

public void setShape(java.awt.Shape shape)

Sets the shape of the window. 

Setting a shape cuts off some parts of the window. Only the parts that belong 
to the given (|java.awt.Shape|) remain visible and clickable. If the shape 
argument isnull, this method restores the default shape, making the window 
rectangular on most platforms. 

The following conditions must be met to set a non-null shape: 

The PERPIXEL_TRANSPARENT(|java.awt.GraphicsDevice.WindowTranslucency|) 
translucency must be supported by the underlying system The window must be 
undecorated (see (|java.awt.Frame|) and (|java.awt.Dialog|) ) The window must 
not be in full-screen mode (see (|java.awt.GraphicsDevice|) ) 

If the requested shape is notnull, and any of the above conditions are not met, 
the shape of this window will not change, and either 
theUnsupportedOperationExceptionorIllegalComponentStateExceptionwill be thrown. 

The tranlucency levels of individual pixels may also be effected by the alpha 
component of their color (see (|java.awt.Window|) ) and the opacity value (see 
(|java.awt.Window|) ). See (|java.awt.GraphicsDevice.WindowTranslucency|) for 
more details. 


    shape - the shape to set to the window 

*java.awt.Window.setSize(Dimension)*

public void setSize(java.awt.Dimension d)

Thed.widthandd.heightvalues are automatically enlarged if either is less than 
the minimum size as specified by previous call tosetMinimumSize. 

The method changes the geometry-related data. Therefore, the native windowing 
system may ignore such requests, or it may modify the requested data, so that 
theWindowobject is placed and sized in a way that corresponds closely to the 
desktop settings. 



*java.awt.Window.setSize(int,int)*

public void setSize(
  int width,
  int height)

Thewidthandheightvalues are automatically enlarged if either is less than the 
minimum size as specified by previous call tosetMinimumSize. 

The method changes the geometry-related data. Therefore, the native windowing 
system may ignore such requests, or it may modify the requested data, so that 
theWindowobject is placed and sized in a way that corresponds closely to the 
desktop settings. 



*java.awt.Window.setType(Window.Type)*

public void setType(java.awt.Window.Type type)

Sets the type of the window. 

This method can only be called while the window is not displayable. 



*java.awt.Window.setVisible(boolean)*

public void setVisible(boolean b)

Shows or hides thisWindowdepending on the value of parameterb. 

If the method shows the window then the window is also made focused under the 
following conditions: 

TheWindowmeets the requirements outlined in the (|java.awt.Window|) method. 
TheWindow'sautoRequestFocusproperty is of thetruevalue. Native windowing system 
allows theWindowto get focused. 

There is an exception for the second condition (the value of 
theautoRequestFocusproperty). The property is not taken into account if the 
window is a modal dialog, which blocks the currently focused window. 

Developers must never assume that the window is the focused or active window 
until it receives a WINDOW_GAINED_FOCUS or WINDOW_ACTIVATED event. 


    b - if {@code true}, makes the {@code Window} visible, otherwise hides the {@code 
       Window}. If the {@code Window} and/or its owner are not yet displayable, 
       both are made displayable. The {@code Window} will be validated prior to 
       being made visible. If the {@code Window} is already visible, this will 
       bring the {@code Window} to the front. If {@code false}, hides this 
       {@code Window}, its subcomponents, and all of its owned children. The 
       {@code Window} and its subcomponents can be made visible again with a 
       call to {@code #setVisible(true)}. 

*java.awt.Window.show()*

public void show()

Makes the Window visible. If the Window and/or its owner are not yet 
displayable, both are made displayable. The Window will be validated prior to 
being made visible. If the Window is already visible, this will bring the 
Window to the front. 

    Deprecated: As of JDK version 1.5, replaced by
 {@link #setVisible(boolean)}.


*java.awt.Window.toBack()*

public void toBack()

If this Window is visible, sends this Window to the back and may cause it to 
lose focus or activation if it is the focused or active Window. 

Places this Window at the bottom of the stacking order and shows it behind any 
other Windows in this VM. No action will take place is this Window is not 
visible. Some platforms do not allow Windows which are owned by other Windows 
to appear below their owners. Every attempt will be made to move this Window as 
low as possible in the stacking order; however, developers should not assume 
that this method will move this Window below all other windows in every 
situation. 

Because of variations in native windowing systems, no guarantees about changes 
to the focused and active Windows can be made. Developers must never assume 
that this Window is no longer the focused or active Window until this Window 
receives a WINDOW_LOST_FOCUS or WINDOW_DEACTIVATED event. On platforms where 
the top-most window is the focused window, this method will probably cause this 
Window to lose focus. In that case, the next highest, focusable Window in this 
VM will receive focus. On platforms where the stacking order does not typically 
affect the focused window, this method will probably leave the focused and 
active Windows unchanged. 



*java.awt.Window.toFront()*

public void toFront()

If this Window is visible, brings this Window to the front and may make it the 
focused Window. 

Places this Window at the top of the stacking order and shows it in front of 
any other Windows in this VM. No action will take place if this Window is not 
visible. Some platforms do not allow Windows which own other Windows to appear 
on top of those owned Windows. Some platforms may not permit this VM to place 
its Windows above windows of native applications, or Windows of other VMs. This 
permission may depend on whether a Window in this VM is already focused. Every 
attempt will be made to move this Window as high as possible in the stacking 
order; however, developers should not assume that this method will move this 
Window above all other windows in every situation. 

Developers must never assume that this Window is the focused or active Window 
until this Window receives a WINDOW_GAINED_FOCUS or WINDOW_ACTIVATED event. On 
platforms where the top-most window is the focused window, this method will 
probably focus this Window (if it is not already focused) under the following 
conditions: 

The window meets the requirements outlined in the (|java.awt.Window|) method. 
The window's propertyautoRequestFocusis of thetruevalue. Native windowing 
system allows the window to get focused. 

On platforms where the stacking order does not typically affect the focused 
window, this method will probably leave the focused and active Windows 
unchanged. 

If this method causes this Window to be focused, and this Window is a Frame or 
a Dialog, it will also become activated. If this Window is focused, but it is 
not a Frame or a Dialog, then the first Frame or Dialog that is an owner of 
this Window will be activated. 

If this window is blocked by modal dialog, then the blocking dialog is brought 
to the front and remains above the blocked window. 




