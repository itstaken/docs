*java.util.zip.DeflaterOutputStream* *DeflaterOutputStream* This class implement

public class DeflaterOutputStream
  extends    |java.io.FilterOutputStream|

|java.util.zip.DeflaterOutputStream_Description|
|java.util.zip.DeflaterOutputStream_Fields|
|java.util.zip.DeflaterOutputStream_Constructors|
|java.util.zip.DeflaterOutputStream_Methods|

================================================================================

*java.util.zip.DeflaterOutputStream_Fields*
|byte[]_java.util.zip.DeflaterOutputStream.buf|
|java.util.zip.Deflater_java.util.zip.DeflaterOutputStream.def|

*java.util.zip.DeflaterOutputStream_Constructors*
|java.util.zip.DeflaterOutputStream(OutputStream)|Creates a new output stream w
|java.util.zip.DeflaterOutputStream(OutputStream,boolean)|Creates a new output 
|java.util.zip.DeflaterOutputStream(OutputStream,Deflater)|Creates a new output
|java.util.zip.DeflaterOutputStream(OutputStream,Deflater,boolean)|Creates a ne
|java.util.zip.DeflaterOutputStream(OutputStream,Deflater,int)|Creates a new ou
|java.util.zip.DeflaterOutputStream(OutputStream,Deflater,int,boolean)|Creates 

*java.util.zip.DeflaterOutputStream_Methods*
|java.util.zip.DeflaterOutputStream.close()|Writes remaining compressed data to
|java.util.zip.DeflaterOutputStream.deflate()|Writes next block of compressed d
|java.util.zip.DeflaterOutputStream.finish()|Finishes writing compressed data t
|java.util.zip.DeflaterOutputStream.flush()|Flushes the compressed output strea
|java.util.zip.DeflaterOutputStream.write(byte[],int,int)|Writes an array of by
|java.util.zip.DeflaterOutputStream.write(int)|Writes a byte to the compressed 

*java.util.zip.DeflaterOutputStream_Description*

This class implements an output stream filter for compressing data in the 
"deflate" compression format. It is also used as the basis for other types of 
compression filters, such as GZIPOutputStream. 



*byte[]_java.util.zip.DeflaterOutputStream.buf*

Output buffer for writing compressed data. 


*java.util.zip.Deflater_java.util.zip.DeflaterOutputStream.def*

Compressor for this stream. 



*java.util.zip.DeflaterOutputStream(OutputStream)*

public DeflaterOutputStream(java.io.OutputStream out)

Creates a new output stream with a default compressor and buffer size. 

The new output stream instance is created as if by invoking the 2-argument 
constructor DeflaterOutputStream(out, false). 

    out - the output stream 

*java.util.zip.DeflaterOutputStream(OutputStream,boolean)*

public DeflaterOutputStream(
  java.io.OutputStream out,
  boolean syncFlush)

Creates a new output stream with a default compressor, a default buffer size 
and the specified flush mode. 

    out - the output stream 
    syncFlush - if {@code true} the {@link #flush()} method of this instance flushes the 
       compressor with flush mode {@link Deflater#SYNC_FLUSH} before flushing 
       the output stream, otherwise only flushes the output stream 

*java.util.zip.DeflaterOutputStream(OutputStream,Deflater)*

public DeflaterOutputStream(
  java.io.OutputStream out,
  java.util.zip.Deflater def)

Creates a new output stream with the specified compressor and a default buffer 
size. 

The new output stream instance is created as if by invoking the 3-argument 
constructor DeflaterOutputStream(out, def, false). 

    out - the output stream 
    def - the compressor ("deflater") 

*java.util.zip.DeflaterOutputStream(OutputStream,Deflater,boolean)*

public DeflaterOutputStream(
  java.io.OutputStream out,
  java.util.zip.Deflater def,
  boolean syncFlush)

Creates a new output stream with the specified compressor, flush mode and a 
default buffer size. 

    out - the output stream 
    def - the compressor ("deflater") 
    syncFlush - if {@code true} the {@link #flush()} method of this instance flushes the 
       compressor with flush mode {@link Deflater#SYNC_FLUSH} before flushing 
       the output stream, otherwise only flushes the output stream 

*java.util.zip.DeflaterOutputStream(OutputStream,Deflater,int)*

public DeflaterOutputStream(
  java.io.OutputStream out,
  java.util.zip.Deflater def,
  int size)

Creates a new output stream with the specified compressor and buffer size. 

The new output stream instance is created as if by invoking the 4-argument 
constructor DeflaterOutputStream(out, def, size, false). 

    out - the output stream 
    def - the compressor ("deflater") 
    size - the output buffer size 

*java.util.zip.DeflaterOutputStream(OutputStream,Deflater,int,boolean)*

public DeflaterOutputStream(
  java.io.OutputStream out,
  java.util.zip.Deflater def,
  int size,
  boolean syncFlush)

Creates a new output stream with the specified compressor, buffer size and 
flush mode. 

    out - the output stream 
    def - the compressor ("deflater") 
    size - the output buffer size 
    syncFlush - if {@code true} the {@link #flush()} method of this instance flushes the 
       compressor with flush mode {@link Deflater#SYNC_FLUSH} before flushing 
       the output stream, otherwise only flushes the output stream 

*java.util.zip.DeflaterOutputStream.close()*

public void close()
  throws |java.io.IOException|
         
Writes remaining compressed data to the output stream and closes the underlying 
stream. 



*java.util.zip.DeflaterOutputStream.deflate()*

protected void deflate()
  throws |java.io.IOException|
         
Writes next block of compressed data to the output stream. 



*java.util.zip.DeflaterOutputStream.finish()*

public void finish()
  throws |java.io.IOException|
         
Finishes writing compressed data to the output stream without closing the 
underlying stream. Use this method when applying multiple filters in succession 
to the same output stream. 



*java.util.zip.DeflaterOutputStream.flush()*

public void flush()
  throws |java.io.IOException|
         
Flushes the compressed output stream. 

If syncFlush(|java.util.zip.DeflaterOutputStream|) istruewhen this compressed 
output stream is constructed, this method first flushes the 
underlyingcompressorwith the flush mode (|java.util.zip.Deflater|) to force all 
pending data to be flushed out to the output stream and then flushes the output 
stream. Otherwise this method only flushes the output stream without flushing 
thecompressor. 



*java.util.zip.DeflaterOutputStream.write(byte[],int,int)*

public void write(
  byte[] b,
  int off,
  int len)
  throws |java.io.IOException|
         
Writes an array of bytes to the compressed output stream. This method will 
block until all the bytes are written. 


    b - the data to be written 
    off - the start offset of the data 
    len - the length of the data 

*java.util.zip.DeflaterOutputStream.write(int)*

public void write(int b)
  throws |java.io.IOException|
         
Writes a byte to the compressed output stream. This method will block until the 
byte can be written. 


    b - the byte to be written 


