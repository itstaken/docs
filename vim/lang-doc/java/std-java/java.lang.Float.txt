*java.lang.Float* *Float* TheFloatclass wraps a value of primitive typefloatin a

public final class Float
  extends    |java.lang.Number|
  implements |java.lang.Comparable|

|java.lang.Float_Description|
|java.lang.Float_Fields|
|java.lang.Float_Constructors|
|java.lang.Float_Methods|

================================================================================

*java.lang.Float_Fields*
|int_java.lang.Float.MAX_EXPONENT|
|float_java.lang.Float.MAX_VALUE|
|int_java.lang.Float.MIN_EXPONENT|
|float_java.lang.Float.MIN_NORMAL|
|float_java.lang.Float.MIN_VALUE|
|float_java.lang.Float.NaN|
|float_java.lang.Float.NEGATIVE_INFINITY|
|float_java.lang.Float.POSITIVE_INFINITY|
|int_java.lang.Float.SIZE|
|java.lang.Class<java.lang.Float>_java.lang.Float.TYPE|

*java.lang.Float_Constructors*
|java.lang.Float(double)|Constructs a newly allocatedFloatobject that  represen
|java.lang.Float(float)|Constructs a newly allocatedFloatobject that  represent
|java.lang.Float(String)|Constructs a newly allocatedFloatobject that  represen

*java.lang.Float_Methods*
|java.lang.Float.byteValue()|Returns the value of thisFloatas abyte(by  casting
|java.lang.Float.compare(float,float)|Compares the two specifiedfloatvalues.
|java.lang.Float.compareTo(Float)|Compares twoFloatobjects numerically.
|java.lang.Float.doubleValue()|Returns thedoublevalue of thisFloatobject.
|java.lang.Float.equals(Object)|Compares this object against the specified obje
|java.lang.Float.floatToIntBits(float)|Returns a representation of the specifie
|java.lang.Float.floatToRawIntBits(float)|Returns a representation of the speci
|java.lang.Float.floatValue()|Returns thefloatvalue of thisFloatobject.
|java.lang.Float.hashCode()|Returns a hash code for thisFloatobject.
|java.lang.Float.intBitsToFloat(int)|Returns thefloatvalue corresponding to a g
|java.lang.Float.intValue()|Returns the value of thisFloatas anint(by  casting 
|java.lang.Float.isInfinite()|Returnstrueif thisFloatvalue is  infinitely large
|java.lang.Float.isInfinite(float)|Returnstrueif the specified number is infini
|java.lang.Float.isNaN()|Returnstrueif thisFloatvalue is a  Not-a-Number (NaN),
|java.lang.Float.isNaN(float)|Returnstrueif the specified number is a  Not-a-Nu
|java.lang.Float.longValue()|Returns value of thisFloatas along(by  casting to 
|java.lang.Float.parseFloat(String)|Returns a newfloatinitialized to the value 
|java.lang.Float.shortValue()|Returns the value of thisFloatas ashort(by  casti
|java.lang.Float.toHexString(float)|Returns a hexadecimal string representation
|java.lang.Float.toString()|Returns a string representation of thisFloatobject.
|java.lang.Float.toString(float)|Returns a string representation of thefloatarg
|java.lang.Float.valueOf(float)|Returns aFloatinstance representing the specifi
|java.lang.Float.valueOf(String)|Returns aFloatobject holding thefloatvalue rep

*java.lang.Float_Description*

TheFloatclass wraps a value of primitive typefloatin an object. An object of 
typeFloatcontains a single field whose type isfloat. 

In addition, this class provides several methods for converting afloatto 
aStringand aStringto afloat, as well as other constants and methods useful when 
dealing with afloat. 



*int_java.lang.Float.MAX_EXPONENT*

Maximum exponent a finitefloatvariable may have. It is equal to the value 
returned byMath.getExponent(Float.MAX_VALUE). 


*float_java.lang.Float.MAX_VALUE*

A constant holding the largest positive finite value of typefloat, 
(2-2-23)2127. It is equal to the hexadecimal floating-point 
literal0x1.fffffeP+127fand also equal toFloat.intBitsToFloat(0x7f7fffff). 


*int_java.lang.Float.MIN_EXPONENT*

Minimum exponent a normalizedfloatvariable may have. It is equal to the value 
returned byMath.getExponent(Float.MIN_NORMAL). 


*float_java.lang.Float.MIN_NORMAL*

A constant holding the smallest positive normal value of typefloat, 2-126. It 
is equal to the hexadecimal floating-point literal0x1.0p-126fand also equal 
toFloat.intBitsToFloat(0x00800000). 


*float_java.lang.Float.MIN_VALUE*

A constant holding the smallest positive nonzero value of typefloat, 2-149. It 
is equal to the hexadecimal floating-point literal0x0.000002P-126fand also 
equal toFloat.intBitsToFloat(0x1). 


*float_java.lang.Float.NaN*

A constant holding a Not-a-Number (NaN) value of typefloat. It is equivalent to 
the value returned byFloat.intBitsToFloat(0x7fc00000). 


*float_java.lang.Float.NEGATIVE_INFINITY*

A constant holding the negative infinity of typefloat. It is equal to the value 
returned byFloat.intBitsToFloat(0xff800000). 


*float_java.lang.Float.POSITIVE_INFINITY*

A constant holding the positive infinity of typefloat. It is equal to the value 
returned byFloat.intBitsToFloat(0x7f800000). 


*int_java.lang.Float.SIZE*

The number of bits used to represent afloatvalue. 


*java.lang.Class<java.lang.Float>_java.lang.Float.TYPE*

TheClassinstance representing the primitive typefloat. 



*java.lang.Float(double)*

public Float(double value)

Constructs a newly allocatedFloatobject that represents the argument converted 
to typefloat. 

    value - the value to be represented by the {@code Float}. 

*java.lang.Float(float)*

public Float(float value)

Constructs a newly allocatedFloatobject that represents the 
primitivefloatargument. 

    value - the value to be represented by the {@code Float}. 

*java.lang.Float(String)*

public Float(java.lang.String s)
  throws |java.lang.NumberFormatException|
         
Constructs a newly allocatedFloatobject that represents the floating-point 
value of typefloatrepresented by the string. The string is converted to 
afloatvalue as if by thevalueOfmethod. 

    s - a string to be converted to a {@code Float}. 

*java.lang.Float.byteValue()*

public byte byteValue()

Returns the value of thisFloatas abyte(by casting to abyte). 



    Returns: the {@code float} value represented by this object converted to type {@code 
             byte} 

*java.lang.Float.compare(float,float)*

public static int compare(
  float f1,
  float f2)

Compares the two specifiedfloatvalues. The sign of the integer value returned 
is the same as that of the integer that would be returned by the call: 

new Float(f1).compareTo(new Float(f2)) 


    f1 - the first {@code float} to compare. 
    f2 - the second {@code float} to compare. 

    Returns: the value {@code 0} if {@code f1} is numerically equal to {@code f2}; a value 
             less than {@code 0} if {@code f1} is numerically less than {@code 
             f2}; and a value greater than {@code 0} if {@code f1} is 
             numerically greater than {@code f2}. 

*java.lang.Float.compareTo(Float)*

public int compareTo(java.lang.Float anotherFloat)

Compares twoFloatobjects numerically. There are two ways in which comparisons 
performed by this method differ from those performed by the Java language 
numerical comparison operators (=, >) when applied to primitivefloatvalues: 

Float.NaNis considered by this method to be equal to itself and greater than 
all otherfloatvalues (includingFloat.POSITIVE_INFINITY). 0.0fis considered by 
this method to be greater than-0.0f. 

This ensures that the natural ordering ofFloatobjects imposed by this method is 
consistent with equals. 


    anotherFloat - the {@code Float} to be compared. 

    Returns: the value {@code 0} if {@code anotherFloat} is numerically equal to this {@code 
             Float}; a value less than {@code 0} if this {@code Float} is 
             numerically less than {@code anotherFloat}; and a value greater 
             than {@code 0} if this {@code Float} is numerically greater than 
             {@code anotherFloat}. 

*java.lang.Float.doubleValue()*

public double doubleValue()

Returns thedoublevalue of thisFloatobject. 



    Returns: the {@code float} value represented by this object is converted to type {@code 
             double} and the result of the conversion is returned. 

*java.lang.Float.equals(Object)*

public boolean equals(java.lang.Object obj)

Compares this object against the specified object. The result istrueif and only 
if the argument is notnulland is aFloatobject that represents afloatwith the 
same value as thefloatrepresented by this object. For this purpose, 
twofloatvalues are considered to be the same if and only if the method 
(|java.lang.Float|) returns the identicalintvalue when applied to each. 

Note that in most cases, for two instances of classFloat,f1andf2, the value 
off1.equals(f2)istrueif and only if 



f1.floatValue() == f2.floatValue() 

also has the valuetrue. However, there are two exceptions: 

Iff1andf2both representFloat.NaN, then theequalsmethod returnstrue, even 
thoughFloat.NaN==Float.NaNhas the valuefalse. 
Iff1represents+0.0fwhilef2represents-0.0f, or vice versa, theequaltest has the 
valuefalse, even though0.0f==-0.0fhas the valuetrue. 

This definition allows hash tables to operate properly. 


    obj - the object to be compared 

    Returns: {@code true} if the objects are the same; {@code false} otherwise. 

*java.lang.Float.floatToIntBits(float)*

public static int floatToIntBits(float value)

Returns a representation of the specified floating-point value according to the 
IEEE 754 floating-point "single format" bit layout. 

Bit 31 (the bit that is selected by the mask0x80000000) represents the sign of 
the floating-point number. Bits 30-23 (the bits that are selected by the 
mask0x7f800000) represent the exponent. Bits 22-0 (the bits that are selected 
by the mask0x007fffff) represent the significand (sometimes called the 
mantissa) of the floating-point number. 

If the argument is positive infinity, the result is0x7f800000. 

If the argument is negative infinity, the result is0xff800000. 

If the argument is NaN, the result is0x7fc00000. 

In all cases, the result is an integer that, when given to the 
(|java.lang.Float|) method, will produce a floating-point value the same as the 
argument tofloatToIntBits(except all NaN values are collapsed to a single 
"canonical" NaN value). 


    value - a floating-point number. 

    Returns: the bits that represent the floating-point number. 

*java.lang.Float.floatToRawIntBits(float)*

public static native int floatToRawIntBits(float value)

Returns a representation of the specified floating-point value according to the 
IEEE 754 floating-point "single format" bit layout, preserving Not-a-Number 
(NaN) values. 

Bit 31 (the bit that is selected by the mask0x80000000) represents the sign of 
the floating-point number. Bits 30-23 (the bits that are selected by the 
mask0x7f800000) represent the exponent. Bits 22-0 (the bits that are selected 
by the mask0x007fffff) represent the significand (sometimes called the 
mantissa) of the floating-point number. 

If the argument is positive infinity, the result is0x7f800000. 

If the argument is negative infinity, the result is0xff800000. 

If the argument is NaN, the result is the integer representing the actual NaN 
value. Unlike thefloatToIntBitsmethod,floatToRawIntBitsdoes not collapse all 
the bit patterns encoding a NaN to a single "canonical" NaN value. 

In all cases, the result is an integer that, when given to the 
(|java.lang.Float|) method, will produce a floating-point value the same as the 
argument tofloatToRawIntBits. 


    value - a floating-point number. 

    Returns: the bits that represent the floating-point number. 

*java.lang.Float.floatValue()*

public float floatValue()

Returns thefloatvalue of thisFloatobject. 



    Returns: the {@code float} value represented by this object 

*java.lang.Float.hashCode()*

public int hashCode()

Returns a hash code for thisFloatobject. The result is the integer bit 
representation, exactly as produced by the method (|java.lang.Float|) , of the 
primitivefloatvalue represented by thisFloatobject. 



    Returns: a hash code value for this object. 

*java.lang.Float.intBitsToFloat(int)*

public static native float intBitsToFloat(int bits)

Returns thefloatvalue corresponding to a given bit representation. The argument 
is considered to be a representation of a floating-point value according to the 
IEEE 754 floating-point "single format" bit layout. 

If the argument is0x7f800000, the result is positive infinity. 

If the argument is0xff800000, the result is negative infinity. 

If the argument is any value in the range0x7f800001through0x7fffffffor in the 
range0xff800001through0xffffffff, the result is a NaN. No IEEE 754 
floating-point operation provided by Java can distinguish between two NaN 
values of the same type with different bit patterns. Distinct values of NaN are 
only distinguishable by use of theFloat.floatToRawIntBitsmethod. 

In all other cases, let s, e, and m be three values that can be computed from 
the argument: 



int s = ((bits >> 31) == 0) ? 1 : -1; int e = ((bits >> 23) & 0xff); int m = (e 
== 0) ? (bits & 0x7fffff) << 1 : (bits & 0x7fffff) | 0x800000; 

Then the floating-point result equals the value of the mathematical expression 
sm2e-150. 

Note that this method may not be able to return afloatNaN with exactly same bit 
pattern as theintargument. IEEE 754 distinguishes between two kinds of NaNs, 
quiet NaNs and signaling NaNs. The differences between the two kinds of NaN are 
generally not visible in Java. Arithmetic operations on signaling NaNs turn 
them into quiet NaNs with a different, but often similar, bit pattern. However, 
on some processors merely copying a signaling NaN also performs that 
conversion. In particular, copying a signaling NaN to return it to the calling 
method may perform this conversion. SointBitsToFloatmay not be able to return 
afloatwith a signaling NaN bit pattern. Consequently, for 
someintvalues,floatToRawIntBits(intBitsToFloat(start))may not equalstart. 
Moreover, which particular bit patterns represent signaling NaNs is platform 
dependent; although all NaN bit patterns, quiet or signaling, must be in the 
NaN range identified above. 


    bits - an integer. 

    Returns: the {@code float} floating-point value with the same bit pattern. 

*java.lang.Float.intValue()*

public int intValue()

Returns the value of thisFloatas anint(by casting to typeint). 



    Returns: the {@code float} value represented by this object converted to type {@code 
             int} 

*java.lang.Float.isInfinite()*

public boolean isInfinite()

Returnstrueif thisFloatvalue is infinitely large in magnitude,falseotherwise. 



    Returns: {@code true} if the value represented by this object is positive infinity or 
             negative infinity; {@code false} otherwise. 

*java.lang.Float.isInfinite(float)*

public static boolean isInfinite(float v)

Returnstrueif the specified number is infinitely large in 
magnitude,falseotherwise. 


    v - the value to be tested. 

    Returns: {@code true} if the argument is positive infinity or negative infinity; {@code 
             false} otherwise. 

*java.lang.Float.isNaN()*

public boolean isNaN()

Returnstrueif thisFloatvalue is a Not-a-Number (NaN),falseotherwise. 



    Returns: {@code true} if the value represented by this object is NaN; {@code false} 
             otherwise. 

*java.lang.Float.isNaN(float)*

public static boolean isNaN(float v)

Returnstrueif the specified number is a Not-a-Number (NaN) 
value,falseotherwise. 


    v - the value to be tested. 

    Returns: {@code true} if the argument is NaN; {@code false} otherwise. 

*java.lang.Float.longValue()*

public long longValue()

Returns value of thisFloatas along(by casting to typelong). 



    Returns: the {@code float} value represented by this object converted to type {@code 
             long} 

*java.lang.Float.parseFloat(String)*

public static float parseFloat(java.lang.String s)
  throws |java.lang.NumberFormatException|
         
Returns a newfloatinitialized to the value represented by the specifiedString, 
as performed by thevalueOfmethod of classFloat. 


    s - the string to be parsed. 

    Returns: the {@code float} value represented by the string argument. 

*java.lang.Float.shortValue()*

public short shortValue()

Returns the value of thisFloatas ashort(by casting to ashort). 



    Returns: the {@code float} value represented by this object converted to type {@code 
             short} 

*java.lang.Float.toHexString(float)*

public static |java.lang.String| toHexString(float f)

Returns a hexadecimal string representation of thefloatargument. All characters 
mentioned below are ASCII characters. 

If the argument is NaN, the result is the string "NaN". Otherwise, the result 
is a string that represents the sign and magnitude (absolute value) of the 
argument. If the sign is negative, the first character of the result is '-' 
('u002D'); if the sign is positive, no sign character appears in the result. As 
for the magnitude m: 

If m is infinity, it is represented by the string"Infinity"; thus, positive 
infinity produces the result"Infinity"and negative infinity produces the 
result"-Infinity". 

If m is zero, it is represented by the string"0x0.0p0"; thus, negative zero 
produces the result"-0x0.0p0"and positive zero produces the result"0x0.0p0". 

If m is afloatvalue with a normalized representation, substrings are used to 
represent the significand and exponent fields. The significand is represented 
by the characters"0x1."followed by a lowercase hexadecimal representation of 
the rest of the significand as a fraction. Trailing zeros in the hexadecimal 
representation are removed unless all the digits are zero, in which case a 
single zero is used. Next, the exponent is represented by"p"followed by a 
decimal string of the unbiased exponent as if produced by a call to 
Integer.toString(|java.lang.Integer|) on the exponent value. 

If m is afloatvalue with a subnormal representation, the significand is 
represented by the characters"0x0."followed by a hexadecimal representation of 
the rest of the significand as a fraction. Trailing zeros in the hexadecimal 
representation are removed. Next, the exponent is represented by"p-126". Note 
that there must be at least one nonzero digit in a subnormal significand. 





Examples Floating-point ValueHexadecimal String 1.0 0x1.0p0 -1.0 -0x1.0p0 2.0 
0x1.0p1 3.0 0x1.8p1 0.5 0x1.0p-1 0.25 0x1.0p-2 Float.MAX_VALUE 0x1.fffffep127 
Minimum Normal Value 0x1.0p-126 Maximum Subnormal Value 0x0.fffffep-126 
Float.MIN_VALUE 0x0.000002p-126 


    f - the {@code float} to be converted. 

    Returns: a hex string representation of the argument. 

*java.lang.Float.toString()*

public |java.lang.String| toString()

Returns a string representation of thisFloatobject. The primitivefloatvalue 
represented by this object is converted to aStringexactly as if by the 
methodtoStringof one argument. 



    Returns: a {@code String} representation of this object. 

*java.lang.Float.toString(float)*

public static |java.lang.String| toString(float f)

Returns a string representation of thefloatargument. All characters mentioned 
below are ASCII characters. 

If the argument is NaN, the result is the string "NaN". Otherwise, the result 
is a string that represents the sign and magnitude (absolute value) of the 
argument. If the sign is negative, the first character of the result is '-' 
('u002D'); if the sign is positive, no sign character appears in the result. As 
for the magnitude m: 

If m is infinity, it is represented by the characters"Infinity"; thus, positive 
infinity produces the result"Infinity"and negative infinity produces the 
result"-Infinity". If m is zero, it is represented by the characters"0.0"; 
thus, negative zero produces the result"-0.0"and positive zero produces the 
result"0.0". If m is greater than or equal to 10-3 but less than 107, then it 
is represented as the integer part of m, in decimal form with no leading 
zeroes, followed by '.' ('u002E'), followed by one or more decimal digits 
representing the fractional part of m. If m is less than 10-3 or greater than 
or equal to 107, then it is represented in so-called "computerized scientific 
notation." Let n be the unique integer such that 10n m<10n+1; then let a be the 
mathematically exact quotient of m and 10n so that 1 a<10. The magnitude is 
then represented as the integer part of a, as a single decimal digit, followed 
by '.' ('u002E'), followed by decimal digits representing the fractional part 
of a, followed by the letter 'E' ('u0045'), followed by a representation of n 
as a decimal integer, as produced by the method (|java.lang.Integer|) . 



How many digits must be printed for the fractional part of m or a? There must 
be at least one digit to represent the fractional part, and beyond that as 
many, but only as many, more digits as are needed to uniquely distinguish the 
argument value from adjacent values of typefloat. That is, suppose that x is 
the exact mathematical value represented by the decimal representation produced 
by this method for a finite nonzero argument f. Then f must be thefloatvalue 
nearest to x; or, if twofloatvalues are equally close to x, then f must be one 
of them and the least significant bit of the significand of f must be0. 

To create localized string representations of a floating-point value, use 
subclasses of (|java.text.NumberFormat|) . 


    f - the float to be converted. 

    Returns: a string representation of the argument. 

*java.lang.Float.valueOf(float)*

public static |java.lang.Float| valueOf(float f)

Returns aFloatinstance representing the specifiedfloatvalue. If a 
newFloatinstance is not required, this method should generally be used in 
preference to the constructor (|java.lang.Float|) , as this method is likely to 
yield significantly better space and time performance by caching frequently 
requested values. 


    f - a float value. 

    Returns: a {@code Float} instance representing {@code f}. 

*java.lang.Float.valueOf(String)*

public static |java.lang.Float| valueOf(java.lang.String s)
  throws |java.lang.NumberFormatException|
         
Returns aFloatobject holding thefloatvalue represented by the argument strings. 

Ifsisnull, then aNullPointerExceptionis thrown. 

Leading and trailing whitespace characters insare ignored. Whitespace is 
removed as if by the (|java.lang.String|) method; that is, both ASCII space and 
control characters are removed. The rest ofsshould constitute a FloatValue as 
described by the lexical syntax rules: 



FloatValue: SignoptNaNSignoptInfinitySignopt FloatingPointLiteral Signopt 
HexFloatingPointLiteral SignedInteger 



HexFloatingPointLiteral: HexSignificand BinaryExponent FloatTypeSuffixopt 



HexSignificand: HexNumeral HexNumeral.0xHexDigitsopt . HexDigits 0X 
HexDigitsopt .HexDigits 



BinaryExponent: BinaryExponentIndicator SignedInteger 



BinaryExponentIndicator: pP 



where Sign, FloatingPointLiteral, HexNumeral, HexDigits, SignedInteger and 
FloatTypeSuffix are as defined in the lexical structure sections of The Java 
Language Specification, except that underscores are not accepted between 
digits. Ifsdoes not have the form of a FloatValue, then 
aNumberFormatExceptionis thrown. Otherwise,sis regarded as representing an 
exact decimal value in the usual "computerized scientific notation" or as an 
exact hexadecimal value; this exact numerical value is then conceptually 
converted to an "infinitely precise" binary value that is then rounded to 
typefloatby the usual round-to-nearest rule of IEEE 754 floating-point 
arithmetic, which includes preserving the sign of a zero value. 

Note that the round-to-nearest rule also implies overflow and underflow 
behaviour; if the exact value ofsis large enough in magnitude (greater than or 
equal to ( (|java.lang.Float|) + ulp(MAX_VALUE)(|java.lang.Math|) /2), rounding 
tofloatwill result in an infinity and if the exact value ofsis small enough in 
magnitude (less than or equal to (|java.lang.Float|) /2), rounding to float 
will result in a zero. 

Finally, after rounding aFloatobject representing thisfloatvalue is returned. 

To interpret localized string representations of a floating-point value, use 
subclasses of (|java.text.NumberFormat|) . 

Note that trailing format specifiers, specifiers that determine the type of a 
floating-point literal (1.0fis afloatvalue;1.0dis adoublevalue), do not 
influence the results of this method. In other words, the numerical value of 
the input string is converted directly to the target floating-point type. In 
general, the two-step sequence of conversions, string todoublefollowed 
bydoubletofloat, is not equivalent to converting a string directly tofloat. For 
example, if first converted to an intermediatedoubleand then tofloat, the 
string"1.00000017881393421514957253748434595763683319091796875001d" results in 
thefloatvalue1.0000002f; if the string is converted directly tofloat, 
1.0000001f results. 

To avoid calling this method on an invalid string and having 
aNumberFormatExceptionbe thrown, the documentation for 
Double.valueOf(|java.lang.Double|) lists a regular expression which can be used 
to screen the input. 


    s - the string to be parsed. 

    Returns: a {@code Float} object holding the value represented by the {@code String} 
             argument. 


