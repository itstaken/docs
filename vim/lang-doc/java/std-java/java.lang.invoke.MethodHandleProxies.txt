*java.lang.invoke.MethodHandleProxies* *MethodHandleProxies* This class consists

public class MethodHandleProxies
  extends    |java.lang.Object|

|java.lang.invoke.MethodHandleProxies_Description|
|java.lang.invoke.MethodHandleProxies_Fields|
|java.lang.invoke.MethodHandleProxies_Constructors|
|java.lang.invoke.MethodHandleProxies_Methods|

================================================================================

*java.lang.invoke.MethodHandleProxies_Methods*
|java.lang.invoke.MethodHandleProxies.asInterfaceInstance(Class<T>,MethodHandle)|
|java.lang.invoke.MethodHandleProxies.isWrapperInstance(Object)|Determines if t
|java.lang.invoke.MethodHandleProxies.wrapperInstanceTarget(Object)|Produces or
|java.lang.invoke.MethodHandleProxies.wrapperInstanceType(Object)|Recovers the 

*java.lang.invoke.MethodHandleProxies_Description*

This class consists exclusively of static methods that help adapt method 
handles to other JVM types, such as interfaces. 



*java.lang.invoke.MethodHandleProxies.asInterfaceInstance(Class<T>,MethodHandle)*

public static |T| asInterfaceInstance(
  java.lang.Class<T> intfc,
  java.lang.invoke.MethodHandle target)

Produces an instance of the given single-method interface which redirects its 
calls to the given method handle. 

A single-method interface is an interface which declares a uniquely named 
method. When determining the uniquely named method of a single-method 
interface, the publicObjectmethods (toString,equals,hashCode) are disregarded. 
For example, (|java.util.Comparator|) is a single-method interface, even though 
it re-declares theObject.equalsmethod. 

The interface must be public. No additional access checks are performed. 

The resulting instance of the required type will respond to invocation of the 
type's uniquely named method by calling the given target on the incoming 
arguments, and returning or throwing whatever the target returns or throws. The 
invocation will be as if bytarget.invoke. The target's type will be checked 
before the instance is created, as if by a call toasType, which may result in 
aWrongMethodTypeException. 

The uniquely named method is allowed to be multiply declared, with distinct 
type descriptors. (E.g., it can be overloaded, or can possess bridge methods.) 
All such declarations are connected directly to the target method handle. 
Argument and return types are adjusted byasTypefor each individual declaration. 

The wrapper instance will implement the requested interface and its 
super-types, but no other single-method interfaces. This means that the 
instance will not unexpectedly pass aninstanceoftest for any unrequested type. 

Implementation Note: Therefore, each instance must implement a unique 
single-method interface. Implementations may not bundle together multiple 
single-method interfaces onto single implementation classes in the style of 
(|java.awt.AWTEventMulticaster|) . 

The method handle may throw an undeclared exception, which means any checked 
exception (or other checked throwable) not declared by the requested type's 
single abstract method. If this happens, the throwable will be wrapped in an 
instance of 
UndeclaredThrowableException(|java.lang.reflect.UndeclaredThrowableException|) 
and thrown in that wrapped form. 

Like Integer.valueOf(|java.lang.Integer|) ,asInterfaceInstanceis a factory 
method whose results are defined by their behavior. It is not guaranteed to 
return a new instance for every call. 

Because of the possibility of bridge methods(|java.lang.reflect.Method|) and 
other corner cases, the interface may also have several abstract methods with 
the same name but having distinct descriptors (types of returns and 
parameters). In this case, all the methods are bound in common to the one given 
target. The type check and effectiveasTypeconversion is applied to each method 
type descriptor, and all abstract methods are bound to the target in common. 
Beyond this type check, no further checks are made to determine that the 
abstract methods are related in any way. 

Future versions of this API may accept additional types, such as abstract 
classes with single abstract methods. Future versions of this API may also 
equip wrapper instances with one or more additional public "marker" interfaces. 


    target - the method handle to invoke from the wrapper 
    intfc - the desired type of the wrapper, a single-method interface 

    Returns: a correctly-typed wrapper for the given target 

*java.lang.invoke.MethodHandleProxies.isWrapperInstance(Object)*

public static boolean isWrapperInstance(java.lang.Object x)

Determines if the given object was produced by a call to 
asInterfaceInstance(|java.lang.invoke.MethodHandleProxies|) . 


    x - any reference 

    Returns: true if the reference is not null and points to an object produced by {@code 
             asInterfaceInstance} 

*java.lang.invoke.MethodHandleProxies.wrapperInstanceTarget(Object)*

public static |java.lang.invoke.MethodHandle| wrapperInstanceTarget(java.lang.Object x)

Produces or recovers a target method handle which is behaviorally equivalent to 
the unique method of this wrapper instance. The objectxmust have been produced 
by a call to asInterfaceInstance(|java.lang.invoke.MethodHandleProxies|) . This 
requirement may be tested via 
isWrapperInstance(|java.lang.invoke.MethodHandleProxies|) . 


    x - any reference 

    Returns: a method handle implementing the unique method 

*java.lang.invoke.MethodHandleProxies.wrapperInstanceType(Object)*

public static |java.lang.Class|<?> wrapperInstanceType(java.lang.Object x)

Recovers the unique single-method interface type for which this wrapper 
instance was created. The objectxmust have been produced by a call to 
asInterfaceInstance(|java.lang.invoke.MethodHandleProxies|) . This requirement 
may be tested via isWrapperInstance(|java.lang.invoke.MethodHandleProxies|) . 


    x - any reference 

    Returns: the single-method interface type for which the wrapper was created 


