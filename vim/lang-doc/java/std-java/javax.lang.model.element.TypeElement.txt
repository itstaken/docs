*javax.lang.model.element.TypeElement* *TypeElement* Represents a class or inter

public interface interface TypeElement

  implements |javax.lang.model.element.Element|
             |javax.lang.model.element.Parameterizable|
             |javax.lang.model.element.QualifiedNameable|

|javax.lang.model.element.TypeElement_Description|
|javax.lang.model.element.TypeElement_Fields|
|javax.lang.model.element.TypeElement_Constructors|
|javax.lang.model.element.TypeElement_Methods|

================================================================================

*javax.lang.model.element.TypeElement_Methods*
|javax.lang.model.element.TypeElement.getEnclosedElements()|
|javax.lang.model.element.TypeElement.getEnclosingElement()|Returns the package
|javax.lang.model.element.TypeElement.getInterfaces()|Returns the interface typ
|javax.lang.model.element.TypeElement.getNestingKind()|Returns the nesting kind
|javax.lang.model.element.TypeElement.getQualifiedName()|Returns the fully qual
|javax.lang.model.element.TypeElement.getSimpleName()|Returns the simple name o
|javax.lang.model.element.TypeElement.getSuperclass()|Returns the direct superc
|javax.lang.model.element.TypeElement.getTypeParameters()|Returns the formal ty

*javax.lang.model.element.TypeElement_Description*

Represents a class or interface program element. Provides access to information 
about the type and its members. Note that an enum type is a kind of class and 
an annotation type is a kind of interface. 

While aTypeElementrepresents a class or interface element, a 
(|javax.lang.model.type.DeclaredType|) represents a class or interface type, 
the latter being a use (or invocation) of the former. The distinction is most 
apparent with generic types, for which a single element can define a whole 
family of types. For example, the elementjava.util.Setcorresponds to the 
parameterized typesjava.util.Setandjava.util.Set(and many others), and to the 
raw typejava.util.Set. 

Each method of this interface that returns a list of elements will return them 
in the order that is natural for the underlying source of program information. 
For example, if the underlying source of information is Java source code, then 
the elements will be returned in source code order. 



*javax.lang.model.element.TypeElement.getEnclosedElements()*

public |java.util.List|<? extends javax.lang.model.element.Element> getEnclosedElements()

Note that as a particular instance of the general accuracy 
requirements(|javax.lang.model.element|) and the ordering behavior required of 
this interface, the list of enclosed elements will be returned in the natural 
order for the originating source of information about the type. For example, if 
the information about the type is originating from a source file, the elements 
will be returned in source code order. (However, in that case the the ordering 
of synthesized elements, such as a default constructor, is not specified.) 



    Returns: the enclosed elements in proper order, or an empty list if none 

*javax.lang.model.element.TypeElement.getEnclosingElement()*

public |javax.lang.model.element.Element| getEnclosingElement()

Returns the package of a top-level type and returns the immediately lexically 
enclosing element for a nested(|javax.lang.model.element.NestingKind|) type. 



    Returns: the package of a top-level type, the immediately lexically enclosing element 
             for a nested type 

*javax.lang.model.element.TypeElement.getInterfaces()*

public |java.util.List|<? extends javax.lang.model.type.TypeMirror> getInterfaces()

Returns the interface types directly implemented by this class or extended by 
this interface. 



    Returns: the interface types directly implemented by this class or extended by this 
             interface, or an empty list if there are none 

*javax.lang.model.element.TypeElement.getNestingKind()*

public |javax.lang.model.element.NestingKind| getNestingKind()

Returns the nesting kind of this type element. 



    Returns: the nesting kind of this type element 

*javax.lang.model.element.TypeElement.getQualifiedName()*

public |javax.lang.model.element.Name| getQualifiedName()

Returns the fully qualified name of this type element. More precisely, it 
returns the canonical name. For local and anonymous classes, which do not have 
canonical names, an empty name is returned. 

The name of a generic type does not include any reference to its formal type 
parameters. For example, the fully qualified name of the 
interfacejava.util.Setis "java.util.Set". Nested types use "." as a separator, 
as in "java.util.Map.Entry". 



    Returns: the fully qualified name of this class or interface, or an empty name if none 

*javax.lang.model.element.TypeElement.getSimpleName()*

public |javax.lang.model.element.Name| getSimpleName()

Returns the simple name of this type element. 

For an anonymous class, an empty name is returned. 



    Returns: the simple name of this class or interface, an empty name for an anonymous 
             class 

*javax.lang.model.element.TypeElement.getSuperclass()*

public |javax.lang.model.type.TypeMirror| getSuperclass()

Returns the direct superclass of this type element. If this type element 
represents an interface or the classjava.lang.Object, then a 
(|javax.lang.model.type.NoType|) with kind 
NONE(|javax.lang.model.type.TypeKind|) is returned. 



    Returns: the direct superclass, or a {@code NoType} if there is none 

*javax.lang.model.element.TypeElement.getTypeParameters()*

public |java.util.List|<? extends javax.lang.model.element.TypeParameterElement> getTypeParameters()

Returns the formal type parameters of this type element in declaration order. 



    Returns: the formal type parameters, or an empty list if there are none 


