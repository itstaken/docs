*java.util.concurrent.TransferQueue* *TransferQueue* ABlockingQueuein which prod

public interface interface TransferQueue<E>

  implements |java.util.concurrent.BlockingQueue|

|java.util.concurrent.TransferQueue_Description|
|java.util.concurrent.TransferQueue_Fields|
|java.util.concurrent.TransferQueue_Constructors|
|java.util.concurrent.TransferQueue_Methods|

================================================================================

*java.util.concurrent.TransferQueue_Methods*
|java.util.concurrent.TransferQueue.getWaitingConsumerCount()|Returns an estima
|java.util.concurrent.TransferQueue.hasWaitingConsumer()|Returnstrueif there is
|java.util.concurrent.TransferQueue.transfer(E)|Transfers the element to a cons
|java.util.concurrent.TransferQueue.tryTransfer(E)|Transfers the element to a w
|java.util.concurrent.TransferQueue.tryTransfer(E,long,TimeUnit)|Transfers the 

*java.util.concurrent.TransferQueue_Description*

A (|java.util.concurrent.BlockingQueue|) in which producers may wait for 
consumers to receive elements. ATransferQueuemay be useful for example in 
message passing applications in which producers sometimes (using method 
(|java.util.concurrent.TransferQueue|) ) await receipt of elements by consumers 
invokingtakeorpoll, while at other times enqueue elements (via methodput) 
without waiting for receipt. Non-blocking(|java.util.concurrent.TransferQueue|) 
and time-out(|java.util.concurrent.TransferQueue|) versions oftryTransferare 
also available. ATransferQueuemay also be queried, via 
(|java.util.concurrent.TransferQueue|) , whether there are any threads waiting 
for items, which is a converse analogy to apeekoperation. 

Like other blocking queues, aTransferQueuemay be capacity bounded. If so, an 
attempted transfer operation may initially block waiting for available space, 
and/or subsequently block waiting for reception by a consumer. Note that in a 
queue with zero capacity, such as (|java.util.concurrent.SynchronousQueue|) 
,putandtransferare effectively synonymous. 

This interface is a member of the <a 
href="/../technotes/guides/collections/index.html"> Java Collections Framework. 



*java.util.concurrent.TransferQueue.getWaitingConsumerCount()*

public int getWaitingConsumerCount()

Returns an estimate of the number of consumers waiting to receive elements via 
(|java.util.concurrent.TransferQueue|) or timed 
poll(|java.util.concurrent.TransferQueue|) . The return value is an 
approximation of a momentary state of affairs, that may be inaccurate if 
consumers have completed or given up waiting. The value may be useful for 
monitoring and heuristics, but not for synchronization control. Implementations 
of this method are likely to be noticeably slower than those for 
(|java.util.concurrent.TransferQueue|) . 



    Returns: the number of consumers waiting to receive elements 

*java.util.concurrent.TransferQueue.hasWaitingConsumer()*

public boolean hasWaitingConsumer()

Returnstrueif there is at least one consumer waiting to receive an element via 
(|java.util.concurrent.TransferQueue|) or timed 
poll(|java.util.concurrent.TransferQueue|) . The return value represents a 
momentary state of affairs. 



    Returns: {@code true} if there is at least one waiting consumer 

*java.util.concurrent.TransferQueue.transfer(E)*

public void transfer(E e)
  throws |java.lang.InterruptedException|
         
Transfers the element to a consumer, waiting if necessary to do so. 

More precisely, transfers the specified element immediately if there exists a 
consumer already waiting to receive it (in 
(|java.util.concurrent.TransferQueue|) or timed 
poll(|java.util.concurrent.TransferQueue|) ), else waits until the element is 
received by a consumer. 


    e - the element to transfer 

*java.util.concurrent.TransferQueue.tryTransfer(E)*

public boolean tryTransfer(E e)

Transfers the element to a waiting consumer immediately, if possible. 

More precisely, transfers the specified element immediately if there exists a 
consumer already waiting to receive it (in 
(|java.util.concurrent.TransferQueue|) or timed 
poll(|java.util.concurrent.TransferQueue|) ), otherwise returningfalsewithout 
enqueuing the element. 


    e - the element to transfer 

    Returns: {@code true} if the element was transferred, else {@code false} 

*java.util.concurrent.TransferQueue.tryTransfer(E,long,TimeUnit)*

public boolean tryTransfer(
  E e,
  long timeout,
  java.util.concurrent.TimeUnit unit)
  throws |java.lang.InterruptedException|
         
Transfers the element to a consumer if it is possible to do so before the 
timeout elapses. 

More precisely, transfers the specified element immediately if there exists a 
consumer already waiting to receive it (in 
(|java.util.concurrent.TransferQueue|) or timed 
poll(|java.util.concurrent.TransferQueue|) ), else waits until the element is 
received by a consumer, returningfalseif the specified wait time elapses before 
the element can be transferred. 


    e - the element to transfer 
    timeout - how long to wait before giving up, in units of {@code unit} 
    unit - a {@code TimeUnit} determining how to interpret the {@code timeout} parameter 

    Returns: {@code true} if successful, or {@code false} if the specified waiting time 
             elapses before completion, in which case the element is not left 
             enqueued 


