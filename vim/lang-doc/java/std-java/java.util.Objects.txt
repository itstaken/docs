*java.util.Objects* *Objects* This class consists ofstaticutility methods for op

public final class Objects
  extends    |java.lang.Object|

|java.util.Objects_Description|
|java.util.Objects_Fields|
|java.util.Objects_Constructors|
|java.util.Objects_Methods|

================================================================================

*java.util.Objects_Methods*
|java.util.Objects.compare(T,T,Comparator<?superT>)|Returns 0 if the arguments 
|java.util.Objects.deepEquals(Object,Object)|Returnstrueif the arguments are de
|java.util.Objects.equals(Object,Object)|Returnstrueif the arguments are equal 
|java.util.Objects.hash(Object...)|Generates a hash code for a sequence of inpu
|java.util.Objects.hashCode(Object)|Returns the hash code of a non-nullargument
|java.util.Objects.requireNonNull(T)|Checks that the specified object reference
|java.util.Objects.requireNonNull(T,String)|Checks that the specified object re
|java.util.Objects.toString(Object)|Returns the result of callingtoStringfor a 
|java.util.Objects.toString(Object,String)|Returns the result of callingtoStrin

*java.util.Objects_Description*

This class consists ofstaticutility methods for operating on objects. These 
utilities includenull-safe ornull-tolerant methods for computing the hash code 
of an object, returning a string for an object, and comparing two objects. 



*java.util.Objects.compare(T,T,Comparator<?superT>)*

public static int compare(
  T a,
  T b,
  java.util.Comparator<? super T> c)

Returns 0 if the arguments are identical andc.compare(a, b)otherwise. 
Consequently, if both arguments arenull0 is returned. 

Note that if one of the arguments isnull, aNullPointerExceptionmay or may not 
be thrown depending on what ordering policy, if any, the 
Comparator(|java.util.Comparator|) chooses to have fornullvalues. 


    a - an object 
    b - an object to be compared with {@code a} 
    c - the {@code Comparator} to compare the first two arguments 

    Returns: 0 if the arguments are identical and {@code c.compare(a, b)} otherwise. 

*java.util.Objects.deepEquals(Object,Object)*

public static boolean deepEquals(
  java.lang.Object a,
  java.lang.Object b)

Returnstrueif the arguments are deeply equal to each other andfalseotherwise. 

Twonullvalues are deeply equal. If both arguments are arrays, the algorithm in 
Arrays.deepEquals(|java.util.Arrays|) is used to determine equality. Otherwise, 
equality is determined by using the equals(|java.lang.Object|) method of the 
first argument. 


    a - an object 
    b - an object to be compared with {@code a} for deep equality 

    Returns: {@code true} if the arguments are deeply equal to each other and {@code false} 
             otherwise 

*java.util.Objects.equals(Object,Object)*

public static boolean equals(
  java.lang.Object a,
  java.lang.Object b)

Returnstrueif the arguments are equal to each other andfalseotherwise. 
Consequently, if both arguments arenull,trueis returned and if exactly one 
argument isnull,falseis returned. Otherwise, equality is determined by using 
the equals(|java.lang.Object|) method of the first argument. 


    a - an object 
    b - an object to be compared with {@code a} for equality 

    Returns: {@code true} if the arguments are equal to each other and {@code false} 
             otherwise 

*java.util.Objects.hash(Object...)*

public static int hash(java.lang.Object[] values)

Generates a hash code for a sequence of input values. The hash code is 
generated as if all the input values were placed into an array, and that array 
were hashed by calling (|java.util.Arrays|) . 

This method is useful for implementing (|java.lang.Object|) on objects 
containing multiple fields. For example, if an object that has three 
fields,x,y, andz, one could write: 



Override public int hashCode() { return Objects.hash(x, y, z); } 

Warning: When a single object reference is supplied, the returned value does 
not equal the hash code of that object reference. This value can be computed by 
calling (|java.util.Objects|) . 


    values - the values to be hashed 

    Returns: a hash value of the sequence of input values 

*java.util.Objects.hashCode(Object)*

public static int hashCode(java.lang.Object o)

Returns the hash code of a non-nullargument and 0 for anullargument. 


    o - an object 

    Returns: the hash code of a non-{@code null} argument and 0 for a {@code null} argument 

*java.util.Objects.requireNonNull(T)*

public static |T| requireNonNull(T obj)

Checks that the specified object reference is notnull. This method is designed 
primarily for doing parameter validation in methods and constructors, as 
demonstrated below: 

public Foo(Bar bar) { this.bar = Objects.requireNonNull(bar); } 


    obj - the object reference to check for nullity 

    Returns: {@code obj} if not {@code null} 

*java.util.Objects.requireNonNull(T,String)*

public static |T| requireNonNull(
  T obj,
  java.lang.String message)

Checks that the specified object reference is notnulland throws a customized 
(|java.lang.NullPointerException|) if it is. This method is designed primarily 
for doing parameter validation in methods and constructors with multiple 
parameters, as demonstrated below: 

public Foo(Bar bar, Baz baz) { this.bar = Objects.requireNonNull(bar, "bar must 
not be null"); this.baz = Objects.requireNonNull(baz, "baz must not be null"); 
} 


    obj - the object reference to check for nullity 
    message - detail message to be used in the event that a {@code NullPointerException} is 
       thrown 

    Returns: {@code obj} if not {@code null} 

*java.util.Objects.toString(Object)*

public static |java.lang.String| toString(java.lang.Object o)

Returns the result of callingtoStringfor a non-nullargument and"null"for 
anullargument. 


    o - an object 

    Returns: the result of calling {@code toString} for a non-{@code null} argument and 
             {@code "null"} for a {@code null} argument 

*java.util.Objects.toString(Object,String)*

public static |java.lang.String| toString(
  java.lang.Object o,
  java.lang.String nullDefault)

Returns the result of callingtoStringon the first argument if the first 
argument is notnulland returns the second argument otherwise. 


    o - an object 
    nullDefault - string to return if the first argument is {@code null} 

    Returns: the result of calling {@code toString} on the first argument if it is not 
             {@code null} and the second argument otherwise. 


