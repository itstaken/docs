*java.lang.Integer* *Integer* TheIntegerclass wraps a value of the primitive typ

public final class Integer
  extends    |java.lang.Number|
  implements |java.lang.Comparable|

|java.lang.Integer_Description|
|java.lang.Integer_Fields|
|java.lang.Integer_Constructors|
|java.lang.Integer_Methods|

================================================================================

*java.lang.Integer_Fields*
|int_java.lang.Integer.MAX_VALUE|
|int_java.lang.Integer.MIN_VALUE|
|int_java.lang.Integer.SIZE|
|java.lang.Class<java.lang.Integer>_java.lang.Integer.TYPE|

*java.lang.Integer_Constructors*
|java.lang.Integer(int)|Constructs a newly allocatedIntegerobject that  represe
|java.lang.Integer(String)|Constructs a newly allocatedIntegerobject that  repr

*java.lang.Integer_Methods*
|java.lang.Integer.bitCount(int)|Returns the number of one-bits in the two's co
|java.lang.Integer.byteValue()|Returns the value of thisIntegeras abyte.
|java.lang.Integer.compare(int,int)|Compares twointvalues numerically.
|java.lang.Integer.compareTo(Integer)|Compares twoIntegerobjects numerically.
|java.lang.Integer.decode(String)|Decodes aStringinto anInteger.
|java.lang.Integer.doubleValue()|Returns the value of thisIntegeras adouble.
|java.lang.Integer.equals(Object)|Compares this object to the specified object.
|java.lang.Integer.floatValue()|Returns the value of thisIntegeras afloat.
|java.lang.Integer.getInteger(String)|Determines the integer value of the syste
|java.lang.Integer.getInteger(String,int)|Determines the integer value of the s
|java.lang.Integer.getInteger(String,Integer)|Returns the integer value of the 
|java.lang.Integer.hashCode()|Returns a hash code for thisInteger.
|java.lang.Integer.highestOneBit(int)|Returns anintvalue with at most a single 
|java.lang.Integer.intValue()|Returns the value of thisIntegeras anint.
|java.lang.Integer.longValue()|Returns the value of thisIntegeras along.
|java.lang.Integer.lowestOneBit(int)|Returns anintvalue with at most a single o
|java.lang.Integer.numberOfLeadingZeros(int)|Returns the number of zero bits pr
|java.lang.Integer.numberOfTrailingZeros(int)|Returns the number of zero bits f
|java.lang.Integer.parseInt(String)|Parses the string argument as a signed deci
|java.lang.Integer.parseInt(String,int)|Parses the string argument as a signed 
|java.lang.Integer.reverse(int)|Returns the value obtained by reversing the ord
|java.lang.Integer.reverseBytes(int)|Returns the value obtained by reversing th
|java.lang.Integer.rotateLeft(int,int)|Returns the value obtained by rotating t
|java.lang.Integer.rotateRight(int,int)|Returns the value obtained by rotating 
|java.lang.Integer.shortValue()|Returns the value of thisIntegeras ashort.
|java.lang.Integer.signum(int)|Returns the signum function of the specifiedintv
|java.lang.Integer.toBinaryString(int)|Returns a string representation of the i
|java.lang.Integer.toHexString(int)|Returns a string representation of the inte
|java.lang.Integer.toOctalString(int)|Returns a string representation of the in
|java.lang.Integer.toString()|Returns aStringobject representing thisInteger's 
|java.lang.Integer.toString(int)|Returns aStringobject representing the  specif
|java.lang.Integer.toString(int,int)|Returns a string representation of the fir
|java.lang.Integer.valueOf(int)|Returns anIntegerinstance representing the spec
|java.lang.Integer.valueOf(String)|Returns anIntegerobject holding the  value o
|java.lang.Integer.valueOf(String,int)|Returns anIntegerobject holding the valu

*java.lang.Integer_Description*

TheIntegerclass wraps a value of the primitive typeintin an object. An object 
of typeIntegercontains a single field whose type isint. 

In addition, this class provides several methods for converting anintto 
aStringand aStringto anint, as well as other constants and methods useful when 
dealing with anint. 

Implementation note: The implementations of the "bit twiddling" methods (such 
as highestOneBit(|java.lang.Integer|) and 
numberOfTrailingZeros(|java.lang.Integer|) ) are based on material from Henry 
S. Warren, Jr.'s Hacker's Delight, (Addison Wesley, 2002). 



*int_java.lang.Integer.MAX_VALUE*

A constant holding the maximum value anintcan have, 231-1. 


*int_java.lang.Integer.MIN_VALUE*

A constant holding the minimum value anintcan have, -231. 


*int_java.lang.Integer.SIZE*

The number of bits used to represent anintvalue in two's complement binary 
form. 


*java.lang.Class<java.lang.Integer>_java.lang.Integer.TYPE*

TheClassinstance representing the primitive typeint. 



*java.lang.Integer(int)*

public Integer(int value)

Constructs a newly allocatedIntegerobject that represents the 
specifiedintvalue. 

    value - the value to be represented by the {@code Integer} object. 

*java.lang.Integer(String)*

public Integer(java.lang.String s)
  throws |java.lang.NumberFormatException|
         
Constructs a newly allocatedIntegerobject that represents theintvalue indicated 
by theStringparameter. The string is converted to anintvalue in exactly the 
manner used by theparseIntmethod for radix 10. 

    s - the {@code String} to be converted to an {@code Integer}. 

*java.lang.Integer.bitCount(int)*

public static int bitCount(int i)

Returns the number of one-bits in the two's complement binary representation of 
the specifiedintvalue. This function is sometimes referred to as the population 
count. 



    Returns: the number of one-bits in the two's complement binary representation of the 
             specified {@code int} value. 

*java.lang.Integer.byteValue()*

public byte byteValue()

Returns the value of thisIntegeras abyte. 



*java.lang.Integer.compare(int,int)*

public static int compare(
  int x,
  int y)

Compares twointvalues numerically. The value returned is identical to what 
would be returned by: 

Integer.valueOf(x).compareTo(Integer.valueOf(y)) 


    x - the first {@code int} to compare 
    y - the second {@code int} to compare 

    Returns: the value {@code 0} if {@code x == y}; a value less than {@code 0} if {@code x 
             y} 

*java.lang.Integer.compareTo(Integer)*

public int compareTo(java.lang.Integer anotherInteger)

Compares twoIntegerobjects numerically. 


    anotherInteger - the {@code Integer} to be compared. 

    Returns: the value {@code 0} if this {@code Integer} is equal to the argument {@code 
             Integer}; a value less than {@code 0} if this {@code Integer} is 
             numerically less than the argument {@code Integer}; and a value 
             greater than {@code 0} if this {@code Integer} is numerically 
             greater than the argument {@code Integer} (signed comparison). 

*java.lang.Integer.decode(String)*

public static |java.lang.Integer| decode(java.lang.String nm)
  throws |java.lang.NumberFormatException|
         
Decodes aStringinto anInteger. Accepts decimal, hexadecimal, and octal numbers 
given by the following grammar: 



DecodableString: Signopt DecimalNumeral Signopt0xHexDigits Signopt0XHexDigits 
Signopt#HexDigits Signopt0OctalDigits 

Sign: -+ 

DecimalNumeral, HexDigits, and OctalDigits are as defined in section 3.10.1 of 
The Java Language Specification, except that underscores are not accepted 
between digits. 

The sequence of characters following an optional sign and/or radix specifier 
("0x", "0X", "#", or leading zero) is parsed as by theInteger.parseIntmethod 
with the indicated radix (10, 16, or 8). This sequence of characters must 
represent a positive value or a (|java.lang.NumberFormatException|) will be 
thrown. The result is negated if first character of the specifiedStringis the 
minus sign. No whitespace characters are permitted in theString. 


    nm - the {@code String} to decode. 

    Returns: an {@code Integer} object holding the {@code int} value represented by {@code 
             nm} 

*java.lang.Integer.doubleValue()*

public double doubleValue()

Returns the value of thisIntegeras adouble. 



*java.lang.Integer.equals(Object)*

public boolean equals(java.lang.Object obj)

Compares this object to the specified object. The result istrueif and only if 
the argument is notnulland is anIntegerobject that contains the sameintvalue as 
this object. 


    obj - the object to compare with. 

    Returns: {@code true} if the objects are the same; {@code false} otherwise. 

*java.lang.Integer.floatValue()*

public float floatValue()

Returns the value of thisIntegeras afloat. 



*java.lang.Integer.getInteger(String)*

public static |java.lang.Integer| getInteger(java.lang.String nm)

Determines the integer value of the system property with the specified name. 

The first argument is treated as the name of a system property. System 
properties are accessible through the (|java.lang.System|) method. The string 
value of this property is then interpreted as an integer value and 
anIntegerobject representing this value is returned. Details of possible 
numeric formats can be found with the definition ofgetProperty. 

If there is no property with the specified name, if the specified name is empty 
ornull, or if the property does not have the correct numeric format, thennullis 
returned. 

In other words, this method returns anIntegerobject equal to the value of: 

getInteger(nm, null) 


    nm - property name. 

    Returns: the {@code Integer} value of the property. 

*java.lang.Integer.getInteger(String,int)*

public static |java.lang.Integer| getInteger(
  java.lang.String nm,
  int val)

Determines the integer value of the system property with the specified name. 

The first argument is treated as the name of a system property. System 
properties are accessible through the (|java.lang.System|) method. The string 
value of this property is then interpreted as an integer value and 
anIntegerobject representing this value is returned. Details of possible 
numeric formats can be found with the definition ofgetProperty. 

The second argument is the default value. AnIntegerobject that represents the 
value of the second argument is returned if there is no property of the 
specified name, if the property does not have the correct numeric format, or if 
the specified name is empty ornull. 

In other words, this method returns anIntegerobject equal to the value of: 

getInteger(nm, new Integer(val)) 

but in practice it may be implemented in a manner such as: 



Integer result = getInteger(nm, null); return (result == null) ? new 
Integer(val) : result; 

to avoid the unnecessary allocation of anIntegerobject when the default value 
is not needed. 


    nm - property name. 
    val - default value. 

    Returns: the {@code Integer} value of the property. 

*java.lang.Integer.getInteger(String,Integer)*

public static |java.lang.Integer| getInteger(
  java.lang.String nm,
  java.lang.Integer val)

Returns the integer value of the system property with the specified name. The 
first argument is treated as the name of a system property. System properties 
are accessible through the (|java.lang.System|) method. The string value of 
this property is then interpreted as an integer value, as per 
theInteger.decodemethod, and anIntegerobject representing this value is 
returned. 

If the property value begins with the two ASCII characters0xor the ASCII 
character#, not followed by a minus sign, then the rest of it is parsed as a 
hexadecimal integer exactly as by the method (|java.lang.Integer|) with radix 
16. If the property value begins with the ASCII character0followed by another 
character, it is parsed as an octal integer exactly as by the method 
(|java.lang.Integer|) with radix 8. Otherwise, the property value is parsed as 
a decimal integer exactly as by the method (|java.lang.Integer|) with radix 10. 

The second argument is the default value. The default value is returned if 
there is no property of the specified name, if the property does not have the 
correct numeric format, or if the specified name is empty ornull. 


    nm - property name. 
    val - default value. 

    Returns: the {@code Integer} value of the property. 

*java.lang.Integer.hashCode()*

public int hashCode()

Returns a hash code for thisInteger. 



    Returns: a hash code value for this object, equal to the primitive {@code int} value 
             represented by this {@code Integer} object. 

*java.lang.Integer.highestOneBit(int)*

public static int highestOneBit(int i)

Returns anintvalue with at most a single one-bit, in the position of the 
highest-order ("leftmost") one-bit in the specifiedintvalue. Returns zero if 
the specified value has no one-bits in its two's complement binary 
representation, that is, if it is equal to zero. 



    Returns: an {@code int} value with a single one-bit, in the position of the 
             highest-order one-bit in the specified value, or zero if the 
             specified value is itself equal to zero. 

*java.lang.Integer.intValue()*

public int intValue()

Returns the value of thisIntegeras anint. 



*java.lang.Integer.longValue()*

public long longValue()

Returns the value of thisIntegeras along. 



*java.lang.Integer.lowestOneBit(int)*

public static int lowestOneBit(int i)

Returns anintvalue with at most a single one-bit, in the position of the 
lowest-order ("rightmost") one-bit in the specifiedintvalue. Returns zero if 
the specified value has no one-bits in its two's complement binary 
representation, that is, if it is equal to zero. 



    Returns: an {@code int} value with a single one-bit, in the position of the lowest-order 
             one-bit in the specified value, or zero if the specified value is 
             itself equal to zero. 

*java.lang.Integer.numberOfLeadingZeros(int)*

public static int numberOfLeadingZeros(int i)

Returns the number of zero bits preceding the highest-order ("leftmost") 
one-bit in the two's complement binary representation of the specifiedintvalue. 
Returns 32 if the specified value has no one-bits in its two's complement 
representation, in other words if it is equal to zero. 

Note that this method is closely related to the logarithm base 2. For all 
positiveintvalues x: 

floor(log2(x)) =31 - numberOfLeadingZeros(x)ceil(log2(x)) =32 - 
numberOfLeadingZeros(x - 1) 



    Returns: the number of zero bits preceding the highest-order ("leftmost") one-bit in the 
             two's complement binary representation of the specified {@code 
             int} value, or 32 if the value is equal to zero. 

*java.lang.Integer.numberOfTrailingZeros(int)*

public static int numberOfTrailingZeros(int i)

Returns the number of zero bits following the lowest-order ("rightmost") 
one-bit in the two's complement binary representation of the specifiedintvalue. 
Returns 32 if the specified value has no one-bits in its two's complement 
representation, in other words if it is equal to zero. 



    Returns: the number of zero bits following the lowest-order ("rightmost") one-bit in the 
             two's complement binary representation of the specified {@code 
             int} value, or 32 if the value is equal to zero. 

*java.lang.Integer.parseInt(String)*

public static int parseInt(java.lang.String s)
  throws |java.lang.NumberFormatException|
         
Parses the string argument as a signed decimal integer. The characters in the 
string must all be decimal digits, except that the first character may be an 
ASCII minus sign'-'('u002D') to indicate a negative value or an ASCII plus 
sign'+'('u002B') to indicate a positive value. The resulting integer value is 
returned, exactly as if the argument and the radix 10 were given as arguments 
to the (|java.lang.Integer|) method. 


    s - a {@code String} containing the {@code int} representation to be parsed 

    Returns: the integer value represented by the argument in decimal. 

*java.lang.Integer.parseInt(String,int)*

public static int parseInt(
  java.lang.String s,
  int radix)
  throws |java.lang.NumberFormatException|
         
Parses the string argument as a signed integer in the radix specified by the 
second argument. The characters in the string must all be digits of the 
specified radix (as determined by whether (|java.lang.Character|) returns a 
nonnegative value), except that the first character may be an ASCII minus 
sign'-'('u002D') to indicate a negative value or an ASCII plus sign'+'('u002B') 
to indicate a positive value. The resulting integer value is returned. 

An exception of typeNumberFormatExceptionis thrown if any of the following 
situations occurs: 

The first argument isnullor is a string of length zero. 

The radix is either smaller than (|java.lang.Character|) or larger than 
(|java.lang.Character|) . 

Any character of the string is not a digit of the specified radix, except that 
the first character may be a minus sign'-'('u002D') or plus sign'+'('u002B') 
provided that the string is longer than length 1. 

The value represented by the string is not a value of typeint. 

Examples: 

parseInt("0", 10) returns 0 parseInt("473", 10) returns 473 parseInt("+42", 10) 
returns 42 parseInt("-0", 10) returns 0 parseInt("-FF", 16) returns -255 
parseInt("1100110", 2) returns 102 parseInt("2147483647", 10) returns 
2147483647 parseInt("-2147483648", 10) returns -2147483648 
parseInt("2147483648", 10) throws a NumberFormatException parseInt("99", 8) 
throws a NumberFormatException parseInt("Kona", 10) throws a 
NumberFormatException parseInt("Kona", 27) returns 411787 


    s - the {@code String} containing the integer representation to be parsed 
    radix - the radix to be used while parsing {@code s}. 

    Returns: the integer represented by the string argument in the specified radix. 

*java.lang.Integer.reverse(int)*

public static int reverse(int i)

Returns the value obtained by reversing the order of the bits in the two's 
complement binary representation of the specifiedintvalue. 



    Returns: the value obtained by reversing order of the bits in the specified {@code int} 
             value. 

*java.lang.Integer.reverseBytes(int)*

public static int reverseBytes(int i)

Returns the value obtained by reversing the order of the bytes in the two's 
complement representation of the specifiedintvalue. 



    Returns: the value obtained by reversing the bytes in the specified {@code int} value. 

*java.lang.Integer.rotateLeft(int,int)*

public static int rotateLeft(
  int i,
  int distance)

Returns the value obtained by rotating the two's complement binary 
representation of the specifiedintvalue left by the specified number of bits. 
(Bits shifted out of the left hand, or high-order, side reenter on the right, 
or low-order.) 

Note that left rotation with a negative distance is equivalent to right 
rotation:rotateLeft(val, -distance) == rotateRight(val, distance). Note also 
that rotation by any multiple of 32 is a no-op, so all but the last five bits 
of the rotation distance can be ignored, even if the distance is 
negative:rotateLeft(val, distance) == rotateLeft(val, distance & 0x1F). 



    Returns: the value obtained by rotating the two's complement binary representation of 
             the specified {@code int} value left by the specified number of 
             bits. 

*java.lang.Integer.rotateRight(int,int)*

public static int rotateRight(
  int i,
  int distance)

Returns the value obtained by rotating the two's complement binary 
representation of the specifiedintvalue right by the specified number of bits. 
(Bits shifted out of the right hand, or low-order, side reenter on the left, or 
high-order.) 

Note that right rotation with a negative distance is equivalent to left 
rotation:rotateRight(val, -distance) == rotateLeft(val, distance). Note also 
that rotation by any multiple of 32 is a no-op, so all but the last five bits 
of the rotation distance can be ignored, even if the distance is 
negative:rotateRight(val, distance) == rotateRight(val, distance & 0x1F). 



    Returns: the value obtained by rotating the two's complement binary representation of 
             the specified {@code int} value right by the specified number of 
             bits. 

*java.lang.Integer.shortValue()*

public short shortValue()

Returns the value of thisIntegeras ashort. 



*java.lang.Integer.signum(int)*

public static int signum(int i)

Returns the signum function of the specifiedintvalue. (The return value is -1 
if the specified value is negative; 0 if the specified value is zero; and 1 if 
the specified value is positive.) 



    Returns: the signum function of the specified {@code int} value. 

*java.lang.Integer.toBinaryString(int)*

public static |java.lang.String| toBinaryString(int i)

Returns a string representation of the integer argument as an unsigned integer 
in base2. 

The unsigned integer value is the argument plus 232 if the argument is 
negative; otherwise it is equal to the argument. This value is converted to a 
string of ASCII digits in binary (base2) with no extra leading0s. If the 
unsigned magnitude is zero, it is represented by a single zero 
character'0'('u0030'); otherwise, the first character of the representation of 
the unsigned magnitude will not be the zero character. The 
characters'0'('u0030') and'1'('u0031') are used as binary digits. 


    i - an integer to be converted to a string. 

    Returns: the string representation of the unsigned integer value represented by the 
             argument in binary (base2). 

*java.lang.Integer.toHexString(int)*

public static |java.lang.String| toHexString(int i)

Returns a string representation of the integer argument as an unsigned integer 
in base16. 

The unsigned integer value is the argument plus 232 if the argument is 
negative; otherwise, it is equal to the argument. This value is converted to a 
string of ASCII digits in hexadecimal (base16) with no extra leading0s. If the 
unsigned magnitude is zero, it is represented by a single zero 
character'0'('u0030'); otherwise, the first character of the representation of 
the unsigned magnitude will not be the zero character. The following characters 
are used as hexadecimal digits: 

0123456789abcdef 

These are the characters 'u0030' through 'u0039' and 'u0061' through 'u0066'. 
If uppercase letters are desired, the (|java.lang.String|) method may be called 
on the result: 

Integer.toHexString(n).toUpperCase() 


    i - an integer to be converted to a string. 

    Returns: the string representation of the unsigned integer value represented by the 
             argument in hexadecimal (base16). 

*java.lang.Integer.toOctalString(int)*

public static |java.lang.String| toOctalString(int i)

Returns a string representation of the integer argument as an unsigned integer 
in base8. 

The unsigned integer value is the argument plus 232 if the argument is 
negative; otherwise, it is equal to the argument. This value is converted to a 
string of ASCII digits in octal (base8) with no extra leading0s. 

If the unsigned magnitude is zero, it is represented by a single zero 
character'0'('u0030'); otherwise, the first character of the representation of 
the unsigned magnitude will not be the zero character. The following characters 
are used as octal digits: 

01234567 

These are the characters 'u0030' through 'u0037'. 


    i - an integer to be converted to a string. 

    Returns: the string representation of the unsigned integer value represented by the 
             argument in octal (base8). 

*java.lang.Integer.toString()*

public |java.lang.String| toString()

Returns aStringobject representing thisInteger's value. The value is converted 
to signed decimal representation and returned as a string, exactly as if the 
integer value were given as an argument to the (|java.lang.Integer|) method. 



    Returns: a string representation of the value of this object in base10. 

*java.lang.Integer.toString(int)*

public static |java.lang.String| toString(int i)

Returns aStringobject representing the specified integer. The argument is 
converted to signed decimal representation and returned as a string, exactly as 
if the argument and radix 10 were given as arguments to the 
(|java.lang.Integer|) method. 


    i - an integer to be converted. 

    Returns: a string representation of the argument in base10. 

*java.lang.Integer.toString(int,int)*

public static |java.lang.String| toString(
  int i,
  int radix)

Returns a string representation of the first argument in the radix specified by 
the second argument. 

If the radix is smaller thanCharacter.MIN_RADIXor larger 
thanCharacter.MAX_RADIX, then the radix10is used instead. 

If the first argument is negative, the first element of the result is the ASCII 
minus character'-'('u002D'). If the first argument is not negative, no sign 
character appears in the result. 

The remaining characters of the result represent the magnitude of the first 
argument. If the magnitude is zero, it is represented by a single zero 
character'0'('u0030'); otherwise, the first character of the representation of 
the magnitude will not be the zero character. The following ASCII characters 
are used as digits: 

0123456789abcdefghijklmnopqrstuvwxyz 

These are 'u0030' through 'u0039' and 'u0061' through 'u007A'. Ifradixis N, 
then the first N of these characters are used as radix-N digits in the order 
shown. Thus, the digits for hexadecimal (radix 16) are0123456789abcdef. If 
uppercase letters are desired, the (|java.lang.String|) method may be called on 
the result: 

Integer.toString(n, 16).toUpperCase() 


    i - an integer to be converted to a string. 
    radix - the radix to use in the string representation. 

    Returns: a string representation of the argument in the specified radix. 

*java.lang.Integer.valueOf(int)*

public static |java.lang.Integer| valueOf(int i)

Returns anIntegerinstance representing the specifiedintvalue. If a 
newIntegerinstance is not required, this method should generally be used in 
preference to the constructor (|java.lang.Integer|) , as this method is likely 
to yield significantly better space and time performance by caching frequently 
requested values. 

This method will always cache values in the range -128 to 127, inclusive, and 
may cache other values outside of this range. 


    i - an {@code int} value. 

    Returns: an {@code Integer} instance representing {@code i}. 

*java.lang.Integer.valueOf(String)*

public static |java.lang.Integer| valueOf(java.lang.String s)
  throws |java.lang.NumberFormatException|
         
Returns anIntegerobject holding the value of the specifiedString. The argument 
is interpreted as representing a signed decimal integer, exactly as if the 
argument were given to the (|java.lang.Integer|) method. The result is 
anIntegerobject that represents the integer value specified by the string. 

In other words, this method returns anIntegerobject equal to the value of: 

new Integer(Integer.parseInt(s)) 


    s - the string to be parsed. 

    Returns: an {@code Integer} object holding the value represented by the string argument. 

*java.lang.Integer.valueOf(String,int)*

public static |java.lang.Integer| valueOf(
  java.lang.String s,
  int radix)
  throws |java.lang.NumberFormatException|
         
Returns anIntegerobject holding the value extracted from the 
specifiedStringwhen parsed with the radix given by the second argument. The 
first argument is interpreted as representing a signed integer in the radix 
specified by the second argument, exactly as if the arguments were given to the 
(|java.lang.Integer|) method. The result is anIntegerobject that represents the 
integer value specified by the string. 

In other words, this method returns anIntegerobject equal to the value of: 

new Integer(Integer.parseInt(s, radix)) 


    s - the string to be parsed. 
    radix - the radix to be used in interpreting {@code s} 

    Returns: an {@code Integer} object holding the value represented by the string argument 
             in the specified radix. 


