*java.nio.channels.MulticastChannel* *MulticastChannel* A network channel that s

public interface interface MulticastChannel

  implements |java.nio.channels.NetworkChannel|

|java.nio.channels.MulticastChannel_Description|
|java.nio.channels.MulticastChannel_Fields|
|java.nio.channels.MulticastChannel_Constructors|
|java.nio.channels.MulticastChannel_Methods|

================================================================================

*java.nio.channels.MulticastChannel_Methods*
|java.nio.channels.MulticastChannel.close()|Closes this channel.
|java.nio.channels.MulticastChannel.join(InetAddress,NetworkInterface)|Joins a 
|java.nio.channels.MulticastChannel.join(InetAddress,NetworkInterface,InetAddress)|

*java.nio.channels.MulticastChannel_Description*

A network channel that supports Internet Protocol (IP) multicasting. 

IP multicasting is the transmission of IP datagrams to members of a group that 
is zero or more hosts identified by a single destination address. 

In the case of a channel to an IPv4(|java.net.StandardProtocolFamily|) socket, 
the underlying operating system supports RFC2236: Internet Group Management 
Protocol, Version 2 (IGMPv2). It may optionally support source filtering as 
specified by RFC3376: Internet Group Management Protocol, Version 3 (IGMPv3). 
For channels to an IPv6(|java.net.StandardProtocolFamily|) socket, the 
equivalent standards are RFC2710: Multicast Listener Discovery (MLD) for IPv6 
and RFC3810: Multicast Listener Discovery Version 2 (MLDv2) for IPv6. 

The (|java.nio.channels.MulticastChannel|) method is used to join a group and 
receive all multicast datagrams sent to the group. A channel may join several 
multicast groups and may join the same group on several 
interfaces(|java.net.NetworkInterface|) . Membership is dropped by invoking the 
drop(|java.nio.channels.MembershipKey|) method on the returned 
(|java.nio.channels.MembershipKey|) . If the underlying platform supports 
source filtering then the block(|java.nio.channels.MembershipKey|) and 
unblock(|java.nio.channels.MembershipKey|) methods can be used to block or 
unblock multicast datagrams from particular source addresses. 

The (|java.nio.channels.MulticastChannel|) method is used to begin receiving 
datagrams sent to a group whose source address matches a given source address. 
This method throws (|java.lang.UnsupportedOperationException|) if the 
underlying platform does not support source filtering. Membership is cumulative 
and this method may be invoked again with the same group and interface to allow 
receiving datagrams from other source addresses. The method returns a 
(|java.nio.channels.MembershipKey|) that represents membership to receive 
datagrams from the given source address. Invoking the key's 
drop(|java.nio.channels.MembershipKey|) method drops membership so that 
datagrams from the source address can no longer be received. 

Platform dependencies 

The multicast implementation is intended to map directly to the native 
multicasting facility. Consequently, the following items should be considered 
when developing an application that receives IP multicast datagrams: 



The creation of the channel should specify the (|java.net.ProtocolFamily|) that 
corresponds to the address type of the multicast groups that the channel will 
join. There is no guarantee that a channel to a socket in one protocol family 
can join and receive multicast datagrams when the address of the multicast 
group corresponds to another protocol family. For example, it is implementation 
specific if a channel to an IPv6(|java.net.StandardProtocolFamily|) socket can 
join an IPv4(|java.net.StandardProtocolFamily|) multicast group and receive 
multicast datagrams sent to the group. 

The channel's socket should be bound to the wildcard(|java.net.InetAddress|) 
address. If the socket is bound to a specific address, rather than the wildcard 
address then it is implementation specific if multicast datagrams are received 
by the socket. 

The SO_REUSEADDR(|java.net.StandardSocketOptions|) option should be enabled 
prior to binding(|java.nio.channels.NetworkChannel|) the socket. This is 
required to allow multiple members of the group to bind to the same address. 



Usage Example: 

// join multicast group on this interface, and also use this // interface for 
outgoing multicast datagrams NetworkInterface ni = 
NetworkInterface.getByName("hme0"); 

DatagramChannel dc = DatagramChannel.open(StandardProtocolFamily.INET) 
.setOption(StandardSocketOptions.SO_REUSEADDR, true) .bind(new 
InetSocketAddress(5000)) .setOption(StandardSocketOptions.IP_MULTICAST_IF, ni); 

InetAddress group = InetAddress.getByName("225.4.5.6"); 

MembershipKey key = dc.join(group, ni); 



*java.nio.channels.MulticastChannel.close()*

public void close()
  throws |java.io.IOException|
         
Closes this channel. 

If the channel is a member of a multicast group then the membership is 
dropped(|java.nio.channels.MembershipKey|) . Upon return, the 
membership-key(|java.nio.channels.MembershipKey|) will be 
invalid(|java.nio.channels.MembershipKey|) . 

This method otherwise behaves exactly as specified by the 
(|java.nio.channels.Channel|) interface. 



*java.nio.channels.MulticastChannel.join(InetAddress,NetworkInterface)*

public |java.nio.channels.MembershipKey| join(
  java.net.InetAddress group,
  java.net.NetworkInterface interf)
  throws |java.io.IOException|
         
Joins a multicast group to begin receiving all datagrams sent to the group, 
returning a membership key. 

If this channel is currently a member of the group on the given interface to 
receive all datagrams then the membership key, representing that membership, is 
returned. Otherwise this channel joins the group and the resulting new 
membership key is returned. The resulting membership key is not 
source-specific(|java.nio.channels.MembershipKey|) . 

A multicast channel may join several multicast groups, including the same group 
on more than one interface. An implementation may impose a limit on the number 
of groups that may be joined at the same time. 


    group - The multicast address to join 
    interf - The network interface on which to join the group 

    Returns: The membership key 

*java.nio.channels.MulticastChannel.join(InetAddress,NetworkInterface,InetAddress)*

public |java.nio.channels.MembershipKey| join(
  java.net.InetAddress group,
  java.net.NetworkInterface interf,
  java.net.InetAddress source)
  throws |java.io.IOException|
         
Joins a multicast group to begin receiving datagrams sent to the group from a 
given source address. 

If this channel is currently a member of the group on the given interface to 
receive datagrams from the given source address then the membership key, 
representing that membership, is returned. Otherwise this channel joins the 
group and the resulting new membership key is returned. The resulting 
membership key is source-specific(|java.nio.channels.MembershipKey|) . 

Membership is cumulative and this method may be invoked again with the same 
group and interface to allow receiving datagrams sent by other source addresses 
to the group. 


    group - The multicast address to join 
    interf - The network interface on which to join the group 
    source - The source address 

    Returns: The membership key 


