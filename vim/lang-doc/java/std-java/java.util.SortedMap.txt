*java.util.SortedMap* *SortedMap* AMapthat further provides a total ordering on 

public interface interface SortedMap<K,V>

  implements |java.util.Map|

|java.util.SortedMap_Description|
|java.util.SortedMap_Fields|
|java.util.SortedMap_Constructors|
|java.util.SortedMap_Methods|

================================================================================

*java.util.SortedMap_Methods*
|java.util.SortedMap.comparator()|Returns the comparator used to order the keys
|java.util.SortedMap.entrySet()|Returns aSetview of the mappings contained in t
|java.util.SortedMap.firstKey()|Returns the first (lowest) key currently in thi
|java.util.SortedMap.headMap(K)|Returns a view of the portion of this map whose
|java.util.SortedMap.keySet()|Returns aSetview of the keys contained in this ma
|java.util.SortedMap.lastKey()|Returns the last (highest) key currently in this
|java.util.SortedMap.subMap(K,K)|Returns a view of the portion of this map whos
|java.util.SortedMap.tailMap(K)|Returns a view of the portion of this map whose
|java.util.SortedMap.values()|Returns aCollectionview of the values contained i

*java.util.SortedMap_Description*

A (|java.util.Map|) that further provides a total ordering on its keys. The map 
is ordered according to the natural ordering(|java.lang.Comparable|) of its 
keys, or by a (|java.util.Comparator|) typically provided at sorted map 
creation time. This order is reflected when iterating over the sorted map's 
collection views (returned by theentrySet,keySetandvaluesmethods). Several 
additional operations are provided to take advantage of the ordering. (This 
interface is the map analogue of (|java.util.SortedSet|) .) 

All keys inserted into a sorted map must implement theComparableinterface (or 
be accepted by the specified comparator). Furthermore, all such keys must be 
mutually comparable:k1.compareTo(k2)(orcomparator.compare(k1, k2)) must not 
throw aClassCastExceptionfor any keysk1andk2in the sorted map. Attempts to 
violate this restriction will cause the offending method or constructor 
invocation to throw aClassCastException. 

Note that the ordering maintained by a sorted map (whether or not an explicit 
comparator is provided) must be consistent with equals if the sorted map is to 
correctly implement theMapinterface. (See theComparableinterface 
orComparatorinterface for a precise definition of consistent with equals.) This 
is so because theMapinterface is defined in terms of theequalsoperation, but a 
sorted map performs all key comparisons using itscompareTo(orcompare) method, 
so two keys that are deemed equal by this method are, from the standpoint of 
the sorted map, equal. The behavior of a tree map is well-defined even if its 
ordering is inconsistent with equals; it just fails to obey the general 
contract of theMapinterface. 

All general-purpose sorted map implementation classes should provide four 
"standard" constructors. It is not possible to enforce this recommendation 
though as required constructors cannot be specified by interfaces. The expected 
"standard" constructors for all sorted map implementations are: 

A void (no arguments) constructor, which creates an empty sorted map sorted 
according to the natural ordering of its keys. A constructor with a single 
argument of typeComparator, which creates an empty sorted map sorted according 
to the specified comparator. A constructor with a single argument of typeMap, 
which creates a new map with the same key-value mappings as its argument, 
sorted according to the keys' natural ordering. A constructor with a single 
argument of typeSortedMap, which creates a new sorted map with the same 
key-value mappings and the same ordering as the input sorted map. 

Note: several methods return submaps with restricted key ranges. Such ranges 
are half-open, that is, they include their low endpoint but not their high 
endpoint (where applicable). If you need a closed range (which includes both 
endpoints), and the key type allows for calculation of the successor of a given 
key, merely request the subrange fromlowEndpointtosuccessor(highEndpoint). For 
example, suppose thatmis a map whose keys are strings. The following idiom 
obtains a view containing all of the key-value mappings inmwhose keys are 
betweenlowandhigh, inclusive: 

SortedMap<String, V> sub = m.subMap(low, high+"\0"); 

A similar technique can be used to generate an open range (which contains 
neither endpoint). The following idiom obtains a view containing all of the 
key-value mappings inmwhose keys are betweenlowandhigh, exclusive: 

SortedMap<String, V> sub = m.subMap(low+"\0", high); 

This interface is a member of the <a 
href="/../technotes/guides/collections/index.html"> Java Collections Framework. 



*java.util.SortedMap.comparator()*

public |java.util.Comparator|<? super K> comparator()

Returns the comparator used to order the keys in this map, ornullif this map 
uses the natural ordering(|java.lang.Comparable|) of its keys. 



    Returns: the comparator used to order the keys in this map, or {@code null} if this map 
             uses the natural ordering of its keys 

*java.util.SortedMap.entrySet()*

public |java.util.Set|<Entry<K,V>> entrySet()

Returns a (|java.util.Set|) view of the mappings contained in this map. The 
set's iterator returns the entries in ascending key order. The set is backed by 
the map, so changes to the map are reflected in the set, and vice-versa. If the 
map is modified while an iteration over the set is in progress (except through 
the iterator's ownremoveoperation, or through thesetValueoperation on a map 
entry returned by the iterator) the results of the iteration are undefined. The 
set supports element removal, which removes the corresponding mapping from the 
map, via theIterator.remove,Set.remove,removeAll,retainAllandclearoperations. 
It does not support theaddoraddAlloperations. 



    Returns: a set view of the mappings contained in this map, sorted in ascending key order 

*java.util.SortedMap.firstKey()*

public |K| firstKey()

Returns the first (lowest) key currently in this map. 



    Returns: the first (lowest) key currently in this map 

*java.util.SortedMap.headMap(K)*

public |java.util.SortedMap|<K,V> headMap(K toKey)

Returns a view of the portion of this map whose keys are strictly less 
thantoKey. The returned map is backed by this map, so changes in the returned 
map are reflected in this map, and vice-versa. The returned map supports all 
optional map operations that this map supports. 

The returned map will throw anIllegalArgumentExceptionon an attempt to insert a 
key outside its range. 


    toKey - high endpoint (exclusive) of the keys in the returned map 

    Returns: a view of the portion of this map whose keys are strictly less than {@code 
             toKey} 

*java.util.SortedMap.keySet()*

public |java.util.Set|<K> keySet()

Returns a (|java.util.Set|) view of the keys contained in this map. The set's 
iterator returns the keys in ascending order. The set is backed by the map, so 
changes to the map are reflected in the set, and vice-versa. If the map is 
modified while an iteration over the set is in progress (except through the 
iterator's ownremoveoperation), the results of the iteration are undefined. The 
set supports element removal, which removes the corresponding mapping from the 
map, via theIterator.remove,Set.remove,removeAll,retainAll, andclearoperations. 
It does not support theaddoraddAlloperations. 



    Returns: a set view of the keys contained in this map, sorted in ascending order 

*java.util.SortedMap.lastKey()*

public |K| lastKey()

Returns the last (highest) key currently in this map. 



    Returns: the last (highest) key currently in this map 

*java.util.SortedMap.subMap(K,K)*

public |java.util.SortedMap|<K,V> subMap(
  K fromKey,
  K toKey)

Returns a view of the portion of this map whose keys range fromfromKey, 
inclusive, totoKey, exclusive. (IffromKeyandtoKeyare equal, the returned map is 
empty.) The returned map is backed by this map, so changes in the returned map 
are reflected in this map, and vice-versa. The returned map supports all 
optional map operations that this map supports. 

The returned map will throw anIllegalArgumentExceptionon an attempt to insert a 
key outside its range. 


    fromKey - low endpoint (inclusive) of the keys in the returned map 
    toKey - high endpoint (exclusive) of the keys in the returned map 

    Returns: a view of the portion of this map whose keys range from {@code fromKey}, 
             inclusive, to {@code toKey}, exclusive 

*java.util.SortedMap.tailMap(K)*

public |java.util.SortedMap|<K,V> tailMap(K fromKey)

Returns a view of the portion of this map whose keys are greater than or equal 
tofromKey. The returned map is backed by this map, so changes in the returned 
map are reflected in this map, and vice-versa. The returned map supports all 
optional map operations that this map supports. 

The returned map will throw anIllegalArgumentExceptionon an attempt to insert a 
key outside its range. 


    fromKey - low endpoint (inclusive) of the keys in the returned map 

    Returns: a view of the portion of this map whose keys are greater than or equal to 
             {@code fromKey} 

*java.util.SortedMap.values()*

public |java.util.Collection|<V> values()

Returns a (|java.util.Collection|) view of the values contained in this map. 
The collection's iterator returns the values in ascending order of the 
corresponding keys. The collection is backed by the map, so changes to the map 
are reflected in the collection, and vice-versa. If the map is modified while 
an iteration over the collection is in progress (except through the iterator's 
ownremoveoperation), the results of the iteration are undefined. The collection 
supports element removal, which removes the corresponding mapping from the map, 
via theIterator.remove,Collection.remove,removeAll,retainAllandclearoperations. 
It does not support theaddoraddAlloperations. 



    Returns: a collection view of the values contained in this map, sorted in ascending key 
             order 


