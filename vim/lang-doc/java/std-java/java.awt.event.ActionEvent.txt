*java.awt.event.ActionEvent* *ActionEvent* A semantic event which indicates that

public class ActionEvent
  extends    |java.awt.AWTEvent|

|java.awt.event.ActionEvent_Description|
|java.awt.event.ActionEvent_Fields|
|java.awt.event.ActionEvent_Constructors|
|java.awt.event.ActionEvent_Methods|

================================================================================

*java.awt.event.ActionEvent_Fields*
|int_java.awt.event.ActionEvent.ACTION_FIRST|
|int_java.awt.event.ActionEvent.ACTION_LAST|
|int_java.awt.event.ActionEvent.ACTION_PERFORMED|
|int_java.awt.event.ActionEvent.ALT_MASK|
|int_java.awt.event.ActionEvent.CTRL_MASK|
|int_java.awt.event.ActionEvent.META_MASK|
|int_java.awt.event.ActionEvent.SHIFT_MASK|

*java.awt.event.ActionEvent_Constructors*
|java.awt.event.ActionEvent(Object,int,String)|Constructs an ActionEvent object
|java.awt.event.ActionEvent(Object,int,String,int)|Constructs an ActionEvent ob
|java.awt.event.ActionEvent(Object,int,String,long,int)|Constructs an ActionEve

*java.awt.event.ActionEvent_Methods*
|java.awt.event.ActionEvent.getActionCommand()|Returns the command string assoc
|java.awt.event.ActionEvent.getModifiers()|Returns the modifier keys held down 
|java.awt.event.ActionEvent.getWhen()|Returns the timestamp of when this event 
|java.awt.event.ActionEvent.paramString()|Returns a parameter string identifyin

*java.awt.event.ActionEvent_Description*

A semantic event which indicates that a component-defined action occurred. This 
high-level event is generated by a component (such as a Button) when the 
component-specific action occurs (such as being pressed). The event is passed 
to every ActionListener object that registered to receive such events using the 
component's addActionListener method. 

Note: To invoke an ActionEvent on a Button using the keyboard, use the Space 
bar. 

The object that implements the ActionListener interface gets this ActionEvent 
when the event occurs. The listener is therefore spared the details of 
processing individual mouse movements and mouse clicks, and can instead process 
a "meaningful" (semantic) event like "button pressed". 

An unspecified behavior will be caused if theidparameter of any 
particularActionEventinstance is not in the range 
fromACTION_FIRSTtoACTION_LAST. 



*int_java.awt.event.ActionEvent.ACTION_FIRST*

The first number in the range of ids used for action events. 


*int_java.awt.event.ActionEvent.ACTION_LAST*

The last number in the range of ids used for action events. 


*int_java.awt.event.ActionEvent.ACTION_PERFORMED*

This event id indicates that a meaningful action occured. 


*int_java.awt.event.ActionEvent.ALT_MASK*

The alt modifier. An indicator that the alt key was held down during the event. 


*int_java.awt.event.ActionEvent.CTRL_MASK*

The control modifier. An indicator that the control key was held down during 
the event. 


*int_java.awt.event.ActionEvent.META_MASK*

The meta modifier. An indicator that the meta key was held down during the 
event. 


*int_java.awt.event.ActionEvent.SHIFT_MASK*

The shift modifier. An indicator that the shift key was held down during the 
event. 



*java.awt.event.ActionEvent(Object,int,String)*

public ActionEvent(
  java.lang.Object source,
  int id,
  java.lang.String command)

Constructs an ActionEvent object. 

This method throws an IllegalArgumentException if source is null. A null 
command string is legal, but not recommended. 

    source - The object that originated the event 
    id - An integer that identifies the event. For information on allowable values, see 
       the class description for {@link ActionEvent} 
    command - A string that may specify a command (possibly one of several) associated with 
       the event 

*java.awt.event.ActionEvent(Object,int,String,int)*

public ActionEvent(
  java.lang.Object source,
  int id,
  java.lang.String command,
  int modifiers)

Constructs an ActionEvent object with modifier keys. 

This method throws an IllegalArgumentException if source is null. A null 
command string is legal, but not recommended. 

    source - The object that originated the event 
    id - An integer that identifies the event. For information on allowable values, see 
       the class description for {@link ActionEvent} 
    command - A string that may specify a command (possibly one of several) associated with 
       the event 
    modifiers - The modifier keys down during event (shift, ctrl, alt, meta). Passing negative 
       parameter is not recommended. Zero value means that no modifiers were 
       passed 

*java.awt.event.ActionEvent(Object,int,String,long,int)*

public ActionEvent(
  java.lang.Object source,
  int id,
  java.lang.String command,
  long when,
  int modifiers)

Constructs an ActionEvent object with the specified modifier keys and 
timestamp. 

This method throws an IllegalArgumentException if source is null. A null 
command string is legal, but not recommended. 

    source - The object that originated the event 
    id - An integer that identifies the event. For information on allowable values, see 
       the class description for {@link ActionEvent} 
    command - A string that may specify a command (possibly one of several) associated with 
       the event 
    modifiers - The modifier keys down during event (shift, ctrl, alt, meta). Passing negative 
       parameter is not recommended. Zero value means that no modifiers were 
       passed 
    when - A long that gives the time the event occurred. Passing negative or zero value 
       is not recommended 

*java.awt.event.ActionEvent.getActionCommand()*

public |java.lang.String| getActionCommand()

Returns the command string associated with this action. This string allows a 
"modal" component to specify one of several commands, depending on its state. 
For example, a single button might toggle between "show details" and "hide 
details". The source object and the event would be the same in each case, but 
the command string would identify the intended action. 

Note that if a null command string was passed to the constructor for this 
ActionEvent, this this method returns null. 



    Returns: the string identifying the command for this event 

*java.awt.event.ActionEvent.getModifiers()*

public int getModifiers()

Returns the modifier keys held down during this action event. 



    Returns: the bitwise-or of the modifier constants 

*java.awt.event.ActionEvent.getWhen()*

public long getWhen()

Returns the timestamp of when this event occurred. Because an ActionEvent is a 
high-level, semantic event, the timestamp is typically the same as an 
underlying InputEvent. 



    Returns: this event's timestamp 

*java.awt.event.ActionEvent.paramString()*

public |java.lang.String| paramString()

Returns a parameter string identifying this action event. This method is useful 
for event-logging and for debugging. 



    Returns: a string identifying the event and its associated command 


