*java.lang.Throwable* *Throwable* TheThrowableclass is the superclass of all err

public class Throwable
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|java.lang.Throwable_Description|
|java.lang.Throwable_Fields|
|java.lang.Throwable_Constructors|
|java.lang.Throwable_Methods|

================================================================================

*java.lang.Throwable_Constructors*
|java.lang.Throwable()|Constructs a new throwable withnullas its detail message
|java.lang.Throwable(String)|Constructs a new throwable with the specified deta
|java.lang.Throwable(String,Throwable)|Constructs a new throwable with the spec
|java.lang.Throwable(String,Throwable,boolean,boolean)|Constructs a new throwab
|java.lang.Throwable(Throwable)|Constructs a new throwable with the specified c

*java.lang.Throwable_Methods*
|java.lang.Throwable.addSuppressed(Throwable)|Appends the specified exception t
|java.lang.Throwable.fillInStackTrace()|Fills in the execution stack trace.
|java.lang.Throwable.getCause()|Returns the cause of this throwable ornullif th
|java.lang.Throwable.getLocalizedMessage()|Creates a localized description of t
|java.lang.Throwable.getMessage()|Returns the detail message string of this thr
|java.lang.Throwable.getStackTrace()|Provides programmatic access to the stack 
|java.lang.Throwable.getSuppressed()|Returns an array containing all of the exc
|java.lang.Throwable.initCause(Throwable)|Initializes the cause of this throwab
|java.lang.Throwable.printStackTrace()|Prints this throwable and its backtrace 
|java.lang.Throwable.printStackTrace(PrintStream)|Prints this throwable and its
|java.lang.Throwable.printStackTrace(PrintWriter)|Prints this throwable and its
|java.lang.Throwable.setStackTrace(StackTraceElement[])|Sets the stack trace el
|java.lang.Throwable.toString()|Returns a short description of this throwable.

*java.lang.Throwable_Description*

TheThrowableclass is the superclass of all errors and exceptions in the Java 
language. Only objects that are instances of this class (or one of its 
subclasses) are thrown by the Java Virtual Machine or can be thrown by the 
Javathrowstatement. Similarly, only this class or one of its subclasses can be 
the argument type in acatchclause. 

For the purposes of compile-time checking of exceptions,Throwableand any 
subclass ofThrowablethat is not also a subclass of either 
(|java.lang.RuntimeException|) or (|java.lang.Error|) are regarded as checked 
exceptions. 

Instances of two subclasses, (|java.lang.Error|) and (|java.lang.Exception|) , 
are conventionally used to indicate that exceptional situations have occurred. 
Typically, these instances are freshly created in the context of the 
exceptional situation so as to include relevant information (such as stack 
trace data). 

A throwable contains a snapshot of the execution stack of its thread at the 
time it was created. It can also contain a message string that gives more 
information about the error. Over time, a throwable can 
suppress(|java.lang.Throwable|) other throwables from being propagated. 
Finally, the throwable can also contain a cause: another throwable that caused 
this throwable to be constructed. The recording of this causal information is 
referred to as the chained exception facility, as the cause can, itself, have a 
cause, and so on, leading to a "chain" of exceptions, each caused by another. 

One reason that a throwable may have a cause is that the class that throws it 
is built atop a lower layered abstraction, and an operation on the upper layer 
fails due to a failure in the lower layer. It would be bad design to let the 
throwable thrown by the lower layer propagate outward, as it is generally 
unrelated to the abstraction provided by the upper layer. Further, doing so 
would tie the API of the upper layer to the details of its implementation, 
assuming the lower layer's exception was a checked exception. Throwing a 
"wrapped exception" (i.e., an exception containing a cause) allows the upper 
layer to communicate the details of the failure to its caller without incurring 
either of these shortcomings. It preserves the flexibility to change the 
implementation of the upper layer without changing its API (in particular, the 
set of exceptions thrown by its methods). 

A second reason that a throwable may have a cause is that the method that 
throws it must conform to a general-purpose interface that does not permit the 
method to throw the cause directly. For example, suppose a persistent 
collection conforms to the Collection(|java.util.Collection|) interface, and 
that its persistence is implemented atopjava.io. Suppose the internals of 
theaddmethod can throw an IOException(|java.io.IOException|) . The 
implementation can communicate the details of theIOExceptionto its caller while 
conforming to theCollectioninterface by wrapping theIOExceptionin an 
appropriate unchecked exception. (The specification for the persistent 
collection should indicate that it is capable of throwing such exceptions.) 

A cause can be associated with a throwable in two ways: via a constructor that 
takes the cause as an argument, or via the (|java.lang.Throwable|) method. New 
throwable classes that wish to allow causes to be associated with them should 
provide constructors that take a cause and delegate (perhaps indirectly) to one 
of theThrowableconstructors that takes a cause. 

Because theinitCausemethod is public, it allows a cause to be associated with 
any throwable, even a "legacy throwable" whose implementation predates the 
addition of the exception chaining mechanism toThrowable. 

By convention, classThrowableand its subclasses have two constructors, one that 
takes no arguments and one that takes aStringargument that can be used to 
produce a detail message. Further, those subclasses that might likely have a 
cause associated with them should have two more constructors, one that takes 
aThrowable(the cause), and one that takes aString(the detail message) and 
aThrowable(the cause). 



*java.lang.Throwable()*

public Throwable()

Constructs a new throwable withnullas its detail message. The cause is not 
initialized, and may subsequently be initialized by a call to 
(|java.lang.Throwable|) . 

The (|java.lang.Throwable|) method is called to initialize the stack trace data 
in the newly created throwable. 


*java.lang.Throwable(String)*

public Throwable(java.lang.String message)

Constructs a new throwable with the specified detail message. The cause is not 
initialized, and may subsequently be initialized by a call to 
(|java.lang.Throwable|) . 

The (|java.lang.Throwable|) method is called to initialize the stack trace data 
in the newly created throwable. 

    message - the detail message. The detail message is saved for later retrieval by the 
       {@link #getMessage()} method. 

*java.lang.Throwable(String,Throwable)*

public Throwable(
  java.lang.String message,
  java.lang.Throwable cause)

Constructs a new throwable with the specified detail message and cause. Note 
that the detail message associated withcauseis not automatically incorporated 
in this throwable's detail message. 

The (|java.lang.Throwable|) method is called to initialize the stack trace data 
in the newly created throwable. 

    message - the detail message (which is saved for later retrieval by the {@link 
       #getMessage()} method). 
    cause - the cause (which is saved for later retrieval by the {@link #getCause()} 
       method). (A {@code null} value is permitted, and indicates that the 
       cause is nonexistent or unknown.) 

*java.lang.Throwable(String,Throwable,boolean,boolean)*

protected Throwable(
  java.lang.String message,
  java.lang.Throwable cause,
  boolean enableSuppression,
  boolean writableStackTrace)

Constructs a new throwable with the specified detail message, cause, 
suppression(|java.lang.Throwable|) enabled or disabled, and writable stack 
trace enabled or disabled. If suppression is disabled, (|java.lang.Throwable|) 
for this object will return a zero-length array and calls to 
(|java.lang.Throwable|) that would otherwise append an exception to the 
suppressed list will have no effect. If the writable stack trace is false, this 
constructor will not call (|java.lang.Throwable|) , anullwill be written to 
thestackTracefield, and subsequent calls tofillInStackTraceand 
(|java.lang.Throwable|) will not set the stack trace. If the writable stack 
trace is false, (|java.lang.Throwable|) will return a zero length array. 

Note that the other constructors ofThrowabletreat suppression as being enabled 
and the stack trace as being writable. Subclasses ofThrowableshould document 
any conditions under which suppression is disabled and document conditions 
under which the stack trace is not writable. Disabling of suppression should 
only occur in exceptional circumstances where special requirements exist, such 
as a virtual machine reusing exception objects under low-memory situations. 
Circumstances where a given exception object is repeatedly caught and rethrown, 
such as to implement control flow between two sub-systems, is another situation 
where immutable throwable objects would be appropriate. 

    message - the detail message. 
    cause - the cause. (A {@code null} value is permitted, and indicates that the cause is 
       nonexistent or unknown.) 
    enableSuppression - whether or not suppression is enabled or disabled 
    writableStackTrace - whether or not the stack trace should be writable 

*java.lang.Throwable(Throwable)*

public Throwable(java.lang.Throwable cause)

Constructs a new throwable with the specified cause and a detail message 
of(cause==null ? null : cause.toString())(which typically contains the class 
and detail message ofcause). This constructor is useful for throwables that are 
little more than wrappers for other throwables (for example, 
(|java.security.PrivilegedActionException|) ). 

The (|java.lang.Throwable|) method is called to initialize the stack trace data 
in the newly created throwable. 

    cause - the cause (which is saved for later retrieval by the {@link #getCause()} 
       method). (A {@code null} value is permitted, and indicates that the 
       cause is nonexistent or unknown.) 

*java.lang.Throwable.addSuppressed(Throwable)*

public final synchronized void addSuppressed(java.lang.Throwable exception)

Appends the specified exception to the exceptions that were suppressed in order 
to deliver this exception. This method is thread-safe and typically called 
(automatically and implicitly) by thetry-with-resources statement. 

The suppression behavior is enabled unless disabled via a 
constructor(|java.lang.Throwable|) . When suppression is disabled, this method 
does nothing other than to validate its argument. 

Note that when one exception causes(|java.lang.Throwable|) another exception, 
the first exception is usually caught and then the second exception is thrown 
in response. In other words, there is a causal connection between the two 
exceptions. 

In contrast, there are situations where two independent exceptions can be 
thrown in sibling code blocks, in particular in thetryblock of 
atry-with-resources statement and the compiler-generatedfinallyblock which 
closes the resource. 

In these situations, only one of the thrown exceptions can be propagated. In 
thetry-with-resources statement, when there are two such exceptions, the 
exception originating from thetryblock is propagated and the exception from 
thefinallyblock is added to the list of exceptions suppressed by the exception 
from thetryblock. As an exception unwinds the stack, it can accumulate multiple 
suppressed exceptions. 

An exception may have suppressed exceptions while also being caused by another 
exception. Whether or not an exception has a cause is semantically known at the 
time of its creation, unlike whether or not an exception will suppress other 
exceptions which is typically only determined after an exception is thrown. 

Note that programmer written code is also able to take advantage of calling 
this method in situations where there are multiple sibling exceptions and only 
one can be propagated. 


    exception - the exception to be added to the list of suppressed exceptions 

*java.lang.Throwable.fillInStackTrace()*

public synchronized |java.lang.Throwable| fillInStackTrace()

Fills in the execution stack trace. This method records within 
thisThrowableobject information about the current state of the stack frames for 
the current thread. 

If the stack trace of thisThrowable is not writable(|java.lang.Throwable|) , 
calling this method has no effect. 



    Returns: a reference to this {@code Throwable} instance. 

*java.lang.Throwable.getCause()*

public synchronized |java.lang.Throwable| getCause()

Returns the cause of this throwable ornullif the cause is nonexistent or 
unknown. (The cause is the throwable that caused this throwable to get thrown.) 

This implementation returns the cause that was supplied via one of the 
constructors requiring aThrowable, or that was set after creation with the 
(|java.lang.Throwable|) method. While it is typically unnecessary to override 
this method, a subclass can override it to return a cause set by some other 
means. This is appropriate for a "legacy chained throwable" that predates the 
addition of chained exceptions toThrowable. Note that it is not necessary to 
override any of thePrintStackTracemethods, all of which invoke 
thegetCausemethod to determine the cause of a throwable. 



    Returns: the cause of this throwable or {@code null} if the cause is nonexistent or 
             unknown. 

*java.lang.Throwable.getLocalizedMessage()*

public |java.lang.String| getLocalizedMessage()

Creates a localized description of this throwable. Subclasses may override this 
method in order to produce a locale-specific message. For subclasses that do 
not override this method, the default implementation returns the same result 
asgetMessage(). 



    Returns: The localized description of this throwable. 

*java.lang.Throwable.getMessage()*

public |java.lang.String| getMessage()

Returns the detail message string of this throwable. 



    Returns: the detail message string of this {@code Throwable} instance (which may be 
             {@code null}). 

*java.lang.Throwable.getStackTrace()*

public |java.lang.StackTraceElement|[] getStackTrace()

Provides programmatic access to the stack trace information printed by 
(|java.lang.Throwable|) . Returns an array of stack trace elements, each 
representing one stack frame. The zeroth element of the array (assuming the 
array's length is non-zero) represents the top of the stack, which is the last 
method invocation in the sequence. Typically, this is the point at which this 
throwable was created and thrown. The last element of the array (assuming the 
array's length is non-zero) represents the bottom of the stack, which is the 
first method invocation in the sequence. 

Some virtual machines may, under some circumstances, omit one or more stack 
frames from the stack trace. In the extreme case, a virtual machine that has no 
stack trace information concerning this throwable is permitted to return a 
zero-length array from this method. Generally speaking, the array returned by 
this method will contain one element for every frame that would be printed 
byprintStackTrace. Writes to the returned array do not affect future calls to 
this method. 



    Returns: an array of stack trace elements representing the stack trace pertaining to 
             this throwable. 

*java.lang.Throwable.getSuppressed()*

public final synchronized |java.lang.Throwable|[] getSuppressed()

Returns an array containing all of the exceptions that were suppressed, 
typically by thetry-with-resources statement, in order to deliver this 
exception. 

If no exceptions were suppressed or suppression is 
disabled(|java.lang.Throwable|) , an empty array is returned. This method is 
thread-safe. Writes to the returned array do not affect future calls to this 
method. 



    Returns: an array containing all of the exceptions that were suppressed to deliver this 
             exception. 

*java.lang.Throwable.initCause(Throwable)*

public synchronized |java.lang.Throwable| initCause(java.lang.Throwable cause)

Initializes the cause of this throwable to the specified value. (The cause is 
the throwable that caused this throwable to get thrown.) 

This method can be called at most once. It is generally called from within the 
constructor, or immediately after creating the throwable. If this throwable was 
created with (|java.lang.Throwable|) or (|java.lang.Throwable|) , this method 
cannot be called even once. 

An example of using this method on a legacy throwable type without other 
support for setting the cause is: 



try { lowLevelOp(); } catch (LowLevelException le) { throw (HighLevelException) 
new HighLevelException().initCause(le); // Legacy constructor } 


    cause - the cause (which is saved for later retrieval by the {@link #getCause()} 
       method). (A {@code null} value is permitted, and indicates that the 
       cause is nonexistent or unknown.) 

    Returns: a reference to this {@code Throwable} instance. 

*java.lang.Throwable.printStackTrace()*

public void printStackTrace()

Prints this throwable and its backtrace to the standard error stream. This 
method prints a stack trace for thisThrowableobject on the error output stream 
that is the value of the fieldSystem.err. The first line of output contains the 
result of the (|java.lang.Throwable|) method for this object. Remaining lines 
represent data previously recorded by the method (|java.lang.Throwable|) . The 
format of this information depends on the implementation, but the following 
example may be regarded as typical: 

java.lang.NullPointerException at MyClass.mash(MyClass.java:9) at 
MyClass.crunch(MyClass.java:6) at MyClass.main(MyClass.java:3) 

This example was produced by running the program: 

class MyClass { public static void main(String[] args) { crunch(null); } static 
void crunch(int[] a) { mash(a); } static void mash(int[] b) { 
System.out.println(b[0]); } } 

The backtrace for a throwable with an initialized, non-null cause should 
generally include the backtrace for the cause. The format of this information 
depends on the implementation, but the following example may be regarded as 
typical: 

HighLevelException: MidLevelException: LowLevelException at 
Junk.a(Junk.java:13) at Junk.main(Junk.java:4) Caused by: MidLevelException: 
LowLevelException at Junk.c(Junk.java:23) at Junk.b(Junk.java:17) at 
Junk.a(Junk.java:11) ... 1 more Caused by: LowLevelException at 
Junk.e(Junk.java:30) at Junk.d(Junk.java:27) at Junk.c(Junk.java:21) ... 3 more 

Note the presence of lines containing the characters"...". These lines indicate 
that the remainder of the stack trace for this exception matches the indicated 
number of frames from the bottom of the stack trace of the exception that was 
caused by this exception (the "enclosing" exception). This shorthand can 
greatly reduce the length of the output in the common case where a wrapped 
exception is thrown from same method as the "causative exception" is caught. 
The above example was produced by running the program: 

public class Junk { public static void main(String args[]) { try { a(); } 
catch(HighLevelException e) { e.printStackTrace(); } } static void a() throws 
HighLevelException { try { b(); } catch(MidLevelException e) { throw new 
HighLevelException(e); } } static void b() throws MidLevelException { c(); } 
static void c() throws MidLevelException { try { d(); } catch(LowLevelException 
e) { throw new MidLevelException(e); } } static void d() throws 
LowLevelException { e(); } static void e() throws LowLevelException { throw new 
LowLevelException(); } } 

class HighLevelException extends Exception { HighLevelException(Throwable 
cause) { super(cause); } } 

class MidLevelException extends Exception { MidLevelException(Throwable cause) 
{ super(cause); } } 

class LowLevelException extends Exception { } 

As of release 7, the platform supports the notion of suppressed exceptions (in 
conjunction with thetry-with-resources statement). Any exceptions that were 
suppressed in order to deliver an exception are printed out beneath the stack 
trace. The format of this information depends on the implementation, but the 
following example may be regarded as typical: 



Exception in thread "main" java.lang.Exception: Something happened at 
Foo.bar(Foo.java:10) at Foo.main(Foo.java:5) Suppressed: 
Resource$CloseFailException: Resource ID = 0 at 
Resource.close(Resource.java:26) at Foo.bar(Foo.java:9) ... 1 more 

Note that the "... n more" notation is used on suppressed exceptions just at it 
is used on causes. Unlike causes, suppressed exceptions are indented beyond 
their "containing exceptions." 

An exception can have both a cause and one or more suppressed exceptions: 

Exception in thread "main" java.lang.Exception: Main block at 
Foo3.main(Foo3.java:7) Suppressed: Resource$CloseFailException: Resource ID = 2 
at Resource.close(Resource.java:26) at Foo3.main(Foo3.java:5) Suppressed: 
Resource$CloseFailException: Resource ID = 1 at 
Resource.close(Resource.java:26) at Foo3.main(Foo3.java:5) Caused by: 
java.lang.Exception: I did it at Foo3.main(Foo3.java:8) 

Likewise, a suppressed exception can have a cause: 

Exception in thread "main" java.lang.Exception: Main block at 
Foo4.main(Foo4.java:6) Suppressed: Resource2$CloseFailException: Resource ID = 
1 at Resource2.close(Resource2.java:20) at Foo4.main(Foo4.java:5) Caused by: 
java.lang.Exception: Rats, you caught me at 
Resource2$CloseFailException.(Resource2.java:45) ... 2 more 



*java.lang.Throwable.printStackTrace(PrintStream)*

public void printStackTrace(java.io.PrintStream s)

Prints this throwable and its backtrace to the specified print stream. 


    s - {@code PrintStream} to use for output 

*java.lang.Throwable.printStackTrace(PrintWriter)*

public void printStackTrace(java.io.PrintWriter s)

Prints this throwable and its backtrace to the specified print writer. 


    s - {@code PrintWriter} to use for output 

*java.lang.Throwable.setStackTrace(StackTraceElement[])*

public void setStackTrace(java.lang.StackTraceElement[] stackTrace)

Sets the stack trace elements that will be returned by (|java.lang.Throwable|) 
and printed by (|java.lang.Throwable|) and related methods. 

This method, which is designed for use by RPC frameworks and other advanced 
systems, allows the client to override the default stack trace that is either 
generated by (|java.lang.Throwable|) when a throwable is constructed or 
deserialized when a throwable is read from a serialization stream. 

If the stack trace of thisThrowable is not writable(|java.lang.Throwable|) , 
calling this method has no effect other than validating its argument. 


    stackTrace - the stack trace elements to be associated with this {@code Throwable}. The 
       specified array is copied by this call; changes in the specified array 
       after the method invocation returns will have no affect on this {@code 
       Throwable}'s stack trace. 

*java.lang.Throwable.toString()*

public |java.lang.String| toString()

Returns a short description of this throwable. The result is the concatenation 
of: 

the name(|java.lang.Class|) of the class of this object ": " (a colon and a 
space) the result of invoking this object's (|java.lang.Throwable|) method 

IfgetLocalizedMessagereturnsnull, then just the class name is returned. 



    Returns: a string representation of this throwable. 


