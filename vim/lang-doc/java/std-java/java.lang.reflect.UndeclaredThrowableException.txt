*java.lang.reflect.UndeclaredThrowableException* *UndeclaredThrowableException* 

public class UndeclaredThrowableException
  extends    |java.lang.RuntimeException|

|java.lang.reflect.UndeclaredThrowableException_Description|
|java.lang.reflect.UndeclaredThrowableException_Fields|
|java.lang.reflect.UndeclaredThrowableException_Constructors|
|java.lang.reflect.UndeclaredThrowableException_Methods|

================================================================================

*java.lang.reflect.UndeclaredThrowableException_Constructors*
|java.lang.reflect.UndeclaredThrowableException(Throwable)|Constructs anUndecla
|java.lang.reflect.UndeclaredThrowableException(Throwable,String)|Constructs an

*java.lang.reflect.UndeclaredThrowableException_Methods*
|java.lang.reflect.UndeclaredThrowableException.getCause()|Returns the cause of
|java.lang.reflect.UndeclaredThrowableException.getUndeclaredThrowable()|Return

*java.lang.reflect.UndeclaredThrowableException_Description*

Thrown by a method invocation on a proxy instance if its invocation handler's 
invoke(|java.lang.reflect.InvocationHandler|) method throws a checked exception 
(aThrowablethat is not assignable toRuntimeExceptionorError) that is not 
assignable to any of the exception types declared in thethrowsclause of the 
method that was invoked on the proxy instance and dispatched to the invocation 
handler. 

AnUndeclaredThrowableExceptioninstance contains the undeclared checked 
exception that was thrown by the invocation handler, and it can be retrieved 
with 
thegetUndeclaredThrowable()method.UndeclaredThrowableExceptionextendsRuntimeException,
so it is an unchecked exception that wraps a checked exception. 

As of release 1.4, this exception has been retrofitted to conform to the 
general purpose exception-chaining mechanism. The "undeclared checked exception 
that was thrown by the invocation handler" that may be provided at construction 
time and accessed via the (|java.lang.reflect.UndeclaredThrowableException|) 
method is now known as the cause, and may be accessed via the 
(|java.lang.Throwable|) method, as well as the aforementioned "legacy method." 



*java.lang.reflect.UndeclaredThrowableException(Throwable)*

public UndeclaredThrowableException(java.lang.Throwable undeclaredThrowable)

Constructs anUndeclaredThrowableExceptionwith the specifiedThrowable. 

    undeclaredThrowable - the undeclared checked exception that was thrown 

*java.lang.reflect.UndeclaredThrowableException(Throwable,String)*

public UndeclaredThrowableException(
  java.lang.Throwable undeclaredThrowable,
  java.lang.String s)

Constructs anUndeclaredThrowableExceptionwith the specifiedThrowableand a 
detail message. 

    undeclaredThrowable - the undeclared checked exception that was thrown 
    s - the detail message 

*java.lang.reflect.UndeclaredThrowableException.getCause()*

public |java.lang.Throwable| getCause()

Returns the cause of this exception (theThrowableinstance wrapped in 
thisUndeclaredThrowableException, which may benull). 



    Returns: the cause of this exception. 

*java.lang.reflect.UndeclaredThrowableException.getUndeclaredThrowable()*

public |java.lang.Throwable| getUndeclaredThrowable()

Returns theThrowableinstance wrapped in thisUndeclaredThrowableException, which 
may benull. 

This method predates the general-purpose exception chaining facility. The 
(|java.lang.Throwable|) method is now the preferred means of obtaining this 
information. 



    Returns: the undeclared checked exception that was thrown 


