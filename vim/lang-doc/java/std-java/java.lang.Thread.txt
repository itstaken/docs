*java.lang.Thread* *Thread* A thread is a thread of execution in a program.

public class Thread
  extends    |java.lang.Object|
  implements |java.lang.Runnable|

|java.lang.Thread_Description|
|java.lang.Thread_Fields|
|java.lang.Thread_Constructors|
|java.lang.Thread_Methods|

================================================================================

*java.lang.Thread_Fields*
|int_java.lang.Thread.MAX_PRIORITY|
|int_java.lang.Thread.MIN_PRIORITY|
|int_java.lang.Thread.NORM_PRIORITY|

*java.lang.Thread_Constructors*
|java.lang.Thread()|Allocates a newThreadobject.
|java.lang.Thread(Runnable)|Allocates a newThreadobject.
|java.lang.Thread(Runnable,String)|Allocates a newThreadobject.
|java.lang.Thread(String)|Allocates a newThreadobject.
|java.lang.Thread(ThreadGroup,Runnable)|Allocates a newThreadobject.
|java.lang.Thread(ThreadGroup,Runnable,String)|Allocates a newThreadobject so t
|java.lang.Thread(ThreadGroup,Runnable,String,long)|Allocates a newThreadobject
|java.lang.Thread(ThreadGroup,String)|Allocates a newThreadobject.

*java.lang.Thread_Methods*
|java.lang.Thread.activeCount()|Returns an estimate of the number of active thr
|java.lang.Thread.checkAccess()|Determines if the currently running thread has 
|java.lang.Thread.clone()|Throws CloneNotSupportedException as a Thread can not
|java.lang.Thread.countStackFrames()|Counts the number of stack frames in this 
|java.lang.Thread.currentThread()|Returns a reference to the currently executin
|java.lang.Thread.destroy()|ThrowsNoSuchMethodError.
|java.lang.Thread.dumpStack()|Prints a stack trace of the current thread to the
|java.lang.Thread.enumerate(Thread[])|Copies into the specified array every act
|java.lang.Thread.getAllStackTraces()|Returns a map of stack traces for all liv
|java.lang.Thread.getContextClassLoader()|Returns the context ClassLoader for t
|java.lang.Thread.getDefaultUncaughtExceptionHandler()|Returns the default hand
|java.lang.Thread.getId()|Returns the identifier of this Thread.
|java.lang.Thread.getName()|Returns this thread's name.
|java.lang.Thread.getPriority()|Returns this thread's priority.
|java.lang.Thread.getStackTrace()|Returns an array of stack trace elements repr
|java.lang.Thread.getState()|Returns the state of this thread.
|java.lang.Thread.getThreadGroup()|Returns the thread group to which this threa
|java.lang.Thread.getUncaughtExceptionHandler()|Returns the handler invoked whe
|java.lang.Thread.holdsLock(Object)|Returns true if and only if the current thr
|java.lang.Thread.interrupt()|Interrupts this thread.
|java.lang.Thread.interrupted()|Tests whether the current thread has been inter
|java.lang.Thread.isAlive()|Tests if this thread is alive.
|java.lang.Thread.isDaemon()|Tests if this thread is a daemon thread.
|java.lang.Thread.isInterrupted()|Tests whether this thread has been interrupte
|java.lang.Thread.join()|Waits for this thread to die.
|java.lang.Thread.join(long)|Waits at mostmillismilliseconds for this thread to
|java.lang.Thread.join(long,int)|Waits at mostmillismilliseconds plusnanosnanos
|java.lang.Thread.resume()|Resumes a suspended thread.
|java.lang.Thread.run()|If this thread was constructed using a separate  Runnab
|java.lang.Thread.setContextClassLoader(ClassLoader)|Sets the context ClassLoad
|java.lang.Thread.setDaemon(boolean)|Marks this thread as either a#isDaemon dae
|java.lang.Thread.setDefaultUncaughtExceptionHandler(Thread.UncaughtExceptionHandler)|
|java.lang.Thread.setName(String)|Changes the name of this thread to be equal t
|java.lang.Thread.setPriority(int)|Changes the priority of this thread.
|java.lang.Thread.setUncaughtExceptionHandler(Thread.UncaughtExceptionHandler)|
|java.lang.Thread.sleep(long)|Causes the currently executing thread to sleep (t
|java.lang.Thread.sleep(long,int)|Causes the currently executing thread to slee
|java.lang.Thread.start()|Causes this thread to begin execution; the Java Virtu
|java.lang.Thread.stop()|Forces the thread to stop executing.
|java.lang.Thread.stop(Throwable)|Forces the thread to stop executing.
|java.lang.Thread.suspend()|Suspends this thread.
|java.lang.Thread.toString()|Returns a string representation of this thread, in
|java.lang.Thread.yield()|A hint to the scheduler that the current thread is wi

*java.lang.Thread_Description*

A thread is a thread of execution in a program. The Java Virtual Machine allows 
an application to have multiple threads of execution running concurrently. 

Every thread has a priority. Threads with higher priority are executed in 
preference to threads with lower priority. Each thread may or may not also be 
marked as a daemon. When code running in some thread creates a new Thread 
object, the new thread has its priority initially set equal to the priority of 
the creating thread, and is a daemon thread if and only if the creating thread 
is a daemon. 

When a Java Virtual Machine starts up, there is usually a single non-daemon 
thread (which typically calls the method named main of some designated class). 
The Java Virtual Machine continues to execute threads until either of the 
following occurs: 

The exit method of class Runtime has been called and the security manager has 
permitted the exit operation to take place. All threads that are not daemon 
threads have died, either by returning from the call to the run method or by 
throwing an exception that propagates beyond the run method. 

There are two ways to create a new thread of execution. One is to declare a 
class to be a subclass of Thread. This subclass should override the run method 
of class Thread. An instance of the subclass can then be allocated and started. 
For example, a thread that computes primes larger than a stated value could be 
written as follows: 

class PrimeThread extends Thread { long minPrime; PrimeThread(long minPrime) { 
this.minPrime = minPrime; } 

public void run() { // compute primes larger than minPrime ... } } 

The following code would then create a thread and start it running: 

PrimeThread p = new PrimeThread(143); p.start(); 

The other way to create a thread is to declare a class that implements the 
Runnable interface. That class then implements the run method. An instance of 
the class can then be allocated, passed as an argument when creating Thread, 
and started. The same example in this other style looks like the following: 

class PrimeRun implements Runnable { long minPrime; PrimeRun(long minPrime) { 
this.minPrime = minPrime; } 

public void run() { // compute primes larger than minPrime ... } } 

The following code would then create a thread and start it running: 

PrimeRun p = new PrimeRun(143); new Thread(p).start(); 

Every thread has a name for identification purposes. More than one thread may 
have the same name. If a name is not specified when a thread is created, a new 
name is generated for it. 

Unless otherwise noted, passing anullargument to a constructor or method in 
this class will cause a (|java.lang.NullPointerException|) to be thrown. 



*int_java.lang.Thread.MAX_PRIORITY*

The maximum priority that a thread can have. 


*int_java.lang.Thread.MIN_PRIORITY*

The minimum priority that a thread can have. 


*int_java.lang.Thread.NORM_PRIORITY*

The default priority that is assigned to a thread. 



*java.lang.Thread()*

public Thread()

Allocates a newThreadobject. This constructor has the same effect as 
Thread(|java.lang.Thread|) (null, null, gname), wheregnameis a newly generated 
name. Automatically generated names are of the form"Thread-"+n, where n is an 
integer. 


*java.lang.Thread(Runnable)*

public Thread(java.lang.Runnable target)

Allocates a newThreadobject. This constructor has the same effect as 
Thread(|java.lang.Thread|) (null, target, gname), wheregnameis a newly 
generated name. Automatically generated names are of the form"Thread-"+n, where 
n is an integer. 

    target - the object whose {@code run} method is invoked when this thread is started. If 
       {@code null}, this classes {@code run} method does nothing. 

*java.lang.Thread(Runnable,String)*

public Thread(
  java.lang.Runnable target,
  java.lang.String name)

Allocates a newThreadobject. This constructor has the same effect as 
Thread(|java.lang.Thread|) (null, target, name). 

    target - the object whose {@code run} method is invoked when this thread is started. If 
       {@code null}, this thread's run method is invoked. 
    name - the name of the new thread 

*java.lang.Thread(String)*

public Thread(java.lang.String name)

Allocates a newThreadobject. This constructor has the same effect as 
Thread(|java.lang.Thread|) (null, null, name). 

    name - the name of the new thread 

*java.lang.Thread(ThreadGroup,Runnable)*

public Thread(
  java.lang.ThreadGroup group,
  java.lang.Runnable target)

Allocates a newThreadobject. This constructor has the same effect as 
Thread(|java.lang.Thread|) (group, target, gname),wheregnameis a newly 
generated name. Automatically generated names are of the form"Thread-"+n, where 
n is an integer. 

    group - the thread group. If {@code null} and there is a security manager, the group is 
       determined by {@linkplain SecurityManager#getThreadGroup 
       SecurityManager.getThreadGroup()}. If there is not a security manager or 
       {@code SecurityManager.getThreadGroup()} returns {@code null}, the group 
       is set to the current thread's thread group. 
    target - the object whose {@code run} method is invoked when this thread is started. If 
       {@code null}, this thread's run method is invoked. 

*java.lang.Thread(ThreadGroup,Runnable,String)*

public Thread(
  java.lang.ThreadGroup group,
  java.lang.Runnable target,
  java.lang.String name)

Allocates a newThreadobject so that it hastargetas its run object, has the 
specifiednameas its name, and belongs to the thread group referred to bygroup. 

If there is a security manager, its checkAccess(|java.lang.SecurityManager|) 
method is invoked with the ThreadGroup as its argument. 

In addition, itscheckPermissionmethod is invoked with 
theRuntimePermission("enableContextClassLoaderOverride")permission when invoked 
directly or indirectly by the constructor of a subclass which overrides 
thegetContextClassLoaderorsetContextClassLoadermethods. 

The priority of the newly created thread is set equal to the priority of the 
thread creating it, that is, the currently running thread. The method 
setPriority(|java.lang.Thread|) may be used to change the priority to a new 
value. 

The newly created thread is initially marked as being a daemon thread if and 
only if the thread creating it is currently marked as a daemon thread. The 
method setDaemon(|java.lang.Thread|) may be used to change whether or not a 
thread is a daemon. 

    group - the thread group. If {@code null} and there is a security manager, the group is 
       determined by {@linkplain SecurityManager#getThreadGroup 
       SecurityManager.getThreadGroup()}. If there is not a security manager or 
       {@code SecurityManager.getThreadGroup()} returns {@code null}, the group 
       is set to the current thread's thread group. 
    target - the object whose {@code run} method is invoked when this thread is started. If 
       {@code null}, this thread's run method is invoked. 
    name - the name of the new thread 

*java.lang.Thread(ThreadGroup,Runnable,String,long)*

public Thread(
  java.lang.ThreadGroup group,
  java.lang.Runnable target,
  java.lang.String name,
  long stackSize)

Allocates a newThreadobject so that it hastargetas its run object, has the 
specifiednameas its name, and belongs to the thread group referred to bygroup, 
and has the specified stack size. 

This constructor is identical to (|java.lang.Thread|) with the exception of the 
fact that it allows the thread stack size to be specified. The stack size is 
the approximate number of bytes of address space that the virtual machine is to 
allocate for this thread's stack. The effect of thestackSizeparameter, if any, 
is highly platform dependent. 

On some platforms, specifying a higher value for thestackSizeparameter may 
allow a thread to achieve greater recursion depth before throwing a 
(|java.lang.StackOverflowError|) . Similarly, specifying a lower value may 
allow a greater number of threads to exist concurrently without throwing an 
(|java.lang.OutOfMemoryError|) (or other internal error). The details of the 
relationship between the value of the stackSize parameter and the maximum 
recursion depth and concurrency level are platform-dependent. On some 
platforms, the value of thestackSizeparameter may have no effect whatsoever. 

The virtual machine is free to treat thestackSizeparameter as a suggestion. If 
the specified value is unreasonably low for the platform, the virtual machine 
may instead use some platform-specific minimum value; if the specified value is 
unreasonably high, the virtual machine may instead use some platform-specific 
maximum. Likewise, the virtual machine is free to round the specified value up 
or down as it sees fit (or to ignore it completely). 

Specifying a value of zero for thestackSizeparameter will cause this 
constructor to behave exactly like theThread(ThreadGroup, Runnable, 
String)constructor. 

Due to the platform-dependent nature of the behavior of this constructor, 
extreme care should be exercised in its use. The thread stack size necessary to 
perform a given computation will likely vary from one JRE implementation to 
another. In light of this variation, careful tuning of the stack size parameter 
may be required, and the tuning may need to be repeated for each JRE 
implementation on which an application is to run. 

Implementation note: Java platform implementers are encouraged to document 
their implementation's behavior with respect to thestackSizeparameter. 

    group - the thread group. If {@code null} and there is a security manager, the group is 
       determined by {@linkplain SecurityManager#getThreadGroup 
       SecurityManager.getThreadGroup()}. If there is not a security manager or 
       {@code SecurityManager.getThreadGroup()} returns {@code null}, the group 
       is set to the current thread's thread group. 
    target - the object whose {@code run} method is invoked when this thread is started. If 
       {@code null}, this thread's run method is invoked. 
    name - the name of the new thread 
    stackSize - the desired stack size for the new thread, or zero to indicate that this 
       parameter is to be ignored. 

*java.lang.Thread(ThreadGroup,String)*

public Thread(
  java.lang.ThreadGroup group,
  java.lang.String name)

Allocates a newThreadobject. This constructor has the same effect as 
Thread(|java.lang.Thread|) (group, null, name). 

    group - the thread group. If {@code null} and there is a security manager, the group is 
       determined by {@linkplain SecurityManager#getThreadGroup 
       SecurityManager.getThreadGroup()}. If there is not a security manager or 
       {@code SecurityManager.getThreadGroup()} returns {@code null}, the group 
       is set to the current thread's thread group. 
    name - the name of the new thread 

*java.lang.Thread.activeCount()*

public static int activeCount()

Returns an estimate of the number of active threads in the current thread's 
thread group(|java.lang.ThreadGroup|) and its subgroups. Recursively iterates 
over all subgroups in the current thread's thread group. 

The value returned is only an estimate because the number of threads may change 
dynamically while this method traverses internal data structures, and might be 
affected by the presence of certain system threads. This method is intended 
primarily for debugging and monitoring purposes. 



    Returns: an estimate of the number of active threads in the current thread's thread 
             group and in any other thread group that has the current thread's 
             thread group as an ancestor 

*java.lang.Thread.checkAccess()*

public final void checkAccess()

Determines if the currently running thread has permission to modify this 
thread. 

If there is a security manager, its checkAccess method is called with this 
thread as its argument. This may result in throwing a SecurityException. 



*java.lang.Thread.clone()*

protected |java.lang.Object| clone()
  throws |java.lang.CloneNotSupportedException|
         
Throws CloneNotSupportedException as a Thread can not be meaningfully cloned. 
Construct a new Thread instead. 



*java.lang.Thread.countStackFrames()*

public native int countStackFrames()

Counts the number of stack frames in this thread. The thread must be suspended. 

    Deprecated: The definition of this call depends on {@link #suspend},
             which is deprecated.  Further, the results of this call
             were never well-defined.


    Returns: the number of stack frames in this thread. 

*java.lang.Thread.currentThread()*

public static native |java.lang.Thread| currentThread()

Returns a reference to the currently executing thread object. 



    Returns: the currently executing thread. 

*java.lang.Thread.destroy()*

public void destroy()

Throws (|java.lang.NoSuchMethodError|) . 

    Deprecated: This method was originally designed to destroy this
     thread without any cleanup. Any monitors it held would have
     remained locked. However, the method was never implemented.
     If if were to be implemented, it would be deadlock-prone in
     much the manner of {@link #suspend}. If the target thread held
     a lock protecting a critical system resource when it was
     destroyed, no thread could ever access this resource again.
     If another thread ever attempted to lock this resource, deadlock
     would result. Such deadlocks typically manifest themselves as
     "frozen" processes. For more information, see
     <a href="{@docRoot}/../technotes/guides/concurrency/threadPrimitiveDeprecation.html">
     Why are Thread.stop, Thread.suspend and Thread.resume Deprecated?</a>.


*java.lang.Thread.dumpStack()*

public static void dumpStack()

Prints a stack trace of the current thread to the standard error stream. This 
method is used only for debugging. 



*java.lang.Thread.enumerate(Thread[])*

public static int enumerate(java.lang.Thread[] tarray)

Copies into the specified array every active thread in the current thread's 
thread group and its subgroups. This method simply invokes the 
(|java.lang.ThreadGroup|) method of the current thread's thread group. 

An application might use the activeCount(|java.lang.Thread|) method to get an 
estimate of how big the array should be, however if the array is too short to 
hold all the threads, the extra threads are silently ignored. If it is critical 
to obtain every active thread in the current thread's thread group and its 
subgroups, the invoker should verify that the returned int value is strictly 
less than the length oftarray. 

Due to the inherent race condition in this method, it is recommended that the 
method only be used for debugging and monitoring purposes. 


    tarray - an array into which to put the list of threads 

    Returns: the number of threads put into the array 

*java.lang.Thread.getAllStackTraces()*

public static |java.util.Map|<Thread,StackTraceElement[]> getAllStackTraces()

Returns a map of stack traces for all live threads. The map keys are threads 
and each map value is an array of StackTraceElement that represents the stack 
dump of the corresponding Thread. The returned stack traces are in the format 
specified for the getStackTrace(|java.lang.Thread|) method. 

The threads may be executing while this method is called. The stack trace of 
each thread only represents a snapshot and each stack trace may be obtained at 
different time. A zero-length array will be returned in the map value if the 
virtual machine has no stack trace information about a thread. 

If there is a security manager, then the security manager's checkPermission 
method is called with a RuntimePermission("getStackTrace") permission as well 
as RuntimePermission("modifyThreadGroup") permission to see if it is ok to get 
the stack trace of all threads. 



    Returns: a Map from Thread to an array of StackTraceElement that represents the stack 
             trace of the corresponding thread. 

*java.lang.Thread.getContextClassLoader()*

public |java.lang.ClassLoader| getContextClassLoader()

Returns the context ClassLoader for this Thread. The context ClassLoader is 
provided by the creator of the thread for use by code running in this thread 
when loading classes and resources. If not set(|java.lang.Thread|) , the 
default is the ClassLoader context of the parent Thread. The context 
ClassLoader of the primordial thread is typically set to the class loader used 
to load the application. 

If a security manager is present, and the invoker's class loader is notnulland 
is not the same as or an ancestor of the context class loader, then this method 
invokes the security manager's checkPermission(|java.lang.SecurityManager|) 
method with a RuntimePermission(|java.lang.RuntimePermission|) 
("getClassLoader")permission to verify that retrieval of the context class 
loader is permitted. 



    Returns: the context ClassLoader for this Thread, or {@code null} indicating the system 
             class loader (or, failing that, the bootstrap class loader) 

*java.lang.Thread.getDefaultUncaughtExceptionHandler()*

public static |java.lang.Thread.UncaughtExceptionHandler| getDefaultUncaughtExceptionHandler()

Returns the default handler invoked when a thread abruptly terminates due to an 
uncaught exception. If the returned value is null, there is no default. 



*java.lang.Thread.getId()*

public long getId()

Returns the identifier of this Thread. The thread ID is a positive long number 
generated when this thread was created. The thread ID is unique and remains 
unchanged during its lifetime. When a thread is terminated, this thread ID may 
be reused. 



    Returns: this thread's ID. 

*java.lang.Thread.getName()*

public final |java.lang.String| getName()

Returns this thread's name. 



    Returns: this thread's name. 

*java.lang.Thread.getPriority()*

public final int getPriority()

Returns this thread's priority. 



    Returns: this thread's priority. 

*java.lang.Thread.getStackTrace()*

public |java.lang.StackTraceElement|[] getStackTrace()

Returns an array of stack trace elements representing the stack dump of this 
thread. This method will return a zero-length array if this thread has not 
started, has started but has not yet been scheduled to run by the system, or 
has terminated. If the returned array is of non-zero length then the first 
element of the array represents the top of the stack, which is the most recent 
method invocation in the sequence. The last element of the array represents the 
bottom of the stack, which is the least recent method invocation in the 
sequence. 

If there is a security manager, and this thread is not the current thread, then 
the security manager's checkPermission method is called with a 
RuntimePermission("getStackTrace") permission to see if it's ok to get the 
stack trace. 

Some virtual machines may, under some circumstances, omit one or more stack 
frames from the stack trace. In the extreme case, a virtual machine that has no 
stack trace information concerning this thread is permitted to return a 
zero-length array from this method. 



    Returns: an array of StackTraceElement, each represents one stack frame. 

*java.lang.Thread.getState()*

public |java.lang.Thread.State| getState()

Returns the state of this thread. This method is designed for use in monitoring 
of the system state, not for synchronization control. 



    Returns: this thread's state. 

*java.lang.Thread.getThreadGroup()*

public final |java.lang.ThreadGroup| getThreadGroup()

Returns the thread group to which this thread belongs. This method returns null 
if this thread has died (been stopped). 



    Returns: this thread's thread group. 

*java.lang.Thread.getUncaughtExceptionHandler()*

public |java.lang.Thread.UncaughtExceptionHandler| getUncaughtExceptionHandler()

Returns the handler invoked when this thread abruptly terminates due to an 
uncaught exception. If this thread has not had an uncaught exception handler 
explicitly set then this thread's ThreadGroup object is returned, unless this 
thread has terminated, in which case null is returned. 



*java.lang.Thread.holdsLock(Object)*

public static native boolean holdsLock(java.lang.Object obj)

Returns true if and only if the current thread holds the monitor lock on the 
specified object. 

This method is designed to allow a program to assert that the current thread 
already holds a specified lock: 

assert Thread.holdsLock(obj); 


    obj - the object on which to test lock ownership 

    Returns: true if the current thread holds the monitor lock on the specified object. 

*java.lang.Thread.interrupt()*

public void interrupt()

Interrupts this thread. 

Unless the current thread is interrupting itself, which is always permitted, 
the checkAccess(|java.lang.Thread|) method of this thread is invoked, which may 
cause a (|java.lang.SecurityException|) to be thrown. 

If this thread is blocked in an invocation of the wait()(|java.lang.Object|) , 
wait(long)(|java.lang.Object|) , or wait(long, int)(|java.lang.Object|) methods 
of the (|java.lang.Object|) class, or of the (|java.lang.Thread|) , 
(|java.lang.Thread|) , (|java.lang.Thread|) , (|java.lang.Thread|) , or 
(|java.lang.Thread|) , methods of this class, then its interrupt status will be 
cleared and it will receive an (|java.lang.InterruptedException|) . 

If this thread is blocked in an I/O operation upon an </code>interruptible 
channel<code>(|java.nio.channels.InterruptibleChannel|) then the channel will 
be closed, the thread's interrupt status will be set, and the thread will 
receive a (|java.nio.channels.ClosedByInterruptException|) . 

If this thread is blocked in a (|java.nio.channels.Selector|) then the thread's 
interrupt status will be set and it will return immediately from the selection 
operation, possibly with a non-zero value, just as if the selector's 
wakeup(|java.nio.channels.Selector|) method were invoked. 

If none of the previous conditions hold then this thread's interrupt status 
will be set. 

Interrupting a thread that is not alive need not have any effect. 



*java.lang.Thread.interrupted()*

public static boolean interrupted()

Tests whether the current thread has been interrupted. The interrupted status 
of the thread is cleared by this method. In other words, if this method were to 
be called twice in succession, the second call would return false (unless the 
current thread were interrupted again, after the first call had cleared its 
interrupted status and before the second call had examined it). 

A thread interruption ignored because a thread was not alive at the time of the 
interrupt will be reflected by this method returning false. 



    Returns: true if the current thread has been interrupted; false otherwise. 

*java.lang.Thread.isAlive()*

public final native boolean isAlive()

Tests if this thread is alive. A thread is alive if it has been started and has 
not yet died. 



    Returns: true if this thread is alive; false otherwise. 

*java.lang.Thread.isDaemon()*

public final boolean isDaemon()

Tests if this thread is a daemon thread. 



    Returns: true if this thread is a daemon thread; false otherwise. 

*java.lang.Thread.isInterrupted()*

public boolean isInterrupted()

Tests whether this thread has been interrupted. The interrupted status of the 
thread is unaffected by this method. 

A thread interruption ignored because a thread was not alive at the time of the 
interrupt will be reflected by this method returning false. 



    Returns: true if this thread has been interrupted; false otherwise. 

*java.lang.Thread.join()*

public final void join()
  throws |java.lang.InterruptedException|
         
Waits for this thread to die. 

An invocation of this method behaves in exactly the same way as the invocation 

join(|java.lang.Thread|) (0) 



*java.lang.Thread.join(long)*

public final synchronized void join(long millis)
  throws |java.lang.InterruptedException|
         
Waits at mostmillismilliseconds for this thread to die. A timeout of0means to 
wait forever. 

This implementation uses a loop ofthis.waitcalls conditioned onthis.isAlive. As 
a thread terminates thethis.notifyAllmethod is invoked. It is recommended that 
applications not usewait,notify, ornotifyAllonThreadinstances. 


    millis - the time to wait in milliseconds 

*java.lang.Thread.join(long,int)*

public final synchronized void join(
  long millis,
  int nanos)
  throws |java.lang.InterruptedException|
         
Waits at mostmillismilliseconds plusnanosnanoseconds for this thread to die. 

This implementation uses a loop ofthis.waitcalls conditioned onthis.isAlive. As 
a thread terminates thethis.notifyAllmethod is invoked. It is recommended that 
applications not usewait,notify, ornotifyAllonThreadinstances. 


    millis - the time to wait in milliseconds 
    nanos - {@code 0-999999} additional nanoseconds to wait 

*java.lang.Thread.resume()*

public final void resume()

Resumes a suspended thread. 

First, the checkAccess method of this thread is called with no arguments. This 
may result in throwing a SecurityException (in the current thread). 

If the thread is alive but suspended, it is resumed and is permitted to make 
progress in its execution. 

    Deprecated: This method exists solely for use with {@link #suspend},
     which has been deprecated because it is deadlock-prone.
     For more information, see
     <a href="{@docRoot}/../technotes/guides/concurrency/threadPrimitiveDeprecation.html">Why
     are Thread.stop, Thread.suspend and Thread.resume Deprecated?</a>.


*java.lang.Thread.run()*

public void run()

If this thread was constructed using a separate Runnable run object, then that 
Runnable object's run method is called; otherwise, this method does nothing and 
returns. 

Subclasses of Thread should override this method. 



*java.lang.Thread.setContextClassLoader(ClassLoader)*

public void setContextClassLoader(java.lang.ClassLoader cl)

Sets the context ClassLoader for this Thread. The context ClassLoader can be 
set when a thread is created, and allows the creator of the thread to provide 
the appropriate class loader, throughgetContextClassLoader, to code running in 
the thread when loading classes and resources. 

If a security manager is present, its 
checkPermission(|java.lang.SecurityManager|) method is invoked with a 
RuntimePermission(|java.lang.RuntimePermission|) 
("setContextClassLoader")permission to see if setting the context ClassLoader 
is permitted. 


    cl - the context ClassLoader for this Thread, or null indicating the system class 
       loader (or, failing that, the bootstrap class loader) 

*java.lang.Thread.setDaemon(boolean)*

public final void setDaemon(boolean on)

Marks this thread as either a daemon(|java.lang.Thread|) thread or a user 
thread. The Java Virtual Machine exits when the only threads running are all 
daemon threads. 

This method must be invoked before the thread is started. 


    on - if {@code true}, marks this thread as a daemon thread 

*java.lang.Thread.setDefaultUncaughtExceptionHandler(Thread.UncaughtExceptionHandler)*

public static void setDefaultUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler eh)

Set the default handler invoked when a thread abruptly terminates due to an 
uncaught exception, and no other handler has been defined for that thread. 

Uncaught exception handling is controlled first by the thread, then by the 
thread's (|java.lang.ThreadGroup|) object and finally by the default uncaught 
exception handler. If the thread does not have an explicit uncaught exception 
handler set, and the thread's thread group (including parent thread groups) 
does not specialize its uncaughtException method, then the default handler's 
uncaughtException method will be invoked. By setting the default uncaught 
exception handler, an application can change the way in which uncaught 
exceptions are handled (such as logging to a specific device, or file) for 
those threads that would already accept whatever default behavior the system 
provided. 

Note that the default uncaught exception handler should not usually defer to 
the thread's ThreadGroup object, as that could cause infinite recursion. 


    eh - the object to use as the default uncaught exception handler. If null then there 
       is no default handler. 

*java.lang.Thread.setName(String)*

public final void setName(java.lang.String name)

Changes the name of this thread to be equal to the argument name. 

First the checkAccess method of this thread is called with no arguments. This 
may result in throwing a SecurityException. 


    name - the new name for this thread. 

*java.lang.Thread.setPriority(int)*

public final void setPriority(int newPriority)

Changes the priority of this thread. 

First the checkAccess method of this thread is called with no arguments. This 
may result in throwing a SecurityException. 

Otherwise, the priority of this thread is set to the smaller of the specified 
newPriority and the maximum permitted priority of the thread's thread group. 


    newPriority - priority to set this thread to 

*java.lang.Thread.setUncaughtExceptionHandler(Thread.UncaughtExceptionHandler)*

public void setUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler eh)

Set the handler invoked when this thread abruptly terminates due to an uncaught 
exception. A thread can take full control of how it responds to uncaught 
exceptions by having its uncaught exception handler explicitly set. If no such 
handler is set then the thread's ThreadGroup object acts as its handler. 


    eh - the object to use as this thread's uncaught exception handler. If null then 
       this thread has no explicit handler. 

*java.lang.Thread.sleep(long)*

public static native void sleep(long millis)
  throws |java.lang.InterruptedException|
         
Causes the currently executing thread to sleep (temporarily cease execution) 
for the specified number of milliseconds, subject to the precision and accuracy 
of system timers and schedulers. The thread does not lose ownership of any 
monitors. 


    millis - the length of time to sleep in milliseconds 

*java.lang.Thread.sleep(long,int)*

public static void sleep(
  long millis,
  int nanos)
  throws |java.lang.InterruptedException|
         
Causes the currently executing thread to sleep (temporarily cease execution) 
for the specified number of milliseconds plus the specified number of 
nanoseconds, subject to the precision and accuracy of system timers and 
schedulers. The thread does not lose ownership of any monitors. 


    millis - the length of time to sleep in milliseconds 
    nanos - {@code 0-999999} additional nanoseconds to sleep 

*java.lang.Thread.start()*

public synchronized void start()

Causes this thread to begin execution; the Java Virtual Machine calls the run 
method of this thread. 

The result is that two threads are running concurrently: the current thread 
(which returns from the call to the start method) and the other thread (which 
executes its run method). 

It is never legal to start a thread more than once. In particular, a thread may 
not be restarted once it has completed execution. 



*java.lang.Thread.stop()*

public final void stop()

Forces the thread to stop executing. 

If there is a security manager installed, its checkAccess method is called with 
this as its argument. This may result in a SecurityException being raised (in 
the current thread). 

If this thread is different from the current thread (that is, the current 
thread is trying to stop a thread other than itself), the security manager's 
checkPermission method (with a RuntimePermission("stopThread") argument) is 
called in addition. Again, this may result in throwing a SecurityException (in 
the current thread). 

The thread represented by this thread is forced to stop whatever it is doing 
abnormally and to throw a newly created ThreadDeath object as an exception. 

It is permitted to stop a thread that has not yet been started. If the thread 
is eventually started, it immediately terminates. 

An application should not normally try to catch ThreadDeath unless it must do 
some extraordinary cleanup operation (note that the throwing of ThreadDeath 
causes finally clauses of try statements to be executed before the thread 
officially dies). If a catch clause catches a ThreadDeath object, it is 
important to rethrow the object so that the thread actually dies. 

The top-level error handler that reacts to otherwise uncaught exceptions does 
not print out a message or otherwise notify the application if the uncaught 
exception is an instance of ThreadDeath. 

    Deprecated: This method is inherently unsafe.  Stopping a thread with
       Thread.stop causes it to unlock all of the monitors that it
       has locked (as a natural consequence of the unchecked
       <code>ThreadDeath</code> exception propagating up the stack).  If
       any of the objects previously protected by these monitors were in
       an inconsistent state, the damaged objects become visible to
       other threads, potentially resulting in arbitrary behavior.  Many
       uses of <code>stop</code> should be replaced by code that simply
       modifies some variable to indicate that the target thread should
       stop running.  The target thread should check this variable
       regularly, and return from its run method in an orderly fashion
       if the variable indicates that it is to stop running.  If the
       target thread waits for long periods (on a condition variable,
       for example), the <code>interrupt</code> method should be used to
       interrupt the wait.
       For more information, see
       <a href="{@docRoot}/../technotes/guides/concurrency/threadPrimitiveDeprecation.html">Why
       are Thread.stop, Thread.suspend and Thread.resume Deprecated?</a>.


*java.lang.Thread.stop(Throwable)*

public final synchronized void stop(java.lang.Throwable obj)

Forces the thread to stop executing. 

If there is a security manager installed, the checkAccess method of this thread 
is called, which may result in a SecurityException being raised (in the current 
thread). 

If this thread is different from the current thread (that is, the current 
thread is trying to stop a thread other than itself) or obj is not an instance 
of ThreadDeath, the security manager's checkPermission method (with the 
RuntimePermission("stopThread") argument) is called in addition. Again, this 
may result in throwing a SecurityException (in the current thread). 

If the argument obj is null, a NullPointerException is thrown (in the current 
thread). 

The thread represented by this thread is forced to stop whatever it is doing 
abnormally and to throw the Throwable object obj as an exception. This is an 
unusual action to take; normally, the stop method that takes no arguments 
should be used. 

It is permitted to stop a thread that has not yet been started. If the thread 
is eventually started, it immediately terminates. 

    Deprecated: This method is inherently unsafe.  See {@link #stop()}
        for details.  An additional danger of this
        method is that it may be used to generate exceptions that the
        target thread is unprepared to handle (including checked
        exceptions that the thread could not possibly throw, were it
        not for this method).
        For more information, see
        <a href="{@docRoot}/../technotes/guides/concurrency/threadPrimitiveDeprecation.html">Why
        are Thread.stop, Thread.suspend and Thread.resume Deprecated?</a>.

    obj - the Throwable object to be thrown. 

*java.lang.Thread.suspend()*

public final void suspend()

Suspends this thread. 

First, the checkAccess method of this thread is called with no arguments. This 
may result in throwing a SecurityException (in the current thread). 

If the thread is alive, it is suspended and makes no further progress unless 
and until it is resumed. 

    Deprecated: This method has been deprecated, as it is
   inherently deadlock-prone.  If the target thread holds a lock on the
   monitor protecting a critical system resource when it is suspended, no
   thread can access this resource until the target thread is resumed. If
   the thread that would resume the target thread attempts to lock this
   monitor prior to calling <code>resume</code>, deadlock results.  Such
   deadlocks typically manifest themselves as "frozen" processes.
   For more information, see
   <a href="{@docRoot}/../technotes/guides/concurrency/threadPrimitiveDeprecation.html">Why
   are Thread.stop, Thread.suspend and Thread.resume Deprecated?</a>.


*java.lang.Thread.toString()*

public |java.lang.String| toString()

Returns a string representation of this thread, including the thread's name, 
priority, and thread group. 



    Returns: a string representation of this thread. 

*java.lang.Thread.yield()*

public static native void yield()

A hint to the scheduler that the current thread is willing to yield its current 
use of a processor. The scheduler is free to ignore this hint. 

Yield is a heuristic attempt to improve relative progression between threads 
that would otherwise over-utilise a CPU. Its use should be combined with 
detailed profiling and benchmarking to ensure that it actually has the desired 
effect. 

It is rarely appropriate to use this method. It may be useful for debugging or 
testing purposes, where it may help to reproduce bugs due to race conditions. 
It may also be useful when designing concurrency control constructs such as the 
ones in the (|java.util.concurrent.locks|) package. 




