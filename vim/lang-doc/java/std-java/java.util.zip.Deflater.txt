*java.util.zip.Deflater* *Deflater* This class provides support for general purp

public class Deflater
  extends    |java.lang.Object|

|java.util.zip.Deflater_Description|
|java.util.zip.Deflater_Fields|
|java.util.zip.Deflater_Constructors|
|java.util.zip.Deflater_Methods|

================================================================================

*java.util.zip.Deflater_Fields*
|int_java.util.zip.Deflater.BEST_COMPRESSION|
|int_java.util.zip.Deflater.BEST_SPEED|
|int_java.util.zip.Deflater.DEFAULT_COMPRESSION|
|int_java.util.zip.Deflater.DEFAULT_STRATEGY|
|int_java.util.zip.Deflater.DEFLATED|
|int_java.util.zip.Deflater.FILTERED|
|int_java.util.zip.Deflater.FULL_FLUSH|
|int_java.util.zip.Deflater.HUFFMAN_ONLY|
|int_java.util.zip.Deflater.NO_COMPRESSION|
|int_java.util.zip.Deflater.NO_FLUSH|
|int_java.util.zip.Deflater.SYNC_FLUSH|

*java.util.zip.Deflater_Constructors*
|java.util.zip.Deflater()|Creates a new compressor with the default compression
|java.util.zip.Deflater(int)|Creates a new compressor using the specified compr
|java.util.zip.Deflater(int,boolean)|Creates a new compressor using the specifi

*java.util.zip.Deflater_Methods*
|java.util.zip.Deflater.deflate(byte[])|Compresses the input data and fills spe
|java.util.zip.Deflater.deflate(byte[],int,int)|Compresses the input data and f
|java.util.zip.Deflater.deflate(byte[],int,int,int)|Compresses the input data a
|java.util.zip.Deflater.end()|Closes the compressor and discards any unprocesse
|java.util.zip.Deflater.finalize()|Closes the compressor when garbage is collec
|java.util.zip.Deflater.finish()|When called, indicates that compression should
|java.util.zip.Deflater.finished()|Returns true if the end of the compressed da
|java.util.zip.Deflater.getAdler()|Returns the ADLER-32 value of the uncompress
|java.util.zip.Deflater.getBytesRead()|Returns the total number of uncompressed
|java.util.zip.Deflater.getBytesWritten()|Returns the total number of compresse
|java.util.zip.Deflater.getTotalIn()|Returns the total number of uncompressed b
|java.util.zip.Deflater.getTotalOut()|Returns the total number of compressed by
|java.util.zip.Deflater.needsInput()|Returns true if the input data buffer is e
|java.util.zip.Deflater.reset()|Resets deflater so that a new set of input data
|java.util.zip.Deflater.setDictionary(byte[])|Sets preset dictionary for compre
|java.util.zip.Deflater.setDictionary(byte[],int,int)|Sets preset dictionary fo
|java.util.zip.Deflater.setInput(byte[])|Sets input data for compression.
|java.util.zip.Deflater.setInput(byte[],int,int)|Sets input data for compressio
|java.util.zip.Deflater.setLevel(int)|Sets the current compression level to the
|java.util.zip.Deflater.setStrategy(int)|Sets the compression strategy to the s

*java.util.zip.Deflater_Description*

This class provides support for general purpose compression using the popular 
ZLIB compression library. The ZLIB compression library was initially developed 
as part of the PNG graphics standard and is not protected by patents. It is 
fully described in the specifications at the java.util.zip package description. 

The following code fragment demonstrates a trivial compression and 
decompression of a string using Deflater and Inflater. 



try { // Encode a String into bytes String inputString = "blahblahblah"; byte[] 
input = inputString.getBytes("UTF-8"); 

// Compress the bytes byte[] output = new byte[100]; Deflater compresser = new 
Deflater(); compresser.setInput(input); compresser.finish(); int 
compressedDataLength = compresser.deflate(output); compresser.end(); 

// Decompress the bytes Inflater decompresser = new Inflater(); 
decompresser.setInput(output, 0, compressedDataLength); byte[] result = new 
byte[100]; int resultLength = decompresser.inflate(result); decompresser.end(); 

// Decode the bytes into a String String outputString = new String(result, 0, 
resultLength, "UTF-8"); } catch(java.io.UnsupportedEncodingException ex) { // 
handle } catch (java.util.zip.DataFormatException ex) { // handle } 



*int_java.util.zip.Deflater.BEST_COMPRESSION*

Compression level for best compression. 


*int_java.util.zip.Deflater.BEST_SPEED*

Compression level for fastest compression. 


*int_java.util.zip.Deflater.DEFAULT_COMPRESSION*

Default compression level. 


*int_java.util.zip.Deflater.DEFAULT_STRATEGY*

Default compression strategy. 


*int_java.util.zip.Deflater.DEFLATED*

Compression method for the deflate algorithm (the only one currently 
supported). 


*int_java.util.zip.Deflater.FILTERED*

Compression strategy best used for data consisting mostly of small values with 
a somewhat random distribution. Forces more Huffman coding and less string 
matching. 


*int_java.util.zip.Deflater.FULL_FLUSH*

Compression flush mode used to flush out all pending output and reset the 
deflater. Using this mode too often can seriously degrade compression. 


*int_java.util.zip.Deflater.HUFFMAN_ONLY*

Compression strategy for Huffman coding only. 


*int_java.util.zip.Deflater.NO_COMPRESSION*

Compression level for no compression. 


*int_java.util.zip.Deflater.NO_FLUSH*

Compression flush mode used to achieve best compression result. 


*int_java.util.zip.Deflater.SYNC_FLUSH*

Compression flush mode used to flush out all pending output; may degrade 
compression for some compression algorithms. 



*java.util.zip.Deflater()*

public Deflater()

Creates a new compressor with the default compression level. Compressed data 
will be generated in ZLIB format. 


*java.util.zip.Deflater(int)*

public Deflater(int level)

Creates a new compressor using the specified compression level. Compressed data 
will be generated in ZLIB format. 

    level - the compression level (0-9) 

*java.util.zip.Deflater(int,boolean)*

public Deflater(
  int level,
  boolean nowrap)

Creates a new compressor using the specified compression level. If 'nowrap' is 
true then the ZLIB header and checksum fields will not be used in order to 
support the compression format used in both GZIP and PKZIP. 

    level - the compression level (0-9) 
    nowrap - if true then use GZIP compatible compression 

*java.util.zip.Deflater.deflate(byte[])*

public int deflate(byte[] b)

Compresses the input data and fills specified buffer with compressed data. 
Returns actual number of bytes of compressed data. A return value of 0 
indicates that needsInput(|java.util.zip.Deflater|) should be called in order 
to determine if more input data is required. 

This method uses (|java.util.zip.Deflater|) as its compression flush mode. An 
invocation of this method of the formdeflater.deflate(b)yields the same result 
as the invocation ofdeflater.deflate(b, 0, b.length, Deflater.NO_FLUSH). 


    b - the buffer for the compressed data 

    Returns: the actual number of bytes of compressed data written to the output buffer 

*java.util.zip.Deflater.deflate(byte[],int,int)*

public int deflate(
  byte[] b,
  int off,
  int len)

Compresses the input data and fills specified buffer with compressed data. 
Returns actual number of bytes of compressed data. A return value of 0 
indicates that needsInput(|java.util.zip.Deflater|) should be called in order 
to determine if more input data is required. 

This method uses (|java.util.zip.Deflater|) as its compression flush mode. An 
invocation of this method of the formdeflater.deflate(b, off, len)yields the 
same result as the invocation ofdeflater.deflate(b, off, len, 
Deflater.NO_FLUSH). 


    b - the buffer for the compressed data 
    off - the start offset of the data 
    len - the maximum number of bytes of compressed data 

    Returns: the actual number of bytes of compressed data written to the output buffer 

*java.util.zip.Deflater.deflate(byte[],int,int,int)*

public int deflate(
  byte[] b,
  int off,
  int len,
  int flush)

Compresses the input data and fills the specified buffer with compressed data. 
Returns actual number of bytes of data compressed. 

Compression flush mode is one of the following three modes: 

(|java.util.zip.Deflater|) : allows the deflater to decide how much data to 
accumulate, before producing output, in order to achieve the best compression 
(should be used in normal use scenario). A return value of 0 in this flush mode 
indicates that (|java.util.zip.Deflater|) should be called in order to 
determine if more input data is required. 

(|java.util.zip.Deflater|) : all pending output in the deflater is flushed, to 
the specified output buffer, so that an inflater that works on compressed data 
can get all input data available so far (In particular the 
(|java.util.zip.Deflater|) returnstrueafter this invocation if enough output 
space is provided). Flushing with (|java.util.zip.Deflater|) may degrade 
compression for some compression algorithms and so it should be used only when 
necessary. 

(|java.util.zip.Deflater|) : all pending output is flushed out as with 
(|java.util.zip.Deflater|) . The compression state is reset so that the 
inflater that works on the compressed output data can restart from this point 
if previous compressed data has been damaged or if random access is desired. 
Using (|java.util.zip.Deflater|) too often can seriously degrade compression. 

In the case of (|java.util.zip.Deflater|) or (|java.util.zip.Deflater|) , if 
the return value islen, the space available in output bufferb, this method 
should be invoked again with the sameflushparameter and more output space. 


    b - the buffer for the compressed data 
    off - the start offset of the data 
    len - the maximum number of bytes of compressed data 
    flush - the compression flush mode 

    Returns: the actual number of bytes of compressed data written to the output buffer 

*java.util.zip.Deflater.end()*

public void end()

Closes the compressor and discards any unprocessed input. This method should be 
called when the compressor is no longer being used, but will also be called 
automatically by the finalize() method. Once this method is called, the 
behavior of the Deflater object is undefined. 



*java.util.zip.Deflater.finalize()*

protected void finalize()

Closes the compressor when garbage is collected. 



*java.util.zip.Deflater.finish()*

public void finish()

When called, indicates that compression should end with the current contents of 
the input buffer. 



*java.util.zip.Deflater.finished()*

public boolean finished()

Returns true if the end of the compressed data output stream has been reached. 



    Returns: true if the end of the compressed data output stream has been reached 

*java.util.zip.Deflater.getAdler()*

public int getAdler()

Returns the ADLER-32 value of the uncompressed data. 



    Returns: the ADLER-32 value of the uncompressed data 

*java.util.zip.Deflater.getBytesRead()*

public long getBytesRead()

Returns the total number of uncompressed bytes input so far. 



    Returns: the total (non-negative) number of uncompressed bytes input so far 

*java.util.zip.Deflater.getBytesWritten()*

public long getBytesWritten()

Returns the total number of compressed bytes output so far. 



    Returns: the total (non-negative) number of compressed bytes output so far 

*java.util.zip.Deflater.getTotalIn()*

public int getTotalIn()

Returns the total number of uncompressed bytes input so far. 

Since the number of bytes may be greater than Integer.MAX_VALUE, the 
(|java.util.zip.Deflater|) method is now the preferred means of obtaining this 
information. 



    Returns: the total number of uncompressed bytes input so far 

*java.util.zip.Deflater.getTotalOut()*

public int getTotalOut()

Returns the total number of compressed bytes output so far. 

Since the number of bytes may be greater than Integer.MAX_VALUE, the 
(|java.util.zip.Deflater|) method is now the preferred means of obtaining this 
information. 



    Returns: the total number of compressed bytes output so far 

*java.util.zip.Deflater.needsInput()*

public boolean needsInput()

Returns true if the input data buffer is empty and setInput() should be called 
in order to provide more input. 



    Returns: true if the input data buffer is empty and setInput() should be called in order 
             to provide more input 

*java.util.zip.Deflater.reset()*

public void reset()

Resets deflater so that a new set of input data can be processed. Keeps current 
compression level and strategy settings. 



*java.util.zip.Deflater.setDictionary(byte[])*

public void setDictionary(byte[] b)

Sets preset dictionary for compression. A preset dictionary is used when the 
history buffer can be predetermined. When the data is later uncompressed with 
Inflater.inflate(), Inflater.getAdler() can be called in order to get the 
Adler-32 value of the dictionary required for decompression. 


    b - the dictionary data bytes 

*java.util.zip.Deflater.setDictionary(byte[],int,int)*

public void setDictionary(
  byte[] b,
  int off,
  int len)

Sets preset dictionary for compression. A preset dictionary is used when the 
history buffer can be predetermined. When the data is later uncompressed with 
Inflater.inflate(), Inflater.getAdler() can be called in order to get the 
Adler-32 value of the dictionary required for decompression. 


    b - the dictionary data bytes 
    off - the start offset of the data 
    len - the length of the data 

*java.util.zip.Deflater.setInput(byte[])*

public void setInput(byte[] b)

Sets input data for compression. This should be called whenever needsInput() 
returns true indicating that more input data is required. 


    b - the input data bytes 

*java.util.zip.Deflater.setInput(byte[],int,int)*

public void setInput(
  byte[] b,
  int off,
  int len)

Sets input data for compression. This should be called whenever needsInput() 
returns true indicating that more input data is required. 


    b - the input data bytes 
    off - the start offset of the data 
    len - the length of the data 

*java.util.zip.Deflater.setLevel(int)*

public void setLevel(int level)

Sets the current compression level to the specified value. 


    level - the new compression level (0-9) 

*java.util.zip.Deflater.setStrategy(int)*

public void setStrategy(int strategy)

Sets the compression strategy to the specified value. 


    strategy - the new compression strategy 


