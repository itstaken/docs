*javax.crypto.CipherInputStream* *CipherInputStream* A CipherInputStream is comp

public class CipherInputStream
  extends    |java.io.FilterInputStream|

|javax.crypto.CipherInputStream_Description|
|javax.crypto.CipherInputStream_Fields|
|javax.crypto.CipherInputStream_Constructors|
|javax.crypto.CipherInputStream_Methods|

================================================================================

*javax.crypto.CipherInputStream_Constructors*
|javax.crypto.CipherInputStream(InputStream)|Constructs a CipherInputStream fro
|javax.crypto.CipherInputStream(InputStream,Cipher)|Constructs a CipherInputStr

*javax.crypto.CipherInputStream_Methods*
|javax.crypto.CipherInputStream.available()|Returns the number of bytes that ca
|javax.crypto.CipherInputStream.close()|Closes this input stream and releases a
|javax.crypto.CipherInputStream.markSupported()|Tests if this input stream supp
|javax.crypto.CipherInputStream.read()|Reads the next byte of data from this in
|javax.crypto.CipherInputStream.read(byte[])|Reads up to b.length bytes of data
|javax.crypto.CipherInputStream.read(byte[],int,int)|Reads up to len bytes of d
|javax.crypto.CipherInputStream.skip(long)|Skips n bytes of input from the byte

*javax.crypto.CipherInputStream_Description*

A CipherInputStream is composed of an InputStream and a Cipher so that read() 
methods return data that are read in from the underlying InputStream but have 
been additionally processed by the Cipher. The Cipher must be fully initialized 
before being used by a CipherInputStream. 

For example, if the Cipher is initialized for decryption, the CipherInputStream 
will attempt to read in data and decrypt them, before returning the decrypted 
data. 

This class adheres strictly to the semantics, especially the failure semantics, 
of its ancestor classes java.io.FilterInputStream and java.io.InputStream. This 
class has exactly those methods specified in its ancestor classes, and 
overrides them all. Moreover, this class catches all exceptions that are not 
thrown by its ancestor classes. In particular, the skip method skips, and the 
available method counts only data that have been processed by the encapsulated 
Cipher. 

It is crucial for a programmer using this class not to use methods that are not 
defined or overriden in this class (such as a new method or constructor that is 
later added to one of the super classes), because the design and implementation 
of those methods are unlikely to have considered security impact with regard to 
CipherInputStream. 



*javax.crypto.CipherInputStream(InputStream)*

protected CipherInputStream(java.io.InputStream is)

Constructs a CipherInputStream from an InputStream without specifying a Cipher. 
This has the effect of constructing a CipherInputStream using a NullCipher. 
Note: if the specified input stream is null, a NullPointerException may be 
thrown later when it is used. 

    is - the to-be-processed input stream 

*javax.crypto.CipherInputStream(InputStream,Cipher)*

public CipherInputStream(
  java.io.InputStream is,
  javax.crypto.Cipher c)

Constructs a CipherInputStream from an InputStream and a Cipher. Note: if the 
specified input stream or cipher is null, a NullPointerException may be thrown 
later when they are used. 

    is - the to-be-processed input stream 
    c - an initialized Cipher object 

*javax.crypto.CipherInputStream.available()*

public int available()
  throws |java.io.IOException|
         
Returns the number of bytes that can be read from this input stream without 
blocking. The available method of InputStream returns 0. This method should be 
overridden by subclasses. 



    Returns: the number of bytes that can be read from this input stream without blocking. 

*javax.crypto.CipherInputStream.close()*

public void close()
  throws |java.io.IOException|
         
Closes this input stream and releases any system resources associated with the 
stream. 

The close method of CipherInputStream calls the close method of its underlying 
input stream. 



*javax.crypto.CipherInputStream.markSupported()*

public boolean markSupported()

Tests if this input stream supports the mark and reset methods, which it does 
not. 



    Returns: false, since this class does not support the mark and reset methods. 

*javax.crypto.CipherInputStream.read()*

public int read()
  throws |java.io.IOException|
         
Reads the next byte of data from this input stream. The value byte is returned 
as an int in the range 0 to 255. If no byte is available because the end of the 
stream has been reached, the value -1 is returned. This method blocks until 
input data is available, the end of the stream is detected, or an exception is 
thrown. 



    Returns: the next byte of data, or -1 if the end of the stream is reached. 

*javax.crypto.CipherInputStream.read(byte[])*

public int read(byte[] b)
  throws |java.io.IOException|
         
Reads up to b.length bytes of data from this input stream into an array of 
bytes. 

The read method of InputStream calls the read method of three arguments with 
the arguments b, 0, and b.length. 


    b - the buffer into which the data is read. 

    Returns: the total number of bytes read into the buffer, or -1 is there is no more data 
             because the end of the stream has been reached. 

*javax.crypto.CipherInputStream.read(byte[],int,int)*

public int read(
  byte[] b,
  int off,
  int len)
  throws |java.io.IOException|
         
Reads up to len bytes of data from this input stream into an array of bytes. 
This method blocks until some input is available. If the first argument is 
null, up to len bytes are read and discarded. 


    b - the buffer into which the data is read. 
    off - the start offset in the destination array buf 
    len - the maximum number of bytes read. 

    Returns: the total number of bytes read into the buffer, or -1 if there is no more data 
             because the end of the stream has been reached. 

*javax.crypto.CipherInputStream.skip(long)*

public long skip(long n)
  throws |java.io.IOException|
         
Skips n bytes of input from the bytes that can be read from this input stream 
without blocking. 

Fewer bytes than requested might be skipped. The actual number of bytes skipped 
is equal to n or the result of a call to 
<code>available</code>(|javax.crypto.CipherInputStream|) , whichever is 
smaller. If n is less than zero, no bytes are skipped. 

The actual number of bytes skipped is returned. 


    n - the number of bytes to be skipped. 

    Returns: the actual number of bytes skipped. 


