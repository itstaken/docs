*java.lang.ProcessBuilder* *ProcessBuilder* This class is used to create operati

public final class ProcessBuilder
  extends    |java.lang.Object|

|java.lang.ProcessBuilder_Description|
|java.lang.ProcessBuilder_Fields|
|java.lang.ProcessBuilder_Constructors|
|java.lang.ProcessBuilder_Methods|

================================================================================

*java.lang.ProcessBuilder_Constructors*
|java.lang.ProcessBuilder(List<String>)|Constructs a process builder with the s
|java.lang.ProcessBuilder(String...)|Constructs a process builder with the spec

*java.lang.ProcessBuilder_Methods*
|java.lang.ProcessBuilder.command()|Returns this process builder's operating sy
|java.lang.ProcessBuilder.command(List<String>)|Sets this process builder's ope
|java.lang.ProcessBuilder.command(String...)|Sets this process builder's operat
|java.lang.ProcessBuilder.directory()|Returns this process builder's working di
|java.lang.ProcessBuilder.directory(File)|Sets this process builder's working d
|java.lang.ProcessBuilder.environment()|Returns a string map view of this proce
|java.lang.ProcessBuilder.inheritIO()|Sets the source and destination for subpr
|java.lang.ProcessBuilder.redirectError()|Returns this process builder's standa
|java.lang.ProcessBuilder.redirectError(File)|Sets this process builder's stand
|java.lang.ProcessBuilder.redirectError(ProcessBuilder.Redirect)|Sets this proc
|java.lang.ProcessBuilder.redirectErrorStream()|Tells whether this process buil
|java.lang.ProcessBuilder.redirectErrorStream(boolean)|Sets this process builde
|java.lang.ProcessBuilder.redirectInput()|Returns this process builder's standa
|java.lang.ProcessBuilder.redirectInput(File)|Sets this process builder's stand
|java.lang.ProcessBuilder.redirectInput(ProcessBuilder.Redirect)|Sets this proc
|java.lang.ProcessBuilder.redirectOutput()|Returns this process builder's stand
|java.lang.ProcessBuilder.redirectOutput(File)|Sets this process builder's stan
|java.lang.ProcessBuilder.redirectOutput(ProcessBuilder.Redirect)|Sets this pro
|java.lang.ProcessBuilder.start()|Starts a new process using the attributes of 

*java.lang.ProcessBuilder_Description*

This class is used to create operating system processes. 

EachProcessBuilderinstance manages a collection of process attributes. The 
(|java.lang.ProcessBuilder|) method creates a new (|java.lang.Process|) 
instance with those attributes. The (|java.lang.ProcessBuilder|) method can be 
invoked repeatedly from the same instance to create new subprocesses with 
identical or related attributes. 

Each process builder manages these process attributes: 



a command, a list of strings which signifies the external program file to be 
invoked and its arguments, if any. Which string lists represent a valid 
operating system command is system-dependent. For example, it is common for 
each conceptual argument to be an element in this list, but there are operating 
systems where programs are expected to tokenize command line strings themselves 
- on such a system a Java implementation might require commands to contain 
exactly two elements. 

an environment, which is a system-dependent mapping from variables to values. 
The initial value is a copy of the environment of the current process (see 
(|java.lang.System|) ). 

a working directory. The default value is the current working directory of the 
current process, usually the directory named by the system propertyuser.dir. 

a source of standard input. By default, the subprocess reads input from a pipe. 
Java code can access this pipe via the output stream returned by 
(|java.lang.Process|) . However, standard input may be redirected to another 
source using redirectInput(|java.lang.ProcessBuilder|) . In this case, 
(|java.lang.Process|) will return a null output stream, for which: 

the write(|java.io.OutputStream|) methods always throwIOExceptionthe 
close(|java.io.OutputStream|) method does nothing 

a destination for standard output and standard error. By default, the 
subprocess writes standard output and standard error to pipes. Java code can 
access these pipes via the input streams returned by (|java.lang.Process|) and 
(|java.lang.Process|) . However, standard output and standard error may be 
redirected to other destinations using 
redirectOutput(|java.lang.ProcessBuilder|) and 
redirectError(|java.lang.ProcessBuilder|) . In this case, (|java.lang.Process|) 
and/or (|java.lang.Process|) will return a null input stream, for which: 

the read(|java.io.InputStream|) methods always return-1the 
available(|java.io.InputStream|) method always returns0the 
close(|java.io.InputStream|) method does nothing 

a redirectErrorStream property. Initially, this property isfalse, meaning that 
the standard output and error output of a subprocess are sent to two separate 
streams, which can be accessed using the (|java.lang.Process|) and 
(|java.lang.Process|) methods. 

If the value is set totrue, then: 

standard error is merged with the standard output and always sent to the same 
destination (this makes it easier to correlate error messages with the 
corresponding output) the common destination of standard error and standard 
output can be redirected using redirectOutput(|java.lang.ProcessBuilder|) any 
redirection set by the redirectError(|java.lang.ProcessBuilder|) method is 
ignored when creating a subprocess the stream returned from 
(|java.lang.Process|) will always be a null input stream 



Modifying a process builder's attributes will affect processes subsequently 
started by that object's (|java.lang.ProcessBuilder|) method, but will never 
affect previously started processes or the Java process itself. 

Most error checking is performed by the (|java.lang.ProcessBuilder|) method. It 
is possible to modify the state of an object so that 
(|java.lang.ProcessBuilder|) will fail. For example, setting the command 
attribute to an empty list will not throw an exception unless 
(|java.lang.ProcessBuilder|) is invoked. 

Note that this class is not synchronized. If multiple threads access 
aProcessBuilderinstance concurrently, and at least one of the threads modifies 
one of the attributes structurally, it must be synchronized externally. 

Starting a new process which uses the default working directory and environment 
is easy: 

Process p = new ProcessBuilder("myCommand", "myArg").start(); 

Here is an example that starts a process with a modified working directory and 
environment, and redirects standard output and error to be appended to a log 
file: 

ProcessBuilder pb = new ProcessBuilder("myCommand", "myArg1", "myArg2"); Map 
env = pb.environment(); env.put("VAR1", "myValue"); env.remove("OTHERVAR"); 
env.put("VAR2", env.get("VAR1") + "suffix"); pb.directory(new File("myDir")); 
File log = new File("log"); pb.redirectErrorStream(true); 
pb.redirectOutput(Redirect.appendTo(log)); Process p = pb.start(); assert 
pb.redirectInput() == Redirect.PIPE; assert pb.redirectOutput().file() == log; 
assert p.getInputStream().read() == -1; 

To start a process with an explicit set of environment variables, first call 
Map.clear()(|java.util.Map|) before adding environment variables. 



*java.lang.ProcessBuilder(List<String>)*

public ProcessBuilder(java.util.List<java.lang.String> command)

Constructs a process builder with the specified operating system program and 
arguments. This constructor does not make a copy of thecommandlist. Subsequent 
updates to the list will be reflected in the state of the process builder. It 
is not checked whethercommandcorresponds to a valid operating system command. 

    command - the list containing the program and its arguments 

*java.lang.ProcessBuilder(String...)*

public ProcessBuilder(java.lang.String[] command)

Constructs a process builder with the specified operating system program and 
arguments. This is a convenience constructor that sets the process builder's 
command to a string list containing the same strings as thecommandarray, in the 
same order. It is not checked whethercommandcorresponds to a valid operating 
system command. 

    command - a string array containing the program and its arguments 

*java.lang.ProcessBuilder.command()*

public |java.util.List|<String> command()

Returns this process builder's operating system program and arguments. The 
returned list is not a copy. Subsequent updates to the list will be reflected 
in the state of this process builder. 



    Returns: this process builder's program and its arguments 

*java.lang.ProcessBuilder.command(List<String>)*

public |java.lang.ProcessBuilder| command(java.util.List<java.lang.String> command)

Sets this process builder's operating system program and arguments. This method 
does not make a copy of thecommandlist. Subsequent updates to the list will be 
reflected in the state of the process builder. It is not checked 
whethercommandcorresponds to a valid operating system command. 


    command - the list containing the program and its arguments 

    Returns: this process builder 

*java.lang.ProcessBuilder.command(String...)*

public |java.lang.ProcessBuilder| command(java.lang.String[] command)

Sets this process builder's operating system program and arguments. This is a 
convenience method that sets the command to a string list containing the same 
strings as thecommandarray, in the same order. It is not checked 
whethercommandcorresponds to a valid operating system command. 


    command - a string array containing the program and its arguments 

    Returns: this process builder 

*java.lang.ProcessBuilder.directory()*

public |java.io.File| directory()

Returns this process builder's working directory. 

Subprocesses subsequently started by this object's (|java.lang.ProcessBuilder|) 
method will use this as their working directory. The returned value may 
benull-- this means to use the working directory of the current Java process, 
usually the directory named by the system propertyuser.dir, as the working 
directory of the child process. 



    Returns: this process builder's working directory 

*java.lang.ProcessBuilder.directory(File)*

public |java.lang.ProcessBuilder| directory(java.io.File directory)

Sets this process builder's working directory. 

Subprocesses subsequently started by this object's (|java.lang.ProcessBuilder|) 
method will use this as their working directory. The argument may benull-- this 
means to use the working directory of the current Java process, usually the 
directory named by the system propertyuser.dir, as the working directory of the 
child process. 


    directory - the new working directory 

    Returns: this process builder 

*java.lang.ProcessBuilder.environment()*

public |java.util.Map|<String,String> environment()

Returns a string map view of this process builder's environment. 

Whenever a process builder is created, the environment is initialized to a copy 
of the current process environment (see (|java.lang.System|) ). Subprocesses 
subsequently started by this object's (|java.lang.ProcessBuilder|) method will 
use this map as their environment. 

The returned object may be modified using ordinary Map(|java.util.Map|) 
operations. These modifications will be visible to subprocesses started via the 
(|java.lang.ProcessBuilder|) method. TwoProcessBuilderinstances always contain 
independent process environments, so changes to the returned map will never be 
reflected in any otherProcessBuilderinstance or the values returned by 
System.getenv(|java.lang.System|) . 

If the system does not support environment variables, an empty map is returned. 

The returned map does not permit null keys or values. Attempting to insert or 
query the presence of a null key or value will throw a 
(|java.lang.NullPointerException|) . Attempting to query the presence of a key 
or value which is not of type (|java.lang.String|) will throw a 
(|java.lang.ClassCastException|) . 

The behavior of the returned map is system-dependent. A system may not allow 
modifications to environment variables or may forbid certain variable names or 
values. For this reason, attempts to modify the map may fail with 
(|java.lang.UnsupportedOperationException|) or 
(|java.lang.IllegalArgumentException|) if the modification is not permitted by 
the operating system. 

Since the external format of environment variable names and values is 
system-dependent, there may not be a one-to-one mapping between them and Java's 
Unicode strings. Nevertheless, the map is implemented in such a way that 
environment variables which are not modified by Java code will have an 
unmodified native representation in the subprocess. 

The returned map and its collection views may not obey the general contract of 
the (|java.lang.Object|) and (|java.lang.Object|) methods. 

The returned map is typically case-sensitive on all platforms. 

If a security manager exists, its checkPermission(|java.lang.SecurityManager|) 
method is called with a (|java.lang.RuntimePermission|) ("getenv.*")permission. 
This may result in a (|java.lang.SecurityException|) being thrown. 

When passing information to a Java subprocess, system properties are generally 
preferred over environment variables. 



    Returns: this process builder's environment 

*java.lang.ProcessBuilder.inheritIO()*

public |java.lang.ProcessBuilder| inheritIO()

Sets the source and destination for subprocess standard I/O to be the same as 
those of the current Java process. 

This is a convenience method. An invocation of the form 

pb.inheritIO() 

behaves in exactly the same way as the invocation 

pb.redirectInput(Redirect.INHERIT) .redirectOutput(Redirect.INHERIT) 
.redirectError(Redirect.INHERIT) 

This gives behavior equivalent to most operating system command interpreters, 
or the standard C library functionsystem(). 



    Returns: this process builder 

*java.lang.ProcessBuilder.redirectError()*

public |java.lang.ProcessBuilder.Redirect| redirectError()

Returns this process builder's standard error destination. 

Subprocesses subsequently started by this object's (|java.lang.ProcessBuilder|) 
method redirect their standard error to this destination. The initial value is 
Redirect.PIPE(|java.lang.ProcessBuilder.Redirect|) . 



    Returns: this process builder's standard error destination 

*java.lang.ProcessBuilder.redirectError(File)*

public |java.lang.ProcessBuilder| redirectError(java.io.File file)

Sets this process builder's standard error destination to a file. 

This is a convenience method. An invocation of the 
formredirectError(file)behaves in exactly the same way as the invocation 
redirectError(|java.lang.ProcessBuilder|) (Redirect.to(file)). 


    file - the new standard error destination 

    Returns: this process builder 

*java.lang.ProcessBuilder.redirectError(ProcessBuilder.Redirect)*

public |java.lang.ProcessBuilder| redirectError(java.lang.ProcessBuilder.Redirect destination)

Sets this process builder's standard error destination. 

Subprocesses subsequently started by this object's (|java.lang.ProcessBuilder|) 
method send their standard error to this destination. 

If the destination is Redirect.PIPE(|java.lang.ProcessBuilder.Redirect|) (the 
initial value), then the error output of a subprocess can be read using the 
input stream returned by (|java.lang.Process|) . If the destination is set to 
any other value, then (|java.lang.Process|) will return a null input stream. 

If the redirectErrorStream(|java.lang.ProcessBuilder|) attribute has been 
settrue, then the redirection set by this method has no effect. 


    destination - the new standard error destination 

    Returns: this process builder 

*java.lang.ProcessBuilder.redirectErrorStream()*

public boolean redirectErrorStream()

Tells whether this process builder merges standard error and standard output. 

If this property istrue, then any error output generated by subprocesses 
subsequently started by this object's (|java.lang.ProcessBuilder|) method will 
be merged with the standard output, so that both can be read using the 
(|java.lang.Process|) method. This makes it easier to correlate error messages 
with the corresponding output. The initial value isfalse. 



    Returns: this process builder's {@code redirectErrorStream} property 

*java.lang.ProcessBuilder.redirectErrorStream(boolean)*

public |java.lang.ProcessBuilder| redirectErrorStream(boolean redirectErrorStream)

Sets this process builder'sredirectErrorStreamproperty. 

If this property istrue, then any error output generated by subprocesses 
subsequently started by this object's (|java.lang.ProcessBuilder|) method will 
be merged with the standard output, so that both can be read using the 
(|java.lang.Process|) method. This makes it easier to correlate error messages 
with the corresponding output. The initial value isfalse. 


    redirectErrorStream - the new property value 

    Returns: this process builder 

*java.lang.ProcessBuilder.redirectInput()*

public |java.lang.ProcessBuilder.Redirect| redirectInput()

Returns this process builder's standard input source. 

Subprocesses subsequently started by this object's (|java.lang.ProcessBuilder|) 
method obtain their standard input from this source. The initial value is 
Redirect.PIPE(|java.lang.ProcessBuilder.Redirect|) . 



    Returns: this process builder's standard input source 

*java.lang.ProcessBuilder.redirectInput(File)*

public |java.lang.ProcessBuilder| redirectInput(java.io.File file)

Sets this process builder's standard input source to a file. 

This is a convenience method. An invocation of the 
formredirectInput(file)behaves in exactly the same way as the invocation 
redirectInput(|java.lang.ProcessBuilder|) (Redirect.from(file)). 


    file - the new standard input source 

    Returns: this process builder 

*java.lang.ProcessBuilder.redirectInput(ProcessBuilder.Redirect)*

public |java.lang.ProcessBuilder| redirectInput(java.lang.ProcessBuilder.Redirect source)

Sets this process builder's standard input source. 

Subprocesses subsequently started by this object's (|java.lang.ProcessBuilder|) 
method obtain their standard input from this source. 

If the source is Redirect.PIPE(|java.lang.ProcessBuilder.Redirect|) (the 
initial value), then the standard input of a subprocess can be written to using 
the output stream returned by (|java.lang.Process|) . If the source is set to 
any other value, then (|java.lang.Process|) will return a null output stream. 


    source - the new standard input source 

    Returns: this process builder 

*java.lang.ProcessBuilder.redirectOutput()*

public |java.lang.ProcessBuilder.Redirect| redirectOutput()

Returns this process builder's standard output destination. 

Subprocesses subsequently started by this object's (|java.lang.ProcessBuilder|) 
method redirect their standard output to this destination. The initial value is 
Redirect.PIPE(|java.lang.ProcessBuilder.Redirect|) . 



    Returns: this process builder's standard output destination 

*java.lang.ProcessBuilder.redirectOutput(File)*

public |java.lang.ProcessBuilder| redirectOutput(java.io.File file)

Sets this process builder's standard output destination to a file. 

This is a convenience method. An invocation of the 
formredirectOutput(file)behaves in exactly the same way as the invocation 
redirectOutput(|java.lang.ProcessBuilder|) (Redirect.to(file)). 


    file - the new standard output destination 

    Returns: this process builder 

*java.lang.ProcessBuilder.redirectOutput(ProcessBuilder.Redirect)*

public |java.lang.ProcessBuilder| redirectOutput(java.lang.ProcessBuilder.Redirect destination)

Sets this process builder's standard output destination. 

Subprocesses subsequently started by this object's (|java.lang.ProcessBuilder|) 
method send their standard output to this destination. 

If the destination is Redirect.PIPE(|java.lang.ProcessBuilder.Redirect|) (the 
initial value), then the standard output of a subprocess can be read using the 
input stream returned by (|java.lang.Process|) . If the destination is set to 
any other value, then (|java.lang.Process|) will return a null input stream. 


    destination - the new standard output destination 

    Returns: this process builder 

*java.lang.ProcessBuilder.start()*

public |java.lang.Process| start()
  throws |java.io.IOException|
         
Starts a new process using the attributes of this process builder. 

The new process will invoke the command and arguments given by 
(|java.lang.ProcessBuilder|) , in a working directory as given by 
(|java.lang.ProcessBuilder|) , with a process environment as given by 
(|java.lang.ProcessBuilder|) . 

This method checks that the command is a valid operating system command. Which 
commands are valid is system-dependent, but at the very least the command must 
be a non-empty list of non-null strings. 

A minimal set of system dependent environment variables may be required to 
start a process on some operating systems. As a result, the subprocess may 
inherit additional environment variable settings beyond those in the process 
builder's (|java.lang.ProcessBuilder|) . 

If there is a security manager, its checkExec(|java.lang.SecurityManager|) 
method is called with the first component of this object'scommandarray as its 
argument. This may result in a (|java.lang.SecurityException|) being thrown. 

Starting an operating system process is highly system-dependent. Among the many 
things that can go wrong are: 

The operating system program file was not found. Access to the program file was 
denied. The working directory does not exist. 

In such cases an exception will be thrown. The exact nature of the exception is 
system-dependent, but it will always be a subclass of (|java.io.IOException|) . 

Subsequent modifications to this process builder will not affect the returned 
(|java.lang.Process|) . 



    Returns: a new {@link Process} object for managing the subprocess 


