*java.nio.file.LinkPermission* *LinkPermission* ThePermissionclass for link crea

public final class LinkPermission
  extends    |java.security.BasicPermission|

|java.nio.file.LinkPermission_Description|
|java.nio.file.LinkPermission_Fields|
|java.nio.file.LinkPermission_Constructors|
|java.nio.file.LinkPermission_Methods|

================================================================================

*java.nio.file.LinkPermission_Constructors*
|java.nio.file.LinkPermission(String)|Constructs aLinkPermissionwith the specif
|java.nio.file.LinkPermission(String,String)|Constructs aLinkPermissionwith the

*java.nio.file.LinkPermission_Description*

ThePermissionclass for link creation operations. 

The following table provides a summary description of what the permission 
allows, and discusses the risks of granting code the permission. 



Permission Target Name What the Permission Allows Risks of Allowing this 
Permission 

hard Ability to add an existing file to a directory. This is sometimes known as 
creating a link, or hard link. Extreme care should be taken when granting this 
permission. It allows linking to any file or directory in the file system thus 
allowing the attacker access to all files. 

symbolic Ability to create symbolic links. Extreme care should be taken when 
granting this permission. It allows linking to any file or directory in the 
file system thus allowing the attacker to access to all files. 





*java.nio.file.LinkPermission(String)*

public LinkPermission(java.lang.String name)

Constructs aLinkPermissionwith the specified name. 

    name - the name of the permission. It must be "hard" or "symbolic". 

*java.nio.file.LinkPermission(String,String)*

public LinkPermission(
  java.lang.String name,
  java.lang.String actions)

Constructs aLinkPermissionwith the specified name. 

    name - the name of the permission; must be "hard" or "symbolic". 
    actions - the actions for the permission; must be the empty string or {@code null} 

