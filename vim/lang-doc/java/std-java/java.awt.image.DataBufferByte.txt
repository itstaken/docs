*java.awt.image.DataBufferByte* *DataBufferByte* This class extends DataBuffer a

public final class DataBufferByte
  extends    |java.awt.image.DataBuffer|

|java.awt.image.DataBufferByte_Description|
|java.awt.image.DataBufferByte_Fields|
|java.awt.image.DataBufferByte_Constructors|
|java.awt.image.DataBufferByte_Methods|

================================================================================

*java.awt.image.DataBufferByte_Constructors*
|java.awt.image.DataBufferByte(byte[][],int)|Constructs a byte-based DataBuffer
|java.awt.image.DataBufferByte(byte[][],int,int[])|Constructs a byte-based Data
|java.awt.image.DataBufferByte(byte[],int)|Constructs a byte-based DataBuffer w
|java.awt.image.DataBufferByte(byte[],int,int)|Constructs a byte-based DataBuff
|java.awt.image.DataBufferByte(int)|Constructs a byte-based DataBuffer with a s
|java.awt.image.DataBufferByte(int,int)|Constructs a byte based DataBuffer with

*java.awt.image.DataBufferByte_Methods*
|java.awt.image.DataBufferByte.getBankData()|Returns the data arrays for all ba
|java.awt.image.DataBufferByte.getData()|Returns the default (first) byte data 
|java.awt.image.DataBufferByte.getData(int)|Returns the data array for the spec
|java.awt.image.DataBufferByte.getElem(int)|Returns the requested data array el
|java.awt.image.DataBufferByte.getElem(int,int)|Returns the requested data arra
|java.awt.image.DataBufferByte.setElem(int,int)|Sets the requested data array e
|java.awt.image.DataBufferByte.setElem(int,int,int)|Sets the requested data arr

*java.awt.image.DataBufferByte_Description*

This class extends DataBuffer and stores data internally as bytes. Values 
stored in the byte array(s) of this DataBuffer are treated as unsigned values. 

Note that some implementations may function more efficiently if they can 
maintain control over how the data for an image is stored. For example, 
optimizations such as caching an image in video memory require that the 
implementation track all modifications to that data. Other implementations may 
operate better if they can store the data in locations other than a Java array. 
To maintain optimum compatibility with various optimizations it is best to 
avoid constructors and methods which expose the underlying storage as a Java 
array, as noted below in the documentation for those methods. 



*java.awt.image.DataBufferByte(byte[][],int)*

public DataBufferByte(
  byte[][] dataArray,
  int size)

Constructs a byte-based DataBuffer with the specified arrays. The number of 
banks is equal to dataArray.length. Only the first size elements of each array 
should be used by accessors of this DataBuffer. 

Note thatDataBufferobjects created by this constructor may be incompatible with 
performance optimizations used by some implementations (such as caching an 
associated image in video memory). 

    dataArray - The byte arrays for the DataBuffer. 
    size - The size of the banks in the DataBuffer. 

*java.awt.image.DataBufferByte(byte[][],int,int[])*

public DataBufferByte(
  byte[][] dataArray,
  int size,
  int[] offsets)

Constructs a byte-based DataBuffer with the specified arrays, size, and 
offsets. The number of banks is equal to dataArray.length. Each array must be 
at least as large as size + the corresponding offset. There must be an entry in 
the offset array for each dataArray entry. For each bank, only elements offset 
through offset + size - 1 should be used by accessors of this DataBuffer. 

Note thatDataBufferobjects created by this constructor may be incompatible with 
performance optimizations used by some implementations (such as caching an 
associated image in video memory). 

    dataArray - The byte arrays for the DataBuffer. 
    size - The size of the banks in the DataBuffer. 
    offsets - The offsets into each array. 

*java.awt.image.DataBufferByte(byte[],int)*

public DataBufferByte(
  byte[] dataArray,
  int size)

Constructs a byte-based DataBuffer with a single bank using the specified 
array. Only the first size elements should be used by accessors of this 
DataBuffer. dataArray must be large enough to hold size elements. 

Note thatDataBufferobjects created by this constructor may be incompatible with 
performance optimizations used by some implementations (such as caching an 
associated image in video memory). 

    dataArray - The byte array for the DataBuffer. 
    size - The size of the DataBuffer bank. 

*java.awt.image.DataBufferByte(byte[],int,int)*

public DataBufferByte(
  byte[] dataArray,
  int size,
  int offset)

Constructs a byte-based DataBuffer with a single bank using the specified 
array, size, and offset. dataArray must have at least offset + size elements. 
Only elements offset through offset + size - 1 should be used by accessors of 
this DataBuffer. 

Note thatDataBufferobjects created by this constructor may be incompatible with 
performance optimizations used by some implementations (such as caching an 
associated image in video memory). 

    dataArray - The byte array for the DataBuffer. 
    size - The size of the DataBuffer bank. 
    offset - The offset into the dataArray. dataArray must have at least offset + size 
       elements. 

*java.awt.image.DataBufferByte(int)*

public DataBufferByte(int size)

Constructs a byte-based DataBuffer with a single bank and the specified size. 

    size - The size of the DataBuffer. 

*java.awt.image.DataBufferByte(int,int)*

public DataBufferByte(
  int size,
  int numBanks)

Constructs a byte based DataBuffer with the specified number of banks all of 
which are the specified size. 

    size - The size of the banks in the DataBuffer. 
    numBanks - The number of banks in the aDataBuffer. 

*java.awt.image.DataBufferByte.getBankData()*

public byte[][] getBankData()

Returns the data arrays for all banks. 

Note that calling this method may cause thisDataBufferobject to be incompatible 
with performance optimizations used by some implementations (such as caching an 
associated image in video memory). 



    Returns: All of the data arrays. 

*java.awt.image.DataBufferByte.getData()*

public byte[] getData()

Returns the default (first) byte data array. 

Note that calling this method may cause thisDataBufferobject to be incompatible 
with performance optimizations used by some implementations (such as caching an 
associated image in video memory). 



    Returns: The first byte data array. 

*java.awt.image.DataBufferByte.getData(int)*

public byte[] getData(int bank)

Returns the data array for the specified bank. 

Note that calling this method may cause thisDataBufferobject to be incompatible 
with performance optimizations used by some implementations (such as caching an 
associated image in video memory). 


    bank - The bank whose data array you want to get. 

    Returns: The data array for the specified bank. 

*java.awt.image.DataBufferByte.getElem(int)*

public int getElem(int i)

Returns the requested data array element from the first (default) bank. 


    i - The data array element you want to get. 

    Returns: The requested data array element as an integer. 

*java.awt.image.DataBufferByte.getElem(int,int)*

public int getElem(
  int bank,
  int i)

Returns the requested data array element from the specified bank. 


    bank - The bank from which you want to get a data array element. 
    i - The data array element you want to get. 

    Returns: The requested data array element as an integer. 

*java.awt.image.DataBufferByte.setElem(int,int)*

public void setElem(
  int i,
  int val)

Sets the requested data array element in the first (default) bank to the 
specified value. 


    i - The data array element you want to set. 
    val - The integer value to which you want to set the data array element. 

*java.awt.image.DataBufferByte.setElem(int,int,int)*

public void setElem(
  int bank,
  int i,
  int val)

Sets the requested data array element in the specified bank from the given 
integer. 


    bank - The bank in which you want to set the data array element. 
    i - The data array element you want to set. 
    val - The integer value to which you want to set the specified data array element. 


