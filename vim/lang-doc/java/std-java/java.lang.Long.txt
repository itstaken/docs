*java.lang.Long* *Long* TheLongclass wraps a value of the primitive typelongin a

public final class Long
  extends    |java.lang.Number|
  implements |java.lang.Comparable|

|java.lang.Long_Description|
|java.lang.Long_Fields|
|java.lang.Long_Constructors|
|java.lang.Long_Methods|

================================================================================

*java.lang.Long_Fields*
|long_java.lang.Long.MAX_VALUE|
|long_java.lang.Long.MIN_VALUE|
|int_java.lang.Long.SIZE|
|java.lang.Class<java.lang.Long>_java.lang.Long.TYPE|

*java.lang.Long_Constructors*
|java.lang.Long(long)|Constructs a newly allocatedLongobject that  represents t
|java.lang.Long(String)|Constructs a newly allocatedLongobject that  represents

*java.lang.Long_Methods*
|java.lang.Long.bitCount(long)|Returns the number of one-bits in the two's comp
|java.lang.Long.byteValue()|Returns the value of thisLongas abyte.
|java.lang.Long.compare(long,long)|Compares twolongvalues numerically.
|java.lang.Long.compareTo(Long)|Compares twoLongobjects numerically.
|java.lang.Long.decode(String)|Decodes aStringinto aLong.
|java.lang.Long.doubleValue()|Returns the value of thisLongas adouble.
|java.lang.Long.equals(Object)|Compares this object to the specified object.
|java.lang.Long.floatValue()|Returns the value of thisLongas afloat.
|java.lang.Long.getLong(String)|Determines thelongvalue of the system property 
|java.lang.Long.getLong(String,long)|Determines thelongvalue of the system prop
|java.lang.Long.getLong(String,Long)|Returns thelongvalue of the system propert
|java.lang.Long.hashCode()|Returns a hash code for thisLong.
|java.lang.Long.highestOneBit(long)|Returns alongvalue with at most a single on
|java.lang.Long.intValue()|Returns the value of thisLongas anint.
|java.lang.Long.longValue()|Returns the value of thisLongas alongvalue.
|java.lang.Long.lowestOneBit(long)|Returns alongvalue with at most a single one
|java.lang.Long.numberOfLeadingZeros(long)|Returns the number of zero bits prec
|java.lang.Long.numberOfTrailingZeros(long)|Returns the number of zero bits fol
|java.lang.Long.parseLong(String)|Parses the string argument as a signed decima
|java.lang.Long.parseLong(String,int)|Parses the string argument as a signedlon
|java.lang.Long.reverse(long)|Returns the value obtained by reversing the order
|java.lang.Long.reverseBytes(long)|Returns the value obtained by reversing the 
|java.lang.Long.rotateLeft(long,int)|Returns the value obtained by rotating the
|java.lang.Long.rotateRight(long,int)|Returns the value obtained by rotating th
|java.lang.Long.shortValue()|Returns the value of thisLongas ashort.
|java.lang.Long.signum(long)|Returns the signum function of the specifiedlongva
|java.lang.Long.toBinaryString(long)|Returns a string representation of thelong
|java.lang.Long.toHexString(long)|Returns a string representation of thelongarg
|java.lang.Long.toOctalString(long)|Returns a string representation of thelonga
|java.lang.Long.toString()|Returns aStringobject representing thisLong's value.
|java.lang.Long.toString(long)|Returns aStringobject representing the specified
|java.lang.Long.toString(long,int)|Returns a string representation of the first
|java.lang.Long.valueOf(long)|Returns aLonginstance representing the specifiedl
|java.lang.Long.valueOf(String)|Returns aLongobject holding the value  of the s
|java.lang.Long.valueOf(String,int)|Returns aLongobject holding the value  extr

*java.lang.Long_Description*

TheLongclass wraps a value of the primitive typelongin an object. An object of 
typeLongcontains a single field whose type islong. 

In addition, this class provides several methods for converting alongto 
aStringand aStringto along, as well as other constants and methods useful when 
dealing with along. 

Implementation note: The implementations of the "bit twiddling" methods (such 
as highestOneBit(|java.lang.Long|) and numberOfTrailingZeros(|java.lang.Long|) 
) are based on material from Henry S. Warren, Jr.'s Hacker's Delight, (Addison 
Wesley, 2002). 



*long_java.lang.Long.MAX_VALUE*

A constant holding the maximum value alongcan have, 263-1. 


*long_java.lang.Long.MIN_VALUE*

A constant holding the minimum value alongcan have, -263. 


*int_java.lang.Long.SIZE*

The number of bits used to represent alongvalue in two's complement binary 
form. 


*java.lang.Class<java.lang.Long>_java.lang.Long.TYPE*

TheClassinstance representing the primitive typelong. 



*java.lang.Long(long)*

public Long(long value)

Constructs a newly allocatedLongobject that represents the 
specifiedlongargument. 

    value - the value to be represented by the {@code Long} object. 

*java.lang.Long(String)*

public Long(java.lang.String s)
  throws |java.lang.NumberFormatException|
         
Constructs a newly allocatedLongobject that represents thelongvalue indicated 
by theStringparameter. The string is converted to alongvalue in exactly the 
manner used by theparseLongmethod for radix 10. 

    s - the {@code String} to be converted to a {@code Long}. 

*java.lang.Long.bitCount(long)*

public static int bitCount(long i)

Returns the number of one-bits in the two's complement binary representation of 
the specifiedlongvalue. This function is sometimes referred to as the 
population count. 



    Returns: the number of one-bits in the two's complement binary representation of the 
             specified {@code long} value. 

*java.lang.Long.byteValue()*

public byte byteValue()

Returns the value of thisLongas abyte. 



*java.lang.Long.compare(long,long)*

public static int compare(
  long x,
  long y)

Compares twolongvalues numerically. The value returned is identical to what 
would be returned by: 

Long.valueOf(x).compareTo(Long.valueOf(y)) 


    x - the first {@code long} to compare 
    y - the second {@code long} to compare 

    Returns: the value {@code 0} if {@code x == y}; a value less than {@code 0} if {@code x 
             y} 

*java.lang.Long.compareTo(Long)*

public int compareTo(java.lang.Long anotherLong)

Compares twoLongobjects numerically. 


    anotherLong - the {@code Long} to be compared. 

    Returns: the value {@code 0} if this {@code Long} is equal to the argument {@code Long}; 
             a value less than {@code 0} if this {@code Long} is numerically 
             less than the argument {@code Long}; and a value greater than 
             {@code 0} if this {@code Long} is numerically greater than the 
             argument {@code Long} (signed comparison). 

*java.lang.Long.decode(String)*

public static |java.lang.Long| decode(java.lang.String nm)
  throws |java.lang.NumberFormatException|
         
Decodes aStringinto aLong. Accepts decimal, hexadecimal, and octal numbers 
given by the following grammar: 



DecodableString: Signopt DecimalNumeral Signopt0xHexDigits Signopt0XHexDigits 
Signopt#HexDigits Signopt0OctalDigits 

Sign: -+ 

DecimalNumeral, HexDigits, and OctalDigits are as defined in section 3.10.1 of 
The Java Language Specification, except that underscores are not accepted 
between digits. 

The sequence of characters following an optional sign and/or radix specifier 
("0x", "0X", "#", or leading zero) is parsed as by theLong.parseLongmethod with 
the indicated radix (10, 16, or 8). This sequence of characters must represent 
a positive value or a (|java.lang.NumberFormatException|) will be thrown. The 
result is negated if first character of the specifiedStringis the minus sign. 
No whitespace characters are permitted in theString. 


    nm - the {@code String} to decode. 

    Returns: a {@code Long} object holding the {@code long} value represented by {@code nm} 

*java.lang.Long.doubleValue()*

public double doubleValue()

Returns the value of thisLongas adouble. 



*java.lang.Long.equals(Object)*

public boolean equals(java.lang.Object obj)

Compares this object to the specified object. The result istrueif and only if 
the argument is notnulland is aLongobject that contains the samelongvalue as 
this object. 


    obj - the object to compare with. 

    Returns: {@code true} if the objects are the same; {@code false} otherwise. 

*java.lang.Long.floatValue()*

public float floatValue()

Returns the value of thisLongas afloat. 



*java.lang.Long.getLong(String)*

public static |java.lang.Long| getLong(java.lang.String nm)

Determines thelongvalue of the system property with the specified name. 

The first argument is treated as the name of a system property. System 
properties are accessible through the (|java.lang.System|) method. The string 
value of this property is then interpreted as alongvalue and aLongobject 
representing this value is returned. Details of possible numeric formats can be 
found with the definition ofgetProperty. 

If there is no property with the specified name, if the specified name is empty 
ornull, or if the property does not have the correct numeric format, thennullis 
returned. 

In other words, this method returns aLongobject equal to the value of: 

getLong(nm, null) 


    nm - property name. 

    Returns: the {@code Long} value of the property. 

*java.lang.Long.getLong(String,long)*

public static |java.lang.Long| getLong(
  java.lang.String nm,
  long val)

Determines thelongvalue of the system property with the specified name. 

The first argument is treated as the name of a system property. System 
properties are accessible through the (|java.lang.System|) method. The string 
value of this property is then interpreted as alongvalue and aLongobject 
representing this value is returned. Details of possible numeric formats can be 
found with the definition ofgetProperty. 

The second argument is the default value. ALongobject that represents the value 
of the second argument is returned if there is no property of the specified 
name, if the property does not have the correct numeric format, or if the 
specified name is empty or null. 

In other words, this method returns aLongobject equal to the value of: 

getLong(nm, new Long(val)) 

but in practice it may be implemented in a manner such as: 



Long result = getLong(nm, null); return (result == null) ? new Long(val) : 
result; 

to avoid the unnecessary allocation of aLongobject when the default value is 
not needed. 


    nm - property name. 
    val - default value. 

    Returns: the {@code Long} value of the property. 

*java.lang.Long.getLong(String,Long)*

public static |java.lang.Long| getLong(
  java.lang.String nm,
  java.lang.Long val)

Returns thelongvalue of the system property with the specified name. The first 
argument is treated as the name of a system property. System properties are 
accessible through the (|java.lang.System|) method. The string value of this 
property is then interpreted as alongvalue, as per theLong.decodemethod, and 
aLongobject representing this value is returned. 

If the property value begins with the two ASCII characters0xor the ASCII 
character#, not followed by a minus sign, then the rest of it is parsed as a 
hexadecimal integer exactly as for the method (|java.lang.Long|) with radix 16. 
If the property value begins with the ASCII character0followed by another 
character, it is parsed as an octal integer exactly as by the method 
(|java.lang.Long|) with radix 8. Otherwise the property value is parsed as a 
decimal integer exactly as by the method (|java.lang.Long|) with radix 10. 

Note that, in every case, neitherL('u004C') norl('u006C') is permitted to 
appear at the end of the property value as a type indicator, as would be 
permitted in Java programming language source code. 

The second argument is the default value. The default value is returned if 
there is no property of the specified name, if the property does not have the 
correct numeric format, or if the specified name is empty ornull. 


    nm - property name. 
    val - default value. 

    Returns: the {@code Long} value of the property. 

*java.lang.Long.hashCode()*

public int hashCode()

Returns a hash code for thisLong. The result is the exclusive OR of the two 
halves of the primitivelongvalue held by thisLongobject. That is, the hashcode 
is the value of the expression: 

(int)(this.longValue()^(this.longValue()>>>32)) 



    Returns: a hash code value for this object. 

*java.lang.Long.highestOneBit(long)*

public static long highestOneBit(long i)

Returns alongvalue with at most a single one-bit, in the position of the 
highest-order ("leftmost") one-bit in the specifiedlongvalue. Returns zero if 
the specified value has no one-bits in its two's complement binary 
representation, that is, if it is equal to zero. 



    Returns: a {@code long} value with a single one-bit, in the position of the 
             highest-order one-bit in the specified value, or zero if the 
             specified value is itself equal to zero. 

*java.lang.Long.intValue()*

public int intValue()

Returns the value of thisLongas anint. 



*java.lang.Long.longValue()*

public long longValue()

Returns the value of thisLongas alongvalue. 



*java.lang.Long.lowestOneBit(long)*

public static long lowestOneBit(long i)

Returns alongvalue with at most a single one-bit, in the position of the 
lowest-order ("rightmost") one-bit in the specifiedlongvalue. Returns zero if 
the specified value has no one-bits in its two's complement binary 
representation, that is, if it is equal to zero. 



    Returns: a {@code long} value with a single one-bit, in the position of the lowest-order 
             one-bit in the specified value, or zero if the specified value is 
             itself equal to zero. 

*java.lang.Long.numberOfLeadingZeros(long)*

public static int numberOfLeadingZeros(long i)

Returns the number of zero bits preceding the highest-order ("leftmost") 
one-bit in the two's complement binary representation of the 
specifiedlongvalue. Returns 64 if the specified value has no one-bits in its 
two's complement representation, in other words if it is equal to zero. 

Note that this method is closely related to the logarithm base 2. For all 
positivelongvalues x: 

floor(log2(x)) =63 - numberOfLeadingZeros(x)ceil(log2(x)) =64 - 
numberOfLeadingZeros(x - 1) 



    Returns: the number of zero bits preceding the highest-order ("leftmost") one-bit in the 
             two's complement binary representation of the specified {@code 
             long} value, or 64 if the value is equal to zero. 

*java.lang.Long.numberOfTrailingZeros(long)*

public static int numberOfTrailingZeros(long i)

Returns the number of zero bits following the lowest-order ("rightmost") 
one-bit in the two's complement binary representation of the 
specifiedlongvalue. Returns 64 if the specified value has no one-bits in its 
two's complement representation, in other words if it is equal to zero. 



    Returns: the number of zero bits following the lowest-order ("rightmost") one-bit in the 
             two's complement binary representation of the specified {@code 
             long} value, or 64 if the value is equal to zero. 

*java.lang.Long.parseLong(String)*

public static long parseLong(java.lang.String s)
  throws |java.lang.NumberFormatException|
         
Parses the string argument as a signed decimallong. The characters in the 
string must all be decimal digits, except that the first character may be an 
ASCII minus sign'-'(u002D') to indicate a negative value or an ASCII plus 
sign'+'('u002B') to indicate a positive value. The resultinglongvalue is 
returned, exactly as if the argument and the radix10were given as arguments to 
the (|java.lang.Long|) method. 

Note that neither the characterL('u004C') norl('u006C') is permitted to appear 
at the end of the string as a type indicator, as would be permitted in Java 
programming language source code. 


    s - a {@code String} containing the {@code long} representation to be parsed 

    Returns: the {@code long} represented by the argument in decimal. 

*java.lang.Long.parseLong(String,int)*

public static long parseLong(
  java.lang.String s,
  int radix)
  throws |java.lang.NumberFormatException|
         
Parses the string argument as a signedlongin the radix specified by the second 
argument. The characters in the string must all be digits of the specified 
radix (as determined by whether (|java.lang.Character|) returns a nonnegative 
value), except that the first character may be an ASCII minus sign'-'('u002D') 
to indicate a negative value or an ASCII plus sign'+'('u002B') to indicate a 
positive value. The resultinglongvalue is returned. 

Note that neither the characterL('u004C') norl('u006C') is permitted to appear 
at the end of the string as a type indicator, as would be permitted in Java 
programming language source code - except that eitherLorlmay appear as a digit 
for a radix greater than 22. 

An exception of typeNumberFormatExceptionis thrown if any of the following 
situations occurs: 

The first argument isnullor is a string of length zero. 

Theradixis either smaller than (|java.lang.Character|) or larger than 
(|java.lang.Character|) . 

Any character of the string is not a digit of the specified radix, except that 
the first character may be a minus sign'-'('u002d') or plus sign'+'('u002B') 
provided that the string is longer than length 1. 

The value represented by the string is not a value of typelong. 

Examples: 

parseLong("0", 10) returns 0L parseLong("473", 10) returns 473L 
parseLong("+42", 10) returns 42L parseLong("-0", 10) returns 0L 
parseLong("-FF", 16) returns -255L parseLong("1100110", 2) returns 102L 
parseLong("99", 8) throws a NumberFormatException parseLong("Hazelnut", 10) 
throws a NumberFormatException parseLong("Hazelnut", 36) returns 1356099454469L 


    s - the {@code String} containing the {@code long} representation to be parsed. 
    radix - the radix to be used while parsing {@code s}. 

    Returns: the {@code long} represented by the string argument in the specified radix. 

*java.lang.Long.reverse(long)*

public static long reverse(long i)

Returns the value obtained by reversing the order of the bits in the two's 
complement binary representation of the specifiedlongvalue. 



    Returns: the value obtained by reversing order of the bits in the specified {@code long} 
             value. 

*java.lang.Long.reverseBytes(long)*

public static long reverseBytes(long i)

Returns the value obtained by reversing the order of the bytes in the two's 
complement representation of the specifiedlongvalue. 



    Returns: the value obtained by reversing the bytes in the specified {@code long} value. 

*java.lang.Long.rotateLeft(long,int)*

public static long rotateLeft(
  long i,
  int distance)

Returns the value obtained by rotating the two's complement binary 
representation of the specifiedlongvalue left by the specified number of bits. 
(Bits shifted out of the left hand, or high-order, side reenter on the right, 
or low-order.) 

Note that left rotation with a negative distance is equivalent to right 
rotation:rotateLeft(val, -distance) == rotateRight(val, distance). Note also 
that rotation by any multiple of 64 is a no-op, so all but the last six bits of 
the rotation distance can be ignored, even if the distance is 
negative:rotateLeft(val, distance) == rotateLeft(val, distance & 0x3F). 



    Returns: the value obtained by rotating the two's complement binary representation of 
             the specified {@code long} value left by the specified number of 
             bits. 

*java.lang.Long.rotateRight(long,int)*

public static long rotateRight(
  long i,
  int distance)

Returns the value obtained by rotating the two's complement binary 
representation of the specifiedlongvalue right by the specified number of bits. 
(Bits shifted out of the right hand, or low-order, side reenter on the left, or 
high-order.) 

Note that right rotation with a negative distance is equivalent to left 
rotation:rotateRight(val, -distance) == rotateLeft(val, distance). Note also 
that rotation by any multiple of 64 is a no-op, so all but the last six bits of 
the rotation distance can be ignored, even if the distance is 
negative:rotateRight(val, distance) == rotateRight(val, distance & 0x3F). 



    Returns: the value obtained by rotating the two's complement binary representation of 
             the specified {@code long} value right by the specified number of 
             bits. 

*java.lang.Long.shortValue()*

public short shortValue()

Returns the value of thisLongas ashort. 



*java.lang.Long.signum(long)*

public static int signum(long i)

Returns the signum function of the specifiedlongvalue. (The return value is -1 
if the specified value is negative; 0 if the specified value is zero; and 1 if 
the specified value is positive.) 



    Returns: the signum function of the specified {@code long} value. 

*java.lang.Long.toBinaryString(long)*

public static |java.lang.String| toBinaryString(long i)

Returns a string representation of thelongargument as an unsigned integer in 
base2. 

The unsignedlongvalue is the argument plus 264 if the argument is negative; 
otherwise, it is equal to the argument. This value is converted to a string of 
ASCII digits in binary (base2) with no extra leading0s. If the unsigned 
magnitude is zero, it is represented by a single zero character'0'('u0030'); 
otherwise, the first character of the representation of the unsigned magnitude 
will not be the zero character. The characters'0'('u0030') and'1'('u0031') are 
used as binary digits. 


    i - a {@code long} to be converted to a string. 

    Returns: the string representation of the unsigned {@code long} value represented by the 
             argument in binary (base2). 

*java.lang.Long.toHexString(long)*

public static |java.lang.String| toHexString(long i)

Returns a string representation of thelongargument as an unsigned integer in 
base16. 

The unsignedlongvalue is the argument plus 264 if the argument is negative; 
otherwise, it is equal to the argument. This value is converted to a string of 
ASCII digits in hexadecimal (base16) with no extra leading0s. If the unsigned 
magnitude is zero, it is represented by a single zero character'0'('u0030'); 
otherwise, the first character of the representation of the unsigned magnitude 
will not be the zero character. The following characters are used as 
hexadecimal digits: 

0123456789abcdef 

These are the characters 'u0030' through 'u0039' and 'u0061' through 'u0066'. 
If uppercase letters are desired, the (|java.lang.String|) method may be called 
on the result: 

Long.toHexString(n).toUpperCase() 


    i - a {@code long} to be converted to a string. 

    Returns: the string representation of the unsigned {@code long} value represented by the 
             argument in hexadecimal (base16). 

*java.lang.Long.toOctalString(long)*

public static |java.lang.String| toOctalString(long i)

Returns a string representation of thelongargument as an unsigned integer in 
base8. 

The unsignedlongvalue is the argument plus 264 if the argument is negative; 
otherwise, it is equal to the argument. This value is converted to a string of 
ASCII digits in octal (base8) with no extra leading0s. 

If the unsigned magnitude is zero, it is represented by a single zero 
character'0'('u0030'); otherwise, the first character of the representation of 
the unsigned magnitude will not be the zero character. The following characters 
are used as octal digits: 

01234567 

These are the characters 'u0030' through 'u0037'. 


    i - a {@code long} to be converted to a string. 

    Returns: the string representation of the unsigned {@code long} value represented by the 
             argument in octal (base8). 

*java.lang.Long.toString()*

public |java.lang.String| toString()

Returns aStringobject representing thisLong's value. The value is converted to 
signed decimal representation and returned as a string, exactly as if 
thelongvalue were given as an argument to the (|java.lang.Long|) method. 



    Returns: a string representation of the value of this object in base10. 

*java.lang.Long.toString(long)*

public static |java.lang.String| toString(long i)

Returns aStringobject representing the specifiedlong. The argument is converted 
to signed decimal representation and returned as a string, exactly as if the 
argument and the radix 10 were given as arguments to the (|java.lang.Long|) 
method. 


    i - a {@code long} to be converted. 

    Returns: a string representation of the argument in base10. 

*java.lang.Long.toString(long,int)*

public static |java.lang.String| toString(
  long i,
  int radix)

Returns a string representation of the first argument in the radix specified by 
the second argument. 

If the radix is smaller thanCharacter.MIN_RADIXor larger 
thanCharacter.MAX_RADIX, then the radix10is used instead. 

If the first argument is negative, the first element of the result is the ASCII 
minus sign'-'('u002d'). If the first argument is not negative, no sign 
character appears in the result. 

The remaining characters of the result represent the magnitude of the first 
argument. If the magnitude is zero, it is represented by a single zero 
character'0'('u0030'); otherwise, the first character of the representation of 
the magnitude will not be the zero character. The following ASCII characters 
are used as digits: 

0123456789abcdefghijklmnopqrstuvwxyz 

These are 'u0030' through 'u0039' and 'u0061' through 'u007a'. Ifradixis N, 
then the first N of these characters are used as radix-N digits in the order 
shown. Thus, the digits for hexadecimal (radix 16) are0123456789abcdef. If 
uppercase letters are desired, the (|java.lang.String|) method may be called on 
the result: 

Long.toString(n, 16).toUpperCase() 


    i - a {@code long} to be converted to a string. 
    radix - the radix to use in the string representation. 

    Returns: a string representation of the argument in the specified radix. 

*java.lang.Long.valueOf(long)*

public static |java.lang.Long| valueOf(long l)

Returns aLonginstance representing the specifiedlongvalue. If a newLonginstance 
is not required, this method should generally be used in preference to the 
constructor (|java.lang.Long|) , as this method is likely to yield 
significantly better space and time performance by caching frequently requested 
values. 

Note that unlike the corresponding method(|java.lang.Integer|) in 
theIntegerclass, this method is not required to cache values within a 
particular range. 


    l - a long value. 

    Returns: a {@code Long} instance representing {@code l}. 

*java.lang.Long.valueOf(String)*

public static |java.lang.Long| valueOf(java.lang.String s)
  throws |java.lang.NumberFormatException|
         
Returns aLongobject holding the value of the specifiedString. The argument is 
interpreted as representing a signed decimallong, exactly as if the argument 
were given to the (|java.lang.Long|) method. The result is aLongobject that 
represents the integer value specified by the string. 

In other words, this method returns aLongobject equal to the value of: 

new Long(Long.parseLong(s)) 


    s - the string to be parsed. 

    Returns: a {@code Long} object holding the value represented by the string argument. 

*java.lang.Long.valueOf(String,int)*

public static |java.lang.Long| valueOf(
  java.lang.String s,
  int radix)
  throws |java.lang.NumberFormatException|
         
Returns aLongobject holding the value extracted from the specifiedStringwhen 
parsed with the radix given by the second argument. The first argument is 
interpreted as representing a signedlongin the radix specified by the second 
argument, exactly as if the arguments were given to the (|java.lang.Long|) 
method. The result is aLongobject that represents thelongvalue specified by the 
string. 

In other words, this method returns aLongobject equal to the value of: 

new Long(Long.parseLong(s, radix)) 


    s - the string to be parsed 
    radix - the radix to be used in interpreting {@code s} 

    Returns: a {@code Long} object holding the value represented by the string argument in 
             the specified radix. 


