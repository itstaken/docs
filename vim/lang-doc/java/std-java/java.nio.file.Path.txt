*java.nio.file.Path* *Path* An object that may be used to locate a file in a fil

public interface interface Path

  implements |java.lang.Comparable|
             |java.lang.Iterable|
             |java.nio.file.Watchable|

|java.nio.file.Path_Description|
|java.nio.file.Path_Fields|
|java.nio.file.Path_Constructors|
|java.nio.file.Path_Methods|

================================================================================

*java.nio.file.Path_Methods*
|java.nio.file.Path.compareTo(Path)|Compares two abstract paths lexicographical
|java.nio.file.Path.endsWith(Path)|Tests if this path ends with the given path.
|java.nio.file.Path.endsWith(String)|Tests if this path ends with aPath, constr
|java.nio.file.Path.equals(Object)|Tests this path for equality with the given 
|java.nio.file.Path.getFileName()|Returns the name of the file or directory den
|java.nio.file.Path.getFileSystem()|Returns the file system that created this o
|java.nio.file.Path.getName(int)|Returns a name element of this path as aPathob
|java.nio.file.Path.getNameCount()|Returns the number of name elements in the p
|java.nio.file.Path.getParent()|Returns the parent path, ornullif this path doe
|java.nio.file.Path.getRoot()|Returns the root component of this path as aPatho
|java.nio.file.Path.hashCode()|Computes a hash code for this path.
|java.nio.file.Path.isAbsolute()|Tells whether or not this path is absolute.
|java.nio.file.Path.iterator()|Returns an iterator over the name elements of th
|java.nio.file.Path.normalize()|Returns a path that is this path with redundant
|java.nio.file.Path.register(WatchService,WatchEvent.Kind<?>...)|Registers the 
|java.nio.file.Path.register(WatchService,WatchEvent.Kind<?>[],WatchEvent.Modifier...)|
|java.nio.file.Path.relativize(Path)|Constructs a relative path between this pa
|java.nio.file.Path.resolve(Path)|Resolve the given path against this path.
|java.nio.file.Path.resolve(String)|Converts a given path string to aPathand re
|java.nio.file.Path.resolveSibling(Path)|Resolves the given path against this p
|java.nio.file.Path.resolveSibling(String)|Converts a given path string to aPat
|java.nio.file.Path.startsWith(Path)|Tests if this path starts with the given p
|java.nio.file.Path.startsWith(String)|Tests if this path starts with aPath, co
|java.nio.file.Path.subpath(int,int)|Returns a relativePaththat is a subsequenc
|java.nio.file.Path.toAbsolutePath()|Returns aPathobject representing the absol
|java.nio.file.Path.toFile()|Returns aFileobject representing this path.
|java.nio.file.Path.toRealPath(LinkOption...)|Returns the real path of an exist
|java.nio.file.Path.toString()|Returns the string representation of this path.
|java.nio.file.Path.toUri()|Returns a URI to represent this path.

*java.nio.file.Path_Description*

An object that may be used to locate a file in a file system. It will typically 
represent a system dependent file path. 

APathrepresents a path that is hierarchical and composed of a sequence of 
directory and file name elements separated by a special separator or delimiter. 
A root component, that identifies a file system hierarchy, may also be present. 
The name element that is farthest from the root of the directory hierarchy is 
the name of a file or directory. The other name elements are directory names. 
APathcan represent a root, a root and a sequence of names, or simply one or 
more name elements. APathis considered to be an empty path if it consists 
solely of one name element that is empty. Accessing a file using an empty path 
is equivalent to accessing the default directory of the file system.Pathdefines 
the getFileName(|java.nio.file.Path|) , getParent(|java.nio.file.Path|) , 
getRoot(|java.nio.file.Path|) , and subpath(|java.nio.file.Path|) methods to 
access the path components or a subsequence of its name elements. 

In addition to accessing the components of a path, aPathalso defines the 
resolve(|java.nio.file.Path|) and resolveSibling(|java.nio.file.Path|) methods 
to combine paths. The relativize(|java.nio.file.Path|) method that can be used 
to construct a relative path between two paths. Paths can be 
compared(|java.nio.file.Path|) , and tested against each other using the 
startsWith(|java.nio.file.Path|) and endWith(|java.nio.file.Path|) methods. 

This interface extends (|java.nio.file.Watchable|) interface so that a 
directory located by a path can be registered(|java.nio.file.Path|) with a 
(|java.nio.file.WatchService|) and entries in the directory watched. 

WARNING: This interface is only intended to be implemented by those developing 
custom file system implementations. Methods may be added to this interface in 
future releases. 

Accessing Files Paths may be used with the (|java.nio.file.Files|) class to 
operate on files, directories, and other types of files. For example, suppose 
we want a (|java.io.BufferedReader|) to read text from a file "access.log". The 
file is located in a directory "logs" relative to the current working directory 
and is UTF-8 encoded. 

Path path = FileSystems.getDefault().getPath("logs", "access.log"); 
BufferReader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8); 

Interoperability Paths associated with the default 
provider(|java.nio.file.spi.FileSystemProvider|) are generally interoperable 
with the java.io.File(|java.io.File|) class. Paths created by other providers 
are unlikely to be interoperable with the abstract path names represented 
byjava.io.File. The toPath(|java.io.File|) method may be used to obtain 
aPathfrom the abstract path name represented by ajava.io.Fileobject. The 
resultingPathcan be used to operate on the same file as thejava.io.Fileobject. 
In addition, the toFile(|java.nio.file.Path|) method is useful to construct 
aFilefrom theStringrepresentation of aPath. 

Concurrency Implementations of this interface are immutable and safe for use by 
multiple concurrent threads. 



*java.nio.file.Path.compareTo(Path)*

public int compareTo(java.nio.file.Path other)

Compares two abstract paths lexicographically. The ordering defined by this 
method is provider specific, and in the case of the default provider, platform 
specific. This method does not access the file system and neither file is 
required to exist. 

This method may not be used to compare paths that are associated with different 
file system providers. 


    other - the path compared to this path. 

    Returns: zero if the argument is {@link #equals equal} to this path, a value less than 
             zero if this path is lexicographically less than the argument, or 
             a value greater than zero if this path is lexicographically 
             greater than the argument 

*java.nio.file.Path.endsWith(Path)*

public boolean endsWith(java.nio.file.Path other)

Tests if this path ends with the given path. 

If the given path has N elements, and no root component, and this path has N or 
more elements, then this path ends with the given path if the last N elements 
of each path, starting at the element farthest from the root, are equal. 

If the given path has a root component then this path ends with the given path 
if the root component of this path ends with the root component of the given 
path, and the corresponding elements of both paths are equal. Whether or not 
the root component of this path ends with the root component of the given path 
is file system specific. If this path does not have a root component and the 
given path has a root component then this path does not end with the given 
path. 

If the given path is associated with a differentFileSystemto this path 
thenfalseis returned. 


    other - the given path 

    Returns: {@code true} if this path ends with the given path; otherwise {@code false} 

*java.nio.file.Path.endsWith(String)*

public boolean endsWith(java.lang.String other)

Tests if this path ends with aPath, constructed by converting the given path 
string, in exactly the manner specified by the 
endsWith(Path)(|java.nio.file.Path|) method. On UNIX for example, the path 
"foo/bar" ends with "foo/bar" and "bar". It does not end with "r" or "/bar". 
Note that trailing separators are not taken into account, and so invoking this 
method on thePath"foo/bar" with theString"bar/" returnstrue. 


    other - the given path string 

    Returns: {@code true} if this path starts with the given path; otherwise {@code false} 

*java.nio.file.Path.equals(Object)*

public boolean equals(java.lang.Object other)

Tests this path for equality with the given object. 

If the given object is not a Path, or is a Path associated with a 
differentFileSystem, then this method returnsfalse. 

Whether or not two path are equal depends on the file system implementation. In 
some cases the paths are compared without regard to case, and others are case 
sensitive. This method does not access the file system and the file is not 
required to exist. Where required, the isSameFile(|java.nio.file.Files|) method 
may be used to check if two paths locate the same file. 

This method satisfies the general contract of the 
Object.equals(|java.lang.Object|) method. 


    other - the object to which this object is to be compared 

    Returns: {@code true} if, and only if, the given object is a {@code Path} that is 
             identical to this {@code Path} 

*java.nio.file.Path.getFileName()*

public |java.nio.file.Path| getFileName()

Returns the name of the file or directory denoted by this path as aPathobject. 
The file name is the farthest element from the root in the directory hierarchy. 



    Returns: a path representing the name of the file or directory, or {@code null} if this 
             path has zero elements 

*java.nio.file.Path.getFileSystem()*

public |java.nio.file.FileSystem| getFileSystem()

Returns the file system that created this object. 



    Returns: the file system that created this object 

*java.nio.file.Path.getName(int)*

public |java.nio.file.Path| getName(int index)

Returns a name element of this path as aPathobject. 

Theindexparameter is the index of the name element to return. The element that 
is closest to the root in the directory hierarchy has index0. The element that 
is farthest from the root has index count(|java.nio.file.Path|) -1. 


    index - the index of the element 

    Returns: the name element 

*java.nio.file.Path.getNameCount()*

public int getNameCount()

Returns the number of name elements in the path. 



    Returns: the number of elements in the path, or {@code 0} if this path only represents a 
             root component 

*java.nio.file.Path.getParent()*

public |java.nio.file.Path| getParent()

Returns the parent path, ornullif this path does not have a parent. 

The parent of this path object consists of this path's root component, if any, 
and each element in the path except for the farthest from the root in the 
directory hierarchy. This method does not access the file system; the path or 
its parent may not exist. Furthermore, this method does not eliminate special 
names such as "." and ".." that may be used in some implementations. On UNIX 
for example, the parent of "/a/b/c" is "/a/b", and the parent of"x/y/." is 
"x/y". This method may be used with the normalize(|java.nio.file.Path|) method, 
to eliminate redundant names, for cases where shell-like navigation is 
required. 

If this path has one or more elements, and no root component, then this method 
is equivalent to evaluating the expression: 

subpath(0,getNameCount()-1); 



    Returns: a path representing the path's parent 

*java.nio.file.Path.getRoot()*

public |java.nio.file.Path| getRoot()

Returns the root component of this path as aPathobject, ornullif this path does 
not have a root component. 



    Returns: a path representing the root component of this path, or {@code null} 

*java.nio.file.Path.hashCode()*

public int hashCode()

Computes a hash code for this path. 

The hash code is based upon the components of the path, and satisfies the 
general contract of the Object.hashCode(|java.lang.Object|) method. 



    Returns: the hash-code value for this path 

*java.nio.file.Path.isAbsolute()*

public boolean isAbsolute()

Tells whether or not this path is absolute. 

An absolute path is complete in that it doesn't need to be combined with other 
path information in order to locate a file. 



    Returns: {@code true} if, and only if, this path is absolute 

*java.nio.file.Path.iterator()*

public |java.util.Iterator|<Path> iterator()

Returns an iterator over the name elements of this path. 

The first element returned by the iterator represents the name element that is 
closest to the root in the directory hierarchy, the second element is the next 
closest, and so on. The last element returned is the name of the file or 
directory denoted by this path. The root(|java.nio.file.Path|) component, if 
present, is not returned by the iterator. 



    Returns: an iterator over the name elements of this path. 

*java.nio.file.Path.normalize()*

public |java.nio.file.Path| normalize()

Returns a path that is this path with redundant name elements eliminated. 

The precise definition of this method is implementation dependent but in 
general it derives from this path, a path that does not contain redundant name 
elements. In many file systems, the "." and ".." are special names used to 
indicate the current directory and parent directory. In such file systems all 
occurrences of "." are considered redundant. If a ".." is preceded by a 
non-".." name then both names are considered redundant (the process to identify 
such names is repeated until is it no longer applicable). 

This method does not access the file system; the path may not locate a file 
that exists. Eliminating ".." and a preceding name from a path may result in 
the path that locates a different file than the original path. This can arise 
when the preceding name is a symbolic link. 



    Returns: the resulting path or this path if it does not contain redundant name elements; 
             an empty path is returned if this path does have a root component 
             and all name elements are redundant 

*java.nio.file.Path.register(WatchService,WatchEvent.Kind<?>...)*

public |java.nio.file.WatchKey| register(
  java.nio.file.WatchService watcher,
  java.nio.file.WatchEvent.Kind[] events)
  throws |java.io.IOException|
         
Registers the file located by this path with a watch service. 

An invocation of this method behaves in exactly the same way as the invocation 

watchable. register(|java.nio.file.Path|) (watcher, events, new 
WatchEvent.Modifier[0]); 

Usage Example: Suppose we wish to register a directory for entry create, 
delete, and modify events: 

Path dir = ... WatchService watcher = ... 

WatchKey key = dir.register(watcher, ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY); 


    watcher - The watch service to which this object is to be registered 
    events - The events for which this object should be registered 

    Returns: A key representing the registration of this object with the given watch service 

*java.nio.file.Path.register(WatchService,WatchEvent.Kind<?>[],WatchEvent.Modifier...)*

public |java.nio.file.WatchKey| register(
  java.nio.file.WatchService watcher,
  java.nio.file.WatchEvent.Kind[] events,
  java.nio.file.WatchEvent.Modifier[] modifiers)
  throws |java.io.IOException|
         
Registers the file located by this path with a watch service. 

In this release, this path locates a directory that exists. The directory is 
registered with the watch service so that entries in the directory can be 
watched. Theeventsparameter is the events to register and may contain the 
following events: 

ENTRY_CREATE(|java.nio.file.StandardWatchEventKinds|) - entry created or moved 
into the directory ENTRY_DELETE(|java.nio.file.StandardWatchEventKinds|) - 
entry deleted or moved out of the directory 
ENTRY_MODIFY(|java.nio.file.StandardWatchEventKinds|) - entry in directory was 
modified 

The context(|java.nio.file.WatchEvent|) for these events is the relative path 
between the directory located by this path, and the path that locates the 
directory entry that is created, deleted, or modified. 

The set of events may include additional implementation specific event that are 
not defined by the enum (|java.nio.file.StandardWatchEventKinds|) 
Themodifiersparameter specifies modifiers that qualify how the directory is 
registered. This release does not define any standard modifiers. It may contain 
implementation specific modifiers. 

Where a file is registered with a watch service by means of a symbolic link 
then it is implementation specific if the watch continues to depend on the 
existence of the symbolic link after it is registered. 


    watcher - the watch service to which this object is to be registered 
    events - the events for which this object should be registered 
    modifiers - the modifiers, if any, that modify how the object is registered 

    Returns: a key representing the registration of this object with the given watch service 

*java.nio.file.Path.relativize(Path)*

public |java.nio.file.Path| relativize(java.nio.file.Path other)

Constructs a relative path between this path and a given path. 

Relativization is the inverse of resolution(|java.nio.file.Path|) . This method 
attempts to construct a relative(|java.nio.file.Path|) path that when 
resolved(|java.nio.file.Path|) against this path, yields a path that locates 
the same file as the given path. For example, on UNIX, if this path is"/a/b"and 
the given path is"/a/b/c/d"then the resulting relative path would be"c/d". 
Where this path and the given path do not have a root(|java.nio.file.Path|) 
component, then a relative path can be constructed. A relative path cannot be 
constructed if only one of the paths have a root component. Where both paths 
have a root component then it is implementation dependent if a relative path 
can be constructed. If this path and the given path are 
equal(|java.nio.file.Path|) then an empty path is returned. 

For any two normalized(|java.nio.file.Path|) paths p and q, where q does not 
have a root component, 

p.relativize(p.resolve(q)).equals(q) 

When symbolic links are supported, then whether the resulting path, when 
resolved against this path, yields a path that can be used to locate the 
same(|java.nio.file.Files|) file asotheris implementation dependent. For 
example, if this path is"/a/b"and the given path is"/a/x"then the resulting 
relative path may be"../x". If"b"is a symbolic link then is implementation 
dependent if"a/b/../x"would locate the same file as"/a/x". 


    other - the path to relativize against this path 

    Returns: the resulting relative path, or an empty path if both paths are equal 

*java.nio.file.Path.resolve(Path)*

public |java.nio.file.Path| resolve(java.nio.file.Path other)

Resolve the given path against this path. 

If theotherparameter is an absolute(|java.nio.file.Path|) path then this method 
trivially returnsother. Ifotheris an empty path then this method trivially 
returns this path. Otherwise this method considers this path to be a directory 
and resolves the given path against this path. In the simplest case, the given 
path does not have a root(|java.nio.file.Path|) component, in which case this 
method joins the given path to this path and returns a resulting path that 
ends(|java.nio.file.Path|) with the given path. Where the given path has a root 
component then resolution is highly implementation dependent and therefore 
unspecified. 


    other - the path to resolve against this path 

    Returns: the resulting path 

*java.nio.file.Path.resolve(String)*

public |java.nio.file.Path| resolve(java.lang.String other)

Converts a given path string to aPathand resolves it against thisPathin exactly 
the manner specified by the resolve(|java.nio.file.Path|) method. For example, 
suppose that the name separator is "/" and a path represents "foo/bar", then 
invoking this method with the path string "gus" will result in 
thePath"foo/bar/gus". 


    other - the path string to resolve against this path 

    Returns: the resulting path 

*java.nio.file.Path.resolveSibling(Path)*

public |java.nio.file.Path| resolveSibling(java.nio.file.Path other)

Resolves the given path against this path's parent(|java.nio.file.Path|) path. 
This is useful where a file name needs to be replaced with another file name. 
For example, suppose that the name separator is "/" and a path represents 
"dir1/dir2/foo", then invoking this method with thePath"bar" will result in 
thePath"dir1/dir2/bar". If this path does not have a parent path, orotheris 
absolute(|java.nio.file.Path|) , then this method returnsother. Ifotheris an 
empty path then this method returns this path's parent, or where this path 
doesn't have a parent, the empty path. 


    other - the path to resolve against this path's parent 

    Returns: the resulting path 

*java.nio.file.Path.resolveSibling(String)*

public |java.nio.file.Path| resolveSibling(java.lang.String other)

Converts a given path string to aPathand resolves it against this path's 
parent(|java.nio.file.Path|) path in exactly the manner specified by the 
resolveSibling(|java.nio.file.Path|) method. 


    other - the path string to resolve against this path's parent 

    Returns: the resulting path 

*java.nio.file.Path.startsWith(Path)*

public boolean startsWith(java.nio.file.Path other)

Tests if this path starts with the given path. 

This path starts with the given path if this path's root component starts with 
the root component of the given path, and this path starts with the same name 
elements as the given path. If the given path has more name elements than this 
path thenfalseis returned. 

Whether or not the root component of this path starts with the root component 
of the given path is file system specific. If this path does not have a root 
component and the given path has a root component then this path does not start 
with the given path. 

If the given path is associated with a differentFileSystemto this path 
thenfalseis returned. 


    other - the given path 

    Returns: {@code true} if this path starts with the given path; otherwise {@code false} 

*java.nio.file.Path.startsWith(String)*

public boolean startsWith(java.lang.String other)

Tests if this path starts with aPath, constructed by converting the given path 
string, in exactly the manner specified by the 
startsWith(Path)(|java.nio.file.Path|) method. On UNIX for example, the path 
"foo/bar" starts with "foo" and "foo/bar". It does not start with "f" or "fo". 


    other - the given path string 

    Returns: {@code true} if this path starts with the given path; otherwise {@code false} 

*java.nio.file.Path.subpath(int,int)*

public |java.nio.file.Path| subpath(
  int beginIndex,
  int endIndex)

Returns a relativePaththat is a subsequence of the name elements of this path. 

ThebeginIndexandendIndexparameters specify the subsequence of name elements. 
The name that is closest to the root in the directory hierarchy has index0. The 
name that is farthest from the root has index count(|java.nio.file.Path|) -1. 
The returnedPathobject has the name elements that begin atbeginIndexand extend 
to the element at indexendIndex-1. 


    beginIndex - the index of the first element, inclusive 
    endIndex - the index of the last element, exclusive 

    Returns: a new {@code Path} object that is a subsequence of the name elements in this 
             {@code Path} 

*java.nio.file.Path.toAbsolutePath()*

public |java.nio.file.Path| toAbsolutePath()

Returns aPathobject representing the absolute path of this path. 

If this path is already absolute(|java.nio.file.Path|) then this method simply 
returns this path. Otherwise, this method resolves the path in an 
implementation dependent manner, typically by resolving the path against a file 
system default directory. Depending on the implementation, this method may 
throw an I/O error if the file system is not accessible. 



    Returns: a {@code Path} object representing the absolute path 

*java.nio.file.Path.toFile()*

public |java.io.File| toFile()

Returns a (|java.io.File|) object representing this path. Where thisPathis 
associated with the default provider, then this method is equivalent to 
returning aFileobject constructed with theStringrepresentation of this path. 

If this path was created by invoking theFile toPath(|java.io.File|) method then 
there is no guarantee that theFileobject returned by this method is 
equal(|java.nio.file.Path|) to the originalFile. 



    Returns: a {@code File} object representing this path 

*java.nio.file.Path.toRealPath(LinkOption...)*

public |java.nio.file.Path| toRealPath(java.nio.file.LinkOption[] options)
  throws |java.io.IOException|
         
Returns the real path of an existing file. 

The precise definition of this method is implementation dependent but in 
general it derives from this path, an absolute(|java.nio.file.Path|) path that 
locates the same(|java.nio.file.Files|) file as this path, but with name 
elements that represent the actual name of the directories and the file. For 
example, where filename comparisons on a file system are case insensitive then 
the name elements represent the names in their actual case. Additionally, the 
resulting path has redundant name elements removed. 

If this path is relative then its absolute path is first obtained, as if by 
invoking the toAbsolutePath(|java.nio.file.Path|) method. 

Theoptionsarray may be used to indicate how symbolic links are handled. By 
default, symbolic links are resolved to their final target. If the option 
NOFOLLOW_LINKS(|java.nio.file.LinkOption|) is present then this method does not 
resolve symbolic links. 

Some implementations allow special names such as ".." to refer to the parent 
directory. When deriving the real path, and a ".." (or equivalent) is preceded 
by a non-".." name then an implementation will typically cause both names to be 
removed. When not resolving symbolic links and the preceding name is a symbolic 
link then the names are only removed if it guaranteed that the resulting path 
will locate the same file as this path. 


    options - options indicating how symbolic links are handled 

    Returns: an absolute path represent the real path of the file located by this object 

*java.nio.file.Path.toString()*

public |java.lang.String| toString()

Returns the string representation of this path. 

If this path was created by converting a path string using the 
getPath(|java.nio.file.FileSystem|) method then the path string returned by 
this method may differ from the original String used to create the path. 

The returned path string uses the default name 
separator(|java.nio.file.FileSystem|) to separate names in the path. 



    Returns: the string representation of this path 

*java.nio.file.Path.toUri()*

public |java.net.URI| toUri()

Returns a URI to represent this path. 

This method constructs an absolute (|java.net.URI|) with a 
scheme(|java.net.URI|) equal to the URI scheme that identifies the provider. 
The exact form of the scheme specific part is highly provider dependent. 

In the case of the default provider, the URI is hierarchical with a 
path(|java.net.URI|) component that is absolute. The query and fragment 
components are undefined. Whether the authority component is defined or not is 
implementation dependent. There is no guarantee that theURImay be used to 
construct a java.io.File(|java.io.File|) . In particular, if this path 
represents a Universal Naming Convention (UNC) path, then the UNC server name 
may be encoded in the authority component of the resulting URI. In the case of 
the default provider, and the file exists, and it can be determined that the 
file is a directory, then the resultingURIwill end with a slash. 

The default provider provides a similar round-trip guarantee to the 
(|java.io.File|) class. For a givenPathp it is guaranteed that 
Paths.get(|java.nio.file.Paths|) (p.toUri()).equals(p . 
toAbsolutePath(|java.nio.file.Path|) ()) 

so long as the originalPath, theURI, and the newPathare all created in 
(possibly different invocations of) the same Java virtual machine. Whether 
other providers make any guarantees is provider specific and therefore 
unspecified. 

When a file system is constructed to access the contents of a file as a file 
system then it is highly implementation specific if the returned URI represents 
the given path in the file system or it represents a compound URI that encodes 
the URI of the enclosing file system. A format for compound URIs is not defined 
in this release; such a scheme may be added in a future release. 



    Returns: the URI representing this path 


