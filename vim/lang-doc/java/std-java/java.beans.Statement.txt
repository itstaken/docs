*java.beans.Statement* *Statement* A Statement object represents a primitive sta

public class Statement
  extends    |java.lang.Object|

|java.beans.Statement_Description|
|java.beans.Statement_Fields|
|java.beans.Statement_Constructors|
|java.beans.Statement_Methods|

================================================================================

*java.beans.Statement_Constructors*
|java.beans.Statement(Object,String,Object[])|Creates a newStatementobject  for

*java.beans.Statement_Methods*
|java.beans.Statement.execute()|Theexecutemethod finds a method whose name is t
|java.beans.Statement.getArguments()|Returns the arguments for the method to in
|java.beans.Statement.getMethodName()|Returns the name of the method to invoke.
|java.beans.Statement.getTarget()|Returns the target object of this statement.
|java.beans.Statement.toString()|Prints the value of this statement using a Jav

*java.beans.Statement_Description*

A Statement object represents a primitive statement in which a single method is 
applied to a target and a set of arguments - as in "a.setFoo(b)". Note that 
where this example uses names to denote the target and its argument, a 
statement object does not require a name space and is constructed with the 
values themselves. The statement object associates the named method with its 
environment as a simple set of values: the target and an array of argument 
values. 



*java.beans.Statement(Object,String,Object[])*

public Statement(
  java.lang.Object target,
  java.lang.String methodName,
  java.lang.Object[] arguments)

Creates a new (|java.beans.Statement|) object for the specified target object 
to invoke the method specified by the name and by the array of arguments. 

Thetargetand themethodNamevalues should not benull. Otherwise an attempt to 
execute thisExpressionwill result in aNullPointerException. If 
theargumentsvalue isnull, an empty array is used as the value of 
theargumentsproperty. 

    target - the target object of this statement 
    methodName - the name of the method to invoke on the specified target 
    arguments - the array of arguments to invoke the specified method 

*java.beans.Statement.execute()*

public void execute()
  throws |java.lang.Exception|
         
Theexecutemethod finds a method whose name is the same as 
themethodNameproperty, and invokes the method on the target. 

When the target's class defines many methods with the given name the 
implementation should choose the most specific method using the algorithm 
specified in the Java Language Specification (15.11). The dynamic class of the 
target and arguments are used in place of the compile-time type information 
and, like the (|java.lang.reflect.Method|) class itself, conversion between 
primitive values and their associated wrapper classes is handled internally. 

The following method types are handled as special cases: 

Static methods may be called by using a class object as the target. 

The reserved method name "new" may be used to call a class's constructor as if 
all classes defined static "new" methods. Constructor invocations are typically 
consideredExpressions rather thanStatements as they return a value. 

The method names "get" and "set" defined in the (|java.util.List|) interface 
may also be applied to array instances, mapping to the static methods of the 
same name in theArrayclass. 



*java.beans.Statement.getArguments()*

public |java.lang.Object|[] getArguments()

Returns the arguments for the method to invoke. The number of arguments and 
their types must match the method being called.nullcan be used as a synonym of 
an empty array. 



    Returns: the array of arguments 

*java.beans.Statement.getMethodName()*

public |java.lang.String| getMethodName()

Returns the name of the method to invoke. If this method returnsnull, the 
(|java.beans.Statement|) method throws aNullPointerException. 



    Returns: the name of the method 

*java.beans.Statement.getTarget()*

public |java.lang.Object| getTarget()

Returns the target object of this statement. If this method returnsnull, the 
(|java.beans.Statement|) method throws aNullPointerException. 



    Returns: the target object of this statement 

*java.beans.Statement.toString()*

public |java.lang.String| toString()

Prints the value of this statement using a Java-style syntax. 




