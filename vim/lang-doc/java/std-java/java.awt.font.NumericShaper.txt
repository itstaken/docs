*java.awt.font.NumericShaper* *NumericShaper* The NumericShaper class is used to

public final class NumericShaper
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|java.awt.font.NumericShaper_Description|
|java.awt.font.NumericShaper_Fields|
|java.awt.font.NumericShaper_Constructors|
|java.awt.font.NumericShaper_Methods|

================================================================================

*java.awt.font.NumericShaper_Fields*
|int_java.awt.font.NumericShaper.ALL_RANGES|
|int_java.awt.font.NumericShaper.ARABIC|
|int_java.awt.font.NumericShaper.BENGALI|
|int_java.awt.font.NumericShaper.DEVANAGARI|
|int_java.awt.font.NumericShaper.EASTERN_ARABIC|
|int_java.awt.font.NumericShaper.ETHIOPIC|
|int_java.awt.font.NumericShaper.EUROPEAN|
|int_java.awt.font.NumericShaper.GUJARATI|
|int_java.awt.font.NumericShaper.GURMUKHI|
|int_java.awt.font.NumericShaper.KANNADA|
|int_java.awt.font.NumericShaper.KHMER|
|int_java.awt.font.NumericShaper.LAO|
|int_java.awt.font.NumericShaper.MALAYALAM|
|int_java.awt.font.NumericShaper.MONGOLIAN|
|int_java.awt.font.NumericShaper.MYANMAR|
|int_java.awt.font.NumericShaper.ORIYA|
|int_java.awt.font.NumericShaper.TAMIL|
|int_java.awt.font.NumericShaper.TELUGU|
|int_java.awt.font.NumericShaper.THAI|
|int_java.awt.font.NumericShaper.TIBETAN|

*java.awt.font.NumericShaper_Methods*
|java.awt.font.NumericShaper.equals(Object)|Returnstrueif the specified object 
|java.awt.font.NumericShaper.getContextualShaper(int)|Returns a contextual shap
|java.awt.font.NumericShaper.getContextualShaper(int,int)|Returns a contextual 
|java.awt.font.NumericShaper.getContextualShaper(Set<NumericShaper.Range>)|Retu
|java.awt.font.NumericShaper.getContextualShaper(Set<NumericShaper.Range>,NumericShaper.Range)|
|java.awt.font.NumericShaper.getRanges()|Returns an int that ORs together the v
|java.awt.font.NumericShaper.getRangeSet()|Returns aSetrepresenting all the Uni
|java.awt.font.NumericShaper.getShaper(int)|Returns a shaper for the provided u
|java.awt.font.NumericShaper.getShaper(NumericShaper.Range)|Returns a shaper fo
|java.awt.font.NumericShaper.hashCode()|Returns a hash code for this shaper.
|java.awt.font.NumericShaper.isContextual()|Returns a boolean indicating whethe
|java.awt.font.NumericShaper.shape(char[],int,int)|Converts the digits in the t
|java.awt.font.NumericShaper.shape(char[],int,int,int)|Converts the digits in t
|java.awt.font.NumericShaper.shape(char[],int,int,NumericShaper.Range)|Converts
|java.awt.font.NumericShaper.toString()|Returns a String that describes this sh

*java.awt.font.NumericShaper_Description*

The NumericShaper class is used to convert Latin-1 (European) digits to other 
Unicode decimal digits. Users of this class will primarily be people who wish 
to present data using national digit shapes, but find it more convenient to 
represent the data internally using Latin-1 (European) digits. This does not 
interpret the deprecated numeric shape selector character (U+206E). 

Instances of NumericShaper are typically applied as attributes to text with the 
NUMERIC_SHAPING(|java.awt.font.TextAttribute|) attribute of the TextAttribute 
class. For example, this code snippet causes a TextLayout to shape European 
digits to Arabic in an Arabic context: 

Map map = new HashMap(); map.put(TextAttribute.NUMERIC_SHAPING, 
NumericShaper.getContextualShaper(NumericShaper.ARABIC)); FontRenderContext frc 
= ...; TextLayout layout = new TextLayout(text, map, frc); layout.draw(g2d, x, 
y); 

It is also possible to perform numeric shaping explicitly using instances of 
NumericShaper, as this code snippet demonstrates: 

char[] text = ...; // shape all EUROPEAN digits (except zero) to ARABIC digits 
NumericShaper shaper = NumericShaper.getShaper(NumericShaper.ARABIC); 
shaper.shape(text, start, count); 

// shape European digits to ARABIC digits if preceding text is Arabic, or // 
shape European digits to TAMIL digits if preceding text is Tamil, or // leave 
European digits alone if there is no preceding text, or // preceding text is 
neither Arabic nor Tamil NumericShaper shaper = 
NumericShaper.getContextualShaper(NumericShaper.ARABIC | NumericShaper.TAMIL, 
NumericShaper.EUROPEAN); shaper.shape(text, start, count); 

Bit mask- and enum-based Unicode ranges 

This class supports two different programming interfaces to represent Unicode 
ranges for script-specific digits: bit mask-based ones, such as 
NumericShaper.ARABIC(|java.awt.font.NumericShaper|) , and enum-based ones, such 
as (|java.awt.font.NumericShaper.Range|) . Multiple ranges can be specified by 
ORing bit mask-based constants, such as: 

NumericShaper.ARABIC | NumericShaper.TAMIL 

or creating aSetwith the (|java.awt.font.NumericShaper.Range|) constants, such 
as: 

EnumSet.of(NumericShaper.Scirpt.ARABIC, NumericShaper.Range.TAMIL) 

The enum-based ranges are a super set of the bit mask-based ones. 

If the two interfaces are mixed (including serialization), Unicode range values 
are mapped to their counterparts where such mapping is possible, such 
asNumericShaper.Range.ARABICfrom/toNumericShaper.ARABIC. If any unmappable 
range values are specified, such asNumericShaper.Range.BALINESE, those ranges 
are ignored. 

Decimal Digits Precedence 

A Unicode range may have more than one set of decimal digits. If multiple 
decimal digits sets are specified for the same Unicode range, one of the sets 
will take precedence as follows. 



Unicode Range NumericShaper Constants Precedence 

Arabic NumericShaper.ARABIC(|java.awt.font.NumericShaper|) 
NumericShaper.EASTERN_ARABIC(|java.awt.font.NumericShaper|) 
NumericShaper.EASTERN_ARABIC(|java.awt.font.NumericShaper|) 

(|java.awt.font.NumericShaper.Range|) (|java.awt.font.NumericShaper.Range|) 
(|java.awt.font.NumericShaper.Range|) 

Tai Tham (|java.awt.font.NumericShaper.Range|) 
(|java.awt.font.NumericShaper.Range|) (|java.awt.font.NumericShaper.Range|) 





*int_java.awt.font.NumericShaper.ALL_RANGES*

Identifies all ranges, for full contextual shaping. 

This constant specifies all of the bit mask-based ranges. 
UseEmunSet.allOf(NumericShaper.Range.class)to specify all of the enum-based 
ranges. 


*int_java.awt.font.NumericShaper.ARABIC*

Identifies the ARABIC range and decimal base. 


*int_java.awt.font.NumericShaper.BENGALI*

Identifies the BENGALI range and decimal base. 


*int_java.awt.font.NumericShaper.DEVANAGARI*

Identifies the DEVANAGARI range and decimal base. 


*int_java.awt.font.NumericShaper.EASTERN_ARABIC*

Identifies the ARABIC range and ARABIC_EXTENDED decimal base. 


*int_java.awt.font.NumericShaper.ETHIOPIC*

Identifies the ETHIOPIC range and decimal base. 


*int_java.awt.font.NumericShaper.EUROPEAN*

Identifies the Latin-1 (European) and extended range, and Latin-1 (European) 
decimal base. 


*int_java.awt.font.NumericShaper.GUJARATI*

Identifies the GUJARATI range and decimal base. 


*int_java.awt.font.NumericShaper.GURMUKHI*

Identifies the GURMUKHI range and decimal base. 


*int_java.awt.font.NumericShaper.KANNADA*

Identifies the KANNADA range and decimal base. 


*int_java.awt.font.NumericShaper.KHMER*

Identifies the KHMER range and decimal base. 


*int_java.awt.font.NumericShaper.LAO*

Identifies the LAO range and decimal base. 


*int_java.awt.font.NumericShaper.MALAYALAM*

Identifies the MALAYALAM range and decimal base. 


*int_java.awt.font.NumericShaper.MONGOLIAN*

Identifies the MONGOLIAN range and decimal base. 


*int_java.awt.font.NumericShaper.MYANMAR*

Identifies the MYANMAR range and decimal base. 


*int_java.awt.font.NumericShaper.ORIYA*

Identifies the ORIYA range and decimal base. 


*int_java.awt.font.NumericShaper.TAMIL*

Identifies the TAMIL range and decimal base. 


*int_java.awt.font.NumericShaper.TELUGU*

Identifies the TELUGU range and decimal base. 


*int_java.awt.font.NumericShaper.THAI*

Identifies the THAI range and decimal base. 


*int_java.awt.font.NumericShaper.TIBETAN*

Identifies the TIBETAN range and decimal base. 



*java.awt.font.NumericShaper.equals(Object)*

public boolean equals(java.lang.Object o)

Returnstrueif the specified object is an instance of NumericShaper and shapes 
identically to this one, regardless of the range representations, the bit mask 
or the enum. For example, the following code produces"true". 

NumericShaper ns1 = NumericShaper.getShaper(NumericShaper.ARABIC); 
NumericShaper ns2 = NumericShaper.getShaper(NumericShaper.Range.ARABIC); 
System.out.println(ns1.equals(ns2)); 


    o - the specified object to compare to this NumericShaper 

    Returns: true if o is an instance of NumericShaper and shapes in the same way; false 
             otherwise. 

*java.awt.font.NumericShaper.getContextualShaper(int)*

public static |java.awt.font.NumericShaper| getContextualShaper(int ranges)

Returns a contextual shaper for the provided unicode range(s). Latin-1 
(EUROPEAN) digits are converted to the decimal digits corresponding to the 
range of the preceding text, if the range is one of the provided ranges. 
Multiple ranges are represented by or-ing the values together, such as, 
NumericShaper.ARABIC | NumericShaper.THAI. The shaper assumes EUROPEAN as the 
starting context, that is, if EUROPEAN digits are encountered before any strong 
directional text in the string, the context is presumed to be EUROPEAN, and so 
the digits will not shape. 


    ranges - the specified Unicode ranges 

    Returns: a shaper for the specified ranges 

*java.awt.font.NumericShaper.getContextualShaper(int,int)*

public static |java.awt.font.NumericShaper| getContextualShaper(
  int ranges,
  int defaultContext)

Returns a contextual shaper for the provided unicode range(s). Latin-1 
(EUROPEAN) digits will be converted to the decimal digits corresponding to the 
range of the preceding text, if the range is one of the provided ranges. 
Multiple ranges are represented by or-ing the values together, for example, 
NumericShaper.ARABIC | NumericShaper.THAI. The shaper uses defaultContext as 
the starting context. 


    ranges - the specified Unicode ranges 
    defaultContext - the starting context, such as NumericShaper.EUROPEAN 

    Returns: a shaper for the specified Unicode ranges. 

*java.awt.font.NumericShaper.getContextualShaper(Set<NumericShaper.Range>)*

public static |java.awt.font.NumericShaper| getContextualShaper(java.util.Set<java.awt.font.NumericShaper.Range> ranges)

Returns a contextual shaper for the provided Unicode range(s). The Latin-1 
(EUROPEAN) digits are converted to the decimal digits corresponding to the 
range of the preceding text, if the range is one of the provided ranges. 

The shaper assumes EUROPEAN as the starting context, that is, if EUROPEAN 
digits are encountered before any strong directional text in the string, the 
context is presumed to be EUROPEAN, and so the digits will not shape. 


    ranges - the specified Unicode ranges 

    Returns: a contextual shaper for the specified ranges 

*java.awt.font.NumericShaper.getContextualShaper(Set<NumericShaper.Range>,NumericShaper.Range)*

public static |java.awt.font.NumericShaper| getContextualShaper(
  java.util.Set<java.awt.font.NumericShaper.Range> ranges,
  java.awt.font.NumericShaper.Range defaultContext)

Returns a contextual shaper for the provided Unicode range(s). The Latin-1 
(EUROPEAN) digits will be converted to the decimal digits corresponding to the 
range of the preceding text, if the range is one of the provided ranges. The 
shaper usesdefaultContextas the starting context. 


    ranges - the specified Unicode ranges 
    defaultContext - the starting context, such as {@code NumericShaper.Range.EUROPEAN} 

    Returns: a contextual shaper for the specified Unicode ranges. 

*java.awt.font.NumericShaper.getRanges()*

public int getRanges()

Returns an int that ORs together the values for all the ranges that will be 
shaped. 

For example, to check if a shaper shapes to Arabic, you would use the 
following: 

if ((shaper.getRanges() & shaper.ARABIC) != 0) { ... 

Note that this method supports only the bit mask-based ranges. Call 
(|java.awt.font.NumericShaper|) for the enum-based ranges. 



    Returns: the values for all the ranges to be shaped. 

*java.awt.font.NumericShaper.getRangeSet()*

public |java.util.Set|<Range> getRangeSet()

Returns aSetrepresenting all the Unicode ranges in thisNumericShaperthat will 
be shaped. 



    Returns: all the Unicode ranges to be shaped. 

*java.awt.font.NumericShaper.getShaper(int)*

public static |java.awt.font.NumericShaper| getShaper(int singleRange)

Returns a shaper for the provided unicode range. All Latin-1 (EUROPEAN) digits 
are converted to the corresponding decimal unicode digits. 


    singleRange - the specified Unicode range 

    Returns: a non-contextual numeric shaper 

*java.awt.font.NumericShaper.getShaper(NumericShaper.Range)*

public static |java.awt.font.NumericShaper| getShaper(java.awt.font.NumericShaper.Range singleRange)

Returns a shaper for the provided Unicode range. All Latin-1 (EUROPEAN) digits 
are converted to the corresponding decimal digits of the specified Unicode 
range. 


    singleRange - the Unicode range given by a {@link NumericShaper.Range} constant. 

    Returns: a non-contextual {@code NumericShaper}. 

*java.awt.font.NumericShaper.hashCode()*

public int hashCode()

Returns a hash code for this shaper. 



    Returns: this shaper's hash code. 

*java.awt.font.NumericShaper.isContextual()*

public boolean isContextual()

Returns a boolean indicating whether or not this shaper shapes contextually. 



    Returns: true if this shaper is contextual; false otherwise. 

*java.awt.font.NumericShaper.shape(char[],int,int)*

public void shape(
  char[] text,
  int start,
  int count)

Converts the digits in the text that occur between start and start + count. 


    text - an array of characters to convert 
    start - the index into text to start converting 
    count - the number of characters in text to convert 

*java.awt.font.NumericShaper.shape(char[],int,int,int)*

public void shape(
  char[] text,
  int start,
  int count,
  int context)

Converts the digits in the text that occur between start and start + count, 
using the provided context. Context is ignored if the shaper is not a 
contextual shaper. 


    text - an array of characters 
    start - the index into text to start converting 
    count - the number of characters in text to convert 
    context - the context to which to convert the characters, such as NumericShaper.EUROPEAN 

*java.awt.font.NumericShaper.shape(char[],int,int,NumericShaper.Range)*

public void shape(
  char[] text,
  int start,
  int count,
  java.awt.font.NumericShaper.Range context)

Converts the digits in the text that occur betweenstartandstart + count, using 
the providedcontext.Contextis ignored if the shaper is not a contextual shaper. 


    text - a {@code char} array 
    start - the index into {@code text} to start converting 
    count - the number of {@code char}s in {@code text} to convert 
    context - the context to which to convert the characters, such as {@code 
       NumericShaper.Range.EUROPEAN} 

*java.awt.font.NumericShaper.toString()*

public |java.lang.String| toString()

Returns a String that describes this shaper. This method is used for debugging 
purposes only. 



    Returns: a String describing this shaper. 


