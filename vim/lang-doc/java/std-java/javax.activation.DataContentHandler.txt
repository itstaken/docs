*javax.activation.DataContentHandler* *DataContentHandler* The DataContentHandle

public interface interface DataContentHandler


|javax.activation.DataContentHandler_Description|
|javax.activation.DataContentHandler_Fields|
|javax.activation.DataContentHandler_Constructors|
|javax.activation.DataContentHandler_Methods|

================================================================================

*javax.activation.DataContentHandler_Methods*
|javax.activation.DataContentHandler.getContent(DataSource)|Return an object re
|javax.activation.DataContentHandler.getTransferData(DataFlavor,DataSource)|Ret
|javax.activation.DataContentHandler.getTransferDataFlavors()|Returns an array 
|javax.activation.DataContentHandler.writeTo(Object,String,OutputStream)|Conver

*javax.activation.DataContentHandler_Description*

The DataContentHandler interface is implemented by objects that can be used to 
extend the capabilities of the DataHandler's implementation of the Transferable 
interface. Through DataContentHandlers the framework can be extended to convert 
streams in to objects, and to write objects to streams. 

Applications don't generally call the methods in DataContentHandlers directly. 
Instead, an application calls the equivalent methods in DataHandler. The 
DataHandler will attempt to find an appropriate DataContentHandler that 
corresponds to its MIME type using the current DataContentHandlerFactory. The 
DataHandler then calls through to the methods in the DataContentHandler. 



*javax.activation.DataContentHandler.getContent(DataSource)*

public |java.lang.Object| getContent(javax.activation.DataSource ds)
  throws |java.io.IOException|
         
Return an object representing the data in its most preferred form. Generally 
this will be the form described by the first DataFlavor returned by the 
getTransferDataFlavors method. 


    ds - The DataSource representing the data to be converted. 

    Returns: The constructed Object. 

*javax.activation.DataContentHandler.getTransferData(DataFlavor,DataSource)*

public |java.lang.Object| getTransferData(
  java.awt.datatransfer.DataFlavor df,
  javax.activation.DataSource ds)
  throws |java.io.IOException|
         |java.awt.datatransfer.UnsupportedFlavorException|
         
Returns an object which represents the data to be transferred. The class of the 
object returned is defined by the representation class of the flavor. 


    df - The DataFlavor representing the requested type. 
    ds - The DataSource representing the data to be converted. 

    Returns: The constructed Object. 

*javax.activation.DataContentHandler.getTransferDataFlavors()*

public |java.awt.datatransfer.DataFlavor|[] getTransferDataFlavors()

Returns an array of DataFlavor objects indicating the flavors the data can be 
provided in. The array should be ordered according to preference for providing 
the data (from most richly descriptive to least descriptive). 



    Returns: The DataFlavors. 

*javax.activation.DataContentHandler.writeTo(Object,String,OutputStream)*

public void writeTo(
  java.lang.Object obj,
  java.lang.String mimeType,
  java.io.OutputStream os)
  throws |java.io.IOException|
         
Convert the object to a byte stream of the specified MIME type and write it to 
the output stream. 


    obj - The object to be converted. 
    mimeType - The requested MIME type of the resulting byte stream. 
    os - The output stream into which to write the converted byte stream. 


