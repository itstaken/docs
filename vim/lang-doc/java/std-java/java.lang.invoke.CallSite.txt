*java.lang.invoke.CallSite* *CallSite* ACallSiteis a holder for a variableMethod

public abstract class CallSite
  extends    |java.lang.Object|

|java.lang.invoke.CallSite_Description|
|java.lang.invoke.CallSite_Fields|
|java.lang.invoke.CallSite_Constructors|
|java.lang.invoke.CallSite_Methods|

================================================================================

*java.lang.invoke.CallSite_Methods*
|java.lang.invoke.CallSite.dynamicInvoker()|Produces a method handle equivalent
|java.lang.invoke.CallSite.getTarget()|Returns the target method of the call si
|java.lang.invoke.CallSite.setTarget(MethodHandle)|Updates the target method of
|java.lang.invoke.CallSite.type()|Returns the type of this call site's target.

*java.lang.invoke.CallSite_Description*

ACallSiteis a holder for a variable (|java.lang.invoke.MethodHandle|) , which 
is called itstarget. Aninvokedynamicinstruction linked to aCallSitedelegates 
all calls to the site's current target. ACallSitemay be associated with 
severalinvokedynamicinstructions, or it may be "free floating", associated with 
none. In any case, it may be invoked through an associated method handle called 
its dynamic invoker(|java.lang.invoke.CallSite|) . CallSiteis an abstract class 
which does not allow direct subclassing by users. It has three immediate, 
concrete subclasses that may be either instantiated or subclassed. 

If a mutable target is not required, aninvokedynamicinstruction may be 
permanently bound by means of a constant call 
site(|java.lang.invoke.ConstantCallSite|) . If a mutable target is required 
which has volatile variable semantics, because updates to the target must be 
immediately and reliably witnessed by other threads, a volatile call 
site(|java.lang.invoke.VolatileCallSite|) may be used. Otherwise, if a mutable 
target is required, a mutable call site(|java.lang.invoke.MutableCallSite|) may 
be used. 

A non-constant call site may be relinked by changing its target. The new target 
must have the same type(|java.lang.invoke.MethodHandle|) as the previous 
target. Thus, though a call site can be relinked to a series of successive 
targets, it cannot change its type. 

Here is a sample use of call sites and bootstrap methods which links every 
dynamic call site to print its arguments: 

static void test() throws Throwable { // THE FOLLOWING LINE IS PSEUDOCODE FOR A 
JVM INSTRUCTION InvokeDynamic[#bootstrapDynamic].baz("baz arg", 2, 3.14); } 
private static void printArgs(Object... args) { 
System.out.println(java.util.Arrays.deepToString(args)); } private static final 
MethodHandle printArgs; static { MethodHandles.Lookup lookup = 
MethodHandles.lookup(); Class thisClass = lookup.lookupClass(); // (who am I?) 
printArgs = lookup.findStatic(thisClass, "printArgs", 
MethodType.methodType(void.class, Object[].class)); } private static CallSite 
bootstrapDynamic(MethodHandles.Lookup caller, String name, MethodType type) { 
// ignore caller and name, but match the type: return new 
ConstantCallSite(printArgs.asType(type)); } 



*java.lang.invoke.CallSite.dynamicInvoker()*

public abstract |java.lang.invoke.MethodHandle| dynamicInvoker()

Produces a method handle equivalent to an invokedynamic instruction which has 
been linked to this call site. 

This method is equivalent to the following code: 

MethodHandle getTarget, invoker, result; getTarget = 
MethodHandles.publicLookup().bind(this, "getTarget", 
MethodType.methodType(MethodHandle.class)); invoker = 
MethodHandles.exactInvoker(this.type()); result = 
MethodHandles.foldArguments(invoker, getTarget) 



    Returns: a method handle which always invokes this call site's current target 

*java.lang.invoke.CallSite.getTarget()*

public abstract |java.lang.invoke.MethodHandle| getTarget()

Returns the target method of the call site, according to the behavior defined 
by this call site's specific class. The immediate subclasses ofCallSitedocument 
the class-specific behaviors of this method. 



    Returns: the current linkage state of the call site, its target method handle 

*java.lang.invoke.CallSite.setTarget(MethodHandle)*

public abstract void setTarget(java.lang.invoke.MethodHandle newTarget)

Updates the target method of this call site, according to the behavior defined 
by this call site's specific class. The immediate subclasses ofCallSitedocument 
the class-specific behaviors of this method. 

The type of the new target must be equal to(|java.lang.invoke.MethodType|) the 
type of the old target. 


    newTarget - the new target 

*java.lang.invoke.CallSite.type()*

public |java.lang.invoke.MethodType| type()

Returns the type of this call site's target. Although targets may change, any 
call site's type is permanent, and can never change to an unequal type. 
ThesetTargetmethod enforces this invariant by refusing any new target that does 
not have the previous target's type. 



    Returns: the type of the current target, which is also the type of any future target 


