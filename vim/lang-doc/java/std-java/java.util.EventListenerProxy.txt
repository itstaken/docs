*java.util.EventListenerProxy* *EventListenerProxy* An abstract wrapper class fo

public abstract class EventListenerProxy<T extends java.util.EventListener>
  extends    |java.lang.Object|
  implements |java.util.EventListener|

|java.util.EventListenerProxy_Description|
|java.util.EventListenerProxy_Fields|
|java.util.EventListenerProxy_Constructors|
|java.util.EventListenerProxy_Methods|

================================================================================

*java.util.EventListenerProxy_Constructors*
|java.util.EventListenerProxy(T)|Creates a proxy for the specified listener.

*java.util.EventListenerProxy_Methods*
|java.util.EventListenerProxy.getListener()|Returns the listener associated wit

*java.util.EventListenerProxy_Description*

An abstract wrapper class for anEventListenerclass which associates a set of 
additional parameters with the listener. Subclasses must provide the storage 
and accessor methods for the additional arguments or parameters. 

For example, a bean which supports named properties would have a two argument 
method signature for adding aPropertyChangeListenerfor a property: 

public void addPropertyChangeListener(String propertyName, 
PropertyChangeListener listener) 

If the bean also implemented the zero argument get listener method: 

public PropertyChangeListener[] getPropertyChangeListeners() 

then the array may contain innerPropertyChangeListenerswhich are 
alsoPropertyChangeListenerProxyobjects. 

If the calling method is interested in retrieving the named property then it 
would have to test the element to see if it is a proxy class. 



*java.util.EventListenerProxy(T)*

public EventListenerProxy(T extends java.util.EventListener listener)

Creates a proxy for the specified listener. 

    listener - the listener object 

*java.util.EventListenerProxy.getListener()*

public |T| getListener()

Returns the listener associated with the proxy. 



    Returns: the listener associated with the proxy 


