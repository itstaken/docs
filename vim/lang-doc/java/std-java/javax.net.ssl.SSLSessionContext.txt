*javax.net.ssl.SSLSessionContext* *SSLSessionContext* A SSLSessionContext repres

public interface interface SSLSessionContext


|javax.net.ssl.SSLSessionContext_Description|
|javax.net.ssl.SSLSessionContext_Fields|
|javax.net.ssl.SSLSessionContext_Constructors|
|javax.net.ssl.SSLSessionContext_Methods|

================================================================================

*javax.net.ssl.SSLSessionContext_Methods*
|javax.net.ssl.SSLSessionContext.getIds()|Returns an Enumeration of all session
|javax.net.ssl.SSLSessionContext.getSession(byte[])|Returns the SSLSession boun
|javax.net.ssl.SSLSessionContext.getSessionCacheSize()|Returns the size of the 
|javax.net.ssl.SSLSessionContext.getSessionTimeout()|Returns the timeout limit 
|javax.net.ssl.SSLSessionContext.setSessionCacheSize(int)|Sets the size of the 
|javax.net.ssl.SSLSessionContext.setSessionTimeout(int)|Sets the timeout limit 

*javax.net.ssl.SSLSessionContext_Description*

A SSLSessionContext represents a set of SSLSessions associated with a single 
entity. For example, it could be associated with a server or client who 
participates in many sessions concurrently. 

Not all environments will contain session contexts. 

There are SSLSessionContext parameters that affect how sessions are stored: 

Sessions can be set to expire after a specified time limit. The number of 
sessions that can be stored in context can be limited. 

A session can be retrieved based on its session id, and all session id's in a 
SSLSessionContext can be listed. 



*javax.net.ssl.SSLSessionContext.getIds()*

public |java.util.Enumeration|<byte[]> getIds()

Returns an Enumeration of all session id's grouped under this 
SSLSessionContext. 



    Returns: an enumeration of all the Session id's 

*javax.net.ssl.SSLSessionContext.getSession(byte[])*

public |javax.net.ssl.SSLSession| getSession(byte[] sessionId)

Returns the SSLSession bound to the specified session id. 


    sessionId - the Session identifier 

    Returns: the SSLSession or null if the specified session id does not refer to a valid 
             SSLSession. 

*javax.net.ssl.SSLSessionContext.getSessionCacheSize()*

public int getSessionCacheSize()

Returns the size of the cache used for storing SSLSession objects grouped under 
this SSLSessionContext. 



    Returns: size of the session cache; zero means there is no size limit. 

*javax.net.ssl.SSLSessionContext.getSessionTimeout()*

public int getSessionTimeout()

Returns the timeout limit of SSLSession objects grouped under this 
SSLSessionContext. 

If the timeout limit is set to 't' seconds, a session exceeds the timeout limit 
't' seconds after its creation time. When the timeout limit is exceeded for a 
session, the SSLSession object is invalidated and future connections cannot 
resume or rejoin the session. A check for sessions exceeding the timeout limit 
is made immediately whenever the timeout limit is changed for this 
SSLSessionContext. 



    Returns: the session timeout limit in seconds; zero means there is no limit. 

*javax.net.ssl.SSLSessionContext.setSessionCacheSize(int)*

public void setSessionCacheSize(int size)
  throws |java.lang.IllegalArgumentException|
         
Sets the size of the cache used for storing SSLSession objects grouped under 
this SSLSessionContext. 


    size - the new session cache size limit; zero means there is no limit. 

*javax.net.ssl.SSLSessionContext.setSessionTimeout(int)*

public void setSessionTimeout(int seconds)
  throws |java.lang.IllegalArgumentException|
         
Sets the timeout limit for SSLSession objects grouped under this 
SSLSessionContext. 

If the timeout limit is set to 't' seconds, a session exceeds the timeout limit 
't' seconds after its creation time. When the timeout limit is exceeded for a 
session, the SSLSession object is invalidated and future connections cannot 
resume or rejoin the session. A check for sessions exceeding the timeout is 
made immediately whenever the timeout limit is changed for this 
SSLSessionContext. 


    seconds - the new session timeout limit in seconds; zero means there is no limit. 


