*java.lang.reflect.Method* *Method* AMethodprovides information about, and acces

public final class Method
  extends    |java.lang.reflect.AccessibleObject|
  implements |java.lang.reflect.GenericDeclaration|
             |java.lang.reflect.Member|

|java.lang.reflect.Method_Description|
|java.lang.reflect.Method_Fields|
|java.lang.reflect.Method_Constructors|
|java.lang.reflect.Method_Methods|

================================================================================

*java.lang.reflect.Method_Methods*
|java.lang.reflect.Method.equals(Object)|Compares thisMethodagainst the specifi
|java.lang.reflect.Method.getAnnotation(Class<T>)|
|java.lang.reflect.Method.getDeclaredAnnotations()|
|java.lang.reflect.Method.getDeclaringClass()|Returns theClassobject representi
|java.lang.reflect.Method.getDefaultValue()|Returns the default value for the a
|java.lang.reflect.Method.getExceptionTypes()|Returns an array ofClassobjects t
|java.lang.reflect.Method.getGenericExceptionTypes()|Returns an array ofTypeobj
|java.lang.reflect.Method.getGenericParameterTypes()|Returns an array ofTypeobj
|java.lang.reflect.Method.getGenericReturnType()|Returns aTypeobject that repre
|java.lang.reflect.Method.getModifiers()|Returns the Java language modifiers fo
|java.lang.reflect.Method.getName()|Returns the name of the method represented 
|java.lang.reflect.Method.getParameterAnnotations()|Returns an array of arrays 
|java.lang.reflect.Method.getParameterTypes()|Returns an array ofClassobjects t
|java.lang.reflect.Method.getReturnType()|Returns aClassobject that represents 
|java.lang.reflect.Method.getTypeParameters()|Returns an array ofTypeVariableob
|java.lang.reflect.Method.hashCode()|Returns a hashcode for thisMethod.
|java.lang.reflect.Method.invoke(Object,Object...)|Invokes the underlying metho
|java.lang.reflect.Method.isBridge()|Returnstrueif this method is a bridge  met
|java.lang.reflect.Method.isSynthetic()|Returnstrueif this method is a syntheti
|java.lang.reflect.Method.isVarArgs()|Returnstrueif this method was declared to
|java.lang.reflect.Method.toGenericString()|Returns a string describing thisMet
|java.lang.reflect.Method.toString()|Returns a string describing thisMethod.

*java.lang.reflect.Method_Description*

AMethodprovides information about, and access to, a single method on a class or 
interface. The reflected method may be a class method or an instance method 
(including an abstract method). 

AMethodpermits widening conversions to occur when matching the actual 
parameters to invoke with the underlying method's formal parameters, but it 
throws anIllegalArgumentExceptionif a narrowing conversion would occur. 



*java.lang.reflect.Method.equals(Object)*

public boolean equals(java.lang.Object obj)

Compares thisMethodagainst the specified object. Returns true if the objects 
are the same. TwoMethodsare the same if they were declared by the same class 
and have the same name and formal parameter types and return type. 



*java.lang.reflect.Method.getAnnotation(Class<T>)*

public |T| getAnnotation(java.lang.Class<T> annotationClass)





*java.lang.reflect.Method.getDeclaredAnnotations()*

public |java.lang.annotation.Annotation|[] getDeclaredAnnotations()





*java.lang.reflect.Method.getDeclaringClass()*

public |java.lang.Class|<?> getDeclaringClass()

Returns theClassobject representing the class or interface that declares the 
method represented by thisMethodobject. 



*java.lang.reflect.Method.getDefaultValue()*

public |java.lang.Object| getDefaultValue()

Returns the default value for the annotation member represented by 
thisMethodinstance. If the member is of a primitive type, an instance of the 
corresponding wrapper type is returned. Returns null if no default is 
associated with the member, or if the method instance does not represent a 
declared member of an annotation type. 



    Returns: the default value for the annotation member represented by this {@code Method} 
             instance. 

*java.lang.reflect.Method.getExceptionTypes()*

public |java.lang.Class|[] getExceptionTypes()

Returns an array ofClassobjects that represent the types of the exceptions 
declared to be thrown by the underlying method represented by thisMethodobject. 
Returns an array of length 0 if the method declares no exceptions in 
itsthrowsclause. 



    Returns: the exception types declared as being thrown by the method this object 
             represents 

*java.lang.reflect.Method.getGenericExceptionTypes()*

public |java.lang.reflect.Type|[] getGenericExceptionTypes()

Returns an array ofTypeobjects that represent the exceptions declared to be 
thrown by thisMethodobject. Returns an array of length 0 if the underlying 
method declares no exceptions in itsthrowsclause. 

If an exception type is a type variable or a parameterized type, it is created. 
Otherwise, it is resolved. 



    Returns: an array of Types that represent the exception types thrown by the underlying 
             method 

*java.lang.reflect.Method.getGenericParameterTypes()*

public |java.lang.reflect.Type|[] getGenericParameterTypes()

Returns an array ofTypeobjects that represent the formal parameter types, in 
declaration order, of the method represented by thisMethodobject. Returns an 
array of length 0 if the underlying method takes no parameters. 

If a formal parameter type is a parameterized type, theTypeobject returned for 
it must accurately reflect the actual type parameters used in the source code. 

If a formal parameter type is a type variable or a parameterized type, it is 
created. Otherwise, it is resolved. 



    Returns: an array of Types that represent the formal parameter types of the underlying 
             method, in declaration order 

*java.lang.reflect.Method.getGenericReturnType()*

public |java.lang.reflect.Type| getGenericReturnType()

Returns aTypeobject that represents the formal return type of the method 
represented by thisMethodobject. 

If the return type is a parameterized type, theTypeobject returned must 
accurately reflect the actual type parameters used in the source code. 

If the return type is a type variable or a parameterized type, it is created. 
Otherwise, it is resolved. 



    Returns: a {@code Type} object that represents the formal return type of the underlying 
             method 

*java.lang.reflect.Method.getModifiers()*

public int getModifiers()

Returns the Java language modifiers for the method represented by 
thisMethodobject, as an integer. TheModifierclass should be used to decode the 
modifiers. 



*java.lang.reflect.Method.getName()*

public |java.lang.String| getName()

Returns the name of the method represented by thisMethodobject, as aString. 



*java.lang.reflect.Method.getParameterAnnotations()*

public |java.lang.annotation.Annotation|[][] getParameterAnnotations()

Returns an array of arrays that represent the annotations on the formal 
parameters, in declaration order, of the method represented by 
thisMethodobject. (Returns an array of length zero if the underlying method is 
parameterless. If the method has one or more parameters, a nested array of 
length zero is returned for each parameter with no annotations.) The annotation 
objects contained in the returned arrays are serializable. The caller of this 
method is free to modify the returned arrays; it will have no effect on the 
arrays returned to other callers. 



    Returns: an array of arrays that represent the annotations on the formal parameters, in 
             declaration order, of the method represented by this Method object 

*java.lang.reflect.Method.getParameterTypes()*

public |java.lang.Class|[] getParameterTypes()

Returns an array ofClassobjects that represent the formal parameter types, in 
declaration order, of the method represented by thisMethodobject. Returns an 
array of length 0 if the underlying method takes no parameters. 



    Returns: the parameter types for the method this object represents 

*java.lang.reflect.Method.getReturnType()*

public |java.lang.Class|<?> getReturnType()

Returns aClassobject that represents the formal return type of the method 
represented by thisMethodobject. 



    Returns: the return type for the method this object represents 

*java.lang.reflect.Method.getTypeParameters()*

public |java.lang.reflect.TypeVariable|[] getTypeParameters()

Returns an array ofTypeVariableobjects that represent the type variables 
declared by the generic declaration represented by 
thisGenericDeclarationobject, in declaration order. Returns an array of length 
0 if the underlying generic declaration declares no type variables. 



    Returns: an array of {@code TypeVariable} objects that represent the type variables 
             declared by this generic declaration 

*java.lang.reflect.Method.hashCode()*

public int hashCode()

Returns a hashcode for thisMethod. The hashcode is computed as the exclusive-or 
of the hashcodes for the underlying method's declaring class name and the 
method's name. 



*java.lang.reflect.Method.invoke(Object,Object...)*

public |java.lang.Object| invoke(
  java.lang.Object obj,
  java.lang.Object[] args)
  throws |java.lang.IllegalAccessException|
         |java.lang.IllegalArgumentException|
         |java.lang.reflect.InvocationTargetException|
         
Invokes the underlying method represented by thisMethodobject, on the specified 
object with the specified parameters. Individual parameters are automatically 
unwrapped to match primitive formal parameters, and both primitive and 
reference parameters are subject to method invocation conversions as necessary. 

If the underlying method is static, then the specifiedobjargument is ignored. 
It may be null. 

If the number of formal parameters required by the underlying method is 0, the 
suppliedargsarray may be of length 0 or null. 

If the underlying method is an instance method, it is invoked using dynamic 
method lookup as documented in The Java Language Specification, Second Edition, 
section 15.12.4.4; in particular, overriding based on the runtime type of the 
target object will occur. 

If the underlying method is static, the class that declared the method is 
initialized if it has not already been initialized. 

If the method completes normally, the value it returns is returned to the 
caller of invoke; if the value has a primitive type, it is first appropriately 
wrapped in an object. However, if the value has the type of an array of a 
primitive type, the elements of the array are not wrapped in objects; in other 
words, an array of primitive type is returned. If the underlying method return 
type is void, the invocation returns null. 


    obj - the object the underlying method is invoked from 
    args - the arguments used for the method call 

    Returns: the result of dispatching the method represented by this object on {@code obj} 
             with parameters {@code args} 

*java.lang.reflect.Method.isBridge()*

public boolean isBridge()

Returnstrueif this method is a bridge method; returnsfalseotherwise. 



    Returns: true if and only if this method is a bridge method as defined by the Java 
             Language Specification. 

*java.lang.reflect.Method.isSynthetic()*

public boolean isSynthetic()

Returnstrueif this method is a synthetic method; returnsfalseotherwise. 



    Returns: true if and only if this method is a synthetic method as defined by the Java 
             Language Specification. 

*java.lang.reflect.Method.isVarArgs()*

public boolean isVarArgs()

Returnstrueif this method was declared to take a variable number of arguments; 
returnsfalseotherwise. 



    Returns: {@code true} if an only if this method was declared to take a variable number 
             of arguments. 

*java.lang.reflect.Method.toGenericString()*

public |java.lang.String| toGenericString()

Returns a string describing thisMethod, including type parameters. The string 
is formatted as the method access modifiers, if any, followed by an 
angle-bracketed comma-separated list of the method's type parameters, if any, 
followed by the method's generic return type, followed by a space, followed by 
the class declaring the method, followed by a period, followed by the method 
name, followed by a parenthesized, comma-separated list of the method's generic 
formal parameter types. 

If this method was declared to take a variable number of arguments, instead of 
denoting the last parameter as "Type[]", it is denoted as "Type...". 

A space is used to separate access modifiers from one another and from the type 
parameters or return type. If there are no type parameters, the type parameter 
list is elided; if the type parameter list is present, a space separates the 
list from the class name. If the method is declared to throw exceptions, the 
parameter list is followed by a space, followed by the word throws followed by 
a comma-separated list of the generic thrown exception types. If there are no 
type parameters, the type parameter list is elided. 

The access modifiers are placed in canonical order as specified by "The Java 
Language Specification". This ispublic,protectedorprivatefirst, and then other 
modifiers in the following 
order:abstract,static,final,synchronized,native,strictfp. 



    Returns: a string describing this {@code Method}, include type parameters 

*java.lang.reflect.Method.toString()*

public |java.lang.String| toString()

Returns a string describing thisMethod. The string is formatted as the method 
access modifiers, if any, followed by the method return type, followed by a 
space, followed by the class declaring the method, followed by a period, 
followed by the method name, followed by a parenthesized, comma-separated list 
of the method's formal parameter types. If the method throws checked 
exceptions, the parameter list is followed by a space, followed by the word 
throws followed by a comma-separated list of the thrown exception types. For 
example: 

public boolean java.lang.Object.equals(java.lang.Object) 

The access modifiers are placed in canonical order as specified by "The Java 
Language Specification". This ispublic,protectedorprivatefirst, and then other 
modifiers in the following 
order:abstract,static,final,synchronized,native,strictfp. 




