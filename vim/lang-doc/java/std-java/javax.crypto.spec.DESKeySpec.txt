*javax.crypto.spec.DESKeySpec* *DESKeySpec* This class specifies a DES key.

public class DESKeySpec
  extends    |java.lang.Object|
  implements |java.security.spec.KeySpec|

|javax.crypto.spec.DESKeySpec_Description|
|javax.crypto.spec.DESKeySpec_Fields|
|javax.crypto.spec.DESKeySpec_Constructors|
|javax.crypto.spec.DESKeySpec_Methods|

================================================================================

*javax.crypto.spec.DESKeySpec_Fields*
|int_javax.crypto.spec.DESKeySpec.DES_KEY_LEN|

*javax.crypto.spec.DESKeySpec_Constructors*
|javax.crypto.spec.DESKeySpec(byte[])|Creates a DESKeySpec object using the fir
|javax.crypto.spec.DESKeySpec(byte[],int)|Creates a DESKeySpec object using the

*javax.crypto.spec.DESKeySpec_Methods*
|javax.crypto.spec.DESKeySpec.getKey()|Returns the DES key material.
|javax.crypto.spec.DESKeySpec.isParityAdjusted(byte[],int)|Checks if the given 
|javax.crypto.spec.DESKeySpec.isWeak(byte[],int)|Checks if the given DES key ma

*javax.crypto.spec.DESKeySpec_Description*

This class specifies a DES key. 



*int_javax.crypto.spec.DESKeySpec.DES_KEY_LEN*

The constant which defines the length of a DES key in bytes. 



*javax.crypto.spec.DESKeySpec(byte[])*

public DESKeySpec(byte[] key)
  throws |java.security.InvalidKeyException|
         
Creates a DESKeySpec object using the first 8 bytes in key as the key material 
for the DES key. 

The bytes that constitute the DES key are those between key[0] and key[7] 
inclusive. 

    key - the buffer with the DES key material. The first 8 bytes of the buffer are 
       copied to protect against subsequent modification. 

*javax.crypto.spec.DESKeySpec(byte[],int)*

public DESKeySpec(
  byte[] key,
  int offset)
  throws |java.security.InvalidKeyException|
         
Creates a DESKeySpec object using the first 8 bytes in key, beginning at offset 
inclusive, as the key material for the DES key. 

The bytes that constitute the DES key are those between key[offset] and 
key[offset+7] inclusive. 

    key - the buffer with the DES key material. The first 8 bytes of the buffer beginning 
       at offset inclusive are copied to protect against subsequent 
       modification. 
    offset - the offset in key, where the DES key material starts. 

*javax.crypto.spec.DESKeySpec.getKey()*

public byte[] getKey()

Returns the DES key material. 



    Returns: the DES key material. Returns a new array each time this method is called. 

*javax.crypto.spec.DESKeySpec.isParityAdjusted(byte[],int)*

public static boolean isParityAdjusted(
  byte[] key,
  int offset)
  throws |java.security.InvalidKeyException|
         
Checks if the given DES key material, starting at offset inclusive, is 
parity-adjusted. 


    key - the buffer with the DES key material. 
    offset - the offset in key, where the DES key material starts. 

    Returns: true if the given DES key material is parity-adjusted, false otherwise. 

*javax.crypto.spec.DESKeySpec.isWeak(byte[],int)*

public static boolean isWeak(
  byte[] key,
  int offset)
  throws |java.security.InvalidKeyException|
         
Checks if the given DES key material is weak or semi-weak. 


    key - the buffer with the DES key material. 
    offset - the offset in key, where the DES key material starts. 

    Returns: true if the given DES key material is weak or semi-weak, false otherwise. 


