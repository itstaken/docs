*javax.crypto.KeyAgreement* *KeyAgreement* This class provides the functionality

public class KeyAgreement
  extends    |java.lang.Object|

|javax.crypto.KeyAgreement_Description|
|javax.crypto.KeyAgreement_Fields|
|javax.crypto.KeyAgreement_Constructors|
|javax.crypto.KeyAgreement_Methods|

================================================================================

*javax.crypto.KeyAgreement_Constructors*
|javax.crypto.KeyAgreement(KeyAgreementSpi,Provider,String)|Creates a KeyAgreem

*javax.crypto.KeyAgreement_Methods*
|javax.crypto.KeyAgreement.doPhase(Key,boolean)|Executes the next phase of this
|javax.crypto.KeyAgreement.generateSecret()|Generates the shared secret and ret
|javax.crypto.KeyAgreement.generateSecret(byte[],int)|Generates the shared secr
|javax.crypto.KeyAgreement.generateSecret(String)|Creates the shared secret and
|javax.crypto.KeyAgreement.getAlgorithm()|Returns the algorithm name of this Ke
|javax.crypto.KeyAgreement.getInstance(String)|Returns a KeyAgreement object th
|javax.crypto.KeyAgreement.getInstance(String,Provider)|Returns a KeyAgreement 
|javax.crypto.KeyAgreement.getInstance(String,String)|Returns a KeyAgreement ob
|javax.crypto.KeyAgreement.getProvider()|Returns the provider of this KeyAgreem
|javax.crypto.KeyAgreement.init(Key)|Initializes this key agreement with the gi
|javax.crypto.KeyAgreement.init(Key,AlgorithmParameterSpec)|Initializes this ke
|javax.crypto.KeyAgreement.init(Key,AlgorithmParameterSpec,SecureRandom)|Initia
|javax.crypto.KeyAgreement.init(Key,SecureRandom)|Initializes this key agreemen

*javax.crypto.KeyAgreement_Description*

This class provides the functionality of a key agreement (or key exchange) 
protocol. 

The keys involved in establishing a shared secret are created by one of the key 
generators (KeyPairGenerator or KeyGenerator), a KeyFactory, or as a result 
from an intermediate phase of the key agreement protocol. 

For each of the correspondents in the key exchange, doPhase needs to be called. 
For example, if this key exchange is with one other party, doPhase needs to be 
called once, with the lastPhase flag set to true. If this key exchange is with 
two other parties, doPhase needs to be called twice, the first time setting the 
lastPhase flag to false, and the second time setting it to true. There may be 
any number of parties involved in a key exchange. 

Every implementation of the Java platform is required to support the following 
standard KeyAgreement algorithm: 

DiffieHellman 

This algorithm is described in the <a href= 
"/../technotes/guides/security/StandardNames.html#KeyAgreement"> KeyAgreement 
section of the Java Cryptography Architecture Standard Algorithm Name 
Documentation. Consult the release documentation for your implementation to see 
if any other algorithms are supported. 



*javax.crypto.KeyAgreement(KeyAgreementSpi,Provider,String)*

protected KeyAgreement(
  javax.crypto.KeyAgreementSpi keyAgreeSpi,
  java.security.Provider provider,
  java.lang.String algorithm)

Creates a KeyAgreement object. 

    keyAgreeSpi - the delegate 
    provider - the provider 
    algorithm - the algorithm 

*javax.crypto.KeyAgreement.doPhase(Key,boolean)*

public final |java.security.Key| doPhase(
  java.security.Key key,
  boolean lastPhase)
  throws |java.lang.IllegalStateException|
         |java.security.InvalidKeyException|
         
Executes the next phase of this key agreement with the given key that was 
received from one of the other parties involved in this key agreement. 


    key - the key for this phase. For example, in the case of Diffie-Hellman between 2 
       parties, this would be the other party's Diffie-Hellman public key. 
    lastPhase - flag which indicates whether or not this is the last phase of this key 
       agreement. 

    Returns: the (intermediate) key resulting from this phase, or null if this phase does 
             not yield a key 

*javax.crypto.KeyAgreement.generateSecret()*

public final byte[] generateSecret()
  throws |java.lang.IllegalStateException|
         
Generates the shared secret and returns it in a new buffer. 

This method resets this KeyAgreement object, so that it can be reused for 
further key agreements. Unless this key agreement is reinitialized with one of 
the init methods, the same private information and algorithm parameters will be 
used for subsequent key agreements. 



    Returns: the new buffer with the shared secret 

*javax.crypto.KeyAgreement.generateSecret(byte[],int)*

public final int generateSecret(
  byte[] sharedSecret,
  int offset)
  throws |java.lang.IllegalStateException|
         |javax.crypto.ShortBufferException|
         
Generates the shared secret, and places it into the buffer sharedSecret, 
beginning at offset inclusive. 

If the sharedSecret buffer is too small to hold the result, a 
ShortBufferException is thrown. In this case, this call should be repeated with 
a larger output buffer. 

This method resets this KeyAgreement object, so that it can be reused for 
further key agreements. Unless this key agreement is reinitialized with one of 
the init methods, the same private information and algorithm parameters will be 
used for subsequent key agreements. 


    sharedSecret - the buffer for the shared secret 
    offset - the offset in sharedSecret where the shared secret will be stored 

    Returns: the number of bytes placed into sharedSecret 

*javax.crypto.KeyAgreement.generateSecret(String)*

public final |javax.crypto.SecretKey| generateSecret(java.lang.String algorithm)
  throws |java.lang.IllegalStateException|
         |java.security.InvalidKeyException|
         |java.security.NoSuchAlgorithmException|
         
Creates the shared secret and returns it as a SecretKey object of the specified 
algorithm. 

This method resets this KeyAgreement object, so that it can be reused for 
further key agreements. Unless this key agreement is reinitialized with one of 
the init methods, the same private information and algorithm parameters will be 
used for subsequent key agreements. 


    algorithm - the requested secret-key algorithm 

    Returns: the shared secret key 

*javax.crypto.KeyAgreement.getAlgorithm()*

public final |java.lang.String| getAlgorithm()

Returns the algorithm name of this KeyAgreement object. 

This is the same name that was specified in one of the getInstance calls that 
created this KeyAgreement object. 



    Returns: the algorithm name of this KeyAgreement object. 

*javax.crypto.KeyAgreement.getInstance(String)*

public static final |javax.crypto.KeyAgreement| getInstance(java.lang.String algorithm)
  throws |java.security.NoSuchAlgorithmException|
         
Returns a KeyAgreement object that implements the specified key agreement 
algorithm. 

This method traverses the list of registered security Providers, starting with 
the most preferred Provider. A new KeyAgreement object encapsulating the 
KeyAgreementSpi implementation from the first Provider that supports the 
specified algorithm is returned. 

Note that the list of registered providers may be retrieved via the 
Security.getProviders()(|java.security.Security|) method. 


    algorithm - the standard name of the requested key agreement algorithm. See the 
       KeyAgreement section in the Java Cryptography Architecture Standard 
       Algorithm Name Documentation for information about standard algorithm 
       names. 

    Returns: the new KeyAgreement object. 

*javax.crypto.KeyAgreement.getInstance(String,Provider)*

public static final |javax.crypto.KeyAgreement| getInstance(
  java.lang.String algorithm,
  java.security.Provider provider)
  throws |java.security.NoSuchAlgorithmException|
         
Returns a KeyAgreement object that implements the specified key agreement 
algorithm. 

A new KeyAgreement object encapsulating the KeyAgreementSpi implementation from 
the specified Provider object is returned. Note that the specified Provider 
object does not have to be registered in the provider list. 


    algorithm - the standard name of the requested key agreement algorithm. See the 
       KeyAgreement section in the Java Cryptography Architecture Standard 
       Algorithm Name Documentation for information about standard algorithm 
       names. 
    provider - the provider. 

    Returns: the new KeyAgreement object. 

*javax.crypto.KeyAgreement.getInstance(String,String)*

public static final |javax.crypto.KeyAgreement| getInstance(
  java.lang.String algorithm,
  java.lang.String provider)
  throws |java.security.NoSuchAlgorithmException|
         |java.security.NoSuchProviderException|
         
Returns a KeyAgreement object that implements the specified key agreement 
algorithm. 

A new KeyAgreement object encapsulating the KeyAgreementSpi implementation from 
the specified provider is returned. The specified provider must be registered 
in the security provider list. 

Note that the list of registered providers may be retrieved via the 
Security.getProviders()(|java.security.Security|) method. 


    algorithm - the standard name of the requested key agreement algorithm. See the 
       KeyAgreement section in the Java Cryptography Architecture Standard 
       Algorithm Name Documentation for information about standard algorithm 
       names. 
    provider - the name of the provider. 

    Returns: the new KeyAgreement object. 

*javax.crypto.KeyAgreement.getProvider()*

public final |java.security.Provider| getProvider()

Returns the provider of this KeyAgreement object. 



    Returns: the provider of this KeyAgreement object 

*javax.crypto.KeyAgreement.init(Key)*

public final void init(java.security.Key key)
  throws |java.security.InvalidKeyException|
         
Initializes this key agreement with the given key, which is required to contain 
all the algorithm parameters required for this key agreement. 

If this key agreement requires any random bytes, it will get them using the 
<code>SecureRandom</code>(|java.security.SecureRandom|) implementation of the 
highest-priority installed provider as the source of randomness. (If none of 
the installed providers supply an implementation of SecureRandom, a 
system-provided source of randomness will be used.) 


    key - the party's private information. For example, in the case of the Diffie-Hellman 
       key agreement, this would be the party's own Diffie-Hellman private key. 

*javax.crypto.KeyAgreement.init(Key,AlgorithmParameterSpec)*

public final void init(
  java.security.Key key,
  java.security.spec.AlgorithmParameterSpec params)
  throws |java.security.InvalidAlgorithmParameterException|
         |java.security.InvalidKeyException|
         
Initializes this key agreement with the given key and set of algorithm 
parameters. 

If this key agreement requires any random bytes, it will get them using the 
<code>SecureRandom</code>(|java.security.SecureRandom|) implementation of the 
highest-priority installed provider as the source of randomness. (If none of 
the installed providers supply an implementation of SecureRandom, a 
system-provided source of randomness will be used.) 


    key - the party's private information. For example, in the case of the Diffie-Hellman 
       key agreement, this would be the party's own Diffie-Hellman private key. 
    params - the key agreement parameters 

*javax.crypto.KeyAgreement.init(Key,AlgorithmParameterSpec,SecureRandom)*

public final void init(
  java.security.Key key,
  java.security.spec.AlgorithmParameterSpec params,
  java.security.SecureRandom random)
  throws |java.security.InvalidAlgorithmParameterException|
         |java.security.InvalidKeyException|
         
Initializes this key agreement with the given key, set of algorithm parameters, 
and source of randomness. 


    key - the party's private information. For example, in the case of the Diffie-Hellman 
       key agreement, this would be the party's own Diffie-Hellman private key. 
    params - the key agreement parameters 
    random - the source of randomness 

*javax.crypto.KeyAgreement.init(Key,SecureRandom)*

public final void init(
  java.security.Key key,
  java.security.SecureRandom random)
  throws |java.security.InvalidKeyException|
         
Initializes this key agreement with the given key and source of randomness. The 
given key is required to contain all the algorithm parameters required for this 
key agreement. 

If the key agreement algorithm requires random bytes, it gets them from the 
given source of randomness, random. However, if the underlying algorithm 
implementation does not require any random bytes, random is ignored. 


    key - the party's private information. For example, in the case of the Diffie-Hellman 
       key agreement, this would be the party's own Diffie-Hellman private key. 
    random - the source of randomness 


