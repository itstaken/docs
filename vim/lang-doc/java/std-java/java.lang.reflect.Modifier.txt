*java.lang.reflect.Modifier* *Modifier* The Modifier class providesstaticmethods

public class Modifier
  extends    |java.lang.Object|

|java.lang.reflect.Modifier_Description|
|java.lang.reflect.Modifier_Fields|
|java.lang.reflect.Modifier_Constructors|
|java.lang.reflect.Modifier_Methods|

================================================================================

*java.lang.reflect.Modifier_Fields*
|int_java.lang.reflect.Modifier.ABSTRACT|
|int_java.lang.reflect.Modifier.FINAL|
|int_java.lang.reflect.Modifier.INTERFACE|
|int_java.lang.reflect.Modifier.NATIVE|
|int_java.lang.reflect.Modifier.PRIVATE|
|int_java.lang.reflect.Modifier.PROTECTED|
|int_java.lang.reflect.Modifier.PUBLIC|
|int_java.lang.reflect.Modifier.STATIC|
|int_java.lang.reflect.Modifier.STRICT|
|int_java.lang.reflect.Modifier.SYNCHRONIZED|
|int_java.lang.reflect.Modifier.TRANSIENT|
|int_java.lang.reflect.Modifier.VOLATILE|

*java.lang.reflect.Modifier_Constructors*
|java.lang.reflect.Modifier()|

*java.lang.reflect.Modifier_Methods*
|java.lang.reflect.Modifier.classModifiers()|Return anintvalue OR-ing together 
|java.lang.reflect.Modifier.constructorModifiers()|Return anintvalue OR-ing tog
|java.lang.reflect.Modifier.fieldModifiers()|Return anintvalue OR-ing together 
|java.lang.reflect.Modifier.interfaceModifiers()|Return anintvalue OR-ing toget
|java.lang.reflect.Modifier.isAbstract(int)|Returntrueif the integer argument i
|java.lang.reflect.Modifier.isFinal(int)|Returntrueif the integer argument incl
|java.lang.reflect.Modifier.isInterface(int)|Returntrueif the integer argument 
|java.lang.reflect.Modifier.isNative(int)|Returntrueif the integer argument inc
|java.lang.reflect.Modifier.isPrivate(int)|Returntrueif the integer argument in
|java.lang.reflect.Modifier.isProtected(int)|Returntrueif the integer argument 
|java.lang.reflect.Modifier.isPublic(int)|Returntrueif the integer argument inc
|java.lang.reflect.Modifier.isStatic(int)|Returntrueif the integer argument inc
|java.lang.reflect.Modifier.isStrict(int)|Returntrueif the integer argument inc
|java.lang.reflect.Modifier.isSynchronized(int)|Returntrueif the integer argume
|java.lang.reflect.Modifier.isTransient(int)|Returntrueif the integer argument 
|java.lang.reflect.Modifier.isVolatile(int)|Returntrueif the integer argument i
|java.lang.reflect.Modifier.methodModifiers()|Return anintvalue OR-ing together
|java.lang.reflect.Modifier.toString(int)|Return a string describing the access

*java.lang.reflect.Modifier_Description*

The Modifier class providesstaticmethods and constants to decode class and 
member access modifiers. The sets of modifiers are represented as integers with 
distinct bit positions representing different modifiers. The values for the 
constants representing the modifiers are taken from the tables in sections 4.1, 
4.4, 4.5, and 4.7 of The Java Virtual Machine Specification. 



*int_java.lang.reflect.Modifier.ABSTRACT*

Theintvalue representing theabstractmodifier. 


*int_java.lang.reflect.Modifier.FINAL*

Theintvalue representing thefinalmodifier. 


*int_java.lang.reflect.Modifier.INTERFACE*

Theintvalue representing theinterfacemodifier. 


*int_java.lang.reflect.Modifier.NATIVE*

Theintvalue representing thenativemodifier. 


*int_java.lang.reflect.Modifier.PRIVATE*

Theintvalue representing theprivatemodifier. 


*int_java.lang.reflect.Modifier.PROTECTED*

Theintvalue representing theprotectedmodifier. 


*int_java.lang.reflect.Modifier.PUBLIC*

Theintvalue representing thepublicmodifier. 


*int_java.lang.reflect.Modifier.STATIC*

Theintvalue representing thestaticmodifier. 


*int_java.lang.reflect.Modifier.STRICT*

Theintvalue representing thestrictfpmodifier. 


*int_java.lang.reflect.Modifier.SYNCHRONIZED*

Theintvalue representing thesynchronizedmodifier. 


*int_java.lang.reflect.Modifier.TRANSIENT*

Theintvalue representing thetransientmodifier. 


*int_java.lang.reflect.Modifier.VOLATILE*

Theintvalue representing thevolatilemodifier. 



*java.lang.reflect.Modifier()*

public Modifier()




*java.lang.reflect.Modifier.classModifiers()*

public static int classModifiers()

Return anintvalue OR-ing together the source language modifiers that can be 
applied to a class. 



    Returns: an {@code int} value OR-ing together the source language modifiers that can be 
             applied to a class. 

*java.lang.reflect.Modifier.constructorModifiers()*

public static int constructorModifiers()

Return anintvalue OR-ing together the source language modifiers that can be 
applied to a constructor. 



    Returns: an {@code int} value OR-ing together the source language modifiers that can be 
             applied to a constructor. 

*java.lang.reflect.Modifier.fieldModifiers()*

public static int fieldModifiers()

Return anintvalue OR-ing together the source language modifiers that can be 
applied to a field. 



    Returns: an {@code int} value OR-ing together the source language modifiers that can be 
             applied to a field. 

*java.lang.reflect.Modifier.interfaceModifiers()*

public static int interfaceModifiers()

Return anintvalue OR-ing together the source language modifiers that can be 
applied to an interface. 



    Returns: an {@code int} value OR-ing together the source language modifiers that can be 
             applied to an inteface. 

*java.lang.reflect.Modifier.isAbstract(int)*

public static boolean isAbstract(int mod)

Returntrueif the integer argument includes theabstractmodifier,falseotherwise. 


    mod - a set of modifiers 

    Returns: {@code true} if {@code mod} includes the {@code abstract} modifier; {@code 
             false} otherwise. 

*java.lang.reflect.Modifier.isFinal(int)*

public static boolean isFinal(int mod)

Returntrueif the integer argument includes thefinalmodifier,falseotherwise. 


    mod - a set of modifiers 

    Returns: {@code true} if {@code mod} includes the {@code final} modifier; {@code false} 
             otherwise. 

*java.lang.reflect.Modifier.isInterface(int)*

public static boolean isInterface(int mod)

Returntrueif the integer argument includes theinterfacemodifier,falseotherwise. 


    mod - a set of modifiers 

    Returns: {@code true} if {@code mod} includes the {@code interface} modifier; {@code 
             false} otherwise. 

*java.lang.reflect.Modifier.isNative(int)*

public static boolean isNative(int mod)

Returntrueif the integer argument includes thenativemodifier,falseotherwise. 


    mod - a set of modifiers 

    Returns: {@code true} if {@code mod} includes the {@code native} modifier; {@code false} 
             otherwise. 

*java.lang.reflect.Modifier.isPrivate(int)*

public static boolean isPrivate(int mod)

Returntrueif the integer argument includes theprivatemodifier,falseotherwise. 


    mod - a set of modifiers 

    Returns: {@code true} if {@code mod} includes the {@code private} modifier; {@code 
             false} otherwise. 

*java.lang.reflect.Modifier.isProtected(int)*

public static boolean isProtected(int mod)

Returntrueif the integer argument includes theprotectedmodifier,falseotherwise. 


    mod - a set of modifiers 

    Returns: {@code true} if {@code mod} includes the {@code protected} modifier; {@code 
             false} otherwise. 

*java.lang.reflect.Modifier.isPublic(int)*

public static boolean isPublic(int mod)

Returntrueif the integer argument includes thepublicmodifier,falseotherwise. 


    mod - a set of modifiers 

    Returns: {@code true} if {@code mod} includes the {@code public} modifier; {@code false} 
             otherwise. 

*java.lang.reflect.Modifier.isStatic(int)*

public static boolean isStatic(int mod)

Returntrueif the integer argument includes thestaticmodifier,falseotherwise. 


    mod - a set of modifiers 

    Returns: {@code true} if {@code mod} includes the {@code static} modifier; {@code false} 
             otherwise. 

*java.lang.reflect.Modifier.isStrict(int)*

public static boolean isStrict(int mod)

Returntrueif the integer argument includes thestrictfpmodifier,falseotherwise. 


    mod - a set of modifiers 

    Returns: {@code true} if {@code mod} includes the {@code strictfp} modifier; {@code 
             false} otherwise. 

*java.lang.reflect.Modifier.isSynchronized(int)*

public static boolean isSynchronized(int mod)

Returntrueif the integer argument includes 
thesynchronizedmodifier,falseotherwise. 


    mod - a set of modifiers 

    Returns: {@code true} if {@code mod} includes the {@code synchronized} modifier; {@code 
             false} otherwise. 

*java.lang.reflect.Modifier.isTransient(int)*

public static boolean isTransient(int mod)

Returntrueif the integer argument includes thetransientmodifier,falseotherwise. 


    mod - a set of modifiers 

    Returns: {@code true} if {@code mod} includes the {@code transient} modifier; {@code 
             false} otherwise. 

*java.lang.reflect.Modifier.isVolatile(int)*

public static boolean isVolatile(int mod)

Returntrueif the integer argument includes thevolatilemodifier,falseotherwise. 


    mod - a set of modifiers 

    Returns: {@code true} if {@code mod} includes the {@code volatile} modifier; {@code 
             false} otherwise. 

*java.lang.reflect.Modifier.methodModifiers()*

public static int methodModifiers()

Return anintvalue OR-ing together the source language modifiers that can be 
applied to a method. 



    Returns: an {@code int} value OR-ing together the source language modifiers that can be 
             applied to a method. 

*java.lang.reflect.Modifier.toString(int)*

public static |java.lang.String| toString(int mod)

Return a string describing the access modifier flags in the specified modifier. 
For example: 

public final synchronized strictfp 

The modifier names are returned in an order consistent with the suggested 
modifier orderings given in sections 8.1.1, 8.3.1, 8.4.3, 8.8.3, and 9.1.1 of 
The Java Language Specification. The full modifier ordering used by this method 
is: public protected private abstract static final transient volatile 
synchronized native strictfp interface Theinterfacemodifier discussed in this 
class is not a true modifier in the Java language and it appears after all 
other modifiers listed by this method. This method may return a string of 
modifiers that are not valid modifiers of a Java entity; in other words, no 
checking is done on the possible validity of the combination of modifiers 
represented by the input. 

Note that to perform such checking for a known kind of entity, such as a 
constructor or method, first AND the argument oftoStringwith the appropriate 
mask from a method like (|java.lang.reflect.Modifier|) or 
(|java.lang.reflect.Modifier|) . 


    mod - a set of modifiers 

    Returns: a string representation of the set of modifiers represented by {@code mod} 


