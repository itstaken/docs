*javax.crypto.Mac* *Mac* This class provides the functionality of a "Message Aut

public class Mac
  extends    |java.lang.Object|
  implements |java.lang.Cloneable|

|javax.crypto.Mac_Description|
|javax.crypto.Mac_Fields|
|javax.crypto.Mac_Constructors|
|javax.crypto.Mac_Methods|

================================================================================

*javax.crypto.Mac_Constructors*
|javax.crypto.Mac(MacSpi,Provider,String)|Creates a MAC object.

*javax.crypto.Mac_Methods*
|javax.crypto.Mac.clone()|Returns a clone if the provider implementation is clo
|javax.crypto.Mac.doFinal()|Finishes the MAC operation.
|javax.crypto.Mac.doFinal(byte[])|Processes the given array of bytes and finish
|javax.crypto.Mac.doFinal(byte[],int)|Finishes the MAC operation.
|javax.crypto.Mac.getAlgorithm()|Returns the algorithm name of this Mac object.
|javax.crypto.Mac.getInstance(String)|Returns a Mac object that implements the 
|javax.crypto.Mac.getInstance(String,Provider)|Returns a Mac object that implem
|javax.crypto.Mac.getInstance(String,String)|Returns a Mac object that implemen
|javax.crypto.Mac.getMacLength()|Returns the length of the MAC in bytes.
|javax.crypto.Mac.getProvider()|Returns the provider of this Mac object.
|javax.crypto.Mac.init(Key)|Initializes this Mac object with the given key.
|javax.crypto.Mac.init(Key,AlgorithmParameterSpec)|Initializes this Mac object 
|javax.crypto.Mac.reset()|Resets this Mac object.
|javax.crypto.Mac.update(byte)|Processes the given byte.
|javax.crypto.Mac.update(byte[])|Processes the given array of bytes.
|javax.crypto.Mac.update(byte[],int,int)|Processes the first len bytes in input
|javax.crypto.Mac.update(ByteBuffer)|Processes input.remaining() bytes in the B

*javax.crypto.Mac_Description*

This class provides the functionality of a "Message Authentication Code" (MAC) 
algorithm. 

A MAC provides a way to check the integrity of information transmitted over or 
stored in an unreliable medium, based on a secret key. Typically, message 
authentication codes are used between two parties that share a secret key in 
order to validate information transmitted between these parties. 

A MAC mechanism that is based on cryptographic hash functions is referred to as 
HMAC. HMAC can be used with any cryptographic hash function, e.g., MD5 or 
SHA-1, in combination with a secret shared key. HMAC is specified in RFC 2104. 

Every implementation of the Java platform is required to support the following 
standard Mac algorithms: 

HmacMD5 HmacSHA1 HmacSHA256 

These algorithms are described in the <a 
href="/../technotes/guides/security/StandardNames.html#Mac"> Mac section of the 
Java Cryptography Architecture Standard Algorithm Name Documentation. Consult 
the release documentation for your implementation to see if any other 
algorithms are supported. 



*javax.crypto.Mac(MacSpi,Provider,String)*

protected Mac(
  javax.crypto.MacSpi macSpi,
  java.security.Provider provider,
  java.lang.String algorithm)

Creates a MAC object. 

    macSpi - the delegate 
    provider - the provider 
    algorithm - the algorithm 

*javax.crypto.Mac.clone()*

public final |java.lang.Object| clone()
  throws |java.lang.CloneNotSupportedException|
         
Returns a clone if the provider implementation is cloneable. 



    Returns: a clone if the provider implementation is cloneable. 

*javax.crypto.Mac.doFinal()*

public final byte[] doFinal()
  throws |java.lang.IllegalStateException|
         
Finishes the MAC operation. 

A call to this method resets this Mac object to the state it was in when 
previously initialized via a call to init(Key) or init(Key, 
AlgorithmParameterSpec). That is, the object is reset and available to generate 
another MAC from the same key, if desired, via new calls to update and doFinal. 
(In order to reuse this Mac object with a different key, it must be 
reinitialized via a call to init(Key) or init(Key, AlgorithmParameterSpec). 



    Returns: the MAC result. 

*javax.crypto.Mac.doFinal(byte[])*

public final byte[] doFinal(byte[] input)
  throws |java.lang.IllegalStateException|
         
Processes the given array of bytes and finishes the MAC operation. 

A call to this method resets this Mac object to the state it was in when 
previously initialized via a call to init(Key) or init(Key, 
AlgorithmParameterSpec). That is, the object is reset and available to generate 
another MAC from the same key, if desired, via new calls to update and doFinal. 
(In order to reuse this Mac object with a different key, it must be 
reinitialized via a call to init(Key) or init(Key, AlgorithmParameterSpec). 


    input - data in bytes 

    Returns: the MAC result. 

*javax.crypto.Mac.doFinal(byte[],int)*

public final void doFinal(
  byte[] output,
  int outOffset)
  throws |java.lang.IllegalStateException|
         |javax.crypto.ShortBufferException|
         
Finishes the MAC operation. 

A call to this method resets this Mac object to the state it was in when 
previously initialized via a call to init(Key) or init(Key, 
AlgorithmParameterSpec). That is, the object is reset and available to generate 
another MAC from the same key, if desired, via new calls to update and doFinal. 
(In order to reuse this Mac object with a different key, it must be 
reinitialized via a call to init(Key) or init(Key, AlgorithmParameterSpec). 

The MAC result is stored in output, starting at outOffset inclusive. 


    output - the buffer where the MAC result is stored 
    outOffset - the offset in output where the MAC is stored 

*javax.crypto.Mac.getAlgorithm()*

public final |java.lang.String| getAlgorithm()

Returns the algorithm name of this Mac object. 

This is the same name that was specified in one of the getInstance calls that 
created this Mac object. 



    Returns: the algorithm name of this Mac object. 

*javax.crypto.Mac.getInstance(String)*

public static final |javax.crypto.Mac| getInstance(java.lang.String algorithm)
  throws |java.security.NoSuchAlgorithmException|
         
Returns a Mac object that implements the specified MAC algorithm. 

This method traverses the list of registered security Providers, starting with 
the most preferred Provider. A new Mac object encapsulating the MacSpi 
implementation from the first Provider that supports the specified algorithm is 
returned. 

Note that the list of registered providers may be retrieved via the 
Security.getProviders()(|java.security.Security|) method. 


    algorithm - the standard name of the requested MAC algorithm. See the Mac section in the 
       Java Cryptography Architecture Standard Algorithm Name Documentation for 
       information about standard algorithm names. 

    Returns: the new Mac object. 

*javax.crypto.Mac.getInstance(String,Provider)*

public static final |javax.crypto.Mac| getInstance(
  java.lang.String algorithm,
  java.security.Provider provider)
  throws |java.security.NoSuchAlgorithmException|
         
Returns a Mac object that implements the specified MAC algorithm. 

A new Mac object encapsulating the MacSpi implementation from the specified 
Provider object is returned. Note that the specified Provider object does not 
have to be registered in the provider list. 


    algorithm - the standard name of the requested MAC algorithm. See the Mac section in the 
       Java Cryptography Architecture Standard Algorithm Name Documentation for 
       information about standard algorithm names. 
    provider - the provider. 

    Returns: the new Mac object. 

*javax.crypto.Mac.getInstance(String,String)*

public static final |javax.crypto.Mac| getInstance(
  java.lang.String algorithm,
  java.lang.String provider)
  throws |java.security.NoSuchAlgorithmException|
         |java.security.NoSuchProviderException|
         
Returns a Mac object that implements the specified MAC algorithm. 

A new Mac object encapsulating the MacSpi implementation from the specified 
provider is returned. The specified provider must be registered in the security 
provider list. 

Note that the list of registered providers may be retrieved via the 
Security.getProviders()(|java.security.Security|) method. 


    algorithm - the standard name of the requested MAC algorithm. See the Mac section in the 
       Java Cryptography Architecture Standard Algorithm Name Documentation for 
       information about standard algorithm names. 
    provider - the name of the provider. 

    Returns: the new Mac object. 

*javax.crypto.Mac.getMacLength()*

public final int getMacLength()

Returns the length of the MAC in bytes. 



    Returns: the MAC length in bytes. 

*javax.crypto.Mac.getProvider()*

public final |java.security.Provider| getProvider()

Returns the provider of this Mac object. 



    Returns: the provider of this Mac object. 

*javax.crypto.Mac.init(Key)*

public final void init(java.security.Key key)
  throws |java.security.InvalidKeyException|
         
Initializes this Mac object with the given key. 


    key - the key. 

*javax.crypto.Mac.init(Key,AlgorithmParameterSpec)*

public final void init(
  java.security.Key key,
  java.security.spec.AlgorithmParameterSpec params)
  throws |java.security.InvalidAlgorithmParameterException|
         |java.security.InvalidKeyException|
         
Initializes this Mac object with the given key and algorithm parameters. 


    key - the key. 
    params - the algorithm parameters. 

*javax.crypto.Mac.reset()*

public final void reset()

Resets this Mac object. 

A call to this method resets this Mac object to the state it was in when 
previously initialized via a call to init(Key) or init(Key, 
AlgorithmParameterSpec). That is, the object is reset and available to generate 
another MAC from the same key, if desired, via new calls to update and doFinal. 
(In order to reuse this Mac object with a different key, it must be 
reinitialized via a call to init(Key) or init(Key, AlgorithmParameterSpec). 



*javax.crypto.Mac.update(byte)*

public final void update(byte input)
  throws |java.lang.IllegalStateException|
         
Processes the given byte. 


    input - the input byte to be processed. 

*javax.crypto.Mac.update(byte[])*

public final void update(byte[] input)
  throws |java.lang.IllegalStateException|
         
Processes the given array of bytes. 


    input - the array of bytes to be processed. 

*javax.crypto.Mac.update(byte[],int,int)*

public final void update(
  byte[] input,
  int offset,
  int len)
  throws |java.lang.IllegalStateException|
         
Processes the first len bytes in input, starting at offset inclusive. 


    input - the input buffer. 
    offset - the offset in input where the input starts. 
    len - the number of bytes to process. 

*javax.crypto.Mac.update(ByteBuffer)*

public final void update(java.nio.ByteBuffer input)

Processes input.remaining() bytes in the ByteBuffer input, starting at 
input.position(). Upon return, the buffer's position will be equal to its 
limit; its limit will not have changed. 


    input - the ByteBuffer 


