*java.security.AlgorithmParameterGenerator* *AlgorithmParameterGenerator* The Al

public class AlgorithmParameterGenerator
  extends    |java.lang.Object|

|java.security.AlgorithmParameterGenerator_Description|
|java.security.AlgorithmParameterGenerator_Fields|
|java.security.AlgorithmParameterGenerator_Constructors|
|java.security.AlgorithmParameterGenerator_Methods|

================================================================================

*java.security.AlgorithmParameterGenerator_Constructors*
|java.security.AlgorithmParameterGenerator(AlgorithmParameterGeneratorSpi,Provider,String)|

*java.security.AlgorithmParameterGenerator_Methods*
|java.security.AlgorithmParameterGenerator.generateParameters()|Generates the p
|java.security.AlgorithmParameterGenerator.getAlgorithm()|Returns the standard 
|java.security.AlgorithmParameterGenerator.getInstance(String)|Returns an Algor
|java.security.AlgorithmParameterGenerator.getInstance(String,Provider)|Returns
|java.security.AlgorithmParameterGenerator.getInstance(String,String)|Returns a
|java.security.AlgorithmParameterGenerator.getProvider()|Returns the provider o
|java.security.AlgorithmParameterGenerator.init(AlgorithmParameterSpec)|Initial
|java.security.AlgorithmParameterGenerator.init(AlgorithmParameterSpec,SecureRandom)|
|java.security.AlgorithmParameterGenerator.init(int)|Initializes this parameter
|java.security.AlgorithmParameterGenerator.init(int,SecureRandom)|Initializes t

*java.security.AlgorithmParameterGenerator_Description*

The AlgorithmParameterGenerator class is used to generate a set of parameters 
to be used with a certain algorithm. Parameter generators are constructed using 
the getInstance factory methods (static methods that return instances of a 
given class). 

The object that will generate the parameters can be initialized in two 
different ways: in an algorithm-independent manner, or in an algorithm-specific 
manner: 

The algorithm-independent approach uses the fact that all parameter generators 
share the concept of a "size" and a source of randomness. The measure of size 
is universally shared by all algorithm parameters, though it is interpreted 
differently for different algorithms. For example, in the case of parameters 
for the DSA algorithm, "size" corresponds to the size of the prime modulus (in 
bits). When using this approach, algorithm-specific parameter generation values 
- if any - default to some standard values, unless they can be derived from the 
specified size. 

The other approach initializes a parameter generator object using 
algorithm-specific semantics, which are represented by a set of 
algorithm-specific parameter generation values. To generate Diffie-Hellman 
system parameters, for example, the parameter generation values usually consist 
of the size of the prime modulus and the size of the random exponent, both 
specified in number of bits. 

In case the client does not explicitly initialize the 
AlgorithmParameterGenerator (via a call to an init method), each provider must 
supply (and document) a default initialization. For example, the Sun provider 
uses a default modulus prime size of 1024 bits for the generation of DSA 
parameters. 

Every implementation of the Java platform is required to support the following 
standard AlgorithmParameterGenerator algorithms and keysizes in parentheses: 

DiffieHellman (1024) DSA (1024) 

These algorithms are described in the <a href= 
"/../technotes/guides/security/StandardNames.html#AlgorithmParameterGenerator"> 
AlgorithmParameterGenerator section of the Java Cryptography Architecture 
Standard Algorithm Name Documentation. Consult the release documentation for 
your implementation to see if any other algorithms are supported. 



*java.security.AlgorithmParameterGenerator(AlgorithmParameterGeneratorSpi,Provider,String)*

protected AlgorithmParameterGenerator(
  java.security.AlgorithmParameterGeneratorSpi paramGenSpi,
  java.security.Provider provider,
  java.lang.String algorithm)

Creates an AlgorithmParameterGenerator object. 

    paramGenSpi - the delegate 
    provider - the provider 
    algorithm - the algorithm 

*java.security.AlgorithmParameterGenerator.generateParameters()*

public final |java.security.AlgorithmParameters| generateParameters()

Generates the parameters. 



    Returns: the new AlgorithmParameters object. 

*java.security.AlgorithmParameterGenerator.getAlgorithm()*

public final |java.lang.String| getAlgorithm()

Returns the standard name of the algorithm this parameter generator is 
associated with. 



    Returns: the string name of the algorithm. 

*java.security.AlgorithmParameterGenerator.getInstance(String)*

public static |java.security.AlgorithmParameterGenerator| getInstance(java.lang.String algorithm)
  throws |java.security.NoSuchAlgorithmException|
         
Returns an AlgorithmParameterGenerator object for generating a set of 
parameters to be used with the specified algorithm. 

This method traverses the list of registered security Providers, starting with 
the most preferred Provider. A new AlgorithmParameterGenerator object 
encapsulating the AlgorithmParameterGeneratorSpi implementation from the first 
Provider that supports the specified algorithm is returned. 

Note that the list of registered providers may be retrieved via the 
Security.getProviders()(|java.security.Security|) method. 


    algorithm - the name of the algorithm this parameter generator is associated with. See the 
       AlgorithmParameterGenerator section in the Java Cryptography 
       Architecture Standard Algorithm Name Documentation for information about 
       standard algorithm names. 

    Returns: the new AlgorithmParameterGenerator object. 

*java.security.AlgorithmParameterGenerator.getInstance(String,Provider)*

public static |java.security.AlgorithmParameterGenerator| getInstance(
  java.lang.String algorithm,
  java.security.Provider provider)
  throws |java.security.NoSuchAlgorithmException|
         
Returns an AlgorithmParameterGenerator object for generating a set of 
parameters to be used with the specified algorithm. 

A new AlgorithmParameterGenerator object encapsulating the 
AlgorithmParameterGeneratorSpi implementation from the specified Provider 
object is returned. Note that the specified Provider object does not have to be 
registered in the provider list. 


    algorithm - the string name of the algorithm this parameter generator is associated with. 
       See the AlgorithmParameterGenerator section in the Java Cryptography 
       Architecture Standard Algorithm Name Documentation for information about 
       standard algorithm names. 
    provider - the Provider object. 

    Returns: the new AlgorithmParameterGenerator object. 

*java.security.AlgorithmParameterGenerator.getInstance(String,String)*

public static |java.security.AlgorithmParameterGenerator| getInstance(
  java.lang.String algorithm,
  java.lang.String provider)
  throws |java.security.NoSuchAlgorithmException|
         |java.security.NoSuchProviderException|
         
Returns an AlgorithmParameterGenerator object for generating a set of 
parameters to be used with the specified algorithm. 

A new AlgorithmParameterGenerator object encapsulating the 
AlgorithmParameterGeneratorSpi implementation from the specified provider is 
returned. The specified provider must be registered in the security provider 
list. 

Note that the list of registered providers may be retrieved via the 
Security.getProviders()(|java.security.Security|) method. 


    algorithm - the name of the algorithm this parameter generator is associated with. See the 
       AlgorithmParameterGenerator section in the Java Cryptography 
       Architecture Standard Algorithm Name Documentation for information about 
       standard algorithm names. 
    provider - the string name of the Provider. 

    Returns: the new AlgorithmParameterGenerator object. 

*java.security.AlgorithmParameterGenerator.getProvider()*

public final |java.security.Provider| getProvider()

Returns the provider of this algorithm parameter generator object. 



    Returns: the provider of this algorithm parameter generator object 

*java.security.AlgorithmParameterGenerator.init(AlgorithmParameterSpec)*

public final void init(java.security.spec.AlgorithmParameterSpec genParamSpec)
  throws |java.security.InvalidAlgorithmParameterException|
         
Initializes this parameter generator with a set of algorithm-specific parameter 
generation values. To generate the parameters, the SecureRandom implementation 
of the highest-priority installed provider is used as the source of randomness. 
(If none of the installed providers supply an implementation of SecureRandom, a 
system-provided source of randomness is used.) 


    genParamSpec - the set of algorithm-specific parameter generation values. 

*java.security.AlgorithmParameterGenerator.init(AlgorithmParameterSpec,SecureRandom)*

public final void init(
  java.security.spec.AlgorithmParameterSpec genParamSpec,
  java.security.SecureRandom random)
  throws |java.security.InvalidAlgorithmParameterException|
         
Initializes this parameter generator with a set of algorithm-specific parameter 
generation values. 


    genParamSpec - the set of algorithm-specific parameter generation values. 
    random - the source of randomness. 

*java.security.AlgorithmParameterGenerator.init(int)*

public final void init(int size)

Initializes this parameter generator for a certain size. To create the 
parameters, the SecureRandom implementation of the highest-priority installed 
provider is used as the source of randomness. (If none of the installed 
providers supply an implementation of SecureRandom, a system-provided source of 
randomness is used.) 


    size - the size (number of bits). 

*java.security.AlgorithmParameterGenerator.init(int,SecureRandom)*

public final void init(
  int size,
  java.security.SecureRandom random)

Initializes this parameter generator for a certain size and source of 
randomness. 


    size - the size (number of bits). 
    random - the source of randomness. 


