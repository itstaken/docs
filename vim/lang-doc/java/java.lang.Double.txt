*java.lang.Double* *Double* TheDoubleclass wraps a value of the primitive typedo

public final class Double
  extends    |java.lang.Number|
  implements |java.lang.Comparable|

|java.lang.Double_Description|
|java.lang.Double_Fields|
|java.lang.Double_Constructors|
|java.lang.Double_Methods|

================================================================================

*java.lang.Double_Fields*
|int_java.lang.Double.MAX_EXPONENT|
|double_java.lang.Double.MAX_VALUE|
|int_java.lang.Double.MIN_EXPONENT|
|double_java.lang.Double.MIN_NORMAL|
|double_java.lang.Double.MIN_VALUE|
|double_java.lang.Double.NaN|
|double_java.lang.Double.NEGATIVE_INFINITY|
|double_java.lang.Double.POSITIVE_INFINITY|
|int_java.lang.Double.SIZE|
|java.lang.Class<java.lang.Double>_java.lang.Double.TYPE|

*java.lang.Double_Constructors*
|java.lang.Double(double)|Constructs a newly allocatedDoubleobject that  repres
|java.lang.Double(String)|Constructs a newly allocatedDoubleobject that  repres

*java.lang.Double_Methods*
|java.lang.Double.byteValue()|Returns the value of thisDoubleas abyte(by  casti
|java.lang.Double.compare(double,double)|Compares the two specifieddoublevalues
|java.lang.Double.compareTo(Double)|Compares twoDoubleobjects numerically.
|java.lang.Double.doubleToLongBits(double)|Returns a representation of the spec
|java.lang.Double.doubleToRawLongBits(double)|Returns a representation of the s
|java.lang.Double.doubleValue()|Returns thedoublevalue of thisDoubleobject.
|java.lang.Double.equals(Object)|Compares this object against the specified obj
|java.lang.Double.floatValue()|Returns thefloatvalue of thisDoubleobject.
|java.lang.Double.hashCode()|Returns a hash code for thisDoubleobject.
|java.lang.Double.intValue()|Returns the value of thisDoubleas anint(by casting
|java.lang.Double.isInfinite()|Returnstrueif thisDoublevalue is  infinitely lar
|java.lang.Double.isInfinite(double)|Returnstrueif the specified number is infi
|java.lang.Double.isNaN()|Returnstrueif thisDoublevalue is  a Not-a-Number (NaN
|java.lang.Double.isNaN(double)|Returnstrueif the specified number is a  Not-a-
|java.lang.Double.longBitsToDouble(long)|Returns thedoublevalue corresponding t
|java.lang.Double.longValue()|Returns the value of thisDoubleas along(by castin
|java.lang.Double.parseDouble(String)|Returns a newdoubleinitialized to the val
|java.lang.Double.shortValue()|Returns the value of thisDoubleas ashort(by cast
|java.lang.Double.toHexString(double)|Returns a hexadecimal string representati
|java.lang.Double.toString()|Returns a string representation of thisDoubleobjec
|java.lang.Double.toString(double)|Returns a string representation of thedouble
|java.lang.Double.valueOf(double)|Returns aDoubleinstance representing the spec
|java.lang.Double.valueOf(String)|Returns aDoubleobject holding thedoublevalue 

*java.lang.Double_Description*

TheDoubleclass wraps a value of the primitive typedoublein an object. An object 
of typeDoublecontains a single field whose type isdouble. 

In addition, this class provides several methods for converting adoubleto 
aStringand aStringto adouble, as well as other constants and methods useful 
when dealing with adouble. 



*int_java.lang.Double.MAX_EXPONENT*

Maximum exponent a finitedoublevariable may have. It is equal to the value 
returned byMath.getExponent(Double.MAX_VALUE). 


*double_java.lang.Double.MAX_VALUE*

A constant holding the largest positive finite value of typedouble, 
(2-2-52)21023. It is equal to the hexadecimal floating-point 
literal0x1.fffffffffffffP+1023and also equal 
toDouble.longBitsToDouble(0x7fefffffffffffffL). 


*int_java.lang.Double.MIN_EXPONENT*

Minimum exponent a normalizeddoublevariable may have. It is equal to the value 
returned byMath.getExponent(Double.MIN_NORMAL). 


*double_java.lang.Double.MIN_NORMAL*

A constant holding the smallest positive normal value of typedouble, 2-1022. It 
is equal to the hexadecimal floating-point literal0x1.0p-1022and also equal 
toDouble.longBitsToDouble(0x0010000000000000L). 


*double_java.lang.Double.MIN_VALUE*

A constant holding the smallest positive nonzero value of typedouble, 2-1074. 
It is equal to the hexadecimal floating-point literal0x0.0000000000001P-1022and 
also equal toDouble.longBitsToDouble(0x1L). 


*double_java.lang.Double.NaN*

A constant holding a Not-a-Number (NaN) value of typedouble. It is equivalent 
to the value returned byDouble.longBitsToDouble(0x7ff8000000000000L). 


*double_java.lang.Double.NEGATIVE_INFINITY*

A constant holding the negative infinity of typedouble. It is equal to the 
value returned byDouble.longBitsToDouble(0xfff0000000000000L). 


*double_java.lang.Double.POSITIVE_INFINITY*

A constant holding the positive infinity of typedouble. It is equal to the 
value returned byDouble.longBitsToDouble(0x7ff0000000000000L). 


*int_java.lang.Double.SIZE*

The number of bits used to represent adoublevalue. 


*java.lang.Class<java.lang.Double>_java.lang.Double.TYPE*

TheClassinstance representing the primitive typedouble. 



*java.lang.Double(double)*

public Double(double value)

Constructs a newly allocatedDoubleobject that represents the 
primitivedoubleargument. 

    value - the value to be represented by the {@code Double}. 

*java.lang.Double(String)*

public Double(java.lang.String s)
  throws |java.lang.NumberFormatException|
         
Constructs a newly allocatedDoubleobject that represents the floating-point 
value of typedoublerepresented by the string. The string is converted to 
adoublevalue as if by thevalueOfmethod. 

    s - a string to be converted to a {@code Double}. 

*java.lang.Double.byteValue()*

public byte byteValue()

Returns the value of thisDoubleas abyte(by casting to abyte). 



    Returns: the {@code double} value represented by this object converted to type {@code 
             byte} 

*java.lang.Double.compare(double,double)*

public static int compare(
  double d1,
  double d2)

Compares the two specifieddoublevalues. The sign of the integer value returned 
is the same as that of the integer that would be returned by the call: 

new Double(d1).compareTo(new Double(d2)) 


    d1 - the first {@code double} to compare 
    d2 - the second {@code double} to compare 

    Returns: the value {@code 0} if {@code d1} is numerically equal to {@code d2}; a value 
             less than {@code 0} if {@code d1} is numerically less than {@code 
             d2}; and a value greater than {@code 0} if {@code d1} is 
             numerically greater than {@code d2}. 

*java.lang.Double.compareTo(Double)*

public int compareTo(java.lang.Double anotherDouble)

Compares twoDoubleobjects numerically. There are two ways in which comparisons 
performed by this method differ from those performed by the Java language 
numerical comparison operators (=, >) when applied to primitivedoublevalues: 
Double.NaNis considered by this method to be equal to itself and greater than 
all otherdoublevalues (includingDouble.POSITIVE_INFINITY). 0.0dis considered by 
this method to be greater than-0.0d. 

This ensures that the natural ordering ofDoubleobjects imposed by this method 
is consistent with equals. 


    anotherDouble - the {@code Double} to be compared. 

    Returns: the value {@code 0} if {@code anotherDouble} is numerically equal to this 
             {@code Double}; a value less than {@code 0} if this {@code Double} 
             is numerically less than {@code anotherDouble}; and a value 
             greater than {@code 0} if this {@code Double} is numerically 
             greater than {@code anotherDouble}. 

*java.lang.Double.doubleToLongBits(double)*

public static long doubleToLongBits(double value)

Returns a representation of the specified floating-point value according to the 
IEEE 754 floating-point "double format" bit layout. 

Bit 63 (the bit that is selected by the mask0x8000000000000000L) represents the 
sign of the floating-point number. Bits 62-52 (the bits that are selected by 
the mask0x7ff0000000000000L) represent the exponent. Bits 51-0 (the bits that 
are selected by the mask0x000fffffffffffffL) represent the significand 
(sometimes called the mantissa) of the floating-point number. 

If the argument is positive infinity, the result is0x7ff0000000000000L. 

If the argument is negative infinity, the result is0xfff0000000000000L. 

If the argument is NaN, the result is0x7ff8000000000000L. 

In all cases, the result is alonginteger that, when given to the 
(|java.lang.Double|) method, will produce a floating-point value the same as 
the argument todoubleToLongBits(except all NaN values are collapsed to a single 
"canonical" NaN value). 


    value - a {@code double} precision floating-point number. 

    Returns: the bits that represent the floating-point number. 

*java.lang.Double.doubleToRawLongBits(double)*

public static native long doubleToRawLongBits(double value)

Returns a representation of the specified floating-point value according to the 
IEEE 754 floating-point "double format" bit layout, preserving Not-a-Number 
(NaN) values. 

Bit 63 (the bit that is selected by the mask0x8000000000000000L) represents the 
sign of the floating-point number. Bits 62-52 (the bits that are selected by 
the mask0x7ff0000000000000L) represent the exponent. Bits 51-0 (the bits that 
are selected by the mask0x000fffffffffffffL) represent the significand 
(sometimes called the mantissa) of the floating-point number. 

If the argument is positive infinity, the result is0x7ff0000000000000L. 

If the argument is negative infinity, the result is0xfff0000000000000L. 

If the argument is NaN, the result is thelonginteger representing the actual 
NaN value. Unlike thedoubleToLongBitsmethod,doubleToRawLongBitsdoes not 
collapse all the bit patterns encoding a NaN to a single "canonical" NaN value. 

In all cases, the result is alonginteger that, when given to the 
(|java.lang.Double|) method, will produce a floating-point value the same as 
the argument todoubleToRawLongBits. 


    value - a {@code double} precision floating-point number. 

    Returns: the bits that represent the floating-point number. 

*java.lang.Double.doubleValue()*

public double doubleValue()

Returns thedoublevalue of thisDoubleobject. 



    Returns: the {@code double} value represented by this object 

*java.lang.Double.equals(Object)*

public boolean equals(java.lang.Object obj)

Compares this object against the specified object. The result istrueif and only 
if the argument is notnulland is aDoubleobject that represents adoublethat has 
the same value as thedoublerepresented by this object. For this purpose, 
twodoublevalues are considered to be the same if and only if the method 
(|java.lang.Double|) returns the identicallongvalue when applied to each. 

Note that in most cases, for two instances of classDouble,d1andd2, the value 
ofd1.equals(d2)istrueif and only if 

d1.doubleValue() == d2.doubleValue() 

also has the valuetrue. However, there are two exceptions: 

Ifd1andd2both representDouble.NaN, then theequalsmethod returnstrue, even 
thoughDouble.NaN==Double.NaNhas the valuefalse. 
Ifd1represents+0.0whiled2represents-0.0, or vice versa, theequaltest has the 
valuefalse, even though+0.0==-0.0has the valuetrue. 

This definition allows hash tables to operate properly. 


    obj - the object to compare with. 

    Returns: {@code true} if the objects are the same; {@code false} otherwise. 

*java.lang.Double.floatValue()*

public float floatValue()

Returns thefloatvalue of thisDoubleobject. 



    Returns: the {@code double} value represented by this object converted to type {@code 
             float} 

*java.lang.Double.hashCode()*

public int hashCode()

Returns a hash code for thisDoubleobject. The result is the exclusive OR of the 
two halves of thelonginteger bit representation, exactly as produced by the 
method (|java.lang.Double|) , of the primitivedoublevalue represented by 
thisDoubleobject. That is, the hash code is the value of the expression: 

(int)(v^(v>>>32)) 

wherevis defined by: 

long v = Double.doubleToLongBits(this.doubleValue()); 



    Returns: a {@code hash code} value for this object. 

*java.lang.Double.intValue()*

public int intValue()

Returns the value of thisDoubleas anint(by casting to typeint). 



    Returns: the {@code double} value represented by this object converted to type {@code 
             int} 

*java.lang.Double.isInfinite()*

public boolean isInfinite()

Returnstrueif thisDoublevalue is infinitely large in magnitude,falseotherwise. 



    Returns: {@code true} if the value represented by this object is positive infinity or 
             negative infinity; {@code false} otherwise. 

*java.lang.Double.isInfinite(double)*

public static boolean isInfinite(double v)

Returnstrueif the specified number is infinitely large in 
magnitude,falseotherwise. 


    v - the value to be tested. 

    Returns: {@code true} if the value of the argument is positive infinity or negative 
             infinity; {@code false} otherwise. 

*java.lang.Double.isNaN()*

public boolean isNaN()

Returnstrueif thisDoublevalue is a Not-a-Number (NaN),falseotherwise. 



    Returns: {@code true} if the value represented by this object is NaN; {@code false} 
             otherwise. 

*java.lang.Double.isNaN(double)*

public static boolean isNaN(double v)

Returnstrueif the specified number is a Not-a-Number (NaN) 
value,falseotherwise. 


    v - the value to be tested. 

    Returns: {@code true} if the value of the argument is NaN; {@code false} otherwise. 

*java.lang.Double.longBitsToDouble(long)*

public static native double longBitsToDouble(long bits)

Returns thedoublevalue corresponding to a given bit representation. The 
argument is considered to be a representation of a floating-point value 
according to the IEEE 754 floating-point "double format" bit layout. 

If the argument is0x7ff0000000000000L, the result is positive infinity. 

If the argument is0xfff0000000000000L, the result is negative infinity. 

If the argument is any value in the 
range0x7ff0000000000001Lthrough0x7fffffffffffffffLor in the 
range0xfff0000000000001Lthrough0xffffffffffffffffL, the result is a NaN. No 
IEEE 754 floating-point operation provided by Java can distinguish between two 
NaN values of the same type with different bit patterns. Distinct values of NaN 
are only distinguishable by use of theDouble.doubleToRawLongBitsmethod. 

In all other cases, let s, e, and m be three values that can be computed from 
the argument: 



int s = ((bits >> 63) == 0) ? 1 : -1; int e = (int)((bits >> 52) & 0x7ffL); 
long m = (e == 0) ? (bits & 0xfffffffffffffL) << 1 : (bits & 0xfffffffffffffL) 
| 0x10000000000000L; 

Then the floating-point result equals the value of the mathematical expression 
sm2e-1075. 

Note that this method may not be able to return adoubleNaN with exactly same 
bit pattern as thelongargument. IEEE 754 distinguishes between two kinds of 
NaNs, quiet NaNs and signaling NaNs. The differences between the two kinds of 
NaN are generally not visible in Java. Arithmetic operations on signaling NaNs 
turn them into quiet NaNs with a different, but often similar, bit pattern. 
However, on some processors merely copying a signaling NaN also performs that 
conversion. In particular, copying a signaling NaN to return it to the calling 
method may perform this conversion. SolongBitsToDoublemay not be able to return 
adoublewith a signaling NaN bit pattern. Consequently, for 
somelongvalues,doubleToRawLongBits(longBitsToDouble(start))may not equalstart. 
Moreover, which particular bit patterns represent signaling NaNs is platform 
dependent; although all NaN bit patterns, quiet or signaling, must be in the 
NaN range identified above. 


    bits - any {@code long} integer. 

    Returns: the {@code double} floating-point value with the same bit pattern. 

*java.lang.Double.longValue()*

public long longValue()

Returns the value of thisDoubleas along(by casting to typelong). 



    Returns: the {@code double} value represented by this object converted to type {@code 
             long} 

*java.lang.Double.parseDouble(String)*

public static double parseDouble(java.lang.String s)
  throws |java.lang.NumberFormatException|
         
Returns a newdoubleinitialized to the value represented by the specifiedString, 
as performed by thevalueOfmethod of classDouble. 


    s - the string to be parsed. 

    Returns: the {@code double} value represented by the string argument. 

*java.lang.Double.shortValue()*

public short shortValue()

Returns the value of thisDoubleas ashort(by casting to ashort). 



    Returns: the {@code double} value represented by this object converted to type {@code 
             short} 

*java.lang.Double.toHexString(double)*

public static |java.lang.String| toHexString(double d)

Returns a hexadecimal string representation of thedoubleargument. All 
characters mentioned below are ASCII characters. 

If the argument is NaN, the result is the string "NaN". Otherwise, the result 
is a string that represents the sign and magnitude of the argument. If the sign 
is negative, the first character of the result is '-' ('u002D'); if the sign is 
positive, no sign character appears in the result. As for the magnitude m: 

If m is infinity, it is represented by the string"Infinity"; thus, positive 
infinity produces the result"Infinity"and negative infinity produces the 
result"-Infinity". 

If m is zero, it is represented by the string"0x0.0p0"; thus, negative zero 
produces the result"-0x0.0p0"and positive zero produces the result"0x0.0p0". 

If m is adoublevalue with a normalized representation, substrings are used to 
represent the significand and exponent fields. The significand is represented 
by the characters"0x1."followed by a lowercase hexadecimal representation of 
the rest of the significand as a fraction. Trailing zeros in the hexadecimal 
representation are removed unless all the digits are zero, in which case a 
single zero is used. Next, the exponent is represented by"p"followed by a 
decimal string of the unbiased exponent as if produced by a call to 
Integer.toString(|java.lang.Integer|) on the exponent value. 

If m is adoublevalue with a subnormal representation, the significand is 
represented by the characters"0x0."followed by a hexadecimal representation of 
the rest of the significand as a fraction. Trailing zeros in the hexadecimal 
representation are removed. Next, the exponent is represented by"p-1022". Note 
that there must be at least one nonzero digit in a subnormal significand. 





Examples Floating-point ValueHexadecimal String 1.0 0x1.0p0 -1.0 -0x1.0p0 2.0 
0x1.0p1 3.0 0x1.8p1 0.5 0x1.0p-1 0.25 0x1.0p-2 Double.MAX_VALUE 
0x1.fffffffffffffp1023 Minimum Normal Value 0x1.0p-1022 Maximum Subnormal Value 
0x0.fffffffffffffp-1022 Double.MIN_VALUE 0x0.0000000000001p-1022 


    d - the {@code double} to be converted. 

    Returns: a hex string representation of the argument. 

*java.lang.Double.toString()*

public |java.lang.String| toString()

Returns a string representation of thisDoubleobject. The primitivedoublevalue 
represented by this object is converted to a string exactly as if by the 
methodtoStringof one argument. 



    Returns: a {@code String} representation of this object. 

*java.lang.Double.toString(double)*

public static |java.lang.String| toString(double d)

Returns a string representation of thedoubleargument. All characters mentioned 
below are ASCII characters. 

If the argument is NaN, the result is the string "NaN". Otherwise, the result 
is a string that represents the sign and magnitude (absolute value) of the 
argument. If the sign is negative, the first character of the result is '-' 
('u002D'); if the sign is positive, no sign character appears in the result. As 
for the magnitude m: 

If m is infinity, it is represented by the characters"Infinity"; thus, positive 
infinity produces the result"Infinity"and negative infinity produces the 
result"-Infinity". 

If m is zero, it is represented by the characters"0.0"; thus, negative zero 
produces the result"-0.0"and positive zero produces the result"0.0". 

If m is greater than or equal to 10-3 but less than 107, then it is represented 
as the integer part of m, in decimal form with no leading zeroes, followed by 
'.' ('u002E'), followed by one or more decimal digits representing the 
fractional part of m. 

If m is less than 10-3 or greater than or equal to 107, then it is represented 
in so-called "computerized scientific notation." Let n be the unique integer 
such that 10n m<10n+1; then let a be the mathematically exact quotient of m and 
10n so that 1 a<10. The magnitude is then represented as the integer part of a, 
as a single decimal digit, followed by '.' ('u002E'), followed by decimal 
digits representing the fractional part of a, followed by the letter 'E' 
('u0045'), followed by a representation of n as a decimal integer, as produced 
by the method (|java.lang.Integer|) . 

How many digits must be printed for the fractional part of m or a? There must 
be at least one digit to represent the fractional part, and beyond that as 
many, but only as many, more digits as are needed to uniquely distinguish the 
argument value from adjacent values of typedouble. That is, suppose that x is 
the exact mathematical value represented by the decimal representation produced 
by this method for a finite nonzero argument d. Then d must be thedoublevalue 
nearest to x; or if twodoublevalues are equally close to x, then d must be one 
of them and the least significant bit of the significand of d must be0. 

To create localized string representations of a floating-point value, use 
subclasses of (|java.text.NumberFormat|) . 


    d - the {@code double} to be converted. 

    Returns: a string representation of the argument. 

*java.lang.Double.valueOf(double)*

public static |java.lang.Double| valueOf(double d)

Returns aDoubleinstance representing the specifieddoublevalue. If a 
newDoubleinstance is not required, this method should generally be used in 
preference to the constructor (|java.lang.Double|) , as this method is likely 
to yield significantly better space and time performance by caching frequently 
requested values. 


    d - a double value. 

    Returns: a {@code Double} instance representing {@code d}. 

*java.lang.Double.valueOf(String)*

public static |java.lang.Double| valueOf(java.lang.String s)
  throws |java.lang.NumberFormatException|
         
Returns aDoubleobject holding thedoublevalue represented by the argument 
strings. 

Ifsisnull, then aNullPointerExceptionis thrown. 

Leading and trailing whitespace characters insare ignored. Whitespace is 
removed as if by the (|java.lang.String|) method; that is, both ASCII space and 
control characters are removed. The rest ofsshould constitute a FloatValue as 
described by the lexical syntax rules: 



FloatValue: SignoptNaNSignoptInfinitySignopt FloatingPointLiteral Signopt 
HexFloatingPointLiteral SignedInteger 



HexFloatingPointLiteral: HexSignificand BinaryExponent FloatTypeSuffixopt 



HexSignificand: HexNumeral HexNumeral.0xHexDigitsopt . HexDigits 0X 
HexDigitsopt .HexDigits 



BinaryExponent: BinaryExponentIndicator SignedInteger 



BinaryExponentIndicator: pP 



where Sign, FloatingPointLiteral, HexNumeral, HexDigits, SignedInteger and 
FloatTypeSuffix are as defined in the lexical structure sections of The Java 
Language Specification, except that underscores are not accepted between 
digits. Ifsdoes not have the form of a FloatValue, then 
aNumberFormatExceptionis thrown. Otherwise,sis regarded as representing an 
exact decimal value in the usual "computerized scientific notation" or as an 
exact hexadecimal value; this exact numerical value is then conceptually 
converted to an "infinitely precise" binary value that is then rounded to 
typedoubleby the usual round-to-nearest rule of IEEE 754 floating-point 
arithmetic, which includes preserving the sign of a zero value. 

Note that the round-to-nearest rule also implies overflow and underflow 
behaviour; if the exact value ofsis large enough in magnitude (greater than or 
equal to ( (|java.lang.Double|) + ulp(MAX_VALUE)(|java.lang.Math|) /2), 
rounding todoublewill result in an infinity and if the exact value ofsis small 
enough in magnitude (less than or equal to (|java.lang.Double|) /2), rounding 
to float will result in a zero. 

Finally, after rounding aDoubleobject representing thisdoublevalue is returned. 

To interpret localized string representations of a floating-point value, use 
subclasses of (|java.text.NumberFormat|) . 

Note that trailing format specifiers, specifiers that determine the type of a 
floating-point literal (1.0fis afloatvalue;1.0dis adoublevalue), do not 
influence the results of this method. In other words, the numerical value of 
the input string is converted directly to the target floating-point type. The 
two-step sequence of conversions, string tofloatfollowed byfloattodouble, is 
not equivalent to converting a string directly todouble. For example, 
thefloatliteral0.1fis equal to thedoublevalue0.10000000149011612; 
thefloatliteral0.1frepresents a different numerical value than 
thedoubleliteral0.1. (The numerical value 0.1 cannot be exactly represented in 
a binary floating-point number.) 

To avoid calling this method on an invalid string and having 
aNumberFormatExceptionbe thrown, the regular expression below can be used to 
screen the input string: 



final String Digits = "(\\p{Digit}+)"; final String HexDigits = 
"(\\p{XDigit}+)"; // an exponent is 'e' or 'E' followed by an optionally // 
signed decimal integer. final String Exp = "[eE][+-]?"+Digits; final String 
fpRegex = ("[\\x00-\\x20]*"+ // Optional leading "whitespace" "[+-]?(" + // 
Optional sign character "NaN|" + // "NaN" string "Infinity|" + // "Infinity" 
string 

// A decimal floating-point string representing a finite positive // number 
without a leading sign has at most five basic pieces: // Digits . Digits 
ExponentPart FloatTypeSuffix // // Since this method allows integer-only 
strings as input // in addition to strings of floating-point literals, the // 
two sub-patterns below are simplifications of the grammar // productions from 
section 3.10.2 of // The Java Language Specification. 

// Digits ._opt Digits_opt ExponentPart_opt FloatTypeSuffix_opt 
"((("+Digits+"(\\.)?("+Digits+"?)("+Exp+")?)|"+ 

// . Digits ExponentPart_opt FloatTypeSuffix_opt 
"(\\.("+Digits+")("+Exp+")?)|"+ 

// Hexadecimal strings "((" + // 0[xX] HexDigits ._opt BinaryExponent 
FloatTypeSuffix_opt "(0[xX]" + HexDigits + "(\\.)?)|" + 

// 0[xX] HexDigits_opt . HexDigits BinaryExponent FloatTypeSuffix_opt "(0[xX]" 
+ HexDigits + "?(\\.)" + HexDigits + ")" + 

")[pP][+-]?" + Digits + "))" + "[fFdD]?))" + "[\\x00-\\x20]*");// Optional 
trailing "whitespace" 

if (Pattern.matches(fpRegex, myString)) Double.valueOf(myString); // Will not 
throw NumberFormatException else { // Perform suitable alternative action } 




    s - the string to be parsed. 

    Returns: a {@code Double} object holding the value represented by the {@code String} 
             argument. 


