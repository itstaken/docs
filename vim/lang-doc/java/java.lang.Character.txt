*java.lang.Character* *Character* TheCharacterclass wraps a value of the primiti

public final class Character
  extends    |java.lang.Object|
  implements |java.io.Serializable|
             |java.lang.Comparable|

|java.lang.Character_Description|
|java.lang.Character_Fields|
|java.lang.Character_Constructors|
|java.lang.Character_Methods|

================================================================================

*java.lang.Character_Fields*
|byte_java.lang.Character.COMBINING_SPACING_MARK|
|byte_java.lang.Character.CONNECTOR_PUNCTUATION|
|byte_java.lang.Character.CONTROL|
|byte_java.lang.Character.CURRENCY_SYMBOL|
|byte_java.lang.Character.DASH_PUNCTUATION|
|byte_java.lang.Character.DECIMAL_DIGIT_NUMBER|
|byte_java.lang.Character.DIRECTIONALITY_ARABIC_NUMBER|
|byte_java.lang.Character.DIRECTIONALITY_BOUNDARY_NEUTRAL|
|byte_java.lang.Character.DIRECTIONALITY_COMMON_NUMBER_SEPARATOR|
|byte_java.lang.Character.DIRECTIONALITY_EUROPEAN_NUMBER|
|byte_java.lang.Character.DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR|
|byte_java.lang.Character.DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR|
|byte_java.lang.Character.DIRECTIONALITY_LEFT_TO_RIGHT|
|byte_java.lang.Character.DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING|
|byte_java.lang.Character.DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE|
|byte_java.lang.Character.DIRECTIONALITY_NONSPACING_MARK|
|byte_java.lang.Character.DIRECTIONALITY_OTHER_NEUTRALS|
|byte_java.lang.Character.DIRECTIONALITY_PARAGRAPH_SEPARATOR|
|byte_java.lang.Character.DIRECTIONALITY_POP_DIRECTIONAL_FORMAT|
|byte_java.lang.Character.DIRECTIONALITY_RIGHT_TO_LEFT|
|byte_java.lang.Character.DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC|
|byte_java.lang.Character.DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING|
|byte_java.lang.Character.DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE|
|byte_java.lang.Character.DIRECTIONALITY_SEGMENT_SEPARATOR|
|byte_java.lang.Character.DIRECTIONALITY_UNDEFINED|
|byte_java.lang.Character.DIRECTIONALITY_WHITESPACE|
|byte_java.lang.Character.ENCLOSING_MARK|
|byte_java.lang.Character.END_PUNCTUATION|
|byte_java.lang.Character.FINAL_QUOTE_PUNCTUATION|
|byte_java.lang.Character.FORMAT|
|byte_java.lang.Character.INITIAL_QUOTE_PUNCTUATION|
|byte_java.lang.Character.LETTER_NUMBER|
|byte_java.lang.Character.LINE_SEPARATOR|
|byte_java.lang.Character.LOWERCASE_LETTER|
|byte_java.lang.Character.MATH_SYMBOL|
|int_java.lang.Character.MAX_CODE_POINT|
|char_java.lang.Character.MAX_HIGH_SURROGATE|
|char_java.lang.Character.MAX_LOW_SURROGATE|
|int_java.lang.Character.MAX_RADIX|
|char_java.lang.Character.MAX_SURROGATE|
|char_java.lang.Character.MAX_VALUE|
|int_java.lang.Character.MIN_CODE_POINT|
|char_java.lang.Character.MIN_HIGH_SURROGATE|
|char_java.lang.Character.MIN_LOW_SURROGATE|
|int_java.lang.Character.MIN_RADIX|
|int_java.lang.Character.MIN_SUPPLEMENTARY_CODE_POINT|
|char_java.lang.Character.MIN_SURROGATE|
|char_java.lang.Character.MIN_VALUE|
|byte_java.lang.Character.MODIFIER_LETTER|
|byte_java.lang.Character.MODIFIER_SYMBOL|
|byte_java.lang.Character.NON_SPACING_MARK|
|byte_java.lang.Character.OTHER_LETTER|
|byte_java.lang.Character.OTHER_NUMBER|
|byte_java.lang.Character.OTHER_PUNCTUATION|
|byte_java.lang.Character.OTHER_SYMBOL|
|byte_java.lang.Character.PARAGRAPH_SEPARATOR|
|byte_java.lang.Character.PRIVATE_USE|
|int_java.lang.Character.SIZE|
|byte_java.lang.Character.SPACE_SEPARATOR|
|byte_java.lang.Character.START_PUNCTUATION|
|byte_java.lang.Character.SURROGATE|
|byte_java.lang.Character.TITLECASE_LETTER|
|java.lang.Class<java.lang.Character>_java.lang.Character.TYPE|
|byte_java.lang.Character.UNASSIGNED|
|byte_java.lang.Character.UPPERCASE_LETTER|

*java.lang.Character_Constructors*
|java.lang.Character(char)|Constructs a newly allocatedCharacterobject that  re

*java.lang.Character_Methods*
|java.lang.Character.charCount(int)|Determines the number ofcharvalues needed t
|java.lang.Character.charValue()|Returns the value of thisCharacterobject.
|java.lang.Character.codePointAt(char[],int)|Returns the code point at the give
|java.lang.Character.codePointAt(char[],int,int)|Returns the code point at the 
|java.lang.Character.codePointAt(CharSequence,int)|Returns the code point at th
|java.lang.Character.codePointBefore(char[],int)|Returns the code point precedi
|java.lang.Character.codePointBefore(char[],int,int)|Returns the code point pre
|java.lang.Character.codePointBefore(CharSequence,int)|Returns the code point p
|java.lang.Character.codePointCount(char[],int,int)|Returns the number of Unico
|java.lang.Character.codePointCount(CharSequence,int,int)|Returns the number of
|java.lang.Character.compare(char,char)|Compares twocharvalues numerically.
|java.lang.Character.compareTo(Character)|Compares twoCharacterobjects numerica
|java.lang.Character.digit(char,int)|Returns the numeric value of the character
|java.lang.Character.digit(int,int)|Returns the numeric value of the specified 
|java.lang.Character.equals(Object)|Compares this object against the specified 
|java.lang.Character.forDigit(int,int)|Determines the character representation 
|java.lang.Character.getDirectionality(char)|Returns the Unicode directionality
|java.lang.Character.getDirectionality(int)|Returns the Unicode directionality 
|java.lang.Character.getName(int)|Returns the Unicode name of the specified cha
|java.lang.Character.getNumericValue(char)|Returns theintvalue that the specifi
|java.lang.Character.getNumericValue(int)|Returns theintvalue that the specifie
|java.lang.Character.getType(char)|Returns a value indicating a character's gen
|java.lang.Character.getType(int)|Returns a value indicating a character's gene
|java.lang.Character.hashCode()|Returns a hash code for thisCharacter; equal to
|java.lang.Character.highSurrogate(int)|Returns the leading surrogate (a    hig
|java.lang.Character.isAlphabetic(int)|Determines if the specified character (U
|java.lang.Character.isBmpCodePoint(int)|Determines whether the specified chara
|java.lang.Character.isDefined(char)|Determines if a character is defined in Un
|java.lang.Character.isDefined(int)|Determines if a character (Unicode code poi
|java.lang.Character.isDigit(char)|Determines if the specified character is a d
|java.lang.Character.isDigit(int)|Determines if the specified character (Unicod
|java.lang.Character.isHighSurrogate(char)|Determines if the givencharvalue is 
|java.lang.Character.isIdentifierIgnorable(char)|Determines if the specified ch
|java.lang.Character.isIdentifierIgnorable(int)|Determines if the specified cha
|java.lang.Character.isIdeographic(int)|Determines if the specified character (
|java.lang.Character.isISOControl(char)|Determines if the specified character i
|java.lang.Character.isISOControl(int)|Determines if the referenced character (
|java.lang.Character.isJavaIdentifierPart(char)|Determines if the specified cha
|java.lang.Character.isJavaIdentifierPart(int)|Determines if the character (Uni
|java.lang.Character.isJavaIdentifierStart(char)|Determines if the specified ch
|java.lang.Character.isJavaIdentifierStart(int)|Determines if the character (Un
|java.lang.Character.isJavaLetter(char)|Determines if the specified character i
|java.lang.Character.isJavaLetterOrDigit(char)|Determines if the specified char
|java.lang.Character.isLetter(char)|Determines if the specified character is a 
|java.lang.Character.isLetter(int)|Determines if the specified character (Unico
|java.lang.Character.isLetterOrDigit(char)|Determines if the specified characte
|java.lang.Character.isLetterOrDigit(int)|Determines if the specified character
|java.lang.Character.isLowerCase(char)|Determines if the specified character is
|java.lang.Character.isLowerCase(int)|Determines if the specified character (Un
|java.lang.Character.isLowSurrogate(char)|Determines if the givencharvalue is a
|java.lang.Character.isMirrored(char)|Determines whether the character is mirro
|java.lang.Character.isMirrored(int)|Determines whether the specified character
|java.lang.Character.isSpace(char)|Determines if the specified character is ISO
|java.lang.Character.isSpaceChar(char)|Determines if the specified character is
|java.lang.Character.isSpaceChar(int)|Determines if the specified character (Un
|java.lang.Character.isSupplementaryCodePoint(int)|Determines whether the speci
|java.lang.Character.isSurrogate(char)|Determines if the givencharvalue is a Un
|java.lang.Character.isSurrogatePair(char,char)|Determines whether the specifie
|java.lang.Character.isTitleCase(char)|Determines if the specified character is
|java.lang.Character.isTitleCase(int)|Determines if the specified character (Un
|java.lang.Character.isUnicodeIdentifierPart(char)|Determines if the specified 
|java.lang.Character.isUnicodeIdentifierPart(int)|Determines if the specified c
|java.lang.Character.isUnicodeIdentifierStart(char)|Determines if the specified
|java.lang.Character.isUnicodeIdentifierStart(int)|Determines if the specified 
|java.lang.Character.isUpperCase(char)|Determines if the specified character is
|java.lang.Character.isUpperCase(int)|Determines if the specified character (Un
|java.lang.Character.isValidCodePoint(int)|Determines whether the specified cod
|java.lang.Character.isWhitespace(char)|Determines if the specified character i
|java.lang.Character.isWhitespace(int)|Determines if the specified character (U
|java.lang.Character.lowSurrogate(int)|Returns the trailing surrogate (a    low
|java.lang.Character.offsetByCodePoints(char[],int,int,int,int)|Returns the ind
|java.lang.Character.offsetByCodePoints(CharSequence,int,int)|Returns the index
|java.lang.Character.reverseBytes(char)|Returns the value obtained by reversing
|java.lang.Character.toChars(int)|Converts the specified character (Unicode cod
|java.lang.Character.toChars(int,char[],int)|Converts the specified character (
|java.lang.Character.toCodePoint(char,char)|Converts the specified surrogate pa
|java.lang.Character.toLowerCase(char)|Converts the character argument to lower
|java.lang.Character.toLowerCase(int)|Converts the character (Unicode code poin
|java.lang.Character.toString()|Returns aStringobject representing thisCharacte
|java.lang.Character.toString(char)|Returns aStringobject representing the  spe
|java.lang.Character.toTitleCase(char)|Converts the character argument to title
|java.lang.Character.toTitleCase(int)|Converts the character (Unicode code poin
|java.lang.Character.toUpperCase(char)|Converts the character argument to upper
|java.lang.Character.toUpperCase(int)|Converts the character (Unicode code poin
|java.lang.Character.valueOf(char)|Returns a Character instance representing th

*java.lang.Character_Description*

TheCharacterclass wraps a value of the primitive typecharin an object. An 
object of typeCharactercontains a single field whose type ischar. 

In addition, this class provides several methods for determining a character's 
category (lowercase letter, digit, etc.) and for converting characters from 
uppercase to lowercase and vice versa. 

Character information is based on the Unicode Standard, version 6.0.0. 

The methods and data of classCharacterare defined by the information in the 
UnicodeData file that is part of the Unicode Character Database maintained by 
the Unicode Consortium. This file specifies various properties including name 
and general category for every defined Unicode code point or character range. 

The file and its description are available from the Unicode Consortium at: 

http://www.unicode.org 

Unicode Character Representations 

Thechardata type (and therefore the value that aCharacterobject encapsulates) 
are based on the original Unicode specification, which defined characters as 
fixed-width 16-bit entities. The Unicode Standard has since been changed to 
allow for characters whose representation requires more than 16 bits. The range 
of legal code points is now U+0000 to U+10FFFF, known as Unicode scalar value. 
(Refer to the definition of the U+n notation in the Unicode Standard.) 

The set of characters from U+0000 to U+FFFF is sometimes referred to as the 
Basic Multilingual Plane (BMP). Characters whose code points are greater than 
U+FFFF are called supplementary characters. The Java platform uses the UTF-16 
representation inchararrays and in theStringandStringBufferclasses. In this 
representation, supplementary characters are represented as a pair 
ofcharvalues, the first from the high-surrogates range, (uD800-uDBFF), the 
second from the low-surrogates range (uDC00-uDFFF). 

Acharvalue, therefore, represents Basic Multilingual Plane (BMP) code points, 
including the surrogate code points, or code units of the UTF-16 encoding. 
Anintvalue represents all Unicode code points, including supplementary code 
points. The lower (least significant) 21 bits ofintare used to represent 
Unicode code points and the upper (most significant) 11 bits must be zero. 
Unless otherwise specified, the behavior with respect to supplementary 
characters and surrogatecharvalues is as follows: 

The methods that only accept acharvalue cannot support supplementary 
characters. They treatcharvalues from the surrogate ranges as undefined 
characters. For example,Character.isLetter('\uD840')returnsfalse, even though 
this specific value if followed by any low-surrogate value in a string would 
represent a letter. 

The methods that accept anintvalue support all Unicode characters, including 
supplementary characters. For 
example,Character.isLetter(0x2F81A)returnstruebecause the code point value 
represents a letter (a CJK ideograph). 

In the Java SE API documentation, Unicode code point is used for character 
values in the range between U+0000 and U+10FFFF, and Unicode code unit is used 
for 16-bitcharvalues that are code units of the UTF-16 encoding. For more 
information on Unicode terminology, refer to the Unicode Glossary. 



*byte_java.lang.Character.COMBINING_SPACING_MARK*

General category "Mc" in the Unicode specification. 


*byte_java.lang.Character.CONNECTOR_PUNCTUATION*

General category "Pc" in the Unicode specification. 


*byte_java.lang.Character.CONTROL*

General category "Cc" in the Unicode specification. 


*byte_java.lang.Character.CURRENCY_SYMBOL*

General category "Sc" in the Unicode specification. 


*byte_java.lang.Character.DASH_PUNCTUATION*

General category "Pd" in the Unicode specification. 


*byte_java.lang.Character.DECIMAL_DIGIT_NUMBER*

General category "Nd" in the Unicode specification. 


*byte_java.lang.Character.DIRECTIONALITY_ARABIC_NUMBER*

Weak bidirectional character type "AN" in the Unicode specification. 


*byte_java.lang.Character.DIRECTIONALITY_BOUNDARY_NEUTRAL*

Weak bidirectional character type "BN" in the Unicode specification. 


*byte_java.lang.Character.DIRECTIONALITY_COMMON_NUMBER_SEPARATOR*

Weak bidirectional character type "CS" in the Unicode specification. 


*byte_java.lang.Character.DIRECTIONALITY_EUROPEAN_NUMBER*

Weak bidirectional character type "EN" in the Unicode specification. 


*byte_java.lang.Character.DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR*

Weak bidirectional character type "ES" in the Unicode specification. 


*byte_java.lang.Character.DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR*

Weak bidirectional character type "ET" in the Unicode specification. 


*byte_java.lang.Character.DIRECTIONALITY_LEFT_TO_RIGHT*

Strong bidirectional character type "L" in the Unicode specification. 


*byte_java.lang.Character.DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING*

Strong bidirectional character type "LRE" in the Unicode specification. 


*byte_java.lang.Character.DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE*

Strong bidirectional character type "LRO" in the Unicode specification. 


*byte_java.lang.Character.DIRECTIONALITY_NONSPACING_MARK*

Weak bidirectional character type "NSM" in the Unicode specification. 


*byte_java.lang.Character.DIRECTIONALITY_OTHER_NEUTRALS*

Neutral bidirectional character type "ON" in the Unicode specification. 


*byte_java.lang.Character.DIRECTIONALITY_PARAGRAPH_SEPARATOR*

Neutral bidirectional character type "B" in the Unicode specification. 


*byte_java.lang.Character.DIRECTIONALITY_POP_DIRECTIONAL_FORMAT*

Weak bidirectional character type "PDF" in the Unicode specification. 


*byte_java.lang.Character.DIRECTIONALITY_RIGHT_TO_LEFT*

Strong bidirectional character type "R" in the Unicode specification. 


*byte_java.lang.Character.DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC*

Strong bidirectional character type "AL" in the Unicode specification. 


*byte_java.lang.Character.DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING*

Strong bidirectional character type "RLE" in the Unicode specification. 


*byte_java.lang.Character.DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE*

Strong bidirectional character type "RLO" in the Unicode specification. 


*byte_java.lang.Character.DIRECTIONALITY_SEGMENT_SEPARATOR*

Neutral bidirectional character type "S" in the Unicode specification. 


*byte_java.lang.Character.DIRECTIONALITY_UNDEFINED*

Undefined bidirectional character type. Undefinedcharvalues have undefined 
directionality in the Unicode specification. 


*byte_java.lang.Character.DIRECTIONALITY_WHITESPACE*

Neutral bidirectional character type "WS" in the Unicode specification. 


*byte_java.lang.Character.ENCLOSING_MARK*

General category "Me" in the Unicode specification. 


*byte_java.lang.Character.END_PUNCTUATION*

General category "Pe" in the Unicode specification. 


*byte_java.lang.Character.FINAL_QUOTE_PUNCTUATION*

General category "Pf" in the Unicode specification. 


*byte_java.lang.Character.FORMAT*

General category "Cf" in the Unicode specification. 


*byte_java.lang.Character.INITIAL_QUOTE_PUNCTUATION*

General category "Pi" in the Unicode specification. 


*byte_java.lang.Character.LETTER_NUMBER*

General category "Nl" in the Unicode specification. 


*byte_java.lang.Character.LINE_SEPARATOR*

General category "Zl" in the Unicode specification. 


*byte_java.lang.Character.LOWERCASE_LETTER*

General category "Ll" in the Unicode specification. 


*byte_java.lang.Character.MATH_SYMBOL*

General category "Sm" in the Unicode specification. 


*int_java.lang.Character.MAX_CODE_POINT*

The maximum value of a 

Unicode code point, constantU+10FFFF. 


*char_java.lang.Character.MAX_HIGH_SURROGATE*

The maximum value of a 

Unicode high-surrogate code unit in the UTF-16 encoding, constant'\uDBFF'. A 
high-surrogate is also known as a leading-surrogate. 


*char_java.lang.Character.MAX_LOW_SURROGATE*

The maximum value of a 

Unicode low-surrogate code unit in the UTF-16 encoding, constant'\uDFFF'. A 
low-surrogate is also known as a trailing-surrogate. 


*int_java.lang.Character.MAX_RADIX*

The maximum radix available for conversion to and from strings. The constant 
value of this field is the largest value permitted for the radix argument in 
radix-conversion methods such as thedigitmethod, theforDigitmethod, and 
thetoStringmethod of classInteger. 


*char_java.lang.Character.MAX_SURROGATE*

The maximum value of a Unicode surrogate code unit in the UTF-16 encoding, 
constant'\uDFFF'. 


*char_java.lang.Character.MAX_VALUE*

The constant value of this field is the largest value of typechar,'\uFFFF'. 


*int_java.lang.Character.MIN_CODE_POINT*

The minimum value of a 

Unicode code point, constantU+0000. 


*char_java.lang.Character.MIN_HIGH_SURROGATE*

The minimum value of a 

Unicode high-surrogate code unit in the UTF-16 encoding, constant'\uD800'. A 
high-surrogate is also known as a leading-surrogate. 


*char_java.lang.Character.MIN_LOW_SURROGATE*

The minimum value of a 

Unicode low-surrogate code unit in the UTF-16 encoding, constant'\uDC00'. A 
low-surrogate is also known as a trailing-surrogate. 


*int_java.lang.Character.MIN_RADIX*

The minimum radix available for conversion to and from strings. The constant 
value of this field is the smallest value permitted for the radix argument in 
radix-conversion methods such as thedigitmethod, theforDigitmethod, and 
thetoStringmethod of classInteger. 


*int_java.lang.Character.MIN_SUPPLEMENTARY_CODE_POINT*

The minimum value of a 

Unicode supplementary code point, constantU+10000. 


*char_java.lang.Character.MIN_SURROGATE*

The minimum value of a Unicode surrogate code unit in the UTF-16 encoding, 
constant'\uD800'. 


*char_java.lang.Character.MIN_VALUE*

The constant value of this field is the smallest value of typechar,'\u0000'. 


*byte_java.lang.Character.MODIFIER_LETTER*

General category "Lm" in the Unicode specification. 


*byte_java.lang.Character.MODIFIER_SYMBOL*

General category "Sk" in the Unicode specification. 


*byte_java.lang.Character.NON_SPACING_MARK*

General category "Mn" in the Unicode specification. 


*byte_java.lang.Character.OTHER_LETTER*

General category "Lo" in the Unicode specification. 


*byte_java.lang.Character.OTHER_NUMBER*

General category "No" in the Unicode specification. 


*byte_java.lang.Character.OTHER_PUNCTUATION*

General category "Po" in the Unicode specification. 


*byte_java.lang.Character.OTHER_SYMBOL*

General category "So" in the Unicode specification. 


*byte_java.lang.Character.PARAGRAPH_SEPARATOR*

General category "Zp" in the Unicode specification. 


*byte_java.lang.Character.PRIVATE_USE*

General category "Co" in the Unicode specification. 


*int_java.lang.Character.SIZE*

The number of bits used to represent a char value in unsigned binary form, 
constant16. 


*byte_java.lang.Character.SPACE_SEPARATOR*

General category "Zs" in the Unicode specification. 


*byte_java.lang.Character.START_PUNCTUATION*

General category "Ps" in the Unicode specification. 


*byte_java.lang.Character.SURROGATE*

General category "Cs" in the Unicode specification. 


*byte_java.lang.Character.TITLECASE_LETTER*

General category "Lt" in the Unicode specification. 


*java.lang.Class<java.lang.Character>_java.lang.Character.TYPE*

TheClassinstance representing the primitive typechar. 


*byte_java.lang.Character.UNASSIGNED*

General category "Cn" in the Unicode specification. 


*byte_java.lang.Character.UPPERCASE_LETTER*

General category "Lu" in the Unicode specification. 



*java.lang.Character(char)*

public Character(char value)

Constructs a newly allocatedCharacterobject that represents the 
specifiedcharvalue. 

    value - the value to be represented by the {@code Character} object. 

*java.lang.Character.charCount(int)*

public static int charCount(int codePoint)

Determines the number ofcharvalues needed to represent the specified character 
(Unicode code point). If the specified character is equal to or greater than 
0x10000, then the method returns 2. Otherwise, the method returns 1. 

This method doesn't validate the specified character to be a valid Unicode code 
point. The caller must validate the character value using 
isValidCodePoint(|java.lang.Character|) if necessary. 


    codePoint - the character (Unicode code point) to be tested. 

    Returns: 2 if the character is a valid supplementary character; 1 otherwise. 

*java.lang.Character.charValue()*

public char charValue()

Returns the value of thisCharacterobject. 



    Returns: the primitive {@code char} value represented by this object. 

*java.lang.Character.codePointAt(char[],int)*

public static int codePointAt(
  char[] a,
  int index)

Returns the code point at the given index of thechararray. If thecharvalue at 
the given index in thechararray is in the high-surrogate range, the following 
index is less than the length of thechararray, and thecharvalue at the 
following index is in the low-surrogate range, then the supplementary code 
point corresponding to this surrogate pair is returned. Otherwise, thecharvalue 
at the given index is returned. 


    a - the {@code char} array 
    index - the index to the {@code char} values (Unicode code units) in the {@code char} 
       array to be converted 

    Returns: the Unicode code point at the given index 

*java.lang.Character.codePointAt(char[],int,int)*

public static int codePointAt(
  char[] a,
  int index,
  int limit)

Returns the code point at the given index of thechararray, where only array 
elements withindexless thanlimitcan be used. If thecharvalue at the given index 
in thechararray is in the high-surrogate range, the following index is less 
than thelimit, and thecharvalue at the following index is in the low-surrogate 
range, then the supplementary code point corresponding to this surrogate pair 
is returned. Otherwise, thecharvalue at the given index is returned. 


    a - the {@code char} array 
    index - the index to the {@code char} values (Unicode code units) in the {@code char} 
       array to be converted 
    limit - the index after the last array element that can be used in the {@code char} 
       array 

    Returns: the Unicode code point at the given index 

*java.lang.Character.codePointAt(CharSequence,int)*

public static int codePointAt(
  java.lang.CharSequence seq,
  int index)

Returns the code point at the given index of theCharSequence. If thecharvalue 
at the given index in theCharSequenceis in the high-surrogate range, the 
following index is less than the length of theCharSequence, and thecharvalue at 
the following index is in the low-surrogate range, then the supplementary code 
point corresponding to this surrogate pair is returned. Otherwise, thecharvalue 
at the given index is returned. 


    seq - a sequence of {@code char} values (Unicode code units) 
    index - the index to the {@code char} values (Unicode code units) in {@code seq} to be 
       converted 

    Returns: the Unicode code point at the given index 

*java.lang.Character.codePointBefore(char[],int)*

public static int codePointBefore(
  char[] a,
  int index)

Returns the code point preceding the given index of thechararray. If 
thecharvalue at(index - 1)in thechararray is in the low-surrogate range,(index 
- 2)is not negative, and thecharvalue at(index - 2)in thechararray is in the 
high-surrogate range, then the supplementary code point corresponding to this 
surrogate pair is returned. Otherwise, thecharvalue at(index - 1)is returned. 


    a - the {@code char} array 
    index - the index following the code point that should be returned 

    Returns: the Unicode code point value before the given index. 

*java.lang.Character.codePointBefore(char[],int,int)*

public static int codePointBefore(
  char[] a,
  int index,
  int start)

Returns the code point preceding the given index of thechararray, where only 
array elements withindexgreater than or equal tostartcan be used. If 
thecharvalue at(index - 1)in thechararray is in the low-surrogate range,(index 
- 2)is not less thanstart, and thecharvalue at(index - 2)in thechararray is in 
the high-surrogate range, then the supplementary code point corresponding to 
this surrogate pair is returned. Otherwise, thecharvalue at(index - 1)is 
returned. 


    a - the {@code char} array 
    index - the index following the code point that should be returned 
    start - the index of the first array element in the {@code char} array 

    Returns: the Unicode code point value before the given index. 

*java.lang.Character.codePointBefore(CharSequence,int)*

public static int codePointBefore(
  java.lang.CharSequence seq,
  int index)

Returns the code point preceding the given index of theCharSequence. If 
thecharvalue at(index - 1)in theCharSequenceis in the low-surrogate 
range,(index - 2)is not negative, and thecharvalue at(index - 2)in 
theCharSequenceis in the high-surrogate range, then the supplementary code 
point corresponding to this surrogate pair is returned. Otherwise, thecharvalue 
at(index - 1)is returned. 


    seq - the {@code CharSequence} instance 
    index - the index following the code point that should be returned 

    Returns: the Unicode code point value before the given index. 

*java.lang.Character.codePointCount(char[],int,int)*

public static int codePointCount(
  char[] a,
  int offset,
  int count)

Returns the number of Unicode code points in a subarray of thechararray 
argument. Theoffsetargument is the index of the firstcharof the subarray and 
thecountargument specifies the length of the subarray inchars. Unpaired 
surrogates within the subarray count as one code point each. 


    a - the {@code char} array 
    offset - the index of the first {@code char} in the given {@code char} array 
    count - the length of the subarray in {@code char}s 

    Returns: the number of Unicode code points in the specified subarray 

*java.lang.Character.codePointCount(CharSequence,int,int)*

public static int codePointCount(
  java.lang.CharSequence seq,
  int beginIndex,
  int endIndex)

Returns the number of Unicode code points in the text range of the specified 
char sequence. The text range begins at the specifiedbeginIndexand extends to 
thecharat indexendIndex - 1. Thus the length (inchars) of the text range 
isendIndex-beginIndex. Unpaired surrogates within the text range count as one 
code point each. 


    seq - the char sequence 
    beginIndex - the index to the first {@code char} of the text range. 
    endIndex - the index after the last {@code char} of the text range. 

    Returns: the number of Unicode code points in the specified text range 

*java.lang.Character.compare(char,char)*

public static int compare(
  char x,
  char y)

Compares twocharvalues numerically. The value returned is identical to what 
would be returned by: 

Character.valueOf(x).compareTo(Character.valueOf(y)) 


    x - the first {@code char} to compare 
    y - the second {@code char} to compare 

    Returns: the value {@code 0} if {@code x == y}; a value less than {@code 0} if {@code x 
             y} 

*java.lang.Character.compareTo(Character)*

public int compareTo(java.lang.Character anotherCharacter)

Compares twoCharacterobjects numerically. 


    anotherCharacter - the {@code Character} to be compared. 

    Returns: the value {@code 0} if the argument {@code Character} is equal to this {@code 
             Character}; a value less than {@code 0} if this {@code Character} 
             is numerically less than the {@code Character} argument; and a 
             value greater than {@code 0} if this {@code Character} is 
             numerically greater than the {@code Character} argument (unsigned 
             comparison). Note that this is strictly a numerical comparison; it 
             is not locale-dependent. 

*java.lang.Character.digit(char,int)*

public static int digit(
  char ch,
  int radix)

Returns the numeric value of the characterchin the specified radix. 

If the radix is not in the rangeMIN_RADIXradixMAX_RADIXor if the value ofchis 
not a valid digit in the specified radix,-1is returned. A character is a valid 
digit if at least one of the following is true: 

The methodisDigitistrueof the character and the Unicode decimal digit value of 
the character (or its single-character decomposition) is less than the 
specified radix. In this case the decimal digit value is returned. The 
character is one of the uppercase Latin letters'A'through'Z'and its code is 
less thanradix + 'A' - 10. In this case,ch - 'A' + 10is returned. The character 
is one of the lowercase Latin letters'a'through'z'and its code is less 
thanradix + 'a' - 10. In this case,ch - 'a' + 10is returned. The character is 
one of the fullwidth uppercase Latin letters A ('\uFF21') through Z ('\uFF3A') 
and its code is less thanradix + '\uFF21' - 10. In this case,ch - '\uFF21' + 
10is returned. The character is one of the fullwidth lowercase Latin letters a 
('\uFF41') through z ('\uFF5A') and its code is less thanradix + '\uFF41' - 10. 
In this case,ch - '\uFF41' + 10is returned. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 


    ch - the character to be converted. 
    radix - the radix. 

    Returns: the numeric value represented by the character in the specified radix. 

*java.lang.Character.digit(int,int)*

public static int digit(
  int codePoint,
  int radix)

Returns the numeric value of the specified character (Unicode code point) in 
the specified radix. 

If the radix is not in the rangeMIN_RADIXradixMAX_RADIXor if the character is 
not a valid digit in the specified radix,-1is returned. A character is a valid 
digit if at least one of the following is true: 

The method isDigit(codePoint)(|java.lang.Character|) istrueof the character and 
the Unicode decimal digit value of the character (or its single-character 
decomposition) is less than the specified radix. In this case the decimal digit 
value is returned. The character is one of the uppercase Latin 
letters'A'through'Z'and its code is less thanradix + 'A' - 10. In this 
case,codePoint - 'A' + 10is returned. The character is one of the lowercase 
Latin letters'a'through'z'and its code is less thanradix + 'a' - 10. In this 
case,codePoint - 'a' + 10is returned. The character is one of the fullwidth 
uppercase Latin letters A ('\uFF21') through Z ('\uFF3A') and its code is less 
thanradix + '\uFF21' - 10. In this case,codePoint - '\uFF21' + 10is returned. 
The character is one of the fullwidth lowercase Latin letters a ('\uFF41') 
through z ('\uFF5A') and its code is less thanradix + '\uFF41'- 10. In this 
case,codePoint - '\uFF41' + 10is returned. 


    codePoint - the character (Unicode code point) to be converted. 
    radix - the radix. 

    Returns: the numeric value represented by the character in the specified radix. 

*java.lang.Character.equals(Object)*

public boolean equals(java.lang.Object obj)

Compares this object against the specified object. The result istrueif and only 
if the argument is notnulland is aCharacterobject that represents the 
samecharvalue as this object. 


    obj - the object to compare with. 

    Returns: {@code true} if the objects are the same; {@code false} otherwise. 

*java.lang.Character.forDigit(int,int)*

public static char forDigit(
  int digit,
  int radix)

Determines the character representation for a specific digit in the specified 
radix. If the value ofradixis not a valid radix, or the value ofdigitis not a 
valid digit in the specified radix, the null character ('\u0000') is returned. 

Theradixargument is valid if it is greater than or equal toMIN_RADIXand less 
than or equal toMAX_RADIX. Thedigitargument is valid if0 <= digit < radix. 

If the digit is less than 10, then'0' + digitis returned. Otherwise, the 
value'a' + digit - 10is returned. 


    digit - the number to convert to a character. 
    radix - the radix. 

    Returns: the {@code char} representation of the specified digit in the specified radix. 

*java.lang.Character.getDirectionality(char)*

public static byte getDirectionality(char ch)

Returns the Unicode directionality property for the given character. Character 
directionality is used to calculate the visual ordering of text. The 
directionality value of undefinedcharvalues isDIRECTIONALITY_UNDEFINED. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 


    ch - {@code char} for which the directionality property is requested. 

    Returns: the directionality property of the {@code char} value. 

*java.lang.Character.getDirectionality(int)*

public static byte getDirectionality(int codePoint)

Returns the Unicode directionality property for the given character (Unicode 
code point). Character directionality is used to calculate the visual ordering 
of text. The directionality value of undefined character is 
(|java.lang.Character|) . 


    codePoint - the character (Unicode code point) for which the directionality property is 
       requested. 

    Returns: the directionality property of the character. 

*java.lang.Character.getName(int)*

public static |java.lang.String| getName(int codePoint)

Returns the Unicode name of the specified charactercodePoint, or null if the 
code point is unassigned(|java.lang.Character|) . 

Note: if the specified character is not assigned a name by the UnicodeData file 
(part of the Unicode Character Database maintained by the Unicode Consortium), 
the returned name is the same as the result of expression. 

Character.UnicodeBlock.of(codePoint).toString().replace('_', ' ') + " " + 
Integer.toHexString(codePoint).toUpperCase(Locale.ENGLISH); 


    codePoint - the character (Unicode code point) 

    Returns: the Unicode name of the specified character, or null if the code point is 
             unassigned. 

*java.lang.Character.getNumericValue(char)*

public static int getNumericValue(char ch)

Returns theintvalue that the specified Unicode character represents. For 
example, the character'\u216C'(the roman numeral fifty) will return an int with 
a value of 50. 

The letters A-Z in their uppercase ('\u0041'through'\u005A'), lowercase 
('\u0061'through'\u007A'), and full width variant 
('\uFF21'through'\uFF3A'and'\uFF41'through'\uFF5A') forms have numeric values 
from 10 through 35. This is independent of the Unicode specification, which 
does not assign numeric values to thesecharvalues. 

If the character does not have a numeric value, then -1 is returned. If the 
character has a numeric value that cannot be represented as a nonnegative 
integer (for example, a fractional value), then -2 is returned. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 


    ch - the character to be converted. 

    Returns: the numeric value of the character, as a nonnegative {@code int} value; -2 if 
             the character has a numeric value that is not a nonnegative 
             integer; -1 if the character has no numeric value. 

*java.lang.Character.getNumericValue(int)*

public static int getNumericValue(int codePoint)

Returns theintvalue that the specified character (Unicode code point) 
represents. For example, the character'\u216C'(the Roman numeral fifty) will 
return anintwith a value of 50. 

The letters A-Z in their uppercase ('\u0041'through'\u005A'), lowercase 
('\u0061'through'\u007A'), and full width variant 
('\uFF21'through'\uFF3A'and'\uFF41'through'\uFF5A') forms have numeric values 
from 10 through 35. This is independent of the Unicode specification, which 
does not assign numeric values to thesecharvalues. 

If the character does not have a numeric value, then -1 is returned. If the 
character has a numeric value that cannot be represented as a nonnegative 
integer (for example, a fractional value), then -2 is returned. 


    codePoint - the character (Unicode code point) to be converted. 

    Returns: the numeric value of the character, as a nonnegative {@code int} value; -2 if 
             the character has a numeric value that is not a nonnegative 
             integer; -1 if the character has no numeric value. 

*java.lang.Character.getType(char)*

public static int getType(char ch)

Returns a value indicating a character's general category. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 


    ch - the character to be tested. 

    Returns: a value of type {@code int} representing the character's general category. 

*java.lang.Character.getType(int)*

public static int getType(int codePoint)

Returns a value indicating a character's general category. 


    codePoint - the character (Unicode code point) to be tested. 

    Returns: a value of type {@code int} representing the character's general category. 

*java.lang.Character.hashCode()*

public int hashCode()

Returns a hash code for thisCharacter; equal to the result of 
invokingcharValue(). 



    Returns: a hash code value for this {@code Character} 

*java.lang.Character.highSurrogate(int)*

public static char highSurrogate(int codePoint)

Returns the leading surrogate (a 

high surrogate code unit) of the 

surrogate pair representing the specified supplementary character (Unicode code 
point) in the UTF-16 encoding. If the specified character is not a 
supplementary character, an unspecifiedcharis returned. 

If isSupplementaryCodePoint(x)(|java.lang.Character|) istrue, then 
isHighSurrogate(|java.lang.Character|) (highSurrogate(x))and 
toCodePoint(|java.lang.Character|) (highSurrogate(x), 
lowSurrogate(|java.lang.Character|) (x)) == xare also alwaystrue. 


    codePoint - a supplementary character (Unicode code point) 

    Returns: the leading surrogate code unit used to represent the character in the UTF-16 
             encoding 

*java.lang.Character.isAlphabetic(int)*

public static boolean isAlphabetic(int codePoint)

Determines if the specified character (Unicode code point) is an alphabet. 

A character is considered to be alphabetic if its general category type, 
provided by getType(codePoint)(|java.lang.Character|) , is any of the 
following: 

UPPERCASE_LETTER LOWERCASE_LETTER TITLECASE_LETTER MODIFIER_LETTER OTHER_LETTER 
LETTER_NUMBER 

or it has contributory property Other_Alphabetic as defined by the Unicode 
Standard. 


    codePoint - the character (Unicode code point) to be tested. 

    Returns: true if the character is a Unicode alphabet character, false otherwise. 

*java.lang.Character.isBmpCodePoint(int)*

public static boolean isBmpCodePoint(int codePoint)

Determines whether the specified character (Unicode code point) is in the Basic 
Multilingual Plane (BMP). Such code points can be represented using a 
singlechar. 


    codePoint - the character (Unicode code point) to be tested 

    Returns: {@code true} if the specified code point is between {@link #MIN_VALUE} and 
             {@link #MAX_VALUE} inclusive; {@code false} otherwise. 

*java.lang.Character.isDefined(char)*

public static boolean isDefined(char ch)

Determines if a character is defined in Unicode. 

A character is defined if at least one of the following is true: 

It has an entry in the UnicodeData file. It has a value in a range defined by 
the UnicodeData file. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 


    ch - the character to be tested 

    Returns: {@code true} if the character has a defined meaning in Unicode; {@code false} 
             otherwise. 

*java.lang.Character.isDefined(int)*

public static boolean isDefined(int codePoint)

Determines if a character (Unicode code point) is defined in Unicode. 

A character is defined if at least one of the following is true: 

It has an entry in the UnicodeData file. It has a value in a range defined by 
the UnicodeData file. 


    codePoint - the character (Unicode code point) to be tested. 

    Returns: {@code true} if the character has a defined meaning in Unicode; {@code false} 
             otherwise. 

*java.lang.Character.isDigit(char)*

public static boolean isDigit(char ch)

Determines if the specified character is a digit. 

A character is a digit if its general category type, provided 
byCharacter.getType(ch), isDECIMAL_DIGIT_NUMBER. 

Some Unicode character ranges that contain digits: 

'\u0030'through'\u0039', ISO-LATIN-1 digits ('0'through'9') 
'\u0660'through'\u0669', Arabic-Indic digits '\u06F0'through'\u06F9', Extended 
Arabic-Indic digits '\u0966'through'\u096F', Devanagari digits 
'\uFF10'through'\uFF19', Fullwidth digits 

Many other character ranges contain digits as well. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 


    ch - the character to be tested. 

    Returns: {@code true} if the character is a digit; {@code false} otherwise. 

*java.lang.Character.isDigit(int)*

public static boolean isDigit(int codePoint)

Determines if the specified character (Unicode code point) is a digit. 

A character is a digit if its general category type, provided by 
getType(codePoint)(|java.lang.Character|) , isDECIMAL_DIGIT_NUMBER. 

Some Unicode character ranges that contain digits: 

'\u0030'through'\u0039', ISO-LATIN-1 digits ('0'through'9') 
'\u0660'through'\u0669', Arabic-Indic digits '\u06F0'through'\u06F9', Extended 
Arabic-Indic digits '\u0966'through'\u096F', Devanagari digits 
'\uFF10'through'\uFF19', Fullwidth digits 

Many other character ranges contain digits as well. 


    codePoint - the character (Unicode code point) to be tested. 

    Returns: {@code true} if the character is a digit; {@code false} otherwise. 

*java.lang.Character.isHighSurrogate(char)*

public static boolean isHighSurrogate(char ch)

Determines if the givencharvalue is a 

Unicode high-surrogate code unit (also known as leading-surrogate code unit). 

Such values do not represent characters by themselves, but are used in the 
representation of supplementary characters in the UTF-16 encoding. 


    ch - the {@code char} value to be tested. 

    Returns: {@code true} if the {@code char} value is between {@link #MIN_HIGH_SURROGATE} 
             and {@link #MAX_HIGH_SURROGATE} inclusive; {@code false} 
             otherwise. 

*java.lang.Character.isIdentifierIgnorable(char)*

public static boolean isIdentifierIgnorable(char ch)

Determines if the specified character should be regarded as an ignorable 
character in a Java identifier or a Unicode identifier. 

The following Unicode characters are ignorable in a Java identifier or a 
Unicode identifier: 

ISO control characters that are not whitespace 

'\u0000'through'\u0008''\u000E'through'\u001B''\u007F'through'\u009F' 

all characters that have theFORMATgeneral category value 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 


    ch - the character to be tested. 

    Returns: {@code true} if the character is an ignorable control character that may be 
             part of a Java or Unicode identifier; {@code false} otherwise. 

*java.lang.Character.isIdentifierIgnorable(int)*

public static boolean isIdentifierIgnorable(int codePoint)

Determines if the specified character (Unicode code point) should be regarded 
as an ignorable character in a Java identifier or a Unicode identifier. 

The following Unicode characters are ignorable in a Java identifier or a 
Unicode identifier: 

ISO control characters that are not whitespace 

'\u0000'through'\u0008''\u000E'through'\u001B''\u007F'through'\u009F' 

all characters that have theFORMATgeneral category value 


    codePoint - the character (Unicode code point) to be tested. 

    Returns: {@code true} if the character is an ignorable control character that may be 
             part of a Java or Unicode identifier; {@code false} otherwise. 

*java.lang.Character.isIdeographic(int)*

public static boolean isIdeographic(int codePoint)

Determines if the specified character (Unicode code point) is a CJKV (Chinese, 
Japanese, Korean and Vietnamese) ideograph, as defined by the Unicode Standard. 


    codePoint - the character (Unicode code point) to be tested. 

    Returns: true if the character is a Unicode ideograph character, false otherwise. 

*java.lang.Character.isISOControl(char)*

public static boolean isISOControl(char ch)

Determines if the specified character is an ISO control character. A character 
is considered to be an ISO control character if its code is in the 
range'\u0000'through'\u001F'or in the range'\u007F'through'\u009F'. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 


    ch - the character to be tested. 

    Returns: {@code true} if the character is an ISO control character; {@code false} 
             otherwise. 

*java.lang.Character.isISOControl(int)*

public static boolean isISOControl(int codePoint)

Determines if the referenced character (Unicode code point) is an ISO control 
character. A character is considered to be an ISO control character if its code 
is in the range'\u0000'through'\u001F'or in the range'\u007F'through'\u009F'. 


    codePoint - the character (Unicode code point) to be tested. 

    Returns: {@code true} if the character is an ISO control character; {@code false} 
             otherwise. 

*java.lang.Character.isJavaIdentifierPart(char)*

public static boolean isJavaIdentifierPart(char ch)

Determines if the specified character may be part of a Java identifier as other 
than the first character. 

A character may be part of a Java identifier if any of the following are true: 

it is a letter it is a currency symbol (such as'$') it is a connecting 
punctuation character (such as'_') it is a digit it is a numeric letter (such 
as a Roman numeral character) it is a combining mark it is a non-spacing mark 
isIdentifierIgnorablereturnstruefor the character 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 


    ch - the character to be tested. 

    Returns: {@code true} if the character may be part of a Java identifier; {@code false} 
             otherwise. 

*java.lang.Character.isJavaIdentifierPart(int)*

public static boolean isJavaIdentifierPart(int codePoint)

Determines if the character (Unicode code point) may be part of a Java 
identifier as other than the first character. 

A character may be part of a Java identifier if any of the following are true: 

it is a letter it is a currency symbol (such as'$') it is a connecting 
punctuation character (such as'_') it is a digit it is a numeric letter (such 
as a Roman numeral character) it is a combining mark it is a non-spacing mark 
isIdentifierIgnorable(codePoint)(|java.lang.Character|) returnstruefor the 
character 


    codePoint - the character (Unicode code point) to be tested. 

    Returns: {@code true} if the character may be part of a Java identifier; {@code false} 
             otherwise. 

*java.lang.Character.isJavaIdentifierStart(char)*

public static boolean isJavaIdentifierStart(char ch)

Determines if the specified character is permissible as the first character in 
a Java identifier. 

A character may start a Java identifier if and only if one of the following 
conditions is true: 

isLetter(ch)(|java.lang.Character|) returnstrue 
getType(ch)(|java.lang.Character|) returnsLETTER_NUMBERchis a currency symbol 
(such as'$') chis a connecting punctuation character (such as'_'). 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 


    ch - the character to be tested. 

    Returns: {@code true} if the character may start a Java identifier; {@code false} 
             otherwise. 

*java.lang.Character.isJavaIdentifierStart(int)*

public static boolean isJavaIdentifierStart(int codePoint)

Determines if the character (Unicode code point) is permissible as the first 
character in a Java identifier. 

A character may start a Java identifier if and only if one of the following 
conditions is true: 

isLetter(codePoint)(|java.lang.Character|) returnstrue 
getType(codePoint)(|java.lang.Character|) returnsLETTER_NUMBER the referenced 
character is a currency symbol (such as'$') the referenced character is a 
connecting punctuation character (such as'_'). 


    codePoint - the character (Unicode code point) to be tested. 

    Returns: {@code true} if the character may start a Java identifier; {@code false} 
             otherwise. 

*java.lang.Character.isJavaLetter(char)*

public static boolean isJavaLetter(char ch)

Determines if the specified character is permissible as the first character in 
a Java identifier. 

A character may start a Java identifier if and only if one of the following is 
true: 

isLetter(ch)(|java.lang.Character|) returnstrue 
getType(ch)(|java.lang.Character|) returnsLETTER_NUMBERchis a currency symbol 
(such as'$') chis a connecting punctuation character (such as'_'). 

    Deprecated: Replaced by isJavaIdentifierStart(char).

    ch - the character to be tested. 

    Returns: {@code true} if the character may start a Java identifier; {@code false} 
             otherwise. 

*java.lang.Character.isJavaLetterOrDigit(char)*

public static boolean isJavaLetterOrDigit(char ch)

Determines if the specified character may be part of a Java identifier as other 
than the first character. 

A character may be part of a Java identifier if and only if any of the 
following are true: 

it is a letter it is a currency symbol (such as'$') it is a connecting 
punctuation character (such as'_') it is a digit it is a numeric letter (such 
as a Roman numeral character) it is a combining mark it is a non-spacing mark 
isIdentifierIgnorablereturnstruefor the character. 

    Deprecated: Replaced by isJavaIdentifierPart(char).

    ch - the character to be tested. 

    Returns: {@code true} if the character may be part of a Java identifier; {@code false} 
             otherwise. 

*java.lang.Character.isLetter(char)*

public static boolean isLetter(char ch)

Determines if the specified character is a letter. 

A character is considered to be a letter if its general category type, provided 
byCharacter.getType(ch), is any of the following: 

UPPERCASE_LETTERLOWERCASE_LETTERTITLECASE_LETTERMODIFIER_LETTEROTHER_LETTER 

Not all letters have case. Many characters are letters but are neither 
uppercase nor lowercase nor titlecase. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 


    ch - the character to be tested. 

    Returns: {@code true} if the character is a letter; {@code false} otherwise. 

*java.lang.Character.isLetter(int)*

public static boolean isLetter(int codePoint)

Determines if the specified character (Unicode code point) is a letter. 

A character is considered to be a letter if its general category type, provided 
by getType(codePoint)(|java.lang.Character|) , is any of the following: 

UPPERCASE_LETTERLOWERCASE_LETTERTITLECASE_LETTERMODIFIER_LETTEROTHER_LETTER 

Not all letters have case. Many characters are letters but are neither 
uppercase nor lowercase nor titlecase. 


    codePoint - the character (Unicode code point) to be tested. 

    Returns: {@code true} if the character is a letter; {@code false} otherwise. 

*java.lang.Character.isLetterOrDigit(char)*

public static boolean isLetterOrDigit(char ch)

Determines if the specified character is a letter or digit. 

A character is considered to be a letter or digit if 
eitherCharacter.isLetter(char ch)orCharacter.isDigit(char ch)returnstruefor the 
character. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 


    ch - the character to be tested. 

    Returns: {@code true} if the character is a letter or digit; {@code false} otherwise. 

*java.lang.Character.isLetterOrDigit(int)*

public static boolean isLetterOrDigit(int codePoint)

Determines if the specified character (Unicode code point) is a letter or 
digit. 

A character is considered to be a letter or digit if either 
isLetter(codePoint)(|java.lang.Character|) or 
isDigit(codePoint)(|java.lang.Character|) returnstruefor the character. 


    codePoint - the character (Unicode code point) to be tested. 

    Returns: {@code true} if the character is a letter or digit; {@code false} otherwise. 

*java.lang.Character.isLowerCase(char)*

public static boolean isLowerCase(char ch)

Determines if the specified character is a lowercase character. 

A character is lowercase if its general category type, provided 
byCharacter.getType(ch), isLOWERCASE_LETTER, or it has contributory property 
Other_Lowercase as defined by the Unicode Standard. 

The following are examples of lowercase characters: 

a b c d e f g h i j k l m n o p q r s t u v w x y z 'u00DF' 'u00E0' 'u00E1' 
'u00E2' 'u00E3' 'u00E4' 'u00E5' 'u00E6' 'u00E7' 'u00E8' 'u00E9' 'u00EA' 'u00EB' 
'u00EC' 'u00ED' 'u00EE' 'u00EF' 'u00F0' 'u00F1' 'u00F2' 'u00F3' 'u00F4' 'u00F5' 
'u00F6' 'u00F8' 'u00F9' 'u00FA' 'u00FB' 'u00FC' 'u00FD' 'u00FE' 'u00FF' 

Many other Unicode characters are lowercase too. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 


    ch - the character to be tested. 

    Returns: {@code true} if the character is lowercase; {@code false} otherwise. 

*java.lang.Character.isLowerCase(int)*

public static boolean isLowerCase(int codePoint)

Determines if the specified character (Unicode code point) is a lowercase 
character. 

A character is lowercase if its general category type, provided by 
getType(codePoint)(|java.lang.Character|) , isLOWERCASE_LETTER, or it has 
contributory property Other_Lowercase as defined by the Unicode Standard. 

The following are examples of lowercase characters: 

a b c d e f g h i j k l m n o p q r s t u v w x y z 'u00DF' 'u00E0' 'u00E1' 
'u00E2' 'u00E3' 'u00E4' 'u00E5' 'u00E6' 'u00E7' 'u00E8' 'u00E9' 'u00EA' 'u00EB' 
'u00EC' 'u00ED' 'u00EE' 'u00EF' 'u00F0' 'u00F1' 'u00F2' 'u00F3' 'u00F4' 'u00F5' 
'u00F6' 'u00F8' 'u00F9' 'u00FA' 'u00FB' 'u00FC' 'u00FD' 'u00FE' 'u00FF' 

Many other Unicode characters are lowercase too. 


    codePoint - the character (Unicode code point) to be tested. 

    Returns: {@code true} if the character is lowercase; {@code false} otherwise. 

*java.lang.Character.isLowSurrogate(char)*

public static boolean isLowSurrogate(char ch)

Determines if the givencharvalue is a 

Unicode low-surrogate code unit (also known as trailing-surrogate code unit). 

Such values do not represent characters by themselves, but are used in the 
representation of supplementary characters in the UTF-16 encoding. 


    ch - the {@code char} value to be tested. 

    Returns: {@code true} if the {@code char} value is between {@link #MIN_LOW_SURROGATE} 
             and {@link #MAX_LOW_SURROGATE} inclusive; {@code false} otherwise. 

*java.lang.Character.isMirrored(char)*

public static boolean isMirrored(char ch)

Determines whether the character is mirrored according to the Unicode 
specification. Mirrored characters should have their glyphs horizontally 
mirrored when displayed in text that is right-to-left. For example,'\u0028'LEFT 
PARENTHESIS is semantically defined to be an opening parenthesis. This will 
appear as a "(" in text that is left-to-right but as a ")" in text that is 
right-to-left. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 


    ch - {@code char} for which the mirrored property is requested 

    Returns: {@code true} if the char is mirrored, {@code false} if the {@code char} is not 
             mirrored or is not defined. 

*java.lang.Character.isMirrored(int)*

public static boolean isMirrored(int codePoint)

Determines whether the specified character (Unicode code point) is mirrored 
according to the Unicode specification. Mirrored characters should have their 
glyphs horizontally mirrored when displayed in text that is right-to-left. For 
example,'\u0028'LEFT PARENTHESIS is semantically defined to be an opening 
parenthesis. This will appear as a "(" in text that is left-to-right but as a 
")" in text that is right-to-left. 


    codePoint - the character (Unicode code point) to be tested. 

    Returns: {@code true} if the character is mirrored, {@code false} if the character is 
             not mirrored or is not defined. 

*java.lang.Character.isSpace(char)*

public static boolean isSpace(char ch)

Determines if the specified character is ISO-LATIN-1 white space. This method 
returnstruefor the following five characters only: 

'\t' U+0009 HORIZONTAL TABULATION '\n' U+000A NEW LINE '\f' U+000C FORM FEED 
'\r' U+000D CARRIAGE RETURN '' U+0020 SPACE 

    Deprecated: Replaced by isWhitespace(char).

    ch - the character to be tested. 

    Returns: {@code true} if the character is ISO-LATIN-1 white space; {@code false} 
             otherwise. 

*java.lang.Character.isSpaceChar(char)*

public static boolean isSpaceChar(char ch)

Determines if the specified character is a Unicode space character. A character 
is considered to be a space character if and only if it is specified to be a 
space character by the Unicode Standard. This method returns true if the 
character's general category type is any of the following: 

SPACE_SEPARATORLINE_SEPARATORPARAGRAPH_SEPARATOR 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 


    ch - the character to be tested. 

    Returns: {@code true} if the character is a space character; {@code false} otherwise. 

*java.lang.Character.isSpaceChar(int)*

public static boolean isSpaceChar(int codePoint)

Determines if the specified character (Unicode code point) is a Unicode space 
character. A character is considered to be a space character if and only if it 
is specified to be a space character by the Unicode Standard. This method 
returns true if the character's general category type is any of the following: 

(|java.lang.Character|) (|java.lang.Character|) (|java.lang.Character|) 


    codePoint - the character (Unicode code point) to be tested. 

    Returns: {@code true} if the character is a space character; {@code false} otherwise. 

*java.lang.Character.isSupplementaryCodePoint(int)*

public static boolean isSupplementaryCodePoint(int codePoint)

Determines whether the specified character (Unicode code point) is in the 
supplementary character range. 


    codePoint - the character (Unicode code point) to be tested 

    Returns: {@code true} if the specified code point is between {@link 
             #MIN_SUPPLEMENTARY_CODE_POINT} and {@link #MAX_CODE_POINT} 
             inclusive; {@code false} otherwise. 

*java.lang.Character.isSurrogate(char)*

public static boolean isSurrogate(char ch)

Determines if the givencharvalue is a Unicode surrogate code unit. 

Such values do not represent characters by themselves, but are used in the 
representation of supplementary characters in the UTF-16 encoding. 

A char value is a surrogate code unit if and only if it is either a 
low-surrogate code unit(|java.lang.Character|) or a high-surrogate code 
unit(|java.lang.Character|) . 


    ch - the {@code char} value to be tested. 

    Returns: {@code true} if the {@code char} value is between {@link #MIN_SURROGATE} and 
             {@link #MAX_SURROGATE} inclusive; {@code false} otherwise. 

*java.lang.Character.isSurrogatePair(char,char)*

public static boolean isSurrogatePair(
  char high,
  char low)

Determines whether the specified pair ofcharvalues is a valid 

Unicode surrogate pair. 

This method is equivalent to the expression: 

isHighSurrogate(high) isLowSurrogate(low) 


    high - the high-surrogate code value to be tested 
    low - the low-surrogate code value to be tested 

    Returns: {@code true} if the specified high and low-surrogate code values represent a 
             valid surrogate pair; {@code false} otherwise. 

*java.lang.Character.isTitleCase(char)*

public static boolean isTitleCase(char ch)

Determines if the specified character is a titlecase character. 

A character is a titlecase character if its general category type, provided 
byCharacter.getType(ch), isTITLECASE_LETTER. 

Some characters look like pairs of Latin letters. For example, there is an 
uppercase letter that looks like "LJ" and has a corresponding lowercase letter 
that looks like "lj". A third form, which looks like "Lj", is the appropriate 
form to use when rendering a word in lowercase with initial capitals, as for a 
book title. 

These are some of the Unicode characters for which this method returnstrue: 

LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARONLATIN CAPITAL LETTER L 
WITH SMALL LETTER JLATIN CAPITAL LETTER N WITH SMALL LETTER JLATIN CAPITAL 
LETTER D WITH SMALL LETTER Z Many other Unicode characters are titlecase too. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 


    ch - the character to be tested. 

    Returns: {@code true} if the character is titlecase; {@code false} otherwise. 

*java.lang.Character.isTitleCase(int)*

public static boolean isTitleCase(int codePoint)

Determines if the specified character (Unicode code point) is a titlecase 
character. 

A character is a titlecase character if its general category type, provided by 
getType(codePoint)(|java.lang.Character|) , isTITLECASE_LETTER. 

Some characters look like pairs of Latin letters. For example, there is an 
uppercase letter that looks like "LJ" and has a corresponding lowercase letter 
that looks like "lj". A third form, which looks like "Lj", is the appropriate 
form to use when rendering a word in lowercase with initial capitals, as for a 
book title. 

These are some of the Unicode characters for which this method returnstrue: 

LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARONLATIN CAPITAL LETTER L 
WITH SMALL LETTER JLATIN CAPITAL LETTER N WITH SMALL LETTER JLATIN CAPITAL 
LETTER D WITH SMALL LETTER Z Many other Unicode characters are titlecase too. 


    codePoint - the character (Unicode code point) to be tested. 

    Returns: {@code true} if the character is titlecase; {@code false} otherwise. 

*java.lang.Character.isUnicodeIdentifierPart(char)*

public static boolean isUnicodeIdentifierPart(char ch)

Determines if the specified character may be part of a Unicode identifier as 
other than the first character. 

A character may be part of a Unicode identifier if and only if one of the 
following statements is true: 

it is a letter it is a connecting punctuation character (such as'_') it is a 
digit it is a numeric letter (such as a Roman numeral character) it is a 
combining mark it is a non-spacing mark isIdentifierIgnorablereturnstruefor 
this character. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 


    ch - the character to be tested. 

    Returns: {@code true} if the character may be part of a Unicode identifier; {@code 
             false} otherwise. 

*java.lang.Character.isUnicodeIdentifierPart(int)*

public static boolean isUnicodeIdentifierPart(int codePoint)

Determines if the specified character (Unicode code point) may be part of a 
Unicode identifier as other than the first character. 

A character may be part of a Unicode identifier if and only if one of the 
following statements is true: 

it is a letter it is a connecting punctuation character (such as'_') it is a 
digit it is a numeric letter (such as a Roman numeral character) it is a 
combining mark it is a non-spacing mark isIdentifierIgnorablereturnstruefor 
this character. 


    codePoint - the character (Unicode code point) to be tested. 

    Returns: {@code true} if the character may be part of a Unicode identifier; {@code 
             false} otherwise. 

*java.lang.Character.isUnicodeIdentifierStart(char)*

public static boolean isUnicodeIdentifierStart(char ch)

Determines if the specified character is permissible as the first character in 
a Unicode identifier. 

A character may start a Unicode identifier if and only if one of the following 
conditions is true: 

isLetter(ch)(|java.lang.Character|) returnstrue 
getType(ch)(|java.lang.Character|) returnsLETTER_NUMBER. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 


    ch - the character to be tested. 

    Returns: {@code true} if the character may start a Unicode identifier; {@code false} 
             otherwise. 

*java.lang.Character.isUnicodeIdentifierStart(int)*

public static boolean isUnicodeIdentifierStart(int codePoint)

Determines if the specified character (Unicode code point) is permissible as 
the first character in a Unicode identifier. 

A character may start a Unicode identifier if and only if one of the following 
conditions is true: 

isLetter(codePoint)(|java.lang.Character|) returnstrue 
getType(codePoint)(|java.lang.Character|) returnsLETTER_NUMBER. 


    codePoint - the character (Unicode code point) to be tested. 

    Returns: {@code true} if the character may start a Unicode identifier; {@code false} 
             otherwise. 

*java.lang.Character.isUpperCase(char)*

public static boolean isUpperCase(char ch)

Determines if the specified character is an uppercase character. 

A character is uppercase if its general category type, provided 
byCharacter.getType(ch), isUPPERCASE_LETTER. or it has contributory property 
Other_Uppercase as defined by the Unicode Standard. 

The following are examples of uppercase characters: 

A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 'u00C0' 'u00C1' 'u00C2' 
'u00C3' 'u00C4' 'u00C5' 'u00C6' 'u00C7' 'u00C8' 'u00C9' 'u00CA' 'u00CB' 'u00CC' 
'u00CD' 'u00CE' 'u00CF' 'u00D0' 'u00D1' 'u00D2' 'u00D3' 'u00D4' 'u00D5' 'u00D6' 
'u00D8' 'u00D9' 'u00DA' 'u00DB' 'u00DC' 'u00DD' 'u00DE' 

Many other Unicode characters are uppercase too. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 


    ch - the character to be tested. 

    Returns: {@code true} if the character is uppercase; {@code false} otherwise. 

*java.lang.Character.isUpperCase(int)*

public static boolean isUpperCase(int codePoint)

Determines if the specified character (Unicode code point) is an uppercase 
character. 

A character is uppercase if its general category type, provided by 
getType(codePoint)(|java.lang.Character|) , isUPPERCASE_LETTER, or it has 
contributory property Other_Uppercase as defined by the Unicode Standard. 

The following are examples of uppercase characters: 

A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 'u00C0' 'u00C1' 'u00C2' 
'u00C3' 'u00C4' 'u00C5' 'u00C6' 'u00C7' 'u00C8' 'u00C9' 'u00CA' 'u00CB' 'u00CC' 
'u00CD' 'u00CE' 'u00CF' 'u00D0' 'u00D1' 'u00D2' 'u00D3' 'u00D4' 'u00D5' 'u00D6' 
'u00D8' 'u00D9' 'u00DA' 'u00DB' 'u00DC' 'u00DD' 'u00DE' 

Many other Unicode characters are uppercase too. 


    codePoint - the character (Unicode code point) to be tested. 

    Returns: {@code true} if the character is uppercase; {@code false} otherwise. 

*java.lang.Character.isValidCodePoint(int)*

public static boolean isValidCodePoint(int codePoint)

Determines whether the specified code point is a valid 

Unicode code point value. 


    codePoint - the Unicode code point to be tested 

    Returns: {@code true} if the specified code point value is between {@link 
             #MIN_CODE_POINT} and {@link #MAX_CODE_POINT} inclusive; {@code 
             false} otherwise. 

*java.lang.Character.isWhitespace(char)*

public static boolean isWhitespace(char ch)

Determines if the specified character is white space according to Java. A 
character is a Java whitespace character if and only if it satisfies one of the 
following criteria: 

It is a Unicode space character (SPACE_SEPARATOR,LINE_SEPARATOR, 
orPARAGRAPH_SEPARATOR) but is not also a non-breaking space 
('\u00A0','\u2007','\u202F'). It is'\t', U+0009 HORIZONTAL TABULATION. It 
is'\n', U+000A LINE FEED. It is'\u000B', U+000B VERTICAL TABULATION. It is'\f', 
U+000C FORM FEED. It is'\r', U+000D CARRIAGE RETURN. It is'\u001C', U+001C FILE 
SEPARATOR. It is'\u001D', U+001D GROUP SEPARATOR. It is'\u001E', U+001E RECORD 
SEPARATOR. It is'\u001F', U+001F UNIT SEPARATOR. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 


    ch - the character to be tested. 

    Returns: {@code true} if the character is a Java whitespace character; {@code false} 
             otherwise. 

*java.lang.Character.isWhitespace(int)*

public static boolean isWhitespace(int codePoint)

Determines if the specified character (Unicode code point) is white space 
according to Java. A character is a Java whitespace character if and only if it 
satisfies one of the following criteria: 

It is a Unicode space character ( (|java.lang.Character|) , 
(|java.lang.Character|) , or (|java.lang.Character|) ) but is not also a 
non-breaking space ('\u00A0','\u2007','\u202F'). It is'\t', U+0009 HORIZONTAL 
TABULATION. It is'\n', U+000A LINE FEED. It is'\u000B', U+000B VERTICAL 
TABULATION. It is'\f', U+000C FORM FEED. It is'\r', U+000D CARRIAGE RETURN. It 
is'\u001C', U+001C FILE SEPARATOR. It is'\u001D', U+001D GROUP SEPARATOR. It 
is'\u001E', U+001E RECORD SEPARATOR. It is'\u001F', U+001F UNIT SEPARATOR. 




    codePoint - the character (Unicode code point) to be tested. 

    Returns: {@code true} if the character is a Java whitespace character; {@code false} 
             otherwise. 

*java.lang.Character.lowSurrogate(int)*

public static char lowSurrogate(int codePoint)

Returns the trailing surrogate (a 

low surrogate code unit) of the 

surrogate pair representing the specified supplementary character (Unicode code 
point) in the UTF-16 encoding. If the specified character is not a 
supplementary character, an unspecifiedcharis returned. 

If isSupplementaryCodePoint(x)(|java.lang.Character|) istrue, then 
isLowSurrogate(|java.lang.Character|) (lowSurrogate(x))and 
toCodePoint(|java.lang.Character|) ( highSurrogate(|java.lang.Character|) (x), 
lowSurrogate(x)) == xare also alwaystrue. 


    codePoint - a supplementary character (Unicode code point) 

    Returns: the trailing surrogate code unit used to represent the character in the UTF-16 
             encoding 

*java.lang.Character.offsetByCodePoints(char[],int,int,int,int)*

public static int offsetByCodePoints(
  char[] a,
  int start,
  int count,
  int index,
  int codePointOffset)

Returns the index within the givencharsubarray that is offset from the 
givenindexbycodePointOffsetcode points. Thestartandcountarguments specify a 
subarray of thechararray. Unpaired surrogates within the text range given 
byindexandcodePointOffsetcount as one code point each. 


    a - the {@code char} array 
    start - the index of the first {@code char} of the subarray 
    count - the length of the subarray in {@code char}s 
    index - the index to be offset 
    codePointOffset - the offset in code points 

    Returns: the index within the subarray 

*java.lang.Character.offsetByCodePoints(CharSequence,int,int)*

public static int offsetByCodePoints(
  java.lang.CharSequence seq,
  int index,
  int codePointOffset)

Returns the index within the given char sequence that is offset from the 
givenindexbycodePointOffsetcode points. Unpaired surrogates within the text 
range given byindexandcodePointOffsetcount as one code point each. 


    seq - the char sequence 
    index - the index to be offset 
    codePointOffset - the offset in code points 

    Returns: the index within the char sequence 

*java.lang.Character.reverseBytes(char)*

public static char reverseBytes(char ch)

Returns the value obtained by reversing the order of the bytes in the specified 
char value. 



    Returns: the value obtained by reversing (or, equivalently, swapping) the bytes in the 
             specified char value. 

*java.lang.Character.toChars(int)*

public static char[] toChars(int codePoint)

Converts the specified character (Unicode code point) to its UTF-16 
representation stored in achararray. If the specified code point is a BMP 
(Basic Multilingual Plane or Plane 0) value, the resultingchararray has the 
same value ascodePoint. If the specified code point is a supplementary code 
point, the resultingchararray has the corresponding surrogate pair. 


    codePoint - a Unicode code point 

    Returns: a {@code char} array having {@code codePoint}'s UTF-16 representation. 

*java.lang.Character.toChars(int,char[],int)*

public static int toChars(
  int codePoint,
  char[] dst,
  int dstIndex)

Converts the specified character (Unicode code point) to its UTF-16 
representation. If the specified code point is a BMP (Basic Multilingual Plane 
or Plane 0) value, the same value is stored indst[dstIndex], and 1 is returned. 
If the specified code point is a supplementary character, its surrogate values 
are stored indst[dstIndex](high-surrogate) anddst[dstIndex+1](low-surrogate), 
and 2 is returned. 


    codePoint - the character (Unicode code point) to be converted. 
    dst - an array of {@code char} in which the {@code codePoint}'s UTF-16 value is 
       stored. 
    dstIndex - the start index into the {@code dst} array where the converted value is stored. 

    Returns: 1 if the code point is a BMP code point, 2 if the code point is a supplementary 
             code point. 

*java.lang.Character.toCodePoint(char,char)*

public static int toCodePoint(
  char high,
  char low)

Converts the specified surrogate pair to its supplementary code point value. 
This method does not validate the specified surrogate pair. The caller must 
validate it using isSurrogatePair(|java.lang.Character|) if necessary. 


    high - the high-surrogate code unit 
    low - the low-surrogate code unit 

    Returns: the supplementary code point composed from the specified surrogate pair. 

*java.lang.Character.toLowerCase(char)*

public static char toLowerCase(char ch)

Converts the character argument to lowercase using case mapping information 
from the UnicodeData file. 

Note thatCharacter.isLowerCase(Character.toLowerCase(ch))does not always 
returntruefor some ranges of characters, particularly those that are symbols or 
ideographs. 

In general, (|java.lang.String|) should be used to map characters to 
lowercase.Stringcase mapping methods have several benefits overCharactercase 
mapping methods.Stringcase mapping methods can perform locale-sensitive 
mappings, context-sensitive mappings, and 1:M character mappings, whereas 
theCharactercase mapping methods cannot. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 


    ch - the character to be converted. 

    Returns: the lowercase equivalent of the character, if any; otherwise, the character 
             itself. 

*java.lang.Character.toLowerCase(int)*

public static int toLowerCase(int codePoint)

Converts the character (Unicode code point) argument to lowercase using case 
mapping information from the UnicodeData file. 

Note thatCharacter.isLowerCase(Character.toLowerCase(codePoint))does not always 
returntruefor some ranges of characters, particularly those that are symbols or 
ideographs. 

In general, (|java.lang.String|) should be used to map characters to 
lowercase.Stringcase mapping methods have several benefits overCharactercase 
mapping methods.Stringcase mapping methods can perform locale-sensitive 
mappings, context-sensitive mappings, and 1:M character mappings, whereas 
theCharactercase mapping methods cannot. 


    codePoint - the character (Unicode code point) to be converted. 

    Returns: the lowercase equivalent of the character (Unicode code point), if any; 
             otherwise, the character itself. 

*java.lang.Character.toString()*

public |java.lang.String| toString()

Returns aStringobject representing thisCharacter's value. The result is a 
string of length 1 whose sole component is the primitivecharvalue represented 
by thisCharacterobject. 



    Returns: a string representation of this object. 

*java.lang.Character.toString(char)*

public static |java.lang.String| toString(char c)

Returns aStringobject representing the specifiedchar. The result is a string of 
length 1 consisting solely of the specifiedchar. 


    c - the {@code char} to be converted 

    Returns: the string representation of the specified {@code char} 

*java.lang.Character.toTitleCase(char)*

public static char toTitleCase(char ch)

Converts the character argument to titlecase using case mapping information 
from the UnicodeData file. If a character has no explicit titlecase mapping and 
is not itself a titlecase char according to UnicodeData, then the uppercase 
mapping is returned as an equivalent titlecase mapping. If thecharargument is 
already a titlecasechar, the samecharvalue will be returned. 

Note thatCharacter.isTitleCase(Character.toTitleCase(ch))does not always 
returntruefor some ranges of characters. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 


    ch - the character to be converted. 

    Returns: the titlecase equivalent of the character, if any; otherwise, the character 
             itself. 

*java.lang.Character.toTitleCase(int)*

public static int toTitleCase(int codePoint)

Converts the character (Unicode code point) argument to titlecase using case 
mapping information from the UnicodeData file. If a character has no explicit 
titlecase mapping and is not itself a titlecase char according to UnicodeData, 
then the uppercase mapping is returned as an equivalent titlecase mapping. If 
the character argument is already a titlecase character, the same character 
value will be returned. 

Note thatCharacter.isTitleCase(Character.toTitleCase(codePoint))does not always 
returntruefor some ranges of characters. 


    codePoint - the character (Unicode code point) to be converted. 

    Returns: the titlecase equivalent of the character, if any; otherwise, the character 
             itself. 

*java.lang.Character.toUpperCase(char)*

public static char toUpperCase(char ch)

Converts the character argument to uppercase using case mapping information 
from the UnicodeData file. 

Note thatCharacter.isUpperCase(Character.toUpperCase(ch))does not always 
returntruefor some ranges of characters, particularly those that are symbols or 
ideographs. 

In general, (|java.lang.String|) should be used to map characters to 
uppercase.Stringcase mapping methods have several benefits overCharactercase 
mapping methods.Stringcase mapping methods can perform locale-sensitive 
mappings, context-sensitive mappings, and 1:M character mappings, whereas 
theCharactercase mapping methods cannot. 

Note: This method cannot handle supplementary characters. To support all 
Unicode characters, including supplementary characters, use the 
(|java.lang.Character|) method. 


    ch - the character to be converted. 

    Returns: the uppercase equivalent of the character, if any; otherwise, the character 
             itself. 

*java.lang.Character.toUpperCase(int)*

public static int toUpperCase(int codePoint)

Converts the character (Unicode code point) argument to uppercase using case 
mapping information from the UnicodeData file. 

Note thatCharacter.isUpperCase(Character.toUpperCase(codePoint))does not always 
returntruefor some ranges of characters, particularly those that are symbols or 
ideographs. 

In general, (|java.lang.String|) should be used to map characters to 
uppercase.Stringcase mapping methods have several benefits overCharactercase 
mapping methods.Stringcase mapping methods can perform locale-sensitive 
mappings, context-sensitive mappings, and 1:M character mappings, whereas 
theCharactercase mapping methods cannot. 


    codePoint - the character (Unicode code point) to be converted. 

    Returns: the uppercase equivalent of the character, if any; otherwise, the character 
             itself. 

*java.lang.Character.valueOf(char)*

public static |java.lang.Character| valueOf(char c)

Returns a Character instance representing the specified char value. If a new 
Character instance is not required, this method should generally be used in 
preference to the constructor (|java.lang.Character|) , as this method is 
likely to yield significantly better space and time performance by caching 
frequently requested values. 

This method will always cache values in the range'\u0000'to'\u007F', inclusive, 
and may cache other values outside of this range. 


    c - a char value. 

    Returns: a Character instance representing c. 


