*javax.crypto.spec.SecretKeySpec* *SecretKeySpec* This class specifies a secret 

public class SecretKeySpec
  extends    |java.lang.Object|
  implements |java.security.spec.KeySpec|
             |javax.crypto.SecretKey|

|javax.crypto.spec.SecretKeySpec_Description|
|javax.crypto.spec.SecretKeySpec_Fields|
|javax.crypto.spec.SecretKeySpec_Constructors|
|javax.crypto.spec.SecretKeySpec_Methods|

================================================================================

*javax.crypto.spec.SecretKeySpec_Constructors*
|javax.crypto.spec.SecretKeySpec(byte[],int,int,String)|Constructs a secret key
|javax.crypto.spec.SecretKeySpec(byte[],String)|Constructs a secret key from th

*javax.crypto.spec.SecretKeySpec_Methods*
|javax.crypto.spec.SecretKeySpec.equals(Object)|Tests for equality between the 
|javax.crypto.spec.SecretKeySpec.getAlgorithm()|Returns the name of the algorit
|javax.crypto.spec.SecretKeySpec.getEncoded()|Returns the key material of this 
|javax.crypto.spec.SecretKeySpec.getFormat()|Returns the name of the encoding f
|javax.crypto.spec.SecretKeySpec.hashCode()|Calculates a hash code value for th

*javax.crypto.spec.SecretKeySpec_Description*

This class specifies a secret key in a provider-independent fashion. 

It can be used to construct a SecretKey from a byte array, without having to go 
through a (provider-based) SecretKeyFactory. 

This class is only useful for raw secret keys that can be represented as a byte 
array and have no key parameters associated with them, e.g., DES or Triple DES 
keys. 



*javax.crypto.spec.SecretKeySpec(byte[],int,int,String)*

public SecretKeySpec(
  byte[] key,
  int offset,
  int len,
  java.lang.String algorithm)

Constructs a secret key from the given byte array, using the first len bytes of 
key, starting at offset inclusive. 

The bytes that constitute the secret key are those between key[offset] and 
key[offset+len-1] inclusive. 

This constructor does not check if the given bytes indeed specify a secret key 
of the specified algorithm. For example, if the algorithm is DES, this 
constructor does not check if key is 8 bytes long, and also does not check for 
weak or semi-weak keys. In order for those checks to be performed, an 
algorithm-specific key specification class (in this case: 
DESKeySpec(|javax.crypto.spec.DESKeySpec|) ) must be used. 

    key - the key material of the secret key. The first len bytes of the array beginning 
       at offset inclusive are copied to protect against subsequent 
       modification. 
    offset - the offset in key where the key material starts. 
    len - the length of the key material. 
    algorithm - the name of the secret-key algorithm to be associated with the given key 
       material. See Appendix A in the Java Cryptography Architecture Reference 
       Guide for information about standard algorithm names. 

*javax.crypto.spec.SecretKeySpec(byte[],String)*

public SecretKeySpec(
  byte[] key,
  java.lang.String algorithm)

Constructs a secret key from the given byte array. 

This constructor does not check if the given bytes indeed specify a secret key 
of the specified algorithm. For example, if the algorithm is DES, this 
constructor does not check if key is 8 bytes long, and also does not check for 
weak or semi-weak keys. In order for those checks to be performed, an 
algorithm-specific key specification class (in this case: 
DESKeySpec(|javax.crypto.spec.DESKeySpec|) ) should be used. 

    key - the key material of the secret key. The contents of the array are copied to 
       protect against subsequent modification. 
    algorithm - the name of the secret-key algorithm to be associated with the given key 
       material. See Appendix A in the Java Cryptography Architecture Reference 
       Guide for information about standard algorithm names. 

*javax.crypto.spec.SecretKeySpec.equals(Object)*

public boolean equals(java.lang.Object obj)

Tests for equality between the specified object and this object. Two 
SecretKeySpec objects are considered equal if they are both SecretKey instances 
which have the same case-insensitive algorithm name and key encoding. 


    obj - the object to test for equality with this object. 

    Returns: true if the objects are considered equal, false if obj is null or otherwise. 

*javax.crypto.spec.SecretKeySpec.getAlgorithm()*

public |java.lang.String| getAlgorithm()

Returns the name of the algorithm associated with this secret key. 



    Returns: the secret key algorithm. 

*javax.crypto.spec.SecretKeySpec.getEncoded()*

public byte[] getEncoded()

Returns the key material of this secret key. 



    Returns: the key material. Returns a new array each time this method is called. 

*javax.crypto.spec.SecretKeySpec.getFormat()*

public |java.lang.String| getFormat()

Returns the name of the encoding format for this secret key. 



    Returns: the string "RAW". 

*javax.crypto.spec.SecretKeySpec.hashCode()*

public int hashCode()

Calculates a hash code value for the object. Objects that are equal will also 
have the same hashcode. 




