*javax.net.ssl.SSLServerSocket* *SSLServerSocket* This class extends ServerSocke

public abstract class SSLServerSocket
  extends    |java.net.ServerSocket|

|javax.net.ssl.SSLServerSocket_Description|
|javax.net.ssl.SSLServerSocket_Fields|
|javax.net.ssl.SSLServerSocket_Constructors|
|javax.net.ssl.SSLServerSocket_Methods|

================================================================================

*javax.net.ssl.SSLServerSocket_Constructors*
|javax.net.ssl.SSLServerSocket()|Used only by subclasses.
|javax.net.ssl.SSLServerSocket(int)|Used only by subclasses.
|javax.net.ssl.SSLServerSocket(int,int)|Used only by subclasses.
|javax.net.ssl.SSLServerSocket(int,int,InetAddress)|Used only by subclasses.

*javax.net.ssl.SSLServerSocket_Methods*
|javax.net.ssl.SSLServerSocket.getEnabledCipherSuites()|Returns the list of cip
|javax.net.ssl.SSLServerSocket.getEnabledProtocols()|Returns the names of the p
|javax.net.ssl.SSLServerSocket.getEnableSessionCreation()|Returns true if new S
|javax.net.ssl.SSLServerSocket.getNeedClientAuth()|Returns true if client authe
|javax.net.ssl.SSLServerSocket.getSSLParameters()|Returns the SSLParameters in 
|javax.net.ssl.SSLServerSocket.getSupportedCipherSuites()|Returns the names of 
|javax.net.ssl.SSLServerSocket.getSupportedProtocols()|Returns the names of the
|javax.net.ssl.SSLServerSocket.getUseClientMode()|Returns true if accepted conn
|javax.net.ssl.SSLServerSocket.getWantClientAuth()|Returns true if client authe
|javax.net.ssl.SSLServerSocket.setEnabledCipherSuites(String[])|Sets the cipher
|javax.net.ssl.SSLServerSocket.setEnabledProtocols(String[])|Controls which par
|javax.net.ssl.SSLServerSocket.setEnableSessionCreation(boolean)|Controls wheth
|javax.net.ssl.SSLServerSocket.setNeedClientAuth(boolean)|Controls whether acce
|javax.net.ssl.SSLServerSocket.setSSLParameters(SSLParameters)|Applies SSLParam
|javax.net.ssl.SSLServerSocket.setUseClientMode(boolean)|Controls whether accep
|javax.net.ssl.SSLServerSocket.setWantClientAuth(boolean)|Controls whether acce

*javax.net.ssl.SSLServerSocket_Description*

This class extends ServerSockets and provides secure server sockets using 
protocols such as the Secure Sockets Layer (SSL) or Transport Layer Security 
(TLS) protocols. 

Instances of this class are generally created using a SSLServerSocketFactory. 
The primary function of SSLServerSockets is to create SSLSockets by accepting 
connections. 

SSLServerSockets contain several pieces of state data which are inherited by 
the SSLSocket at socket creation. These include the enabled cipher suites and 
protocols, whether client authentication is necessary, and whether created 
sockets should begin handshaking in client or server mode. The state inherited 
by the created SSLSocket can be overriden by calling the appropriate methods. 



*javax.net.ssl.SSLServerSocket()*

protected SSLServerSocket()
  throws |java.io.IOException|
         
Used only by subclasses. 

Create an unbound TCP server socket using the default authentication context. 


*javax.net.ssl.SSLServerSocket(int)*

protected SSLServerSocket(int port)
  throws |java.io.IOException|
         
Used only by subclasses. 

Create a TCP server socket on a port, using the default authentication context. 
The connection backlog defaults to fifty connections queued up before the 
system starts to reject new connection requests. 

A port number of 0 creates a socket on any free port. 

If there is a security manager, its checkListen method is called with the port 
argument as its argument to ensure the operation is allowed. This could result 
in a SecurityException. 

    port - the port on which to listen 

*javax.net.ssl.SSLServerSocket(int,int)*

protected SSLServerSocket(
  int port,
  int backlog)
  throws |java.io.IOException|
         
Used only by subclasses. 

Create a TCP server socket on a port, using the default authentication context 
and a specified backlog of connections. 

A port number of 0 creates a socket on any free port. 

The backlog argument is the requested maximum number of pending connections on 
the socket. Its exact semantics are implementation specific. In particular, an 
implementation may impose a maximum length or may choose to ignore the 
parameter altogther. The value provided should be greater than 0. If it is less 
than or equal to 0, then an implementation specific default will be used. 

If there is a security manager, its checkListen method is called with the port 
argument as its argument to ensure the operation is allowed. This could result 
in a SecurityException. 

    port - the port on which to listen 
    backlog - requested maximum length of the queue of incoming connections. 

*javax.net.ssl.SSLServerSocket(int,int,InetAddress)*

protected SSLServerSocket(
  int port,
  int backlog,
  java.net.InetAddress address)
  throws |java.io.IOException|
         
Used only by subclasses. 

Create a TCP server socket on a port, using the default authentication context 
and a specified backlog of connections as well as a particular specified 
network interface. This constructor is used on multihomed hosts, such as those 
used for firewalls or as routers, to control through which interface a network 
service is provided. 

If there is a security manager, its checkListen method is called with the port 
argument as its argument to ensure the operation is allowed. This could result 
in a SecurityException. 

A port number of 0 creates a socket on any free port. 

The backlog argument is the requested maximum number of pending connections on 
the socket. Its exact semantics are implementation specific. In particular, an 
implementation may impose a maximum length or may choose to ignore the 
parameter altogther. The value provided should be greater than 0. If it is less 
than or equal to 0, then an implementation specific default will be used. 

If address is null, it will default accepting connections on any/all local 
addresses. 

    port - the port on which to listen 
    backlog - requested maximum length of the queue of incoming connections. 
    address - the address of the network interface through which connections will be accepted 

*javax.net.ssl.SSLServerSocket.getEnabledCipherSuites()*

public abstract |java.lang.String|[] getEnabledCipherSuites()

Returns the list of cipher suites which are currently enabled for use by newly 
accepted connections. 

If this list has not been explicitly modified, a system-provided default 
guarantees a minimum quality of service in all enabled cipher suites. 

There are several reasons why an enabled cipher suite might not actually be 
used. For example: the server socket might not have appropriate private keys 
available to it or the cipher suite might be anonymous, precluding the use of 
client authentication, while the server socket has been told to require that 
sort of authentication. 



    Returns: an array of cipher suites enabled 

*javax.net.ssl.SSLServerSocket.getEnabledProtocols()*

public abstract |java.lang.String|[] getEnabledProtocols()

Returns the names of the protocols which are currently enabled for use by the 
newly accepted connections. 



    Returns: an array of protocol names 

*javax.net.ssl.SSLServerSocket.getEnableSessionCreation()*

public abstract boolean getEnableSessionCreation()

Returns true if new SSL sessions may be established by the sockets which are 
created from this server socket. 



    Returns: true indicates that sessions may be created; this is the default. false 
             indicates that an existing session must be resumed 

*javax.net.ssl.SSLServerSocket.getNeedClientAuth()*

public abstract boolean getNeedClientAuth()

Returns true if client authentication will be required on newly accepted 
server-mode SSLSockets. 

The initial inherited setting may be overridden by calling 
(|javax.net.ssl.SSLSocket|) or (|javax.net.ssl.SSLSocket|) . 



    Returns: true if client authentication is required, or false if no client authentication 
             is desired. 

*javax.net.ssl.SSLServerSocket.getSSLParameters()*

public |javax.net.ssl.SSLParameters| getSSLParameters()

Returns the SSLParameters in effect for newly accepted connections. The 
ciphersuites and protocols of the returned SSLParameters are always non-null. 



    Returns: the SSLParameters in effect for newly accepted connections 

*javax.net.ssl.SSLServerSocket.getSupportedCipherSuites()*

public abstract |java.lang.String|[] getSupportedCipherSuites()

Returns the names of the cipher suites which could be enabled for use on an SSL 
connection. 

Normally, only a subset of these will actually be enabled by default, since 
this list may include cipher suites which do not meet quality of service 
requirements for those defaults. Such cipher suites are useful in specialized 
applications. 



    Returns: an array of cipher suite names 

*javax.net.ssl.SSLServerSocket.getSupportedProtocols()*

public abstract |java.lang.String|[] getSupportedProtocols()

Returns the names of the protocols which could be enabled for use. 



    Returns: an array of protocol names supported 

*javax.net.ssl.SSLServerSocket.getUseClientMode()*

public abstract boolean getUseClientMode()

Returns true if accepted connections will be in SSL client mode. 



    Returns: true if the connection should use SSL client mode. 

*javax.net.ssl.SSLServerSocket.getWantClientAuth()*

public abstract boolean getWantClientAuth()

Returns true if client authentication will be requested on newly accepted 
server-mode connections. 

The initial inherited setting may be overridden by calling 
(|javax.net.ssl.SSLSocket|) or (|javax.net.ssl.SSLSocket|) . 



    Returns: true if client authentication is requested, or false if no client 
             authentication is desired. 

*javax.net.ssl.SSLServerSocket.setEnabledCipherSuites(String[])*

public abstract void setEnabledCipherSuites(java.lang.String[] suites)

Sets the cipher suites enabled for use by accepted connections. 

The cipher suites must have been listed by getSupportedCipherSuites() as being 
supported. Following a successful call to this method, only suites listed in 
the suites parameter are enabled for use. 

Suites that require authentication information which is not available in this 
ServerSocket's authentication context will not be used in any case, even if 
they are enabled. 

SSLSockets returned from accept() inherit this setting. 


    suites - Names of all the cipher suites to enable 

*javax.net.ssl.SSLServerSocket.setEnabledProtocols(String[])*

public abstract void setEnabledProtocols(java.lang.String[] protocols)

Controls which particular protocols are enabled for use by accepted 
connections. 

The protocols must have been listed by getSupportedProtocols() as being 
supported. Following a successful call to this method, only protocols listed in 
the protocols parameter are enabled for use. 

SSLSockets returned from accept() inherit this setting. 


    protocols - Names of all the protocols to enable. 

*javax.net.ssl.SSLServerSocket.setEnableSessionCreation(boolean)*

public abstract void setEnableSessionCreation(boolean flag)

Controls whether new SSL sessions may be established by the sockets which are 
created from this server socket. 

SSLSockets returned from accept() inherit this setting. 


    flag - true indicates that sessions may be created; this is the default. false 
       indicates that an existing session must be resumed. 

*javax.net.ssl.SSLServerSocket.setNeedClientAuth(boolean)*

public abstract void setNeedClientAuth(boolean need)

Controls whether accepted server-mode SSLSockets will be initially configured 
to require client authentication. 

A socket's client authentication setting is one of the following: 

client authentication required client authentication requested no client 
authentication desired 

Unlike (|javax.net.ssl.SSLServerSocket|) , if the accepted socket's option is 
set and the client chooses not to provide authentication information about 
itself, the negotiations will stop and the connection will be dropped. 

Calling this method overrides any previous setting made by this method or 
(|javax.net.ssl.SSLServerSocket|) . 

The initial inherited setting may be overridden by calling 
(|javax.net.ssl.SSLSocket|) or (|javax.net.ssl.SSLSocket|) . 


    need - set to true if client authentication is required, or false if no client 
       authentication is desired. 

*javax.net.ssl.SSLServerSocket.setSSLParameters(SSLParameters)*

public void setSSLParameters(javax.net.ssl.SSLParameters params)

Applies SSLParameters to newly accepted connections. 

This means: 

if params.getCipherSuites() is non-null, setEnabledCipherSuites() is called 
with that value if params.getProtocols() is non-null, setEnabledProtocols() is 
called with that value if params.getNeedClientAuth() or 
params.getWantClientAuth() return true, setNeedClientAuth(true) and 
setWantClientAuth(true) are called, respectively; otherwise 
setWantClientAuth(false) is called. 


    params - the parameters 

*javax.net.ssl.SSLServerSocket.setUseClientMode(boolean)*

public abstract void setUseClientMode(boolean mode)

Controls whether accepted connections are in the (default) SSL server mode, or 
the SSL client mode. 

Servers normally authenticate themselves, and clients are not required to do 
so. 

In rare cases, TCP servers need to act in the SSL client mode on newly accepted 
connections. For example, FTP clients acquire server sockets and listen there 
for reverse connections from the server. An FTP client would use an 
SSLServerSocket in "client" mode to accept the reverse connection while the FTP 
server uses an SSLSocket with "client" mode disabled to initiate the 
connection. During the resulting handshake, existing SSL sessions may be 
reused. 

SSLSockets returned from accept() inherit this setting. 


    mode - true if newly accepted connections should use SSL client mode. 

*javax.net.ssl.SSLServerSocket.setWantClientAuth(boolean)*

public abstract void setWantClientAuth(boolean want)

Controls whether accepted server-mode SSLSockets will be initially configured 
to request client authentication. 

A socket's client authentication setting is one of the following: 

client authentication required client authentication requested no client 
authentication desired 

Unlike (|javax.net.ssl.SSLServerSocket|) , if the accepted socket's option is 
set and the client chooses not to provide authentication information about 
itself, the negotiations will continue. 

Calling this method overrides any previous setting made by this method or 
(|javax.net.ssl.SSLServerSocket|) . 

The initial inherited setting may be overridden by calling 
(|javax.net.ssl.SSLSocket|) or (|javax.net.ssl.SSLSocket|) . 


    want - set to true if client authentication is requested, or false if no client 
       authentication is desired. 


