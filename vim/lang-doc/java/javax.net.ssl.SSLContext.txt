*javax.net.ssl.SSLContext* *SSLContext* Instances of this class represent a secu

public class SSLContext
  extends    |java.lang.Object|

|javax.net.ssl.SSLContext_Description|
|javax.net.ssl.SSLContext_Fields|
|javax.net.ssl.SSLContext_Constructors|
|javax.net.ssl.SSLContext_Methods|

================================================================================

*javax.net.ssl.SSLContext_Constructors*
|javax.net.ssl.SSLContext(SSLContextSpi,Provider,String)|Creates an SSLContext 

*javax.net.ssl.SSLContext_Methods*
|javax.net.ssl.SSLContext.createSSLEngine()|Creates a new SSLEngine using this 
|javax.net.ssl.SSLContext.createSSLEngine(String,int)|Creates a new SSLEngine u
|javax.net.ssl.SSLContext.getClientSessionContext()|Returns the client session 
|javax.net.ssl.SSLContext.getDefault()|Returns the default SSL context.
|javax.net.ssl.SSLContext.getDefaultSSLParameters()|Returns a copy of the SSLPa
|javax.net.ssl.SSLContext.getInstance(String)|Returns a SSLContext object that 
|javax.net.ssl.SSLContext.getInstance(String,Provider)|Returns a SSLContext obj
|javax.net.ssl.SSLContext.getInstance(String,String)|Returns a SSLContext objec
|javax.net.ssl.SSLContext.getProtocol()|Returns the protocol name of this SSLCo
|javax.net.ssl.SSLContext.getProvider()|Returns the provider of this SSLContext
|javax.net.ssl.SSLContext.getServerSessionContext()|Returns the server session 
|javax.net.ssl.SSLContext.getServerSocketFactory()|Returns a ServerSocketFactor
|javax.net.ssl.SSLContext.getSocketFactory()|Returns a SocketFactory object for
|javax.net.ssl.SSLContext.getSupportedSSLParameters()|Returns a copy of the SSL
|javax.net.ssl.SSLContext.init(KeyManager[],TrustManager[],SecureRandom)|Initia
|javax.net.ssl.SSLContext.setDefault(SSLContext)|Sets the default SSL context.

*javax.net.ssl.SSLContext_Description*

Instances of this class represent a secure socket protocol implementation which 
acts as a factory for secure socket factories or SSLEngines. This class is 
initialized with an optional set of key and trust managers and source of secure 
random bytes. 

Every implementation of the Java platform is required to support the following 
standard SSLContext protocol: 

TLSv1 

This protocol is described in the <a href= 
"/../technotes/guides/security/StandardNames.html#SSLContext"> SSLContext 
section of the Java Cryptography Architecture Standard Algorithm Name 
Documentation. Consult the release documentation for your implementation to see 
if any other algorithms are supported. 



*javax.net.ssl.SSLContext(SSLContextSpi,Provider,String)*

protected SSLContext(
  javax.net.ssl.SSLContextSpi contextSpi,
  java.security.Provider provider,
  java.lang.String protocol)

Creates an SSLContext object. 

    contextSpi - the delegate 
    provider - the provider 
    protocol - the protocol 

*javax.net.ssl.SSLContext.createSSLEngine()*

public final |javax.net.ssl.SSLEngine| createSSLEngine()

Creates a new SSLEngine using this context. 

Applications using this factory method are providing no hints for an internal 
session reuse strategy. If hints are desired, (|javax.net.ssl.SSLContext|) 
should be used instead. 

Some cipher suites (such as Kerberos) require remote hostname information, in 
which case this factory method should not be used. 



    Returns: the SSLEngine object 

*javax.net.ssl.SSLContext.createSSLEngine(String,int)*

public final |javax.net.ssl.SSLEngine| createSSLEngine(
  java.lang.String peerHost,
  int peerPort)

Creates a new SSLEngine using this context using advisory peer information. 

Applications using this factory method are providing hints for an internal 
session reuse strategy. 

Some cipher suites (such as Kerberos) require remote hostname information, in 
which case peerHost needs to be specified. 


    peerHost - the non-authoritative name of the host 
    peerPort - the non-authoritative port 

    Returns: the new SSLEngine object 

*javax.net.ssl.SSLContext.getClientSessionContext()*

public final |javax.net.ssl.SSLSessionContext| getClientSessionContext()

Returns the client session context, which represents the set of SSL sessions 
available for use during the handshake phase of client-side SSL sockets. 

This context may be unavailable in some environments, in which case this method 
returns null. For example, when the underlying SSL provider does not provide an 
implementation of SSLSessionContext interface, this method returns null. A 
non-null session context is returned otherwise. 



    Returns: client session context bound to this SSL context 

*javax.net.ssl.SSLContext.getDefault()*

public static synchronized |javax.net.ssl.SSLContext| getDefault()
  throws |java.security.NoSuchAlgorithmException|
         
Returns the default SSL context. 

If a default context was set using the 
SSLContext.setDefault()(|javax.net.ssl.SSLContext|) method, it is returned. 
Otherwise, the first call of this method triggers the call 
SSLContext.getInstance("Default"). If successful, that object is made the 
default SSL context and returned. 

The default context is immediately usable and does not require 
initialization(|javax.net.ssl.SSLContext|) . 



    Returns: the default SSL context 

*javax.net.ssl.SSLContext.getDefaultSSLParameters()*

public final |javax.net.ssl.SSLParameters| getDefaultSSLParameters()

Returns a copy of the SSLParameters indicating the default settings for this 
SSL context. 

The parameters will always have the ciphersuites and protocols arrays set to 
non-null values. 



    Returns: a copy of the SSLParameters object with the default settings 

*javax.net.ssl.SSLContext.getInstance(String)*

public static |javax.net.ssl.SSLContext| getInstance(java.lang.String protocol)
  throws |java.security.NoSuchAlgorithmException|
         
Returns a SSLContext object that implements the specified secure socket 
protocol. 

This method traverses the list of registered security Providers, starting with 
the most preferred Provider. A new SSLContext object encapsulating the 
SSLContextSpi implementation from the first Provider that supports the 
specified protocol is returned. 

Note that the list of registered providers may be retrieved via the 
Security.getProviders()(|java.security.Security|) method. 


    protocol - the standard name of the requested protocol. See the SSLContext section in the 
       Java Cryptography Architecture Standard Algorithm Name Documentation for 
       information about standard protocol names. 

    Returns: the new SSLContext object. 

*javax.net.ssl.SSLContext.getInstance(String,Provider)*

public static |javax.net.ssl.SSLContext| getInstance(
  java.lang.String protocol,
  java.security.Provider provider)
  throws |java.security.NoSuchAlgorithmException|
         
Returns a SSLContext object that implements the specified secure socket 
protocol. 

A new SSLContext object encapsulating the SSLContextSpi implementation from the 
specified Provider object is returned. Note that the specified Provider object 
does not have to be registered in the provider list. 


    protocol - the standard name of the requested protocol. See the SSLContext section in the 
       Java Cryptography Architecture Standard Algorithm Name Documentation for 
       information about standard protocol names. 
    provider - an instance of the provider. 

    Returns: the new SSLContext object. 

*javax.net.ssl.SSLContext.getInstance(String,String)*

public static |javax.net.ssl.SSLContext| getInstance(
  java.lang.String protocol,
  java.lang.String provider)
  throws |java.security.NoSuchAlgorithmException|
         |java.security.NoSuchProviderException|
         
Returns a SSLContext object that implements the specified secure socket 
protocol. 

A new SSLContext object encapsulating the SSLContextSpi implementation from the 
specified provider is returned. The specified provider must be registered in 
the security provider list. 

Note that the list of registered providers may be retrieved via the 
Security.getProviders()(|java.security.Security|) method. 


    protocol - the standard name of the requested protocol. See the SSLContext section in the 
       Java Cryptography Architecture Standard Algorithm Name Documentation for 
       information about standard protocol names. 
    provider - the name of the provider. 

    Returns: the new SSLContext object. 

*javax.net.ssl.SSLContext.getProtocol()*

public final |java.lang.String| getProtocol()

Returns the protocol name of this SSLContext object. 

This is the same name that was specified in one of the getInstance calls that 
created this SSLContext object. 



    Returns: the protocol name of this SSLContext object. 

*javax.net.ssl.SSLContext.getProvider()*

public final |java.security.Provider| getProvider()

Returns the provider of this SSLContext object. 



    Returns: the provider of this SSLContext object 

*javax.net.ssl.SSLContext.getServerSessionContext()*

public final |javax.net.ssl.SSLSessionContext| getServerSessionContext()

Returns the server session context, which represents the set of SSL sessions 
available for use during the handshake phase of server-side SSL sockets. 

This context may be unavailable in some environments, in which case this method 
returns null. For example, when the underlying SSL provider does not provide an 
implementation of SSLSessionContext interface, this method returns null. A 
non-null session context is returned otherwise. 



    Returns: server session context bound to this SSL context 

*javax.net.ssl.SSLContext.getServerSocketFactory()*

public final |javax.net.ssl.SSLServerSocketFactory| getServerSocketFactory()

Returns a ServerSocketFactory object for this context. 



    Returns: the ServerSocketFactory object 

*javax.net.ssl.SSLContext.getSocketFactory()*

public final |javax.net.ssl.SSLSocketFactory| getSocketFactory()

Returns a SocketFactory object for this context. 



    Returns: the SocketFactory object 

*javax.net.ssl.SSLContext.getSupportedSSLParameters()*

public final |javax.net.ssl.SSLParameters| getSupportedSSLParameters()

Returns a copy of the SSLParameters indicating the supported settings for this 
SSL context. 

The parameters will always have the ciphersuites and protocols arrays set to 
non-null values. 



    Returns: a copy of the SSLParameters object with the supported settings 

*javax.net.ssl.SSLContext.init(KeyManager[],TrustManager[],SecureRandom)*

public final void init(
  javax.net.ssl.KeyManager[] km,
  javax.net.ssl.TrustManager[] tm,
  java.security.SecureRandom random)
  throws |java.security.KeyManagementException|
         
Initializes this context. Either of the first two parameters may be null in 
which case the installed security providers will be searched for the highest 
priority implementation of the appropriate factory. Likewise, the secure random 
parameter may be null in which case the default implementation will be used. 

Only the first instance of a particular key and/or trust manager implementation 
type in the array is used. (For example, only the first 
javax.net.ssl.X509KeyManager in the array will be used.) 


    km - the sources of authentication keys or null 
    tm - the sources of peer authentication trust decisions or null 
    random - the source of randomness for this generator or null 

*javax.net.ssl.SSLContext.setDefault(SSLContext)*

public static synchronized void setDefault(javax.net.ssl.SSLContext context)

Sets the default SSL context. It will be returned by subsequent calls to 
(|javax.net.ssl.SSLContext|) . The default context must be immediately usable 
and not require initialization(|javax.net.ssl.SSLContext|) . 


    context - the SSLContext 


