*java.awt.event.InputEvent* *InputEvent* The root event class for all component-

public abstract class InputEvent
  extends    |java.awt.event.ComponentEvent|

|java.awt.event.InputEvent_Description|
|java.awt.event.InputEvent_Fields|
|java.awt.event.InputEvent_Constructors|
|java.awt.event.InputEvent_Methods|

================================================================================

*java.awt.event.InputEvent_Fields*
|int_java.awt.event.InputEvent.ALT_DOWN_MASK|
|int_java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK|
|int_java.awt.event.InputEvent.ALT_GRAPH_MASK|
|int_java.awt.event.InputEvent.ALT_MASK|
|int_java.awt.event.InputEvent.BUTTON1_DOWN_MASK|
|int_java.awt.event.InputEvent.BUTTON1_MASK|
|int_java.awt.event.InputEvent.BUTTON2_DOWN_MASK|
|int_java.awt.event.InputEvent.BUTTON2_MASK|
|int_java.awt.event.InputEvent.BUTTON3_DOWN_MASK|
|int_java.awt.event.InputEvent.BUTTON3_MASK|
|int_java.awt.event.InputEvent.CTRL_DOWN_MASK|
|int_java.awt.event.InputEvent.CTRL_MASK|
|int_java.awt.event.InputEvent.META_DOWN_MASK|
|int_java.awt.event.InputEvent.META_MASK|
|int_java.awt.event.InputEvent.SHIFT_DOWN_MASK|
|int_java.awt.event.InputEvent.SHIFT_MASK|

*java.awt.event.InputEvent_Methods*
|java.awt.event.InputEvent.consume()|Consumes this event so that it will not be
|java.awt.event.InputEvent.getMaskForButton(int)|A method to obtain a mask for 
|java.awt.event.InputEvent.getModifiers()|Returns the modifier mask for this ev
|java.awt.event.InputEvent.getModifiersEx()|Returns the extended modifier mask 
|java.awt.event.InputEvent.getModifiersExText(int)|Returns a String describing 
|java.awt.event.InputEvent.getWhen()|Returns the difference in milliseconds bet
|java.awt.event.InputEvent.isAltDown()|Returns whether or not the Alt modifier 
|java.awt.event.InputEvent.isAltGraphDown()|Returns whether or not the AltGraph
|java.awt.event.InputEvent.isConsumed()|Returns whether or not this event has b
|java.awt.event.InputEvent.isControlDown()|Returns whether or not the Control m
|java.awt.event.InputEvent.isMetaDown()|Returns whether or not the Meta modifie
|java.awt.event.InputEvent.isShiftDown()|Returns whether or not the Shift modif

*java.awt.event.InputEvent_Description*

The root event class for all component-level input events. 

Input events are delivered to listeners before they are processed normally by 
the source where they originated. This allows listeners and component 
subclasses to "consume" the event so that the source will not process them in 
their default manner. For example, consuming mousePressed events on a Button 
component will prevent the Button from being activated. 



*int_java.awt.event.InputEvent.ALT_DOWN_MASK*

The Alt key extended modifier constant. 


*int_java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK*

The AltGraph key extended modifier constant. 


*int_java.awt.event.InputEvent.ALT_GRAPH_MASK*

The AltGraph key modifier constant. 


*int_java.awt.event.InputEvent.ALT_MASK*

The Alt key modifier constant. It is recommended that ALT_DOWN_MASK be used 
instead. 


*int_java.awt.event.InputEvent.BUTTON1_DOWN_MASK*

The Mouse Button1 extended modifier constant. 


*int_java.awt.event.InputEvent.BUTTON1_MASK*

The Mouse Button1 modifier constant. It is recommended that BUTTON1_DOWN_MASK 
be used instead. 


*int_java.awt.event.InputEvent.BUTTON2_DOWN_MASK*

The Mouse Button2 extended modifier constant. 


*int_java.awt.event.InputEvent.BUTTON2_MASK*

The Mouse Button2 modifier constant. It is recommended that BUTTON2_DOWN_MASK 
be used instead. Note that BUTTON2_MASK has the same value as ALT_MASK. 


*int_java.awt.event.InputEvent.BUTTON3_DOWN_MASK*

The Mouse Button3 extended modifier constant. 


*int_java.awt.event.InputEvent.BUTTON3_MASK*

The Mouse Button3 modifier constant. It is recommended that BUTTON3_DOWN_MASK 
be used instead. Note that BUTTON3_MASK has the same value as META_MASK. 


*int_java.awt.event.InputEvent.CTRL_DOWN_MASK*

The Control key extended modifier constant. 


*int_java.awt.event.InputEvent.CTRL_MASK*

The Control key modifier constant. It is recommended that CTRL_DOWN_MASK be 
used instead. 


*int_java.awt.event.InputEvent.META_DOWN_MASK*

The Meta key extended modifier constant. 


*int_java.awt.event.InputEvent.META_MASK*

The Meta key modifier constant. It is recommended that META_DOWN_MASK be used 
instead. 


*int_java.awt.event.InputEvent.SHIFT_DOWN_MASK*

The Shift key extended modifier constant. 


*int_java.awt.event.InputEvent.SHIFT_MASK*

The Shift key modifier constant. It is recommended that SHIFT_DOWN_MASK be used 
instead. 



*java.awt.event.InputEvent.consume()*

public void consume()

Consumes this event so that it will not be processed in the default manner by 
the source which originated it. 



*java.awt.event.InputEvent.getMaskForButton(int)*

public static int getMaskForButton(int button)

A method to obtain a mask for any existing mouse button. The returned mask may 
be used for different purposes. Following are some of them: 

mousePress(buttons)(|java.awt.Robot|) and 
mouseRelease(buttons)(|java.awt.Robot|) as amodifiersparameter when creating a 
new (|java.awt.event.MouseEvent|) instance to check 
modifiersEx(|java.awt.event.MouseEvent|) of existingMouseEvent 


    button - is a number to represent a button starting from 1. For example, 

int button = InputEvent.getMaskForButton(1); 

will have the same meaning as 

int button = InputEvent.getMaskForButton(MouseEvent.BUTTON1); 

because {@link MouseEvent#BUTTON1 MouseEvent.BUTTON1} equals to 1. If a mouse 
       has three enabled buttons(see {@link 
       java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()}) 
       then the values from the left column passed into the method will return 
       corresponding values from the right column: 

button returned mask {@link MouseEvent#BUTTON1 BUTTON1} {@link 
       MouseEvent#BUTTON1_DOWN_MASK BUTTON1_DOWN_MASK} {@link 
       MouseEvent#BUTTON2 BUTTON2} {@link MouseEvent#BUTTON2_DOWN_MASK 
       BUTTON2_DOWN_MASK} {@link MouseEvent#BUTTON3 BUTTON3} {@link 
       MouseEvent#BUTTON3_DOWN_MASK BUTTON3_DOWN_MASK} 

If a mouse has more than three enabled buttons then more values are admissible 
       (4, 5, etc.). There is no assigned constants for these extended buttons. 
       The button masks for the extra buttons returned by this method have no 
       assigned names like the first three button masks. 

This method has the following implementation restriction. It returns masks for 
       a limited number of buttons only. The maximum number is implementation 
       dependent and may vary. This limit is defined by the relevant number of 
       buttons that may hypothetically exist on the mouse but it is greater 
       than the {@link java.awt.MouseInfo#getNumberOfButtons() 
       MouseInfo.getNumberOfButtons()}. 

*java.awt.event.InputEvent.getModifiers()*

public int getModifiers()

Returns the modifier mask for this event. 



*java.awt.event.InputEvent.getModifiersEx()*

public int getModifiersEx()

Returns the extended modifier mask for this event. Extended modifiers represent 
the state of all modal keys, such as ALT, CTRL, META, and the mouse buttons 
just after the event occurred 

For example, if the user presses button 1 followed by button 2, and then 
releases them in the same order, the following sequence of events is generated: 

MOUSE_PRESSED: BUTTON1_DOWN_MASK MOUSE_PRESSED: BUTTON1_DOWN_MASK | 
BUTTON2_DOWN_MASK MOUSE_RELEASED: BUTTON2_DOWN_MASK MOUSE_CLICKED: 
BUTTON2_DOWN_MASK MOUSE_RELEASED: MOUSE_CLICKED: 

It is not recommended to compare the return value of this method using == 
because new modifiers can be added in the future. For example, the appropriate 
way to check that SHIFT and BUTTON1 are down, but CTRL is up is demonstrated by 
the following code: 

int onmask = SHIFT_DOWN_MASK | BUTTON1_DOWN_MASK; int offmask = CTRL_DOWN_MASK; 
if ((event.getModifiersEx() & (onmask | offmask)) == onmask) { ... } 

The above code will work even if new modifiers are added. 



*java.awt.event.InputEvent.getModifiersExText(int)*

public static |java.lang.String| getModifiersExText(int modifiers)

Returns a String describing the extended modifier keys and mouse buttons, such 
as "Shift", "Button1", or "Ctrl+Shift". These strings can be localized by 
changing the awt.properties file. 

Note that passing negative parameter is incorrect, and will cause the returning 
an unspecified string. Zero parameter means that no modifiers were passed and 
will cause the returning an empty string. 


    modifiers - a modifier mask describing the extended modifier keys and mouse buttons for the 
       event 

    Returns: a text description of the combination of extended modifier keys and mouse 
             buttons that were held down during the event. 

*java.awt.event.InputEvent.getWhen()*

public long getWhen()

Returns the difference in milliseconds between the timestamp of when this event 
occurred and midnight, January 1, 1970 UTC. 



*java.awt.event.InputEvent.isAltDown()*

public boolean isAltDown()

Returns whether or not the Alt modifier is down on this event. 



*java.awt.event.InputEvent.isAltGraphDown()*

public boolean isAltGraphDown()

Returns whether or not the AltGraph modifier is down on this event. 



*java.awt.event.InputEvent.isConsumed()*

public boolean isConsumed()

Returns whether or not this event has been consumed. 



*java.awt.event.InputEvent.isControlDown()*

public boolean isControlDown()

Returns whether or not the Control modifier is down on this event. 



*java.awt.event.InputEvent.isMetaDown()*

public boolean isMetaDown()

Returns whether or not the Meta modifier is down on this event. 



*java.awt.event.InputEvent.isShiftDown()*

public boolean isShiftDown()

Returns whether or not the Shift modifier is down on this event. 




