*javax.net.ssl.SSLSocketFactory* *SSLSocketFactory* SSLSocketFactorys create SSL

public abstract class SSLSocketFactory
  extends    |javax.net.SocketFactory|

|javax.net.ssl.SSLSocketFactory_Description|
|javax.net.ssl.SSLSocketFactory_Fields|
|javax.net.ssl.SSLSocketFactory_Constructors|
|javax.net.ssl.SSLSocketFactory_Methods|

================================================================================

*javax.net.ssl.SSLSocketFactory_Constructors*
|javax.net.ssl.SSLSocketFactory()|Constructor is used only by subclasses.

*javax.net.ssl.SSLSocketFactory_Methods*
|javax.net.ssl.SSLSocketFactory.createSocket(Socket,String,int,boolean)|Returns
|javax.net.ssl.SSLSocketFactory.getDefault()|Returns the default SSL socket fac
|javax.net.ssl.SSLSocketFactory.getDefaultCipherSuites()|Returns the list of ci
|javax.net.ssl.SSLSocketFactory.getSupportedCipherSuites()|Returns the names of

*javax.net.ssl.SSLSocketFactory_Description*

SSLSocketFactorys create SSLSockets. 



*javax.net.ssl.SSLSocketFactory()*

public SSLSocketFactory()

Constructor is used only by subclasses. 


*javax.net.ssl.SSLSocketFactory.createSocket(Socket,String,int,boolean)*

public abstract |java.net.Socket| createSocket(
  java.net.Socket s,
  java.lang.String host,
  int port,
  boolean autoClose)
  throws |java.io.IOException|
         
Returns a socket layered over an existing socket connected to the named host, 
at the given port. This constructor can be used when tunneling SSL through a 
proxy or when negotiating the use of SSL over an existing socket. The host and 
port refer to the logical peer destination. This socket is configured using the 
socket options established for this factory. 


    s - the existing socket 
    host - the server host 
    port - the server port 
    autoClose - close the underlying socket when this socket is closed 

    Returns: a socket connected to the specified host and port 

*javax.net.ssl.SSLSocketFactory.getDefault()*

public static synchronized |javax.net.SocketFactory| getDefault()

Returns the default SSL socket factory. 

The first time this method is called, the security property 
"ssl.SocketFactory.provider" is examined. If it is non-null, a class by that 
name is loaded and instantiated. If that is successful and the object is an 
instance of SSLSocketFactory, it is made the default SSL socket factory. 

Otherwise, this method returns SSLContext.getDefault().getSocketFactory(). If 
that call fails, an inoperative factory is returned. 



    Returns: the default SocketFactory 

*javax.net.ssl.SSLSocketFactory.getDefaultCipherSuites()*

public abstract |java.lang.String|[] getDefaultCipherSuites()

Returns the list of cipher suites which are enabled by default. Unless a 
different list is enabled, handshaking on an SSL connection will use one of 
these cipher suites. The minimum quality of service for these defaults requires 
confidentiality protection and server authentication (that is, no anonymous 
cipher suites). 



    Returns: array of the cipher suites enabled by default 

*javax.net.ssl.SSLSocketFactory.getSupportedCipherSuites()*

public abstract |java.lang.String|[] getSupportedCipherSuites()

Returns the names of the cipher suites which could be enabled for use on an SSL 
connection. Normally, only a subset of these will actually be enabled by 
default, since this list may include cipher suites which do not meet quality of 
service requirements for those defaults. Such cipher suites are useful in 
specialized applications. 



    Returns: an array of cipher suite names 


