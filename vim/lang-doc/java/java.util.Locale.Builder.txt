*java.util.Locale.Builder* *Locale.Builder* Builder is used to build instances o

public static final class Locale.Builder
  extends    |java.lang.Object|

|java.util.Locale.Builder_Description|
|java.util.Locale.Builder_Fields|
|java.util.Locale.Builder_Constructors|
|java.util.Locale.Builder_Methods|

================================================================================

*java.util.Locale.Builder_Constructors*
|java.util.Locale.Builder()|Constructs an empty Builder.

*java.util.Locale.Builder_Methods*
|java.util.Locale.Builder.addUnicodeLocaleAttribute(String)|Adds a unicode loca
|java.util.Locale.Builder.build()|Returns an instance of Locale created from th
|java.util.Locale.Builder.clear()|Resets the builder to its initial, empty stat
|java.util.Locale.Builder.clearExtensions()|Resets the extensions to their init
|java.util.Locale.Builder.removeUnicodeLocaleAttribute(String)|Removes a unicod
|java.util.Locale.Builder.setExtension(char,String)|Sets the extension for the 
|java.util.Locale.Builder.setLanguage(String)|Sets the language.
|java.util.Locale.Builder.setLanguageTag(String)|Resets the Builder to match th
|java.util.Locale.Builder.setLocale(Locale)|Resets the Builder to match the pro
|java.util.Locale.Builder.setRegion(String)|Sets the region.
|java.util.Locale.Builder.setScript(String)|Sets the script.
|java.util.Locale.Builder.setUnicodeLocaleKeyword(String,String)|Sets the Unico
|java.util.Locale.Builder.setVariant(String)|Sets the variant.

*java.util.Locale.Builder_Description*

Builder is used to build instances of Locale from values configured by the 
setters. Unlike the Locale constructors, the Builder checks if a value 
configured by a setter satisfies the syntax requirements defined by the Locale 
class. A Locale object created by a Builder is well-formed and can be 
transformed to a well-formed IETF BCP 47 language tag without losing 
information. 

Note: The Locale class does not provide any syntactic restrictions on variant, 
while BCP 47 requires each variant subtag to be 5 to 8 alphanumerics or a 
single numeric followed by 3 alphanumerics. The method setVariant throws 
IllformedLocaleException for a variant that does not satisfy this restriction. 
If it is necessary to support such a variant, use a Locale constructor. 
However, keep in mind that a Locale object created this way might lose the 
variant information when transformed to a BCP 47 language tag. 

The following example shows how to create a Locale object with the Builder. 



Locale aLocale = new 
Builder().setLanguage("sr").setScript("Latn").setRegion("RS").build(); 



Builders can be reused; clear() resets all fields to their default values. 



*java.util.Locale.Builder()*

public Locale.Builder()

Constructs an empty Builder. The default value of all fields, extensions, and 
private use information is the empty string. 


*java.util.Locale.Builder.addUnicodeLocaleAttribute(String)*

public |java.util.Locale.Builder| addUnicodeLocaleAttribute(java.lang.String attribute)

Adds a unicode locale attribute, if not already present, otherwise has no 
effect. The attribute must not be null and must be well-formed or an exception 
is thrown. 


    attribute - the attribute 

    Returns: This builder. 

*java.util.Locale.Builder.build()*

public |java.util.Locale| build()

Returns an instance of Locale created from the fields set on this builder. 

This applies the conversions listed in (|java.util.Locale|) when constructing a 
Locale. (Grandfathered tags are handled in (|java.util.Locale.Builder|) .) 



    Returns: 

*java.util.Locale.Builder.clear()*

public |java.util.Locale.Builder| clear()

Resets the builder to its initial, empty state. 



    Returns: This builder. 

*java.util.Locale.Builder.clearExtensions()*

public |java.util.Locale.Builder| clearExtensions()

Resets the extensions to their initial, empty state. Language, script, region 
and variant are unchanged. 



    Returns: This builder. 

*java.util.Locale.Builder.removeUnicodeLocaleAttribute(String)*

public |java.util.Locale.Builder| removeUnicodeLocaleAttribute(java.lang.String attribute)

Removes a unicode locale attribute, if present, otherwise has no effect. The 
attribute must not be null and must be well-formed or an exception is thrown. 

Attribute comparision for removal is case-insensitive. 


    attribute - the attribute 

    Returns: This builder. 

*java.util.Locale.Builder.setExtension(char,String)*

public |java.util.Locale.Builder| setExtension(
  char key,
  java.lang.String value)

Sets the extension for the given key. If the value is null or the empty string, 
the extension is removed. Otherwise, the extension must be well-formed or an 
exception is thrown. 

Note: The key UNICODE_LOCALE_EXTENSION(|java.util.Locale|) ('u') is used for 
the Unicode locale extension. Setting a value for this key replaces any 
existing Unicode locale key/type pairs with those defined in the extension. 

Note: The key PRIVATE_USE_EXTENSION(|java.util.Locale|) ('x') is used for the 
private use code. To be well-formed, the value for this key needs only to have 
subtags of one to eight alphanumeric characters, not two to eight as in the 
general case. 


    key - the extension key 
    value - the extension value 

    Returns: This builder. 

*java.util.Locale.Builder.setLanguage(String)*

public |java.util.Locale.Builder| setLanguage(java.lang.String language)

Sets the language. If language is the empty string or null, the language in 
this Builder is removed. Otherwise, the language must be well-formed or an 
exception is thrown. 

The typical language value is a two or three-letter language code as defined in 
ISO639. 


    language - the language 

    Returns: This builder. 

*java.util.Locale.Builder.setLanguageTag(String)*

public |java.util.Locale.Builder| setLanguageTag(java.lang.String languageTag)

Resets the Builder to match the provided IETF BCP 47 language tag. Discards the 
existing state. Null and the empty string cause the builder to be reset, like 
(|java.util.Locale.Builder|) . Grandfathered tags (see (|java.util.Locale|) ) 
are converted to their canonical form before being processed. Otherwise, the 
language tag must be well-formed (see (|java.util.Locale|) ) or an exception is 
thrown (unlike Locale.forLanguageTag, which just discards ill-formed and 
following portions of the tag). 


    languageTag - the language tag 

    Returns: This builder. 

*java.util.Locale.Builder.setLocale(Locale)*

public |java.util.Locale.Builder| setLocale(java.util.Locale locale)

Resets the Builder to match the provided locale. Existing state is discarded. 

All fields of the locale must be well-formed, see (|java.util.Locale|) . 

Locales with any ill-formed fields cause IllformedLocaleException to be thrown, 
except for the following three cases which are accepted for compatibility 
reasons: Locale("ja", "JP", "JP") is treated as "ja-JP-u-ca-japanese" 
Locale("th", "TH", "TH") is treated as "th-TH-u-nu-thai" Locale("no", "NO", 
"NY") is treated as "nn-NO" 


    locale - the locale 

    Returns: This builder. 

*java.util.Locale.Builder.setRegion(String)*

public |java.util.Locale.Builder| setRegion(java.lang.String region)

Sets the region. If region is null or the empty string, the region in this 
Builder is removed. Otherwise, the region must be well-formed or an exception 
is thrown. 

The typical region value is a two-letter ISO 3166 code or a three-digit UN M.49 
area code. 

The country value in the Locale created by the Builder is always normalized to 
upper case. 


    region - the region 

    Returns: This builder. 

*java.util.Locale.Builder.setScript(String)*

public |java.util.Locale.Builder| setScript(java.lang.String script)

Sets the script. If script is null or the empty string, the script in this 
Builder is removed. Otherwise, the script must be well-formed or an exception 
is thrown. 

The typical script value is a four-letter script code as defined by ISO 15924. 


    script - the script 

    Returns: This builder. 

*java.util.Locale.Builder.setUnicodeLocaleKeyword(String,String)*

public |java.util.Locale.Builder| setUnicodeLocaleKeyword(
  java.lang.String key,
  java.lang.String type)

Sets the Unicode locale keyword type for the given key. If the type is null, 
the Unicode keyword is removed. Otherwise, the key must be non-null and both 
key and type must be well-formed or an exception is thrown. 

Keys and types are converted to lower case. 

Note:Setting the 'u' extension via (|java.util.Locale.Builder|) replaces all 
Unicode locale keywords with those defined in the extension. 


    key - the Unicode locale key 
    type - the Unicode locale type 

    Returns: This builder. 

*java.util.Locale.Builder.setVariant(String)*

public |java.util.Locale.Builder| setVariant(java.lang.String variant)

Sets the variant. If variant is null or the empty string, the variant in this 
Builder is removed. Otherwise, it must consist of one or more well-formed 
subtags, or an exception is thrown. 

Note: This method checks if variant satisfies the IETF BCP 47 variant subtag's 
syntax requirements, and normalizes the value to lowercase letters. However, 
the Locale class does not impose any syntactic restriction on variant, and the 
variant value in Locale is case sensitive. To set such a variant, use a Locale 
constructor. 


    variant - the variant 

    Returns: This builder. 


