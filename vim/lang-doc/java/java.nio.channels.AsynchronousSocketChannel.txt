*java.nio.channels.AsynchronousSocketChannel* *AsynchronousSocketChannel* An asy

public abstract class AsynchronousSocketChannel
  extends    |java.lang.Object|
  implements |java.nio.channels.AsynchronousByteChannel|
             |java.nio.channels.NetworkChannel|

|java.nio.channels.AsynchronousSocketChannel_Description|
|java.nio.channels.AsynchronousSocketChannel_Fields|
|java.nio.channels.AsynchronousSocketChannel_Constructors|
|java.nio.channels.AsynchronousSocketChannel_Methods|

================================================================================

*java.nio.channels.AsynchronousSocketChannel_Constructors*
|java.nio.channels.AsynchronousSocketChannel(AsynchronousChannelProvider)|Initi

*java.nio.channels.AsynchronousSocketChannel_Methods*
|java.nio.channels.AsynchronousSocketChannel.bind(SocketAddress)|
|java.nio.channels.AsynchronousSocketChannel.connect(SocketAddress)|Connects th
|java.nio.channels.AsynchronousSocketChannel.connect(SocketAddress,A,CompletionHandler<Void,?superA>)|
|java.nio.channels.AsynchronousSocketChannel.getRemoteAddress()|Returns the rem
|java.nio.channels.AsynchronousSocketChannel.open()|Opens an asynchronous socke
|java.nio.channels.AsynchronousSocketChannel.open(AsynchronousChannelGroup)|Ope
|java.nio.channels.AsynchronousSocketChannel.provider()|Returns the provider th
|java.nio.channels.AsynchronousSocketChannel.read(ByteBuffer)|
|java.nio.channels.AsynchronousSocketChannel.read(ByteBuffer[],int,int,long,TimeUnit,A,CompletionHandler<Long,?superA>)|
|java.nio.channels.AsynchronousSocketChannel.read(ByteBuffer,A,CompletionHandler<Integer,?superA>)|
|java.nio.channels.AsynchronousSocketChannel.read(ByteBuffer,long,TimeUnit,A,CompletionHandler<Integer,?superA>)|
|java.nio.channels.AsynchronousSocketChannel.setOption(SocketOption<T>,T)|
|java.nio.channels.AsynchronousSocketChannel.shutdownInput()|Shutdown the conne
|java.nio.channels.AsynchronousSocketChannel.shutdownOutput()|Shutdown the conn
|java.nio.channels.AsynchronousSocketChannel.write(ByteBuffer)|
|java.nio.channels.AsynchronousSocketChannel.write(ByteBuffer[],int,int,long,TimeUnit,A,CompletionHandler<Long,?superA>)|
|java.nio.channels.AsynchronousSocketChannel.write(ByteBuffer,A,CompletionHandler<Integer,?superA>)|
|java.nio.channels.AsynchronousSocketChannel.write(ByteBuffer,long,TimeUnit,A,CompletionHandler<Integer,?superA>)|

*java.nio.channels.AsynchronousSocketChannel_Description*

An asynchronous channel for stream-oriented connecting sockets. 

Asynchronous socket channels are created in one of two ways. A 
newly-createdAsynchronousSocketChannelis created by invoking one of the 
open(|java.nio.channels.AsynchronousSocketChannel|) methods defined by this 
class. A newly-created channel is open but not yet connected. A 
connectedAsynchronousSocketChannelis created when a connection is made to the 
socket of an (|java.nio.channels.AsynchronousServerSocketChannel|) . It is not 
possible to create an asynchronous socket channel for an arbitrary, 
pre-existing socket(|java.net.Socket|) . 

A newly-created channel is connected by invoking its 
connect(|java.nio.channels.AsynchronousSocketChannel|) method; once connected, 
a channel remains connected until it is closed. Whether or not a socket channel 
is connected may be determined by invoking its 
getRemoteAddress(|java.nio.channels.AsynchronousSocketChannel|) method. An 
attempt to invoke an I/O operation upon an unconnected channel will cause a 
(|java.nio.channels.NotYetConnectedException|) to be thrown. 

Channels of this type are safe for use by multiple concurrent threads. They 
support concurrent reading and writing, though at most one read operation and 
one write operation can be outstanding at any time. If a thread initiates a 
read operation before a previous read operation has completed then a 
(|java.nio.channels.ReadPendingException|) will be thrown. Similarly, an 
attempt to initiate a write operation before a previous write has completed 
will throw a (|java.nio.channels.WritePendingException|) . 

Socket options are configured using the 
setOption(|java.nio.channels.AsynchronousSocketChannel|) method. Asynchronous 
socket channels support the following options: 



Option Name Description 

SO_SNDBUF(|java.net.StandardSocketOptions|) The size of the socket send buffer 

SO_RCVBUF(|java.net.StandardSocketOptions|) The size of the socket receive 
buffer 

SO_KEEPALIVE(|java.net.StandardSocketOptions|) Keep connection alive 

SO_REUSEADDR(|java.net.StandardSocketOptions|) Re-use address 

TCP_NODELAY(|java.net.StandardSocketOptions|) Disable the Nagle algorithm 



Additional (implementation specific) options may also be supported. 

Timeouts 

The read(|java.nio.channels.AsynchronousSocketChannel|) and 
write(|java.nio.channels.AsynchronousSocketChannel|) methods defined by this 
class allow a timeout to be specified when initiating a read or write 
operation. If the timeout elapses before an operation completes then the 
operation completes with the exception 
(|java.nio.channels.InterruptedByTimeoutException|) . A timeout may leave the 
channel, or the underlying connection, in an inconsistent state. Where the 
implementation cannot guarantee that bytes have not been read from the channel 
then it puts the channel into an implementation specific error state. A 
subsequent attempt to initiate areadoperation causes an unspecified runtime 
exception to be thrown. Similarly if awriteoperation times out and the 
implementation cannot guarantee bytes have not been written to the channel then 
further attempts towriteto the channel cause an unspecified runtime exception 
to be thrown. When a timeout elapses then the state of the 
(|java.nio.ByteBuffer|) , or the sequence of buffers, for the I/O operation is 
not defined. Buffers should be discarded or at least care must be taken to 
ensure that the buffers are not accessed while the channel remains open. All 
methods that accept timeout parameters treat values less than or equal to zero 
to mean that the I/O operation does not timeout. 



*java.nio.channels.AsynchronousSocketChannel(AsynchronousChannelProvider)*

protected AsynchronousSocketChannel(java.nio.channels.spi.AsynchronousChannelProvider provider)

Initializes a new instance of this class. 


*java.nio.channels.AsynchronousSocketChannel.bind(SocketAddress)*

public abstract |java.nio.channels.AsynchronousSocketChannel| bind(java.net.SocketAddress local)
  throws |java.io.IOException|
         




*java.nio.channels.AsynchronousSocketChannel.connect(SocketAddress)*

public abstract |java.util.concurrent.Future|<Void> connect(java.net.SocketAddress remote)

Connects this channel. 

This method initiates an operation to connect this channel. This method behaves 
in exactly the same manner as the 
(|java.nio.channels.AsynchronousSocketChannel|) method except that instead of 
specifying a completion handler, this method returns aFuturerepresenting the 
pending result. TheFuture's get(|java.util.concurrent.Future|) method 
returnsnullon successful completion. 


    remote - The remote address to which this channel is to be connected 

    Returns: A {@code Future} object representing the pending result 

*java.nio.channels.AsynchronousSocketChannel.connect(SocketAddress,A,CompletionHandler<Void,?superA>)*

public abstract void connect(
  java.net.SocketAddress remote,
  A attachment,
  java.nio.channels.CompletionHandler<java.lang.Void, ? super A> handler)

Connects this channel. 

This method initiates an operation to connect this channel. Thehandlerparameter 
is a completion handler that is invoked when the connection is successfully 
established or connection cannot be established. If the connection cannot be 
established then the channel is closed. 

This method performs exactly the same security checks as the 
(|java.net.Socket|) class. That is, if a security manager has been installed 
then this method verifies that its checkConnect(|java.lang.SecurityManager|) 
method permits connecting to the address and port number of the given remote 
endpoint. 


    remote - The remote address to which this channel is to be connected 
    attachment - The object to attach to the I/O operation; can be {@code null} 
    handler - The handler for consuming the result 

*java.nio.channels.AsynchronousSocketChannel.getRemoteAddress()*

public abstract |java.net.SocketAddress| getRemoteAddress()
  throws |java.io.IOException|
         
Returns the remote address to which this channel's socket is connected. 

Where the channel is bound and connected to an Internet Protocol socket address 
then the return value from this method is of type 
(|java.net.InetSocketAddress|) . 



    Returns: The remote address; {@code null} if the channel's socket is not connected 

*java.nio.channels.AsynchronousSocketChannel.open()*

public static |java.nio.channels.AsynchronousSocketChannel| open()
  throws |java.io.IOException|
         
Opens an asynchronous socket channel. 

This method returns an asynchronous socket channel that is bound to the default 
group.This method is equivalent to evaluating the expression: 

open((AsynchronousChannelGroup)null); 



    Returns: A new asynchronous socket channel 

*java.nio.channels.AsynchronousSocketChannel.open(AsynchronousChannelGroup)*

public static |java.nio.channels.AsynchronousSocketChannel| open(java.nio.channels.AsynchronousChannelGroup group)
  throws |java.io.IOException|
         
Opens an asynchronous socket channel. 

The new channel is created by invoking the 
openAsynchronousSocketChannel(|java.nio.channels.spi.AsynchronousChannelProvider|)
method on the (|java.nio.channels.spi.AsynchronousChannelProvider|) that 
created the group. If the group parameter isnullthen the resulting channel is 
created by the system-wide default provider, and bound to the default group. 


    group - The group to which the newly constructed channel should be bound, or {@code 
       null} for the default group 

    Returns: A new asynchronous socket channel 

*java.nio.channels.AsynchronousSocketChannel.provider()*

public final |java.nio.channels.spi.AsynchronousChannelProvider| provider()

Returns the provider that created this channel. 



*java.nio.channels.AsynchronousSocketChannel.read(ByteBuffer)*

public abstract |java.util.concurrent.Future|<Integer> read(java.nio.ByteBuffer dst)





*java.nio.channels.AsynchronousSocketChannel.read(ByteBuffer[],int,int,long,TimeUnit,A,CompletionHandler<Long,?superA>)*

public abstract void read(
  java.nio.ByteBuffer[] dsts,
  int offset,
  int length,
  long timeout,
  java.util.concurrent.TimeUnit unit,
  A attachment,
  java.nio.channels.CompletionHandler<java.lang.Long, ? super A> handler)

Reads a sequence of bytes from this channel into a subsequence of the given 
buffers. This operation, sometimes called a scattering read, is often useful 
when implementing network protocols that group data into segments consisting of 
one or more fixed-length headers followed by a variable-length body. 
Thehandlerparameter is a completion handler that is invoked when the read 
operation completes (or fails). The result passed to the completion handler is 
the number of bytes read or-1if no bytes could be read because the channel has 
reached end-of-stream. 

This method initiates a read of up to r bytes from this channel, where r is the 
total number of bytes remaining in the specified subsequence of the given 
buffer array, that is, 



dsts[offset].remaining() + dsts[offset+1].remaining() + ... + 
dsts[offset+length-1].remaining() 

at the moment that the read is attempted. 

Suppose that a byte sequence of length n is read, where 0<n<=r. Up to the first 
dsts[offset].remaining() bytes of this sequence are transferred into buffer 
dsts[offset], up to the next dsts[offset+1].remaining() bytes are transferred 
into buffer dsts[offset+1], and so forth, until the entire byte sequence is 
transferred into the given buffers. As many bytes as possible are transferred 
into each buffer, hence the final position of each updated buffer, except the 
last updated buffer, is guaranteed to be equal to that buffer's limit. The 
underlying operating system may impose a limit on the number of buffers that 
may be used in an I/O operation. Where the number of buffers (with bytes 
remaining), exceeds this limit, then the I/O operation is performed with the 
maximum number of buffers allowed by the operating system. 

If a timeout is specified and the timeout elapses before the operation 
completes then it completes with the exception 
(|java.nio.channels.InterruptedByTimeoutException|) . Where a timeout occurs, 
and the implementation cannot guarantee that bytes have not been read, or will 
not be read from the channel into the given buffers, then further attempts to 
read from the channel will cause an unspecific runtime exception to be thrown. 


    dsts - The buffers into which bytes are to be transferred 
    offset - The offset within the buffer array of the first buffer into which bytes are to 
       be transferred; must be non-negative and no larger than {@code 
       dsts.length} 
    length - The maximum number of buffers to be accessed; must be non-negative and no 
       larger than {@code dsts.length - offset} 
    timeout - The maximum time for the I/O operation to complete 
    unit - The time unit of the {@code timeout} argument 
    attachment - The object to attach to the I/O operation; can be {@code null} 
    handler - The handler for consuming the result 

*java.nio.channels.AsynchronousSocketChannel.read(ByteBuffer,A,CompletionHandler<Integer,?superA>)*

public final void read(
  java.nio.ByteBuffer dst,
  A attachment,
  java.nio.channels.CompletionHandler<java.lang.Integer, ? super A> handler)





*java.nio.channels.AsynchronousSocketChannel.read(ByteBuffer,long,TimeUnit,A,CompletionHandler<Integer,?superA>)*

public abstract void read(
  java.nio.ByteBuffer dst,
  long timeout,
  java.util.concurrent.TimeUnit unit,
  A attachment,
  java.nio.channels.CompletionHandler<java.lang.Integer, ? super A> handler)

Reads a sequence of bytes from this channel into the given buffer. 

This method initiates an asynchronous read operation to read a sequence of 
bytes from this channel into the given buffer. Thehandlerparameter is a 
completion handler that is invoked when the read operation completes (or 
fails). The result passed to the completion handler is the number of bytes read 
or-1if no bytes could be read because the channel has reached end-of-stream. 

If a timeout is specified and the timeout elapses before the operation 
completes then the operation completes with the exception 
(|java.nio.channels.InterruptedByTimeoutException|) . Where a timeout occurs, 
and the implementation cannot guarantee that bytes have not been read, or will 
not be read from the channel into the given buffer, then further attempts to 
read from the channel will cause an unspecific runtime exception to be thrown. 

Otherwise this method works in the same manner as the 
(|java.nio.channels.AsynchronousByteChannel|) method. 


    dst - The buffer into which bytes are to be transferred 
    timeout - The maximum time for the I/O operation to complete 
    unit - The time unit of the {@code timeout} argument 
    attachment - The object to attach to the I/O operation; can be {@code null} 
    handler - The handler for consuming the result 

*java.nio.channels.AsynchronousSocketChannel.setOption(SocketOption<T>,T)*

public abstract |java.nio.channels.AsynchronousSocketChannel| setOption(
  java.net.SocketOption<T> name,
  T value)
  throws |java.io.IOException|
         




*java.nio.channels.AsynchronousSocketChannel.shutdownInput()*

public abstract |java.nio.channels.AsynchronousSocketChannel| shutdownInput()
  throws |java.io.IOException|
         
Shutdown the connection for reading without closing the channel. 

Once shutdown for reading then further reads on the channel will return-1, the 
end-of-stream indication. If the input side of the connection is already 
shutdown then invoking this method has no effect. The effect on an outstanding 
read operation is system dependent and therefore not specified. The effect, if 
any, when there is data in the socket receive buffer that has not been read, or 
data arrives subsequently, is also system dependent. 



    Returns: 

*java.nio.channels.AsynchronousSocketChannel.shutdownOutput()*

public abstract |java.nio.channels.AsynchronousSocketChannel| shutdownOutput()
  throws |java.io.IOException|
         
Shutdown the connection for writing without closing the channel. 

Once shutdown for writing then further attempts to write to the channel will 
throw (|java.nio.channels.ClosedChannelException|) . If the output side of the 
connection is already shutdown then invoking this method has no effect. The 
effect on an outstanding write operation is system dependent and therefore not 
specified. 



    Returns: 

*java.nio.channels.AsynchronousSocketChannel.write(ByteBuffer)*

public abstract |java.util.concurrent.Future|<Integer> write(java.nio.ByteBuffer src)





*java.nio.channels.AsynchronousSocketChannel.write(ByteBuffer[],int,int,long,TimeUnit,A,CompletionHandler<Long,?superA>)*

public abstract void write(
  java.nio.ByteBuffer[] srcs,
  int offset,
  int length,
  long timeout,
  java.util.concurrent.TimeUnit unit,
  A attachment,
  java.nio.channels.CompletionHandler<java.lang.Long, ? super A> handler)

Writes a sequence of bytes to this channel from a subsequence of the given 
buffers. This operation, sometimes called a gathering write, is often useful 
when implementing network protocols that group data into segments consisting of 
one or more fixed-length headers followed by a variable-length body. 
Thehandlerparameter is a completion handler that is invoked when the write 
operation completes (or fails). The result passed to the completion handler is 
the number of bytes written. 

This method initiates a write of up to r bytes to this channel, where r is the 
total number of bytes remaining in the specified subsequence of the given 
buffer array, that is, 



srcs[offset].remaining() + srcs[offset+1].remaining() + ... + 
srcs[offset+length-1].remaining() 

at the moment that the write is attempted. 

Suppose that a byte sequence of length n is written, where 0<n<=r. Up to the 
first srcs[offset].remaining() bytes of this sequence are written from buffer 
srcs[offset], up to the next srcs[offset+1].remaining() bytes are written from 
buffer srcs[offset+1], and so forth, until the entire byte sequence is written. 
As many bytes as possible are written from each buffer, hence the final 
position of each updated buffer, except the last updated buffer, is guaranteed 
to be equal to that buffer's limit. The underlying operating system may impose 
a limit on the number of buffers that may be used in an I/O operation. Where 
the number of buffers (with bytes remaining), exceeds this limit, then the I/O 
operation is performed with the maximum number of buffers allowed by the 
operating system. 

If a timeout is specified and the timeout elapses before the operation 
completes then it completes with the exception 
(|java.nio.channels.InterruptedByTimeoutException|) . Where a timeout occurs, 
and the implementation cannot guarantee that bytes have not been written, or 
will not be written to the channel from the given buffers, then further 
attempts to write to the channel will cause an unspecific runtime exception to 
be thrown. 


    srcs - The buffers from which bytes are to be retrieved 
    offset - The offset within the buffer array of the first buffer from which bytes are to 
       be retrieved; must be non-negative and no larger than {@code 
       srcs.length} 
    length - The maximum number of buffers to be accessed; must be non-negative and no 
       larger than {@code srcs.length - offset} 
    timeout - The maximum time for the I/O operation to complete 
    unit - The time unit of the {@code timeout} argument 
    attachment - The object to attach to the I/O operation; can be {@code null} 
    handler - The handler for consuming the result 

*java.nio.channels.AsynchronousSocketChannel.write(ByteBuffer,A,CompletionHandler<Integer,?superA>)*

public final void write(
  java.nio.ByteBuffer src,
  A attachment,
  java.nio.channels.CompletionHandler<java.lang.Integer, ? super A> handler)





*java.nio.channels.AsynchronousSocketChannel.write(ByteBuffer,long,TimeUnit,A,CompletionHandler<Integer,?superA>)*

public abstract void write(
  java.nio.ByteBuffer src,
  long timeout,
  java.util.concurrent.TimeUnit unit,
  A attachment,
  java.nio.channels.CompletionHandler<java.lang.Integer, ? super A> handler)

Writes a sequence of bytes to this channel from the given buffer. 

This method initiates an asynchronous write operation to write a sequence of 
bytes to this channel from the given buffer. Thehandlerparameter is a 
completion handler that is invoked when the write operation completes (or 
fails). The result passed to the completion handler is the number of bytes 
written. 

If a timeout is specified and the timeout elapses before the operation 
completes then it completes with the exception 
(|java.nio.channels.InterruptedByTimeoutException|) . Where a timeout occurs, 
and the implementation cannot guarantee that bytes have not been written, or 
will not be written to the channel from the given buffer, then further attempts 
to write to the channel will cause an unspecific runtime exception to be 
thrown. 

Otherwise this method works in the same manner as the 
(|java.nio.channels.AsynchronousByteChannel|) method. 


    src - The buffer from which bytes are to be retrieved 
    timeout - The maximum time for the I/O operation to complete 
    unit - The time unit of the {@code timeout} argument 
    attachment - The object to attach to the I/O operation; can be {@code null} 
    handler - The handler for consuming the result 


