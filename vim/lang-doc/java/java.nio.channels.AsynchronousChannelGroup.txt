*java.nio.channels.AsynchronousChannelGroup* *AsynchronousChannelGroup* A groupi

public abstract class AsynchronousChannelGroup
  extends    |java.lang.Object|

|java.nio.channels.AsynchronousChannelGroup_Description|
|java.nio.channels.AsynchronousChannelGroup_Fields|
|java.nio.channels.AsynchronousChannelGroup_Constructors|
|java.nio.channels.AsynchronousChannelGroup_Methods|

================================================================================

*java.nio.channels.AsynchronousChannelGroup_Constructors*
|java.nio.channels.AsynchronousChannelGroup(AsynchronousChannelProvider)|Initia

*java.nio.channels.AsynchronousChannelGroup_Methods*
|java.nio.channels.AsynchronousChannelGroup.awaitTermination(long,TimeUnit)|Awa
|java.nio.channels.AsynchronousChannelGroup.isShutdown()|Tells whether or not t
|java.nio.channels.AsynchronousChannelGroup.isTerminated()|Tells whether or not
|java.nio.channels.AsynchronousChannelGroup.provider()|Returns the provider tha
|java.nio.channels.AsynchronousChannelGroup.shutdown()|Initiates an orderly shu
|java.nio.channels.AsynchronousChannelGroup.shutdownNow()|Shuts down the group 
|java.nio.channels.AsynchronousChannelGroup.withCachedThreadPool(ExecutorService,int)|
|java.nio.channels.AsynchronousChannelGroup.withFixedThreadPool(int,ThreadFactory)|
|java.nio.channels.AsynchronousChannelGroup.withThreadPool(ExecutorService)|Cre

*java.nio.channels.AsynchronousChannelGroup_Description*

A grouping of asynchronous channels for the purpose of resource sharing. 

An asynchronous channel group encapsulates the mechanics required to handle the 
completion of I/O operations initiated by asynchronous 
channels(|java.nio.channels.AsynchronousChannel|) that are bound to the group. 
A group has an associated thread pool to which tasks are submitted to handle 
I/O events and dispatch to 
completion-handlers(|java.nio.channels.CompletionHandler|) that consume the 
result of asynchronous operations performed on channels in the group. In 
addition to handling I/O events, the pooled threads may also execute other 
tasks required to support the execution of asynchronous I/O operations. 

An asynchronous channel group is created by invoking the 
withFixedThreadPool(|java.nio.channels.AsynchronousChannelGroup|) or 
withCachedThreadPool(|java.nio.channels.AsynchronousChannelGroup|) methods 
defined here. Channels are bound to a group by specifying the group when 
constructing the channel. The associated thread pool is owned by the group; 
termination of the group results in the shutdown of the associated thread pool. 

In addition to groups created explicitly, the Java virtual machine maintains a 
system-wide default group that is constructed automatically. Asynchronous 
channels that do not specify a group at construction time are bound to the 
default group. The default group has an associated thread pool that creates new 
threads as needed. The default group may be configured by means of system 
properties defined in the table below. Where the 
ThreadFactory(|java.util.concurrent.ThreadFactory|) for the default group is 
not configured then the pooled threads of the default group are 
daemon(|java.lang.Thread|) threads. 



System property Description 



java.nio.channels.DefaultThreadPool.threadFactory The value of this property is 
taken to be the fully-qualified name of a concrete 
ThreadFactory(|java.util.concurrent.ThreadFactory|) class. The class is loaded 
using the system class loader and instantiated. The factory's 
newThread(|java.util.concurrent.ThreadFactory|) method is invoked to create 
each thread for the default group's thread pool. If the process to load and 
instantiate the value of the property fails then an unspecified error is thrown 
during the construction of the default group. 

java.nio.channels.DefaultThreadPool.initialSize The value of 
theinitialSizeparameter for the default group (see 
withCachedThreadPool(|java.nio.channels.AsynchronousChannelGroup|) ). The value 
of the property is taken to be theStringrepresentation of anIntegerthat is the 
initial size parameter. If the value cannot be parsed as anIntegerit causes an 
unspecified error to be thrown during the construction of the default group. 



Threading 

The completion handler for an I/O operation initiated on a channel bound to a 
group is guaranteed to be invoked by one of the pooled threads in the group. 
This ensures that the completion handler is run by a thread with the expected 
identity. 

Where an I/O operation completes immediately, and the initiating thread is one 
of the pooled threads in the group then the completion handler may be invoked 
directly by the initiating thread. To avoid stack overflow, an implementation 
may impose a limit as to the number of activations on the thread stack. Some 
I/O operations may prohibit invoking the completion handler directly by the 
initiating thread (see 
accept(|java.nio.channels.AsynchronousServerSocketChannel|) ). 

Shutdown and Termination 

The shutdown(|java.nio.channels.AsynchronousChannelGroup|) method is used to 
initiate an orderly shutdown of a group. An orderly shutdown marks the group as 
shutdown; further attempts to construct a channel that binds to the group will 
throw (|java.nio.channels.ShutdownChannelGroupException|) . Whether or not a 
group is shutdown can be tested using the 
isShutdown(|java.nio.channels.AsynchronousChannelGroup|) method. Once shutdown, 
the group terminates when all asynchronous channels that are bound to the group 
are closed, all actively executing completion handlers have run to completion, 
and resources used by the group are released. No attempt is made to stop or 
interrupt threads that are executing completion handlers. The 
isTerminated(|java.nio.channels.AsynchronousChannelGroup|) method is used to 
test if the group has terminated, and the 
awaitTermination(|java.nio.channels.AsynchronousChannelGroup|) method can be 
used to block until the group has terminated. 

The shutdownNow(|java.nio.channels.AsynchronousChannelGroup|) method can be 
used to initiate a forceful shutdown of the group. In addition to the actions 
performed by an orderly shutdown, theshutdownNowmethod closes all open channels 
in the group as if by invoking the 
close(|java.nio.channels.AsynchronousChannel|) method. 



*java.nio.channels.AsynchronousChannelGroup(AsynchronousChannelProvider)*

protected AsynchronousChannelGroup(java.nio.channels.spi.AsynchronousChannelProvider provider)

Initialize a new instance of this class. 

    provider - The asynchronous channel provider for this group 

*java.nio.channels.AsynchronousChannelGroup.awaitTermination(long,TimeUnit)*

public abstract boolean awaitTermination(
  long timeout,
  java.util.concurrent.TimeUnit unit)
  throws |java.lang.InterruptedException|
         
Awaits termination of the group. 

This method blocks until the group has terminated, or the timeout occurs, or 
the current thread is interrupted, whichever happens first. 


    timeout - The maximum time to wait, or zero or less to not wait 
    unit - The time unit of the timeout argument 

    Returns: {@code true} if the group has terminated; {@code false} if the timeout elapsed 
             before termination 

*java.nio.channels.AsynchronousChannelGroup.isShutdown()*

public abstract boolean isShutdown()

Tells whether or not this asynchronous channel group is shutdown. 



    Returns: {@code true} if this asynchronous channel group is shutdown or has been marked 
             for shutdown. 

*java.nio.channels.AsynchronousChannelGroup.isTerminated()*

public abstract boolean isTerminated()

Tells whether or not this group has terminated. 

Where this method returnstrue, then the associated thread pool has also 
terminated(|java.util.concurrent.ExecutorService|) . 



    Returns: {@code true} if this group has terminated 

*java.nio.channels.AsynchronousChannelGroup.provider()*

public final |java.nio.channels.spi.AsynchronousChannelProvider| provider()

Returns the provider that created this channel group. 



    Returns: The provider that created this channel group 

*java.nio.channels.AsynchronousChannelGroup.shutdown()*

public abstract void shutdown()

Initiates an orderly shutdown of the group. 

This method marks the group as shutdown. Further attempts to construct channel 
that binds to this group will throw 
(|java.nio.channels.ShutdownChannelGroupException|) . The group terminates when 
all asynchronous channels in the group are closed, all actively executing 
completion handlers have run to completion, and all resources have been 
released. This method has no effect if the group is already shutdown. 



*java.nio.channels.AsynchronousChannelGroup.shutdownNow()*

public abstract void shutdownNow()
  throws |java.io.IOException|
         
Shuts down the group and closes all open channels in the group. 

In addition to the actions performed by the 
shutdown(|java.nio.channels.AsynchronousChannelGroup|) method, this method 
invokes the close(|java.nio.channels.AsynchronousChannel|) method on all open 
channels in the group. This method does not attempt to stop or interrupt 
threads that are executing completion handlers. The group terminates when all 
actively executing completion handlers have run to completion and all resources 
have been released. This method may be invoked at any time. If some other 
thread has already invoked it, then another invocation will block until the 
first invocation is complete, after which it will return without effect. 



*java.nio.channels.AsynchronousChannelGroup.withCachedThreadPool(ExecutorService,int)*

public static |java.nio.channels.AsynchronousChannelGroup| withCachedThreadPool(
  java.util.concurrent.ExecutorService executor,
  int initialSize)
  throws |java.io.IOException|
         
Creates an asynchronous channel group with a given thread pool that creates new 
threads as needed. 

Theexecutorparameter is anExecutorServicethat creates new threads as needed to 
execute tasks that are submitted to handle I/O events and dispatch completion 
results for operations initiated on asynchronous channels in the group. It may 
reuse previously constructed threads when they are available. 

TheinitialSizeparameter may be used by the implementation as a hint as to the 
initial number of tasks it may submit. For example, it may be used to indictae 
the initial number of threads that wait on I/O events. 

The executor is intended to be used exclusively by the resulting asynchronous 
channel group. Termination of the group results in the orderly 
shutdown(|java.util.concurrent.ExecutorService|) of the executor service. 
Shutting down the executor service by other means results in unspecified 
behavior. 

The group is created by invoking the 
openAsynchronousChannelGroup(ExecutorService,int)(|java.nio.channels.spi.AsynchronousChannelProvider|)
method of the system-wide default 
(|java.nio.channels.spi.AsynchronousChannelProvider|) object. 


    executor - The thread pool for the resulting group 
    initialSize - A value {@code >=0} or a negative value for implementation specific default 

    Returns: A new asynchronous channel group 

*java.nio.channels.AsynchronousChannelGroup.withFixedThreadPool(int,ThreadFactory)*

public static |java.nio.channels.AsynchronousChannelGroup| withFixedThreadPool(
  int nThreads,
  java.util.concurrent.ThreadFactory threadFactory)
  throws |java.io.IOException|
         
Creates an asynchronous channel group with a fixed thread pool. 

The resulting asynchronous channel group reuses a fixed number of threads. At 
any point, at mostnThreadsthreads will be active processing tasks that are 
submitted to handle I/O events and dispatch completion results for operations 
initiated on asynchronous channels in the group. 

The group is created by invoking the 
openAsynchronousChannelGroup(int,ThreadFactory)(|java.nio.channels.spi.AsynchronousChannelProvider|)
method of the system-wide default 
(|java.nio.channels.spi.AsynchronousChannelProvider|) object. 


    nThreads - The number of threads in the pool 
    threadFactory - The factory to use when creating new threads 

    Returns: A new asynchronous channel group 

*java.nio.channels.AsynchronousChannelGroup.withThreadPool(ExecutorService)*

public static |java.nio.channels.AsynchronousChannelGroup| withThreadPool(java.util.concurrent.ExecutorService executor)
  throws |java.io.IOException|
         
Creates an asynchronous channel group with a given thread pool. 

Theexecutorparameter is anExecutorServicethat executes tasks submitted to 
dispatch completion results for operations initiated on asynchronous channels 
in the group. 

Care should be taken when configuring the executor service. It should support 
direct handoff or unbounded queuing of submitted tasks, and the thread that 
invokes the execute(|java.util.concurrent.ExecutorService|) method should never 
invoke the task directly. An implementation may mandate additional constraints. 

The executor is intended to be used exclusively by the resulting asynchronous 
channel group. Termination of the group results in the orderly 
shutdown(|java.util.concurrent.ExecutorService|) of the executor service. 
Shutting down the executor service by other means results in unspecified 
behavior. 

The group is created by invoking the 
openAsynchronousChannelGroup(ExecutorService,int)(|java.nio.channels.spi.AsynchronousChannelProvider|)
method of the system-wide default 
(|java.nio.channels.spi.AsynchronousChannelProvider|) object with 
aninitialSizeof0. 


    executor - The thread pool for the resulting group 

    Returns: A new asynchronous channel group 


