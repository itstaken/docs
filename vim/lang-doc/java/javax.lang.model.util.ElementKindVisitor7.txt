*javax.lang.model.util.ElementKindVisitor7* *ElementKindVisitor7* A visitor of p

public class ElementKindVisitor7<R,P>
  extends    |javax.lang.model.util.ElementKindVisitor6|

|javax.lang.model.util.ElementKindVisitor7_Description|
|javax.lang.model.util.ElementKindVisitor7_Fields|
|javax.lang.model.util.ElementKindVisitor7_Constructors|
|javax.lang.model.util.ElementKindVisitor7_Methods|

================================================================================

*javax.lang.model.util.ElementKindVisitor7_Constructors*
|javax.lang.model.util.ElementKindVisitor7()|Constructor for concrete subclasse
|javax.lang.model.util.ElementKindVisitor7(R)|Constructor for concrete subclass

*javax.lang.model.util.ElementKindVisitor7_Methods*
|javax.lang.model.util.ElementKindVisitor7.visitVariableAsResourceVariable(VariableElement,P)|

*javax.lang.model.util.ElementKindVisitor7_Description*

A visitor of program elements based on their 
kind(|javax.lang.model.element.ElementKind|) with default behavior appropriate 
for the RELEASE_7(|javax.lang.model.SourceVersion|) source version. For 
elements(|javax.lang.model.element.Element|) XYZ that may have more than one 
kind, the visitXYZ methods in this class delegate to the visitXYZKind method 
corresponding to the first argument's kind. The visitXYZKind methods call 
defaultAction(|javax.lang.model.util.ElementKindVisitor7|) , passing their 
arguments todefaultAction's corresponding parameters. 

Methods in this class may be overridden subject to their general contract. Note 
that annotating methods in concrete subclasses with 
@Override(|java.lang.Override|) will help ensure that methods are overridden as 
intended. 

WARNING: TheElementVisitorinterface implemented by this class may have methods 
added to it or theElementKindenumused in this case may have constants added to 
it in the future to accommodate new, currently unknown, language structures 
added to future versions of the Java programming language. Therefore, methods 
whose names begin with"visit"may be added to this class in the future; to avoid 
incompatibilities, classes which extend this class should not declare any 
instance methods with names beginning with"visit". 

When such a new visit method is added, the default implementation in this class 
will be to call the visitUnknown(|javax.lang.model.util.ElementKindVisitor7|) 
method. A new abstract element kind visitor class will also be introduced to 
correspond to the new language level; this visitor will have different default 
behavior for the visit method in question. When the new visitor is introduced, 
all or portions of this visitor may be deprecated. 



*javax.lang.model.util.ElementKindVisitor7()*

protected ElementKindVisitor7()

Constructor for concrete subclasses; usesnullfor the default value. 


*javax.lang.model.util.ElementKindVisitor7(R)*

protected ElementKindVisitor7(R defaultValue)

Constructor for concrete subclasses; uses the argument for the default value. 

    defaultValue - the value to assign to {@link #DEFAULT_VALUE} 

*javax.lang.model.util.ElementKindVisitor7.visitVariableAsResourceVariable(VariableElement,P)*

public |R| visitVariableAsResourceVariable(
  javax.lang.model.element.VariableElement e,
  P p)

Visits aRESOURCE_VARIABLEvariable element by callingdefaultAction. 


    e - {@inheritDoc} 
    p - {@inheritDoc} 

    Returns: the result of {@code defaultAction} 


