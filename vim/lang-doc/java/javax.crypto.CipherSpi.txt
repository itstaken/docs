*javax.crypto.CipherSpi* *CipherSpi* This class defines the Service Provider Int

public abstract class CipherSpi
  extends    |java.lang.Object|

|javax.crypto.CipherSpi_Description|
|javax.crypto.CipherSpi_Fields|
|javax.crypto.CipherSpi_Constructors|
|javax.crypto.CipherSpi_Methods|

================================================================================

*javax.crypto.CipherSpi_Constructors*
|javax.crypto.CipherSpi()|

*javax.crypto.CipherSpi_Methods*
|javax.crypto.CipherSpi.engineDoFinal(byte[],int,int)|Encrypts or decrypts data
|javax.crypto.CipherSpi.engineDoFinal(byte[],int,int,byte[],int)|Encrypts or de
|javax.crypto.CipherSpi.engineDoFinal(ByteBuffer,ByteBuffer)|Encrypts or decryp
|javax.crypto.CipherSpi.engineGetBlockSize()|Returns the block size (in bytes).
|javax.crypto.CipherSpi.engineGetIV()|Returns the initialization vector (IV) in
|javax.crypto.CipherSpi.engineGetKeySize(Key)|Returns the key size of the given
|javax.crypto.CipherSpi.engineGetOutputSize(int)|Returns the length in bytes th
|javax.crypto.CipherSpi.engineGetParameters()|Returns the parameters used with 
|javax.crypto.CipherSpi.engineInit(int,Key,AlgorithmParameterSpec,SecureRandom)|
|javax.crypto.CipherSpi.engineInit(int,Key,AlgorithmParameters,SecureRandom)|In
|javax.crypto.CipherSpi.engineInit(int,Key,SecureRandom)|Initializes this ciphe
|javax.crypto.CipherSpi.engineSetMode(String)|Sets the mode of this cipher.
|javax.crypto.CipherSpi.engineSetPadding(String)|Sets the padding mechanism of 
|javax.crypto.CipherSpi.engineUnwrap(byte[],String,int)|Unwrap a previously wra
|javax.crypto.CipherSpi.engineUpdate(byte[],int,int)|Continues a multiple-part 
|javax.crypto.CipherSpi.engineUpdate(byte[],int,int,byte[],int)|Continues a mul
|javax.crypto.CipherSpi.engineUpdate(ByteBuffer,ByteBuffer)|Continues a multipl
|javax.crypto.CipherSpi.engineUpdateAAD(byte[],int,int)|Continues a multi-part 
|javax.crypto.CipherSpi.engineUpdateAAD(ByteBuffer)|Continues a multi-part upda
|javax.crypto.CipherSpi.engineWrap(Key)|Wrap a key.

*javax.crypto.CipherSpi_Description*

This class defines the Service Provider Interface (SPI) for the Cipher class. 
All the abstract methods in this class must be implemented by each 
cryptographic service provider who wishes to supply the implementation of a 
particular cipher algorithm. 

In order to create an instance of Cipher, which encapsulates an instance of 
this CipherSpi class, an application calls one of the 
getInstance(|javax.crypto.Cipher|) factory methods of the 
Cipher(|javax.crypto.Cipher|) engine class and specifies the requested 
transformation. Optionally, the application may also specify the name of a 
provider. 

A transformation is a string that describes the operation (or set of 
operations) to be performed on the given input, to produce some output. A 
transformation always includes the name of a cryptographic algorithm (e.g., 
DES), and may be followed by a feedback mode and padding scheme. 

A transformation is of the form: 

"algorithm/mode/padding" or 

"algorithm" 

(in the latter case, provider-specific default values for the mode and padding 
scheme are used). For example, the following is a valid transformation: 



Cipher c = Cipher.getInstance("DES/CBC/PKCS5Padding"); 

A provider may supply a separate class for each combination of 
algorithm/mode/padding, or may decide to provide more generic classes 
representing sub-transformations corresponding to algorithm or algorithm/mode 
or algorithm//padding (note the double slashes), in which case the requested 
mode and/or padding are set automatically by the getInstance methods of Cipher, 
which invoke the engineSetMode(|javax.crypto.CipherSpi|) and 
engineSetPadding(|javax.crypto.CipherSpi|) methods of the provider's subclass 
of CipherSpi. 

A Cipher property in a provider master class may have one of the following 
formats: 





// provider's subclass of "CipherSpi" implements "algName" with // pluggable 
mode and padding Cipher.algName 



// provider's subclass of "CipherSpi" implements "algName" in the // specified 
"mode", with pluggable padding Cipher.algName/mode 



// provider's subclass of "CipherSpi" implements "algName" with the // 
specified "padding", with pluggable mode Cipher.algName//padding 



// provider's subclass of "CipherSpi" implements "algName" with the // 
specified "mode" and "padding" Cipher.algName/mode/padding 



For example, a provider may supply a subclass of CipherSpi that implements 
DES/ECB/PKCS5Padding, one that implements DES/CBC/PKCS5Padding, one that 
implements DES/CFB/PKCS5Padding, and yet another one that implements 
DES/OFB/PKCS5Padding. That provider would have the following Cipher properties 
in its master class: 





Cipher.DES/ECB/PKCS5Padding 



Cipher.DES/CBC/PKCS5Padding 



Cipher.DES/CFB/PKCS5Padding 



Cipher.DES/OFB/PKCS5Padding 



Another provider may implement a class for each of the above modes (i.e., one 
class for ECB, one for CBC, one for CFB, and one for OFB), one class for 
PKCS5Padding, and a generic DES class that subclasses from CipherSpi. That 
provider would have the following Cipher properties in its master class: 





Cipher.DES 



The getInstance factory method of the Cipher engine class follows these rules 
in order to instantiate a provider's implementation of CipherSpi for a 
transformation of the form "algorithm": 



Check if the provider has registered a subclass of CipherSpi for the specified 
"algorithm". If the answer is YES, instantiate this class, for whose mode and 
padding scheme default values (as supplied by the provider) are used. If the 
answer is NO, throw a NoSuchAlgorithmException exception. 

The getInstance factory method of the Cipher engine class follows these rules 
in order to instantiate a provider's implementation of CipherSpi for a 
transformation of the form "algorithm/mode/padding": 



Check if the provider has registered a subclass of CipherSpi for the specified 
"algorithm/mode/padding" transformation. If the answer is YES, instantiate it. 
If the answer is NO, go to the next step. 

Check if the provider has registered a subclass of CipherSpi for the 
sub-transformation "algorithm/mode". If the answer is YES, instantiate it, and 
call engineSetPadding(padding) on the new instance. If the answer is NO, go to 
the next step. 

Check if the provider has registered a subclass of CipherSpi for the 
sub-transformation "algorithm//padding" (note the double slashes). If the 
answer is YES, instantiate it, and call engineSetMode(mode) on the new 
instance. If the answer is NO, go to the next step. 

Check if the provider has registered a subclass of CipherSpi for the 
sub-transformation "algorithm". If the answer is YES, instantiate it, and call 
engineSetMode(mode) and engineSetPadding(padding) on the new instance. If the 
answer is NO, throw a NoSuchAlgorithmException exception. 



*javax.crypto.CipherSpi()*

public CipherSpi()




*javax.crypto.CipherSpi.engineDoFinal(byte[],int,int)*

protected abstract byte[] engineDoFinal(
  byte[] input,
  int inputOffset,
  int inputLen)
  throws |javax.crypto.BadPaddingException|
         |javax.crypto.IllegalBlockSizeException|
         
Encrypts or decrypts data in a single-part operation, or finishes a 
multiple-part operation. The data is encrypted or decrypted, depending on how 
this cipher was initialized. 

The first inputLen bytes in the input buffer, starting at inputOffset 
inclusive, and any input bytes that may have been buffered during a previous 
update operation, are processed, with padding (if requested) being applied. If 
an AEAD mode such as GCM/CCM is being used, the authentication tag is appended 
in the case of encryption, or verified in the case of decryption. The result is 
stored in a new buffer. 

Upon finishing, this method resets this cipher object to the state it was in 
when previously initialized via a call to engineInit. That is, the object is 
reset and available to encrypt or decrypt (depending on the operation mode that 
was specified in the call to engineInit) more data. 

Note: if any exception is thrown, this cipher object may need to be reset 
before it can be used again. 


    input - the input buffer 
    inputOffset - the offset in input where the input starts 
    inputLen - the input length 

    Returns: the new buffer with the result 

*javax.crypto.CipherSpi.engineDoFinal(byte[],int,int,byte[],int)*

protected abstract int engineDoFinal(
  byte[] input,
  int inputOffset,
  int inputLen,
  byte[] output,
  int outputOffset)
  throws |javax.crypto.BadPaddingException|
         |javax.crypto.IllegalBlockSizeException|
         |javax.crypto.ShortBufferException|
         
Encrypts or decrypts data in a single-part operation, or finishes a 
multiple-part operation. The data is encrypted or decrypted, depending on how 
this cipher was initialized. 

The first inputLen bytes in the input buffer, starting at inputOffset 
inclusive, and any input bytes that may have been buffered during a previous 
update operation, are processed, with padding (if requested) being applied. If 
an AEAD mode such as GCM/CCM is being used, the authentication tag is appended 
in the case of encryption, or verified in the case of decryption. The result is 
stored in the output buffer, starting at outputOffset inclusive. 

If the output buffer is too small to hold the result, a ShortBufferException is 
thrown. 

Upon finishing, this method resets this cipher object to the state it was in 
when previously initialized via a call to engineInit. That is, the object is 
reset and available to encrypt or decrypt (depending on the operation mode that 
was specified in the call to engineInit) more data. 

Note: if any exception is thrown, this cipher object may need to be reset 
before it can be used again. 


    input - the input buffer 
    inputOffset - the offset in input where the input starts 
    inputLen - the input length 
    output - the buffer for the result 
    outputOffset - the offset in output where the result is stored 

    Returns: the number of bytes stored in output 

*javax.crypto.CipherSpi.engineDoFinal(ByteBuffer,ByteBuffer)*

protected int engineDoFinal(
  java.nio.ByteBuffer input,
  java.nio.ByteBuffer output)
  throws |javax.crypto.BadPaddingException|
         |javax.crypto.IllegalBlockSizeException|
         |javax.crypto.ShortBufferException|
         
Encrypts or decrypts data in a single-part operation, or finishes a 
multiple-part operation. The data is encrypted or decrypted, depending on how 
this cipher was initialized. 

All input.remaining() bytes starting at input.position() are processed. If an 
AEAD mode such as GCM/CCM is being used, the authentication tag is appended in 
the case of encryption, or verified in the case of decryption. The result is 
stored in the output buffer. Upon return, the input buffer's position will be 
equal to its limit; its limit will not have changed. The output buffer's 
position will have advanced by n, where n is the value returned by this method; 
the output buffer's limit will not have changed. 

If output.remaining() bytes are insufficient to hold the result, a 
ShortBufferException is thrown. 

Upon finishing, this method resets this cipher object to the state it was in 
when previously initialized via a call to engineInit. That is, the object is 
reset and available to encrypt or decrypt (depending on the operation mode that 
was specified in the call to engineInit) more data. 

Note: if any exception is thrown, this cipher object may need to be reset 
before it can be used again. 

Subclasses should consider overriding this method if they can process 
ByteBuffers more efficiently than byte arrays. 


    input - the input ByteBuffer 
    output - the output ByteByffer 

    Returns: the number of bytes stored in output 

*javax.crypto.CipherSpi.engineGetBlockSize()*

protected abstract int engineGetBlockSize()

Returns the block size (in bytes). 



    Returns: the block size (in bytes), or 0 if the underlying algorithm is not a block 
             cipher 

*javax.crypto.CipherSpi.engineGetIV()*

protected abstract byte[] engineGetIV()

Returns the initialization vector (IV) in a new buffer. 

This is useful in the context of password-based encryption or decryption, where 
the IV is derived from a user-provided passphrase. 



    Returns: the initialization vector in a new buffer, or null if the underlying algorithm 
             does not use an IV, or if the IV has not yet been set. 

*javax.crypto.CipherSpi.engineGetKeySize(Key)*

protected int engineGetKeySize(java.security.Key key)
  throws |java.security.InvalidKeyException|
         
Returns the key size of the given key object in bits. This concrete method has 
been added to this previously-defined abstract class. It throws an 
UnsupportedOperationException if it is not overridden by the provider. 


    key - the key object. 

    Returns: the key size of the given key object. 

*javax.crypto.CipherSpi.engineGetOutputSize(int)*

protected abstract int engineGetOutputSize(int inputLen)

Returns the length in bytes that an output buffer would need to be in order to 
hold the result of the next update or doFinal operation, given the input length 
inputLen (in bytes). 

This call takes into account any unprocessed (buffered) data from a previous 
update call, padding, and AEAD tagging. 

The actual output length of the next update or doFinal call may be smaller than 
the length returned by this method. 


    inputLen - the input length (in bytes) 

    Returns: the required output buffer size (in bytes) 

*javax.crypto.CipherSpi.engineGetParameters()*

protected abstract |java.security.AlgorithmParameters| engineGetParameters()

Returns the parameters used with this cipher. 

The returned parameters may be the same that were used to initialize this 
cipher, or may contain a combination of default and random parameter values 
used by the underlying cipher implementation if this cipher requires algorithm 
parameters but was not initialized with any. 



    Returns: the parameters used with this cipher, or null if this cipher does not use any 
             parameters. 

*javax.crypto.CipherSpi.engineInit(int,Key,AlgorithmParameterSpec,SecureRandom)*

protected abstract void engineInit(
  int opmode,
  java.security.Key key,
  java.security.spec.AlgorithmParameterSpec params,
  java.security.SecureRandom random)
  throws |java.security.InvalidAlgorithmParameterException|
         |java.security.InvalidKeyException|
         
Initializes this cipher with a key, a set of algorithm parameters, and a source 
of randomness. 

The cipher is initialized for one of the following four operations: encryption, 
decryption, key wrapping or key unwrapping, depending on the value of opmode. 

If this cipher requires any algorithm parameters and params is null, the 
underlying cipher implementation is supposed to generate the required 
parameters itself (using provider-specific default or random values) if it is 
being initialized for encryption or key wrapping, and raise an 
InvalidAlgorithmParameterException if it is being initialized for decryption or 
key unwrapping. The generated parameters can be retrieved using 
engineGetParameters(|javax.crypto.CipherSpi|) or 
engineGetIV(|javax.crypto.CipherSpi|) (if the parameter is an IV). 

If this cipher requires algorithm parameters that cannot be derived from the 
input parameters, and there are no reasonable provider-specific default values, 
initialization will necessarily fail. 

If this cipher (including its underlying feedback or padding scheme) requires 
any random bytes (e.g., for parameter generation), it will get them from 
random. 

Note that when a Cipher object is initialized, it loses all previously-acquired 
state. In other words, initializing a Cipher is equivalent to creating a new 
instance of that Cipher and initializing it. 


    opmode - the operation mode of this cipher (this is one of the following: ENCRYPT_MODE, 
       DECRYPT_MODE, WRAP_MODE or UNWRAP_MODE) 
    key - the encryption key 
    params - the algorithm parameters 
    random - the source of randomness 

*javax.crypto.CipherSpi.engineInit(int,Key,AlgorithmParameters,SecureRandom)*

protected abstract void engineInit(
  int opmode,
  java.security.Key key,
  java.security.AlgorithmParameters params,
  java.security.SecureRandom random)
  throws |java.security.InvalidAlgorithmParameterException|
         |java.security.InvalidKeyException|
         
Initializes this cipher with a key, a set of algorithm parameters, and a source 
of randomness. 

The cipher is initialized for one of the following four operations: encryption, 
decryption, key wrapping or key unwrapping, depending on the value of opmode. 

If this cipher requires any algorithm parameters and params is null, the 
underlying cipher implementation is supposed to generate the required 
parameters itself (using provider-specific default or random values) if it is 
being initialized for encryption or key wrapping, and raise an 
InvalidAlgorithmParameterException if it is being initialized for decryption or 
key unwrapping. The generated parameters can be retrieved using 
engineGetParameters(|javax.crypto.CipherSpi|) or 
engineGetIV(|javax.crypto.CipherSpi|) (if the parameter is an IV). 

If this cipher requires algorithm parameters that cannot be derived from the 
input parameters, and there are no reasonable provider-specific default values, 
initialization will necessarily fail. 

If this cipher (including its underlying feedback or padding scheme) requires 
any random bytes (e.g., for parameter generation), it will get them from 
random. 

Note that when a Cipher object is initialized, it loses all previously-acquired 
state. In other words, initializing a Cipher is equivalent to creating a new 
instance of that Cipher and initializing it. 


    opmode - the operation mode of this cipher (this is one of the following: ENCRYPT_MODE, 
       DECRYPT_MODE, WRAP_MODE or UNWRAP_MODE) 
    key - the encryption key 
    params - the algorithm parameters 
    random - the source of randomness 

*javax.crypto.CipherSpi.engineInit(int,Key,SecureRandom)*

protected abstract void engineInit(
  int opmode,
  java.security.Key key,
  java.security.SecureRandom random)
  throws |java.security.InvalidKeyException|
         
Initializes this cipher with a key and a source of randomness. 

The cipher is initialized for one of the following four operations: encryption, 
decryption, key wrapping or key unwrapping, depending on the value of opmode. 

If this cipher requires any algorithm parameters that cannot be derived from 
the given key, the underlying cipher implementation is supposed to generate the 
required parameters itself (using provider-specific default or random values) 
if it is being initialized for encryption or key wrapping, and raise an 
InvalidKeyException if it is being initialized for decryption or key 
unwrapping. The generated parameters can be retrieved using 
engineGetParameters(|javax.crypto.CipherSpi|) or 
engineGetIV(|javax.crypto.CipherSpi|) (if the parameter is an IV). 

If this cipher requires algorithm parameters that cannot be derived from the 
input parameters, and there are no reasonable provider-specific default values, 
initialization will necessarily fail. 

If this cipher (including its underlying feedback or padding scheme) requires 
any random bytes (e.g., for parameter generation), it will get them from 
random. 

Note that when a Cipher object is initialized, it loses all previously-acquired 
state. In other words, initializing a Cipher is equivalent to creating a new 
instance of that Cipher and initializing it. 


    opmode - the operation mode of this cipher (this is one of the following: ENCRYPT_MODE, 
       DECRYPT_MODE, WRAP_MODE or UNWRAP_MODE) 
    key - the encryption key 
    random - the source of randomness 

*javax.crypto.CipherSpi.engineSetMode(String)*

protected abstract void engineSetMode(java.lang.String mode)
  throws |java.security.NoSuchAlgorithmException|
         
Sets the mode of this cipher. 


    mode - the cipher mode 

*javax.crypto.CipherSpi.engineSetPadding(String)*

protected abstract void engineSetPadding(java.lang.String padding)
  throws |javax.crypto.NoSuchPaddingException|
         
Sets the padding mechanism of this cipher. 


    padding - the padding mechanism 

*javax.crypto.CipherSpi.engineUnwrap(byte[],String,int)*

protected |java.security.Key| engineUnwrap(
  byte[] wrappedKey,
  java.lang.String wrappedKeyAlgorithm,
  int wrappedKeyType)
  throws |java.security.InvalidKeyException|
         |java.security.NoSuchAlgorithmException|
         
Unwrap a previously wrapped key. 

This concrete method has been added to this previously-defined abstract class. 
(For backwards compatibility, it cannot be abstract.) It may be overridden by a 
provider to unwrap a previously wrapped key. Such an override is expected to 
throw an InvalidKeyException if the given wrapped key cannot be unwrapped. If 
this method is not overridden, it always throws an 
UnsupportedOperationException. 


    wrappedKey - the key to be unwrapped. 
    wrappedKeyAlgorithm - the algorithm associated with the wrapped key. 
    wrappedKeyType - the type of the wrapped key. This is one of SECRET_KEY, PRIVATE_KEY, or 
       PUBLIC_KEY. 

    Returns: the unwrapped key. 

*javax.crypto.CipherSpi.engineUpdate(byte[],int,int)*

protected abstract byte[] engineUpdate(
  byte[] input,
  int inputOffset,
  int inputLen)

Continues a multiple-part encryption or decryption operation (depending on how 
this cipher was initialized), processing another data part. 

The first inputLen bytes in the input buffer, starting at inputOffset 
inclusive, are processed, and the result is stored in a new buffer. 


    input - the input buffer 
    inputOffset - the offset in input where the input starts 
    inputLen - the input length 

    Returns: the new buffer with the result, or null if the underlying cipher is a block 
             cipher and the input data is too short to result in a new block. 

*javax.crypto.CipherSpi.engineUpdate(byte[],int,int,byte[],int)*

protected abstract int engineUpdate(
  byte[] input,
  int inputOffset,
  int inputLen,
  byte[] output,
  int outputOffset)
  throws |javax.crypto.ShortBufferException|
         
Continues a multiple-part encryption or decryption operation (depending on how 
this cipher was initialized), processing another data part. 

The first inputLen bytes in the input buffer, starting at inputOffset 
inclusive, are processed, and the result is stored in the output buffer, 
starting at outputOffset inclusive. 

If the output buffer is too small to hold the result, a ShortBufferException is 
thrown. 


    input - the input buffer 
    inputOffset - the offset in input where the input starts 
    inputLen - the input length 
    output - the buffer for the result 
    outputOffset - the offset in output where the result is stored 

    Returns: the number of bytes stored in output 

*javax.crypto.CipherSpi.engineUpdate(ByteBuffer,ByteBuffer)*

protected int engineUpdate(
  java.nio.ByteBuffer input,
  java.nio.ByteBuffer output)
  throws |javax.crypto.ShortBufferException|
         
Continues a multiple-part encryption or decryption operation (depending on how 
this cipher was initialized), processing another data part. 

All input.remaining() bytes starting at input.position() are processed. The 
result is stored in the output buffer. Upon return, the input buffer's position 
will be equal to its limit; its limit will not have changed. The output 
buffer's position will have advanced by n, where n is the value returned by 
this method; the output buffer's limit will not have changed. 

If output.remaining() bytes are insufficient to hold the result, a 
ShortBufferException is thrown. 

Subclasses should consider overriding this method if they can process 
ByteBuffers more efficiently than byte arrays. 


    input - the input ByteBuffer 
    output - the output ByteByffer 

    Returns: the number of bytes stored in output 

*javax.crypto.CipherSpi.engineUpdateAAD(byte[],int,int)*

protected void engineUpdateAAD(
  byte[] src,
  int offset,
  int len)

Continues a multi-part update of the Additional Authentication Data (AAD), 
using a subset of the provided buffer. 

Calls to this method provide AAD to the cipher when operating in modes such as 
AEAD (GCM/CCM). If this cipher is operating in either GCM or CCM mode, all AAD 
must be supplied before beginning operations on the ciphertext (via 
theupdateanddoFinalmethods). 


    src - the buffer containing the AAD 
    offset - the offset in {@code src} where the AAD input starts 
    len - the number of AAD bytes 

*javax.crypto.CipherSpi.engineUpdateAAD(ByteBuffer)*

protected void engineUpdateAAD(java.nio.ByteBuffer src)

Continues a multi-part update of the Additional Authentication Data (AAD). 

Calls to this method provide AAD to the cipher when operating in modes such as 
AEAD (GCM/CCM). If this cipher is operating in either GCM or CCM mode, all AAD 
must be supplied before beginning operations on the ciphertext (via 
theupdateanddoFinalmethods). 

Allsrc.remaining()bytes starting atsrc.position()are processed. Upon return, 
the input buffer's position will be equal to its limit; its limit will not have 
changed. 


    src - the buffer containing the AAD 

*javax.crypto.CipherSpi.engineWrap(Key)*

protected byte[] engineWrap(java.security.Key key)
  throws |javax.crypto.IllegalBlockSizeException|
         |java.security.InvalidKeyException|
         
Wrap a key. 

This concrete method has been added to this previously-defined abstract class. 
(For backwards compatibility, it cannot be abstract.) It may be overridden by a 
provider to wrap a key. Such an override is expected to throw an 
IllegalBlockSizeException or InvalidKeyException (under the specified 
circumstances), if the given key cannot be wrapped. If this method is not 
overridden, it always throws an UnsupportedOperationException. 


    key - the key to be wrapped. 

    Returns: the wrapped key. 


