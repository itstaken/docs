*java.util.concurrent.ScheduledThreadPoolExecutor* *ScheduledThreadPoolExecutor* 

public class ScheduledThreadPoolExecutor
  extends    |java.util.concurrent.ThreadPoolExecutor|
  implements |java.util.concurrent.ScheduledExecutorService|

|java.util.concurrent.ScheduledThreadPoolExecutor_Description|
|java.util.concurrent.ScheduledThreadPoolExecutor_Fields|
|java.util.concurrent.ScheduledThreadPoolExecutor_Constructors|
|java.util.concurrent.ScheduledThreadPoolExecutor_Methods|

================================================================================

*java.util.concurrent.ScheduledThreadPoolExecutor_Constructors*
|java.util.concurrent.ScheduledThreadPoolExecutor(int)|Creates a newScheduledTh
|java.util.concurrent.ScheduledThreadPoolExecutor(int,RejectedExecutionHandler)|
|java.util.concurrent.ScheduledThreadPoolExecutor(int,ThreadFactory)|Creates a 
|java.util.concurrent.ScheduledThreadPoolExecutor(int,ThreadFactory,RejectedExecutionHandler)|

*java.util.concurrent.ScheduledThreadPoolExecutor_Methods*
|java.util.concurrent.ScheduledThreadPoolExecutor.decorateTask(Callable<V>,RunnableScheduledFuture<V>)|
|java.util.concurrent.ScheduledThreadPoolExecutor.decorateTask(Runnable,RunnableScheduledFuture<V>)|
|java.util.concurrent.ScheduledThreadPoolExecutor.execute(Runnable)|Executescom
|java.util.concurrent.ScheduledThreadPoolExecutor.getContinueExistingPeriodicTasksAfterShutdownPolicy()|
|java.util.concurrent.ScheduledThreadPoolExecutor.getExecuteExistingDelayedTasksAfterShutdownPolicy()|
|java.util.concurrent.ScheduledThreadPoolExecutor.getQueue()|Returns the task q
|java.util.concurrent.ScheduledThreadPoolExecutor.getRemoveOnCancelPolicy()|Get
|java.util.concurrent.ScheduledThreadPoolExecutor.schedule(Callable<V>,long,TimeUnit)|
|java.util.concurrent.ScheduledThreadPoolExecutor.schedule(Runnable,long,TimeUnit)|
|java.util.concurrent.ScheduledThreadPoolExecutor.scheduleAtFixedRate(Runnable,long,long,TimeUnit)|
|java.util.concurrent.ScheduledThreadPoolExecutor.scheduleWithFixedDelay(Runnable,long,long,TimeUnit)|
|java.util.concurrent.ScheduledThreadPoolExecutor.setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean)|
|java.util.concurrent.ScheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean)|
|java.util.concurrent.ScheduledThreadPoolExecutor.setRemoveOnCancelPolicy(boolean)|
|java.util.concurrent.ScheduledThreadPoolExecutor.shutdown()|Initiates an order
|java.util.concurrent.ScheduledThreadPoolExecutor.shutdownNow()|Attempts to sto
|java.util.concurrent.ScheduledThreadPoolExecutor.submit(Callable<T>)|
|java.util.concurrent.ScheduledThreadPoolExecutor.submit(Runnable)|
|java.util.concurrent.ScheduledThreadPoolExecutor.submit(Runnable,T)|

*java.util.concurrent.ScheduledThreadPoolExecutor_Description*

A (|java.util.concurrent.ThreadPoolExecutor|) that can additionally schedule 
commands to run after a given delay, or to execute periodically. This class is 
preferable to (|java.util.Timer|) when multiple worker threads are needed, or 
when the additional flexibility or capabilities of 
(|java.util.concurrent.ThreadPoolExecutor|) (which this class extends) are 
required. 

Delayed tasks execute no sooner than they are enabled, but without any 
real-time guarantees about when, after they are enabled, they will commence. 
Tasks scheduled for exactly the same execution time are enabled in 
first-in-first-out (FIFO) order of submission. 

When a submitted task is cancelled before it is run, execution is suppressed. 
By default, such a cancelled task is not automatically removed from the work 
queue until its delay elapses. While this enables further inspection and 
monitoring, it may also cause unbounded retention of cancelled tasks. To avoid 
this, set (|java.util.concurrent.ScheduledThreadPoolExecutor|) totrue, which 
causes tasks to be immediately removed from the work queue at time of 
cancellation. 

Successive executions of a task scheduled 
viascheduleAtFixedRateorscheduleWithFixedDelaydo not overlap. While different 
executions may be performed by different threads, the effects of prior 
executions happen-before those of subsequent ones. 

While this class inherits from (|java.util.concurrent.ThreadPoolExecutor|) , a 
few of the inherited tuning methods are not useful for it. In particular, 
because it acts as a fixed-sized pool usingcorePoolSizethreads and an unbounded 
queue, adjustments tomaximumPoolSizehave no useful effect. Additionally, it is 
almost never a good idea to setcorePoolSizeto zero or 
useallowCoreThreadTimeOutbecause this may leave the pool without threads to 
handle tasks once they become eligible to run. 

Extension notes: This class overrides the 
execute(|java.util.concurrent.ThreadPoolExecutor|) and 
submit(|java.util.concurrent.AbstractExecutorService|) methods to generate 
internal (|java.util.concurrent.ScheduledFuture|) objects to control per-task 
delays and scheduling. To preserve functionality, any further overrides of 
these methods in subclasses must invoke superclass versions, which effectively 
disables additional task customization. However, this class provides 
alternative protected extension methoddecorateTask(one version each 
forRunnableandCallable) that can be used to customize the concrete task types 
used to execute commands entered 
viaexecute,submit,schedule,scheduleAtFixedRate, andscheduleWithFixedDelay. By 
default, aScheduledThreadPoolExecutoruses a task type extending 
(|java.util.concurrent.FutureTask|) . However, this may be modified or replaced 
using subclasses of the form: 

public class CustomScheduledExecutor extends ScheduledThreadPoolExecutor { 

static class CustomTask implements RunnableScheduledFuture { ... } 

protected RunnableScheduledFuture decorateTask( Runnable r, 
RunnableScheduledFuture task) { return new CustomTask(r, task); } 

protected RunnableScheduledFuture decorateTask( Callable c, 
RunnableScheduledFuture task) { return new CustomTask(c, task); } // ... add 
constructors, etc. } 



*java.util.concurrent.ScheduledThreadPoolExecutor(int)*

public ScheduledThreadPoolExecutor(int corePoolSize)

Creates a newScheduledThreadPoolExecutorwith the given core pool size. 

    corePoolSize - the number of threads to keep in the pool, even if they are idle, unless {@code 
       allowCoreThreadTimeOut} is set 

*java.util.concurrent.ScheduledThreadPoolExecutor(int,RejectedExecutionHandler)*

public ScheduledThreadPoolExecutor(
  int corePoolSize,
  java.util.concurrent.RejectedExecutionHandler handler)

Creates a new ScheduledThreadPoolExecutor with the given initial parameters. 

    corePoolSize - the number of threads to keep in the pool, even if they are idle, unless {@code 
       allowCoreThreadTimeOut} is set 
    handler - the handler to use when execution is blocked because the thread bounds and 
       queue capacities are reached 

*java.util.concurrent.ScheduledThreadPoolExecutor(int,ThreadFactory)*

public ScheduledThreadPoolExecutor(
  int corePoolSize,
  java.util.concurrent.ThreadFactory threadFactory)

Creates a newScheduledThreadPoolExecutorwith the given initial parameters. 

    corePoolSize - the number of threads to keep in the pool, even if they are idle, unless {@code 
       allowCoreThreadTimeOut} is set 
    threadFactory - the factory to use when the executor creates a new thread 

*java.util.concurrent.ScheduledThreadPoolExecutor(int,ThreadFactory,RejectedExecutionHandler)*

public ScheduledThreadPoolExecutor(
  int corePoolSize,
  java.util.concurrent.ThreadFactory threadFactory,
  java.util.concurrent.RejectedExecutionHandler handler)

Creates a new ScheduledThreadPoolExecutor with the given initial parameters. 

    corePoolSize - the number of threads to keep in the pool, even if they are idle, unless {@code 
       allowCoreThreadTimeOut} is set 
    threadFactory - the factory to use when the executor creates a new thread 
    handler - the handler to use when execution is blocked because the thread bounds and 
       queue capacities are reached 

*java.util.concurrent.ScheduledThreadPoolExecutor.decorateTask(Callable<V>,RunnableScheduledFuture<V>)*

protected |java.util.concurrent.RunnableScheduledFuture|<V> decorateTask(
  java.util.concurrent.Callable<V> callable,
  java.util.concurrent.RunnableScheduledFuture<V> task)

Modifies or replaces the task used to execute a callable. This method can be 
used to override the concrete class used for managing internal tasks. The 
default implementation simply returns the given task. 


    callable - the submitted Callable 
    task - the task created to execute the callable 

    Returns: a task that can execute the callable 

*java.util.concurrent.ScheduledThreadPoolExecutor.decorateTask(Runnable,RunnableScheduledFuture<V>)*

protected |java.util.concurrent.RunnableScheduledFuture|<V> decorateTask(
  java.lang.Runnable runnable,
  java.util.concurrent.RunnableScheduledFuture<V> task)

Modifies or replaces the task used to execute a runnable. This method can be 
used to override the concrete class used for managing internal tasks. The 
default implementation simply returns the given task. 


    runnable - the submitted Runnable 
    task - the task created to execute the runnable 

    Returns: a task that can execute the runnable 

*java.util.concurrent.ScheduledThreadPoolExecutor.execute(Runnable)*

public void execute(java.lang.Runnable command)

Executescommandwith zero required delay. This has effect equivalent to 
schedule(command, 0, 
anyUnit)(|java.util.concurrent.ScheduledThreadPoolExecutor|) . Note that 
inspections of the queue and of the list returned byshutdownNowwill access the 
zero-delayed (|java.util.concurrent.ScheduledFuture|) , not thecommanditself. 

A consequence of the use ofScheduledFutureobjects is that 
afterExecute(|java.util.concurrent.ThreadPoolExecutor|) is always called with a 
null secondThrowableargument, even if thecommandterminated abruptly. Instead, 
theThrowablethrown by such a task can be obtained via 
(|java.util.concurrent.Future|) . 



*java.util.concurrent.ScheduledThreadPoolExecutor.getContinueExistingPeriodicTasksAfterShutdownPolicy()*

public boolean getContinueExistingPeriodicTasksAfterShutdownPolicy()

Gets the policy on whether to continue executing existing periodic tasks even 
when this executor has beenshutdown. In this case, these tasks will only 
terminate uponshutdownNowor after setting the policy tofalsewhen already 
shutdown. This value is by defaultfalse. 



    Returns: {@code true} if will continue after shutdown 

*java.util.concurrent.ScheduledThreadPoolExecutor.getExecuteExistingDelayedTasksAfterShutdownPolicy()*

public boolean getExecuteExistingDelayedTasksAfterShutdownPolicy()

Gets the policy on whether to execute existing delayed tasks even when this 
executor has beenshutdown. In this case, these tasks will only terminate 
uponshutdownNow, or after setting the policy tofalsewhen already shutdown. This 
value is by defaulttrue. 



    Returns: {@code true} if will execute after shutdown 

*java.util.concurrent.ScheduledThreadPoolExecutor.getQueue()*

public |java.util.concurrent.BlockingQueue|<Runnable> getQueue()

Returns the task queue used by this executor. Each element of this queue is a 
(|java.util.concurrent.ScheduledFuture|) , including those tasks submitted 
usingexecutewhich are for scheduling purposes used as the basis of a 
zero-delayScheduledFuture. Iteration over this queue is not guaranteed to 
traverse tasks in the order in which they will execute. 



    Returns: the task queue 

*java.util.concurrent.ScheduledThreadPoolExecutor.getRemoveOnCancelPolicy()*

public boolean getRemoveOnCancelPolicy()

Gets the policy on whether cancelled tasks should be immediately removed from 
the work queue at time of cancellation. This value is by defaultfalse. 



    Returns: {@code true} if cancelled tasks are immediately removed from the queue 

*java.util.concurrent.ScheduledThreadPoolExecutor.schedule(Callable<V>,long,TimeUnit)*

public |java.util.concurrent.ScheduledFuture|<V> schedule(
  java.util.concurrent.Callable<V> callable,
  long delay,
  java.util.concurrent.TimeUnit unit)





*java.util.concurrent.ScheduledThreadPoolExecutor.schedule(Runnable,long,TimeUnit)*

public |java.util.concurrent.ScheduledFuture|<?> schedule(
  java.lang.Runnable command,
  long delay,
  java.util.concurrent.TimeUnit unit)





*java.util.concurrent.ScheduledThreadPoolExecutor.scheduleAtFixedRate(Runnable,long,long,TimeUnit)*

public |java.util.concurrent.ScheduledFuture|<?> scheduleAtFixedRate(
  java.lang.Runnable command,
  long initialDelay,
  long period,
  java.util.concurrent.TimeUnit unit)





*java.util.concurrent.ScheduledThreadPoolExecutor.scheduleWithFixedDelay(Runnable,long,long,TimeUnit)*

public |java.util.concurrent.ScheduledFuture|<?> scheduleWithFixedDelay(
  java.lang.Runnable command,
  long initialDelay,
  long delay,
  java.util.concurrent.TimeUnit unit)





*java.util.concurrent.ScheduledThreadPoolExecutor.setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean)*

public void setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean value)

Sets the policy on whether to continue executing existing periodic tasks even 
when this executor has beenshutdown. In this case, these tasks will only 
terminate uponshutdownNowor after setting the policy tofalsewhen already 
shutdown. This value is by defaultfalse. 


    value - if {@code true}, continue after shutdown, else don't. 

*java.util.concurrent.ScheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean)*

public void setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean value)

Sets the policy on whether to execute existing delayed tasks even when this 
executor has beenshutdown. In this case, these tasks will only terminate 
uponshutdownNow, or after setting the policy tofalsewhen already shutdown. This 
value is by defaulttrue. 


    value - if {@code true}, execute after shutdown, else don't. 

*java.util.concurrent.ScheduledThreadPoolExecutor.setRemoveOnCancelPolicy(boolean)*

public void setRemoveOnCancelPolicy(boolean value)

Sets the policy on whether cancelled tasks should be immediately removed from 
the work queue at time of cancellation. This value is by defaultfalse. 


    value - if {@code true}, remove on cancellation, else don't 

*java.util.concurrent.ScheduledThreadPoolExecutor.shutdown()*

public void shutdown()

Initiates an orderly shutdown in which previously submitted tasks are executed, 
but no new tasks will be accepted. Invocation has no additional effect if 
already shut down. 

This method does not wait for previously submitted tasks to complete execution. 
Use awaitTermination(|java.util.concurrent.ScheduledThreadPoolExecutor|) to do 
that. 

If theExecuteExistingDelayedTasksAfterShutdownPolicyhas been setfalse, existing 
delayed tasks whose delays have not yet elapsed are cancelled. And unless 
theContinueExistingPeriodicTasksAfterShutdownPolicyhas been settrue, future 
executions of existing periodic tasks will be cancelled. 



*java.util.concurrent.ScheduledThreadPoolExecutor.shutdownNow()*

public |java.util.List|<Runnable> shutdownNow()

Attempts to stop all actively executing tasks, halts the processing of waiting 
tasks, and returns a list of the tasks that were awaiting execution. 

This method does not wait for actively executing tasks to terminate. Use 
awaitTermination(|java.util.concurrent.ScheduledThreadPoolExecutor|) to do 
that. 

There are no guarantees beyond best-effort attempts to stop processing actively 
executing tasks. This implementation cancels tasks via (|java.lang.Thread|) , 
so any task that fails to respond to interrupts may never terminate. 



    Returns: list of tasks that never commenced execution. Each element of this list is a 
             {@link ScheduledFuture}, including those tasks submitted using 
             {@code execute}, which are for scheduling purposes used as the 
             basis of a zero-delay {@code ScheduledFuture}. 

*java.util.concurrent.ScheduledThreadPoolExecutor.submit(Callable<T>)*

public |java.util.concurrent.Future|<T> submit(java.util.concurrent.Callable<T> task)





*java.util.concurrent.ScheduledThreadPoolExecutor.submit(Runnable)*

public |java.util.concurrent.Future|<?> submit(java.lang.Runnable task)





*java.util.concurrent.ScheduledThreadPoolExecutor.submit(Runnable,T)*

public |java.util.concurrent.Future|<T> submit(
  java.lang.Runnable task,
  T result)






