*java.awt.event.MouseEvent* *MouseEvent* An event which indicates that a mouse a

public class MouseEvent
  extends    |java.awt.event.InputEvent|

|java.awt.event.MouseEvent_Description|
|java.awt.event.MouseEvent_Fields|
|java.awt.event.MouseEvent_Constructors|
|java.awt.event.MouseEvent_Methods|

================================================================================

*java.awt.event.MouseEvent_Fields*
|int_java.awt.event.MouseEvent.BUTTON1|
|int_java.awt.event.MouseEvent.BUTTON2|
|int_java.awt.event.MouseEvent.BUTTON3|
|int_java.awt.event.MouseEvent.MOUSE_CLICKED|
|int_java.awt.event.MouseEvent.MOUSE_DRAGGED|
|int_java.awt.event.MouseEvent.MOUSE_ENTERED|
|int_java.awt.event.MouseEvent.MOUSE_EXITED|
|int_java.awt.event.MouseEvent.MOUSE_FIRST|
|int_java.awt.event.MouseEvent.MOUSE_LAST|
|int_java.awt.event.MouseEvent.MOUSE_MOVED|
|int_java.awt.event.MouseEvent.MOUSE_PRESSED|
|int_java.awt.event.MouseEvent.MOUSE_RELEASED|
|int_java.awt.event.MouseEvent.MOUSE_WHEEL|
|int_java.awt.event.MouseEvent.NOBUTTON|

*java.awt.event.MouseEvent_Constructors*
|java.awt.event.MouseEvent(Component,int,long,int,int,int,int,boolean)|Construc
|java.awt.event.MouseEvent(Component,int,long,int,int,int,int,boolean,int)|Cons
|java.awt.event.MouseEvent(Component,int,long,int,int,int,int,int,int,boolean,int)|

*java.awt.event.MouseEvent_Methods*
|java.awt.event.MouseEvent.getButton()|Returns which, if any, of the mouse butt
|java.awt.event.MouseEvent.getClickCount()|Returns the number of mouse clicks a
|java.awt.event.MouseEvent.getLocationOnScreen()|Returns the absolute x, y posi
|java.awt.event.MouseEvent.getModifiersEx()|
|java.awt.event.MouseEvent.getMouseModifiersText(int)|Returns a String instance
|java.awt.event.MouseEvent.getPoint()|Returns the x,y position of the event rel
|java.awt.event.MouseEvent.getX()|Returns the horizontal x position of the even
|java.awt.event.MouseEvent.getXOnScreen()|Returns the absolute horizontal x pos
|java.awt.event.MouseEvent.getY()|Returns the vertical y position of the event 
|java.awt.event.MouseEvent.getYOnScreen()|Returns the absolute vertical y posit
|java.awt.event.MouseEvent.isPopupTrigger()|Returns whether or not this mouse e
|java.awt.event.MouseEvent.paramString()|Returns a parameter string identifying
|java.awt.event.MouseEvent.translatePoint(int,int)|Translates the event's coord

*java.awt.event.MouseEvent_Description*

An event which indicates that a mouse action occurred in a component. A mouse 
action is considered to occur in a particular component if and only if the 
mouse cursor is over the unobscured part of the component's bounds when the 
action happens. For lightweight components, such as Swing's components, mouse 
events are only dispatched to the component if the mouse event type has been 
enabled on the component. A mouse event type is enabled by adding the 
appropriate mouse-basedEventListenerto the component ( 
(|java.awt.event.MouseListener|) or (|java.awt.event.MouseMotionListener|) ), 
or by invoking (|java.awt.Component|) with the appropriate mask parameter 
(AWTEvent.MOUSE_EVENT_MASKorAWTEvent.MOUSE_MOTION_EVENT_MASK). If the mouse 
event type has not been enabled on the component, the corresponding mouse 
events are dispatched to the first ancestor that has enabled the mouse event 
type. 

For example, if aMouseListenerhas been added to a component, 
orenableEvents(AWTEvent.MOUSE_EVENT_MASK)has been invoked, then all the events 
defined byMouseListenerare dispatched to the component. On the other hand, if 
aMouseMotionListenerhas not been added andenableEventshas not been invoked 
withAWTEvent.MOUSE_MOTION_EVENT_MASK, then mouse motion events are not 
dispatched to the component. Instead the mouse motion events are dispatched to 
the first ancestors that has enabled mouse motion events. 

This low-level event is generated by a component object for: 

Mouse Events 

a mouse button is pressed a mouse button is released a mouse button is clicked 
(pressed and released) the mouse cursor enters the unobscured part of 
component's geometry the mouse cursor exits the unobscured part of component's 
geometry 

Mouse Motion Events 

the mouse is moved the mouse is dragged 



A MouseEvent object is passed to every MouseListener or MouseAdapter object 
which is registered to receive the "interesting" mouse events using the 
component's addMouseListener method. (MouseAdapter objects implement the 
MouseListener interface.) Each such listener object gets a MouseEvent 
containing the mouse event. 

A MouseEvent object is also passed to every MouseMotionListener or 
MouseMotionAdapter object which is registered to receive mouse motion events 
using the component's addMouseMotionListener method. (MouseMotionAdapter 
objects implement the MouseMotionListener interface.) Each such listener object 
gets a MouseEvent containing the mouse motion event. 

When a mouse button is clicked, events are generated and sent to the registered 
MouseListeners. The state of modal keys can be retrieved using 
(|java.awt.event.InputEvent|) and (|java.awt.event.InputEvent|) . The button 
mask returned by (|java.awt.event.InputEvent|) reflects only the button that 
changed state, not the current state of all buttons. (Note: Due to overlap in 
the values of ALT_MASK/BUTTON2_MASK and META_MASK/BUTTON3_MASK, this is not 
always true for mouse events involving modifier keys). To get the state of all 
buttons and modifier keys, use (|java.awt.event.InputEvent|) . The button which 
has changed state is returned by (|java.awt.event.MouseEvent|) For example, if 
the first mouse button is pressed, events are sent in the following order: 

id modifiers button MOUSE_PRESSED: BUTTON1_MASK BUTTON1 MOUSE_RELEASED: 
BUTTON1_MASK BUTTON1 MOUSE_CLICKED: BUTTON1_MASK BUTTON1 

When multiple mouse buttons are pressed, each press, release, and click results 
in a separate event. 

For example, if the user presses button 1 followed by button 2, and then 
releases them in the same order, the following sequence of events is generated: 

id modifiers button MOUSE_PRESSED: BUTTON1_MASK BUTTON1 MOUSE_PRESSED: 
BUTTON2_MASK BUTTON2 MOUSE_RELEASED: BUTTON1_MASK BUTTON1 MOUSE_CLICKED: 
BUTTON1_MASK BUTTON1 MOUSE_RELEASED: BUTTON2_MASK BUTTON2 MOUSE_CLICKED: 
BUTTON2_MASK BUTTON2 

If button 2 is released first, the MOUSE_RELEASED/MOUSE_CLICKED pair for 
BUTTON2_MASK arrives first, followed by the pair for BUTTON1_MASK. 

Some extra mouse buttons are added to extend the standard set of buttons 
represented by the following constants:BUTTON1,BUTTON2, andBUTTON3. Extra 
buttons have no assignedBUTTONxconstants as well as their button masks have no 
assignedBUTTONx_DOWN_MASKconstants. Nevertheless, ordinal numbers starting from 
4 may be used as button numbers (button ids). Values obtained by the 
getMaskForButton(button)(|java.awt.event.InputEvent|) method may be used as 
button masks. 

MOUSE_DRAGGED events are delivered to the Component in which the mouse button 
was pressed until the mouse button is released (regardless of whether the mouse 
position is within the bounds of the Component). Due to platform-dependent 
Dragimplementations, MOUSE_DRAGGED events may not be delivered during a native 
Dragoperation. 

In a multi-screen environment mouse drag events are delivered to the Component 
even if the mouse position is outside the bounds of the GraphicsConfiguration 
associated with that Component. However, the reported position for mouse drag 
events in this case may differ from the actual mouse position: 

In a multi-screen environment without a virtual device: 

The reported coordinates for mouse drag events are clipped to fit within the 
bounds of the GraphicsConfiguration associated with the Component. In a 
multi-screen environment with a virtual device: 

The reported coordinates for mouse drag events are clipped to fit within the 
bounds of the virtual device associated with the Component. 

An unspecified behavior will be caused if theidparameter of any 
particularMouseEventinstance is not in the range fromMOUSE_FIRSTtoMOUSE_LAST-1 
(MOUSE_WHEELis not acceptable). 



*int_java.awt.event.MouseEvent.BUTTON1*

Indicates mouse button #1; used by (|java.awt.event.MouseEvent|) . 


*int_java.awt.event.MouseEvent.BUTTON2*

Indicates mouse button #2; used by (|java.awt.event.MouseEvent|) . 


*int_java.awt.event.MouseEvent.BUTTON3*

Indicates mouse button #3; used by (|java.awt.event.MouseEvent|) . 


*int_java.awt.event.MouseEvent.MOUSE_CLICKED*

The "mouse clicked" event. This MouseEvent occurs when a mouse button is 
pressed and released. 


*int_java.awt.event.MouseEvent.MOUSE_DRAGGED*

The "mouse dragged" event. This MouseEvent occurs when the mouse position 
changes while a mouse button is pressed. 


*int_java.awt.event.MouseEvent.MOUSE_ENTERED*

The "mouse entered" event. This MouseEvent occurs when the mouse cursor enters 
the unobscured part of component's geometry. 


*int_java.awt.event.MouseEvent.MOUSE_EXITED*

The "mouse exited" event. This MouseEvent occurs when the mouse cursor exits 
the unobscured part of component's geometry. 


*int_java.awt.event.MouseEvent.MOUSE_FIRST*

The first number in the range of ids used for mouse events. 


*int_java.awt.event.MouseEvent.MOUSE_LAST*

The last number in the range of ids used for mouse events. 


*int_java.awt.event.MouseEvent.MOUSE_MOVED*

The "mouse moved" event. This MouseEvent occurs when the mouse position 
changes. 


*int_java.awt.event.MouseEvent.MOUSE_PRESSED*

The "mouse pressed" event. This MouseEvent occurs when a mouse button is pushed 
down. 


*int_java.awt.event.MouseEvent.MOUSE_RELEASED*

The "mouse released" event. This MouseEvent occurs when a mouse button is let 
up. 


*int_java.awt.event.MouseEvent.MOUSE_WHEEL*

The "mouse wheel" event. This is the only MouseWheelEvent. It occurs when a 
mouse equipped with a wheel has its wheel rotated. 


*int_java.awt.event.MouseEvent.NOBUTTON*

Indicates no mouse buttons; used by (|java.awt.event.MouseEvent|) . 



*java.awt.event.MouseEvent(Component,int,long,int,int,int,int,boolean)*

public MouseEvent(
  java.awt.Component source,
  int id,
  long when,
  int modifiers,
  int x,
  int y,
  int clickCount,
  boolean popupTrigger)

Constructs a MouseEvent object with the specified source component, type, 
modifiers, coordinates, click count, and popupTrigger flag. An invocation of 
the form MouseEvent(source, id, when, modifiers, x, y, clickCount, 
popupTrigger) behaves in exactly the same way as the invocation 
MouseEvent(|java.awt.event.MouseEvent|) (source, id, when, modifiers, x, y, 
xAbs, yAbs, clickCount, popupTrigger, MouseEvent.NOBUTTON) where xAbs and yAbs 
defines as source's location on screen plus relative coordinates x and y. xAbs 
and yAbs are set to zero if the source is not showing. This method throws an 
IllegalArgumentException if source is null. 

    source - The Component that originated the event 
    id - An integer indicating the type of event. For information on allowable values, 
       see the class description for {@link MouseEvent} 
    when - A long integer that gives the time the event occurred. Passing negative or zero 
       value is not recommended 
    modifiers - The modifier keys down during event (e.g. shift, ctrl, alt, meta) Passing 
       negative parameter is not recommended. Zero value means that no 
       modifiers were passed. Use either an extended _DOWN_MASK or old _MASK 
       modifiers, however do not mix models in the one event. The extended 
       modifiers are preferred for using 
    x - The horizontal x coordinate for the mouse location. It is allowed to pass 
       negative values 
    y - The vertical y coordinate for the mouse location. It is allowed to pass 
       negative values 
    clickCount - The number of mouse clicks associated with event. Passing negative value is not 
       recommended 
    popupTrigger - A boolean that equals {@code true} if this event is a trigger for a popup menu 

*java.awt.event.MouseEvent(Component,int,long,int,int,int,int,boolean,int)*

public MouseEvent(
  java.awt.Component source,
  int id,
  long when,
  int modifiers,
  int x,
  int y,
  int clickCount,
  boolean popupTrigger,
  int button)

Constructs a MouseEvent object with the specified source component, type, time, 
modifiers, coordinates, click count, popupTrigger flag, and button number. 

Creating an invalid event (such as by using more than one of the old _MASKs, or 
modifier/button values which don't match) results in unspecified behavior. An 
invocation of the form MouseEvent(source, id, when, modifiers, x, y, 
clickCount, popupTrigger, button) behaves in exactly the same way as the 
invocation MouseEvent(|java.awt.event.MouseEvent|) (source, id, when, 
modifiers, x, y, xAbs, yAbs, clickCount, popupTrigger, button) where xAbs and 
yAbs defines as source's location on screen plus relative coordinates x and y. 
xAbs and yAbs are set to zero if the source is not showing. This method throws 
an IllegalArgumentException if source is null. 

    source - The Component that originated the event 
    id - An integer indicating the type of event. For information on allowable values, 
       see the class description for {@link MouseEvent} 
    when - A long integer that gives the time the event occurred. Passing negative or zero 
       value is not recommended 
    modifiers - The modifier keys down during event (e.g. shift, ctrl, alt, meta) Passing 
       negative parameter is not recommended. Zero value means that no 
       modifiers were passed. Use either an extended _DOWN_MASK or old _MASK 
       modifiers, however do not mix models in the one event. The extended 
       modifiers are preferred for using 
    x - The horizontal x coordinate for the mouse location. It is allowed to pass 
       negative values 
    y - The vertical y coordinate for the mouse location. It is allowed to pass 
       negative values 
    clickCount - The number of mouse clicks associated with event. Passing negative value is not 
       recommended 
    popupTrigger - A boolean that equals {@code true} if this event is a trigger for a popup menu 
    button - An integer that indicates, which of the mouse buttons has changed its state. 
       The following rules are applied to this parameter: 

If support for the extended mouse buttons is {@link 
       Toolkit#areExtraMouseButtonsEnabled() disabled} by Java then it is 
       allowed to create {@code MouseEvent} objects only with the standard 
       buttons: {@code NOBUTTON}, {@code BUTTON1}, {@code BUTTON2}, and {@code 
       BUTTON3}. If support for the extended mouse buttons is {@link 
       Toolkit#areExtraMouseButtonsEnabled() enabled} by Java then it is 
       allowed to create {@code MouseEvent} objects with the standard buttons. 
       In case the support for extended mouse buttons is {@link 
       Toolkit#areExtraMouseButtonsEnabled() enabled} by Java, then in addition 
       to the standard buttons, {@code MouseEvent} objects can be created using 
       buttons from the range starting from 4 to {@link 
       java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()} 
       if the mouse has more than three buttons. 

*java.awt.event.MouseEvent(Component,int,long,int,int,int,int,int,int,boolean,int)*

public MouseEvent(
  java.awt.Component source,
  int id,
  long when,
  int modifiers,
  int x,
  int y,
  int xAbs,
  int yAbs,
  int clickCount,
  boolean popupTrigger,
  int button)

Constructs a MouseEvent object with the specified source component, type, time, 
modifiers, coordinates, absolute coordinates, click count, popupTrigger flag, 
and button number. 

Creating an invalid event (such as by using more than one of the old _MASKs, or 
modifier/button values which don't match) results in unspecified behavior. Even 
if inconsistent values for relative and absolute coordinates are passed to the 
constructor, the mouse event instance is still created and no exception is 
thrown. This method throws an IllegalArgumentException if source is null. 

    source - The Component that originated the event 
    id - An integer indicating the type of event. For information on allowable values, 
       see the class description for {@link MouseEvent} 
    when - A long integer that gives the time the event occurred. Passing negative or zero 
       value is not recommended 
    modifiers - The modifier keys down during event (e.g. shift, ctrl, alt, meta) Passing 
       negative parameter is not recommended. Zero value means that no 
       modifiers were passed. Use either an extended _DOWN_MASK or old _MASK 
       modifiers, however do not mix models in the one event. The extended 
       modifiers are preferred for using 
    x - The horizontal x coordinate for the mouse location. It is allowed to pass 
       negative values 
    y - The vertical y coordinate for the mouse location. It is allowed to pass 
       negative values 
    xAbs - The absolute horizontal x coordinate for the mouse location It is allowed to 
       pass negative values 
    yAbs - The absolute vertical y coordinate for the mouse location It is allowed to pass 
       negative values 
    clickCount - The number of mouse clicks associated with event. Passing negative value is not 
       recommended 
    popupTrigger - A boolean that equals {@code true} if this event is a trigger for a popup menu 
    button - An integer that indicates, which of the mouse buttons has changed its state. 
       The following rules are applied to this parameter: 

If support for the extended mouse buttons is {@link 
       Toolkit#areExtraMouseButtonsEnabled() disabled} by Java then it is 
       allowed to create {@code MouseEvent} objects only with the standard 
       buttons: {@code NOBUTTON}, {@code BUTTON1}, {@code BUTTON2}, and {@code 
       BUTTON3}. If support for the extended mouse buttons is {@link 
       Toolkit#areExtraMouseButtonsEnabled() enabled} by Java then it is 
       allowed to create {@code MouseEvent} objects with the standard buttons. 
       In case the support for extended mouse buttons is {@link 
       Toolkit#areExtraMouseButtonsEnabled() enabled} by Java, then in addition 
       to the standard buttons, {@code MouseEvent} objects can be created using 
       buttons from the range starting from 4 to {@link 
       java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()} 
       if the mouse has more than three buttons. 

*java.awt.event.MouseEvent.getButton()*

public int getButton()

Returns which, if any, of the mouse buttons has changed state. The returned 
value is ranged from 0 to the 
MouseInfo.getNumberOfButtons()(|java.awt.MouseInfo|) value. The returned value 
includes at least the following constants: 

NOBUTTONBUTTON1BUTTON2BUTTON3 It is allowed to use those constants to compare 
with the returned button number in the application. For example, 

if (anEvent.getButton() == MouseEvent.BUTTON1) { 

In particular, for a mouse with one, two, or three buttons this method may 
return the following values: 

0 (NOBUTTON) 1 (BUTTON1) 2 (BUTTON2) 3 (BUTTON3) 

Button numbers greater thenBUTTON3have no constant identifier. So if a mouse 
with five buttons is installed, this method may return the following values: 

0 (NOBUTTON) 1 (BUTTON1) 2 (BUTTON2) 3 (BUTTON3) 4 5 

Note: If support for extended mouse buttons is disabled(|java.awt.Toolkit|) by 
Java then the AWT event subsystem does not produce mouse events for the 
extended mouse buttons. So it is not expected that this method returns anything 
exceptNOBUTTON,BUTTON1,BUTTON2,BUTTON3. 



    Returns: one of the values from 0 to {@link java.awt.MouseInfo#getNumberOfButtons() 
             MouseInfo.getNumberOfButtons()} if support for the extended mouse 
             buttons is {@link Toolkit#areExtraMouseButtonsEnabled() enabled} 
             by Java. That range includes {@code NOBUTTON}, {@code BUTTON1}, 
             {@code BUTTON2}, {@code BUTTON3}; 

{@code NOBUTTON}, {@code BUTTON1}, {@code BUTTON2} or {@code BUTTON3} if 
             support for the extended mouse buttons is {@link 
             Toolkit#areExtraMouseButtonsEnabled() disabled} by Java 

*java.awt.event.MouseEvent.getClickCount()*

public int getClickCount()

Returns the number of mouse clicks associated with this event. 



    Returns: integer value for the number of clicks 

*java.awt.event.MouseEvent.getLocationOnScreen()*

public |java.awt.Point| getLocationOnScreen()

Returns the absolute x, y position of the event. In a virtual device 
multi-screen environment in which the desktop area could span multiple physical 
screen devices, these coordinates are relative to the virtual coordinate 
system. Otherwise, these coordinates are relative to the coordinate system 
associated with the Component's GraphicsConfiguration. 



    Returns: a Point object containing the absolute x and y coordinates. 

*java.awt.event.MouseEvent.getModifiersEx()*

public int getModifiersEx()





*java.awt.event.MouseEvent.getMouseModifiersText(int)*

public static |java.lang.String| getMouseModifiersText(int modifiers)

Returns a String instance describing the modifier keys and mouse buttons that 
were down during the event, such as "Shift", or "Ctrl+Shift". These strings can 
be localized by changing the awt.properties file. 

Note that the InputEvent.ALT_MASK and InputEvent.BUTTON2_MASK have equal 
values, so the "Alt" string is returned for both modifiers. Likewise, the 
InputEvent.META_MASK and InputEvent.BUTTON3_MASK have equal values, so the 
"Meta" string is returned for both modifiers. 

Note that passing negative parameter is incorrect, and will cause the returning 
an unspecified string. Zero parameter means that no modifiers were passed and 
will cause the returning an empty string. 


    modifiers - A modifier mask describing the modifier keys and mouse buttons that were down 
       during the event 

    Returns: string string text description of the combination of modifier keys and mouse 
             buttons that were down during the event 

*java.awt.event.MouseEvent.getPoint()*

public |java.awt.Point| getPoint()

Returns the x,y position of the event relative to the source component. 



    Returns: a Point object containing the x and y coordinates relative to the source 
             component 

*java.awt.event.MouseEvent.getX()*

public int getX()

Returns the horizontal x position of the event relative to the source 
component. 



    Returns: x an integer indicating horizontal position relative to the component 

*java.awt.event.MouseEvent.getXOnScreen()*

public int getXOnScreen()

Returns the absolute horizontal x position of the event. In a virtual device 
multi-screen environment in which the desktop area could span multiple physical 
screen devices, this coordinate is relative to the virtual coordinate system. 
Otherwise, this coordinate is relative to the coordinate system associated with 
the Component's GraphicsConfiguration. 



    Returns: x an integer indicating absolute horizontal position. 

*java.awt.event.MouseEvent.getY()*

public int getY()

Returns the vertical y position of the event relative to the source component. 



    Returns: y an integer indicating vertical position relative to the component 

*java.awt.event.MouseEvent.getYOnScreen()*

public int getYOnScreen()

Returns the absolute vertical y position of the event. In a virtual device 
multi-screen environment in which the desktop area could span multiple physical 
screen devices, this coordinate is relative to the virtual coordinate system. 
Otherwise, this coordinate is relative to the coordinate system associated with 
the Component's GraphicsConfiguration. 



    Returns: y an integer indicating absolute vertical position. 

*java.awt.event.MouseEvent.isPopupTrigger()*

public boolean isPopupTrigger()

Returns whether or not this mouse event is the popup menu trigger event for the 
platform. Note: Popup menus are triggered differently on different systems. 
Therefore, isPopupTrigger should be checked in both mousePressed and 
mouseReleased for proper cross-platform functionality. 



    Returns: boolean, true if this event is the popup menu trigger for this platform 

*java.awt.event.MouseEvent.paramString()*

public |java.lang.String| paramString()

Returns a parameter string identifying this event. This method is useful for 
event-logging and for debugging. 



    Returns: a string identifying the event and its attributes 

*java.awt.event.MouseEvent.translatePoint(int,int)*

public synchronized void translatePoint(
  int x,
  int y)

Translates the event's coordinates to a new position by adding specified x 
(horizontal) and y (vertical) offsets. 


    x - the horizontal x value to add to the current x coordinate position 
    y - the vertical y value to add to the current y coordinate position 


