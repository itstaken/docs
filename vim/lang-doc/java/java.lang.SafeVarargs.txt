*java.lang.SafeVarargs* *SafeVarargs* A programmer assertion that the body of th

public interface class SafeVarargs

  implements |java.lang.annotation.Annotation|

|java.lang.SafeVarargs_Description|
|java.lang.SafeVarargs_Fields|
|java.lang.SafeVarargs_Constructors|
|java.lang.SafeVarargs_Methods|

================================================================================

*java.lang.SafeVarargs_Description*

A programmer assertion that the body of the annotated method or constructor 
does not perform potentially unsafe operations on its varargs parameter. 
Applying this annotation to a method or constructor suppresses unchecked 
warnings about a non-reifiable variable arity (vararg) type and suppresses 
unchecked warnings about parameterized array creation at call sites. 

In addition to the usage restrictions imposed by its 
@Target(|java.lang.annotation.Target|) meta-annotation, compilers are required 
to implement additional usage restrictions on this annotation type; it is a 
compile-time error if a method or constructor declaration is annotated with 
a@SafeVarargsannotation, and either: 

the declaration is a fixed arity method or constructor 

the declaration is a variable arity method that is neitherstaticnorfinal. 



Compilers are encouraged to issue warnings when this annotation type is applied 
to a method or constructor declaration where: 



The variable arity parameter has a reifiable element type, which includes 
primitive types,Object, andString. (The unchecked warnings this annotation type 
suppresses already do not occur for a reifiable element type.) 

The body of the method or constructor declaration performs potentially unsafe 
operations, such as an assignment to an element of the variable arity 
parameter's array that generates an unchecked warning. Some unsafe operations 
do not trigger an unchecked warning. For example, the aliasing in 



SafeVarargs // Not actually safe! static void m(List<String>... stringLists) { 
Object[] array = stringLists; List<Integer> tmpList = Arrays.asList(42); 
array[0] = tmpList; // Semantically invalid, but compiles without warnings 
String s = stringLists[0].get(0); // Oh no, ClassCastException at runtime! } 

leads to aClassCastExceptionat runtime. 

Future versions of the platform may mandate compiler errors for such unsafe 
operations. 





