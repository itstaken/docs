*java.util.ConcurrentModificationException* *ConcurrentModificationException* Th

public class ConcurrentModificationException
  extends    |java.lang.RuntimeException|

|java.util.ConcurrentModificationException_Description|
|java.util.ConcurrentModificationException_Fields|
|java.util.ConcurrentModificationException_Constructors|
|java.util.ConcurrentModificationException_Methods|

================================================================================

*java.util.ConcurrentModificationException_Constructors*
|java.util.ConcurrentModificationException()|Constructs a ConcurrentModificatio
|java.util.ConcurrentModificationException(String)|Constructs aConcurrentModifi
|java.util.ConcurrentModificationException(String,Throwable)|Constructs a new e
|java.util.ConcurrentModificationException(Throwable)|Constructs a new exceptio

*java.util.ConcurrentModificationException_Description*

This exception may be thrown by methods that have detected concurrent 
modification of an object when such modification is not permissible. 

For example, it is not generally permissible for one thread to modify a 
Collection while another thread is iterating over it. In general, the results 
of the iteration are undefined under these circumstances. Some Iterator 
implementations (including those of all the general purpose collection 
implementations provided by the JRE) may choose to throw this exception if this 
behavior is detected. Iterators that do this are known as fail-fast iterators, 
as they fail quickly and cleanly, rather that risking arbitrary, 
non-deterministic behavior at an undetermined time in the future. 

Note that this exception does not always indicate that an object has been 
concurrently modified by a different thread. If a single thread issues a 
sequence of method invocations that violates the contract of an object, the 
object may throw this exception. For example, if a thread modifies a collection 
directly while it is iterating over the collection with a fail-fast iterator, 
the iterator will throw this exception. 

Note that fail-fast behavior cannot be guaranteed as it is, generally speaking, 
impossible to make any hard guarantees in the presence of unsynchronized 
concurrent modification. Fail-fast operations 
throwConcurrentModificationExceptionon a best-effort basis. Therefore, it would 
be wrong to write a program that depended on this exception for its 
correctness: ConcurrentModificationExceptionshould be used only to detect bugs. 



*java.util.ConcurrentModificationException()*

public ConcurrentModificationException()

Constructs a ConcurrentModificationException with no detail message. 


*java.util.ConcurrentModificationException(String)*

public ConcurrentModificationException(java.lang.String message)

Constructs aConcurrentModificationExceptionwith the specified detail message. 

    message - the detail message pertaining to this exception. 

*java.util.ConcurrentModificationException(String,Throwable)*

public ConcurrentModificationException(
  java.lang.String message,
  java.lang.Throwable cause)

Constructs a new exception with the specified detail message and cause. 

Note that the detail message associated with cause is not automatically 
incorporated in this exception's detail message. 

    message - the detail message (which is saved for later retrieval by the {@link 
       Throwable#getMessage()} method). 
    cause - the cause (which is saved for later retrieval by the {@link 
       Throwable#getCause()} method). (A {@code null} value is permitted, and 
       indicates that the cause is nonexistent or unknown.) 

*java.util.ConcurrentModificationException(Throwable)*

public ConcurrentModificationException(java.lang.Throwable cause)

Constructs a new exception with the specified cause and a detail message 
of(cause==null ? null : cause.toString())(which typically contains the class 
and detail message ofcause. 

    cause - the cause (which is saved for later retrieval by the {@link 
       Throwable#getCause()} method). (A {@code null} value is permitted, and 
       indicates that the cause is nonexistent or unknown.) 

