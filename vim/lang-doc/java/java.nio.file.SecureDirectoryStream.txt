*java.nio.file.SecureDirectoryStream* *SecureDirectoryStream* ADirectoryStreamth

public interface interface SecureDirectoryStream<T>

  implements |java.nio.file.DirectoryStream|

|java.nio.file.SecureDirectoryStream_Description|
|java.nio.file.SecureDirectoryStream_Fields|
|java.nio.file.SecureDirectoryStream_Constructors|
|java.nio.file.SecureDirectoryStream_Methods|

================================================================================

*java.nio.file.SecureDirectoryStream_Methods*
|java.nio.file.SecureDirectoryStream.deleteDirectory(T)|Deletes a directory.
|java.nio.file.SecureDirectoryStream.deleteFile(T)|Deletes a file.
|java.nio.file.SecureDirectoryStream.getFileAttributeView(Class<V>)|Returns a n
|java.nio.file.SecureDirectoryStream.getFileAttributeView(T,Class<V>,LinkOption...)|
|java.nio.file.SecureDirectoryStream.move(T,SecureDirectoryStream<T>,T)|Move a 
|java.nio.file.SecureDirectoryStream.newByteChannel(T,Set<?extendsOpenOption>,FileAttribute<?>...)|
|java.nio.file.SecureDirectoryStream.newDirectoryStream(T,LinkOption...)|Opens 

*java.nio.file.SecureDirectoryStream_Description*

ADirectoryStreamthat defines operations on files that are located relative to 
an open directory. ASecureDirectoryStreamis intended for use by sophisticated 
or security sensitive applications requiring to traverse file trees or 
otherwise operate on directories in a race-free manner. Race conditions can 
arise when a sequence of file operations cannot be carried out in isolation. 
Each of the file operations defined by this interface specify a relative path. 
All access to the file is relative to the open directory irrespective of if the 
directory is moved or replaced by an attacker while the directory is open. 
ASecureDirectoryStreammay also be used as a virtual working directory. 

ASecureDirectoryStreamrequires corresponding support from the underlying 
operating system. Where an implementation supports this features then 
theDirectoryStreamreturned by the newDirectoryStream(|java.nio.file.Files|) 
method will be aSecureDirectoryStreamand must be cast to that type in order to 
invoke the methods defined by this interface. 

In the case of the default provider(|java.nio.file.spi.FileSystemProvider|) , 
and a security manager is set, then the permission checks are performed using 
the path obtained by resolving the given relative path against the original 
path of the directory (irrespective of if the directory is moved since it was 
opened). 



*java.nio.file.SecureDirectoryStream.deleteDirectory(T)*

public void deleteDirectory(T path)
  throws |java.io.IOException|
         
Deletes a directory. 

Unlike the delete()(|java.nio.file.Files|) method, this method does not first 
examine the file to determine if the file is a directory. Whether 
non-directories are deleted by this method is system dependent and therefore 
not specified. When the parameter is a relative path then the directory to 
delete is relative to this open directory. 


    path - the path of the directory to delete 

*java.nio.file.SecureDirectoryStream.deleteFile(T)*

public void deleteFile(T path)
  throws |java.io.IOException|
         
Deletes a file. 

Unlike the delete()(|java.nio.file.Files|) method, this method does not first 
examine the file to determine if the file is a directory. Whether a directory 
is deleted by this method is system dependent and therefore not specified. If 
the file is a symbolic link, then the link itself, not the final target of the 
link, is deleted. When the parameter is a relative path then the file to delete 
is relative to this open directory. 


    path - the path of the file to delete 

*java.nio.file.SecureDirectoryStream.getFileAttributeView(Class<V>)*

public |V| getFileAttributeView(java.lang.Class<V> type)

Returns a new file attribute view to access the file attributes of this 
directory. 

The resulting file attribute view can be used to read or update the attributes 
of this (open) directory. Thetypeparameter specifies the type of the attribute 
view and the method returns an instance of that type if supported. Invoking 
this method to obtain a (|java.nio.file.attribute.BasicFileAttributeView|) 
always returns an instance of that class that is bound to this open directory. 

The state of resulting file attribute view is intimately connected to this 
directory stream. Once the directory stream is 
closed(|java.nio.file.SecureDirectoryStream|) , then all methods to read or 
update attributes will throw 
ClosedDirectoryStreamException(|java.nio.file.ClosedDirectoryStreamException|) 
. 


    type - the {@code Class} object corresponding to the file attribute view 

    Returns: a new file attribute view of the specified type bound to this directory stream, 
             or {@code null} if the attribute view type is not available 

*java.nio.file.SecureDirectoryStream.getFileAttributeView(T,Class<V>,LinkOption...)*

public |V| getFileAttributeView(
  T path,
  java.lang.Class<V> type,
  java.nio.file.LinkOption[] options)

Returns a new file attribute view to access the file attributes of a file in 
this directory. 

The resulting file attribute view can be used to read or update the attributes 
of file in this directory. Thetypeparameter specifies the type of the attribute 
view and the method returns an instance of that type if supported. Invoking 
this method to obtain a (|java.nio.file.attribute.BasicFileAttributeView|) 
always returns an instance of that class that is bound to the file in the 
directory. 

The state of resulting file attribute view is intimately connected to this 
directory stream. Once the directory stream 
closed(|java.nio.file.SecureDirectoryStream|) , then all methods to read or 
update attributes will throw 
ClosedDirectoryStreamException(|java.nio.file.ClosedDirectoryStreamException|) 
. The file is not required to exist at the time that the file attribute view is 
created but methods to read or update attributes of the file will fail when 
invoked and the file does not exist. 


    path - the path of the file 
    type - the {@code Class} object corresponding to the file attribute view 
    options - options indicating how symbolic links are handled 

    Returns: a new file attribute view of the specified type bound to a this directory 
             stream, or {@code null} if the attribute view type is not 
             available 

*java.nio.file.SecureDirectoryStream.move(T,SecureDirectoryStream<T>,T)*

public void move(
  T srcpath,
  java.nio.file.SecureDirectoryStream<T> targetdir,
  T targetpath)
  throws |java.io.IOException|
         
Move a file from this directory to another directory. 

This method works in a similar manner to move(|java.nio.file.Files|) method 
when the ATOMIC_MOVE(|java.nio.file.StandardCopyOption|) option is specified. 
That is, this method moves a file as an atomic file system operation. If 
thesrcpathparameter is an absolute(|java.nio.file.Path|) path then it locates 
the source file. If the parameter is a relative path then it is located 
relative to this open directory. If thetargetpathparameter is absolute then it 
locates the target file (thetargetdirparameter is ignored). If the parameter is 
a relative path it is located relative to the open directory identified by 
thetargetdirparameter. In all cases, if the target file exists then it is 
implementation specific if it is replaced or this method fails. 


    srcpath - the name of the file to move 
    targetdir - the destination directory 
    targetpath - the name to give the file in the destination directory 

*java.nio.file.SecureDirectoryStream.newByteChannel(T,Set<?extendsOpenOption>,FileAttribute<?>...)*

public |java.nio.channels.SeekableByteChannel| newByteChannel(
  T path,
  java.util.Set<? extends java.nio.file.OpenOption> options,
  java.nio.file.attribute.FileAttribute[] attrs)
  throws |java.io.IOException|
         
Opens or creates a file in this directory, returning a seekable byte channel to 
access the file. 

This method works in exactly the manner specified by the 
Files.newByteChannel(|java.nio.file.Files|) method for the case that 
thepathparameter is an absolute(|java.nio.file.Path|) path. When the parameter 
is a relative path then the file to open or create is relative to this open 
directory. In addition to the options defined by theFiles.newByteChannelmethod, 
the NOFOLLOW_LINKS(|java.nio.file.LinkOption|) option may be used to ensure 
that this method fails if the file is a symbolic link. 

The channel, once created, is not dependent upon the directory stream used to 
create it. Closing this directory stream has no effect upon the channel. 


    path - the path of the file to open open or create 
    options - options specifying how the file is opened 
    attrs - an optional list of attributes to set atomically when creating the file 

*java.nio.file.SecureDirectoryStream.newDirectoryStream(T,LinkOption...)*

public |java.nio.file.SecureDirectoryStream|<T> newDirectoryStream(
  T path,
  java.nio.file.LinkOption[] options)
  throws |java.io.IOException|
         
Opens the directory identified by the given path, returning 
aSecureDirectoryStreamto iterate over the entries in the directory. 

This method works in exactly the manner specified by the 
newDirectoryStream(|java.nio.file.Files|) method for the case that 
thepathparameter is an absolute(|java.nio.file.Path|) path. When the parameter 
is a relative path then the directory to open is relative to this open 
directory. The NOFOLLOW_LINKS(|java.nio.file.LinkOption|) option may be used to 
ensure that this method fails if the file is a symbolic link. 

The new directory stream, once created, is not dependent upon the directory 
stream used to create it. Closing this directory stream has no effect upon 
newly created directory stream. 


    path - the path to the directory to open 
    options - options indicating how symbolic links are handled 

    Returns: a new and open {@code SecureDirectoryStream} object 


