*java.util.concurrent.LinkedTransferQueue* *LinkedTransferQueue* An unboundedTra

public class LinkedTransferQueue<E>
  extends    |java.util.AbstractQueue|
  implements |java.util.concurrent.TransferQueue|
             |java.io.Serializable|

|java.util.concurrent.LinkedTransferQueue_Description|
|java.util.concurrent.LinkedTransferQueue_Fields|
|java.util.concurrent.LinkedTransferQueue_Constructors|
|java.util.concurrent.LinkedTransferQueue_Methods|

================================================================================

*java.util.concurrent.LinkedTransferQueue_Constructors*
|java.util.concurrent.LinkedTransferQueue()|Creates an initially emptyLinkedTra
|java.util.concurrent.LinkedTransferQueue(Collection<?extendsE>)|Creates aLinke

*java.util.concurrent.LinkedTransferQueue_Methods*
|java.util.concurrent.LinkedTransferQueue.add(E)|Inserts the specified element 
|java.util.concurrent.LinkedTransferQueue.contains(Object)|Returnstrueif this q
|java.util.concurrent.LinkedTransferQueue.drainTo(Collection<?superE>)|
|java.util.concurrent.LinkedTransferQueue.drainTo(Collection<?superE>,int)|
|java.util.concurrent.LinkedTransferQueue.getWaitingConsumerCount()|
|java.util.concurrent.LinkedTransferQueue.hasWaitingConsumer()|
|java.util.concurrent.LinkedTransferQueue.isEmpty()|Returnstrueif this queue co
|java.util.concurrent.LinkedTransferQueue.iterator()|Returns an iterator over t
|java.util.concurrent.LinkedTransferQueue.offer(E)|Inserts the specified elemen
|java.util.concurrent.LinkedTransferQueue.offer(E,long,TimeUnit)|Inserts the sp
|java.util.concurrent.LinkedTransferQueue.peek()|
|java.util.concurrent.LinkedTransferQueue.poll()|
|java.util.concurrent.LinkedTransferQueue.poll(long,TimeUnit)|
|java.util.concurrent.LinkedTransferQueue.put(E)|Inserts the specified element 
|java.util.concurrent.LinkedTransferQueue.remainingCapacity()|Always returnsInt
|java.util.concurrent.LinkedTransferQueue.remove(Object)|Removes a single insta
|java.util.concurrent.LinkedTransferQueue.size()|Returns the number of elements
|java.util.concurrent.LinkedTransferQueue.take()|
|java.util.concurrent.LinkedTransferQueue.transfer(E)|Transfers the element to 
|java.util.concurrent.LinkedTransferQueue.tryTransfer(E)|Transfers the element 
|java.util.concurrent.LinkedTransferQueue.tryTransfer(E,long,TimeUnit)|Transfer

*java.util.concurrent.LinkedTransferQueue_Description*

An unbounded (|java.util.concurrent.TransferQueue|) based on linked nodes. This 
queue orders elements FIFO (first-in-first-out) with respect to any given 
producer. The head of the queue is that element that has been on the queue the 
longest time for some producer. The tail of the queue is that element that has 
been on the queue the shortest time for some producer. 

Beware that, unlike in most collections, thesizemethod is NOT a constant-time 
operation. Because of the asynchronous nature of these queues, determining the 
current number of elements requires a traversal of the elements, and so may 
report inaccurate results if this collection is modified during traversal. 
Additionally, the bulk operationsaddAll,removeAll,retainAll,containsAll,equals, 
andtoArrayare not guaranteed to be performed atomically. For example, an 
iterator operating concurrently with anaddAlloperation might view only some of 
the added elements. 

This class and its iterator implement all of the optional methods of the 
(|java.util.Collection|) and (|java.util.Iterator|) interfaces. 

Memory consistency effects: As with other concurrent collections, actions in a 
thread prior to placing an object into aLinkedTransferQueuehappen-before 
actions subsequent to the access or removal of that element from 
theLinkedTransferQueuein another thread. 

This class is a member of the <a 
href="/../technotes/guides/collections/index.html"> Java Collections Framework. 



*java.util.concurrent.LinkedTransferQueue()*

public LinkedTransferQueue()

Creates an initially emptyLinkedTransferQueue. 


*java.util.concurrent.LinkedTransferQueue(Collection<?extendsE>)*

public LinkedTransferQueue(java.util.Collection<? extends E> c)

Creates aLinkedTransferQueueinitially containing the elements of the given 
collection, added in traversal order of the collection's iterator. 

    c - the collection of elements to initially contain 

*java.util.concurrent.LinkedTransferQueue.add(E)*

public boolean add(E e)

Inserts the specified element at the tail of this queue. As the queue is 
unbounded, this method will never throw (|java.lang.IllegalStateException|) or 
returnfalse. 



    Returns: {@code true} (as specified by {@link Collection#add}) 

*java.util.concurrent.LinkedTransferQueue.contains(Object)*

public boolean contains(java.lang.Object o)

Returnstrueif this queue contains the specified element. More formally, 
returnstrueif and only if this queue contains at least one elementesuch 
thato.equals(e). 


    o - object to be checked for containment in this queue 

    Returns: {@code true} if this queue contains the specified element 

*java.util.concurrent.LinkedTransferQueue.drainTo(Collection<?superE>)*

public int drainTo(java.util.Collection<? super E> c)





*java.util.concurrent.LinkedTransferQueue.drainTo(Collection<?superE>,int)*

public int drainTo(
  java.util.Collection<? super E> c,
  int maxElements)





*java.util.concurrent.LinkedTransferQueue.getWaitingConsumerCount()*

public int getWaitingConsumerCount()





*java.util.concurrent.LinkedTransferQueue.hasWaitingConsumer()*

public boolean hasWaitingConsumer()





*java.util.concurrent.LinkedTransferQueue.isEmpty()*

public boolean isEmpty()

Returnstrueif this queue contains no elements. 



    Returns: {@code true} if this queue contains no elements 

*java.util.concurrent.LinkedTransferQueue.iterator()*

public |java.util.Iterator|<E> iterator()

Returns an iterator over the elements in this queue in proper sequence. The 
elements will be returned in order from first (head) to last (tail). 

The returned iterator is a "weakly consistent" iterator that will never throw 
ConcurrentModificationException(|java.util.ConcurrentModificationException|) , 
and guarantees to traverse elements as they existed upon construction of the 
iterator, and may (but is not guaranteed to) reflect any modifications 
subsequent to construction. 



    Returns: an iterator over the elements in this queue in proper sequence 

*java.util.concurrent.LinkedTransferQueue.offer(E)*

public boolean offer(E e)

Inserts the specified element at the tail of this queue. As the queue is 
unbounded, this method will never returnfalse. 



    Returns: {@code true} (as specified by {@link Queue#offer}) 

*java.util.concurrent.LinkedTransferQueue.offer(E,long,TimeUnit)*

public boolean offer(
  E e,
  long timeout,
  java.util.concurrent.TimeUnit unit)

Inserts the specified element at the tail of this queue. As the queue is 
unbounded, this method will never block or returnfalse. 



    Returns: {@code true} (as specified by {@link BlockingQueue#offer(Object,long,TimeUnit) 
             BlockingQueue.offer}) 

*java.util.concurrent.LinkedTransferQueue.peek()*

public |E| peek()





*java.util.concurrent.LinkedTransferQueue.poll()*

public |E| poll()





*java.util.concurrent.LinkedTransferQueue.poll(long,TimeUnit)*

public |E| poll(
  long timeout,
  java.util.concurrent.TimeUnit unit)
  throws |java.lang.InterruptedException|
         




*java.util.concurrent.LinkedTransferQueue.put(E)*

public void put(E e)

Inserts the specified element at the tail of this queue. As the queue is 
unbounded, this method will never block. 



*java.util.concurrent.LinkedTransferQueue.remainingCapacity()*

public int remainingCapacity()

Always returnsInteger.MAX_VALUEbecause aLinkedTransferQueueis not capacity 
constrained. 



    Returns: {@code Integer.MAX_VALUE} (as specified by {@link 
             BlockingQueue#remainingCapacity()}) 

*java.util.concurrent.LinkedTransferQueue.remove(Object)*

public boolean remove(java.lang.Object o)

Removes a single instance of the specified element from this queue, if it is 
present. More formally, removes an elementesuch thato.equals(e), if this queue 
contains one or more such elements. Returnstrueif this queue contained the 
specified element (or equivalently, if this queue changed as a result of the 
call). 


    o - element to be removed from this queue, if present 

    Returns: {@code true} if this queue changed as a result of the call 

*java.util.concurrent.LinkedTransferQueue.size()*

public int size()

Returns the number of elements in this queue. If this queue contains more 
thanInteger.MAX_VALUEelements, returnsInteger.MAX_VALUE. 

Beware that, unlike in most collections, this method is NOT a constant-time 
operation. Because of the asynchronous nature of these queues, determining the 
current number of elements requires an O(n) traversal. 



    Returns: the number of elements in this queue 

*java.util.concurrent.LinkedTransferQueue.take()*

public |E| take()
  throws |java.lang.InterruptedException|
         




*java.util.concurrent.LinkedTransferQueue.transfer(E)*

public void transfer(E e)
  throws |java.lang.InterruptedException|
         
Transfers the element to a consumer, waiting if necessary to do so. 

More precisely, transfers the specified element immediately if there exists a 
consumer already waiting to receive it (in 
(|java.util.concurrent.LinkedTransferQueue|) or timed 
poll(|java.util.concurrent.LinkedTransferQueue|) ), else inserts the specified 
element at the tail of this queue and waits until the element is received by a 
consumer. 



*java.util.concurrent.LinkedTransferQueue.tryTransfer(E)*

public boolean tryTransfer(E e)

Transfers the element to a waiting consumer immediately, if possible. 

More precisely, transfers the specified element immediately if there exists a 
consumer already waiting to receive it (in 
(|java.util.concurrent.LinkedTransferQueue|) or timed 
poll(|java.util.concurrent.LinkedTransferQueue|) ), otherwise 
returningfalsewithout enqueuing the element. 



*java.util.concurrent.LinkedTransferQueue.tryTransfer(E,long,TimeUnit)*

public boolean tryTransfer(
  E e,
  long timeout,
  java.util.concurrent.TimeUnit unit)
  throws |java.lang.InterruptedException|
         
Transfers the element to a consumer if it is possible to do so before the 
timeout elapses. 

More precisely, transfers the specified element immediately if there exists a 
consumer already waiting to receive it (in 
(|java.util.concurrent.LinkedTransferQueue|) or timed 
poll(|java.util.concurrent.LinkedTransferQueue|) ), else inserts the specified 
element at the tail of this queue and waits until the element is received by a 
consumer, returningfalseif the specified wait time elapses before the element 
can be transferred. 




