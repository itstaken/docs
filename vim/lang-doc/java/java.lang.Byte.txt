*java.lang.Byte* *Byte* TheByteclass wraps a value of primitive typebytein an ob

public final class Byte
  extends    |java.lang.Number|
  implements |java.lang.Comparable|

|java.lang.Byte_Description|
|java.lang.Byte_Fields|
|java.lang.Byte_Constructors|
|java.lang.Byte_Methods|

================================================================================

*java.lang.Byte_Fields*
|byte_java.lang.Byte.MAX_VALUE|
|byte_java.lang.Byte.MIN_VALUE|
|int_java.lang.Byte.SIZE|
|java.lang.Class<java.lang.Byte>_java.lang.Byte.TYPE|

*java.lang.Byte_Constructors*
|java.lang.Byte(byte)|Constructs a newly allocatedByteobject that  represents t
|java.lang.Byte(String)|Constructs a newly allocatedByteobject that  represents

*java.lang.Byte_Methods*
|java.lang.Byte.byteValue()|Returns the value of thisByteas abyte.
|java.lang.Byte.compare(byte,byte)|Compares twobytevalues numerically.
|java.lang.Byte.compareTo(Byte)|Compares twoByteobjects numerically.
|java.lang.Byte.decode(String)|Decodes aStringinto aByte.
|java.lang.Byte.doubleValue()|Returns the value of thisByteas adouble.
|java.lang.Byte.equals(Object)|Compares this object to the specified object.
|java.lang.Byte.floatValue()|Returns the value of thisByteas afloat.
|java.lang.Byte.hashCode()|Returns a hash code for thisByte; equal to the resul
|java.lang.Byte.intValue()|Returns the value of thisByteas anint.
|java.lang.Byte.longValue()|Returns the value of thisByteas along.
|java.lang.Byte.parseByte(String)|Parses the string argument as a signed decima
|java.lang.Byte.parseByte(String,int)|Parses the string argument as a signedbyt
|java.lang.Byte.shortValue()|Returns the value of thisByteas ashort.
|java.lang.Byte.toString()|Returns aStringobject representing thisByte's value.
|java.lang.Byte.toString(byte)|Returns a newStringobject representing the  spec
|java.lang.Byte.valueOf(byte)|Returns aByteinstance representing the specifiedb
|java.lang.Byte.valueOf(String)|Returns aByteobject holding the value  given by
|java.lang.Byte.valueOf(String,int)|Returns aByteobject holding the value  extr

*java.lang.Byte_Description*

TheByteclass wraps a value of primitive typebytein an object. An object of 
typeBytecontains a single field whose type isbyte. 

In addition, this class provides several methods for converting abyteto 
aStringand aStringto abyte, as well as other constants and methods useful when 
dealing with abyte. 



*byte_java.lang.Byte.MAX_VALUE*

A constant holding the maximum value abytecan have, 27-1. 


*byte_java.lang.Byte.MIN_VALUE*

A constant holding the minimum value abytecan have, -27. 


*int_java.lang.Byte.SIZE*

The number of bits used to represent abytevalue in two's complement binary 
form. 


*java.lang.Class<java.lang.Byte>_java.lang.Byte.TYPE*

TheClassinstance representing the primitive typebyte. 



*java.lang.Byte(byte)*

public Byte(byte value)

Constructs a newly allocatedByteobject that represents the specifiedbytevalue. 

    value - the value to be represented by the {@code Byte}. 

*java.lang.Byte(String)*

public Byte(java.lang.String s)
  throws |java.lang.NumberFormatException|
         
Constructs a newly allocatedByteobject that represents thebytevalue indicated 
by theStringparameter. The string is converted to abytevalue in exactly the 
manner used by theparseBytemethod for radix 10. 

    s - the {@code String} to be converted to a {@code Byte} 

*java.lang.Byte.byteValue()*

public byte byteValue()

Returns the value of thisByteas abyte. 



*java.lang.Byte.compare(byte,byte)*

public static int compare(
  byte x,
  byte y)

Compares twobytevalues numerically. The value returned is identical to what 
would be returned by: 

Byte.valueOf(x).compareTo(Byte.valueOf(y)) 


    x - the first {@code byte} to compare 
    y - the second {@code byte} to compare 

    Returns: the value {@code 0} if {@code x == y}; a value less than {@code 0} if {@code x 
             y} 

*java.lang.Byte.compareTo(Byte)*

public int compareTo(java.lang.Byte anotherByte)

Compares twoByteobjects numerically. 


    anotherByte - the {@code Byte} to be compared. 

    Returns: the value {@code 0} if this {@code Byte} is equal to the argument {@code Byte}; 
             a value less than {@code 0} if this {@code Byte} is numerically 
             less than the argument {@code Byte}; and a value greater than 
             {@code 0} if this {@code Byte} is numerically greater than the 
             argument {@code Byte} (signed comparison). 

*java.lang.Byte.decode(String)*

public static |java.lang.Byte| decode(java.lang.String nm)
  throws |java.lang.NumberFormatException|
         
Decodes aStringinto aByte. Accepts decimal, hexadecimal, and octal numbers 
given by the following grammar: 



DecodableString: Signopt DecimalNumeral Signopt0xHexDigits Signopt0XHexDigits 
Signopt#HexDigits Signopt0OctalDigits 

Sign: -+ 

DecimalNumeral, HexDigits, and OctalDigits are as defined in section 3.10.1 of 
The Java Language Specification, except that underscores are not accepted 
between digits. 

The sequence of characters following an optional sign and/or radix specifier 
("0x", "0X", "#", or leading zero) is parsed as by theByte.parseBytemethod with 
the indicated radix (10, 16, or 8). This sequence of characters must represent 
a positive value or a (|java.lang.NumberFormatException|) will be thrown. The 
result is negated if first character of the specifiedStringis the minus sign. 
No whitespace characters are permitted in theString. 


    nm - the {@code String} to decode. 

    Returns: a {@code Byte} object holding the {@code byte} value represented by {@code nm} 

*java.lang.Byte.doubleValue()*

public double doubleValue()

Returns the value of thisByteas adouble. 



*java.lang.Byte.equals(Object)*

public boolean equals(java.lang.Object obj)

Compares this object to the specified object. The result istrueif and only if 
the argument is notnulland is aByteobject that contains the samebytevalue as 
this object. 


    obj - the object to compare with 

    Returns: {@code true} if the objects are the same; {@code false} otherwise. 

*java.lang.Byte.floatValue()*

public float floatValue()

Returns the value of thisByteas afloat. 



*java.lang.Byte.hashCode()*

public int hashCode()

Returns a hash code for thisByte; equal to the result of invokingintValue(). 



    Returns: a hash code value for this {@code Byte} 

*java.lang.Byte.intValue()*

public int intValue()

Returns the value of thisByteas anint. 



*java.lang.Byte.longValue()*

public long longValue()

Returns the value of thisByteas along. 



*java.lang.Byte.parseByte(String)*

public static byte parseByte(java.lang.String s)
  throws |java.lang.NumberFormatException|
         
Parses the string argument as a signed decimalbyte. The characters in the 
string must all be decimal digits, except that the first character may be an 
ASCII minus sign'-'('u002D') to indicate a negative value or an ASCII plus 
sign'+'('u002B') to indicate a positive value. The resultingbytevalue is 
returned, exactly as if the argument and the radix 10 were given as arguments 
to the (|java.lang.Byte|) method. 


    s - a {@code String} containing the {@code byte} representation to be parsed 

    Returns: the {@code byte} value represented by the argument in decimal 

*java.lang.Byte.parseByte(String,int)*

public static byte parseByte(
  java.lang.String s,
  int radix)
  throws |java.lang.NumberFormatException|
         
Parses the string argument as a signedbytein the radix specified by the second 
argument. The characters in the string must all be digits, of the specified 
radix (as determined by whether (|java.lang.Character|) returns a nonnegative 
value) except that the first character may be an ASCII minus sign'-'('u002D') 
to indicate a negative value or an ASCII plus sign'+'('u002B') to indicate a 
positive value. The resultingbytevalue is returned. 

An exception of typeNumberFormatExceptionis thrown if any of the following 
situations occurs: 

The first argument isnullor is a string of length zero. 

The radix is either smaller than (|java.lang.Character|) or larger than 
(|java.lang.Character|) . 

Any character of the string is not a digit of the specified radix, except that 
the first character may be a minus sign'-'('u002D') or plus sign'+'('u002B') 
provided that the string is longer than length 1. 

The value represented by the string is not a value of typebyte. 


    s - the {@code String} containing the {@code byte} representation to be parsed 
    radix - the radix to be used while parsing {@code s} 

    Returns: the {@code byte} value represented by the string argument in the specified 
             radix 

*java.lang.Byte.shortValue()*

public short shortValue()

Returns the value of thisByteas ashort. 



*java.lang.Byte.toString()*

public |java.lang.String| toString()

Returns aStringobject representing thisByte's value. The value is converted to 
signed decimal representation and returned as a string, exactly as if 
thebytevalue were given as an argument to the (|java.lang.Byte|) method. 



    Returns: a string representation of the value of this object in base10. 

*java.lang.Byte.toString(byte)*

public static |java.lang.String| toString(byte b)

Returns a newStringobject representing the specifiedbyte. The radix is assumed 
to be 10. 


    b - the {@code byte} to be converted 

    Returns: the string representation of the specified {@code byte} 

*java.lang.Byte.valueOf(byte)*

public static |java.lang.Byte| valueOf(byte b)

Returns aByteinstance representing the specifiedbytevalue. If a newByteinstance 
is not required, this method should generally be used in preference to the 
constructor (|java.lang.Byte|) , as this method is likely to yield 
significantly better space and time performance since all byte values are 
cached. 


    b - a byte value. 

    Returns: a {@code Byte} instance representing {@code b}. 

*java.lang.Byte.valueOf(String)*

public static |java.lang.Byte| valueOf(java.lang.String s)
  throws |java.lang.NumberFormatException|
         
Returns aByteobject holding the value given by the specifiedString. The 
argument is interpreted as representing a signed decimalbyte, exactly as if the 
argument were given to the (|java.lang.Byte|) method. The result is aByteobject 
that represents thebytevalue specified by the string. 

In other words, this method returns aByteobject equal to the value of: 

new Byte(Byte.parseByte(s)) 


    s - the string to be parsed 

    Returns: a {@code Byte} object holding the value represented by the string argument 

*java.lang.Byte.valueOf(String,int)*

public static |java.lang.Byte| valueOf(
  java.lang.String s,
  int radix)
  throws |java.lang.NumberFormatException|
         
Returns aByteobject holding the value extracted from the specifiedStringwhen 
parsed with the radix given by the second argument. The first argument is 
interpreted as representing a signedbytein the radix specified by the second 
argument, exactly as if the argument were given to the (|java.lang.Byte|) 
method. The result is aByteobject that represents thebytevalue specified by the 
string. 

In other words, this method returns aByteobject equal to the value of: 

new Byte(Byte.parseByte(s, radix)) 


    s - the string to be parsed 
    radix - the radix to be used in interpreting {@code s} 

    Returns: a {@code Byte} object holding the value represented by the string argument in 
             the specified radix. 


