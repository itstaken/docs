*java.nio.file.attribute.UserPrincipalLookupService* *UserPrincipalLookupService* 

public abstract class UserPrincipalLookupService
  extends    |java.lang.Object|

|java.nio.file.attribute.UserPrincipalLookupService_Description|
|java.nio.file.attribute.UserPrincipalLookupService_Fields|
|java.nio.file.attribute.UserPrincipalLookupService_Constructors|
|java.nio.file.attribute.UserPrincipalLookupService_Methods|

================================================================================

*java.nio.file.attribute.UserPrincipalLookupService_Constructors*
|java.nio.file.attribute.UserPrincipalLookupService()|Initializes a new instanc

*java.nio.file.attribute.UserPrincipalLookupService_Methods*
|java.nio.file.attribute.UserPrincipalLookupService.lookupPrincipalByGroupName(String)|
|java.nio.file.attribute.UserPrincipalLookupService.lookupPrincipalByName(String)|

*java.nio.file.attribute.UserPrincipalLookupService_Description*

An object to lookup user and group principals by name. A 
(|java.nio.file.attribute.UserPrincipal|) represents an identity that may be 
used to determine access rights to objects in a file system. A 
(|java.nio.file.attribute.GroupPrincipal|) represents a group identity. 
AUserPrincipalLookupServicedefines methods to lookup identities by name or 
group name (which are typically user or account names). Whether names and group 
names are case sensitive or not depends on the implementation. The exact 
definition of a group is implementation specific but typically a group 
represents an identity created for administrative purposes so as to determine 
the access rights for the members of the group. In particular it is 
implementation specific if the namespace for names and groups is the same or is 
distinct. To ensure consistent and correct behavior across platforms it is 
recommended that this API be used as if the namespaces are distinct. In other 
words, the 
lookupPrincipalByName(|java.nio.file.attribute.UserPrincipalLookupService|) 
should be used to lookup users, and 
lookupPrincipalByGroupName(|java.nio.file.attribute.UserPrincipalLookupService|)
should be used to lookup groups. 



*java.nio.file.attribute.UserPrincipalLookupService()*

protected UserPrincipalLookupService()

Initializes a new instance of this class. 


*java.nio.file.attribute.UserPrincipalLookupService.lookupPrincipalByGroupName(String)*

public abstract |java.nio.file.attribute.GroupPrincipal| lookupPrincipalByGroupName(java.lang.String group)
  throws |java.io.IOException|
         
Lookup a group principal by group name. 

Where an implementation does not support any notion of group then this method 
always throws (|java.nio.file.attribute.UserPrincipalNotFoundException|) . 
Where the namespace for user accounts and groups is the same, then this method 
is identical to invoking 
lookupPrincipalByName(|java.nio.file.attribute.UserPrincipalLookupService|) . 


    group - the string representation of the group to lookup 

    Returns: a group principal 

*java.nio.file.attribute.UserPrincipalLookupService.lookupPrincipalByName(String)*

public abstract |java.nio.file.attribute.UserPrincipal| lookupPrincipalByName(java.lang.String name)
  throws |java.io.IOException|
         
Lookup a user principal by name. 


    name - the string representation of the user principal to lookup 

    Returns: a user principal 


