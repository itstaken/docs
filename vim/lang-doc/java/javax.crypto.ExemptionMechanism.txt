*javax.crypto.ExemptionMechanism* *ExemptionMechanism* This class provides the f

public class ExemptionMechanism
  extends    |java.lang.Object|

|javax.crypto.ExemptionMechanism_Description|
|javax.crypto.ExemptionMechanism_Fields|
|javax.crypto.ExemptionMechanism_Constructors|
|javax.crypto.ExemptionMechanism_Methods|

================================================================================

*javax.crypto.ExemptionMechanism_Constructors*
|javax.crypto.ExemptionMechanism(ExemptionMechanismSpi,Provider,String)|Creates

*javax.crypto.ExemptionMechanism_Methods*
|javax.crypto.ExemptionMechanism.finalize()|Ensures that the key stored away by
|javax.crypto.ExemptionMechanism.genExemptionBlob()|Generates the exemption mec
|javax.crypto.ExemptionMechanism.genExemptionBlob(byte[])|Generates the exempti
|javax.crypto.ExemptionMechanism.genExemptionBlob(byte[],int)|Generates the exe
|javax.crypto.ExemptionMechanism.getInstance(String)|Returns an ExemptionMechan
|javax.crypto.ExemptionMechanism.getInstance(String,Provider)|Returns an Exempt
|javax.crypto.ExemptionMechanism.getInstance(String,String)|Returns an Exemptio
|javax.crypto.ExemptionMechanism.getName()|Returns the exemption mechanism name
|javax.crypto.ExemptionMechanism.getOutputSize(int)|Returns the length in bytes
|javax.crypto.ExemptionMechanism.getProvider()|Returns the provider of this Exe
|javax.crypto.ExemptionMechanism.init(Key)|Initializes this exemption mechanism
|javax.crypto.ExemptionMechanism.init(Key,AlgorithmParameters)|Initializes this
|javax.crypto.ExemptionMechanism.init(Key,AlgorithmParameterSpec)|Initializes t
|javax.crypto.ExemptionMechanism.isCryptoAllowed(Key)|Returns whether the resul

*javax.crypto.ExemptionMechanism_Description*

This class provides the functionality of an exemption mechanism, examples of 
which are key recovery, key weakening, and key escrow. 

Applications or applets that use an exemption mechanism may be granted stronger 
encryption capabilities than those which don't. 



*javax.crypto.ExemptionMechanism(ExemptionMechanismSpi,Provider,String)*

protected ExemptionMechanism(
  javax.crypto.ExemptionMechanismSpi exmechSpi,
  java.security.Provider provider,
  java.lang.String mechanism)

Creates a ExemptionMechanism object. 

    exmechSpi - the delegate 
    provider - the provider 
    mechanism - the exemption mechanism 

*javax.crypto.ExemptionMechanism.finalize()*

protected void finalize()

Ensures that the key stored away by this ExemptionMechanism object will be 
wiped out when there are no more references to it. 



*javax.crypto.ExemptionMechanism.genExemptionBlob()*

public final byte[] genExemptionBlob()
  throws |javax.crypto.ExemptionMechanismException|
         |java.lang.IllegalStateException|
         
Generates the exemption mechanism key blob. 



    Returns: the new buffer with the result key blob. 

*javax.crypto.ExemptionMechanism.genExemptionBlob(byte[])*

public final int genExemptionBlob(byte[] output)
  throws |javax.crypto.ExemptionMechanismException|
         |java.lang.IllegalStateException|
         |javax.crypto.ShortBufferException|
         
Generates the exemption mechanism key blob, and stores the result in the output 
buffer. 

If the output buffer is too small to hold the result, a ShortBufferException is 
thrown. In this case, repeat this call with a larger output buffer. Use 
getOutputSize(|javax.crypto.ExemptionMechanism|) to determine how big the 
output buffer should be. 


    output - the buffer for the result 

    Returns: the number of bytes stored in output 

*javax.crypto.ExemptionMechanism.genExemptionBlob(byte[],int)*

public final int genExemptionBlob(
  byte[] output,
  int outputOffset)
  throws |javax.crypto.ExemptionMechanismException|
         |java.lang.IllegalStateException|
         |javax.crypto.ShortBufferException|
         
Generates the exemption mechanism key blob, and stores the result in the output 
buffer, starting at outputOffset inclusive. 

If the output buffer is too small to hold the result, a ShortBufferException is 
thrown. In this case, repeat this call with a larger output buffer. Use 
getOutputSize(|javax.crypto.ExemptionMechanism|) to determine how big the 
output buffer should be. 


    output - the buffer for the result 
    outputOffset - the offset in output where the result is stored 

    Returns: the number of bytes stored in output 

*javax.crypto.ExemptionMechanism.getInstance(String)*

public static final |javax.crypto.ExemptionMechanism| getInstance(java.lang.String algorithm)
  throws |java.security.NoSuchAlgorithmException|
         
Returns an ExemptionMechanism object that implements the specified exemption 
mechanism algorithm. 

This method traverses the list of registered security Providers, starting with 
the most preferred Provider. A new ExemptionMechanism object encapsulating the 
ExemptionMechanismSpi implementation from the first Provider that supports the 
specified algorithm is returned. 

Note that the list of registered providers may be retrieved via the 
Security.getProviders()(|java.security.Security|) method. 


    algorithm - the standard name of the requested exemption mechanism. See the 
       ExemptionMechanism section in the 

Java Cryptography Architecture Standard Algorithm Name Documentation for 
       information about standard exemption mechanism names. 

    Returns: the new ExemptionMechanism object. 

*javax.crypto.ExemptionMechanism.getInstance(String,Provider)*

public static final |javax.crypto.ExemptionMechanism| getInstance(
  java.lang.String algorithm,
  java.security.Provider provider)
  throws |java.security.NoSuchAlgorithmException|
         
Returns an ExemptionMechanism object that implements the specified exemption 
mechanism algorithm. 

A new ExemptionMechanism object encapsulating the ExemptionMechanismSpi 
implementation from the specified Provider object is returned. Note that the 
specified Provider object does not have to be registered in the provider list. 


    algorithm - the standard name of the requested exemption mechanism. See the 
       ExemptionMechanism section in the 

Java Cryptography Architecture Standard Algorithm Name Documentation for 
       information about standard exemption mechanism names. 
    provider - the provider. 

    Returns: the new ExemptionMechanism object. 

*javax.crypto.ExemptionMechanism.getInstance(String,String)*

public static final |javax.crypto.ExemptionMechanism| getInstance(
  java.lang.String algorithm,
  java.lang.String provider)
  throws |java.security.NoSuchAlgorithmException|
         |java.security.NoSuchProviderException|
         
Returns an ExemptionMechanism object that implements the specified exemption 
mechanism algorithm. 

A new ExemptionMechanism object encapsulating the ExemptionMechanismSpi 
implementation from the specified provider is returned. The specified provider 
must be registered in the security provider list. 

Note that the list of registered providers may be retrieved via the 
Security.getProviders()(|java.security.Security|) method. 


    algorithm - the standard name of the requested exemption mechanism. See the 
       ExemptionMechanism section in the 

Java Cryptography Architecture Standard Algorithm Name Documentation for 
       information about standard exemption mechanism names. 
    provider - the name of the provider. 

    Returns: the new ExemptionMechanism object. 

*javax.crypto.ExemptionMechanism.getName()*

public final |java.lang.String| getName()

Returns the exemption mechanism name of this ExemptionMechanism object. 

This is the same name that was specified in one of the getInstance calls that 
created this ExemptionMechanism object. 



    Returns: the exemption mechanism name of this ExemptionMechanism object. 

*javax.crypto.ExemptionMechanism.getOutputSize(int)*

public final int getOutputSize(int inputLen)
  throws |java.lang.IllegalStateException|
         
Returns the length in bytes that an output buffer would need to be in order to 
hold the result of the next genExemptionBlob(|javax.crypto.ExemptionMechanism|) 
operation, given the input length inputLen (in bytes). 

The actual output length of the next 
genExemptionBlob(|javax.crypto.ExemptionMechanism|) call may be smaller than 
the length returned by this method. 


    inputLen - the input length (in bytes) 

    Returns: the required output buffer size (in bytes) 

*javax.crypto.ExemptionMechanism.getProvider()*

public final |java.security.Provider| getProvider()

Returns the provider of this ExemptionMechanism object. 



    Returns: the provider of this ExemptionMechanism object. 

*javax.crypto.ExemptionMechanism.init(Key)*

public final void init(java.security.Key key)
  throws |javax.crypto.ExemptionMechanismException|
         |java.security.InvalidKeyException|
         
Initializes this exemption mechanism with a key. 

If this exemption mechanism requires any algorithm parameters that cannot be 
derived from the given key, the underlying exemption mechanism implementation 
is supposed to generate the required parameters itself (using provider-specific 
default values); in the case that algorithm parameters must be specified by the 
caller, an InvalidKeyException is raised. 


    key - the key for this exemption mechanism 

*javax.crypto.ExemptionMechanism.init(Key,AlgorithmParameters)*

public final void init(
  java.security.Key key,
  java.security.AlgorithmParameters params)
  throws |javax.crypto.ExemptionMechanismException|
         |java.security.InvalidAlgorithmParameterException|
         |java.security.InvalidKeyException|
         
Initializes this exemption mechanism with a key and a set of algorithm 
parameters. 

If this exemption mechanism requires any algorithm parameters and params is 
null, the underlying exemption mechanism implementation is supposed to generate 
the required parameters itself (using provider-specific default values); in the 
case that algorithm parameters must be specified by the caller, an 
InvalidAlgorithmParameterException is raised. 


    key - the key for this exemption mechanism 
    params - the algorithm parameters 

*javax.crypto.ExemptionMechanism.init(Key,AlgorithmParameterSpec)*

public final void init(
  java.security.Key key,
  java.security.spec.AlgorithmParameterSpec params)
  throws |javax.crypto.ExemptionMechanismException|
         |java.security.InvalidAlgorithmParameterException|
         |java.security.InvalidKeyException|
         
Initializes this exemption mechanism with a key and a set of algorithm 
parameters. 

If this exemption mechanism requires any algorithm parameters and params is 
null, the underlying exemption mechanism implementation is supposed to generate 
the required parameters itself (using provider-specific default values); in the 
case that algorithm parameters must be specified by the caller, an 
InvalidAlgorithmParameterException is raised. 


    key - the key for this exemption mechanism 
    params - the algorithm parameters 

*javax.crypto.ExemptionMechanism.isCryptoAllowed(Key)*

public final boolean isCryptoAllowed(java.security.Key key)
  throws |javax.crypto.ExemptionMechanismException|
         
Returns whether the result blob has been generated successfully by this 
exemption mechanism. 

The method also makes sure that the key passed in is the same as the one this 
exemption mechanism used in initializing and generating phases. 


    key - the key the crypto is going to use. 

    Returns: whether the result blob of the same key has been generated successfully by this 
             exemption mechanism; false if key is null. 


