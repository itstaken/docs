*java.nio.file.attribute.BasicFileAttributes* *BasicFileAttributes* Basic attrib

public interface interface BasicFileAttributes


|java.nio.file.attribute.BasicFileAttributes_Description|
|java.nio.file.attribute.BasicFileAttributes_Fields|
|java.nio.file.attribute.BasicFileAttributes_Constructors|
|java.nio.file.attribute.BasicFileAttributes_Methods|

================================================================================

*java.nio.file.attribute.BasicFileAttributes_Methods*
|java.nio.file.attribute.BasicFileAttributes.creationTime()|Returns the creatio
|java.nio.file.attribute.BasicFileAttributes.fileKey()|Returns an object that u
|java.nio.file.attribute.BasicFileAttributes.isDirectory()|Tells whether the fi
|java.nio.file.attribute.BasicFileAttributes.isOther()|Tells whether the file i
|java.nio.file.attribute.BasicFileAttributes.isRegularFile()|Tells whether the 
|java.nio.file.attribute.BasicFileAttributes.isSymbolicLink()|Tells whether the
|java.nio.file.attribute.BasicFileAttributes.lastAccessTime()|Returns the time 
|java.nio.file.attribute.BasicFileAttributes.lastModifiedTime()|Returns the tim
|java.nio.file.attribute.BasicFileAttributes.size()|Returns the size of the fil

*java.nio.file.attribute.BasicFileAttributes_Description*

Basic attributes associated with a file in a file system. 

Basic file attributes are attributes that are common to many file systems and 
consist of mandatory and optional file attributes as defined by this interface. 

Usage Example: 

Path file = ... BasicFileAttributes attrs = Files.readAttributes(file, 
BasicFileAttributes.class); 



*java.nio.file.attribute.BasicFileAttributes.creationTime()*

public |java.nio.file.attribute.FileTime| creationTime()

Returns the creation time. The creation time is the time that the file was 
created. 

If the file system implementation does not support a time stamp to indicate the 
time when the file was created then this method returns an implementation 
specific default value, typically the 
last-modified-time(|java.nio.file.attribute.BasicFileAttributes|) or 
aFileTimerepresenting the epoch (1970-01-01T00:00:00Z). 



    Returns: a {@code FileTime} representing the time the file was created 

*java.nio.file.attribute.BasicFileAttributes.fileKey()*

public |java.lang.Object| fileKey()

Returns an object that uniquely identifies the given file, ornullif a file key 
is not available. On some platforms or file systems it is possible to use an 
identifier, or a combination of identifiers to uniquely identify a file. Such 
identifiers are important for operations such as file tree traversal in file 
systems that support symbolic links or file systems that allow a file to be an 
entry in more than one directory. On UNIX file systems, for example, the device 
ID and inode are commonly used for such purposes. 

The file key returned by this method can only be guaranteed to be unique if the 
file system and files remain static. Whether a file system re-uses identifiers 
after a file is deleted is implementation dependent and therefore unspecified. 

File keys returned by this method can be compared for equality and are suitable 
for use in collections. If the file system and files remain static, and two 
files are the same(|java.nio.file.Files|) with non-nullfile keys, then their 
file keys are equal. 



*java.nio.file.attribute.BasicFileAttributes.isDirectory()*

public boolean isDirectory()

Tells whether the file is a directory. 



*java.nio.file.attribute.BasicFileAttributes.isOther()*

public boolean isOther()

Tells whether the file is something other than a regular file, directory, or 
symbolic link. 



*java.nio.file.attribute.BasicFileAttributes.isRegularFile()*

public boolean isRegularFile()

Tells whether the file is a regular file with opaque content. 



*java.nio.file.attribute.BasicFileAttributes.isSymbolicLink()*

public boolean isSymbolicLink()

Tells whether the file is a symbolic link. 



*java.nio.file.attribute.BasicFileAttributes.lastAccessTime()*

public |java.nio.file.attribute.FileTime| lastAccessTime()

Returns the time of last access. 

If the file system implementation does not support a time stamp to indicate the 
time of last access then this method returns an implementation specific default 
value, typically the 
last-modified-time(|java.nio.file.attribute.BasicFileAttributes|) or 
aFileTimerepresenting the epoch (1970-01-01T00:00:00Z). 



    Returns: a {@code FileTime} representing the time of last access 

*java.nio.file.attribute.BasicFileAttributes.lastModifiedTime()*

public |java.nio.file.attribute.FileTime| lastModifiedTime()

Returns the time of last modification. 

If the file system implementation does not support a time stamp to indicate the 
time of last modification then this method returns an implementation specific 
default value, typically aFileTimerepresenting the epoch 
(1970-01-01T00:00:00Z). 



    Returns: a {@code FileTime} representing the time the file was last modified 

*java.nio.file.attribute.BasicFileAttributes.size()*

public long size()

Returns the size of the file (in bytes). The size may differ from the actual 
size on the file system due to compression, support for sparse files, or other 
reasons. The size of files that are not 
regular(|java.nio.file.attribute.BasicFileAttributes|) files is implementation 
specific and therefore unspecified. 



    Returns: the file size, in bytes 


