*java.net.URLClassLoader* *URLClassLoader* This class loader is used to load cla

public class URLClassLoader
  extends    |java.security.SecureClassLoader|
  implements |java.io.Closeable|

|java.net.URLClassLoader_Description|
|java.net.URLClassLoader_Fields|
|java.net.URLClassLoader_Constructors|
|java.net.URLClassLoader_Methods|

================================================================================

*java.net.URLClassLoader_Constructors*
|java.net.URLClassLoader(URL[])|Constructs a new URLClassLoader for the specifi
|java.net.URLClassLoader(URL[],ClassLoader)|Constructs a new URLClassLoader for
|java.net.URLClassLoader(URL[],ClassLoader,URLStreamHandlerFactory)|Constructs 

*java.net.URLClassLoader_Methods*
|java.net.URLClassLoader.addURL(URL)|Appends the specified URL to the list of U
|java.net.URLClassLoader.close()|Closes this URLClassLoader, so that it can no 
|java.net.URLClassLoader.definePackage(String,Manifest,URL)|Defines a new packa
|java.net.URLClassLoader.findClass(String)|Finds and loads the class with the s
|java.net.URLClassLoader.findResource(String)|Finds the resource with the speci
|java.net.URLClassLoader.findResources(String)|Returns an Enumeration of URLs r
|java.net.URLClassLoader.getPermissions(CodeSource)|Returns the permissions for
|java.net.URLClassLoader.getResourceAsStream(String)|Returns an input stream fo
|java.net.URLClassLoader.getURLs()|Returns the search path of URLs for loading 
|java.net.URLClassLoader.newInstance(URL[])|Creates a new instance of URLClassL
|java.net.URLClassLoader.newInstance(URL[],ClassLoader)|Creates a new instance 

*java.net.URLClassLoader_Description*

This class loader is used to load classes and resources from a search path of 
URLs referring to both JAR files and directories. Any URL that ends with a '/' 
is assumed to refer to a directory. Otherwise, the URL is assumed to refer to a 
JAR file which will be opened as needed. 

The AccessControlContext of the thread that created the instance of 
URLClassLoader will be used when subsequently loading classes and resources. 

The classes that are loaded are by default granted permission only to access 
the URLs specified when the URLClassLoader was created. 



*java.net.URLClassLoader(URL[])*

public URLClassLoader(java.net.URL[] urls)

Constructs a new URLClassLoader for the specified URLs using the default 
delegation parent ClassLoader. The URLs will be searched in the order specified 
for classes and resources after first searching in the parent class loader. Any 
URL that ends with a '/' is assumed to refer to a directory. Otherwise, the URL 
is assumed to refer to a JAR file which will be downloaded and opened as 
needed. 

If there is a security manager, this method first calls the security manager's 
checkCreateClassLoader method to ensure creation of a class loader is allowed. 

    urls - the URLs from which to load classes and resources 

*java.net.URLClassLoader(URL[],ClassLoader)*

public URLClassLoader(
  java.net.URL[] urls,
  java.lang.ClassLoader parent)

Constructs a new URLClassLoader for the given URLs. The URLs will be searched 
in the order specified for classes and resources after first searching in the 
specified parent class loader. Any URL that ends with a '/' is assumed to refer 
to a directory. Otherwise, the URL is assumed to refer to a JAR file which will 
be downloaded and opened as needed. 

If there is a security manager, this method first calls the security 
manager'scheckCreateClassLoadermethod to ensure creation of a class loader is 
allowed. 

    urls - the URLs from which to load classes and resources 
    parent - the parent class loader for delegation 

*java.net.URLClassLoader(URL[],ClassLoader,URLStreamHandlerFactory)*

public URLClassLoader(
  java.net.URL[] urls,
  java.lang.ClassLoader parent,
  java.net.URLStreamHandlerFactory factory)

Constructs a new URLClassLoader for the specified URLs, parent class loader, 
and URLStreamHandlerFactory. The parent argument will be used as the parent 
class loader for delegation. The factory argument will be used as the stream 
handler factory to obtain protocol handlers when creating new jar URLs. 

If there is a security manager, this method first calls the security manager's 
checkCreateClassLoader method to ensure creation of a class loader is allowed. 

    urls - the URLs from which to load classes and resources 
    parent - the parent class loader for delegation 
    factory - the URLStreamHandlerFactory to use when creating URLs 

*java.net.URLClassLoader.addURL(URL)*

protected void addURL(java.net.URL url)

Appends the specified URL to the list of URLs to search for classes and 
resources. 

If the URL specified is null or is already in the list of URLs, or if this 
loader is closed, then invoking this method has no effect. 


    url - the URL to be added to the search path of URLs 

*java.net.URLClassLoader.close()*

public void close()
  throws |java.io.IOException|
         
Closes this URLClassLoader, so that it can no longer be used to load new 
classes or resources that are defined by this loader. Classes and resources 
defined by any of this loader's parents in the delegation hierarchy are still 
accessible. Also, any classes or resources that are already loaded, are still 
accessible. 

In the case of jar: and file: URLs, it also closes any files that were opened 
by it. If another thread is loading a class when theclosemethod is invoked, 
then the result of that load is undefined. 

The method makes a best effort attempt to close all opened files, by catching 
(|java.io.IOException|) s internally. Unchecked exceptions and errors are not 
caught. Calling close on an already closed loader has no effect. 



*java.net.URLClassLoader.definePackage(String,Manifest,URL)*

protected |java.lang.Package| definePackage(
  java.lang.String name,
  java.util.jar.Manifest man,
  java.net.URL url)
  throws |java.lang.IllegalArgumentException|
         
Defines a new package by name in this ClassLoader. The attributes contained in 
the specified Manifest will be used to obtain package version and sealing 
information. For sealed packages, the additional URL specifies the code source 
URL from which the package was loaded. 


    name - the package name 
    man - the Manifest containing package version and sealing information 
    url - the code source url for the package, or null if none 

    Returns: the newly defined Package object 

*java.net.URLClassLoader.findClass(String)*

protected |java.lang.Class|<?> findClass(java.lang.String name)
  throws |java.lang.ClassNotFoundException|
         
Finds and loads the class with the specified name from the URL search path. Any 
URLs referring to JAR files are loaded and opened as needed until the class is 
found. 


    name - the name of the class 

    Returns: the resulting class 

*java.net.URLClassLoader.findResource(String)*

public |java.net.URL| findResource(java.lang.String name)

Finds the resource with the specified name on the URL search path. 


    name - the name of the resource 

    Returns: a URL for the resource, or null if the resource could not be found, or if the 
             loader is closed. 

*java.net.URLClassLoader.findResources(String)*

public |java.util.Enumeration|<URL> findResources(java.lang.String name)
  throws |java.io.IOException|
         
Returns an Enumeration of URLs representing all of the resources on the URL 
search path having the specified name. 


    name - the resource name 

    Returns: an Enumeration of URLs If the loader is closed, the Enumeration will be empty. 

*java.net.URLClassLoader.getPermissions(CodeSource)*

protected |java.security.PermissionCollection| getPermissions(java.security.CodeSource codesource)

Returns the permissions for the given codesource object. The implementation of 
this method first calls super.getPermissions and then adds permissions based on 
the URL of the codesource. 

If the protocol of this URL is "jar", then the permission granted is based on 
the permission that is required by the URL of the Jar file. 

If the protocol is "file" and there is an authority component, then permission 
to connect to and accept connections from that authority may be granted. If the 
protocol is "file" and the path specifies a file, then permission to read that 
file is granted. If protocol is "file" and the path is a directory, permission 
is granted to read all files and (recursively) all files and subdirectories 
contained in that directory. 

If the protocol is not "file", then permission to connect to and accept 
connections from the URL's host is granted. 


    codesource - the codesource 

    Returns: the permissions granted to the codesource 

*java.net.URLClassLoader.getResourceAsStream(String)*

public |java.io.InputStream| getResourceAsStream(java.lang.String name)

Returns an input stream for reading the specified resource. If this loader is 
closed, then any resources opened by this method will be closed. 

The search order is described in the documentation for 
(|java.net.URLClassLoader|) . 


    name - The resource name 

    Returns: An input stream for reading the resource, or null if the resource could not be 
             found 

*java.net.URLClassLoader.getURLs()*

public |java.net.URL|[] getURLs()

Returns the search path of URLs for loading classes and resources. This 
includes the original list of URLs specified to the constructor, along with any 
URLs subsequently appended by the addURL() method. 



    Returns: the search path of URLs for loading classes and resources. 

*java.net.URLClassLoader.newInstance(URL[])*

public static |java.net.URLClassLoader| newInstance(java.net.URL[] urls)

Creates a new instance of URLClassLoader for the specified URLs and default 
parent class loader. If a security manager is installed, the loadClass method 
of the URLClassLoader returned by this method will invoke the 
SecurityManager.checkPackageAccess before loading the class. 


    urls - the URLs to search for classes and resources 

    Returns: the resulting class loader 

*java.net.URLClassLoader.newInstance(URL[],ClassLoader)*

public static |java.net.URLClassLoader| newInstance(
  java.net.URL[] urls,
  java.lang.ClassLoader parent)

Creates a new instance of URLClassLoader for the specified URLs and parent 
class loader. If a security manager is installed, the loadClass method of the 
URLClassLoader returned by this method will invoke the 
SecurityManager.checkPackageAccess method before loading the class. 


    urls - the URLs to search for classes and resources 
    parent - the parent class loader for delegation 

    Returns: the resulting class loader 


