*javax.net.ssl.TrustManagerFactory* *TrustManagerFactory* This class acts as a f

public class TrustManagerFactory
  extends    |java.lang.Object|

|javax.net.ssl.TrustManagerFactory_Description|
|javax.net.ssl.TrustManagerFactory_Fields|
|javax.net.ssl.TrustManagerFactory_Constructors|
|javax.net.ssl.TrustManagerFactory_Methods|

================================================================================

*javax.net.ssl.TrustManagerFactory_Constructors*
|javax.net.ssl.TrustManagerFactory(TrustManagerFactorySpi,Provider,String)|Crea

*javax.net.ssl.TrustManagerFactory_Methods*
|javax.net.ssl.TrustManagerFactory.getAlgorithm()|Returns the algorithm name of
|javax.net.ssl.TrustManagerFactory.getDefaultAlgorithm()|Obtains the default Tr
|javax.net.ssl.TrustManagerFactory.getInstance(String)|Returns a TrustManagerFa
|javax.net.ssl.TrustManagerFactory.getInstance(String,Provider)|Returns a Trust
|javax.net.ssl.TrustManagerFactory.getInstance(String,String)|Returns a TrustMa
|javax.net.ssl.TrustManagerFactory.getProvider()|Returns the provider of this T
|javax.net.ssl.TrustManagerFactory.getTrustManagers()|Returns one trust manager
|javax.net.ssl.TrustManagerFactory.init(KeyStore)|Initializes this factory with
|javax.net.ssl.TrustManagerFactory.init(ManagerFactoryParameters)|Initializes t

*javax.net.ssl.TrustManagerFactory_Description*

This class acts as a factory for trust managers based on a source of trust 
material. Each trust manager manages a specific type of trust material for use 
by secure sockets. The trust material is based on a KeyStore and/or provider 
specific sources. 



*javax.net.ssl.TrustManagerFactory(TrustManagerFactorySpi,Provider,String)*

protected TrustManagerFactory(
  javax.net.ssl.TrustManagerFactorySpi factorySpi,
  java.security.Provider provider,
  java.lang.String algorithm)

Creates a TrustManagerFactory object. 

    factorySpi - the delegate 
    provider - the provider 
    algorithm - the algorithm 

*javax.net.ssl.TrustManagerFactory.getAlgorithm()*

public final |java.lang.String| getAlgorithm()

Returns the algorithm name of this TrustManagerFactory object. 

This is the same name that was specified in one of the getInstance calls that 
created this TrustManagerFactory object. 



    Returns: the algorithm name of this TrustManagerFactory object 

*javax.net.ssl.TrustManagerFactory.getDefaultAlgorithm()*

public static final |java.lang.String| getDefaultAlgorithm()

Obtains the default TrustManagerFactory algorithm name. 

The default TrustManager can be changed at runtime by setting the value of the 
"ssl.TrustManagerFactory.algorithm" security property (set in the Java security 
properties file or by calling (|java.security.Security|) ) to the desired 
algorithm name. 



    Returns: the default algorithm name as specified in the Java security properties, or an 
             implementation-specific default if no such property exists. 

*javax.net.ssl.TrustManagerFactory.getInstance(String)*

public static final |javax.net.ssl.TrustManagerFactory| getInstance(java.lang.String algorithm)
  throws |java.security.NoSuchAlgorithmException|
         
Returns a TrustManagerFactory object that acts as a factory for trust managers. 

This method traverses the list of registered security Providers, starting with 
the most preferred Provider. A new TrustManagerFactory object encapsulating the 
TrustManagerFactorySpi implementation from the first Provider that supports the 
specified algorithm is returned. 

Note that the list of registered providers may be retrieved via the 
Security.getProviders()(|java.security.Security|) method. 


    algorithm - the standard name of the requested trust management algorithm. See the Java 
       Secure Socket Extension Reference Guide for information about standard 
       algorithm names. 

    Returns: the new TrustManagerFactory object. 

*javax.net.ssl.TrustManagerFactory.getInstance(String,Provider)*

public static final |javax.net.ssl.TrustManagerFactory| getInstance(
  java.lang.String algorithm,
  java.security.Provider provider)
  throws |java.security.NoSuchAlgorithmException|
         
Returns a TrustManagerFactory object that acts as a factory for trust managers. 

A new TrustManagerFactory object encapsulating the TrustManagerFactorySpi 
implementation from the specified Provider object is returned. Note that the 
specified Provider object does not have to be registered in the provider list. 


    algorithm - the standard name of the requested trust management algorithm. See the Java 
       Secure Socket Extension Reference Guide for information about standard 
       algorithm names. 
    provider - an instance of the provider. 

    Returns: the new TrustManagerFactory object. 

*javax.net.ssl.TrustManagerFactory.getInstance(String,String)*

public static final |javax.net.ssl.TrustManagerFactory| getInstance(
  java.lang.String algorithm,
  java.lang.String provider)
  throws |java.security.NoSuchAlgorithmException|
         |java.security.NoSuchProviderException|
         
Returns a TrustManagerFactory object that acts as a factory for trust managers. 

A new KeyManagerFactory object encapsulating the KeyManagerFactorySpi 
implementation from the specified provider is returned. The specified provider 
must be registered in the security provider list. 

Note that the list of registered providers may be retrieved via the 
Security.getProviders()(|java.security.Security|) method. 


    algorithm - the standard name of the requested trust management algorithm. See the Java 
       Secure Socket Extension Reference Guide for information about standard 
       algorithm names. 
    provider - the name of the provider. 

    Returns: the new TrustManagerFactory object 

*javax.net.ssl.TrustManagerFactory.getProvider()*

public final |java.security.Provider| getProvider()

Returns the provider of this TrustManagerFactory object. 



    Returns: the provider of this TrustManagerFactory object 

*javax.net.ssl.TrustManagerFactory.getTrustManagers()*

public final |javax.net.ssl.TrustManager|[] getTrustManagers()

Returns one trust manager for each type of trust material. 



    Returns: the trust managers 

*javax.net.ssl.TrustManagerFactory.init(KeyStore)*

public final void init(java.security.KeyStore ks)
  throws |java.security.KeyStoreException|
         
Initializes this factory with a source of certificate authorities and related 
trust material. 

The provider typically uses a KeyStore as a basis for making trust decisions. 

For more flexible initialization, please see 
(|javax.net.ssl.TrustManagerFactory|) . 


    ks - the key store, or null 

*javax.net.ssl.TrustManagerFactory.init(ManagerFactoryParameters)*

public final void init(javax.net.ssl.ManagerFactoryParameters spec)
  throws |java.security.InvalidAlgorithmParameterException|
         
Initializes this factory with a source of provider-specific trust material. 

In some cases, initialization parameters other than a keystore may be needed by 
a provider. Users of that particular provider are expected to pass an 
implementation of the appropriate ManagerFactoryParameters as defined by the 
provider. The provider can then call the specified methods in the 
ManagerFactoryParameters implementation to obtain the needed information. 


    spec - an implementation of a provider-specific parameter specification 


