*javax.net.ssl.KeyManagerFactory* *KeyManagerFactory* This class acts as a facto

public class KeyManagerFactory
  extends    |java.lang.Object|

|javax.net.ssl.KeyManagerFactory_Description|
|javax.net.ssl.KeyManagerFactory_Fields|
|javax.net.ssl.KeyManagerFactory_Constructors|
|javax.net.ssl.KeyManagerFactory_Methods|

================================================================================

*javax.net.ssl.KeyManagerFactory_Constructors*
|javax.net.ssl.KeyManagerFactory(KeyManagerFactorySpi,Provider,String)|Creates 

*javax.net.ssl.KeyManagerFactory_Methods*
|javax.net.ssl.KeyManagerFactory.getAlgorithm()|Returns the algorithm name of t
|javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm()|Obtains the default KeyM
|javax.net.ssl.KeyManagerFactory.getInstance(String)|Returns a KeyManagerFactor
|javax.net.ssl.KeyManagerFactory.getInstance(String,Provider)|Returns a KeyMana
|javax.net.ssl.KeyManagerFactory.getInstance(String,String)|Returns a KeyManage
|javax.net.ssl.KeyManagerFactory.getKeyManagers()|Returns one key manager for e
|javax.net.ssl.KeyManagerFactory.getProvider()|Returns the provider of this Key
|javax.net.ssl.KeyManagerFactory.init(KeyStore,char[])|Initializes this factory
|javax.net.ssl.KeyManagerFactory.init(ManagerFactoryParameters)|Initializes thi

*javax.net.ssl.KeyManagerFactory_Description*

This class acts as a factory for key managers based on a source of key 
material. Each key manager manages a specific type of key material for use by 
secure sockets. The key material is based on a KeyStore and/or provider 
specific sources. 



*javax.net.ssl.KeyManagerFactory(KeyManagerFactorySpi,Provider,String)*

protected KeyManagerFactory(
  javax.net.ssl.KeyManagerFactorySpi factorySpi,
  java.security.Provider provider,
  java.lang.String algorithm)

Creates a KeyManagerFactory object. 

    factorySpi - the delegate 
    provider - the provider 
    algorithm - the algorithm 

*javax.net.ssl.KeyManagerFactory.getAlgorithm()*

public final |java.lang.String| getAlgorithm()

Returns the algorithm name of this KeyManagerFactory object. 

This is the same name that was specified in one of the getInstance calls that 
created this KeyManagerFactory object. 



    Returns: the algorithm name of this KeyManagerFactory object. 

*javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm()*

public static final |java.lang.String| getDefaultAlgorithm()

Obtains the default KeyManagerFactory algorithm name. 

The default algorithm can be changed at runtime by setting the value of the 
"ssl.KeyManagerFactory.algorithm" security property (set in the Java security 
properties file or by calling (|java.security.Security|) ) to the desired 
algorithm name. 



    Returns: the default algorithm name as specified in the Java security properties, or an 
             implementation-specific default if no such property exists. 

*javax.net.ssl.KeyManagerFactory.getInstance(String)*

public static final |javax.net.ssl.KeyManagerFactory| getInstance(java.lang.String algorithm)
  throws |java.security.NoSuchAlgorithmException|
         
Returns a KeyManagerFactory object that acts as a factory for key managers. 

This method traverses the list of registered security Providers, starting with 
the most preferred Provider. A new KeyManagerFactory object encapsulating the 
KeyManagerFactorySpi implementation from the first Provider that supports the 
specified algorithm is returned. 

Note that the list of registered providers may be retrieved via the 
Security.getProviders()(|java.security.Security|) method. 


    algorithm - the standard name of the requested algorithm. See the Java Secure Socket 
       Extension Reference Guide for information about standard algorithm 
       names. 

    Returns: the new KeyManagerFactory object. 

*javax.net.ssl.KeyManagerFactory.getInstance(String,Provider)*

public static final |javax.net.ssl.KeyManagerFactory| getInstance(
  java.lang.String algorithm,
  java.security.Provider provider)
  throws |java.security.NoSuchAlgorithmException|
         
Returns a KeyManagerFactory object that acts as a factory for key managers. 

A new KeyManagerFactory object encapsulating the KeyManagerFactorySpi 
implementation from the specified Provider object is returned. Note that the 
specified Provider object does not have to be registered in the provider list. 


    algorithm - the standard name of the requested algorithm. See the Java Secure Socket 
       Extension Reference Guide for information about standard algorithm 
       names. 
    provider - an instance of the provider. 

    Returns: the new KeyManagerFactory object. 

*javax.net.ssl.KeyManagerFactory.getInstance(String,String)*

public static final |javax.net.ssl.KeyManagerFactory| getInstance(
  java.lang.String algorithm,
  java.lang.String provider)
  throws |java.security.NoSuchAlgorithmException|
         |java.security.NoSuchProviderException|
         
Returns a KeyManagerFactory object that acts as a factory for key managers. 

A new KeyManagerFactory object encapsulating the KeyManagerFactorySpi 
implementation from the specified provider is returned. The specified provider 
must be registered in the security provider list. 

Note that the list of registered providers may be retrieved via the 
Security.getProviders()(|java.security.Security|) method. 


    algorithm - the standard name of the requested algorithm. See the Java Secure Socket 
       Extension Reference Guide for information about standard algorithm 
       names. 
    provider - the name of the provider. 

    Returns: the new KeyManagerFactory object. 

*javax.net.ssl.KeyManagerFactory.getKeyManagers()*

public final |javax.net.ssl.KeyManager|[] getKeyManagers()

Returns one key manager for each type of key material. 



    Returns: the key managers 

*javax.net.ssl.KeyManagerFactory.getProvider()*

public final |java.security.Provider| getProvider()

Returns the provider of this KeyManagerFactory object. 



    Returns: the provider of this KeyManagerFactory object 

*javax.net.ssl.KeyManagerFactory.init(KeyStore,char[])*

public final void init(
  java.security.KeyStore ks,
  char[] password)
  throws |java.security.KeyStoreException|
         |java.security.NoSuchAlgorithmException|
         |java.security.UnrecoverableKeyException|
         
Initializes this factory with a source of key material. 

The provider typically uses a KeyStore for obtaining key material for use 
during secure socket negotiations. The KeyStore is generally 
password-protected. 

For more flexible initialization, please see 
(|javax.net.ssl.KeyManagerFactory|) . 


    ks - the key store or null 
    password - the password for recovering keys in the KeyStore 

*javax.net.ssl.KeyManagerFactory.init(ManagerFactoryParameters)*

public final void init(javax.net.ssl.ManagerFactoryParameters spec)
  throws |java.security.InvalidAlgorithmParameterException|
         
Initializes this factory with a source of provider-specific key material. 

In some cases, initialization parameters other than a keystore and password may 
be needed by a provider. Users of that particular provider are expected to pass 
an implementation of the appropriate ManagerFactoryParameters as defined by the 
provider. The provider can then call the specified methods in the 
ManagerFactoryParameters implementation to obtain the needed information. 


    spec - an implementation of a provider-specific parameter specification 


